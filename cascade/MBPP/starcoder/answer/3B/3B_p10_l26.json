[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_list = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_list.append(element)\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # Create a set of unique elements from the two lists\n    unique_elements = set(test_tup1 + test_tup2)\n\n    # Create a list to store the shared elements\n    shared_elements = []\n\n    # Loop through the unique elements and add them to the shared_elements list if they are present in both lists\n    for element in unique_elements:\n        if element in test_tup1 and element in test_tup2:\n            shared_elements.append(element)\n\n    # Return the shared elements list\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create an empty set to hold the shared elements\n    shared_set = set()\n    \n    # loop through each element in the first tuple\n    for element in test_tup1:\n        # check if the element is also in the second tuple\n        if element in test_tup2:\n            # if it is, add it to the shared set\n            shared_set.add(element)\n    \n    # convert the shared set to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared_elements.append(item)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets from the two input tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # return the shared elements as a list\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # create sets from the two lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    intersect = set1.intersection(set2)\n    # convert the intersection to a list and return it\n    return list(intersect)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared.append(test_tup1[i])\n    return shared"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_not_prime(n):\n    if n <= 1:\n        return False\n\n    # Create a list of all numbers from 2 to n\n    sieve = [True] * (n + 1)\n    sieve[0] = False\n    sieve[1] = False\n\n    # Apply the Sieve of Eratosthenes algorithm to mark all non-prime numbers\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n + 1, i):\n                sieve[j] = False\n\n    # Check if all numbers from 2 to n are prime\n    return not all(sieve)"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0], primes[1] = False, False\n\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i*i, limit + 1, i):\n                primes[j] = False\n\n    return [i for i in range(2, limit + 1) if primes[i]]\n\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers using the Sieve of Eratosthenes algorithm.\n    '''\n    limit = int(math.sqrt(n))\n    primes = sieve_of_eratosthenes(limit)\n    if n in primes:\n        return False\n    else:\n        return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check if n is less than 2\n    if n < 2:\n        return True\n    # check if n is divisible by any number between 2 and n-1\n    for i in range(2, n):\n        if n % i == 0:\n            return True\n    # if none of the above conditions are met, n is a prime number\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a max heap with all the numbers in descending order\n    max_heap = [-num for num in nums]\n    hq.heapify(max_heap)\n    \n    # Extract the n largest numbers from the heap\n    result = []\n    while len(result) < n:\n        # If the heap is empty, add the maximum value to the result\n        if len(max_heap) == 0:\n            result.append(max_heap[0])\n        # If the heap is not empty, add the largest value from the heap to the result\n        else:\n            result.append(max_heap[0])\n            hq.heappop(max_heap)\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap of size n to store the n largest elements\n    max_heap = []\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappop(max_heap)\n                heapq.heappush(max_heap, num)\n    # convert the min-heap to a list of the n largest elements in descending order\n    return [heapq.heappop(max_heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a min heap of the first n elements\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n        \n    # Extract the largest n elements from the heap and return them as a list\n    largest_nums = []\n    for i in range(n):\n        largest_nums.append(heapq.heappop(heap))\n        \n    return largest_nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap of size n\n    max_heap = hq.nlargest(n, nums)\n    # extract the n largest elements from the heap\n    return [max_heap.pop() for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a min heap from the input list\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Remove the smallest element from the heap and append it to the output list\n    while len(heap) < n:\n        largest = hq.heappop(heap)\n        hq.heappush(heap, largest)\n    \n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n > len(nums):\n        return []\n    largest_heap = []\n    for num in nums:\n        hq.heappush(largest_heap, num)\n        if len(largest_heap) > n:\n            hq.heappop(largest_heap)\n    return largest_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min-heap of size n\n    hq.heapify(nums)\n    \n    # Pop the smallest n elements from the heap\n    result = []\n    for i in range(n):\n        result.append(hq.heappop(nums))\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    max_heap = []\n    heapq.heapify(max_heap)\n    for num in nums:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        elif num > max_heap[0]:\n            heapq.heappop(max_heap)\n            heapq.heappush(max_heap, num)\n    return [max_heap[i] for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    This function finds the n largest integers from a given list of numbers.\n    It returns them in descending order.\n    \"\"\"\n    # Create a min-heap from the first n numbers in the list\n    hq.heapify(nums[:n])\n    \n    # Extract the n largest numbers from the heap and return them as a list\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = []\n    for _ in range(n):\n        largest.append(hq.heappop(nums))\n    return largest[::-1]\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    power_of_two = 1\n    while power_of_two <= x:\n        power_of_two <<= 1\n    return power_of_two == x"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Calculate the binary representation of x\n    x_bin = bin(x)[2:]\n\n    # Find the position of the first different bit\n    for i in range(len(x_bin)):\n        if x_bin[i]!= '0':\n            return False\n\n    # Check if the first different bit is at the least significant bit position of x\n    return x & (x-1) == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0 or x == 1: # base case\n        return True\n    elif x%2 == 0: # even number\n        return is_Power_Of_Two(x//2)\n    else: # odd number\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the numbers to binary strings \n    binary_x = bin(x)[2:] \n    binary_y = bin(y)[2:] \n\n    # Compare the strings to check if they differ at one bit position only or not \n    if binary_x == binary_y: \n        return True \n    else: \n        return False "
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the input to binary \n    binary_x = bin(x)[2:] \n\n    # Check if the binary representation has only one '1' \n    if len(binary_x) == len(set(binary_x)) == 1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return False\n    while x > 1:\n        if x & 1!= x >> 1:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    elif x % 2 == 0:\n        if x == 1:\n            return False\n        else:\n            return is_Power_Of_Two(x // 2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two(x):\n    if x == 0:\n        return False\n    elif x == 1:\n        return True\n    else:\n        return is_Power_Of_Two(x//2)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # filter the words to only those that are at least 4 characters long\n    long_words = [word for word in words if len(word) >= 4]\n    # return the filtered words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w+\\b'\n    words = re.findall(pattern, text)\n    # Remove empty strings\n    words = [word for word in words if word!= '']\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    # Using regular expressions to find all words that are at least 4 characters long\n    words = re.findall(r'\\b\\w+\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    Write a function to find all words which are at least 4 characters long in a string.\n    \"\"\"\n    pattern = r'\\b[A-Za-z]{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a pattern to match all words with at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all matches in the text\n    matches = re.findall(pattern, text)\n    # Print all matches\n    print(matches)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**2)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of squares of individual elements in the input list.\n    \"\"\"\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # initialize variables \n    n = len(str)\n    m = 0\n    count = 0\n\n    # loop through each character of the string \n    for i in range(n-1): \n\n        # check if the current character matches the previous character \n        if str[i] == str[i+1]: \n\n            # if it does, increment the count of consecutive equal characters \n            count += 1\n\n        # if the count reaches the middle of the string, increment the minimum count \n        elif count == n//2: \n            m += 1\n            count = 0\n\n    # if there is any odd count at the end, increment the minimum count \n    if count > 0: \n        m += 1\n\n    # return the minimum count of rotations \n    return m"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \"\"\"\n    n = len(str)\n    # Check if the string is empty or has only one character\n    if n < 2:\n        return 0\n    # Check if the string is a palindrome\n    is_palindrome = True\n    for i in range(n//2):\n        if str[i]!= str[n-i-1]:\n            is_palindrome = False\n            break\n    if is_palindrome:\n        return 0\n    # Check if the string can be rotated to form a palindrome\n    for i in range(n//2):\n        # Check if the i-th character can be added to the end of the string\n        if str[:i] + str[i] + str[i+1:] == str + str[i]:\n            return 1 + find_Rotations(str[i])\n    # If no rotation was found, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    len_str = len(str)\n    min_rot = float('inf')\n    for i in range(len_str):\n        for j in range(i+1, len_str+1):\n            temp_str = str[i:j]\n            if temp_str == str[j:i] + str[i:j]:\n                min_rot = min(min_rot, len(temp_str) - 1)\n    return min_rot + 1 if min_rot!= float('inf') else 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # Initialize a boolean array of size n to keep track of whether each character is present in the string or not.\n    isPresent = [False] * 26\n    # Iterate over each character in the string and check if it is present in the array or not.\n    for ch in str:\n        if ch.isalpha():\n            ch = ord(ch.lower()) - ord('a')\n            if ch >= 0 and ch < 26:\n                isPresent[ch] = True\n    # If all characters are present, there is no rotation needed.\n    if all(isPresent):\n        return 0\n    # Initialize an integer variable to keep track of the minimum number of rotations required.\n    minRotations = n\n    # Iterate over all possible rotations of the string.\n    for i in range(n):\n        # Iterate over all possible rotations of the string from index i+1 to n-1.\n        for j in range(i+1, n):\n            # Create a new string by swapping the characters at index i and j.\n            newStr = str[i] + str[j] + str[i+1:j] + str[j+1:]\n            # Check if the new string is present in the array or not.\n            if all(isPresent):\n                minRotations = min(minRotations, j - i + 1)\n            else:\n                # If the new string is not present, check if it is possible to make it present by rotating the current string.\n                if all(isPresent[ord(ch.lower()) - ord('a')] for ch in newStr):\n                    minRotations = min(minRotations, j - i + 1)\n    return minRotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                count += 1\n                if count > 1:\n                    return 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    # Convert the string to a set to remove duplicates\n    str_set = set(str)\n\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Iterate over all possible rotations of the string\n    for i in range(len(str_set)):\n        # Convert the current rotation to a string and remove duplicates\n        rotation_set = set(str_set[i:])\n\n        # Calculate the minimum number of rotations required to get the same string\n        min_rotations = min(min_rotations, len(str_set) - len(rotation_set))\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Create a list of tuples, where each tuple contains a character and its frequency\n    char_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    \n    # Initialize the minimum number of rotations required\n    min_rotations = n\n    \n    # Iterate through the character frequency list and find the number of rotations required\n    for char, freq in char_freq:\n        # Calculate the number of rotations required for each character\n        rotations = (n + freq - 1) // freq\n        \n        # Update the minimum number of rotations required\n        min_rotations = min(min_rotations, rotations)\n    \n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    n = len(str)\n    count = 0\n    while n > 1:\n        count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    while n > 1:\n        n //= 2\n        rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for i in range(n):\n        if str[i] in freq:\n            freq[str[i]] += 1\n        else:\n            freq[str[i]] = 1\n\n    # store the indices of each character in the string\n    indices = {}\n    for i in range(n):\n        indices[str[i]] = i\n\n    # sort the string in ascending order of frequency and index\n    sorted_str = sorted(str, key=lambda x: (-freq[x], indices[x]))\n\n    # keep track of the current rotation count\n    rotation_count = 0\n\n    # loop through the sorted string and check if each character is the same as the previous character\n    for i in range(1, len(sorted_str)):\n        if sorted_str[i] == sorted_str[i-1]:\n            rotation_count += 1\n        else:\n            rotation_count = 0\n        if rotation_count > 1:\n            return rotation_count\n\n    return rotation_count"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of character from the string\n    s = s[1:]\n    # Removing last occurrence of character from the string\n    s = s[:-1]\n    # Returning modified string\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Check if the character to be removed exists in the string\n    if ch in s:\n        # Get the indices of the first and last occurrence of the character\n        first_occurrence = s.index(ch)\n        last_occurrence = s.rindex(ch)\n\n        # Check if the first occurrence is the only occurrence of the character\n        if first_occurrence == 0:\n            # Remove the first occurrence and return the remaining string\n            return s[1:]\n        # Check if the last occurrence is the only occurrence of the character\n        elif last_occurrence == len(s) - 1:\n            # Remove the last occurrence and return the remaining string\n            return s[:-1]\n        # Check if both first and last occurrences are not the only occurrences\n        else:\n            # Remove the first occurrence and the last occurrence\n            return s[:first_occurrence] + s[last_occurrence + 1:]\n    # If the character to be removed does not exist in the string, return the original string\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch, '')\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert string to list\n    l = list(s)\n    # remove first occurrence\n    l.remove(ch)\n    # remove last occurrence\n    l.remove(l[-1])\n    # convert list back to string\n    return ''.join(l)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # split the string into a list\n    lst = list(s)\n    # remove first occurrence of the character\n    if lst[0] == ch:\n        lst.pop(0)\n    # remove last occurrence of the character\n    if lst[-1] == ch:\n        lst.pop(-1)\n    # join the list into a string and return the result\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 0: \n        return s\n    \n    if s[0] == ch: \n        return remove_Occ(s[1:],ch) \n    elif s[-1] == ch: \n        return remove_Occ(s[:-1],ch) \n    else: \n        return s + remove_Occ(s[1:-1],ch) "
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0:\n        return \"Character not found in the string.\"\n    else:\n        return s.replace(ch,\"\").replace(ch,\"\",1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s) == 1:\n        return \"String contains only one occurrence of the given character.\"\n    elif s.count(ch) == 1:\n        return s.replace(ch, '')\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.strip() # remove any leading or trailing white spaces\n    if s.find(ch)!= -1: # check if the character is present\n        s = s.replace(ch, '', 1) # replace the character with an empty string\n        s = s.replace(ch, '', -1) # remove the last occurrence of the character\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '').replace(ch, '', 1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    row_sums = [sum(M[i]) for i in range(n)]\n    sorted_M = [[] for _ in range(n)]\n    for i in range(n):\n        sorted_M[i] = [M[j][i] for j in range(n) if j!= i]\n    sorted_M = [sorted(col) for col in sorted_M]\n    sorted_row_sums = [sum(sorted_M[i]) for i in range(n)]\n    return sorted_M, sorted_row_sums"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Get the number of rows and columns in the matrix\n    rows = len(M)\n    cols = len(M[0])\n\n    # Create a copy of the matrix\n    M_sorted = [row[:] for row in M]\n\n    # Sort the matrix in ascending order by sum of rows\n    for i in range(rows):\n        for j in range(cols - 1):\n            if M_sorted[i][j] + M_sorted[i][j + 1] > M_sorted[i][j + 1] + M_sorted[i][j]:\n                M_sorted[i][j], M_sorted[i][j + 1] = M_sorted[i][j + 1], M_sorted[i][j]\n\n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Find the maximum sum row\n    max_sum = 0\n    for i in range(len(M)):\n        row_sum = 0\n        for j in range(len(M[i])):\n            row_sum += M[i][j]\n        if row_sum > max_sum:\n            max_sum = row_sum\n    \n    # Create a list of tuples containing the matrix indices and their corresponding row sums\n    sums = []\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            sums.append((i, j, M[i][j]))\n    \n    # Sort the list of tuples based on the row sums\n    sums.sort(key=lambda x: x[2], reverse=True)\n    \n    # Extract the sorted indices and sort the corresponding rows\n    sorted_M = []\n    for i in range(len(sums)):\n        sorted_M.append(M[sums[i][0]][sums[i][1]])\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Step 1: Initialize the result matrix as a copy of the input matrix\n    result = M.copy()\n\n    # Step 2: Loop through each element in the input matrix and find the row with the smallest sum\n    for i in range(len(M)):\n        # Initialize the row with the smallest sum as the current row\n        min_row = i\n\n        # Loop through each element in the current row and find the row with the smallest sum\n        for j in range(i+1, len(M[i])):\n            # Compare the sum of the current row with the sum of the previous rows\n            if M[min_row][j] < M[i][j]:\n                # If the sum of the current row is smaller than the sum of the previous rows, update the min_row variable\n                min_row = j\n\n        # Step 3: Swap the elements of the current row with the elements of the row with the smallest sum\n        temp = result[i]\n        result[i] = result[min_row]\n        result[min_row] = temp\n\n    # Step 4: Return the sorted matrix\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # initialize a counter variable\n    count = 0\n\n    # loop through each row of the matrix\n    for row in M:\n        # sort the row in ascending order\n        row.sort()\n\n        # add the sum of the row to the counter variable\n        count += sum(row)\n\n    # sort the matrix in ascending order based on the sum of its rows\n    M.sort(key=lambda x: count - sum(x))\n\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # get the dimensions of the matrix\n    n = len(M)\n    m = len(M[0])\n    \n    # create a matrix to store the sorted matrix\n    sorted_M = [[0 for j in range(m)] for i in range(n)]\n    \n    # sort each row of the matrix in ascending order according to its sum\n    for i in range(n):\n        # initialize the current row with the first element of the row\n        current_row = [M[i][j] for j in range(m)]\n        # sort the current row in ascending order\n        current_row.sort()\n        # copy the sorted row into the sorted matrix\n        for j in range(m):\n            sorted_M[i][j] = current_row[j]\n            \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        row_sum = sum(M[i])\n        for j in range(i+1, n):\n            if sum(M[j]) < row_sum:\n                M[i], M[j] = M[j], M[i]\n                row_sum = sum(M[i])\n            elif sum(M[j]) == row_sum:\n                if M[j][i] < M[i][i]:\n                    M[i], M[j] = M[j], M[i]\n                    row_sum = sum(M[i])\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i]:\n                M[i][j], M[i][i] = M[i][i], M[i][j]\n            if M[j][i] < M[i][i]:\n                M[j][i], M[i][i] = M[i][i], M[j][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # Sort the rows in ascending order based on the sum of their rows\n    sorted_rows = sorted(M, key=lambda x: sums.index(sum(x)))\n    \n    # Return the sorted matrix\n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # check if matrix is empty\n    if len(M) == 0:\n        return M\n    \n    # check if matrix has only one row\n    if len(M) == 1:\n        return [[min(row) for row in M]]\n    \n    # find the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # find the row with the minimum sum\n    min_row = [row[row_sums.index(min(row_sums))] for row in M]\n    \n    # remove the minimum row from the matrix\n    M = [[row[i] for row in M if row!= min_row] for i in range(len(M[0]))]\n    \n    # recursively sort the matrix\n    return [sort_matrix(M) for _ in range(len(min_row))]"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n    V = l * b * h / 6\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the volume of the prism\n    V = (1/3) * l * b * h\n\n    # Return the volume of the prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 6\n    print(\"The volume of the triangular prism is:\", volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes the dimensions of a triangular prism (length, width and height) as input\n    and returns the volume of the prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/6\n    print(\"The volume of the triangular prism is:\",volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    This function takes the dimensions of a triangular prism (base length, width, and height) as input and returns the volume of the triangular prism.\n    \"\"\"\n\n    # Calculate the area of the triangle\n    area = 0.5 * l * b\n\n    # Calculate the volume of the triangular prism\n    volume = area * h\n\n    # Return the volume of the triangular prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n\n    :param l: Length of the base of the prism.\n    :param b: Length of the side of the prism.\n    :param h: Height of the prism.\n    :return: The volume of the triangular prism.\n    \"\"\"\n    area = 0.5 * l * b\n    volume = area * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h \n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l * b * h / 3\n    print(\"The volume of the triangular prism is:\", volume)\n    \n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_([a-z]+)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r'([a-z])_+'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=[a-z])(?=[a-z])'\n    match = re.search(pattern, text)\n    return bool(match)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z_]+[a-z]$'\n    return re.match(pattern, text)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def text_lowercase_underscore(text):\n    pattern = r'^[a-z]+_[a-z]+$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z]+)_+([a-z]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z_]+)'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    first_set = set(string)\n    second_set = set(''.join(chr(i) for i in range(NO_OF_CHARS)))\n    result = []\n    for char in string:\n        if char not in first_set and char not in second_set:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Create a list of characters that are present in the second string\n    list_of_chars = [chr(i) for i in range(NO_OF_CHARS)]\n\n    # Split the first string into characters\n    chars_list = [char for char in string]\n\n    # Loop through the characters and remove the characters present in the second string\n    for i in range(len(chars_list)):\n        if chars_list[i] in list_of_chars:\n            chars_list.pop(i)\n            i -= 1\n\n    # Convert the list of characters back to a string\n    result_string = ''.join(chars_list)\n\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_to_remove = set(string)\n    return [char for char in string if char not in list_to_remove]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of all ASCII characters\n    ascii_list = list(range(NO_OF_CHARS))\n\n    # convert the first string to a list of integers\n    first_list = [ord(char) for char in string]\n\n    # remove the characters from the first list which are present in the second list\n    for char in first_list:\n        if char in ascii_list:\n            ascii_list.remove(char)\n\n    # convert the list of integers back to a list of ASCII characters\n    result = [chr(char) for char in first_list]\n\n    # join the list of ASCII characters into a string\n    result_string = ''.join(result)\n\n    return result_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    \"\"\"\n    This function takes a string as an input and removes all the characters present in the second string from the first string.\n    \"\"\"\n    str_list = list(string)\n    char_set = set(list(string))\n    for char in char_set:\n        if char in string:\n            str_list.remove(char)\n    return ''.join(str_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string to a list\n    string_list = list(string)\n\n    # convert the second string to a set\n    set2 = set(string)\n\n    # iterate over the first string\n    for i in range(len(string_list)):\n        # if the character is in the set2, remove it from the list\n        if string_list[i] in set2:\n            del string_list[i]\n\n    # convert the list back to a string\n    return ''.join(string_list)\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n\nif __name__ == '__main__':\n    string1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    string2 = 'XYZ'\n    result = str_to_list(string1)\n    print(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    for char in string:\n        if char in char_set:\n            string = string.replace(char, '')\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2):\n    # create an empty list to store the characters in the first string that are not in the second string\n    result = []\n\n    # loop through each character in the first string\n    for char in string1:\n        # if the character is not in the second string, append it to the result list\n        if char not in string2:\n            result.append(char)\n\n    # return the result list\n    return result\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq = {}\n    for num in arraynums:\n        # If the element is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n    \n    # Check if any element appears more than once in the dictionary\n    for num in freq:\n        if freq[num] > 1:\n            return True\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    unique_nums = set(arraynums)\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == 0:\n        return False\n    \n    unique = True\n    for i in range(len(arraynums)):\n        if arraynums[i] in arraynums[i+1:]:\n            unique = False\n            break\n    \n    return unique"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        else:\n            seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements and their occurrences\n    count = {}\n    for num in arraynums:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    # Check if there are any duplicate elements\n    for num in count:\n        if count[num] > 1:\n            return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums)!= len(set(arraynums)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Convert the array to a set to remove duplicates\n    setnums = set(arraynums)\n\n    # Check if the length of the set is equal to the length of the original array\n    if len(setnums) == len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Initialize a dictionary to store the index of each element in the array\n    indices = {}\n    # Iterate through the array\n    for i in range(len(arraynums)):\n        # If the element is already in the dictionary, return True\n        if arraynums[i] in indices:\n            return True\n        # Otherwise, add the index to the dictionary\n        indices[arraynums[i]] = i\n    # If no duplicate element is found, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Check if the given number is divisible by 4 and 5\n    if x % 4 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x >= 100 and x % 10 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # check if the number is divisible by 7 \n    if x % 7 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x > 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    # Check if the given number is a multiple of 3, 4 or 5\n    if x % 3 == 0 or x % 4 == 0 or x % 5 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    woodball = [1, 3, 7, 9, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n    if x in woodball:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x**0.5)+1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return \"The number is even\"\n    else:\n        return \"The number is odd\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 0 or x > 1000:\n        return False\n    if x % 2 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    rev_num = 0\n    temp = num\n    while temp!= 0:\n        rev_num = rev_num * 10 + temp % 10\n        temp //= 10\n    return num < 2 * rev_num - num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Reverse the number\n    reversed_num = str(num)[::-1]\n    # Convert the reversed number to an integer\n    reversed_int = int(reversed_num)\n    # Check if the reversed integer is one less than twice the original integer\n    if reversed_int - 2 * num == 1:\n        print(num, 'is one less than twice its reverse.')\n    else:\n        print(num, 'is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        reverse = reverse * 10 + digit\n        temp //= 10\n    \n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return True if num == 10 else False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num == (2 * int(str(num)[::-1])) - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = 0\n    while num > 0:\n        reversed_num = reversed_num * 10 + num % 10\n        num //= 10\n    return reversed_num < 2 * reversed_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    \n    while temp!= 0:\n        digit = temp % 10\n        rev_num = rev_num*10 + digit\n        temp //= 10\n    \n    return (num - 1) == (2 * rev_num)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        rev_num = rev_num * 10 + digit\n        temp //= 10\n    \n    return num - rev_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # convert the number to a string\n    num_str = str(num)\n\n    # reverse the string\n    rev_str = num_str[::-1]\n\n    # convert the reversed string to an integer\n    rev_int = int(rev_str)\n\n    # check if the original number is one less than twice its reverse\n    if num - 2 * rev_int == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    temp = num\n    while temp > 0:\n        reverse_num = reverse_num*10 + temp%10\n        temp //= 10\n    return num-reverse_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))  # convert string to list of integers\n    arr.sort(reverse=True)  # sort the list in descending order\n    result = 0\n    for i in arr:\n        result = result * 10 + i\n        if result > 2**31 - 1:  # check if the number exceeds 2^31 - 1\n            return \"Overflow\"\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    def helper(arr, start, end):\n        if start == end:\n            return arr[start]\n        elif arr[start] > arr[end]:\n            return arr[start] + helper(arr, start+1, end)\n        else:\n            return arr[end] + helper(arr, start, end-1)\n\n    return helper(arr, 0, len(arr)-1)\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    max_num = 0 \n    for num in arr : \n        max_num = max(max_num, num) \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n\n    # Find the maximum number from the given list of digits\n    max_num = max(arr)\n\n    # Create a list of digits from the maximum number\n    digits = []\n    while max_num > 0:\n        digits.append(max_num % 10)\n        max_num //= 10\n\n    # Reverse the list of digits\n    digits.reverse()\n\n    # Find the maximum sum that can be formed with the digits\n    max_sum = 0\n    for i in range(len(arr)):\n        max_sum = max(max_sum, arr[i]*digits[i])\n\n    return max_sum"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True) # Sort the digits in descending order\n    max_num = int(''.join(str(i) for i in arr)) # Convert the sorted digits into a single integer\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    max_num = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    for m in range(l+1, len(arr)):\n                        for n in range(m+1, len(arr)):\n                            for o in range(n+1, len(arr)):\n                                max_num = max(max_num, arr[i] + arr[j] + arr[k] + arr[l] + arr[m] + arr[n] + arr[o])\n\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # Sort the array in descending order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize the result with the first element of the array\n    result = arr[0]\n\n    # Iterate over the remaining elements of the array\n    for i in range(1, len(arr)):\n        # Compute the sum of the current element and the result\n        temp = arr[i] + result\n\n        # Update the result if the sum is greater than the previous result\n        if temp > result:\n            result = temp\n\n    return result"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the input array in ascending order\n    arr.sort()\n    # Initialize the maximum number to be formed with the first digit\n    max_num = arr[0]\n    # Iterate through the remaining digits in the array\n    for digit in arr[1:]:\n        # Calculate the current number formed with the previous digit and the current digit\n        current_num = max_num * 10 + digit\n        # Update the maximum number if the current number is greater\n        max_num = current_num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if i!= j:\n                max_num += int(arr[i])*int(arr[j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the largest possible number that can be formed from the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            num = 0\n            for k in range(i, j):\n                num = num*10 + arr[k]\n            if num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x>0 and y<0) or (x<0 and y>0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # Check if the signs of x and y are opposite or not\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    if x*y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > 0 and y > 0) or (x < 0 and y < 0):\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x > 0 and y < 0 or x < 0 and y > 0:\n        print(\"The given integers have opposite signs\")\n    else:\n        print(\"The given integers have same signs\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    if x>0 and y>0 or x<0 and y<0:\n        print(\"The two integers have opposite signs.\")\n    else:\n        print(\"The two integers do not have opposite signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function checks whether the given two integers have opposite sign or not.\n\n    :param x: An integer value.\n    :param y: An integer value.\n    :return: A boolean value indicating whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    elif x == 0 and y == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x>=0 and y>=0: # Both x and y are positive\n        return \"Both x and y are positive\"\n    elif x<0 and y<0: # Both x and y are negative\n        return \"Both x and y are negative\"\n    elif x<=0 and y<=0: # One of x or y is positive and the other is negative\n        return \"One of x or y is positive and the other is negative\"\n    else: # One of x or y is negative and the other is positive\n        return \"One of x or y is negative and the other is positive\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 8\n    elif n == 2:\n        return 20\n    elif n == 3:\n        return 52\n    elif n == 4:\n        return 120\n    elif n == 5:\n        return 324\n    elif n == 6:\n        return 808\n    elif n == 7:\n        return 2032\n    elif n == 8:\n        return 5876\n    else:\n        return \"Invalid input. Please enter a number from 0 to 8.\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return (n * (3 * n - 1)) ** 2 \n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    # Initialize a variable to store the octagonal number\n    octagonal_num = 0\n    \n    # Loop from n to 1\n    for i in range(n, 1, -1):\n        # Add the value of i to the octagonal number\n        octagonal_num += i\n        \n        # If the octagonal number becomes greater than 2^64, return False\n        if octagonal_num > 2**64:\n            return False\n    \n    # If the loop completes without finding a negative number greater than 2^64, return True\n    return True\n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    max_octagonal = n * (3 ** 0.5)\n    for i in range(1, max_octagonal + 1):\n        if i ** 2 + i == 8 * i - 1:\n            print(i)\n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    def octagonal_number(n):\n        return (8 * n**2) - 1\n    return octagonal_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n\n    def octagonal_helper(n):\n        \"\"\"\n        Helper function for calculating the nth octagonal number.\n        \"\"\"\n        if n < 0:\n            raise ValueError(\"n cannot be negative\")\n        result = 0\n        for i in range(n):\n            result += i ** 2\n        return result\n\n    if n < 0:\n        raise ValueError(\"n cannot be negative\")\n    else:\n        return octagonal_helper(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize variables\n    octagonal_num = 1\n    a = 1\n    \n    # Iterate through n times\n    for i in range(1, n+1):\n        # Calculate the current octagonal number\n        octagonal_num = octagonal_num * a\n        \n        # If i is an even number, add 2 to the octagonal number\n        if i % 2 == 0:\n            octagonal_num += 2\n        \n        # If i is odd, multiply the octagonal number by 2\n        else:\n            octagonal_num *= 2\n        \n        # Update the value of a\n        a += 1\n        \n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return int((n * (2 * n - 1)) ** 0.5) + 1"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is greater than 1000\n    if n > 1000:\n        return \"Invalid Input\"\n\n    # Calculate the nth octagonal number\n    octagonal_number = (n * (3*n - 1)) / 2\n\n    return octagonal_number"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    for i in range(1, n+1):\n        a += (i*(3*i-1))/2\n    return a"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            count = sum(int(digit) for digit in substring)\n            if count == len(substring):\n                count_dict[substring] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        substring = s[i:]\n        for j in range(len(substring)):\n            count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if int(substring) == len(substring):\n                count_dict[len(substring)] += 1\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Convert the string to lowercase and remove all non-alphanumeric characters\n    s = ''.join(filter(str.isalnum, s)).lower()\n\n    # Initialize a defaultdict to store the count of substrings\n    count = defaultdict(int)\n\n    # Iterate over all possible substrings\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring from s\n            substring = s[i:j]\n\n            # Check if the substring contains only digits and its sum is equal to its length\n            if substring.isdigit() and sum(int(digit) for digit in substring) == len(substring):\n                # If it contains only digits and its sum is equal to its length, increment the count\n                count[substring] += 1\n\n    # Return the count of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # dictionary to store the frequency of each digit\n    freq = defaultdict(int)\n\n    # loop through each character in the string\n    for c in s:\n        # if the character is a digit, add 1 to the corresponding frequency\n        if c.isdigit():\n            freq[int(c)] += 1\n\n    # initialize the count variable\n    count = 0\n\n    # loop through each possible substring\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # get the sum of the digits in the substring\n            sum_digits = sum(int(c) for c in s[i:j+1])\n\n            # if the sum of the digits is equal to the length of the substring, increment the count\n            if sum_digits == len(s[i:j+1]):\n                count += 1\n\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        count[s[i]] += 1\n\n    result = 0\n    for key, value in count.items():\n        substring_sum = sum(int(digit) for digit in key)\n        if substring_sum == len(key):\n            result += value\n\n    return result"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a defaultdict to store the count of each substring\n    substring_count = defaultdict(int)\n    # loop through all the characters in the string\n    for i in range(len(s)):\n        # loop through all the characters starting from i to the end of the string\n        for j in range(i, len(s)):\n            # calculate the sum of digits in the substring\n            substring_sum = sum(int(d) for d in s[i:j+1])\n            # add the count of the substring to the defaultdict\n            substring_count[substring_sum] += 1\n    # return the count of substrings\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Create a dictionary to store the frequency of each digit\n    digit_count = defaultdict(int)\n    for char in s:\n        digit_count[int(char)] += 1\n    \n    # Calculate the sum of digits for each substring\n    substrings = []\n    for i in range(len(s)):\n        for j in range(i, len(s) + 1):\n            substring = s[i:j]\n            if len(set(substring)) == len(substring) and sum(int(digit) for digit in substring) == len(substring):\n                substrings.append(substring)\n    \n    # Count the number of substrings with sum of digits equal to their length\n    count = 0\n    for substring in substrings:\n        count += digit_count[len(substring)]\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # creating a dictionary to store the count of substrings with the sum of digits equal to their length\n    count = defaultdict(int)\n\n    # loop through the given string\n    for i in range(len(s)):\n        # loop through the remaining characters of the string\n        for j in range(i+1, len(s)+1):\n            # extract the substring and calculate the sum of digits\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            # store the count of substrings with the given substring and sum of digits equal to the length of the substring\n            count[digit_sum] += 1\n\n    # return the count of substrings with the sum of digits equal to their length\n    return count[len(s)]"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError('List is empty')\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][1], test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize the maximum difference variable\n    max_diff = 0\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(test_list)-1):\n        # Calculate the difference between the first elements of the current pair\n        diff = test_list[i][0] - test_list[i+1][0]\n        \n        # Update the maximum difference if the calculated difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Initialize variables to store the minimum and maximum values\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Loop through the list of tuples\n    for num in test_list:\n        # If the first value is smaller than the minimum value, update the minimum value\n        if num[0] < min_val:\n            min_val = num[0]\n\n        # If the second value is greater than the maximum value, update the maximum value\n        if num[1] > max_val:\n            max_val = num[1]\n\n    # Return the difference between the maximum and minimum values\n    return max_val - min_val"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the list of tuples in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference to be the difference between the first and second elements\n    max_diff = abs(test_list[1][0] - test_list[0][0])\n\n    # Loop through the sorted list of tuples\n    for i in range(1, len(test_list)):\n        # Calculate the difference between the current and next elements\n        diff = abs(test_list[i][0] - test_list[i-1][1])\n\n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize maximum difference to zero\n    max_diff = 0\n\n    # Iterate over the tuple list\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between current pair and next pair\n        diff = abs(test_list[i+1][0] - test_list[i][1])\n\n        # Update maximum difference if the new difference is greater\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, test_list[i][1]-test_list[j][1])\n    return diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value (i.e., the subject)\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n\n    Args:\n    subjectmarks (list): A list of tuples containing subject marks.\n\n    Returns:\n    list: The sorted list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif isinstance(data_list[0], list):\n        return recursive_list_sum([x for sublist in data_list for x in sublist])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    \n    def flatten(data_list, result=None):\n        '''\n        Flatten a list and store the result in the given result list.\n        '''\n        if result is None:\n            result = []\n        for item in data_list:\n            if isinstance(item, list):\n                flatten(item, result)\n            else:\n                result.append(item)\n        return result\n    \n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    \n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(recursive_list_sum(item))\n            else:\n                flat_list.append(item)\n        return recursive_list_sum(flat_list)\n    else:\n        return data_list\n\ndef flatten_and_sum(data_list):\n    '''\n    A wrapper function that calls recursive_list_sum function to flatten the list and sum all of its elements.\n    '''\n    return recursive_list_sum(data_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list has only one element, return it\n    if len(data_list) == 1:\n        return data_list[0]\n    \n    # Recursive case: add the first element of the list and the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: empty list or single element list\n    if len(data_list) == 0 or isinstance(data_list[0], list):\n        return 0\n    # recursive case: concatenate the first element and the sum of the rest\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case\n        return 0\n    else:\n        if isinstance(data_list[0], list):\n            return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n        else:\n            return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    flattened_list = [num for sublist in data_list for num in sublist]\n    return sum(flattened_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return len([x for x in list if x > 0])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return (2*n - 1) * bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    def backtrack(start, end, count):\n        if start > end:\n            if count == 0:\n                return 1\n            return 0\n        if count == 0:\n            return backtrack(start+1, end, 1)\n        return backtrack(start, end, count-1) + backtrack(start+1, end, count+1)\n\n    return backtrack(1, n, 0)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    - n: An integer representing the number of Bell numbers to partition.\n\n    Returns:\n    - An integer representing the number of ways to partition the set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set to 1\n    ways_to_partition = 1\n\n    # Loop through the range of the number of Bell numbers\n    for i in range(1, n+1):\n        # Calculate the number of ways to partition this set of Bell numbers\n        num_ways = 0\n        for j in range(i):\n            # Calculate the number of ways to partition the j-th Bell number\n            num_ways += ways_to_partition // (j+1) * (i-j)\n        # Update the number of ways to partition for the next iteration\n        ways_to_partition = num_ways\n\n    # Return the final number of ways to partition the set of Bell numbers\n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Create a list of Bell numbers\n    bell = [0] * (n + 1)\n    bell[0], bell[1] = 0, 1\n    \n    # Fill the list with Bell numbers\n    for i in range(2, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2]\n    \n    # Return the number of ways to partition the set\n    return bell[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    def helper(count, p, prev_p):\n        if count == n:\n            return 1\n        elif count == 0:\n            return 1 if p > 1 else 0\n        else:\n            return helper(count-1, p, prev_p) + helper(count, p+1, prev_p)\n\n    p = 2\n    count = 0\n    result = 0\n\n    while p <= 100:\n        if sum_digits(p) == 1:\n            count = 0\n            prev_p = 1\n            while helper(count, p, prev_p) == 0:\n                count += 1\n                prev_p = p\n            result += factorial(count)\n            p += 1\n\n    return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*bell_number(n//2)\n    else:\n        return bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): the number of Bell numbers to be partitioned\n\n    Returns:\n    int: the number of ways to partition the Bell numbers\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    # This function finds the number of ways to partition a set of Bell numbers\n    # using dynamic programming.\n\n    # Initialize the first two Bell numbers\n    bell_numbers = [0, 1]\n\n    # Iterate through the remaining Bell numbers\n    for i in range(2, n+1):\n        # Initialize the current Bell number as 0\n        current_bell = 0\n\n        # Iterate through the previous Bell numbers\n        for j in range(len(bell_numbers)):\n            # If the current Bell number is greater than or equal to the jth\n            # previous Bell number, then add 1 to the current Bell number\n            if bell_numbers[j] >= i:\n                current_bell += 1\n\n        # Update the list of Bell numbers with the current Bell number\n        bell_numbers.append(current_bell)\n\n    # Return the final number of Bell numbers in the list\n    return len(bell_numbers)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n    \n    if A[1] > A[0]: \n        for i in range(1, len(A)-1): \n            if A[i+1] < A[i]: \n                return False\n        return True\n    \n    elif A[1] < A[0]: \n        for i in range(1, len(A)-1): \n            if A[i+1] > A[i]: \n                return False\n        return True\n    \n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Check if all elements are equal\n    if A[0] == A[-1]:\n        return True\n    \n    # Check if the array is monotonic increasing or decreasing\n    for i in range(1, len(A)-1):\n        if A[i] > A[i-1] and A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i-1] and A[i] < A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    This function checks whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    \n    if A[0] < A[1] and all(A[i] < A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] > A[1] and all(A[i] > A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # Initialize variables\n    first = A[0]\n    prev = A[0]\n\n    for i in range(1, len(A)):\n        # Check if the current element is greater than the previous element\n        if A[i] > prev:\n            # Check if the array is monotonic or not\n            if A[i] <= first:\n                return False\n            else:\n                return True\n        prev = A[i]\n\n    # If the loop is terminated because all elements are the same, it means the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n\n    Parameters:\n    A (list): list of integers\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n\n    Time Complexity: O(n), where n is the length of the input list\n\n    Space Complexity: O(1)\n    '''\n\n    if len(A) < 2: \n        return True\n\n    if A[0] < A[1]: \n        for i in range(1, len(A)): \n            if A[i] < A[i-1]: \n                return False\n        return True\n\n    if A[0] > A[1]: \n        for i in range(1, len(A)): \n            if A[i] > A[i-1]: \n                return False\n        return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check for monotonicity\n    if len(A) == 1:\n        return True\n    elif A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 3:\n        return True\n    \n    if A[0] == A[1]:\n        if A[2] >= A[1]:\n            return False\n        else:\n            return is_Monotonic(A[1:])\n    elif A[0] >= A[1]:\n        if A[2] >= A[0]:\n            return is_Monotonic(A[1:])\n        else:\n            return False\n    else:\n        if A[2] <= A[0]:\n            return is_Monotonic(A[1:])\n        else:\n            return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n):\n        if i == 0 or A[i] <= A[i-1]:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    \n    i = 0\n    j = 0\n    \n    while i < len(l) and j < len(s):\n        if l[i] == s[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j + 1\n            j = 0\n            \n    if j == len(s):\n        return True\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if not l:\n        return False\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        raise TypeError('Both input must be lists')\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes two parameters, l and s. l is the list and s is the sublist.\n    It checks whether the sublist exists in the list or not.\n    '''\n    if len(s) > len(l):\n        return False\n    else:\n        for i in range(len(l)-len(s)+1):\n            if l[i:i+len(s)] == s:\n                return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    if s[0] not in l:\n        return False\n    return is_sublist(l[1:], s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if all(x in s for x in l[i:i+len(s)]) and len(s) == len(set(s)):\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(set(i)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    else:\n        for i in range(1, len(Input)):\n            if len(Input[i])!= len(Input[0]):\n                return False\n        return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n\n    # initialize the gap\n    gap = n // 2\n\n    while gap > 0:\n        # iterate over the list until the gap is reached\n        for i in range(gap, n):\n            # compare the current element with the next one\n            if nums[i] < nums[i-gap]:\n                # swap them if they're not in the correct order\n                nums[i], nums[i-gap] = nums[i-gap], nums[i]\n        # shrink the gap by half\n        gap //= 2"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = (gap + 1) // 2\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap //= 1\n        swapped = False\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        if not swapped:\n            break\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        if not swapped:\n            gap = gap // 1.3\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        # Find the largest gap and reduce gap size by 1/4\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n        \n        # Reduce gap size to half\n        gap = int(gap/2)\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Sorts a list of numbers using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = n // 10\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        n -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        gap = int(gap / 1.3)\n\n        if gap < 1:\n            gap = 1\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    \n    while swapped:\n        swapped = False\n        \n        for i in range(n-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n    \n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    # Initialize some variables\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    # Main loop\n    while gap > 1 or swapped:\n\n        # Calculate the new gap size\n        gap = int(gap / 1.3)\n\n        # Set the swapped flag to true\n        swapped = False\n\n        # Main loop for the gap size\n        for i in range(n - gap):\n\n            # If the elements are in the wrong order, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Update the gap size for the next iteration\n        gap = int(gap * 1.3)\n\n        # Check if the gap size has reached 1, which means the list is already sorted\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    if n < 0:\n        return \"Number is negative\"\n    else:\n        i = int(n**0.5)\n        j = int(i**2)\n        if i*i == n:\n            return \"True\"\n        elif j == n:\n            return \"True\"\n        else:\n            return \"False\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    # check if the input is a positive integer\n    if type(n)!= int or n < 0: \n        return \"Invalid input\"\n    \n    # check if the input is a palindrome\n    if str(n) == str(n)[::-1]: \n        return \"The given number is a palindrome.\"\n    \n    # check if the input is a square\n    if n == int(n ** 0.5) ** 2: \n        return \"The given number can be represented as the difference of two squares.\"\n    else: \n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and (n//i)**2 == i:\n            print(f'{n} can be represented as the difference of {i} and {n//i}')\n            return True\n    print(f'{n} cannot be represented as the difference of two squares')\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        return \"Please enter a positive integer.\"\n\n    # Check if n can be represented as the difference of two squares\n    if n % 4 == 0:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return \"Please enter a positive integer.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if (i**2)+(j**2) == n:\n                return True\n            if (i**2)+(n-j**2) == n:\n                return True\n            if (n-i**2)+(j**2) == n:\n                return True\n            if (n-i**2)+(n-j**2) == n:\n                return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 1:\n        return False\n    for i in range(int(n**0.5)+1):\n        if n - i*i == 0 or n - i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the given number is less than 2\n    if n < 2:\n        return False\n\n    # check if the given number can be represented as the difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        if i * i == n:\n            return True\n        if i * i > n:\n            break\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n > 1000:\n        return \"Number too large\"\n    elif n < 0:\n        return \"Number cannot be negative\"\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n - (i*i) == i*i:\n                return \"The given number can be represented as the difference of two squares\"\n        return \"The given number cannot be represented as the difference of two squares\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        print(\"The given number cannot be represented as the difference of two squares.\")\n        return\n    else:\n        for i in range(1, int(n**0.5)+1):\n            if n-i*i == i*i:\n                print(\"The given number can be represented as the difference of two squares.\")\n                return\n        print(\"The given number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Initialize variables\n    last_pattern = patterns[0]\n    current_color = colors[0]\n    last_color = colors[0]\n    count = 0\n    \n    # Loop through the colors and patterns\n    for i in range(1, len(colors)):\n        # Check if the colors match the current pattern\n        if patterns[i] == last_pattern:\n            # If they do, check if the current color is the same as the last color\n            if current_color == last_color:\n                count += 1\n            else:\n                return False\n        else:\n            # If the patterns don't match, reset the count to 0\n            count = 0\n        \n        # Update the last color and current color\n        last_color = current_color\n        current_color = colors[i]\n    \n    # Check if the entire sequence has been used\n    if count == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Initialize the index and color count to zero\n    index = 0\n    color_count = 0\n\n    # Loop through the colors and patterns lists\n    for color in colors:\n        # Check if the current color is the same as the pattern at the current index\n        if color == patterns[index]:\n            # Increment the index and color count\n            index += 1\n            color_count += 1\n        else:\n            # Reset the index and color count if the current color is not the same as the pattern at the current index\n            index = 0\n            color_count = 0\n\n        # Check if the index and color count have reached the length of the patterns array\n        if index == len(patterns):\n            # If they have, return True since the colors follow the patterns in the array\n            return True\n\n    # If the loop completes without returning True, it means the colors do not follow the patterns in the array\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    n = len(colors)\n    for i in range(n):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # create a dictionary to store the color pattern pairs\n    color_patterns = {}\n\n    # iterate through the colors array and store the color pattern pairs\n    for i in range(len(colors)):\n        color = colors[i]\n        pattern = patterns[i]\n        color_patterns[color] = pattern\n\n    # iterate through the patterns array and check if each pattern is followed by the previous pattern\n    for i in range(1, len(patterns)):\n        current_pattern = patterns[i]\n        previous_pattern = patterns[i-1]\n        if current_pattern!= previous_pattern:\n            # if the current pattern is not followed by the previous pattern, return False\n            return False\n\n    # if all the patterns are followed by each other, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # Convert patterns to list\n    patterns = list(patterns)\n    \n    # Initialize variables\n    index = 0\n    current_pattern = patterns[0]\n    pattern_index = 0\n    \n    # Check if colors are consistent with patterns\n    while index < len(colors):\n        if colors[index]!= current_pattern[pattern_index]:\n            return False\n        \n        index += 1\n        pattern_index += 1\n        \n        # Check if current pattern is complete\n        if pattern_index == len(current_pattern):\n            pattern_index = 0\n            current_pattern = patterns[index]\n    \n    # Check if there are any patterns left in the list\n    if pattern_index!= 0:\n        return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    # check if the number of colors is the same as the number of patterns\n    if len(colors)!= len(patterns):\n        return False\n\n    # check if the colors are in the same order as in the patterns\n    color_patterns = {}\n    for i in range(len(colors)):\n        if colors[i] in color_patterns:\n            color_patterns[colors[i]].append(patterns[i])\n        else:\n            color_patterns[colors[i]] = [patterns[i]]\n\n    for pattern in patterns:\n        if pattern not in color_patterns:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns)!= len(colors):\n        return False\n    else:\n        color_count = {}\n        for color in colors:\n            if color in color_count:\n                color_count[color] += 1\n            else:\n                color_count[color] = 1\n        for pattern in patterns:\n            for i in range(len(pattern)):\n                if color_count[pattern[i]] == 0:\n                    return False\n                else:\n                    color_count[pattern[i]] -= 1\n        return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for color in colors:\n        if color == patterns[pattern_index]:\n            pattern_index += 1\n        else:\n            return False\n    if pattern_index == len(patterns):\n        return True\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    filtered_tuples = []\n    for tup in test_list:\n        if sum(tup) % K == 0:\n            filtered_tuples.append(tup)\n    return filtered_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    divisible_tuples = []\n    for tuple_ in test_list:\n        if all(i % K == 0 for i in tuple_):\n            divisible_tuples.append(tuple_)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Filter the list of tuples based on the condition that all elements should be divisible by K\n    result = [tup for tup in test_list if all(x % K == 0 for x in tup)]\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        # check if all elements are divisible by K\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the tuples\n    result = []\n\n    # Loop through each tuple in the given list\n    for tup in test_list:\n        # Check if all elements in the tuple are divisible by K\n        if all(x % K == 0 for x in tup):\n            # If all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(elem % K == 0 for elem in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    \n    # Loop through the list of tuples\n    for t in test_list:\n        # Check if all elements are divisible by K\n        if all(x % K == 0 for x in t):\n            # Add the tuple to the result list\n            result.append(t)\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tuple_ in test_list:\n        if all(num % K == 0 for num in tuple_):\n            divisible_tuples.append(tuple_)\n    return divisible_tuples"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, else False.\n    \"\"\"\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    \"\"\"\n    Write a python function to find whether a number is divisible by 11.\n    \"\"\"\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n % 11 == 0)"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word, \"is odd length.\")\n        else:\n            print(word, \"is even length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string into a list of words\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of the word is odd\n            return False # return False if length is odd\n    return True # return True if all lengths are even"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0: # if the length is even, print \"even\"\n        print(\"even\")\n    else: # if the length is odd, print \"odd\"\n        print(\"odd\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"{word} is even.\")\n        else:\n            print(f\"{word} is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    for word in s.split(): \n        if len(word) % 2!= 0: \n            print(\"The length of the word is odd.\") \n            break "
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words using whitespace as the delimiter\n    words = s.split()\n    # loop through each word and check its length\n    for word in words:\n        # check if the length of the word is odd or even\n        if len(word) % 2 == 0:\n            print(f\"{word} is an even length word.\")\n        else:\n            print(f\"{word} is an odd length word.\")"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 5\n    c = 10\n    d = 15\n\n    for i in range(1, n+1):\n        a, b, c, d = b, c, a + b + c + d\n\n    return a"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Calculate the sum of cubes of numbers from 1 to n\n    sum_cubes = (n * n * (n + 1)) // 6\n    \n    # Find the square root of the sum of cubes\n    square_root = sum_cubes ** 0.5\n    \n    # Find the cube root of the square root\n    cube_root = square_root ** 3\n    \n    # Calculate the nth tetrahedral number\n    tetrahedral_num = int(cube_root - 1)\n    \n    return tetrahedral_num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def phi(n):\n        \"\"\"\n        Compute the nth Fibonacci number.\n        \"\"\"\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return phi(n-1) + phi(n-2)\n    \n    def psi(n, phi_n):\n        \"\"\"\n        Compute the nth psi function using the formula psi(n) = n * phi(n).\n        \"\"\"\n        return n * phi_n\n    \n    def psi_sum(n):\n        \"\"\"\n        Compute the sum of the psi(n) values up to n.\n        \"\"\"\n        psi_sum = 0\n        for i in range(1, n+1):\n            psi_sum += psi(i, phi(i))\n        return psi_sum\n    \n    return psi_sum(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n += 1\n    return (10**(n-1))*(4*n+1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    tetrahedral_numbers = [1, 4, 6, 10, 15, 20, 27, 35, 45, 56, 69, 84, 101, 120, 141, 164, 190, 217, 246, 277, 310, 345, 382, 421, 462, 505, 550, 597, 646, 697, 750, 805, 862, 921, 982, 1045, 1110, 1177, 1246, 1317, 1390, 1465, 1542, 1621, 1702, 1785, 1870, 1957, 2046, 2137, 2230, 2325, 2422, 2521, 2622, 2725, 2830, 2937, 3046, 3157, 3270, 3385, 3502, 3621, 3742, 3865, 4000]\n    if n <= 100:\n        return tetrahedral_numbers[n-1]\n    else:\n        return tetrahedral_number(n-1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Define the formula\n    formula = (1/6)*(((n*(n+1)*(n+2)*(n+3))**2)-((n*(n-1)*(n-2)*(n-3))**2))\n    \n    # Calculate the result\n    result = formula**(1/4)\n    \n    # Return the result\n    return int(result)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 4\n    else:\n        return 1/3 * (n(n-1)(n-2)(n-3) + n(n-1)(n-2)(n-4) + n(n-1)(n-3)(n-4) + n(n-1)(n-4)(n-3))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 4 * (tetrahedral_number(n-1) - tetrahedral_number(n-2) + 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Initialize the result to 0\n    result = 0\n    \n    # Loop from 1 to n\n    for i in range(1, n+1):\n        # Calculate the number of triangles that can be formed with sides of length i\n        triangles = (n-i+1)*i*i\n        \n        # Add up the number of triangles to the result\n        result += triangles\n    \n    # Return the result\n    return result"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n\nprint(volume_sphere(10)) # Output: 418.8802606557395"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # Calculate the volume using the formula V = (4/3)\u03c0r^3\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r as input and returns the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * (r**3)\n    return vol"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char += char\n        char = char % 26\n        char = chr(char)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize a variable to store the sum of ASCII values of characters\n    sum_ascii = 0\n    # iterate through each character of the string\n    for char in strr:\n        # convert each character to its ASCII value\n        ascii_value = ord(char)\n        # add the ASCII value to the sum of ASCII values of characters\n        sum_ascii += ascii_value\n    # return the character made by adding the ASCII value of all the characters of the given string modulo 26\n    return chr((sum_ascii % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char_i in strr:\n        char += ord(char_i)\n    return chr(char % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize a variable to store the sum of ASCII values of characters\n    sum_ascii = 0\n    \n    # Iterate through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value of the character to the sum\n        sum_ascii += ascii_value\n    \n    # Convert the sum to its character value by taking the modulo 26\n    char_value = (sum_ascii % 26)\n    \n    # Return the character value as the output\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_val = 0\n    for i in strr:\n        char_val += ord(i)\n    return chr(char_val % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # initialize variable for sum\n    sum = 0\n    # iterate over each character of the string\n    for char in strr:\n        # convert character to its ASCII value\n        ascii_value = ord(char)\n        # add the ASCII value to the sum\n        sum += ascii_value\n    # return the character made by adding the ASCII value of all characters modulo 26\n    return chr((sum % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_sum = ascii_sum % 26\n    return chr(char_sum)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    # Initialize an empty string to store the encrypted characters\n    result = \"\"\n    # Iterate over each character in the given string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value of the current character modulo 26 to the result string\n        result += chr((ascii_val + 13) % 26)\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    char_value = total % 26\n    char = chr(ord('A') + char_value)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to hold the ASCII value of the first character of the string\n    ascii_val = ord(strr[0])\n    # Iterate over all the remaining characters in the string\n    for char in strr[1:]:\n        # Add the ASCII value of the current character to the previous ASCII value and get the new ASCII value modulo 26\n        new_ascii_val = (ascii_val + ord(char)) % 26\n        # Set the new ASCII value as the current ASCII value for the next iteration\n        ascii_val = new_ascii_val\n    # Return the character made by adding the ASCII value of all the characters of the string modulo 26\n    return chr(ascii_val)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(n-1):\n        next_sequence = []\n        for j in range(len(sequence)):\n            next_sequence.append(sequence[j] + sequence[j+1])\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n\n    sequence = [1, 1]\n\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return sequence(n-1) + sequence(n-2) "
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n+1):\n        sequence.append(sequence[-1] + 3*sequence[-1])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [1]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            seq.append(seq[-1]*2)\n        else:\n            seq.append(seq[-1]+1)\n    return seq[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0] * (n+1)\n    sequence[1] = 1\n    sequence[2] = 1\n    for i in range(3, n+1):\n        sequence[i] = 2 * sequence[i-1] - sequence[i-2]\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n\n    for i in range(2, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if i % 2 == 0:\n            sequence.append(sequence[i - 2] + sequence[i - 4])\n        else:\n            sequence.append(sequence[i - 2] - sequence[i - 4])\n    return sequence[n - 1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # pi is a built-in variable in Python\n    area = 4 * math.pi * r * r\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # calculate the surface area using the formula for the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4*math.pi*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 2 * a + 1\n    c = 3 * a + 2\n    d = 4 * a + 3\n\n    i = 1\n    j = 1\n    while i <= n:\n        while j <= n:\n            print(a, end=' ')\n            j += 1\n        i += 1\n        j = 1\n        a, b, c, d = b, c, d, 2 * a + 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Define the first centered hexagonal number as 1\n    first_centered_hexagonal = 1\n\n    # Calculate the total number of centered hexagonal numbers\n    total_centered_hexagonal = first_centered_hexagonal + (n - 1) * 2\n\n    # Calculate the sum of centered hexagonal numbers\n    sum_of_centered_hexagonal = first_centered_hexagonal + first_centered_hexagonal + 1\n\n    # Calculate the number of digits in the sum of centered hexagonal numbers\n    digits_in_sum = len(str(sum_of_centered_hexagonal))\n\n    # Calculate the number of digits in the total centered hexagonal numbers\n    digits_in_total = len(str(total_centered_hexagonal))\n\n    # Calculate the difference between the number of digits in the sum of centered hexagonal numbers and the total centered hexagonal numbers\n    difference = abs(digits_in_sum - digits_in_total)\n\n    # Calculate the quotient of the difference by 2 and round it up to the nearest integer\n    quotient = int(difference / 2) + 1\n\n    # Calculate the nth centered hexagonal number by subtracting the quotient from the total centered hexagonal numbers\n    nth_centered_hexagonal = total_centered_hexagonal - quotient\n\n    return nth_centered_hexagonal"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    num = 1\n    for i in range(n):\n        num *= 6\n    return num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the base and the radius of the hexagon\n    base = 1\n    radius = 1\n\n    # Iterate n times to get the nth centered hexagonal number\n    for i in range(n):\n        # Calculate the x and y coordinates of the center of the hexagon\n        x = (radius + base) / 2\n        y = (radius + base) / 2 - radius\n\n        # Print the coordinates\n        print(f'({x:.2f}, {y:.2f})')\n\n        # Update the base and the radius of the hexagon\n        base = base + 2 * radius\n        radius = radius - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    This function takes an integer n and returns the nth centered hexagonal number.\n\n    The centered hexagonal number is defined as follows:\n\n    For n = 0, the centered hexagonal number is 1.\n\n    For n = 1, the centered hexagonal number is 6.\n\n    For n = 2, the centered hexagonal number is 21.\n\n    For n = 3, the centered hexagonal number is 75.\n\n    For n = 4, the centered hexagonal number is 230.\n\n    For n = 5, the centered hexagonal number is 785.\n\n    For n = 6, the centered hexagonal number is 2320.\n\n    For n = 7, the centered hexagonal number is 7870.\n\n    For n = 8, the centered hexagonal number is 23210.\n\n    For n = 9, the centered hexagonal number is 78710.\n\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 6\n    elif n == 2:\n        return 21\n    elif n == 3:\n        return 75\n    elif n == 4:\n        return 230\n    elif n == 5:\n        return 785\n    elif n == 6:\n        return 2320\n    elif n == 7:\n        return 7870\n    elif n == 8:\n        return 23210\n    elif n == 9:\n        return 78710\n    else:\n        return centered_hexagonal_number(n-1) + centered_hexagonal_number(n-2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    hex_num = 0\n    a = 1\n    b = 1\n    c = 2\n\n    for _ in range(1, n+1):\n        hex_num += a\n        a, b, c = b, c, 3*a - b\n\n    return hex_num"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    def centered_hexagonal_helper(n, a, b, c):\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return centered_hexagonal_helper(n-1, b, c, 2*a - b)\n\n    if n < 0:\n        print(\"Please enter a positive integer value for n\")\n    elif n == 0:\n        print(\"The centered hexagonal number for n=0 is 0\")\n    elif n == 1:\n        print(\"The centered hexagonal number for n=1 is 1\")\n    elif n == 2:\n        print(\"The centered hexagonal number for n=2 is 3\")\n    else:\n        a = 1\n        b = 2\n        c = 1\n        n -= 1\n        centered_hexagonal_helper(n, a, b, c)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # A centered hexagonal number is a number that is centered on the number 6.\n    # It is given by the formula:\n    # h(n) = 6/2*(n^2 - n + 6)\n    # To find the nth centered hexagonal number, we need to solve for n.\n    # For n=0, the centered hexagonal number is 12.\n    if n == 0:\n        return 12\n    # For n>0, we need to find a number h(n-1) such that h(n-1) < 12.\n    # We can use binary search to do this.\n    low = 0\n    high = 12\n    while low < high:\n        mid = (low + high) // 2\n        if centered_hexagonal_number(mid) < 12:\n            low = mid + 1\n        else:\n            high = mid\n    # We have found the number h(n-1) such that h(n-1) < 12.\n    # So we can find the nth centered hexagonal number by solving for n.\n    # We can use the formula:\n    # h(n) = 6/2*(n^2 - n + 6)\n    # We can evaluate this formula for each value of n and return the result.\n    for i in range(1, n+1):\n        hexagonal_number = 6/2 * (i*i - i + 6)\n        if hexagonal_number == centered_hexagonal_number(i):\n            return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # initialize the variables\n    center = 1\n    up = 1\n    down = 2\n    sum_centered_hex = 0\n    \n    # calculate the nth centered hexagonal number\n    for i in range(n):\n        sum_centered_hex = center * up + center * down\n        center += 1\n        up += 1\n        down += 2\n    \n    return sum_centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the base of the centered hexagonal number sequence\n    base = 0.8660254037844386\n    \n    # Initialize a variable to store the centered hexagonal number sequence\n    centered_hexagonal = []\n    \n    # Loop n times to generate centered hexagonal number sequence\n    for i in range(n):\n        # Calculate the centered hexagonal number at index i\n        hexagonal = i + 1 - 0.5 * (i+1)**2\n        \n        # Append the centered hexagonal number to the sequence\n        centered_hexagonal.append(hexagonal)\n    \n    # Return the centered hexagonal number sequence\n    return centered_hexagonal"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: A merged dictionary with all the key-value pairs from the three input dictionaries.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the key-value pairs from the three input dictionaries.\n    \n    The function first uses the merge_dictionaries function from the collections module\n    to merge the two input dictionaries. It then uses a loop to iterate over the\n    remaining keys in the third dictionary and add them to the merged dictionary\n    if they don't already exist.\n    \n    The function returns the merged dictionary.\n    '''\n    \n    merged_dict = ct.merge_dictionaries(dict1, dict2)\n    \n    for key, value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    \n    # Iterate through the three dictionaries and merge their values\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine the two dictionaries\n    combined_dict = dict1.copy()\n    combined_dict.update(dict2)\n\n    # Combine the combined dictionary with the third dictionary\n    merged_dict = dict1.copy()\n    merged_dict.update(combined_dict)\n    merged_dict.update(dict3)\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Initialize an empty dictionary to store the merged result\n    merged_dict = {}\n\n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # If it is, check if the value is a list or not\n            if isinstance(merged_dict[key], list):\n                # If it is, add the value to the existing list\n                merged_dict[key].append(dict1[key])\n            else:\n                # If it isn't, convert the existing value to a list and add it to the new list\n                merged_list = [merged_dict[key]]\n                merged_list.append(dict1[key])\n                merged_dict[key] = merged_list\n        else:\n            # If the key isn't already in the merged dictionary, add it to the dictionary with its value\n            merged_dict[key] = dict1[key]\n\n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # If it is, check if the value is a list or not\n            if isinstance(merged_dict[key], list):\n                # If it is, add the value to the existing list\n                merged_dict[key].append(dict2[key])\n            else:\n                # If it isn't, convert the existing value to a list and add it to the new list\n                merged_list = [merged_dict[key]]\n                merged_list.append(dict2[key])\n                merged_dict[key] = merged_list\n        else:\n            # If the key isn't already in the merged dictionary, add it to the dictionary with its value\n            merged_dict[key] = dict2[key]\n\n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Check if the key is already in the merged dictionary\n        if key in merged_dict:\n            # If it is, check if the value is a list or not\n            if isinstance(merged_dict[key], list):\n                # If it is, add the value to the existing list\n                merged_dict[key].append(dict3[key])\n            else:\n                # If it isn't, convert the existing value to a list and add it to the new list\n                merged_list = [merged_dict[key]]\n                merged_list.append(dict3[key])\n                merged_dict[key] = merged_list\n        else:\n            # If the key isn't already in the merged dictionary, add it to the dictionary with its value\n            merged_dict[key] = dict3[key]\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return dict(freq_dict)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(lst)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary containing the frequency of all the elements in the list.\n    '''\n    freq = collections.defaultdict(int)\n    for item in lst:\n        freq[item] += 1\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return dict(freq)"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        else:\n            freq_dict[elem] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smaller = float('inf')\n    for i in range(N, 0, -1):\n        if i < smaller:\n            smaller = i\n    return smaller"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = N\n    while num > 1:\n        if abs(N - num) < abs(N - (num - 1)):\n            num -= 1\n        else:\n            num += 1\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    \n    # loop through all the numbers between 1 and N\n    for i in range(2, N+1):\n        # check if i is closer to the closest number\n        if abs(N - i) < abs(closest - N):\n            closest = i\n    \n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Initialize variables\n    closest_smaller_num = None\n    smallest_num = float('inf')\n\n    # Loop through all numbers from 1 to N\n    for num in range(1, N+1):\n\n        # Check if the number is smaller than the current closest smaller number\n        if num < smallest_num:\n            smallest_num = num\n\n        # Check if the current number is closer to the closest smaller number than the previous closest smaller number\n        if abs(num - smallest_num) < abs(closest_smaller_num - smallest_num):\n            closest_smaller_num = num\n\n    # Return the closest smaller number\n    return closest_smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # initialize variables\n    diff = float('inf')\n    num = N\n\n    # loop through all numbers between 1 and n\n    for i in range(1, N + 1):\n        # calculate the difference between current number and n\n        current_diff = abs(i - N)\n\n        # update the diff and num if the current difference is smaller\n        if current_diff < diff:\n            diff = current_diff\n            num = i\n\n    # return the closest smaller number\n    return num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    for i in range(1, N+1):\n        if smallest > i:\n            smallest = i\n    return smallest\n\nprint(closest_num(10)) # Output: 9"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    n = int(input(\"Enter a number: \"))\n    if N >= n:\n        print(\"The closest smaller number is:\", n-1)\n    else:\n        print(\"The closest smaller number is:\", n+1)"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    smallest = float('inf')\n    closest = float('inf')\n    for i in range(1, N+1):\n        if i <= N/2:\n            if abs(i-N) < closest:\n                closest = abs(i-N)\n                smallest = i\n        else:\n            if abs(N-i) < closest:\n                closest = abs(N-i)\n                smallest = i\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    min_num = float('inf')\n    for i in range(N, 0, -1):\n        if i < min_num:\n            min_num = i\n            break\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    closest = N\n    smallest = N\n    \n    # Loop through the list from 1 to N-1\n    for i in range(1, N):\n        if i < smallest:\n            closest = i\n            smallest = i\n    \n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list of strings as input and returns the length of the longest word in the list.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list of words.\n    '''\n    # initialize the length of the longest word to zero\n    max_len = 0\n    \n    # loop through each word in the list\n    for word in list1:\n        # if the length of the current word is greater than the current max length, update max_len\n        if len(word) > max_len:\n            max_len = len(word)\n    \n    # return the length of the longest word found\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Initialize variables to hold longest word length and current word length\n    longest_length = 0\n    current_length = 0\n\n    # Loop through each word in the list and update the current word length\n    for word in list1:\n        current_length = len(word)\n\n        # Update the longest word length if necessary\n        if current_length > longest_length:\n            longest_length = current_length\n\n    # Return the longest word length\n    return longest_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if sub_str in word:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found in the string!\")\n    else:\n        print(\"Substring not found in the string.\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for word in str1:\n        if word in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list):\n        for item in str1:\n            if item in sub_str:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str_list, sub_str):\n    for string in str_list:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # check if the list of string values contains the substring\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list:\n        raise TypeError(\"The first argument must be a list of string values\")\n    if type(sub_str)!= str:\n        raise TypeError(\"The second argument must be a string value\")\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(f\"{sub_str} is present in {str1}\")\n    else:\n        print(f\"{sub_str} is not present in {str1}\")"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    This function takes a positive integer n as input and returns True if n is undulating, False otherwise.\n\n    An undulating number is a number whose digits alternate from left to right, such as 123456 or 987654.\n    '''\n\n    # Convert the number to a string\n    n_str = str(n)\n\n    # Check if the first and last digits are the same\n    if n_str[0] == n_str[-1]:\n        # Check if the digits alternate from left to right\n        for i in range(len(n_str)-1):\n            if n_str[i] == n_str[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Check whether the given number is undulating or not.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    if n < 0 or n > 100: \n        return \"Invalid input\" \n    else: \n        sum_of_digits = 0\n        for digit in str(n): \n            sum_of_digits += int(digit)\n        if sum_of_digits % 4 == 0: \n            return \"Undulating\" \n        else: \n            return \"Not undulating\" "
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n < 0:\n        return False\n    elif n == 0:\n        return True\n    elif n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    digits = [int(d) for d in str(n)]\n    return sum(digits) == abs(n)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # Base case: if n is less than 3, it is always undulating\n    if n < 3:\n        return True\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Check if n is divisible by 3\n    if n % 3 == 0:\n        return True\n\n    # If none of the above conditions are true, n is undulating\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether the given number is undulating or not.\n    A number is considered undulating if it is divisible by 10 and 13.\n    '''\n    \n    if n % 10 == 0 and n % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(2, int(n/2)+1):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    previous_count = 0\n\n    # Check if the given number is equal to 1 or less\n    if n <= 1:\n        return False\n\n    # Loop through the given number n\n    for i in range(1, n):\n        # Check if the count is equal to the previous count\n        if count == previous_count:\n            return True\n\n        # Update the count and previous count\n        count += i\n        previous_count = count\n\n    # If the loop completes without finding an undulating number, return False\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 100:\n        return True\n    elif n > 10 and n % 2 == 0:\n        return True\n    elif n > 5 and n % 5 == 0:\n        return True\n    elif n > 2 and n % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b < 0:\n        return 1 / power(a, -b)\n    else:\n        result = a\n        for _ in range(b - 1):\n            result *= a\n        return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_val = None\n    min_index = None\n\n    for i in range(len(test_list)):\n        if min_val is None or test_list[i][1] < min_val:\n            min_val = test_list[i][1]\n            min_index = i\n\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value using the sorted() function with the key argument set to itemgetter(1)\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the index of the first tuple with the smallest second value\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = None\n    min_value = float('inf')\n    for i, t in enumerate(test_list):\n        if t[1] < min_value:\n            min_value = t[1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_minimum(test_list):\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    '''\n    min_length = float('inf')\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = None\n    for sublist in lst:\n        if not min_length or len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 999999999\n    for i in lst:\n        length = len(i)\n        if length < min_length:\n            min_length = length\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])  \n    for i in range(len(lst)):  \n        if len(lst[i]) < min_length:  \n            min_length = len(lst[i])  \n    return min_length  "
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as an input and returns the number of divisors of that integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # create an empty dictionary to store frequency\n    freq_dict = {}\n\n    # loop through each element in the list1\n    for element in list1:\n        # if the element is not already in the dictionary, add it with a frequency of 1\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        # otherwise, increment the frequency of the element by 1\n        else:\n            freq_dict[element] += 1\n\n    # return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    \n    # loop through each element in the list\n    for item in list1:\n        # check if the element is already in the dictionary\n        if item in freq_dict:\n            # if it is, increment its frequency by 1\n            freq_dict[item] += 1\n        else:\n            # if it isn't, add it to the dictionary with a frequency of 1\n            freq_dict[item] = 1\n    \n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n\n    # Use a dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through the flattened list of lists\n    for elem in list1:\n        # if the element is not in the dictionary, add it with a value of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # if the element is already in the dictionary, increment its value by 1\n        else:\n            freq_dict[elem] += 1\n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for subitem in item:\n            if subitem in freq_dict:\n                freq_dict[subitem] += 1\n            else:\n                freq_dict[subitem] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n    list1 (list): a list of lists to flatten and count the frequency of each element\n\n    Returns:\n    dict: a dictionary where the keys are the elements in list1, and the values are the frequencies of those elements in list1\n    \"\"\"\n    flat_list = []\n    for sublist in list1:\n        flat_list.extend(sublist)\n    freq_dict = {}\n    for item in flat_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store frequency of each element\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is a list, recursively call the function to find frequency of each element in the list\n        if type(elem) == list:\n            freq_dict.update(frequency_lists(elem))\n        # If the element is not a list, update the frequency count in the dictionary\n        else:\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            else:\n                freq_dict[elem] = 1\n    \n    # Return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total/len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    \n    result = total / len(numbers)\n    \n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    result = product/len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result = result * num\n    result = result / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base case: n is 0 or 1\n    if n == 0 or n == 1:\n        return str(n)\n    # Recursive case: convert the rightmost digit and then convert the remaining number to binary\n    else:\n        # Find the rightmost digit\n        rightmost_digit = n % 2\n        # Remove the rightmost digit and convert the remaining number to binary\n        remaining_binary = decimal_to_binary(n//2)\n        # Append the rightmost digit to the front of the remaining binary string\n        return str(rightmost_digit) + remaining_binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_str = ''\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n //= 2\n    return binary_str"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n    # loop through each digit of the decimal number\n    for digit in str(n):\n        # convert each digit to its binary equivalent\n        if digit == \"0\":\n            binary += \"0\"\n        elif digit == \"1\":\n            binary += \"1\"\n        # if the digit is a non-binary digit, return an error message\n        else:\n            return \"Error: Non-binary digit found.\"\n    # return the binary equivalent as a string with no leading zeros\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Convert the decimal number to binary and remove leading zeros\n    binary = bin(n)[2:]\n    \n    # Pad the binary string with leading zeros to make it a fixed length\n    binary = '0'*(8-len(binary)) + binary\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    # Convert decimal to binary using bitwise operators\n    binary = bin(n)[2:]  # bin() function returns a string representing the binary representation of the given number\n\n    # Pad the binary string with leading zeros if necessary\n    return '0'*(8-len(binary)) + binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Initialize an empty string to store the binary equivalent of the decimal number\n    binary_number = \"\"\n\n    # While n is greater than 0\n    while n > 0: \n        # Get the last digit of n and convert it to binary using bitwise operators\n        last_digit = n & 1 \n        # Append the binary representation of the last digit to the binary_number string\n        binary_number = str(last_digit) + binary_number\n        # Divide n by 2 and discard the remainder\n        n >>= 1\n\n    # Reverse the binary_number string to get the final binary representation\n    binary_number = binary_number[::-1]\n\n    # Return the final binary_number string\n    return binary_number"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input number to a string\n    num_str = str(num)\n\n    # Find the last non-zero digit in the number\n    last_nonzero_index = -1\n    for i, digit in enumerate(num_str):\n        if digit!= '0':\n            last_nonzero_index = i\n            break\n\n    # Add 1 to the last non-zero digit and find the corresponding palindrome\n    palindrome = int(num_str[:last_nonzero_index+1] + str(int(num_str[:last_nonzero_index+1]) + 1))\n\n    return palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the input integer to a string\n    input_str = str(num)\n    # Reverse the string\n    reversed_str = input_str[::-1]\n    # Find the smallest integer greater than the input integer\n    smallest_int = int(reversed_str) + 1\n    # Convert the smallest integer to a string\n    smallest_str = str(smallest_int)\n    # Check if the reversed string is a palindrome\n    if smallest_str == reversed_str:\n        # If it is, return the smallest integer\n        return smallest_int\n    # If the reversed string is not a palindrome, find the largest integer smaller than the input integer\n    else:\n        largest_int = int(smallest_str[::-1]) - 1\n        # Convert the largest integer to a string\n        largest_str = str(largest_int)\n        # Check if the smallest string is a palindrome\n        if largest_str == smallest_str:\n            # If it is, return the largest integer\n            return largest_int\n        # If the largest string is not a palindrome, return -1 to indicate failure\n        else:\n            return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n        \"\"\"\n        return str(num) == str(num)[::-1]\n\n    def is_even(num):\n        \"\"\"\n        Helper function to check if a number is even.\n        \"\"\"\n        return num % 2 == 0\n\n    # Find the smallest even number greater than num\n    smallest_even = num + 2\n    while is_even(smallest_even):\n        smallest_even += 2\n\n    # Find the smallest palindrome greater than num\n    smallest_palindrome = smallest_even\n    while not is_palindrome(smallest_palindrome):\n        smallest_palindrome += 1\n\n    # Calculate the next smallest palindrome\n    next_smallest_palindrome = smallest_palindrome - num\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize a flag variable to keep track of the smallest palindrome found so far\n    is_smallest = True\n    smallest = num\n    \n    # Keep finding the next smallest palindrome while the current palindrome is odd and the flag is True\n    while is_smallest:\n        current = num * 10\n        current = current + 1\n        \n        # Check if the current palindrome is a palindrome\n        if str(current) == str(current)[::-1]:\n            # If it is, update the smallest palindrome found so far and set the flag to False\n            if current < smallest:\n                smallest = current\n                is_smallest = False\n                \n        # Check if the current palindrome is the largest palindrome\n        elif current > num * 10:\n            is_smallest = False\n            \n    return smallest"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    A helper function to check if a number is a palindrome.\n    '''\n    if num < 0:\n        num = -num\n    reversed_num = 0\n    while num > 0:\n        remainder = num % 10\n        reversed_num = (reversed_num * 10) + remainder\n        num //= 10\n    return num == reversed_num\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    smallest_palindrome = num\n    while True:\n        if is_palindrome(smallest_palindrome):\n            return smallest_palindrome\n        smallest_palindrome += 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef next_smallest_palindrome(num):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_prime(num):\n        while True:\n            if is_prime(num + 1):\n                return num + 1\n            num += 1\n\n    def next_smallest_palindrome(num):\n        def is_palindrome(num):\n            return str(num) == str(num)[::-1]\n\n        def is_prime(num):\n            if num < 2:\n                return False\n            for i in range(2, int(num**0.5) + 1):\n                if num % i == 0:\n                    return False\n            return True\n\n        def next_prime(num):\n            while True:\n                if is_prime(num + 1):\n                    return num + 1\n                num += 1\n\n        while True:\n            if is_palindrome(num):\n                return num\n\n            next_num = next_prime(num)\n            if next_num > num:\n                break\n\n            num = next_num\n\n    def next_palindrome(num):\n        if is_palindrome(num):\n            return num\n        else:\n            return next_palindrome(num + 1)\n\n    return next_palindrome(num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome or not.\n    '''\n    # Convert the number to a string and reverse it\n    num_str = str(num)[::-1]\n    # Compare the reversed number with the original number\n    if num_str == str(num):\n        return True\n    else:\n        return False\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Initialize the current palindrome as the given number\n    curr_pal = num\n    # Initialize the next palindrome to be the smallest number greater than the given number\n    next_pal = num + 1\n    # Check if the next palindrome is also a palindrome\n    while not is_palindrome(next_pal):\n        next_pal += 1\n    # Return the next palindrome\n    return next_pal"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the input integer to a string and reverse it\n    num_str = str(num)[::-1]\n\n    # Check if the reversed string is a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment the last character and reverse the string again\n        last_char = num_str[::-1].pop()\n        num_str = str(int(num_str) + 1)[::-1]\n        num_str = ''.join(num_str)\n        num_str = int(num_str[::-1])\n\n        # Check if the reversed string is a palindrome again and increment the last character if necessary\n        while num_str[::-1]!= num_str[::-1][::-1]:\n            last_char = num_str[::-1].pop()\n            num_str = str(int(num_str) + 1)[::-1]\n            num_str = ''.join(num_str)\n            num_str = int(num_str[::-1])\n\n    # If the reversed string is not a palindrome or it was already the last character, try to reverse the original number and increment the last character\n    else:\n        # Reverse the original number\n        num_str = str(num)[::-1]\n        last_char = num_str[::-1].pop()\n\n        # Increment the last character and reverse the string again\n        num_str = str(int(num_str) + 1)[::-1]\n        num_str = ''.join(num_str)\n        num_str = int(num_str[::-1])\n\n        # Check if the reversed string is a palindrome again and increment the last character if necessary\n        while num_str[::-1]!= num_str[::-1][::-1]:\n            last_char = num_str[::-1].pop()\n            num_str = str(int(num_str) + 1)[::-1]\n            num_str = ''.join(num_str)\n            num_str = int(num_str[::-1])\n\n    # Return the next smallest palindrome as an integer\n    return num_str + last_char"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Find the largest palindrome smaller than the input integer\n    largest_palindrome = 0\n    while True:\n        palindrome = num * 10 + num\n        if palindrome < num:\n            break\n        largest_palindrome = palindrome\n\n    # Check if the largest palindrome is a palindrome\n    if largest_palindrome < num * 10:\n        return largest_palindrome\n\n    # Find the next smallest palindrome\n    smallest_palindrome = largest_palindrome + 1\n    while True:\n        palindrome = smallest_palindrome * 10 + smallest_palindrome\n        if palindrome <= largest_palindrome:\n            break\n        smallest_palindrome = palindrome\n\n    return smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Returns True if the input number is a palindrome, False otherwise.\n    '''\n    reversed_num = int(str(num)[::-1])\n    return num == reversed_num\n\ndef next_smallest_palindrome(num):\n    '''\n    Returns the next smallest palindrome of the input number.\n    '''\n    smallest_palindrome = None\n    is_negative = False\n    \n    if num < 0:\n        is_negative = True\n        num = abs(num)\n    \n    for i in range(1000000, -1, -1):\n        candidate_palindrome = i * i\n        if is_palindrome(candidate_palindrome) and (not smallest_palindrome or candidate_palindrome < smallest_palindrome):\n            smallest_palindrome = candidate_palindrome\n    \n    if is_negative:\n        smallest_palindrome = -smallest_palindrome\n    \n    return smallest_palindrome\n\nif __name__ == '__main__':\n    if len(sys.argv) < 2:\n        print('Usage: python next_smallest_palindrome.py <integer>')\n        sys.exit(1)\n    \n    num = int(sys.argv[1])\n    next_num = next_smallest_palindrome(num)\n    print('Next smallest palindrome of', num, 'is', next_num)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 1\n        right = len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == k:\n                return arr[mid]\n            elif arr[mid] < k:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, len(arr)\n        while left < right:\n            mid = left + (right - left) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid\n        return arr[left - 1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    \n    left, right = 1, len(arr)\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if mid == k - 1:\n            return arr[mid - 1]\n        elif mid < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= 0 or k > len(arr):\n        return None\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 1, n - k + 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if arr[mid-1] < arr[mid]:\n                right = mid\n            else:\n                left = mid + 1\n        return arr[left-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        return \"Error: k is greater than the length of the array.\"\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k-1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n\n    if k < 1 or k > len(arr):\n        return None\n\n    left, right = 1, len(arr)\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid - 1] < arr[mid]:\n            if k == mid:\n                return arr[mid - 1]\n            elif k < mid:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if k == mid:\n                return arr[mid]\n            elif k < mid:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    \"\"\"\n    Write a function to find the kth element in the given array using 1-based indexing.\n    \"\"\"\n    return arr[k - 1]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i]\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words back into a camel case string\n    return ''.join(words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].upper()\n        elif i > 0 and word[i] == \"_\":\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i]\n    return camel_word.title()"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = ''\n    words = word.split('_')\n    for i in range(len(words)):\n        if i == 0:\n            camel_case += words[i].lower()\n        else:\n            camel_case += words[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[i].upper() if i!= 0 and word[i-1]!= '_' else word[i].lower() for i in range(len(word))])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = \"\"\n    for i, letter in enumerate(word):\n        if i == 0 or letter.isupper():\n            camel_case += letter.lower()\n        else:\n            camel_case += \"_\" + letter.lower()\n    return camel_case\n"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for letter in word:\n        if letter == '_':\n            camel_case += letter\n        else:\n            camel_case += letter.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    words = word.split('_')\n    # Capitalize the first letter of each word and join them\n    return ''.join([word.capitalize() for word in words])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if word[i].isupper():\n            if i == 0:\n                camel_case += word[i].lower()\n            else:\n                camel_case += \"_\" + word[i].lower()\n        else:\n            camel_case += word[i]\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            count += 1\n            if count == n*m:\n                return i*j\n\nn = int(input(\"Enter the value of n: \"))\nm = int(input(\"Enter the value of m: \"))\n\nresult = eulerian_num(n, m)\nprint(\"The Eulerian number is:\", result)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Args:\n    n (int): The number of rows in the triangle.\n    m (int): The number of columns in the triangle.\n\n    Returns:\n    int: The value of a(n, m).\n    \"\"\"\n\n    # Check if the input is valid\n    if n <= 0 or m <= 0:\n        return \"Invalid input\"\n\n    # Initialize the triangle\n    triangle = [[1] * m for _ in range(n)]\n\n    # Fill the upper half of the triangle\n    for i in range(n // 2):\n        for j in range(m):\n            triangle[i][j] *= triangle[i + 1][j]\n\n    # Fill the lower half of the triangle\n    for i in range(n // 2, n):\n        for j in range(m):\n            triangle[i][j] *= triangle[i - n // 2][j]\n\n    # Return the value of a(n, m)\n    return triangle[-1][-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Define a recursive function to calculate a(n, m)\n    def a(n, m, k=0, l=0):\n        # Base case: if n or m is 0\n        if n == 0 or m == 0:\n            return 1\n        # Recursive case: if n is greater than or equal to 1\n        if n >= 1:\n            # Calculate the number of ways to get n sticks from k sticks with m sticks in each set\n            ways = 0\n            for i in range(k+1, n+1):\n                ways += a(i-1, m, i, l)\n            return ways\n        # If m is greater than or equal to 1\n        if m >= 1:\n            # Calculate the number of ways to get m sticks from l sticks with n sticks in each set\n            ways = 0\n            for i in range(l+1, m+1):\n                ways += a(n, i-1, k, i)\n            return ways\n\n    # Call the recursive function with n, m and initial values of k and l\n    return a(n, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of permutations\n    num_perms = (n * m) // (n - 1)\n\n    # Initialize the array to store the product of numbers up to n\n    product_array = [1] * (n + 1)\n\n    # Initialize the array to store the number of partitions\n    partition_count = [0] * (n + 1)\n\n    # Calculate the product of numbers up to n\n    for i in range(1, n + 1):\n        product_array[i] = i * product_array[i - 1]\n\n    # Calculate the number of partitions of a set of n elements\n    def partition_count_helper(index):\n        # Base case\n        if index == n:\n            return 1\n\n        # Calculate the number of partitions of the set of n elements\n        count = 0\n        for i in range(index, n + 1):\n            count += product_array[i] // i\n\n        # Update the partition count\n        partition_count[index] = count\n\n        # Recursively count the number of partitions of the set of n elements\n        return count * partition_count_helper(index + 1)\n\n    # Calculate the Eulerian number a(n, m)\n    eulerian_num = num_perms - partition_count_helper(1)\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the matrix\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            matrix[i][j] = 2 * i * j - 1\n\n    # Find the Eulerian number a(n, m)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if matrix[i][j] == 2 * i * j - 1:\n                return i * j\n    return -1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the values of a(n, m)\n    a = [0] * (n + 1)\n    a[0] = 1\n\n    # Calculate the values of a(n, m) using the binomial theorem\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i] += (-1) ** (i + j) * a[i - j]\n\n    return a[n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initialize the variables\n    n_count = 1\n    m_count = 1\n\n    # loop until we reach a(n, m)\n    while True:\n        # add the current values to the sum\n        a = n_count + m_count\n\n        # if we have reached a(n, m), break out of the loop\n        if a == n * m:\n            break\n\n        # if the sum is less than a(n, m), we need to increment n_count\n        elif a < n * m:\n            n_count += 1\n\n        # if the sum is greater than a(n, m), we need to increment m_count\n        else:\n            m_count += 1\n\n    # return the Eulerian number\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    if m == 1:\n        return n\n\n    if n == 1:\n        return eulerian_num(n, m-1)\n\n    return eulerian_num(n-1, m-1) + eulerian_num(n-1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize variables\n    a = 1  # initialize with 1\n    k = 1  # initialize with 1\n\n    # Compute the Eulerian number by adding a to the product of k and k-1\n    while k <= n:\n        a += k\n        k += 1\n\n    # Initialize the accumulator with 0\n    accumulator = 0\n\n    # Compute the Eulerian number by adding the product of k and k-1 to the accumulator\n    while k <= m:\n        accumulator += k\n        k += 1\n\n    return accumulator"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix and the stack\n    matrix = [[0] * (m+1) for _ in range(n+1)]\n    stack = [(1, 1)]\n\n    # Fill the matrix with 0's and 1's\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            matrix[i][j] = stack[-1][0] * j\n\n    # Get the length of the longest path\n    longest_path = len(matrix[-1])\n\n    # Initialize the Eulerian number\n    a = 0\n\n    # Traverse the matrix to find the Eulerian number\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if matrix[i][j] == longest_path:\n                a += stack[-1][1]\n                stack.append((0, -1))\n                break\n            elif matrix[i][j] == 0:\n                stack.append((1, 0))\n\n    # Reverse the stack to get the path\n    path = [(-1, 0)]\n    for i in range(len(stack)-1, -1, -1):\n        path.append((stack[i][0], stack[i][1]))\n\n    # Reverse the path to get the Eulerian number\n    a = 1\n    for i in range(len(path)):\n        if path[i][0] == -1:\n            a *= path[i][1]\n\n    return a"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        # Convert the sublist to a list of strings\n        sublist = [str(item) for item in sublist]\n        # Sort the list of strings using the sorted() function\n        sublist.sort()\n        # Convert the sorted list back to a list of integers\n        sublist = [int(item) for item in sublist]\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input_list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort function\n        sublist.sort()\n\n    # Return the input list after sorting each sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function and reassign the sorted sublist back to the original list\n        input_list[input_list.index(sublist)] = sorted(sublist)\n    # Return the input list with sorted sublists\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input_list\n    for sublist in input_list:\n        # Use the sorted() function to sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    count = 0\n    for element in lst:\n        if element:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, bool):\n            if i:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool):\n            if element:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if isinstance(element, bool) and element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, bool) and item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        test_tup = test_tup + (i,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to tuple and append it to the tuple\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple and concatenate them\n    new_tup = tuple(test_list) + test_tup\n    return new_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert lists to tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # Append lists to tuples\n    test_tup = test_tup + test_list\n\n    # Convert tuples back to lists\n    test_list = list(test_tup)\n\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # append the test_list to the test_tup\n    test_tup = test_tup + (test_list,)\n    return test_tup"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n    num1 (list): A list of integers.\n    num2 (list): A list of integers.\n    num3 (list): A list of integers.\n\n    Returns:\n    list: A single list of integers that is the result of merging the three input lists.\n    \"\"\"\n    # Merge the two input lists\n    merged = num1 + num2\n\n    # Merge the merged list with the third input list\n    merged.extend(num3)\n\n    # Sort the merged list\n    merged.sort()\n\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the three lists into a single list\n    merged_list = sorted(num1 + num2 + num3)\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two smaller lists\n    sorted_list1 = merge_sorted_list(num1[:len(num1)//2], num2[:len(num2)//2])\n    \n    # Merge the two remaining lists\n    sorted_list2 = merge_sorted_list(num1[len(num1)//2:], num2[len(num2)//2:])\n    \n    # Merge the two sorted lists\n    merged_list = merge_sorted_list(sorted_list1, sorted_list2)\n    \n    # Merge the three lists\n    merged_list = merge_sorted_list(merged_list, num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Merge two lists\n    merged_list = num1 + num2\n    # Sort the merged list\n    heapq.heapify(merged_list)\n    # Merge the sorted list with the third list\n    final_list = [num3[0]]\n    i = 0\n    j = 0\n    while i < len(merged_list) and j < len(num3):\n        if merged_list[i] < num3[j]:\n            final_list.append(merged_list[i])\n            i += 1\n        else:\n            final_list.append(num3[j])\n            j += 1\n    final_list += merged_list[i:]\n    final_list += num3[j:]\n    return final_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # Merge three sorted lists into one sorted list\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    while num1 and num2 and num3:\n        if -heapq.heappop(num1) < -heapq.heappop(num2):\n            heapq.heappush(merged_list, -heapq.heappop(num1))\n        elif -heapq.heappop(num2) < -heapq.heappop(num3):\n            heapq.heappush(merged_list, -heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, -heapq.heappop(num3))\n    while num1:\n        heapq.heappush(merged_list, -heapq.heappop(num1))\n    while num2:\n        heapq.heappush(merged_list, -heapq.heappop(num2))\n    while num3:\n        heapq.heappush(merged_list, -heapq.heappop(num3))\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a min heap to store the smallest element of each list\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n        \n    # Sort the min heap in ascending order and create a new sorted list\n    sorted_list = []\n    while min_heap:\n        sorted_list.append(heapq.heappop(min_heap))\n        \n    # Reverse the sorted list to get the required sorted order\n    return sorted_list[::-1]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    This function takes three sorted lists and merges them into a single sorted list.\n    '''\n    # Define the empty list to store the merged list\n    merged_list = []\n    \n    # Define two pointers for each list\n    i, j = 0, 0\n    \n    # Iterate through the three lists and merge the elements\n    while i < len(num1) and j < len(num2) and j < len(num3):\n        if num1[i] < num2[j]:\n            if num1[i] < num3[j]:\n                heapq.heappush(merged_list, num1[i])\n                i += 1\n            else:\n                heapq.heappush(merged_list, num3[j])\n                j += 1\n        elif num2[j] < num3[j]:\n            heapq.heappush(merged_list, num2[j])\n            j += 1\n        else:\n            heapq.heappush(merged_list, num3[j])\n            i += 1\n            j += 1\n    \n    # Add any remaining elements from the lists to the merged list\n    merged_list.extend(num1[i:])\n    merged_list.extend(num2[j:])\n    merged_list.extend(num3[j:])\n    \n    # Convert the merged list to a sorted list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # concatenate the three lists into a single list\n    all_numbers = num1 + num2 + num3\n\n    # convert the list into a min heap\n    heap = []\n    for num in all_numbers:\n        heapq.heappush(heap, num)\n\n    # convert the heap back into a sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n\n    # Merge the two smallest lists\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n\n    while num1 and num2:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n\n    # Add the remaining lists to the merged list\n    while num1:\n        merged_list.append(heapq.heappop(num1))\n    while num2:\n        merged_list.append(heapq.heappop(num2))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a heap from the three lists and return it\n    heap = [num1, num2, num3]\n    heapq.heapify(heap)\n    merged_heap = []\n    while heap:\n        merged_heap.append(heapq.heappop(heap))\n    return merged_heap"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the binary string to a list\n    lst = [int(i) for i in s] \n    # create an empty list to store the rotated binary string\n    rotated_lst = [] \n\n    # rotate the binary string the given number of times\n    for i in range(n): \n        # rotate the binary string by adding a 0 at the beginning\n        rotated_lst.append(lst[-1]) \n        # remove the last element from the list\n        lst.pop() \n\n    # count the number of odd values in the rotated binary string\n    count = 0\n    for i in lst: \n        if i % 2 == 1: \n            count += 1\n\n    return count "
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for odd values and count of odd values\n    odd_count = 0\n    rotated_odd_count = 0\n\n    # Convert the binary string to a list of digits\n    binary_list = list(map(int, list(s)))\n\n    # Rotate the binary list n times and count the odd values\n    for i in range(n):\n        binary_list = binary_list[1:] + [0]\n        rotated_odd_count += binary_list.count(1)\n\n    # Find the number of odd values in the original string\n    for i in range(len(binary_list)):\n        if binary_list[i] == 1:\n            odd_count += 1\n\n    # Calculate the number of odd values that were rotated n times\n    odd_equivalent = rotated_odd_count - odd_count\n\n    return odd_equivalent"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initialize variables\n    count = 0\n    rotated = ''\n    # iterate through the binary string n times\n    for _ in range(n):\n        # rotate the binary string by one position to the left\n        rotated = s[-1] + s[:-1]\n        # count the number of odd numbers in the rotated binary string\n        count += sum(int(digit) for digit in rotated if digit == '1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    odd_count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if s[0] % 2 == 1:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n):\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = ''.join([str(int(i)) for i in s])\n    odd_count = 0\n    for i in range(n):\n        new_string = ''\n        for j in range(len(binary_string)):\n            if j < len(binary_string)//2:\n                new_string += binary_string[j]\n            else:\n                new_string += binary_string[len(binary_string)-j-1]\n        binary_string = new_string\n    for i in binary_string:\n        if int(i) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = ''\n    for i in s:\n        if i == '0':\n            binary_string += '0'\n        elif i == '1':\n            binary_string += '1'\n    binary_string = binary_string[::-1]\n    count = 0\n    for i in range(n):\n        binary_string = binary_string[::-1]\n        for j in range(len(binary_string)):\n            if binary_string[j] == '1':\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n):\n    if len(s) % 2 == 0:\n        # even length, rotate left n/2 times\n        return ''.join(s[i:i+n] for i in range(len(s)-n))\n    else:\n        # odd length, rotate left (n/2+1) times\n        return ''.join(s[i:i+n] for i in range(len(s)-n+1))"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # initialize the count variable\n    count = 0\n\n    # loop n number of times\n    for i in range(n):\n        # find the last index of the binary string\n        j = len(s) - 1\n\n        # loop through the binary string from left to right\n        for k in range(len(s)):\n            # find the index of the first 1 in the binary string\n            while s[k] == '0' and j >= 0:\n                j -= 1\n\n            # check if there are any odd numbers left\n            if j < 0:\n                break\n\n            # if there are odd numbers left, increment the count\n            else:\n                count += 1\n\n                # move the index of the first 1 to the right\n                s = s[:k] + s[k+1:]\n\n    # return the count of odd numbers in the binary string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    count = 0\n    for i in range(n): \n        s = s[-1] + s[:-1] \n    for i in s: \n        if int(i) % 2!= 0: \n            count += 1 \n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set()\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.add(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if j == 0:\n                continue\n            if nestedlist[i][j] in nestedlist[i][j-1]:\n                common_elements.append(nestedlist[i][j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j] and nestedlist[j] in nestedlist[i]:\n                common_elements.append(nestedlist[i])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Using a set to remove duplicates from the lists\n    common_elements = set(list(set(nestedlist[0]) & set(nestedlist[1])))\n    \n    # Finding the common elements in the nested lists\n    for i in range(len(nestedlist)):\n        if i == 0:\n            for j in range(len(nestedlist[i])):\n                for k in range(len(common_elements)):\n                    if nestedlist[i][j] == common_elements[k]:\n                        common_elements.remove(common_elements[k])\n                        break\n        elif i == 1:\n            for j in range(len(nestedlist[i])):\n                for k in range(len(common_elements)):\n                    if nestedlist[i][j] == common_elements[k]:\n                        common_elements.remove(common_elements[k])\n                        break\n                \n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize two empty lists\n    list1 = []\n    list2 = []\n\n    # Loop through the nested list\n    for item in nestedlist:\n        # Check if the item is already in the list\n        if item not in list1:\n            list1.append(item)\n\n    # Loop through the nested list again and check if the item is in the list\n    for item in nestedlist:\n        if item not in list2:\n            list2.append(item)\n\n    # Find the common elements in both lists\n    common = set(list1) & set(list2)\n\n    # Convert the set back to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through the nested list and check for common elements\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n\n    # Return the common elements in a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # iterate through each list in the nested list\n    for lst in nestedlist:\n        # set an empty set to store common elements\n        common = set()\n        # iterate through each element in the list\n        for elem in lst:\n            # check if the element is already in the set of common elements\n            if elem in common:\n                # if it is, then add it to a list of common elements\n                common.add(elem)\n            # if the element is not in the set, then add it to the set and append it to the list of common elements\n            else:\n                common.add(elem)\n        # print the list of common elements\n        print(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                common.append(nestedlist[i])\n            if nestedlist[j] in nestedlist[i]:\n                common.append(nestedlist[j])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each nested list and find the common elements\n    for lst in nestedlist:\n        for elem in lst:\n            if elem in common:\n                common.remove(elem)\n            else:\n                common.add(elem)\n\n    # Return the set of common elements\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = list(set(nestedlist[i]) & set(nestedlist[j]))\n            if common:\n                common_list.append(common[0])\n    return common_list"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        num = int(text)\n        if str(num).isdigit():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for item in list1:\n        if item:\n            for key, value in item.items():\n                if value:\n                    continue\n                else:\n                    return False\n        else:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not isinstance(list1, list):\n        return \"The input is not a list.\"\n    for dic in list1:\n        if not isinstance(dic, dict) or not dic:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    # Initialize a variable to store the sum of the numbers in the tuple\n    total = 0\n    \n    # Loop through each number in the tuple\n    for num in nums:\n        # Check if the number is a positive integer\n        if isinstance(num, int) and num > 0:\n            # Add the number to the total\n            total += num\n        else:\n            # If the number is not a positive integer, print an error message and exit the function\n            print(\"Error: Input tuple must contain only positive integers.\")\n            return\n    \n    # Return the total sum of all the positive integers in the tuple\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a string\n    nums_str = str(nums)\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate through the string and add each digit to the result\n    for digit in nums_str:\n        result += int(digit)\n\n    # Return the final result\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through each list in the input list\n    for lst in test_list:\n        # Loop through each element in the list\n        for elem in lst:\n            # Check if the element is convertible to float\n            try:\n                float(elem)\n            except ValueError:\n                # If the element is not convertible, convert it to a string and convert it to a float\n                elem = str(elem)\n                try:\n                    float(elem)\n                except ValueError:\n                    # If the element cannot be converted to a float, raise an error\n                    raise TypeError('Error: Could not convert all elements in list to floats.')\n            else:\n                # If the element can be converted to float, convert it to a float\n                lst[lst.index(elem)] = float(elem)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each element in the list\n    for i in range(len(test_list)):\n        # loop through each sub-element in the current element\n        for j in range(len(test_list[i])):\n            # attempt to convert the current sub-element to a float\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                # if the conversion fails, set the value back to its original string\n                test_list[i][j] = str(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for item in test_list:\n        for subitem in item:\n            try:\n                float_value = float(subitem)\n                new_list.append(float_value)\n            except ValueError:\n                pass\n    return new_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i, row in enumerate(test_list):\n        for j, cell in enumerate(row):\n            try:\n                test_list[i][j] = float(cell)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float]:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i, item in enumerate(test_list):\n        for j, subitem in enumerate(item):\n            try:\n                test_list[i][j] = float(subitem)\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                new_list.append(float(element))\n            except ValueError:\n                new_list.append(element)\n    return new_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list to a list of strings\n    return list(words)"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Initialize an empty list to hold the output strings\n    output_list = []\n    # Split the list of characters on the space character and add each part to the output list\n    for char in char_list:\n        if char =='':\n            output_list.append(' ')\n        else:\n            output_list.append(char)\n    return output_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    words = string.split()\n    # Convert the list of words to a list of strings\n    result = [str(word) for word in words]\n    return result"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to store the counts of each element in the array\n    count_dict = {}\n\n    # Iterate over the array and update the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate over the dictionary and find the element that appears only once\n    for num in count_dict:\n        if count_dict[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    \n    for i in range(n):\n        if count[arr[i]] == 1:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n    # Traverse the array and increment the count of each element in the dictionary\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    # Traverse the dictionary and find the element that appears only once\n    for num, count in count.items():\n        if count == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a variable to keep track of the count of each element in the array\n    count = {}\n    \n    # Loop through the array\n    for num in arr:\n        # If the current element is already in the count dictionary, increment the count\n        if num in count:\n            count[num] += 1\n        # Otherwise, add the element to the dictionary with a count of 1\n        else:\n            count[num] = 1\n    \n    # Loop through the count dictionary and find the element that appears only once\n    for num, count in count.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Create an empty dictionary to store the indices of elements\n    index = {}\n    # Initialize a count variable to keep track of the number of occurrences of each element\n    count = {}\n    # Iterate through the array and add each element to the dictionary with its index as the value\n    for i, x in enumerate(arr):\n        if x not in index:\n            index[x] = [i]\n        else:\n            index[x].append(i)\n    # Iterate through the dictionary to count the occurrences of each element\n    for x in index:\n        count[x] = index[x].count(x)\n    # Find the element that appears only once and return its index\n    for i, x in enumerate(arr):\n        if count[x] == 1:\n            return i\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    This function takes a sorted array as input and returns the element that appears only once.\n    '''\n    # Find the first and last elements of the array\n    first_elem = arr[0]\n    last_elem = arr[-1]\n\n    # Initialize the count variable\n    count = 0\n\n    # Loop through the array and count the number of occurrences of the last element\n    for i in range(len(arr)):\n        if arr[i] == last_elem:\n            count += 1\n\n    # If the count is 1, return the last element\n    if count == 1:\n        return last_elem\n\n    # Otherwise, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize count and target to 0\n    count = 0\n    target = 0\n\n    # loop through array\n    for i in range(len(arr)):\n        # if count is already 1, return the current value\n        if count == 1:\n            return arr[i]\n\n        # if current element is equal to the target, increment count\n        elif arr[i] == target:\n            count += 1\n\n        # if current element is not equal to the target, reset count to 0\n        else:\n            count = 0\n\n        # if count is 1, set the target to the current element\n        if count == 1:\n            target = arr[i]\n\n    # if target is still 0, return None\n    if target == 0:\n        return None\n\n    # if target is still not 0, return target\n    else:\n        return target"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    for i in arr:\n        if count[i] == 1:\n            return i"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the count of each element in the array\n    count_dict = {}\n\n    # Iterate through the array and update the count_dict\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Iterate through the count_dict and find the element that appears only once\n    for key, value in count_dict.items():\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Create an empty list to store the maximum absolute product between pairs of numbers in each tuple\n    max_absolute_product_list = []\n    # Loop through each tuple in the list\n    for tup in list1:\n        # Create a new list to store the absolute difference between each pair of numbers in the tuple\n        absolute_difference_list = []\n        # Loop through each pair of numbers in the tuple\n        for num1, num2 in zip(tup, tup[1:]):\n            # Calculate the absolute difference between the pair of numbers\n            absolute_difference = abs(num1 - num2)\n            # Append the absolute difference to the absolute_difference_list\n            absolute_difference_list.append(absolute_difference)\n        # Calculate the maximum absolute difference between the pairs of numbers in the tuple\n        max_absolute_difference = max(absolute_difference_list)\n        # Append the maximum absolute difference to the max_absolute_product_list\n        max_absolute_product_list.append(max_absolute_difference)\n    # Return the maximum absolute product between pairs of numbers in each tuple\n    return max(max_absolute_product_list)"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    list1 (list): A list of tuples of integers.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples within the input list.\n    \"\"\"\n\n    # Initialize the maximum product and the maximum absolute difference\n    max_product = 0\n    max_difference = 0\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Extract the current pair of numbers\n        pair = list1[i]\n\n        # Calculate the maximum absolute difference between the numbers in the pair\n        difference = max(abs(pair[0]), abs(pair[1]))\n\n        # Update the maximum product and maximum absolute difference if necessary\n        if max_product < pair[0] * pair[1] and max_difference < difference:\n            max_product = pair[0] * pair[1]\n            max_difference = difference\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][1]-list1[j][1]) > max_product:\n                max_product = abs(list1[i][1]-list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    This function takes a list of tuples as input and returns the maximum absolute product\n    between numbers in pairs of tuples within the list.\n\n    Args:\n        list1 (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples within the list.\n    \"\"\"\n\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return None\n\n    max_product = float('-inf')\n    current_product = 1\n    max_pair = (float('-inf'), float('-inf'))\n\n    for num in list1:\n        if num > max_pair[0]:\n            max_pair = (num, max_pair[1])\n        elif num > max_pair[1]:\n            max_pair = (max_pair[0], num)\n\n        current_product = max(num, current_product)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    max_pair_product = float('-inf')\n    max_product = float('-inf')\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            pair_product = lst[i][0] * lst[j][1]\n            max_pair_product = max(max_pair_product, pair_product)\n            \n    return max_pair_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables for the maximum product and minimum product\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the absolute product of the numbers in the pair\n            product = abs(list1[i][0] * list1[j][1])\n\n            # Update the maximum and minimum products based on the absolute product\n            if product > max_product:\n                max_product = product\n            if product < min_product:\n                min_product = product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable_pair(num):\n    \"\"\"\n    Helper function to check if a given number is amicable.\n    \"\"\"\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum = 0\n    for num in range(1, limit):\n        if is_amicable_pair(num):\n            sum += num\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a positive integer as input and returns the sum of all amicable numbers from 1 to the limit.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if i in amicable_numbers:\n            continue\n        j = 0\n        for k in range(2, i):\n            if i % k == 0:\n                j += k\n                if j == i:\n                    amicable_numbers.append(i)\n                    break\n    return sum(amicable_numbers)\n\nlimit = int(input(\"Enter the limit: \"))\nresult = sum_amicable_numbers(limit)\nprint(\"The sum of amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_amicable(num):\n    \"\"\"\n    Check if a number is amicable to any other number up to a specified limit.\n    \"\"\"\n    for i in range(1, limit):\n        if num % i == 0 and (limit - i) % i == 0:\n            return True\n    return False\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_amicable_number(n):\n    # check if the number is less than 100\n    if n < 100:\n        # return False for numbers less than 100\n        return False\n    else:\n        # calculate the sum of proper divisors of the number\n        sum_of_proper_divisors = sum([i for i in range(1, n) if n % i == 0])\n        # check if the sum is equal to the number itself\n        if sum_of_proper_divisors == n:\n            return True\n        else:\n            return False\n\ndef amicable_numbers_sum(limit):\n    # initialize the sum to zero\n    sum_of_amicable_numbers = 0\n    # loop through all numbers from 1 to the specified limit\n    for i in range(1, limit + 1):\n        # check if the number is an amicable number\n        if is_amicable_number(i):\n            # add the number to the sum\n            sum_of_amicable_numbers += i\n    # return the sum of amicable numbers\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit+1):\n        if i == amicable_number_sum(i):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\ndef amicable_number_sum(n):\n    '''\n    Write a function to calculate the sum of all proper divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit):\n        if i == 1:\n            continue\n        a = i\n        b = limit - i\n        if a == b:\n            continue\n        if i in amicable_dict and amicable_dict[i] == i:\n            amicable_sum += i\n        elif i == amicable_dict.get(amicable_dict.get(i), 0):\n            amicable_sum += i\n    return amicable_sum\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a number is amicable or not.\n    '''\n    for i in range(1, int(num ** 0.5) + 1):\n        if num % i == 0 and num / i!= i:\n            return True\n    return False\n\ndef sum_amicable_numbers_from_1_to_limit(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_dict = {}\n    for i in range(1, limit):\n        if is_amicable(i):\n            amicable_dict[i] = i\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a limit number as input and returns the sum of all the amicable numbers between 1 and the limit number.\n    \"\"\"\n\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if is_prime(num) and is_prime(sum_of_divisors(num)):\n            amicable_numbers.append(num)\n    \n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    \"\"\"\n    This function takes a number as input and returns the sum of all its divisors.\n    \"\"\"\n\n    divisors = []\n    for i in range(1, num + 1):\n        if num % i == 0:\n            divisors.append(i)\n    \n    return sum(divisors)\n\n\ndef is_prime(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is prime and False otherwise.\n    \"\"\"\n\n    if num < 2:\n        return False\n    \n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    \n    return True\n\n\nif __name__ == \"__main__\":\n    limit = int(input(\"Enter the limit number: \"))\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # List of amicable numbers\n    amicable_numbers = [28, 32, 42, 62, 86]\n    \n    # Initialize sum variable to 0\n    sum_of_amicable_numbers = 0\n    \n    # Loop through the range of numbers up to the specified limit\n    for i in range(1, limit+1):\n        # Check if the number is a prime number\n        if i not in amicable_numbers:\n            # Check if the number is amicable to any of the prime numbers in the list\n            for j in amicable_numbers:\n                if i % j == 0:\n                    # If the number is amicable, add it to the sum variable\n                    sum_of_amicable_numbers += i\n                    \n    # Return the sum of all amicable numbers up to the specified limit\n    return sum_of_amicable_numbers"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit+1):\n        if num == sum_of_divisors(num):\n            if sum_of_divisors(num) == num:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)\n\n\ndef sum_of_divisors(num):\n    \"\"\"\n    Write a function to sum all divisors of a specified number.\n    \"\"\"\n    divisors = []\n    for i in range(1, num):\n        if num % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit):\n        if i == 1:\n            amicable_numbers.append(i)\n            continue\n        elif i == 2:\n            continue\n        elif i % 2 == 0:\n            continue\n        else:\n            j = 2\n            while True:\n                if i % j == 0:\n                    break\n                j += 1\n            if j > 2:\n                amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the complex conjugate of a\n    conj_a = a.conjugate()\n    \n    # Calculate the modulus of the complex number\n    modulus = (conj_a * a).real\n    \n    # Calculate the angle of the complex number in radians\n    angle_rad = modulus / b\n    \n    # Convert the angle to degrees and round to 3 decimal places\n    angle_deg = round(cmath.degrees(angle_rad), 3)\n    \n    # Return the angle in degrees\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the angle using the cmath module\n    angle = cmath.phase(complex(a,b))\n\n    # convert the angle to degrees and return it\n    return round(angle * 180 / cmath.pi, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    This function takes in two complex numbers as input and returns their angle in radians.\n    '''\n    return cmath.phase(a+b)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    # get the value of the complex number\n    z = a + b*1j\n    \n    # calculate the angle in radians\n    theta = cmath.phase(z)\n    \n    # convert the angle from radians to degrees\n    theta = cmath.degrees(theta)\n    \n    return theta"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    angle = angle.real\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    length = len(string)\n    for i in range(length):\n        for j in range(i+1, length):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n                else:\n                    diff -= 1\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    length = len(string)\n\n    for i in range(length):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > 0:\n                max_diff = max(max_diff, count)\n            count = 0\n\n    if count > 0:\n        max_diff = max(max_diff, count)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(1, len(string)):\n        diff = 0\n        for j in range(i+1):\n            if string[j] == '0':\n                diff += 1\n            else:\n                diff -= 1\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    n = len(string)\n    count = [0] * 2 # initialize count list with 0s and 1s\n    max_diff = 0 # initialize max_diff variable with 0\n    \n    # iterate through all possible sub-strings of the binary string\n    for i in range(n):\n        # if current character is 0, increment count of 0s\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n        # find the maximum difference between count of 0s and count of 1s\n        diff = max(count[0] - count[1], 0)\n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if string[i] == string[j]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1]) + 1\n    return dp[n - 1][n - 2]"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    # initialize variables to store the count of 0s and 1s in the current sub-string\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    \n    # loop through each character in the string\n    for char in string:\n        # if the character is a 0, increase the count of 0s\n        if char == '0':\n            count_0 += 1\n        # if the character is a 1, increase the count of 1s\n        else:\n            count_1 += 1\n            \n        # calculate the maximum difference between the count of 0s and 1s\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    if string == \"\":\n        return 0\n    \n    length = 1\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == \"0\":\n            length += 1\n        elif string[i] == \"1\":\n            length -= 1\n        \n        max_diff = max(max_diff, length)\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    # Iterate through the string\n    for char in string:\n        # If character is 0, increment count of 0s\n        if char == '0':\n            count_0 += 1\n            count_1 = 0\n        # If character is 1, increment count of 1s\n        else:\n            count_1 += 1\n            count_0 = 0\n        \n        # Calculate the difference between the number of 0s and number of 1s\n        diff = abs(count_0 - count_1)\n        \n        # Update the maximum difference if the current difference is greater\n        if diff > max_diff:\n            max_diff = diff\n    \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    # Convert the string to a binary string\n    binary_string = bin(int(string, 2))[2:]\n    # Initialize two counters to count the number of 0s and 1s\n    count_0s = count_1s = 0\n    # Initialize a variable to store the maximum difference\n    max_diff = 0\n    # Loop over all possible sub-strings of the binary string\n    for i in range(len(binary_string)):\n        # Check if the current sub-string contains at least one 0 and at least one 1\n        if binary_string[i:i+2].count('0') > 0 and binary_string[i:i+2].count('1') > 0:\n            # Update the counters\n            count_0s += binary_string[i:i+2].count('0')\n            count_1s += binary_string[i:i+2].count('1')\n            # Calculate the difference between the counters\n            diff = abs(count_0s - count_1s)\n            # Update the maximum difference if necessary\n            max_diff = max(max_diff, diff)\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n\n    for i in range(len(string)):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            diff = abs(count_0s - count_1s)\n            max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    def divisor_sum(n):\n        '''\n        Write a python function to find the sum of divisors of a given number.\n        '''\n        s = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                s += i\n        if n > 1:\n            s += n\n        return s\n\n    return divisor_sum(a) + divisor_sum(b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    \n    # function to check if a number is a common divisor of b\n    def is_common_divisor(a, b):\n        for i in range(1, b+1):\n            if a % i == 0 and b % i == 0:\n                return True\n        return False\n    \n    # function to find the sum of common divisors of two given numbers\n    def find_sum(a, b):\n        sum_common = 0\n        for i in range(1, b+1):\n            if is_common_divisor(a, i):\n                sum_common += i\n        return sum_common\n    \n    # calling the function to find the sum of common divisors of a and b\n    result = find_sum(a, b)\n    \n    # printing the result\n    print(\"The sum of common divisors of\", a, \"and\", b, \"is\", result)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Finding all the factors of a\n    factors_a = []\n    for i in range(1, a + 1):\n        if a % i == 0:\n            factors_a.append(i)\n\n    # Finding all the factors of b\n    factors_b = []\n    for i in range(1, b + 1):\n        if b % i == 0:\n            factors_b.append(i)\n\n    # Finding the common factors of a and b\n    common_factors = set(factors_a) & set(factors_b)\n\n    # Finding the sum of common factors\n    sum_of_common_factors = 0\n    for factor in common_factors:\n        sum_of_common_factors += factor\n\n    # Returning the sum of common factors\n    return sum_of_common_factors\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(num1, num2):\n    '''\n    This function takes two numbers as input and returns their sum of common divisors.\n    '''\n    # Finding the list of common divisors of two numbers\n    common_divisors = list(set(get_common_divisors(num1, num2)))\n\n    # Adding all the common divisors to get the sum\n    result = 0\n    for divisor in common_divisors:\n        result += divisor\n\n    return result\n\ndef get_common_divisors(num1, num2):\n    '''\n    This function takes two numbers as input and returns a list of common divisors of these two numbers.\n    '''\n    # Finding the set of divisors of first number\n    divisor_set1 = set(range(1, num1+1))\n\n    # Finding the set of divisors of second number\n    divisor_set2 = set(range(1, num2+1))\n\n    # Finding the intersection of the above two sets\n    intersection = divisor_set1.intersection(divisor_set2)\n\n    # Converting the set of common divisors into a list and returning it\n    return sorted(list(intersection))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_divisor(a, b):\n    \"\"\"\n    Returns the common divisor of a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    Returns the sum of common divisors of a and b.\n    \"\"\"\n    return a + b - 2 * (a * b // common_divisor(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    This function returns a list of the common divisors of two given numbers.\n    \"\"\"\n    # Find the largest common divisor of a and b\n    largest_common_divisor = max(a, b)\n    # Initialize a set to store the divisors of largest common divisor\n    divisors = set()\n    # Loop through all numbers from 2 to the largest common divisor\n    for i in range(2, largest_common_divisor + 1):\n        # Check if i is a divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # If it is, add it to the set of divisors\n            divisors.add(i)\n    # Convert the set of divisors to a list and return it\n    return list(divisors)\n\n\ndef sum(a, b):\n    \"\"\"\n    This function returns the sum of the common divisors of two given numbers.\n    \"\"\"\n    # Find the common divisors of a and b\n    common_divisors_list = common_divisors(a, b)\n    # Initialize a variable to store the sum of the divisors\n    total_sum = 0\n    # Loop through the list of divisors and add each to the total sum\n    for i in common_divisors_list:\n        total_sum += i\n    # Return the total sum of the divisors\n    return total_sum\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a % b == 0:\n        return b\n    else:\n        return a + sum_common_divisors(b, a % b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number to find common divisors for.\n    b (int): The second number to find common divisors for.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n    ValueError: If either a or b is equal to zero.\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both inputs must be integers.\")\n    elif a == 0 or b == 0:\n        raise ValueError(\"Both inputs must be non-zero integers.\")\n\n    # Euclid's algorithm to find the GCD of two numbers\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # Calculate the GCD of a and b\n    gcd_ab = gcd(a, b)\n\n    # Calculate the sum of common divisors\n    sum_cd = 0\n    for i in range(1, gcd_ab + 1):\n        if a % i == 0 and b % i == 0:\n            sum_cd += i\n\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    # get the largest number\n    max_num = max(a, b)\n\n    # initialize sum of common divisors to 0\n    sum_cd = 0\n\n    # loop through all numbers from 1 to the largest number\n    for i in range(1, max_num+1):\n\n        # check if the number is a common divisor of both numbers\n        if a % i == 0 and b % i == 0:\n\n            # add the common divisor to the sum of common divisors\n            sum_cd += i\n\n    # return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    common_divisors = [x for x in range(1, a + 1) if a % x == 0 and b % x == 0]\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y!= 0:\n        carry = x & y\n        result = result ^ carry\n        x = x ^ y\n        y = carry << 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    for i in range(x):\n        result += y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y > 0:\n        if y & 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Convert the string to a list of words\n    words = str.split()\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # If the length of the word is greater than n, append it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The maximum number of characters that a word can have.\n    words (list): A list of words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    :param n: The maximum number of characters a word can have.\n    :type n: int\n    :param words: A list of words to search in.\n    :type words: list\n    :return: A list of words that are longer than n characters.\n    :rtype: list[str]\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Find words in the list of words that are longer than n characters.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    # define the size of the matrix\n    n = len(my_matrix)\n    \n    # calculate the sum of the matrix\n    matrix_sum = sum(sum(row) for row in my_matrix)\n    \n    # check if the sum is equal to the product of the matrix size\n    if matrix_sum == n ** 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        # Check the row\n        for j in range(n):\n            if my_matrix[i][j]!= i+j:\n                return False\n\n        # Check the column\n        for k in range(n):\n            if my_matrix[k][j]!= i+k:\n                return False\n\n    # Check the main diagonal\n    for k in range(n):\n        if my_matrix[k][k]!= n*(n-1)/2 + k:\n            return False\n\n    # Check the secondary diagonal\n    for k in range(n):\n        if my_matrix[k][n-k-1]!= n*(n-1)/2 - k:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    n = len(my_matrix)\n    \n    # Check if the matrix is a square\n    if n**2!= sum(map(sum, my_matrix)):\n        return False\n    \n    # Check if the matrix is a magic square\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= col_sum or row_sum!= my_matrix[i][i]:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check each element of the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            # Calculate the sum of the elements in the current row\n            row_sum = sum(my_matrix[i])\n            \n            # Calculate the sum of the elements in the current column\n            col_sum = sum([row[j] for row in my_matrix])\n            \n            # Calculate the sum of the elements in the current square\n            square_sum = sum([row[k] for k in range(len(my_matrix)) if k!= i and k!= j])\n            \n            # If any of the sums are not equal to zero, the matrix is not a magic square\n            if row_sum!= col_sum!= square_sum!= 0:\n                return False\n    \n    # The matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if all rows have the same length\n    for row in my_matrix:\n        if len(row)!= len(my_matrix[0]):\n            return False\n    \n    # Check if all columns have the same length\n    for i in range(len(my_matrix)):\n        if len(my_matrix[i])!= len(my_matrix[0]):\n            return False\n    \n    # Check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            # Calculate the sum of elements in the row and column\n            row_sum = 0\n            col_sum = 0\n            for k in range(len(my_matrix)):\n                if k!= i and k!= j:\n                    row_sum += my_matrix[i][k]\n                    col_sum += my_matrix[k][j]\n            # Check if the sum of elements in the row and column are equal to the element in the main diagonal\n            if row_sum!= col_sum + my_matrix[i][i] or col_sum!= row_sum + my_matrix[i][i]:\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if the matrix has the same length as the number of rows\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all the rows, columns, and the 3x3 submatrix are magic squares\n    for i in range(len(my_matrix)):\n        if not magic_square(my_matrix[i]):\n            return False\n    \n    for j in range(len(my_matrix[0])):\n        if not magic_square([row[j] for row in my_matrix]):\n            return False\n    \n    for i in range(len(my_matrix) - 2):\n        for j in range(len(my_matrix[0]) - 2):\n            if not magic_square([[my_matrix[i][j], my_matrix[i][j+1], my_matrix[i][j+2]],\n                                  [my_matrix[i+1][j], my_matrix[i+1][j+1], my_matrix[i+1][j+2]],\n                                  [my_matrix[i+2][j], my_matrix[i+2][j+1], my_matrix[i+2][j+2]]]):\n                return False\n    \n    return True\n\ndef magic_square(matrix):\n    '''\n    Write a function to check if a matrix is a magic square.\n    '''\n    \n    # Check if the matrix is a square\n    if len(matrix)!= len(matrix[0]):\n        return False\n    \n    # Check if the matrix has the same length as the number of rows\n    if len(matrix)!= len(matrix[0]):\n        return False\n    \n    # Check if all the rows are equal\n    for i in range(len(matrix)):\n        if matrix[i]!= matrix[0]:\n            return False\n    \n    # Check if all the columns are equal\n    for i in range(len(matrix[0])):\n        column = [row[i] for row in matrix]\n        if column!= column[0]:\n            return False\n    \n    # Check if the 3x3 submatrix is a magic square\n    submatrix = [[matrix[i][j] for j in range(len(matrix[0])-2)] for i in range(len(matrix)-2)]\n    for i in range(len(submatrix)):\n        if not magic_square(submatrix[i]):\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Define the size of the matrix\n    n = len(my_matrix)\n    \n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum([sum(row) for row in my_matrix])\n    \n    # Calculate the sum of the sub-diagonal elements\n    sub_diagonal_sum = sum([sum(my_matrix[i][i-j] for i in range(n)) for j in range(n)])\n    \n    # Check if the sum of the diagonal and sub-diagonal elements is the same\n    if diagonal_sum == sub_diagonal_sum:\n        # The matrix is a magic square\n        return True\n    else:\n        # The matrix is not a magic square\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    magic_sum = 0\n\n    for i in range(n):\n        row_sum = 0\n        col_sum = 0\n\n        for j in range(n):\n            row_sum += my_matrix[i][j]\n            col_sum += my_matrix[j][i]\n\n        magic_sum += row_sum + col_sum\n\n        for j in range(n):\n            if my_matrix[i][j]!= n**2 + 1 - magic_sum:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the length of the first row is equal to the length of the matrix\n    if len(my_matrix[0])!= len(my_matrix):\n        return False\n    \n    # Check if all elements in the matrix are unique\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    \n    # Check if the sum of the diagonal elements is equal to the sum of the other elements in the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    other_sum = sum(row[i] + row[j] for i in range(len(my_matrix)) for j in range(len(my_matrix)))\n    if diagonal_sum!= other_sum:\n        return False\n    \n    # Check if the sum of the other elements is equal to the sum of the diagonal elements in the transposed matrix\n    transpose = [row[j] for row in my_matrix for j in range(len(row))]\n    other_sum = sum(transpose)\n    if other_sum!= diagonal_sum:\n        return False\n    \n    # If all checks pass, return True\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n\n    # Check if the matrix has the same dimensions as a magic square\n    if rows!= cols or rows!= 3 or cols!= 3:\n        return False\n\n    # Check if the diagonal elements are equal\n    if my_matrix[0][0] + my_matrix[1][1] + my_matrix[2][2]!= 15 or my_matrix[0][2] + my_matrix[1][1] + my_matrix[2][0]!= 15:\n        return False\n\n    # Check if the other elements in each row are unique\n    for i in range(rows):\n        row = my_matrix[i]\n        for j in range(cols):\n            if j > 0 and row[j] == row[j-1]:\n                return False\n\n    # Check if the other elements in each column are unique\n    for j in range(cols):\n        col = [row[j] for row in my_matrix]\n        if j > 0 and col[j] == col[j-1]:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency in the list\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_item = item\n            max_freq = count\n\n    # Return the maximum frequency and the maximum item\n    return max_freq, max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_count = 0\n    max_item = None\n    \n    for num in nums:\n        count_dict[num] += 1\n    \n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_num = [num for num in nums if freq_dict[num] == max_freq][0]\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with maximum frequency in the list.\n    If there are multiple items with maximum frequency, it returns any one of them.\n    '''\n    freq_dict = defaultdict(int)\n    max_freq = 0\n    max_num = None\n    for num in nums:\n        freq_dict[num] += 1\n        if freq_dict[num] > max_freq:\n            max_freq = freq_dict[num]\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n            break\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_num = max(nums, key=lambda x: freq[x])\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for num, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = num\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = 'aeiouAEIOU'\n    vowel_indices = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels and char not in vowel_indices:\n            vowel_indices.append(i)\n    \n    reversed_str = str1[::-1]\n    result = ''\n    for i in range(len(reversed_str)):\n        if i in vowel_indices:\n            result += reversed_str[i]\n    \n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_str = ''\n    for char in str1:\n        if char not in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_dict = {v: i for i, v in enumerate(vowels)}\n    str1 = str1.lower()\n    result = ''\n    for char in str1:\n        if char in vowels_dict:\n            result += str1[vowels_dict[char]]\n        else:\n            result += char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in str1:\n        if char in vowels and char!= 'y':\n            result += char\n    result = result[::-1]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowels_found = []\n    for char in str1:\n        if char in vowels and char not in vowels_found:\n            vowels_found.append(char)\n    vowels_found.reverse()\n    for char in str1:\n        if char in vowels and char not in vowels_found:\n            str1 = str1.replace(char, '')\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = list(filter(lambda x: x in vowels, str1))\n    vowel_str = ''.join(vowel_list)\n    return vowel_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u']) # creating a set of vowels\n    reversed_str = '' # creating an empty string to store the reversed string\n\n    for char in str1: # iterating through each character of the string\n        if char in vowels: # if the character is a vowel\n            reversed_str = char + reversed_str # add it to the beginning of the reversed string\n        else:\n            reversed_str = reversed_str + char # add it to the end of the reversed string\n\n    return reversed_str # returning the reversed string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_set = set()\n    reversed_str = \"\"\n    for char in str1:\n        if char.lower() in vowels:\n            if char.lower() not in vowel_set:\n                vowel_set.add(char.lower())\n            else:\n                continue\n        reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = \"\"\n    for char in str1:\n        if char in vowels:\n            new_str = char + new_str\n        else:\n            new_str = new_str + char\n    return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    \n    for char in str1:\n        if char in vowels:\n            vowel_count += 1\n    \n    if vowel_count == 0:\n        return str1\n    \n    reversed_str = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str += str1[i]\n    \n    return reversed_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the ',' as a separator\n    string_tup = str(tup1)\n    # return the converted string\n    return string_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    return \" \".join(map(str, tup1))"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    tup: a tuple to be converted to a string.\n\n    Returns:\n    str: a string representation of the input tuple.\n    \"\"\"\n    # convert the tuple to a list\n    lst = list(tup)\n    # convert each element in the list to a string\n    str_lst = [str(elem) for elem in lst]\n    # join the strings in the list using a comma and space as the separator\n    str_tup = ', '.join(str_lst)\n    # return the joined string\n    return str_tup"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    neg_sum = 0\n    \n    # Iterate through the list of numbers\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            neg_sum += num\n    \n    # Return the sum of negative numbers\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(num for num in nums if num < 0)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum_of_negatives = 0\n    for num in nums:\n        if num < 0:\n            sum_of_negatives += num\n    return sum_of_negatives"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_nums = [num for num in nums if num < 0]\n    return sum(neg_nums)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the hexagonal number as the sum of the square of odd integers from 1 to n\n    odd_sum = 1\n    for i in range(1, n+1, 2):\n        odd_sum += i*i\n    return odd_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(2*n-1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (5 * n * n) - (3 * n) + 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first hexagonal number\n    hex_num = 1\n\n    # Calculate the total number of hexagonal numbers\n    total_hex_num = (n * (n + 1)) // 2\n\n    # Loop through the hexagonal numbers\n    while hex_num <= total_hex_num:\n        print(hex_num)\n        hex_num += 6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a, b = 1, 6\n    while a <= n:\n        print(a, end=' ')\n        a += b\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0: \n        return (-1)**(n//2)*(2**(n//2))\n    else: \n        return (-1)**(n//2)*(2**(n//2-1))"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(3*n-1))//2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize the sum\n    sum_hex = 0\n    \n    # loop n times\n    for i in range(1, n+1):\n        # calculate the nth hexagonal number\n        hex_num = i * (2 * i - 1)\n        \n        # add the hexagonal number to the sum\n        sum_hex += hex_num\n        \n    return sum_hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Define the limit for the sum of even and odd digits\n    limit = (n * (n + 1)) // 2\n    # Initialize the sum of even and odd digits to zero\n    even_odd_sum = 0\n    # Iterate over all numbers from 1 to limit\n    for i in range(1, limit + 1):\n        # Check if the sum of digits is even or odd\n        if i % 2 == 0:\n            even_odd_sum += i\n        else:\n            even_odd_sum += i * 3\n    # Return the nth hexagonal number\n    return even_odd_sum + n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    h = 5\n\n    if n <= 0:\n        print(\"Invalid input\")\n        return\n\n    hexagonal_numbers = [a]\n    while len(hexagonal_numbers) < n:\n        new_hexagonal_numbers = []\n        for i in range(len(hexagonal_numbers)):\n            new_hexagonal_numbers.append(h * hexagonal_numbers[i] + c)\n        hexagonal_numbers = new_hexagonal_numbers\n        a += 1\n        b += 1\n        c += 1\n        d += 1\n        h += 1\n\n    return hexagonal_numbers[n-1]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n    zero_count = len(nums) - non_zero_count\n    return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0]*len(nums))\n    for num in nums:\n        if num == 0:\n            count[nums.index(num)] += 1\n    return sum(count)/len(nums)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))  # create an array of integers with all elements set to zero\n\n    for num in nums:\n        if num == 0:\n            zeros[nums.index(num)] += 1  # count the number of zeroes in each index of the array\n\n    nonzeros = len(nums) - sum(zeros)  # calculate the total number of non-zeroes\n\n    if nonzeros == 0:\n        return 0  # handle case where there are no non-zeroes\n\n    return zeros[nonzeros] / nonzeros  # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i')\n    non_zeros = array('i')\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n\n    if len(zeros) == 0:\n        return 0\n    else:\n        return non_zeros[0] / zeros[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0] * len(nums))\n    non_zeros = array('i', [0] * len(nums))\n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n    return len(zeros) / len(non_zeros)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Convert the array to a list to perform the operations\n    nums_list = list(nums)\n\n    # Count the number of zeroes and non-zeroes in the list\n    zero_count = nums_list.count(0)\n    non_zero_count = nums_list.count(1)\n\n    # Calculate the ratio of zeroes to non-zeroes\n    zero_to_non_zero_ratio = (zero_count / non_zero_count) * 100\n\n    # Return the ratio of zeroes to non-zeroes\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Initialize arrays to store zeros and non-zeros\n    zeros = array('i', [0]*len(nums))\n    nonzeros = array('i', [0]*len(nums))\n    \n    # Iterate over the array and count zeros and non-zeros\n    for num in nums:\n        if num == 0:\n            zeros[0] += 1\n        else:\n            nonzeros[0] += 1\n    \n    # Calculate the ratio of zeros to non-zeros\n    if nonzeros[0] == 0:\n        return 0\n    else:\n        return zeros[0] / nonzeros[0]"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    zero_to_non_zero_ratio = zero_count / non_zero_count\n\n    return zero_to_non_zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to an array of characters to perform the count\n    nums_as_chars = array('c', [str(num) for num in nums])\n    zero_count = 0\n    non_zero_count = 0\n    for char in nums_as_chars:\n        if char == '0':\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return (zero_count / non_zero_count) * 100"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # initialize empty arrays to hold non-zero and zero counts\n    non_zero_count = []\n    zero_count = []\n\n    # iterate through the array and count non-zero and zero values\n    for num in nums:\n        if num!= 0:\n            non_zero_count.append(num)\n        else:\n            zero_count.append(num)\n\n    # calculate the ratio of non-zero values to total values\n    ratio = len(non_zero_count) / len(nums)\n\n    # return the ratio as a float rounded to two decimal places\n    return round(ratio, 2)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            return False\n    return count <= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    It returns True if it can be represented as sum of non-zero powers of 2 and False otherwise.\n    \"\"\"\n    # checking if the number is 0\n    if n == 0:\n        return True\n    \n    # checking if the number is 1\n    if n == 1:\n        return False\n    \n    # initializing the sum\n    sum = 0\n    \n    # checking if the number is power of 2\n    while n > 0:\n        # extracting the last bit of the number\n        last_bit = n % 2\n        \n        # adding the power of 2 to the sum\n        if last_bit == 1:\n            sum += last_bit ** 2\n        \n        # shifting the number to the left by 1 bit\n        n = n // 2\n        \n    # checking if the sum is 2 raised to the power of the number of bits in the binary representation of the number\n    if sum == 2 ** len(bin(n)[2:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    count = 0\n    while n:\n        if n&1 == 1:\n            count += 1\n        n >>= 1\n    return count >= 1"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables for sum of powers of 2\n    sum_powers_of_2 = 0\n    power_of_2 = 1\n\n    # Loop until the sum of powers of 2 is equal to n\n    while sum_powers_of_2 < n:\n        # Check if the sum of powers of 2 can be equal to n\n        sum_powers_of_2 += power_of_2\n\n        # Increment the power of 2 by 1\n        power_of_2 *= 2\n\n    # Check if the sum of powers of 2 is equal to n\n    if sum_powers_of_2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a variable to store the sum of powers of 2\n    power_sum = 0\n    \n    # Iterate over the number of bits in the number\n    for i in range(32): \n        # Check if the i-th bit of the number is 1\n        if n & (1 << i): \n            # If yes, add the (2^i) to the power_sum\n            power_sum += 2**i\n    \n    # If the power_sum is equal to the original number, then the number is possible\n    if power_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while n > 1:\n        power += 1\n        n = n >> 1\n    return power == 3"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Initialize the sum and count of 2's\n    sum_of_2 = 0\n    count_of_2 = 0\n    \n    # Check all possible powers of 2 up to sqrt(n)\n    for i in range(2, int(n**0.5)+1):\n        \n        # Check if the number is divisible by i\n        if n % i == 0:\n            \n            # Check if i is a power of 2\n            if i == 2**count_of_2:\n                sum_of_2 += i\n                \n                # Increment the count of 2's\n                count_of_2 += 1\n            \n            # Check if i is a power of 2 and it's the last power of 2\n            elif i == 2**(count_of_2-1):\n                sum_of_2 += i\n                \n                # Check if there are any more powers of 2 to check\n                if count_of_2 == 1:\n                    return True\n                else:\n                    return False\n            \n            # Check if i is not a power of 2\n            else:\n                return False\n    \n    # Check if there are any more powers of 2 to check\n    if count_of_2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    power = 0\n    while n > 0:\n        if n & 1:\n            return False\n        power += 1\n        n >>= 1\n    return power!= 0"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    else:\n        if n % 2 == 0:\n            return is_Sum_Of_Powers_Of_Two(n//2)\n        else:\n            return is_Sum_Of_Powers_Of_Two(n//2) + is_Sum_Of_Powers_Of_Two(n//2+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is divisible by 2\n    if n % 2 == 0: \n        # If the number is divisible by 2, then it cannot be represented as sum of non-zero powers of 2\n        return False\n    \n    # If the number is odd, then we need to check if it can be represented as sum of non-zero powers of 2\n    # We can do this by checking if the number is a sum of non-zero powers of 2\n    \n    # Initialize a variable to store the power of 2 \n    power = 0\n    \n    # Loop through the digits of the number and add the power of 2 to it until the sum is greater than or equal to the number\n    while n >= power: \n        # Add the power of 2 to the sum\n        n += power\n        \n        # Increment the power of 2\n        power *= 2\n        \n    # If the sum is equal to the number, then the number can be represented as sum of non-zero powers of 2\n    if n == n: \n        return True\n    else: \n        # If the sum is not equal to the number, then the number cannot be represented as sum of non-zero powers of 2\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2*3.14159*r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is\", circumference, \"units\")"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    :param r: radius of the circle\n    :type r: float\n    :return: circumference of the circle\n    :rtype: float\n    \"\"\"\n    return 2 * 3.14 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * math.pi * r\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        for subitem in item:\n            flattened.append(subitem)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Create an empty list to store the numbers\n    flattened = []\n    # Loop through each item in the list\n    for item in test_list:\n        # If the item is a list, recursively call the function on that list and append its numbers to the flattened list\n        if isinstance(item, list):\n            flattened.extend(extract_singly(item))\n        # If the item is a number, append it to the flattened list\n        elif isinstance(item, (int, float)):\n            flattened.append(item)\n    # Return the flattened list\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for sublist in test_list:\n        for item in sublist:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list += sublist\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if type(item) is list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return set(flat_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the largest element in the first i elements\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n\n        # Swap the largest element with the first element\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Choose the largest unsorted element\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the elements\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        # Bubble the smaller element up the list\n        for j in range(i, 0, -1):\n            if nums[j] < nums[j-1]:\n                nums[j], nums[j-1] = nums[j-1], nums[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Initialize the maximum pancake size and its index\n    max_pancake = max_index = 0\n    # Iterate over the numbers and find the maximum pancake size\n    for i in range(n):\n        if i == n - 1:  # If the last number is the maximum\n            max_pancake = 1\n            max_index = i\n        else:\n            # Find the size of the maximum pancake starting from the current number\n            current_pancake = 1\n            while i - current_pancake >= 0 and nums[i - current_pancake] > nums[i]:\n                current_pancake += 1\n            if current_pancake > max_pancake:\n                max_pancake = current_pancake\n                max_index = i\n    # Bubble the numbers until the maximum pancake is sorted\n    for i in range(max_pancake, 0, -1):\n        for j in range(0, n - i):\n            if nums[j] > nums[j + i]:\n                nums[j], nums[j + i] = nums[j + i], nums[j]\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts the given list of elements using the pancake sort algorithm.\n    '''\n    # Store the length of the list in a variable\n    n = len(nums)\n\n    # Iterate through each element in the list\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a copy of the input list to avoid modifying it\n    nums = nums[:]\n    \n    # get the length of the list\n    n = len(nums)\n    \n    # perform n-1 pancake swaps\n    for i in range(n-1):\n        # find the largest element\n        largest = i\n        for j in range(i+1, n):\n            if nums[j] > nums[largest]:\n                largest = j\n        # swap the elements\n        nums[i], nums[largest] = nums[largest], nums[i]\n        # reverse the pancake\n        reverse(nums, i, n-1)\n        # check if the list is sorted\n        if sorted(nums) == nums:\n            return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    def cocktail_sort(nums):\n        n = len(nums)\n        swapped = True\n        while swapped:\n            swapped = False\n            for i in range(n-1):\n                if nums[i] > nums[i+1]:\n                    nums[i], nums[i+1] = nums[i+1], nums[i]\n                    swapped = True\n        return nums\n\n    def in_place_pancake_sort(nums):\n        n = len(nums)\n        for i in range(n-1, 0, -1):\n            nums[i], nums[0] = nums[0], nums[i]\n            j = 0\n            for k in range(1, i):\n                if nums[k] > nums[0]:\n                    nums[k], nums[j] = nums[j], nums[k]\n                    j += 1\n\n    nums = cocktail_sort(nums)\n    in_place_pancake_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n\n    # Bubble sort algorithm\n    for i in range(n):\n        # Traverse through all array elements\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n\n    # Print the sorted array\n    print(\"Sorted array is:\", nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Initialize variables for the indices of the smallest element and its index in the sorted list\n    min_idx = 0\n    min_val = nums[0]\n    sorted_list = [nums[0]]\n\n    # Iterate over the list of elements\n    for i in range(1, len(nums)):\n        # Find the index of the smallest element\n        if nums[i] < min_val:\n            min_idx = i\n            min_val = nums[i]\n\n        # Add the index of the smallest element to the sorted list\n        sorted_list.append(min_idx)\n\n    # Iterate over the sorted list and swap elements accordingly\n    for i in range(len(nums) - 1, 0, -1):\n        nums[i], nums[sorted_list[i]] = nums[sorted_list[i]], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # print(n)\n    # print(nums)\n\n    for i in range(n):\n        # print(\"i=\", i)\n        # print(\"nums[i]\", nums[i])\n        # print(\"nums[0]\", nums[0])\n        # print(\"nums[-1]\", nums[-1])\n        # print(\"nums[-i-1]\", nums[-i-1])\n        # print(\"i+1\", i+1)\n\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i, n):\n            # print(\"j=\", j)\n            # print(\"max_index\", max_index)\n            # print(\"nums[j]\", nums[j])\n            # print(\"nums[max_index]\", nums[max_index])\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the i-th element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n        # print(\"Sorted array is\", nums)\n\n        # Reverse the first i elements to sort in ascending order\n        # print(\"Reversed array is\", nums[i:])\n        # nums[i:0:-1] = nums[i:0:-1][::-1]\n        # print(\"Reversed array is\", nums[i:])\n\n        # print(\"Sorted array is\", nums)\n\n        # Reverse the last n-i elements to sort in descending order\n        # print(\"Reversed array is\", nums[:-i])\n        # nums[-i:] = nums[-i:][::-1]\n        # print(\"Reversed array is\", nums[:-i])\n\n        # print(\"Sorted array is\", nums)\n\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake(nums, start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def rotate(nums, start, end):\n        reverse_pancake(nums, start, end)\n        reverse_pancake(nums, start, end - 1)\n        reverse_pancake(nums, start + 1, end)\n\n    def quicksort(nums, start, end):\n        if start >= end:\n            return\n\n        pivot_index = start\n        for i in range(start + 1, end + 1):\n            if nums[i] <= nums[pivot_index]:\n                pivot_index += 1\n                nums[i], nums[pivot_index] = nums[pivot_index], nums[i]\n\n        nums[pivot_index], nums[end] = nums[end], nums[pivot_index]\n\n        quicksort(nums, start, pivot_index - 1)\n        quicksort(nums, pivot_index + 1, end)\n\n    quicksort(nums, 0, len(nums) - 1)\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list2[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    This function takes three lists as input and returns the count of items that are identical in the same position of the lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    # Initialize a dictionary to store the count of identical pairs\n    count = {}\n    \n    # Loop through the first list and check for identical pairs in the other two lists\n    for item1 in list1:\n        # Get the index of the item in the second list\n        index2 = list2.index(item1)\n        # Check if the item in the third list is also the same as the item in the second list\n        if list3[index2] == item1:\n            # If it is, add the pair to the dictionary with a count of 1\n            if item1 in count:\n                count[item1] += 1\n            else:\n                count[item1] = 1\n                \n    # Return the dictionary with the count of identical pairs\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    \"\"\"\n    This function takes a tuple as input and returns the number of lists in the tuple.\n    \"\"\"\n    count = 0\n    for element in Input:\n        if type(element) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    \n    max_diff = 0  # variable to store the maximum absolute difference\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf') #initializing max_diff to negative infinity\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if i!= j: \n                diff = abs(arr[i] - arr[j]) \n                if diff > max_diff: \n                    max_diff = diff \n    return max_diff "
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # initialize maximum difference to the first element in the array\n    max_diff = abs(arr[0] - arr[1])\n\n    # loop through the array starting from the second element\n    for i in range(1, len(arr)):\n        # calculate the absolute difference between the current element and the next element\n        current_diff = abs(arr[i] - arr[i + 1])\n\n        # update the maximum difference if the current difference is greater\n        max_diff = max(max_diff, current_diff)\n\n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if b == 0:\n        return None\n    \n    # Use the quadratic formula to find the two solutions\n    x1 = (-n + sqrt(n*n - 4*a*b)) / (2*a)\n    x2 = (-n - sqrt(n*n - 4*a*b)) / (2*a)\n    y1 = x1/a\n    y2 = x2/a\n    \n    # Check if the solutions are integers\n    if not (x1.is_integer() and x2.is_integer() and y1.is_integer() and y2.is_integer()):\n        return None\n    \n    # Return the solutions as a tuple\n    return (int(x1), int(x2), int(y1), int(y2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for i in range(1, n+1):\n        x = (n - i*b) // a\n        y = i*a\n        if x*a + y*b == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(1, 100):\n        if a * x + b * (100 - x) == n:\n            return (x, 100 - x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    for x in range(-b // a, b // a + 1):\n        y = n - a * x\n        if a * x + b * y == n:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables to store the solution\n    x = None\n    y = None\n    # Check if the discriminant is negative\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    # Check if the discriminant is zero\n    elif discriminant == 0:\n        x = 0\n        y = -b/2/a\n    # Check if the discriminant is positive\n    else:\n        x1 = (-b + discriminant**0.5)/(2*a)\n        x2 = (-b - discriminant**0.5)/(2*a)\n        # Check if x1 is less than x2\n        if x1 < x2:\n            x = x1\n            y = -b/2/a\n        else:\n            x = x2\n            y = -b/2/a\n    # Return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # check if a, b, n are all integers\n    if not all(isinstance(x, int) for x in (a, b, n)):\n        return None\n\n    # check if a, b are not both zero\n    if a == 0 and b!= 0:\n        return None\n\n    # check if n is divisible by a and b\n    if n % a!= 0 and n % b!= 0:\n        return None\n\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # check if d is greater than 0\n    if d > 0:\n        x1 = (-b + d**0.5) / (2*a)\n        x2 = (-b - d**0.5) / (2*a)\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for i in range(1, n):\n        if a * i + b * (n - i) == n:\n            return (i, n - i)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        return None\n    for x in range(n // b + 1):\n        if a * x + b * (n // b - x) == n:\n            return (x, n // b - x)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def gcd(a, b):\n    \"\"\"\n    Compute the greatest common divisor of two numbers a and b.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef modular_multiplicative_inverse(a, b):\n    \"\"\"\n    Compute the modular multiplicative inverse of a modulo b.\n    \"\"\"\n    if b == 1:\n        return a\n    else:\n        return modular_multiplicative_inverse(b, a % b)\n\ndef find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # Find the greatest common divisor of a and b\n    gcd_ab = gcd(a, b)\n    \n    # If gcd(a, b) is 1, then a and b are relatively prime, so there is no solution.\n    if gcd_ab == 1:\n        return None\n    \n    # Compute the modular multiplicative inverse of a modulo b\n    inverse_ab = modular_multiplicative_inverse(a, b)\n    \n    # If the modular multiplicative inverse does not exist, there is no solution.\n    if inverse_ab is None:\n        return None\n    \n    # Compute x and y using the formula ax + by = n\n    x = (n // gcd_ab) * inverse_ab % b\n    y = (n - x * a) // b\n    \n    # Return the solution as a tuple (x, y)\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize variables\n    x, y, t = 0, 1, 0\n    \n    # Loop through numbers from 0 to n\n    for i in range(n):\n        # Update t\n        t = t * a + b\n        \n        # If t becomes zero, return tuple (x, y)\n        if t == 0:\n            return (x, y)\n        \n        # Update x and y\n        x, y = y, x - y\n    \n    # If no solution exists, return None\n    return None"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with all elements from the first list\n    that are not present in the second list.\n    \"\"\"\n    return list(set(list1) - set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    new_list = []\n    for element in list1:\n        if element not in list2:\n            new_list.append(element)\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Loop through the list2 and check if each element is present in list1\n    for item in list2:\n        if item in list1:\n            # If the element is present, remove it from list1\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1 = list(set(list1) - set(list2))\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    list1.clear()\n    list1.extend([x for x in list2 if x not in list1])\n    return list1"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_val = 0\n    for i in range(n//2):\n        sum_val += n - 2*i\n    return sum_val"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total\n\nprint(sum_series(10)) # Output: 120"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        print(\"The function only works for even numbers of terms.\")\n        return\n    \n    sum = 0\n    for i in range(n//2):\n        sum += (n - 2*i)\n    \n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    # initialize variables\n    result = 0\n    i = 0\n    n_half = n // 2\n    x = n - n_half\n\n    # calculate the sum\n    while x >= 0:\n        result += n - 2*i\n        i += 1\n        x -= n_half\n    \n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += n - 2 * i\n    return sum_value"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        i = 1\n        sum_so_far = 0\n        while i <= n//2:\n            sum_so_far += (n - 2*i)\n            i += 1\n        return sum_so_far"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    sum = 0\n    i = 0\n    while i < n // 2:\n        sum += (n - 2*i)\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    a = tan(pi/l)\n    return s*a"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    area = (s * l ** 2) / (4 * tan(pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s * tan(i*pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the area of the polygon using Heron's formula\n    area = (s * l) / 2\n    \n    # return the area of the polygon\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the semi-perimeter of the polygon\n    h = s/tan(pi/l)\n    # calculate the area of the polygon\n    area = l * h\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.0\n    for i in range(l):\n        area += (s / l) * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(1, l+1):\n        area += s*tan(pi/l)\n        # angle between adjacent sides is pi/l\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the semi-perimeter of the polygon\n    p = (s + l) / 2\n    # Calculate the area of the polygon using Heron's formula\n    area = (1/2) * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * tan((pi/l) * i)\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function checks if the sum of the divisors of two integers are the same.\n\n    Args:\n        n (int): An integer number.\n\n    Returns:\n        bool: True if the sum of the divisors of two integers are the same, False otherwise.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n using math module\n    sum_div = sum(range(1, int(math.sqrt(n))+1))\n\n    # Check if the sum of the divisors of n and the given number n are equal\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the divisors of n\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i!= i:\n                divisors.append(n // i)\n    # calculate the sum of the divisors\n    divisor_sum = sum(divisors)\n    # check if the sum is the same as n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return False\n    divs = []\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            divs.append(i)\n            divs.append(n)\n    if n > 1:\n        divs.append(n)\n    return sum(divs) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divs.append(i)\n            if n // i!= i:\n                divs.append(n // i)\n    if sum(divs) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = sum([i for i in range(1, int(math.sqrt(n))+1) if n % i == 0])\n    # Calculate the sum of the divisors of n+1\n    div_sum += sum([i for i in range(1, int(math.sqrt(n+1))+1) if n+1 % i == 0])\n    # Check if the sum of the divisors is the same\n    if div_sum == 2*(n-1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer `n` as input and returns True if the sum of the divisors of `n` is the same as `n`,\n    and False otherwise.\n    '''\n    # Use a loop to calculate the sum of divisors of n\n    divisor_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_sum += i + n//i\n            \n    # Compare the sum of divisors to n\n    if divisor_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Using the Euclidean algorithm to find the GCD of two integers\n    def gcd(a, b): \n        while b: \n            a, b = b, a % b \n        return a\n    \n    # Finding the sum of divisors of n using the Euclidean algorithm\n    def sum_divisors(n): \n        return sum(i for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    \n    # Finding the sum of the divisors of n and m\n    sum_n = sum_divisors(n)\n    sum_m = sum_divisors(m)\n    \n    # Comparing the sum of divisors of n and m using the Euclidean algorithm\n    if gcd(sum_n, sum_m) == 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n \n    div_sum = sum([x for x in range(1, int(math.sqrt(n))+1) if n % x == 0])\n    \n    # Check if the sum of divisors is equal to n \n    if div_sum == n: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Compute the divisors of n using math.factorial()\n    divisors = [math.factorial(i) for i in range(1, int(math.sqrt(n))+1)]\n    # Compute the sum of the divisors\n    div_sum = sum(divisors)\n    # Check if the sum of divisors of n and n itself are equal\n    return div_sum == n * (n-1) // 2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_divisors = 0 \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            sum_divisors += i \n            if n // i!= i: \n                sum_divisors += n // i \n    if sum_divisors == n: \n        return True \n    else: \n        return False "
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes a string as input and counts the number of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(26):\n        count += str1.lower().count(chr(ord('a') + i))\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        if str1.lower().count(alphabet[i]) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase\n    str1 = str1.lower()\n    \n    # Initialize the count of characters to 0\n    count = 0\n    \n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n            # If the character is in the English alphabet, increment the count\n            count += 1\n    \n    # Return the count of characters\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)): \n        if str1.lower()[i] == str(i).lower(): \n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # convert string to lowercase\n    str1 = str1.lower()\n\n    # initialize counter\n    count = 0\n\n    # iterate through each character in the string\n    for char in str1:\n        # check if the character is an English letter\n        if char.isalpha():\n            # count the number of occurrences of the character at the current position in the string\n            count += str1.count(char, str1.find(char))\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Create a dictionary to store the position of each character in the English alphabet\n    position_dict = {chr(i): i for i in range(97, 123)}\n\n    # Initialize a count variable to store the number of characters in the string that occur at the same position in the string as in the English alphabet\n    count = 0\n\n    # Loop through each character in the string\n    for char in str1:\n        # Get the position of the character in the English alphabet\n        position = position_dict[char.lower()]\n\n        # Check if the position of the character matches the position of any other character in the string\n        for other_char in str1:\n            # Get the position of the other character in the English alphabet\n            other_position = position_dict[other_char.lower()]\n\n            # If the positions match, increment the count variable\n            if position == other_position:\n                count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Create a dictionary to store the frequency of characters in str1\n    char_freq = {}\n\n    # Convert all characters in str1 to lowercase\n    str1 = str1.lower()\n\n    # Iterate over each character in str1\n    for char in str1:\n        # If the character is a letter, update its frequency in char_freq\n        if char.isalpha():\n            char_freq[char] = char_freq.get(char, 0) + 1\n\n    # Initialize a counter variable to keep track of the number of characters that occur at the same position in str1 as in the English alphabet\n    count = 0\n\n    # Iterate over each character in str1 and its frequency in char_freq\n    for char, freq in char_freq.items():\n        # Check if the character is at the same position in str1 as in the English alphabet (case insensitive)\n        if freq > 1 and char in \"abcdefghijklmnopqrstuvwxyz\":\n            # If the character is at the same position, increment the counter\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Initialize the character count dictionary\n    count_dict = {}\n    \n    # Convert all characters to lowercase to ignore case\n    str1 = str1.lower()\n    \n    # Loop through the characters in the string\n    for char in str1:\n        # If the character is a letter, add it to the dictionary\n        if char.isalpha():\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop through the dictionary and count the characters at the same position in the English alphabet\n    for key, value in count_dict.items():\n        if key.upper() in str1.upper():\n            result.append((key, value))\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        for j in range(len(str1)):\n            if alphabet[i].lower() == str1[j].lower():\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    # convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    count = 0\n    # iterate through the string and count the characters that occur at the same position in the English alphabet\n    for i in range(26):\n        count += str1.count(chr(i+97))\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n\n    # Initialize variables to keep track of the number of even pairs and the xor value\n    even_pairs = 0\n    xor_value = 0\n\n    # Iterate over the list\n    for i in range(len(A)):\n        # Check if the xor value is even\n        if xor_value % 2 == 0:\n            even_pairs += 1\n\n        # Calculate the xor value for the current index\n        xor_value = A[i] ^ i\n\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    # Count the number of even numbers\n    count_even = sum(1 for num in A if num % 2 == 0)\n\n    # Initialize a dictionary to store the count of odd numbers for each value of A[i]\n    odd_count = {num: 0 for num in range(max(A) + 1)}\n\n    # Loop through the list and increment the count of odd numbers for each A[i]\n    for num in A:\n        odd_count[num] += 1\n\n    # Count the number of even pairs using the formula\n    # count = sum(odd_count[x] * (odd_count[x] - 1) // 2 for x in odd_count if odd_count[x] % 2 == 0)\n    count = 0\n    for x in odd_count:\n        if odd_count[x] % 2 == 0:\n            count += odd_count[x] * (odd_count[x] - 1) // 2\n\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    count = 0 \n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1 \n    return count "
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] + A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n % 2 == 0: \n        n = n // 2 \n    if n == 0: \n        return 1 \n    else: \n        return 2**int(n*log2(2)) + 1\n\ndef log2(x): \n    '''\n    Helper function to calculate the logarithm of x to the base 2.\n    '''\n    return int(log(x, 2)) \n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2**(int(log2(n))) + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    \n    i = 1\n    while i < n:\n        i *= 2\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # Check if n is a power of 2 or not\n    if n & (n - 1) == 0: \n        return n\n    \n    # Find the highest power of 2 smaller than n\n    power = 1\n    while power < n: \n        power <<= 1\n    \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = n - 1 # making n a power of 2\n    n = n | (n >> 1) # making n a power of 2\n    n = n | (n >> 2) # making n a power of 2\n    n = n | (n >> 4) # making n a power of 2\n    n = n | (n >> 8) # making n a power of 2\n    n = n | (n >> 16) # making n a power of 2\n    n = n + 1 # incrementing n\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # use binary search to find the nearest power of 2\n    # if n is already a power of 2, return n\n    if n & (n - 1) == 0:\n        return n\n    \n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return 1 << low"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the next power of 2\n    next_power = n\n\n    # Loop until the next power of 2 is greater than or equal to n\n    while next_power >= n:\n        next_power = 2 * next_power\n\n    # Return the next power of 2\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    \n    # initialize power variable\n    power = 1\n    \n    # loop until power is greater than or equal to n\n    while power >= n:\n        power <<= 1\n    \n    # return the power\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to binary representation\n    binary = bin(n)[2:]\n    # Initialize power variable\n    power = 0\n    # Iterate through binary representation and set power variable to 1 if a 1 is encountered\n    for bit in binary:\n        if bit == '1':\n            power += 1\n        # If power variable is greater than or equal to the length of the binary string, return the value\n        if power >= len(binary):\n            return 2**power\n    # If no 1 is encountered in the binary representation, return 2 raised to the power of n\n    return 2**(n + 1)"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the next power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, num):\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x): \n    count = 0 \n    for i in a: \n        if i == x: \n            count += 1 \n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(lst, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in lst:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    This function takes two parameters:\n    a: the list of numbers to search in\n    x: the number to search for\n    It returns the number of times x appears in the list a.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    This function takes a list `a` and a number `x` as input. \n    It returns the number of occurrences of `x` in `a`.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i-1]\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_value = 0\n    for i in range(m, n+1):\n        sum_value += list1[i]\n    return sum_value"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through the list and add the numbers within the range to the sum variable\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        m, n = n, m\n    if m < 0:\n        m = 0\n    if n >= len(list1):\n        n = len(list1) - 1\n    if m == n:\n        return list1[m]\n    else:\n        return sum_range_list(list1, m+1, n) + list1[m]"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    This function takes two lists, `list1` and `list2`, and finds the sum of numbers in the range specified by the two indices `m` and `n`.\n    \"\"\"\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(m, n+1) if i < j)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        print(\"List is empty!\")\n        return\n\n    # Check if m is less than 0 or greater than n or if n is greater than the length of the list\n    if m < 0 or m > n or n > len(list1):\n        print(\"Invalid indices!\")\n        return\n\n    # Initialize variables to store the sum of elements between m and n\n    sum_range = 0\n\n    # Iterate over the range of indices from m to n\n    for i in range(m, n+1):\n        # Check if the index is within the range of the list\n        if i >= 0 and i < len(list1):\n            # Add the element at the index to the sum of elements between m and n\n            sum_range += list1[i]\n\n    # Return the sum of elements between m and n\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \na = float(input(\"Enter the length of side a: \"))\nprint(\"The perimeter of the pentagon is:\", perimeter_pentagon(a))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the circumference of the pentagon\n    circumference = 2 * a * math.sin(math.pi / 5)\n\n    # return the perimeter of the pentagon\n    return circumference * 5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the length of one side of the pentagon\n    half_perimeter = 5 * (math.sqrt(3) - 1)  # Formula for the half perimeter\n    # Calculate the number of times the side is repeated to get a full pentagon\n    n_full_pentagon = math.ceil(a/half_perimeter)\n    # Calculate the perimeter of the full pentagon\n    perimeter = half_perimeter * n_full_pentagon\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 2*math.sqrt(3)*a\n    return circumference*5"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Formula for the perimeter of a pentagon\n    perimeter = 5 * a\n    \n    # Return the result\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a**2) + (5*a)"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    count = 0\n    for word in s.split():\n        if'std' in word:\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s' and s[count:count+3] =='std':\n            count += 3\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index < len(s):\n        if s[index:index+3] =='std':\n            count += 1\n        index += 1\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if len(test_tuple) < 2:\n        return True\n    \n    for i in range(1, len(test_tuple)):\n        if not isinstance(test_tuple[i], type(test_tuple[0])):\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = set()\n    for item in test_tuple:\n        types.add(type(item))\n    return len(types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    first_element = type(test_tuple[0])\n\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of first element in the tuple\n    first_data_type = type(test_tuple[0])\n    \n    # loop through the tuple and compare the data type of each element to the first element\n    for element in test_tuple:\n        if type(element)!= first_data_type:\n            return False\n    \n    # if all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not test_tuple:\n        return True\n    elif len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # get the first element of the tuple\n    first_element = test_tuple[0]\n\n    # iterate over the rest of the elements in the tuple\n    for element in test_tuple[1:]:\n        # check if the element is of same data type as the first element\n        if type(element)!= type(first_element):\n            # if not, return False\n            return False\n\n    # if all elements are of same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in range(len(test_tuple)):\n        if not test_tuple[i]:\n            return False\n        elif type(test_tuple[i]) not in type_list:\n            type_list.append(type(test_tuple[i]))\n\n    return type_list"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(test_tuple) == 0:\n        return True\n    \n    first_element = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= first_element:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0]) # first element of the tuple\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type: # check if the i-th element has same data type as first element\n            return False # if not, return False\n    return True # if all elements have same data type, return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array.\n    The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    # Initialize count of x to 0\n    count = 0\n    \n    # Loop through the array\n    for i in range(n):\n        # If the current element is equal to x, increment the count\n        if arr[i] == x:\n            count += 1\n            \n    # If the count is greater than n/2, return True\n    if count > n//2:\n        return True\n    # Otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    This function takes in a sorted array, its length n, and an element x. It returns whether the element is the majority element in the array. The majority element is the element that occurs more than n/2 times.\n    \"\"\"\n    # Initialize a count variable to 0\n    count = 0\n    # Iterate through the array and increment the count if the current element is equal to x\n    for num in arr:\n        if num == x:\n            count += 1\n    # If the count is equal to n/2, return True, indicating that x is the majority element\n    if count == n//2:\n        return True\n    # Otherwise, return False, indicating that x is not the majority element\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1  # count the number of 1's in the least significant bit\n        n = n >> 1  # shift the number right by 1 bit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes a positive integer n as input and returns the count of set bits (binary digits with value 1) in it.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1  # Count the set bits by looking at the last bit\n        n >>= 1  # Shift the binary digit to the right\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        n &= (n - 1) # clear the least significant bit set to 1 \n        count += 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    This function takes an integer as input and returns the number of set bits in the binary representation of that number.\n\n    The function uses the bitwise operator `&` to perform a bitwise AND operation between each bit of the binary representation of the input number and a mask that contains only 1's. The number of set bits is then counted by counting the number of times the mask appears in the binary representation of the input number.\n\n    If the input number is 0, the function returns 0.\n    '''\n\n    # If the input number is 0, return 0\n    if n == 0:\n        return 0\n\n    # Calculate the binary representation of the input number\n    binary = bin(n)[2:]\n\n    # Define a mask that contains only 1's\n    mask = 1\n\n    # Initialize a counter variable to 0\n    count = 0\n\n    # Iterate through each bit of the binary representation\n    for i in range(len(binary)):\n        # If the current bit is a 1, increment the counter\n        if binary[i] == '1':\n            count += 1\n\n        # If the current bit is not a 1, shift the mask one position to the left\n        else:\n            mask <<= 1\n\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    result = \"\"\n    for i, char in enumerate(str):\n        if i % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n    str: The given string which we want to remove odd index characters from.\n\n    Returns:\n    A string with the characters which have odd index values removed.\n    \"\"\"\n    # Initialize an empty string to store the output string\n    output_str = \"\"\n    \n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index value is odd\n        if len(str) % 2!= 0:\n            # If it is, append the character to the output string\n            output_str += char\n    \n    # Return the output string\n    return output_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Create an empty list to store the odd values\n    odd_values = []\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is odd (i.e., the index is odd), append it to the list of odd values\n        if i % 2!= 0:\n            odd_values.append(str[i])\n    \n    # Join the list of odd values into a string\n    result = ''.join(odd_values)\n    \n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 1:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2!= 0])"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    # Find the minimum of a, b, and c\n    if a < b and a < c:\n        min_val = a\n    elif b < a and b < c:\n        min_val = b\n    else:\n        min_val = c\n\n    return min_val"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three arguments and returns the minimum of the three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    This function takes three numbers as inputs and returns their minimum.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Convert the given range to binary\n    binary_range = bin(r)[2:]\n\n    # Check whether all the bits in the binary range are unset or not\n    for i in range(l, r + 1):\n        binary_num = bin(i)[2:]\n        if binary_num not in binary_range:\n            return False\n\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the difference between the given range and the max value of the bitwise representation of n\n    diff = (1 << r) - (1 << l)\n    # Subtract the minimum value of the bitwise representation of n from the given range\n    n = n - (1 << l)\n    # Perform bitwise AND of n with the given range and the difference to get all bits unset in the given range\n    unset_bits = n & diff\n    # Check if all unset bits are set to 1\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    :param n: An integer representing the number of bits in the given range.\n    :param l: An integer representing the least significant bit index in the given range.\n    :param r: An integer representing the most significant bit index in the given range.\n    :return: True if all the bits in the given range are unset, else False.\n    \"\"\"\n\n    # Iterate over the range of bits\n    for i in range(l, r + 1):\n        # Check if the current bit is set or unset\n        if n & (1 << i):\n            return False\n\n    # If we make it through the entire range without finding any unset bits, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are unset in the given range or not.\n\n    :param n: An integer representing the number whose bits are to be checked.\n    :param l: An integer representing the least significant bit index.\n    :param r: An integer representing the most significant bit index.\n    :return: Returns a boolean value indicating whether all the bits are unset or not.\n    '''\n    mask = (1 << (r - l + 1)) - 1\n    return n & mask == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Check if l < 0 or r > n\n    if l < 0 or r > n:\n        return False\n\n    # Initialize a variable to store the number of unset bits\n    unset_bits = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r+1):\n        # Check if the current bit is unset\n        if n & (1 << i) == 0:\n            unset_bits += 1\n\n    # Check if all the bits are unset\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # Initialize a variable 'count' to keep track of the number of unset bits in the given range.\n    count = 0\n\n    # Iterate through the bits of n from the left to the right.\n    for i in range(l-1, -1, -1):\n        # Calculate the mask for the i-th bit and check if it is set in the given range.\n        mask = (1 << i)\n        if n & mask!= 0 and n & mask < r:\n            # If the mask is set and the corresponding bit in the given range is less than r, increment the count.\n            count += 1\n\n    # Check if the count is zero or equal to the number of bits in the given range.\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three integers n, l and r as input.\n    n is the number to check whether all the bits are unset in the range.\n    l is the lower limit of the range.\n    r is the upper limit of the range.\n\n    The function returns True if all the bits in the given range are unset, else it returns False.\n    '''\n    mask = (1 << (r-l+1)) - 1   # Using bitwise operations to get the binary representation of the mask\n    return (n & mask) == 0   # Using bitwise AND operator to check whether all the bits in the given range are unset or not."
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        count += bin(n).count('1')\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # initialize the result variable\n    result = True\n\n    # loop through the bits of the given range and check if all the bits are set\n    for i in range(l, r+1):\n        # check if the ith bit is set\n        if (n & (1<<i)) == 0:\n            # if not, set the result to false and break out of the loop\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            return False\n    return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    i = 0\n    j = n - 1\n    while i < j:\n        while i < j and arr[i] >= 0:\n            i += 1\n        while i < j and arr[j] < 0:\n            j -= 1\n        if i < j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    for i in range(n):\n        if arr[i] < 0:\n            arr[0], arr[i] = arr[i], arr[0]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg = []\n    pos = []\n    for num in arr:\n        if num < 0:\n            neg.append(num)\n        else:\n            pos.append(num)\n    neg.extend(pos[:n-len(neg)])\n    pos.extend(neg)\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Iterate through the array\n    for i in range(n):\n        # Find the largest negative element in the current sub-array\n        largest_negative = max(arr[i:i+n], key=lambda x: abs(x))\n        # Find the index of the largest negative element in the current sub-array\n        largest_negative_index = arr[i:i+n].index(largest_negative)\n        # Swap the largest negative element with the first element in the current sub-array\n        arr[i], arr[largest_negative_index] = arr[largest_negative_index], arr[i]\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    negative = []\n    positive = []\n    \n    # Separate the elements into positive and negative subarrays\n    for i in range(n):\n        if arr[i] < 0:\n            negative.append(arr[i])\n        else:\n            positive.append(arr[i])\n    \n    # Concatenate the positive and negative subarrays in reverse order\n    result = negative + positive[::-1]\n    \n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of negative and positive elements\n    negative = 0\n    positive = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # If the current element is negative, increment the negative counter\n        if arr[i] < 0:\n            negative += 1\n        # If the current element is positive, increment the positive counter\n        elif arr[i] > 0:\n            positive += 1\n\n    # Initialize variables to keep track of the current position of the negative and positive elements\n    negative_position = 0\n    positive_position = n\n\n    # Iterate through the array again and swap the elements as required\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            # Swap the negative element with the element at the current negative position\n            arr[i], arr[negative_position] = arr[negative_position], arr[i]\n            # Increment the negative position\n            negative_position += 1\n        elif arr[i] > 0:\n            # Swap the positive element with the element at the current positive position\n            arr[i], arr[positive_position] = arr[positive_position], arr[i]\n            # Increment the positive position\n            positive_position += 1\n\n    # Return the updated array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers, left and right, to the first and second elements of the array\n    left = 0\n    right = n - 1\n    \n    # Traverse the array from left to right\n    while left < right:\n        # If the element at the left pointer is negative, swap it with the element at the right pointer\n        if arr[left] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        # If the element at the left pointer is positive, increment the left pointer\n        else:\n            left += 1\n            \n        # If the element at the right pointer is negative, swap it with the element at the left pointer\n        if arr[right] < 0:\n            arr[left], arr[right] = arr[right], arr[left]\n        # If the element at the right pointer is positive, decrement the right pointer\n        else:\n            right -= 1\n            \n    # Print the re-arranged array\n    print(arr)"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Function to check if a number is negative\n    def is_negative(num):\n        return num < 0\n    \n    # List to store the positive numbers\n    positive_list = []\n    \n    # Loop through the first n elements of the array\n    for i in range(n):\n        # If the current element is positive, append it to the positive_list\n        if not is_negative(arr[i]):\n            positive_list.append(arr[i])\n    \n    # List to store the negative numbers\n    negative_list = []\n    \n    # Loop through the next elements of the array\n    for i in range(n, len(arr)):\n        # If the current element is negative, append it to the negative_list\n        if is_negative(arr[i]):\n            negative_list.append(arr[i])\n    \n    # Combine the positive and negative lists in the required order\n    result_list = negative_list + positive_list\n    \n    # Return the final result list\n    return result_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Separate the elements into negative and positive parts\n    neg_part = [x for x in arr[:n] if x < 0]\n    pos_part = [x for x in arr[n:] if x >= 0]\n\n    # Concatenate the negative and positive parts\n    result = neg_part + pos_part\n\n    # Return the final array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_count = 0\n    positive_count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            negative_count += 1\n        elif arr[i] > 0:\n            positive_count += 1\n\n    negative_start = 0\n    for i in range(n):\n        if negative_count > positive_count:\n            arr[i], arr[negative_start] = arr[negative_start], arr[i]\n            negative_start += 1\n        else:\n            break\n\n    positive_start = n\n    for i in range(n, 2 * n):\n        if positive_count > negative_count:\n            arr[i], arr[positive_start] = arr[positive_start], arr[i]\n            positive_start += 1\n        else:\n            break"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns a new array that re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Initialize two pointers, one for positive elements and one for negative elements\n    pos = 0\n    neg = n - 1\n    \n    # Iterate over the input array, swapping elements as needed\n    for i in range(n):\n        if arr[i] < 0:\n            # If the current element is negative, swap it with the next available negative element\n            arr[i], arr[neg] = arr[neg], arr[i]\n            neg -= 1\n        else:\n            # If the current element is positive, swap it with the next available positive element\n            arr[i], arr[pos] = arr[pos], arr[i]\n            pos += 1\n    \n    # Return the re-arranged array\n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1, char):\n    '''\n    This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Split the string into a list of words\n    words = str1.split()\n    # Loop through the list of words and replace the blank spaces with the specified character\n    for i in range(len(words)):\n        if words[i] == '':\n            words[i] = char\n    # Join the list of words into a string and return it\n    return''.join(words)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    # replace all blank spaces with the character\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \", char)\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    new_str = ''\n    for i in str1:\n        if i.isspace():\n            new_str += char\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap with the first n elements of the list\n    heap = list1[:n]\n    heapq.heapify(heap)\n\n    # Iterate through the remaining elements of the list, and add them to the heap\n    for element in list1[n:]:\n        if element > heap[0]:\n            # Remove the smallest element from the heap\n            heapq.heappop(heap)\n            # Add the new element to the heap\n            heapq.heappush(heap, element)\n\n    # Return the heap as the result\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n\n    # Iterate through the list and add the largest n items to the min heap\n    for item in list1:\n        heapq.heappush(min_heap, item)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Convert the min heap to a list and return it\n    return list(min_heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes a list and an integer n as input and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a max heap\n    heap = list(heapq.nlargest(n, lst))\n    # convert the max heap back to a list\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    \n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        elif num > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, num)\n            \n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap of size n and fill it with the elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    \n    # Fill the min heap with the remaining elements of the list\n    for i in range(n, len(list1)):\n        heapq.heappush(heap, -heapq.heappushpop(heap))\n    \n    # Convert the heap into a list and return it\n    return [-x for x in heap]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # use a heap to store the n largest numbers in the list\n    heap = []\n    for num in list1:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of the first n elements of the list\n    min_heap = [heapq.nsmallest(n, list1)]\n\n    # Iterate over the remaining elements of the list\n    for item in list1[n:]:\n        # Remove the smallest element from the min-heap and add the new element\n        heapq.heappop(min_heap)\n        heapq.heappush(min_heap, item)\n\n    # Return the min-heap as a list\n    return min_heap[0]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Use a heap to store the n largest elements\n    heap = []\n    # Add the first n elements to the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n    # Remove the smallest element from the heap and add the next smallest element to the heap\n    for i in range(n, len(list1)):\n        # If the next smallest element is smaller than the smallest element in the heap, remove it from the heap\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    # Return the list of n largest elements in the heap\n    return list(heap)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n\n    # Calculate the lateral surface area of the cylinder\n    lateral_surface_area = 2 * math.pi * r * (h + r)\n\n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * r * h + 2 * r * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*(r**2)*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h**2 - 2*3.14159*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # formula for lateral surface area of a cylinder\n    # lateral surface area = 2*pi*(r+h)*r\n    lateral_surface_area = 2 * 3.14159 * (r + h) * r\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    print(\"The lateral surface area of a cylinder with radius\", r, \"and height\", h, \"is\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*(3.14*(r**2)+(2*h*r*3.14))"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # calculate the lateral surface area using the formula\n    # lateral_surface = 2*pi*(r^2 + h^2) - pi*r^2*h\n    lateral_surface = 2*3.14159*(r**2 + h**2) - 3.14159*r**2*h\n    return lateral_surface"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area\n    lateral_surface_area = 2 * r * (h/2)**2\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l ** 3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l**3 # calculate the volume\n    return v"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        even_bit = n & 1\n        if even_bit == 0:\n            n = n >> 1\n        else:\n            n = n ^ 1 << (even_bit - 1)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n\n    # loop through each bit in the number, starting from the least significant bit\n    for bit in range(n.bit_length()):\n        # get the current bit value\n        current_bit = n >> bit & 1\n\n        # if the current bit is even, set it to 1\n        if current_bit == 0:\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    # return the result as an integer\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize an empty list to store the bits of n\n    bits = []\n    \n    # iterate through each bit of n\n    while n > 0:\n        # if the current bit is even, add 1 to the list of bits\n        if n % 2 == 0:\n            bits.append(1)\n        else:\n            bits.append(0)\n        # shift the current bit to the right by 1\n        n = n >> 1\n    \n    # join the list of bits into a single integer and return it\n    return int(''.join(map(str, bits)), 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    count = 0\n    while n:\n        if n & 1: # check if the least significant bit is 1\n            count += 1 # increment the count of even bits\n        n >>= 1 # shift the number to the right by 1\n    return count"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = n & 0b1111111100000000  # clear all odd bits\n    even_bits = even_bits | 0b1111111111111111  # set all even bits\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # Iterate over each character in the binary string\n    for i in range(len(binary_str)):\n        # Check if the character is even\n        if int(binary_str[i]) % 2 == 0:\n            # If it is, set the corresponding bit to 1\n            binary_str[i] = '1'\n        else:\n            # Otherwise, leave the bit as 0\n            binary_str[i] = '0'\n    # Convert the binary string back to an integer\n    new_num = int(binary_str, 2)\n    return new_num"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize an empty string to store the bits\n    bits = \"\"\n    \n    # Iterate over each bit in the input number\n    for bit in bin(n)[2:]:\n        # If the current bit is even, add \"1\" to the bits string\n        if bit == '1':\n            bits += \"1\"\n        else:\n            bits += \"0\"\n    \n    # Convert the bits string to an integer and return it\n    return int(bits, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the input number to a binary string\n    binary_str = bin(n)[2:]\n    \n    # Iterate over each digit in the binary string\n    for digit in binary_str:\n        # If the digit is even, add it to the sum variable\n        if int(digit) % 2 == 0:\n            sum += int(digit)\n            \n    # Convert the sum variable to an integer and return it\n    return int(sum)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    \n    # Iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the result variable\n        if int(bit) == 0:\n            result = result | (1 << int(bit))\n    \n    # Return the result\n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use Counter to count the occurrences of each tuple in the list\n    counts = Counter(test_list)\n    \n    # Return a dictionary with the counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of each unique tuple\n    count_dict = {}\n    \n    # Use the Counter class from the collections module to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n    \n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n    \n    # loop through each tuple in the list\n    for tup in test_list:\n        # add 1 to the count of the tuple in the dictionary\n        count_dict[tup] = count_dict.get(tup, 0) + 1\n    \n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count_dict[tup] = test_list.count(tup)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Use Counter to count the occurrences of each unique tuple\n    count_dict = Counter(unique_tuples)\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tup in unique_tuples:\n        count = test_list.count(tup)\n        count_dict[tup] = count\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter(test_list)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j]!= '':\n                count += 1\n                \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n\n    # initialize variables to store the count of non-empty substrings\n    count = 0\n    prev_char = None\n\n    # iterate through each character in the string\n    for char in str:\n        # check if the previous character was None or equal to the current character\n        if prev_char is None or prev_char!= char:\n            # if the previous character was not None or equal to the current character, increment the count\n            count += 1\n        # update the previous character for the next iteration\n        prev_char = char\n\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize variables\n    count = 0\n    prev = ''\n    # Iterate over each character in the string\n    for char in str:\n        # Check if the current character is not equal to the previous character\n        if char!= prev:\n            # If it's not, increment the count\n            count += 1\n        # Update the previous character\n        prev = char\n    # Return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j].strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n\n    count = 0\n\n    # iterate through all possible substrings of the given string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # if the substring is not empty, count it\n            if str[i:j].strip():\n                count += 1\n\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable\n    count = 0\n    # Initialize the list to store the elements\n    elements = []\n    # Iterate from 1 to m\n    for i in range(1, m + 1):\n        # If the current element is less than or equal to twice the previous element\n        if i <= 2 * elements[-1] <= m:\n            # Add the current element to the list of elements\n            elements.append(i)\n            # Check if the length of the list is equal to n\n            if len(elements) == n:\n                # Increment the count by 1\n                count += 1\n                # Reset the list of elements\n                elements = []\n    # Return the final count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2*n:\n        return 0\n    \n    count = 1\n    prev_num = 1\n    \n    while count*n <= m:\n        if count*n <= 2*prev_num:\n            count += 1\n        else:\n            count = 1\n            prev_num = count*n\n            \n        if count*n == m:\n            return count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n\n    # Initialize variables to keep track of the number of sequences and the previous element\n    count = 0\n    prev_element = 0\n\n    # Loop through all possible elements\n    for i in range(2, n + 1):\n\n        # Check if the element is within the specified range and greater than or equal to twice the previous element\n        if i >= 2 * prev_element <= m:\n            count += 1\n\n        # Update the previous element\n        prev_element = i\n\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Find the total number of elements that can be in the sequence\n    num_elements = m - 2 * (m - n)\n    \n    # Find the number of possible sequences of length n\n    num_sequences = 1\n    \n    # Iterate through all possible pairs of elements in the sequence\n    for i in range(2, num_elements + 1):\n        # Check if the current element is greater than or equal to twice the previous element and less than or equal to m\n        if i >= 2 * (m - n):\n            num_sequences *= (i - 1) // (m - n)\n    \n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n\n    for i in range(n):\n        if i == 0:\n            if m % 2 == 0:\n                total_sequences += m // 2\n            else:\n                total_sequences += (m // 2) + 1\n        else:\n            for j in range(i):\n                if i - j < m:\n                    break\n                if i - j == m:\n                    total_sequences += 1\n                else:\n                    total_sequences += (m - (i - j)) // (i - j)\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_sequences = 0\n    for i in range(n+1):\n        for j in range(m-2*i):\n            if j+2*i <= m and (j+2*i)%2 == 0:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables\n    total_sequences = 0\n    prev_element = 0\n    current_element = 2\n    \n    # Loop through all possible elements up to m\n    while current_element <= m:\n        # Check if the current element is within the required range\n        if 2 * prev_element <= current_element <= m:\n            # Increment the number of sequences\n            total_sequences += 1\n        \n        # Update the previous and current elements\n        prev_element = current_element\n        current_element += 1\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(1, m // 2 + 1):\n        for j in range(i + 1, min(m, 2 * i + n) + 1, 2):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid_sequence(sequence):\n        previous_element = None\n        for element in sequence:\n            if previous_element is None or element >= 2 * previous_element:\n                if element >= 2 * previous_element and element <= m:\n                    return True\n            previous_element = element\n        return False\n\n    def count_sequences(i, j, current_sequence):\n        if j >= n:\n            if is_valid_sequence(current_sequence):\n                total_sequences += 1\n        else:\n            count_sequences(i, j + 1, current_sequence)\n            if len(current_sequence) < n:\n                count_sequences(i, j + 1, current_sequence + [i])\n\n    total_sequences = 0\n    count_sequences(1, 1, [1])\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the total number of sequences to 1\n    total_sequences = 1\n    \n    # Iterate through the numbers 2 to n\n    for num in range(2, n + 1):\n        # Check if num is greater than or equal to twice the previous element but less than or equal to m\n        if num >= 2 * total_sequences and num <= m:\n            # Increment the total number of sequences\n            total_sequences += 1\n    \n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    length = len(list1)\n\n    # Check if the length of the first list is greater than or equal to 1\n    if length >= 1:\n        # Get the last element of the first list\n        last_element = list1[-1]\n\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1] = list2\n    else:\n        print(\"The first list must have at least one element.\")\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the shorter list\n    min_length = min(len(list1), len(list2))\n\n    # Replace the last element of the shorter list with the elements of the longer list\n    list1[-1] = list2[-min_length:]\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)!= len(list2):\n        print(\"The two lists must have the same length\")\n        return\n    \n    # Check if the last element of list1 is a list\n    if isinstance(list1[-1], list):\n        # If it is, replace it with the elements of list2\n        list1[-1] = list2\n    else:\n        # If it's not, append the elements of list2 to the end of list1\n        list1.extend(list2)\n\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[::-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # append the last element of the second list to the first list\n    list1.append(list2.pop())\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Error: The two lists must have the same length.\")\n        return\n\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2[-1]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_characters(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # function to check if a number is a perfect square\n    def is_perfect_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    # find the square root of the given number\n    root = int(math.sqrt(N))\n\n    # check if the given number is a perfect square\n    if is_perfect_square(N):\n        root += 1\n\n    # loop until a perfect square is found\n    while not is_perfect_square(root ** 2):\n        root += 1\n\n    return root ** 2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    root = int(math.sqrt(N))\n    \n    if root*root == N:\n        return root*root+1\n    \n    while True:\n        root += 1\n        if root*root > N:\n            root -= 1\n            return root*root\n        \n        if root*root == N:\n            return root*root"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square greater than N.\n    \"\"\"\n    def is_square(num):\n        return int(math.sqrt(num)) ** 2 == num\n\n    def next_square(num):\n        if is_square(num):\n            return num\n        else:\n            return int(num ** 2)\n\n    def next_perfect_square(num):\n        while True:\n            next_num = next_square(num)\n            if is_square(next_num):\n                return next_num\n            else:\n                num += 1\n\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n\n    # If N is a perfect square, return the next square greater than N\n    if is_square(sqrt_N ** 2):\n        return next_square(sqrt_N ** 2)\n\n    # If N is not a perfect square, return the next perfect square greater than N\n    else:\n        return next_perfect_square(sqrt_N ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N and returns the next perfect square greater than N.\n    '''\n    # Check if N is already a perfect square\n    if int(math.sqrt(N))**2 == N:\n        return N + 1\n    \n    # Find the next perfect square greater than N using binary search\n    low, high = 1, N\n    while low <= high:\n        mid = (low + high) // 2\n        if mid**2 > N:\n            high = mid - 1\n        elif mid**2 < N:\n            low = mid + 1\n        else:\n            return mid\n    \n    # If no perfect square is found, return N + 1\n    return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Check if the given number is a perfect square\n    if math.isqrt(N) ** 2 == N:\n        # If it is, find the next perfect square\n        sqrt_N = math.sqrt(N)\n        sqrt_N_plus_1 = math.ceil(sqrt_N + 1)\n        next_square = int(sqrt_N_plus_1 ** 2)\n    else:\n        # If it's not, find the nearest perfect square\n        sqrt_N = math.sqrt(N)\n        sqrt_N_plus_1 = math.ceil(sqrt_N + 1)\n        next_square = int(sqrt_N_plus_1 ** 2)\n\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    if N == 0:\n        return 1\n    if N % 4 == 0:\n        return 2*N+1\n    if N % 2 == 0:\n        return 3*N+1\n    else:\n        return 2*N+1\n"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function finds the next perfect square greater than a given number N.\n    '''\n\n    sqrtN = int(math.sqrt(N))\n    k = N - (sqrtN**2)\n    \n    # If k is negative, we need to add one to sqrtN to get the next perfect square\n    if k < 0:\n        sqrtN += 1\n        k = N - (sqrtN**2)\n\n    # Find the next perfect square that is less than or equal to the integer part of sqrtN\n    while k <= sqrtN**2:\n        x = int(math.sqrt(k))\n        if (x**2 + x) > N:\n            return x**2 + x\n        k += 1\n\n    # If no such perfect square exists, return N + 1\n    return N + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    square = math.ceil(math.sqrt(N))\n    while square**2 <= N:\n        square += 1\n    return square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number N.\n    \"\"\"\n\n    # If N is already a perfect square, return the next one.\n    if math.isqrt(N) ** 2 == N:\n        return N + 1\n\n    # If N is not a perfect square, find the closest greater perfect square.\n    else:\n        # Initialize variables.\n        low = 1\n        high = N\n\n        # Find the closest perfect square.\n        while low < high:\n            mid = (low + high) // 2\n\n            # Check if the mid square is a perfect square.\n            if math.isqrt(mid) ** 2 == mid:\n                # If the mid square is greater than N, set high to mid.\n                if mid > N:\n                    high = mid\n                # If the mid square is less than or equal to N, set low to mid+1.\n                else:\n                    low = mid + 1\n            # If the mid square is not a perfect square, set low to mid+1.\n            else:\n                low = mid + 1\n\n        # Return the closest perfect square.\n        return low + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Initialize variables\n    i = 1\n    while True:\n        # Check if the square of i is greater than N\n        if math.pow(i, 2) > N:\n            break\n        # Increment i until the square of i is greater than N\n        i += 1\n\n    # Return the square of the last incremented number\n    return math.pow(i, 2)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    This function takes an array and returns the maximum sum of a bitonic subsequence.\n    A sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        if arr[i - 1] < arr[i]:\n            dp[i] = dp[i - 1] + arr[i]\n        else:\n            dp[i] = max(dp[i - 1], 0) + arr[i]\n\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    n = len(arr)\n    max_sum = float('-inf')\n    left_sum = 0\n    right_sum = 0\n    \n    # Traverse the array from left to right\n    for i in range(n): \n        left_sum += arr[i]\n        \n        # If the left sum becomes negative, reset the right sum and update the max sum\n        if left_sum < 0: \n            right_sum = 0\n            max_sum = max(max_sum, left_sum)\n            \n        # Traverse the array from right to left\n        for j in range(i, n-1, -1): \n            right_sum += arr[j]\n            \n            # If the right sum becomes negative, reset the left sum and update the max sum\n            if right_sum < 0: \n                left_sum = 0\n                max_sum = max(max_sum, right_sum)\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    \n    # Initialize variables for sum of increasing and sum of decreasing subsequences\n    inc_sum, dec_sum = 0, 0\n    \n    # Iterate through the array and update the sum of increasing and decreasing subsequences\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            # Increasing subsequence found, update sum\n            inc_sum += arr[i]\n        else:\n            # Decreasing subsequence found, update sum\n            dec_sum += arr[i]\n    \n    # Find the maximum of the sum of increasing and decreasing subsequences\n    max_sum = max(inc_sum, dec_sum)\n    \n    # Initialize variables for sum of increasing and decreasing subsequences in reverse order\n    inc_sum_rev, dec_sum_rev = 0, 0\n    \n    # Iterate through the array in reverse order and update the sum of increasing and decreasing subsequences in reverse order\n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            # Increasing subsequence found, update sum\n            inc_sum_rev += arr[i]\n        else:\n            # Decreasing subsequence found, update sum\n            dec_sum_rev += arr[i]\n    \n    # Find the maximum of the sum of increasing and decreasing subsequences in reverse order\n    max_sum_rev = max(inc_sum_rev, dec_sum_rev)\n    \n    # Return the maximum of the two maximum sum of increasing and decreasing subsequences found\n    return max(max_sum, max_sum_rev)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # check for increasing subsequence\n    is_increasing = True\n    for i in range(1, n):\n        if arr[i] <= arr[i-1]:\n            is_increasing = False\n            break\n    if is_increasing:\n        return max(arr)\n\n    # check for decreasing subsequence\n    is_decreasing = True\n    for i in range(n-2, -1, -1):\n        if arr[i] >= arr[i+1]:\n            is_decreasing = False\n            break\n    if is_decreasing:\n        return max(arr)\n\n    # if neither increasing nor decreasing subsequence, find the maximum sum subsequence using Kadane's algorithm\n    max_sum_so_far = arr[0]\n    max_sum_ending_here = arr[0]\n    for i in range(1, n):\n        max_sum_ending_here = max(arr[i], max_sum_ending_here + arr[i])\n        max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    prev = float('-inf')\n    curr = 0\n\n    for i in range(n):\n        if arr[i] < prev:\n            curr = arr[i]\n        elif arr[i] > prev:\n            curr = arr[i] - prev\n        else:\n            curr += arr[i]\n        max_sum = max(max_sum, curr)\n        prev = arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n\n    if n == 1:\n        return arr[0]\n\n    dp = [0] * n\n    max_sum = float('-inf')\n\n    for i in range(n):\n        if i % 2 == 0:\n            dp[i] = arr[i] + max(dp[i - 1], dp[i - 2])\n        else:\n            dp[i] = arr[i] + min(dp[i - 1], dp[i - 2])\n\n        if dp[i] > max_sum:\n            max_sum = dp[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables for maximum sum of increasing and decreasing subsequences\n    max_inc = float('-inf')\n    max_dec = float('-inf')\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        \n        # If the element is greater than or equal to the first element, check if the current element is increasing or decreasing\n        if arr[i] >= arr[0]:\n            \n            # If the current element is increasing, check if the sum of the increasing subsequence is greater than the maximum sum of increasing subsequence\n            if arr[i] + max_inc > max_inc:\n                max_inc = arr[i] + max_inc\n            \n            # If the current element is decreasing, check if the sum of the decreasing subsequence is greater than the maximum sum of decreasing subsequence\n            if arr[i] - max_dec > max_dec:\n                max_dec = arr[i] - max_dec\n        \n        # If the element is less than the first element, check if the current element is increasing or decreasing\n        elif arr[i] < arr[0]:\n            \n            # If the current element is increasing, check if the sum of the decreasing subsequence is greater than the maximum sum of increasing subsequence\n            if arr[i] - max_dec > max_inc:\n                max_inc = arr[i] - max_dec\n            \n            # If the current element is decreasing, check if the sum of the increasing subsequence is greater than the maximum sum of decreasing subsequence\n            if arr[i] + max_inc > max_dec:\n                max_dec = arr[i] + max_inc\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max(max_inc, max_dec)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Find the length of the array\n    n = len(arr)\n    \n    # Initialize two variables to store the maximum sum and the start index of the bitonic subsequence\n    max_sum = float('-inf')\n    start_index = -1\n    \n    # Traverse the array from the second element to the end\n    for i in range(1, n):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            # If increasing, check if the sum of the current element and the previous sum is greater than the current maximum sum\n            if arr[i] + arr[i-1] > max_sum:\n                # If yes, update the maximum sum and start index\n                max_sum = arr[i] + arr[i-1]\n                start_index = i - 1\n        elif arr[i] < arr[i-1]:\n            # If decreasing, check if the sum of the current element and the previous sum is greater than the current maximum sum\n            if arr[i-1] + arr[i] > max_sum:\n                # If yes, update the maximum sum and start index\n                max_sum = arr[i-1] + arr[i]\n                start_index = i - 1\n    \n    # If the maximum sum is negative, it means there is no bitonic subsequence\n    if max_sum < 0:\n        return 0\n    \n    # Initialize two variables to store the current maximum sum and the end index of the bitonic subsequence\n    current_max_sum = arr[n-1]\n    end_index = n-1\n    \n    # Traverse the array from the end to the second element\n    for i in range(n-2, -1, -1):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i+1]:\n            # If increasing, check if the sum of the current element and the previous sum is greater than the current maximum sum\n            if arr[i] + arr[i+1] > current_max_sum:\n                # If yes, update the current maximum sum and end index\n                current_max_sum = arr[i] + arr[i+1]\n                end_index = i + 1\n        elif arr[i] < arr[i+1]:\n            # If decreasing, check if the sum of the current element and the previous sum is greater than the current maximum sum\n            if arr[i+1] + arr[i] > current_max_sum:\n                # If yes, update the current maximum sum and end index\n                current_max_sum = arr[i+1] + arr[i]\n                end_index = i + 1\n    \n    # If the current maximum sum is greater than the maximum sum, update the maximum sum and start index\n    if current_max_sum > max_sum:\n        max_sum = current_max_sum\n        start_index = 0\n    \n    # Return the maximum sum and start index of the bitonic subsequence\n    return max_sum, start_index"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # check if the first and last element are increasing or decreasing\n    if arr[0] < arr[n-1]:\n        return max_subarray(arr[1:], 1, n-2)\n    else:\n        return max_subarray(arr[1:], 0, n-2)\n\ndef max_subarray(arr, start, end):\n    \"\"\"\n    Helper function to find the maximum sum of a bitonic subsequence for the given array.\n    \"\"\"\n    max_sum = float('-inf')\n    for i in range(start, end+1):\n        if arr[i] > arr[i-1]:\n            subarray_sum = sum(arr[start:i+1])\n            max_sum = max(max_sum, subarray_sum)\n        else:\n            subarray_sum = sum(arr[i:end+1])\n            max_sum = max(max_sum, subarray_sum)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return None\n    \n    max_left = max_right = arr[0]\n    for i in range(1, n):\n        if arr[i] > max_left:\n            max_left = arr[i]\n        elif arr[i] < max_right:\n            max_right = arr[i]\n        else:\n            max_left = max(max_left, max_right)\n    \n    return max_left + max_right"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize the guess and the current approximation\n    guess = 1\n    approximation = 0\n\n    # Calculate the number of iterations required to get within 0.001 of the square root\n    iterations = 0\n    while abs(approximation**2 - number) > 0.001:\n        approximation = (approximation + number / approximation) / 2\n        iterations += 1\n\n    # Calculate the square root using the babylonian method\n    square_root = approximation\n\n    # Print the result and the number of iterations required\n    print(f\"The square root of {number} using the Babylonian method is {square_root}.\")\n    print(f\"It took {iterations} iterations to converge to the square root.\")"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0\n    x1 = (number + x0*x0) / 2.0\n    x2 = (number + x1*x1) / 2.0\n    x3 = (number + x2*x2) / 2.0\n    x4 = (number + x3*x3) / 2.0\n    x5 = (number + x4*x4) / 2.0\n    x6 = (number + x5*x5) / 2.0\n    x7 = (number + x6*x6) / 2.0\n    x8 = (number + x7*x7) / 2.0\n    x9 = (number + x8*x8) / 2.0\n    x10 = (number + x9*x9) / 2.0\n    x11 = (number + x10*x10) / 2.0\n    x12 = (number + x11*x11) / 2.0\n    x13 = (number + x12*x12) / 2.0\n    x14 = (number + x13*x13) / 2.0\n    x15 = (number + x14*x14) / 2.0\n    x16 = (number + x15*x15) / 2.0\n    x17 = (number + x16*x16) / 2.0\n    x18 = (number + x17*x17) / 2.0\n    x19 = (number + x18*x18) / 2.0\n    x20 = (number + x19*x19) / 2.0\n    x21 = (number + x20*x20) / 2.0\n    x22 = (number + x21*x21) / 2.0\n    x23 = (number + x22*x22) / 2.0\n    x24 = (number + x23*x23) / 2.0\n    x25 = (number + x24*x24) / 2.0\n    x26 = (number + x25*x25) / 2.0\n    x27 = (number + x26*x26) / 2.0\n    x28 = (number + x27*x27) / 2.0\n    x29 = (number + x28*x28) / 2.0\n    x30 = (number + x29*x29) / 2.0\n    x31 = (number + x30*x30) / 2.0\n    x32 = (number + x31*x31) / 2.0\n    x33 = (number + x32*x32) / 2.0\n    x34 = (number + x33*x33) / 2.0\n    x35 = (number + x34*x34) / 2.0\n    x36 = (number + x35*x35) / 2.0\n    x37 = (number + x36*x36) / 2.0\n    x38 = (number + x37*x37) / 2.0\n    x39 = (number + x38*x38) / 2.0\n    x40 = (number + x39*x39) / 2.0\n    x41 = (number + x40*x40) / 2.0\n    x42 = (number + x41*x41) / 2.0\n    x43 = (number + x42*x42) / 2.0\n    x44 = (number + x43*x43) / 2.0\n    x45 = (number + x44*x44) / 2.0\n    x46 = (number + x45*x45) / 2.0\n    x47 = (number + x46*x46) / 2.0\n    x4"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        x = guess * guess\n        if x == number:\n            return guess\n        elif x < number:\n            guess += 1\n        else:\n            guess -= 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) > 0.0001:\n        guess = (number / guess + guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initial guess for the square root\n    guess = number / 2\n\n    # Number of iterations for the babylonian method\n    num_iterations = 0\n\n    # Loop until the difference between the square of the guess and the original number is less than a tolerance value\n    while abs(guess * guess - number) > 1e-6:\n        # Calculate the new guess\n        new_guess = (guess + number / guess) / 2\n\n        # Increment the number of iterations\n        num_iterations += 1\n\n        # Update the guess\n        guess = new_guess\n\n    # Return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    x = 0.5\n    y = 1.0 / 3.0\n    i = 0\n    \n    while abs(x**2 - number) > 0.00001:\n        i += 1\n        x = x - (number / x) * (x - y) / (2.0 * x - 2.0 * y)\n        y = x\n    \n    return i"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # initialize variables\n    old_guess = number / 2\n    guess = number / 2\n    count = 0\n    # loop until we get a good approximation\n    while abs(old_guess - guess) > 0.001:\n        count += 1\n        old_guess = guess\n        guess = (old_guess + number / guess) / 2\n    return guess, count"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    guess = 1\n    prev_guess = 0\n    x = 0.0\n\n    while guess**2 > number:\n        prev_guess = guess\n        guess = (guess + number / guess) / 2\n        x = prev_guess + (guess - prev_guess) / (guess - prev_guess)\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a given number using the babylonian method.\n\n    The babylonian method is an iterative method for computing square roots.\n    It starts by guessing a starting number for the square root,\n    then repeatedly calculates the square of the guess and divides by the original number.\n    If the square is within a certain tolerance of the true square root,\n    then the guess is the correct answer.\n    \"\"\"\n\n    # Set the initial guess to the square root of the input number\n    guess = number**0.5\n\n    # Set the tolerance for the relative difference between guess and sqrt(number)\n    tolerance = 1e-6\n\n    # While the relative difference between guess and sqrt(number) is greater than the tolerance\n    while abs(guess**2 - number) > tolerance:\n        # Calculate the new guess\n        guess = (guess + number/guess)**0.5\n\n    # Return the final guess as the square root of the input number\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = 1\n    x2 = number\n    while abs(x2 - x1) > 0.00001:\n        x0 = x1\n        x1 = x2\n        x2 = x1 - ((x1**2 - number) / (2 * x1))\n    return x1"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # create a 2D array to store lengths of subsequences\n    dp = [[0] * len(str) for _ in range(len(str) + 1)]\n\n    # initialize the first column of the array\n    for i in range(1, len(str) + 1):\n        dp[i][i] = 1\n\n    # find the length of longest palindromic subsequence in each substring\n    for i in range(1, len(str) + 1):\n        for j in range(i, len(str) + 1):\n            if str[i - 1] == str[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # find the length of longest palindromic subsequence in the entire string\n    max_length = dp[len(str)][len(str)]\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0 or n == 1:\n        return n\n\n    # Create a 2D table to store the length of the longest palindromic subsequence ending at each position\n    table = [[0] * n for i in range(n)]\n\n    # Initialize the first row and first column of the table with 1, since the longest palindromic subsequence of length 1 is always the single character in the string itself\n    table[0][0] = 1\n\n    # Iterate through the string and fill in the table\n    for i in range(1, n):\n        for j in range(1, n):\n            # If the characters are the same, we can extend the longest palindromic subsequence ending at position (i-1, j-1) by one character to make a palindrome ending at position (i, j)\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            # If the characters are different, we cannot extend the longest palindromic subsequence ending at position (i-1, j-1) to make a palindrome ending at position (i, j)\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n\n    # Create a 2D table to store lengths of longest palindromic subsequences for all prefixes of the string\n    table = [[0] * (len(str)) for _ in range(len(str))]\n\n    # Base case: LPS for the empty string is 0\n    table[0][0] = 0\n\n    # Fill the table using dynamic programming approach\n    for i in range(1, len(str)):\n        for j in range(1, len(str)-i+1):\n            if str[j] == str[j+i]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[-1][-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    '''\n    This function will find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize a 2D array to store all the lengths of subsequences ending at each index\n    L = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the first row and column of the 2D array\n    L[0][0] = 1\n\n    # Fill the rest of the 2D array using dynamic programming\n    for i in range(1, n):\n        for j in range(1, n):\n            if str[i] == str[j]:\n                # If characters are equal, then the length of the subsequence ending at (i,j) is the sum of the length of the subsequence ending at (i-1,j-1) and (i,j-1)\n                L[i][j] = L[i-1][j-1] + 2\n            else:\n                # If characters are not equal, then the length of the subsequence ending at (i,j) is the maximum of the length of the subsequence ending at (i-1,j) and the length of the subsequence ending at (i,j-1)\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at (n-1,n-1)\n    return L[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a 2D table to store lengths of longest palindromic subsequence ending at i,j\n    dp = [[0]*n for _ in range(n)]\n\n    # Initialize all dp[i][j] to 1, where i,j are indices of characters in str\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Find the length of longest palindromic subsequence ending at i,j\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    lps = [1] * n\n    i, j = 0, 0\n    max_len = 1\n\n    while i < n - 1 and j < n - 1:\n        if str[i] == str[j]:\n            lps[j + 1] = lps[i] + 1\n            i += 1\n            j += 1\n            if lps[j + 1] > max_len:\n                max_len = lps[j + 1]\n        elif lps[j] > lps[i]:\n            i += 1\n        else:\n            j += 1\n\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    # Create a 2D table to store the length of longest palindromic subsequence for each substring of the string\n    table = [[0] * len(str) for _ in range(len(str))]\n    \n    # Initialize the table with 1's as the base case\n    for i in range(len(str)):\n        table[i][i] = 1\n        \n    # Fill the table in bottom-up manner\n    for i in range(1, len(str)):\n        for j in range(i):\n            # If the characters at the current indices are same, extend the palindromic subsequence\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            \n            # If the characters are different, update the table with the maximum of the lengths of palindromic subsequences extending from either the left or the right of the current substring\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    \n    # Return the length of the longest palindromic subsequence\n    return table[len(str)-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def longest_palindrome_substring(s):\n    n = len(s)\n    max_length = 1\n    start = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                length = j - i + 1\n                if length > max_length:\n                    max_length = length\n                    start = i\n\n    return s[start:start + max_length]\n\n\ndef lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return len(longest_palindrome_substring(str))"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # initialize variables\n    n = len(str)\n    dp = [[0] * n for i in range(n)]\n    \n    # fill the dp table\n    for i in range(n):\n        dp[i][i] = 1\n    \n    # fill the table using dynamic programming\n    for length in range(2, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    \n    # return the length of the longest palindromic subsequence\n    return dp[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    This function finds the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # create a table to store the length of the longest palindromic subsequence ending at each index\n    table = [[0]*n for _ in range(n)]\n    # fill the table with zeros\n    for i in range(1, n):\n        for j in range(i):\n            if str[j] == str[i]:\n                table[i][j] = table[j][i-1] + 2\n            else:\n                table[i][j] = max(table[i][j-1], table[j][i])\n    return table[n-1][0]"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * ((1/n)**(n-1) + 1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) * (n*sum([1/i for i in range(1,n+1)]) - sum([1/i for i in range(1,n)]))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(1, n+1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n and returns the harmonic sum of n-1.\n    The harmonic sum of n is the sum of 1/i for i from 1 to n.\n    \"\"\"\n    # Calculate the harmonic sum of n-1 by summing 1/i for i from 1 to n-1\n    harmonic_sum = 0\n    for i in range(1, n):\n        harmonic_sum += 1 / i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/2 + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common = []\n    for num in array_nums1:\n        if num in array_nums2:\n            common.append(num)\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store unique elements from both arrays\n    unique_set = set(array_nums1 + array_nums2)\n    # Create an empty list to store the intersection of the arrays\n    intersection = []\n    # Iterate through the unique set and add elements to the intersection list if they exist in both arrays\n    for element in unique_set:\n        if element in array_nums1 and element in array_nums2:\n            intersection.append(element)\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Initialize an empty list to store the intersection of the two arrays\n    intersection = []\n    # Initialize two index variables to keep track of the current position in each array\n    i, j = 0, 0\n    # Loop through each element in the first array\n    while i < len(array_nums1):\n        # Check if the current element in the first array is in the second array\n        if array_nums1[i] in array_nums2:\n            # If it is, append it to the intersection list and move both index variables to the next element in the arrays\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        # If the current element in the first array is not in the second array, increment the index variable for the first array\n        else:\n            i += 1\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from the first array and convert it to a list\n    set1 = list(set(array_nums1))\n    # Create an empty list to store the intersection\n    intersection_list = []\n    # Loop through the second array and check if each element is in the set\n    for num in array_nums2:\n        if num in set1:\n            intersection_list.append(num)\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set from array_nums1 to remove duplicates\n    set_nums1 = set(array_nums1)\n    # Create an empty set to store the intersection\n    intersection = set()\n    # Iterate through array_nums2 and check if each element is present in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            intersection.add(num)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq = {}\n    for num in array_nums1:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Create an empty set to store the intersection of the two arrays\n    intersection = set()\n    \n    # Iterate through array_nums2 and add elements that are in freq and have frequency equal to 1 to intersection\n    for num in array_nums2:\n        if num in freq and freq[num] == 1:\n            intersection.add(num)\n    \n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n    \"\"\"\n    # Create a set to store the elements of the second array\n    set_nums2 = set(array_nums2)\n\n    # Iterate over the first array and add all the elements to the set\n    for num in array_nums1:\n        set_nums2.add(num)\n\n    # Convert the set back to a list and return it\n    return list(set_nums2)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create a new list and append the first element\n    new_list = [element]\n    # append the remaining elements of the original list\n    new_list.extend(list[1:])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new empty list to store the new list\n    new_list = []\n    \n    # loop through each element in the original list\n    for item in list:\n        # add the item to the new list, followed by the element\n        new_list.append(item)\n        new_list.append(element)\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(lst, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append(element)\n        new_lst.append(lst[i])\n    return new_lst"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # create a new list and insert the element before each element in the list\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    # return the new list with the element inserted\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list,\n    and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n        result.insert(i, list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create an empty list to hold the inserted elements\n    result = []\n    # Loop through each element in the input list\n    for i in range(len(list)):\n        # Add the input element to the result list\n        result.append(list[i])\n        # If this is the first element in the input list, add the input element to the result list again\n        if i == 0:\n            result.append(element)\n    # Return the final result list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the modified elements\n    modified_lst = []\n    \n    # Iterate through each element in the list\n    for i in range(len(lst)):\n        # Append the element before the current element\n        modified_lst.append(element)\n        # Append the current element\n        modified_lst.append(lst[i])\n    \n    # Return the modified list\n    return modified_lst"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(f\"Polar form of {number} is {real} + {imag}i\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(\"({}, {})\".format(r, theta))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input, and returns a list of their polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        # convert complex number to polar coordinates\n        angle = cmath.phase(num)\n        magnitude = abs(num)\n        # append polar coordinates to list\n        polar_coordinates.append((angle, magnitude))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    \"\"\"\n\n    polar_coords = []\n    for num in numbers:\n        r = num.real\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # extract real and imaginary parts of the complex number\n        real = num.real\n        imag = num.imag\n        \n        # calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # calculate the angle of the complex number\n        angle = cmath.phase(num)\n        \n        # print the polar coordinates of the complex number\n        print(f\"({real}, {imag}) | {magnitude} | {angle}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = abs(num)\n            theta = cmath.phase(num)\n            print(f'{num} in polar form: (r={r}, theta={theta})')\n        else:\n            print(f'{num} is not a complex number')"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers and converts them to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        angle = cmath.phase(number)\n        magnitude = abs(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath  \n  \ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        real, imag = cmath.polar(number)\n        print(\"Real:\", real)\n        print(\"Imaginary:\", imag)\n        print()"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = [complex(num1, num2) for num1, num2 in numbers]\n    polar_coordinates = [(cmath.sqrt(num.real**2 + num.imag**2), cmath.phase(num)) for num in complex_numbers]\n    return polar_coordinates"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    This function returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for elem in lst:\n        if type(elem) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(lst):\n    '''\n    This function takes a list as input and returns the number of integer elements in the list.\n    '''\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb_list.append(tuple(l[i:j]))\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            comb = tuple(sorted(l[i:j]))\n            combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Create a generator function to generate all combinations of length n with replacement\n    gen_combinations = combinations_with_replacement(l, n)\n\n    # Convert the generator function to a list of tuples\n    combination_list = list(gen_combinations)\n\n    return combination_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Helper function to convert list to tuple\n    def list_to_tuple(lst):\n        return tuple(lst)\n\n    # Generate all possible combinations\n    all_combinations = combinations_with_replacement(l, n)\n\n    # Convert each combination to a tuple\n    result = [list_to_tuple(c) for c in all_combinations]\n\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = ['red', 'green', 'blue']\n    result = []\n    for i in range(len(colors)):\n        for j in range(i+1, len(colors)):\n            for k in range(j+1, len(colors)):\n                for l in range(k+1, len(colors)):\n                    combination = (colors[i], colors[j], colors[k], colors[l])\n                    if len(combination) == n:\n                        result.append(combination)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all possible combinations of length n with replacement\n    comb = combinations_with_replacement(l, n)\n    # Convert the generator to a list and return\n    return list(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of size n from the list\n    combinations = combinations_with_replacement(l, n)\n    \n    # Convert each combination into a tuple and append it to a list\n    result = []\n    for combination in combinations:\n        result.append(tuple(combination))\n    \n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    primes = [2] # 2 is the only prime number\n    count = 0\n    for i in range(3, n+1, 2):\n        is_prime = True\n        for j in primes:\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    i = 2\n    while i <= n:\n        if all(i%j!=0 for j in range(2,int(i**0.5)+1)):\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    prime_count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            prime_count += 1\n    return prime_count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Returns True if the given number is prime, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5) + 1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    A function to check whether a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\nn = 100\nprint(\"The number of prime numbers less than\", n, \"is\", count_Primes_nums(n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    \"\"\"\n    Function to check if a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than a given non-negative number n\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length.\")\n        return\n    \n    # Initialize the maximum value for each tuple\n    max_val1 = max_val2 = float('-inf')\n    \n    # Loop through each element of the tuple and compare it with the current maximum values\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val1:\n            max_val1 = test_tup1[i]\n        elif test_tup2[i] > max_val2:\n            max_val2 = test_tup2[i]\n    \n    # Return the maximum values as a tuple\n    return max_val1, max_val2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_tup[i]:\n            max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Initialize the maximum values to the first element of each tuple\n    max_tup1 = test_tup1[0]\n    max_tup2 = test_tup2[0]\n    \n    # Iterate through the other elements of each tuple\n    for i in range(1, len(test_tup1)):\n        if test_tup1[i] > max_tup1:\n            max_tup1 = test_tup1[i]\n        if test_tup2[i] > max_tup2:\n            max_tup2 = test_tup2[i]\n    \n    # Return the maximum values\n    return max_tup1, max_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    max_num1 = max(test_tup1)\n    max_num2 = max(test_tup2)\n\n    if max_num1 > max_num2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the maximum value from each tuple\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n\n    # Compare the maximum values and return the tuple with the maximum value\n    if max_val1 >= max_val2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    elif test_tup1 < test_tup2:\n        return test_tup2\n    else:\n        return \"Tupples are equal\""
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    else:\n        if test_tup1[1] > test_tup2[1]:\n            return test_tup1\n        elif test_tup1[1] < test_tup2[1]:\n            return test_tup2\n        else:\n            if test_tup1[2] > test_tup2[2]:\n                return test_tup1\n            else:\n                return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the maximum element\n    from both tuples.\n    \"\"\"\n    max_val = max(test_tup1, test_tup2)\n    return max_val"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        num = 1\n        while num <= n:\n            if num == 2:\n                return num\n            for i in range(2, num):\n                if num % i == 0:\n                    break\n            else:\n                return num\n            num += 1\n        return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    is_prime = [True] * (n + 1) \n    is_prime[0] = is_prime[1] = False \n\n    for i in range(2, int(n**0.5) + 1): \n        if is_prime[i]: \n            for j in range(i*i, n + 1, i): \n                is_prime[j] = False \n\n    for i in range(2, n + 1): \n        if is_prime[i]: \n            return i "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    count = 0\n    prime = 2\n    \n    # Check if the first prime number is even\n    if prime % 2 == 0:\n        prime += 1\n    \n    # Check if the nth prime number is odd\n    while count < n:\n        # Check if the prime number is odd\n        if prime % 2 == 1:\n            count += 1\n        \n        # Check if the next prime number is odd\n        prime += 1\n    \n    # If the nth prime number is not found, return None\n    if count == n:\n        return prime - 2\n    else:\n        return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize a variable to keep track of the number of digits in n\n    num_digits = 0\n    while n > 0:\n        n //= 10\n        num_digits += 1\n\n    # Initialize the current number as 2\n    current = 2\n\n    # Iterate through the first n digits of n, checking for newman-shanks-williams primes\n    for i in range(num_digits):\n        # Check if the current number is prime\n        is_prime = True\n        for j in range(2, int(current**0.5)+1):\n            if current % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return current\n\n        # Update the current number by doubling it\n        current *= 2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Function to check if a number is a newman-shanks-williams prime number\n    def is_prime(num): \n        '''\n        Check if a number is a newman-shanks-williams prime number.\n        '''\n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5)+1): \n            if num % i == 0: \n                return False\n        return True\n    \n    # Initialize variables\n    count = 0\n    num = 2\n    \n    # Loop through numbers and check if they are newman-shanks-williams primes\n    while count < n: \n        if is_prime(num): \n            count += 1\n        num += 1\n    \n    # Return the nth newman-shanks-williams prime number\n    return num"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through all the numbers up to n\n    for i in range(2, n+1):\n        # Initialize a variable to store the number of divisors\n        div = 0\n        # Loop through all the numbers up to the square root of i\n        for j in range(2, int(i**0.5)+1):\n            # Check if i is divisible by j\n            if i % j == 0:\n                # Increment the divisor count\n                div += 1\n                # Check if the square of the divisor is less than i\n                if i**2 % j**2 == 0:\n                    # Increment the divisor count\n                    div += 1\n        # If i has no more than two divisors, it is a newman-shanks-williams prime number\n        if div <= 2:\n            # Increment the count variable\n            count += 1\n    # If the nth newman-shanks-williams prime number is not found, return None\n    if count < n:\n        return None\n    # Otherwise, return the nth newman-shanks-williams prime number\n    else:\n        return count"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize a boolean array to mark the numbers as prime\n    is_prime = [True] * (n+1)\n    is_prime[0], is_prime[1] = False, False\n    # use Sieve of Eratosthenes algorithm to mark non-prime numbers\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i**2, n+1, i):\n                is_prime[j] = False\n    # find the nth prime number\n    nth_prime = 2\n    for i in range(n):\n        if is_prime[nth_prime]:\n            nth_prime += 1\n    return nth_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize count and limit \n    count = 0 \n    limit = 500 \n\n    # loop until nth newman\u2013shanks\u2013williams prime is found \n    while count < n: \n        # initialize is_prime flag \n        is_prime = True \n\n        # loop until a composite number is found \n        for i in range(2, limit): \n            if limit % i == 0: \n                # composite number found \n                is_prime = False \n                break \n\n        # increment count if prime is found \n        if is_prime: \n            count += 1 \n\n    # return nth newman\u2013shanks\u2013williams prime \n    return limit + 1 "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Define the function to check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    # Start with the first newman-shanks-williams prime number\n    x = 12\n    \n    # Loop through each subsequent newman-shanks-williams prime number\n    while x <= n:\n        # Check if the current number is prime\n        if is_prime(x):\n            # If it is prime, print it and increment x\n            print(x)\n            x += 1\n        else:\n            # If it's not prime, increment x\n            x += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman-shanks-williams prime number.\n    \"\"\"\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize variables\n    i = 1\n    prime_count = 0\n    current_prime = 2\n\n    # Loop through numbers 2 to sqrt(n)\n    while current_prime <= n:\n        if current_prime == i:\n            prime_count += 1\n        else:\n            i += 1\n        current_prime += 1\n\n    # Check if nth prime number is Newman-Shanks-Williams prime\n    if prime_count == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        for i in range(len(test_tup1)):\n            if test_tup2[i] == 0:\n                raise ValueError(\"Denominator cannot be zero\")\n            test_tup1[i] = test_tup1[i] / test_tup2[i]\n        return test_tup1\n    except (IndexError, ValueError) as e:\n        print(e)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element of the tuples and perform element-wise division\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            if type(test_tup1[i]) == int:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n            elif type(test_tup1[i]) == float:\n                test_tup1[i] = test_tup1[i] / test_tup2[i]\n            else:\n                test_tup1[i] = test_tup1[i].item() / test_tup2[i].item()\n        else:\n            raise TypeError(\"Both tuples must have the same data type for division operation.\")\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i]/test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result = test_tup1[i] / test_tup2[i]\n            result_tup += (result,)\n        except ZeroDivisionError:\n            result_tup += (float('nan'),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have the same length.\")\n    \n    # Initialize an empty tuple to store the results\n    result_tup = ()\n    \n    # Perform element-wise division and append the result to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the number of elements in the tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths\"\n\n    # perform element-wise division\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] / test_tup2[i],)\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the lengths of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The length of the input tuples must be equal.\")\n        return\n    \n    # Perform element-wise division operation on the input tuples\n    result_tup = tuple(x / y for x, y in zip(test_tup1, test_tup2))\n    \n    # Print the resultant tuple\n    print(result_tup)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is a positive integer\n    if type(L)!= int or L < 1:\n        raise ValueError(\"L must be a positive integer\")\n    \n    # Check if L is less than or equal to the length of the list\n    if L > len(list1):\n        raise ValueError(\"L must be less than or equal to the length of the list\")\n    \n    # Find the index of the middle element of the list\n    middle = len(list1) // 2\n    \n    # Split the list into two parts and return them in a tuple\n    part1 = list1[:middle]\n    part2 = list1[middle:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts\n    where the length of the first part of the list is L, and returns the resulting lists\n    in a tuple.\n    \"\"\"\n    if L > len(lst):\n        return \"Error: L cannot be greater than the length of the list.\"\n    else:\n        mid = len(lst) // 2\n        first_part = lst[:mid]\n        second_part = lst[mid:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    '''\n    Split a list into two parts, where the length of the first part is L.\n    '''\n    # Check if the length of the list is at least L\n    if len(lst) < L:\n        raise ValueError('List must have at least {} elements.'.format(L))\n\n    # Split the list into two parts\n    part1 = lst[:L]\n    part2 = lst[L:]\n\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the input list is valid\n    if not isinstance(list1, list):\n        raise ValueError(\"Input must be a list\")\n\n    # Check if L is valid\n    if not isinstance(L, int):\n        raise ValueError(\"L must be an integer\")\n\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer\")\n\n    # Calculate the length of the first part of the list\n    part1_length = len(list1) // 2\n\n    # Create the two parts of the list\n    part1 = list1[:part1_length]\n    part2 = list1[part1_length:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if the length of the list is less than L\n    if len(lst) < L:\n        return None\n    \n    # Split the list into two parts\n    first_part = lst[:L]\n    second_part = lst[L:]\n    \n    # Return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create an empty list to hold the first part of the list\n    first_part = []\n    # loop through the list and add each element to the first part list if its length is less than L\n    for element in list1:\n        if len(first_part) < L:\n            first_part.append(element)\n        # if the length of the first part is greater than or equal to L, add the rest of the elements to a new list and return the tuple\n        else:\n            second_part = list1[len(first_part):]\n            return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    n = len(list1)\n    if n <= L:\n        return (list1, [])\n    else:\n        return (list1[:L], list1[L:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Convert the list to a tuple if it's not already\n    if not isinstance(list1, tuple):\n        list1 = tuple(list1)\n    # Split the tuple into two parts using a slice\n    first_part = list1[:L]\n    second_part = list1[L:]\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = (12 - h_age) / 2\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(height_inches):\n    \"\"\"\n    This function calculates a dog's age in dog's years based on their height in inches.\n    \"\"\"\n    height_meters = height_inches / 39.37\n    age_dogs = 7 * (height_meters / 12)\n    return age_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 + h_age\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n\n    # Calculate dog's age in dog years\n    dog_years = 7 * h_age\n\n    # Return the calculated dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = 7 * h_age\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return 7 * h_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # split the list into sublists\n    sublists = [S[i:i+step] for i in range(0, len(S), step)]\n    return sublists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer\")\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # iterate over the input list using a for loop\n    for i in range(0, len(S), step):\n        # create a sublist starting at index i and ending at index i+step\n        sublist = S[i:i+step]\n        # add the sublist to the result list\n        result.append(sublist)\n    # return the result list\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    N = len(S)\n    result = []\n    for i in range(0, N, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if step == 0:\n        return []\n    elif step > 0:\n        S = S[:-1]\n        return [S[i:i+step] for i in range(0, len(S), step)]\n    else:\n        return [list_split(S, -step)[::-1] for i in range(0, len(S), -step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    # split the list into chunks of size step\n    chunks = [S[i:i+step] for i in range(0, len(S), step)]\n    return chunks"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S) // step\n    result = []\n    for i in range(0, n*step, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * l * l\n    return 6 * s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    pass"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l ** 2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2 * 6"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0  \n    for i in range(1, n+1, 2):  \n        sum_of_squares += i*i  \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i**2\n        \n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        num = count + 1\n        if num % 2!= 0:\n            sum += num ** 2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i*i\n    return sum\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The sum of squares of the first\", n, \"odd natural numbers is:\", square_Sum(n))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initializing the sum variable to 0\n    sum = 0\n    \n    # iterating from 1 to n\n    for i in range(1, n+1):\n        # calculating the square of the current odd number\n        square = i ** 2\n        \n        # adding the square to the sum variable\n        sum += square\n        \n    # returning the final sum\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the result to 1 \n    result = 1 \n    # Initialize the loop counter to 1 \n    i = 1 \n    # Loop until the loop counter is equal to n \n    while i <= n: \n        # Multiply the result by 2 and add 1 \n        result *= 2 \n        i += 1 \n    # Return the result \n    return result "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize a variable to keep track of the current number\n    current_num = 1\n\n    # Loop until the current number is equal to n\n    while current_num <= n:\n        # Print the current number\n        print(\"*\" * current_num)\n\n        # Increment the current number by 1\n        current_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    # initialize the count variable to 1\n    count = 1\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # add the count to the current number\n        count += i\n\n        # print the count\n        print(count)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    elif n % 2 == 0:\n        return '*'+ find_star_num(n//2)\n    else:\n        return'' + find_star_num(n//2) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # The first star is 1\n    if n == 1:\n        return 1\n    # The next star is n + 1\n    elif n > 1:\n        return n + 1\n    # The function can't handle negative values for n\n    else:\n        return None"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + find_star_num(n - 1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        return \"n should be a positive integer\"\n    elif n == 1:\n        return 1\n    else:\n        return n*find_star_num(n-1) + 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    result = 0\n    num = 1\n\n    # Calculate then'th star number\n    while num <= n:\n        result += num\n        num += 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize variable to hold the result\n    result = ''\n    # loop through each digit of the number\n    for digit in str(n):\n        # add the appropriate number of stars to the result\n        for i in range(int(digit)):\n            result += '*'\n        # add a newline character to separate each number\n        result += '\\n'\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n < 1:\n        raise ValueError('n must be greater than or equal to 1')\n    elif n == 1:\n        return '1'\n    else:\n        return '1' + find_star_num(n-1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if type(k) == int:\n        return k\n    elif type(k) == str:\n        return ord(k)\n    else:\n        raise TypeError(\"Input should be an integer or a string\")"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # converting k to string to get the character at index 0\n    k = str(k)\n    \n    # ascii value of character at index 0\n    ascii_val = ord(k[0])\n    \n    # returning ascii value\n    return ascii_val"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104, 'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112, 'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120, 'y': 121, 'z': 122}\n    if k.lower() in ascii_dict:\n        return ascii_dict[k.lower()]\n    else:\n        return None"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = -1\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if even_index == -1:\n                even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if i % 2 == 0:\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    even_index = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index += 1\n    \n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index.append(i)\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n+1, 2):\n        result += i**5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_power_n = 0 \n    for i in range(2, n+1, 2): \n        sum_power_n += i ** 5 \n    return sum_power_n "
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(2, n+1, 2):\n        result += i ** 5\n    return result"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    even_powers = [0] * n\n    for i in range(n):\n        even_powers[i] = i ** 5\n    return sum(even_powers)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # initialize sum variable to zero\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the power of the even natural number\n        power = i ** 5\n        # add the power to the sum\n        sum += power\n    # return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_powers = 0\n    for i in range(2, n+1, 2):\n        sum_even_powers += i ** 5\n    return sum_even_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i**5 % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [t[1] for t in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if i == len(test_list)-1:\n            result.append(test_list[i][-1])\n        else:\n            result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tuple_ in test_list:\n        rear_list.append(tuple_[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] - test_tup2[i])\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # initialize an empty list to store the results\n    result = []\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # check if the index exists in the second tuple\n        if i < len(test_tup2):\n            # subtract the element at the same index from the first tuple\n            result.append(test_tup1[i] - test_tup2[i])\n        else:\n            # if the index does not exist in the second tuple, append None to the result list\n            result.append(None)\n    # return the result list as a tuple\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] - test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n\n    # Create a new list to hold the resulting tuples\n    result_list = []\n\n    # Iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # Subtract the corresponding element from the second tuple\n        result_list.append(test_tup1[i] - test_tup2[i])\n\n    # Return the new list as the final result\n    return result_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two tuples must have the same length.')\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return 'The two input tuples must have the same length.'\n    # Iterate through the tuples and subtract the corresponding elements\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two tuples must have the same length.\"\n\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup += (test_tup1[i] - test_tup2[i],)\n\n    return new_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize sum variable to zero\n    sum_even = 0\n\n    # loop through even indices from 0 to n-1\n    for i in range(0, n, 2):\n        # find the even index binomial coefficient\n        coeff = math.comb(n, i)\n        # add the coefficient to the sum\n        sum_even += coeff\n\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even index binomial coefficients to zero\n    sum_even_index_binomial_coeffs = 0\n\n    # Initialize two variables for the number of terms and the first term of the series\n    terms = 0\n    term = 1\n\n    # Iterate through the range of n\n    while terms < n:\n        # Calculate the nth term of the series and increment the number of terms\n        term = term * (n - terms) / terms\n        terms += 1\n\n        # Check if the term is even\n        if terms % 2 == 0:\n            # Add the term to the sum of even index binomial coefficients\n            sum_even_index_binomial_coeffs += term\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_index_sum = 0\n    for i in range(1, n+1):\n        binomial_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            even_index_sum += binomial_coeff\n    return even_index_sum\n"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    if n < 0:\n        print(\"Error: n should be a positive integer.\")\n        return\n\n    # Initialize the sum to zero\n    even_sum = 0\n\n    # Iterate through each index from 0 to n-1\n    for i in range(n):\n        # Calculate the even index binomial coefficient\n        even_coeff = math.comb(n, i)\n\n        # If the coefficient is even, add it to the sum\n        if even_coeff % 2 == 0:\n            even_sum += even_coeff\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if j % 2 == 0:\n                sum += math.comb(i-1, j-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(2, n+1):\n        even_sum += math.comb(n, i)\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the sum of even index binomial coefficients\n    sum_even = 0\n    for i in range(1, n+1):\n        sum_even += math.comb(n, i) * 2**i\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_binomial_coeffs = 0\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            if i % 2 == 0:\n                sum_even_binomial_coeffs += math.comb(n, j-1)\n            if j % 2 == 0:\n                sum_even_binomial_coeffs += math.comb(n, i-1)\n    return sum_even_binomial_coeffs\n\nn = 10\nprint(even_binomial_Coeff_Sum(n))"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n\n    # initialize variables\n    coeff_sum = 0\n    # loop through all possible values of n\n    for i in range(2, n+1):\n        # calculate the binomial coefficient using math.comb function\n        coeff = math.comb(n, i)\n        # if the index is even, add the coefficient to the sum\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume using the formula: V = 1/3 x r^2 x h\n    volume = (1/3) * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * (3.14 * r**2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume\n    volume = 3.14159 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate the volume of the cylinder\n    v = (3.14159265359 * r ** 2 * h) / 3\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    volume = (3.14 * r ** 2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r**2) * h\n    return V\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = 3.14159*r**2*h\n    return vol"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i-1]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0 and test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i]!= test_tup[i-1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1 and test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    num_elements = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        else:\n            if test_tup[i-1] == test_tup[i]:\n                num_elements += 1\n            else:\n                break\n    return num_elements"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 1\n    for i in range(1, n+1):\n        decagonal += i*i\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define a function to find the nth triangular number\n    def triangular(n):\n        if n < 2:\n            return n\n        else:\n            return triangular(n-1) + triangular(n-2)\n\n    # Calculate the nth triangular number\n    nth_triangular = triangular(n)\n\n    # Return the decagonal number\n    return nth_triangular + triangular(n-1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Check if input is a positive integer\n    if type(n)!= int or n < 1:\n        return \"Error: Please enter a positive integer.\"\n    # Calculate the sum of the first n natural numbers\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    # Calculate the sum of the first n squares of natural numbers\n    sum_squares = 0\n    for i in range(1, n+1):\n        sum_squares += i**2\n    # Return the sum of the two sums\n    return sum_natural + sum_squares"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize the sum of decagonal numbers as 0\n    decagonal_sum = 0\n\n    # loop through the first n numbers (n is the input parameter)\n    for i in range(1, n+1):\n        # calculate the value of the decagonal number\n        decagonal = (i**2 + 2*i - 1) // 2\n        # add the decagonal number to the sum\n        decagonal_sum += decagonal\n\n    # check if the sum of decagonal numbers is equal to the input parameter n\n    if decagonal_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (2 * n * n - 1) // 2 + 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Start with 1\n    i = 1\n    # Initialize sum to 0\n    sum = 0\n    # Iterate till n\n    while i <= n:\n        # If i is divisible by 3, add i to the sum\n        if i % 3 == 0:\n            sum += i\n        # Increase i by 2\n        i += 2\n    # Return the sum\n    return sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # calculate the n-th decagonal number\n    decagonal = ((2 * n) * n) - (n * (n - 1))\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0: \n        return \"Please enter a positive integer.\"\n\n    # Find the number of rows and columns in the decagonal matrix\n    rows = n * (n + 1) // 2\n    cols = n * (2 * n + 1) // 2\n\n    # Create a decagonal matrix with the specified number of rows and columns\n    decagonal_matrix = []\n    for i in range(rows):\n        decagonal_row = []\n        for j in range(cols):\n            decagonal_row.append(i + j)\n        decagonal_matrix.append(decagonal_row)\n\n    # Find the nth decagonal number in the matrix\n    decagonal_num = decagonal_matrix[n - 1][0]\n\n    # Return the nth decagonal number\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_nums = [0, 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, 176, 210, 247, 287, 330, 376, 425, 477, 532, 590, 651, 715, 782, 852, 925, 1001, 1080, 1162, 1247, 1335, 1426, 1520, 1617, 1717, 1820, 1926, 2035, 2147, 2262, 2380, 2501, 2625, 2752, 2882, 3015, 3151, 3290, 3432, 3577, 3725, 3876, 4030, 4187, 4347, 4510, 4676, 4845, 5017, 5192, 5370, 5551, 5735, 5922, 6112, 6305, 6501, 6700, 6902, 7107, 7315, 7526, 7740, 7957, 8177, 8400, 8626, 8855, 9087, 9322, 9560, 9801, 10045, 10292, 10542, 10795, 11051, 11310, 11572, 11837, 12105, 12376, 12650, 12927, 13207, 13490, 13776, 14065, 14357, 14652, 14950, 15251, 15555, 15862, 16172, 16485, 16801, 17120, 17442, 17767, 18095, 18426, 18760, 19097, 19437, 19780, 20126, 20475, 20827, 21182, 21540, 21899, 22262, 22628, 22996, 23367, 23741, 24117, 24496, 24877, 25261, 25647, 26036, 26427, 26821, 27217, 27616, 28017, 28421, 28828, 29237, 29649, 30063, 30480, 30900, 31322, 31747, 32174, 32604, 33036, 33471, 33908, 34348, 34790, 35235,"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    a = 1\n    b = 2\n    c = 3\n\n    for i in range(n):\n        a += 2\n        b += 4\n        c += 6\n\n    return a + b + c"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    for i, elem in enumerate(dlist):\n        if elem == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Initialize index to -1\n    index = -1\n    \n    # Iterate over the array\n    for i in range(len(dlist)):\n        # If the current element matches the target element, return the index\n        if dlist[i] == item:\n            index = i\n            break\n            \n    # Return a tuple containing the boolean and index\n    return (True, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    index = -1\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a dictionary to store the elements of the list\n    seen = {}\n    # iterate over the elements of the list\n    for elem in test_list:\n        # if the element is already in the dictionary, there is a duplicate\n        if elem in seen:\n            return False\n        # otherwise, add the element to the dictionary\n        else:\n            seen[elem] = True\n    # if all elements are unique, return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        test_list (list): The list to be checked.\n\n    Returns:\n        bool: True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and checks if all the elements in the list are unique or not.\n    If all the elements in the list are unique, the function will return True, else it will return False.\n    '''\n\n    # Sorting the list in ascending order\n    test_list.sort()\n\n    # Traversing the sorted list\n    for i in range(len(test_list)-1):\n        # Checking if the current element is equal to the next element\n        if test_list[i] == test_list[i+1]:\n            # If the current element is equal to the next element, the function will return False\n            return False\n\n    # If the above loop completes without returning False, the function will return True\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # convert the list to a set to remove duplicates\n    unique_set = set(test_list)\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    result = [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have the same length')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    nums1 (list): The first list.\n    nums2 (list): The second list.\n\n    Returns:\n    list: The result of subtracting nums1 from nums2.\n    \"\"\"\n    return [a - b for a, b in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Initialize a list to store the frequency of each digit in the integer\n    freq_list = []\n    # Loop through each digit in the integer and count the frequency of each digit\n    for i in str(n):\n        if i in freq_list:\n            freq_list[freq_list.index(i)] += 1\n        else:\n            freq_list.append(1)\n    # Check if the frequency of each digit in the integer is less than or equal to the digit itself\n    for i in freq_list:\n        if i > n // len(str(n)):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize an empty dictionary to store digit frequencies\n    freq_dict = {}\n    # loop through each digit in the integer and update the frequency dictionary\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    # loop through the dictionary to check if each digit is less than or equal to itself\n    for digit in freq_dict:\n        if freq_dict[digit] > digit:\n            return False\n    # if all digits are valid, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through each digit in the integer and update the frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through each digit in the integer and compare the frequency with the digit itself\n    for digit in str(n):\n        if freq[digit] > digit:\n            return False\n\n    # If all digits pass the comparison, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    # convert the integer to a string to work with individual digits\n    n_str = str(n)\n    \n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n    \n    # loop through each character in the string\n    for char in n_str:\n        # if the character is not a digit, skip it\n        if not char.isdigit():\n            continue\n        \n        # convert the character to an integer and increment its frequency in the dictionary\n        digit = int(char)\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the range of 0 to 9\n    for digit in range(10):\n        # if the digit is not in the dictionary or its frequency is greater than the digit itself, return False\n        if digit not in freq or freq[digit] > digit:\n            return False\n    \n    # if we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # convert the integer to a string\n    num = str(n)\n    # create a dictionary to store the frequency of digits in the integer\n    freq = {}\n    # iterate over each digit in the integer and update the frequency in the dictionary\n    for digit in num:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    # if no digit has a frequency greater than itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    # Convert the integer to a string\n    str_n = str(n)\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n    # Iterate through each character in the string\n    for char in str_n:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    # Iterate through each digit in the integer\n    for digit in str_n:\n        # If the frequency of the digit in the dictionary is greater than the digit itself, return False\n        if freq[digit] > int(digit):\n            return False\n    # If no digit has a frequency greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    # convert the integer to a string\n    n = str(n)\n    # split the string into individual digits\n    digits = [int(d) for d in n]\n    # count the frequency of each digit\n    freq = [digits.count(d) for d in range(10)]\n    # check that the frequency of each digit is less than or equal to the digit itself\n    return all(d <= d for d in freq)"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    # loop through each digit in the number\n    for digit in str(n):\n        # convert the digit to an integer and check if it's less than or equal to itself\n        if int(digit) > int(digit):\n            return False\n    # if the loop completes without finding any digit that's greater than itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    # Create a dictionary to store the frequency of each digit\n    freq = {}\n\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Loop through each character in the string\n    for char in n_str:\n        # If the character is not already in the dictionary, add it with a frequency of 1\n        if char not in freq:\n            freq[char] = 1\n        # Otherwise, increment the frequency of the character by 1\n        else:\n            freq[char] += 1\n\n    # Loop through each character in the string and check whether it is greater than or equal to the frequency of the character\n    for char in n_str:\n        if char >= freq[char]:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # Initialize a dictionary to store the frequency of each digit\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    \n    # Loop through each digit in the integer\n    for digit in str(n):\n        # Check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] < freq[digit]:\n            return False\n    \n    # If all digits have valid frequencies, return True\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == elem:\n        return check_element(lst[1:], elem)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # Check if the list is empty\n    if len(list) == 0:\n        return True\n    \n    # Check if the first element in the list matches the given element\n    if list[0] == element:\n        # Remove the first element from the list\n        del list[0]\n        # Recursively call the function with the modified list\n        return check_element(list, element)\n    \n    # The list does not contain the given element, so it cannot be equal to it\n    return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(x == element for x in list):\n        print(\"All items in the list are equal to the given element.\")\n    else:\n        print(\"Not all items in the list are equal to the given element.\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if all(list[0] == element for item in list):\n        print(\"All items in the list are equal to the given element\")\n    else:\n        print(\"Not all items in the list are equal to the given element\")"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=.*b)(?=.*b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    match = re.search(pattern, text)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a.*b{2,3}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'ab{2,3}a'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}a'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=(b{2,3}))'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i % k == 0:\n            current_sum -= a[i-k]\n            max_sum = max(max_sum, current_sum)\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    # Initialize the maximum sum and the modified array\n    max_sum = 0\n    modified_array = [0] * (n * k)\n\n    # Loop through the original array and add it to the modified array k times\n    for i in range(n):\n        modified_array[i] = a[i]\n        for j in range(k - 1):\n            modified_array[i + j] = a[i]\n\n    # Loop through the modified array and calculate the sum of subarrays\n    for i in range(len(modified_array)):\n        if i == 0:\n            modified_array[i] = max_sum\n        elif i == len(modified_array) - 1:\n            modified_array[i] = max_sum\n        else:\n            modified_array[i] = max_sum - modified_array[i - 1] + modified_array[i + 1]\n\n    # Find the maximum sum and return it\n    return max(modified_array)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    temp = []\n\n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the kth element\n        if a[i] == a[k-1]:\n            # Calculate the sum of the current element and the previous elements\n            for j in range(i, i+k-1):\n                curr_sum += a[j]\n            # Compare the current sum with the maximum sum found so far\n            max_sum = max(max_sum, curr_sum)\n            # Add the current element to the temp array\n            temp.append(a[i])\n            # Remove the first element from the temp array\n            del temp[0]\n            # Reset the current sum\n            curr_sum = 0\n            # Reset the starting index\n            i = i - 1\n\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum sum of a contiguous subarray starting from the first element\n    max_sum = max(a)\n\n    # Create a new array of length k * n\n    modified_array = [0] * (k * n)\n\n    # Repeat the first n elements of the original array in the modified array\n    for i in range(n):\n        modified_array[i] = a[i]\n\n    # Find the maximum sum of a contiguous subarray of length k in the modified array\n    max_sum_k = max(modified_array[i:i+k] for i in range(len(modified_array) - k + 1))\n\n    # Return the maximum sum of the two subarrays\n    return max(max_sum, max_sum_k)"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    repeated_array = a * k\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(n):\n        current_sum = current_sum + a[i]\n        max_sum = max(max_sum, current_sum)\n        current_sum = repeated_array[i]\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Calculate the sum of the first k elements of the array\n    total_sum = sum(a[:k])\n\n    # Initialize the maximum sum and current subarray sum\n    max_sum = total_sum\n    current_subarray_sum = total_sum\n\n    # Iterate over the remaining elements of the array\n    for i in range(k, n):\n        # Add the current element to the current subarray sum\n        current_subarray_sum += a[i]\n\n        # If the current subarray sum exceeds the maximum sum, update the maximum sum\n        if current_subarray_sum > max_sum:\n            max_sum = current_subarray_sum\n\n        # If the current subarray sum becomes negative, reset it to zero\n        if current_subarray_sum < 0:\n            current_subarray_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Find the sum of the original array\n    original_sum = sum(a)\n\n    # Create a new array by repeating the original array k times\n    repeated_array = a * k\n\n    # Calculate the sum of the repeated array\n    repeated_sum = sum(repeated_array)\n\n    # Calculate the difference between the sum of the original array and the sum of the repeated array\n    difference = original_sum - repeated_sum\n\n    # Initialize a variable to store the largest sum\n    largest_sum = repeated_sum\n\n    # Iterate through the array and find the largest sum of a contiguous array\n    for i in range(1, n):\n        # Calculate the sum of the current element and the previous elements\n        current_sum = a[i] + repeated_array[i-1]\n\n        # If the current sum is greater than the largest sum, update the largest sum\n        if current_sum > largest_sum:\n            largest_sum = current_sum\n\n    # Return the largest sum of a contiguous array\n    return largest_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    current_count = 0\n\n    for i in range(n):\n        current_count += 1\n        current_sum += a[i]\n\n        if current_count == k:\n            max_sum = max(max_sum, current_sum)\n            current_count -= 1\n            current_sum -= a[i-k]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new list with the repeated array\n    arr = [0] * (n*k)\n    for i in range(n):\n        arr[i*k:(i+1)*k] = a\n    # Find the maximum sum of any contiguous subarray\n    max_sum = max_sum_so_far = float('-inf')\n    for i in range(len(arr)):\n        curr_sum = arr[i]\n        for j in range(i, len(arr)):\n            curr_sum += arr[j]\n            max_sum = max(max_sum, curr_sum)\n            max_sum_so_far = max(max_sum_so_far, max_sum)\n    # Return the maximum sum of any contiguous subarray\n    return max_sum_so_far"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    max_window_start = 0\n    max_window_end = 0\n    window_size = k\n    # Iterate through the array\n    for i in range(n):\n        # Check if the window needs to be extended\n        if i >= window_size - 1:\n            # Calculate the sum of the current window\n            curr_sum = sum(a[max_window_start:max_window_end+1])\n            # If the current sum is greater than the current max sum, update the max sum and window start and end indices\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n                max_window_start = max_window_end = i\n        # If the window doesn't need to be extended, update the window end index\n        max_window_end = i\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize sum to zero\n    sum = 0\n\n    # iterate n times\n    for i in range(n):\n        # calculate the square of i\n        square = i**2\n\n        # add the square to the sum\n        sum += square\n\n        # print the square of i\n        print(square)\n\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2,n+1,2):\n        sum+=i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i*i\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0\n    i = 0\n    while i < n:\n        total += i*i\n        i += 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n < 1:\n        print(\"Error: n must be greater than or equal to 1\")\n        return\n    \n    total = 0\n    count = 0\n    \n    while count < n:\n        if count % 2 == 0:\n            total += count**2\n            count += 1\n        else:\n            count += 1\n            \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of squares of first\", n, \"even natural numbers is:\", square_Sum(n))"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a variable to store the maximum length\n    max_len = 0\n    \n    # Loop through each list in the input list\n    for lst in list1:\n        # Find the length of each list\n        len_lst = len(lst)\n        \n        # Update the maximum length if the current list length is greater\n        if len_lst > max_len:\n            max_len = len_lst\n    \n    # Return the maximum length\n    return max_len"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list) or len(max_list) == 0:\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) > max_lengths[0]:\n            max_lengths = [len(sublist)]\n\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum length values\n    max_lengths = []\n    # Iterate over each sub-list in the list\n    for sub_list in list1:\n        # Find the maximum length of the sub-list\n        sub_max = max(len(x) for x in sub_list)\n        # Append the maximum length to the max_lengths list\n        max_lengths.append(sub_max)\n    # Return the max_lengths list\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for lst in list1:\n        if len(lst) > len(max_length_list):\n            max_length_list = lst\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_lengths = []\n    for lst in list1:\n        if len(lst) > len(max_lengths):\n            max_lengths = lst\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns a list of the maximum length for each sublist.\n    '''\n    lengths = []\n    for sublist in list1:\n        length = len(sublist)\n        lengths.append(length)\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for i in range(len(list1)):\n        lengths.append(len(list1[i]))\n    return max(lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0: \n        return 0\n    elif n == 1 or k == 1: \n        return 1\n    elif n == 2: \n        if k == 2: \n            return 2\n        else: \n            return 1\n    else: \n        count = 0\n        for i in range(1, n//2+1): \n            count += count_no_of_ways(n-i, k)\n        count += count_no_of_ways(n//2, k)\n        return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    \n    dp = [0] * (n+1)\n    dp[0], dp[1] = 1, 1\n    \n    for i in range(2, n+1):\n        for j in range(i-1):\n            if j+1 > 1 and j+2 <= n:\n                dp[i] += dp[j] * dp[j+1]\n                dp[i] %= 10**9\n        dp[i] += dp[i-2] * dp[i-1]\n        dp[i] %= 10**9\n        \n    return dp[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    # base case\n    if n == 1 or k == 1: \n        return 1\n    \n    # count number of ways to paint fence\n    ways = 0\n    for i in range(1, min(n, 2 * k) + 1):\n        ways += count_no_of_ways(n - i, k - 1)\n    \n    return ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Taking input from user\n    fence_length = int(input(\"Enter the length of the fence: \"))\n    color_count = int(input(\"Enter the number of colors: \"))\n\n    # Initializing an empty list to store the color combinations\n    color_combinations = []\n\n    # Using nested loops to generate all possible color combinations\n    for i in range(color_count):\n        for j in range(color_count):\n            if i!= j:\n                color_combinations.append([i, j])\n\n    # Taking input from user to determine the maximum number of adjacent posts with the same color\n    max_adjacent = int(input(\"Enter the maximum number of adjacent posts with the same color: \"))\n\n    # Using nested loops to generate all possible ways of painting the fence\n    no_of_ways = 0\n    for i in range(1, fence_length+1):\n        for j in range(max_adjacent, fence_length+1):\n            if i <= j:\n                continue\n            # Removing the colors that are already used in the previous combination\n            for color_pair in color_combinations:\n                if color_pair[0] == j-1 or color_pair[1] == i-1:\n                    color_combinations.remove(color_pair)\n\n            # Checking if the current combination is valid\n            is_valid = True\n            for color_pair in color_combinations:\n                if color_pair[0] == color_pair[1]:\n                    is_valid = False\n                    break\n            # Adding the combination to the list of valid combinations\n            if is_valid:\n                color_combinations.append([j-1, i-1])\n                no_of_ways += 1\n                # Removing the combination from the list of color combinations as we have used it\n                color_combinations.remove([j-1, i-1])\n\n    # Printing the result\n    print(\"Number of ways of painting the fence:\", no_of_ways)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # create a list of colors to be used in the fence\n    colors = [i for i in range(k)]\n    # create a list of lists to store the count of ways for each fence length\n    fence_lengths = []\n    # iterate over the fence lengths from 1 to n\n    for i in range(1, n+1):\n        # create a list to store the count of ways for each fence length and color combination\n        ways = []\n        # iterate over the colors to be used in the fence\n        for color in colors:\n            # initialize the count of ways for that color as 0\n            count = 0\n            # iterate over the previous n-i fence lengths\n            for j in range(n-i):\n                # check if the previous fence length and current color combination are same\n                if colors[j] == color:\n                    count += fence_lengths[j][color]\n            # add the count of ways for that color combination to the list of ways\n            ways.append(count)\n        # add the list of ways for that fence length to the list of lists\n        fence_lengths.append(ways)\n    # return the count of ways for each fence length and color combination\n    return fence_lengths[-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D array of size (n+1) x (k+1)\n    dp = [[0 for x in range(k+1)] for x in range(n+1)]\n    dp[1][1] = 1\n\n    # Fill the first row and column of the 2D array\n    for i in range(1, k+1):\n        dp[1][i] = 1\n\n    # Fill the rest of the array using dynamic programming\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            # If the jth color is same as the (i-1)th color, then we can use the (i-1)th post\n            if j == dp[i-1][j-1]:\n                dp[i][j] = dp[i-1][j]\n            # If the jth color is different from the (i-1)th color, then we have to choose between using the (i-1)th post and not using it\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i-1][j]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    # If k is greater than or equal to n, then we have a complete fence\n    if k >= n:\n        return 1\n    # Initialize a boolean array to store the color of each post\n    colors = [False] * n\n    # Base case: if we have only one post left, then we have a complete fence\n    if n == 1:\n        return 1\n    # Initialize a counter variable to store the number of ways\n    count = 0\n    # Iterate over all possible combinations of colors\n    for i in range(n):\n        if colors[i] == False:\n            # If the current post has not been colored yet, then try all the other colors\n            for j in range(k):\n                if colors[j] == False:\n                    # If the current post has not been colored with this color yet, then mark it as colored with this color and count the number of ways\n                    colors[j] = True\n                    count += count_no_of_ways(n - 1, k)\n                    # If the current post has been colored with this color, then remove it from the list of colors to try\n                    colors[j] = False\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create an empty matrix to store the number of ways of painting the fence\n    ways = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the first row and first column to 1\n    ways[0][0] = 1\n    ways[0][1] = 0\n\n    # Fill in the rest of the matrix using the recurrence relation\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i][j-1]\n\n    # Return the number of ways of painting the fence\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\n    Parameters:\n    n (int): number of posts in the fence\n    k (int): number of colors in the fence\n\n    Returns:\n    int: number of ways of painting the fence\n    '''\n\n    # Initialize a 2D list to store the number of ways of painting the fence\n    count = [[0] * (k+1) for _ in range(n+1)]\n\n    # Initialize the first row and column of the 2D list with 1\n    count[0][0] = 1\n    count[0][1] = 1\n\n    # Iterate through the rows and columns of the 2D list\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            # If the current post has the same color as the adjacent posts\n            if j <= i:\n                count[i][j] = count[i-1][j-1]\n            else:\n                count[i][j] = (count[i-1][j] + count[i][j-1]) % 1000000007\n\n    # Return the value in the last row and column of the 2D list\n    return count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    # Generate all possible combinations of k colors and store them in a list\n    color_combinations = []\n    for i in range(2**k):\n        color_combinations.append(\"\".join([str(int(c)) for c in \"{:0\" + str(k) + \"b}\".format(i)]))\n\n    # Initialize a dictionary to store the count of ways for each combination of colors\n    count_dict = {}\n    for color_combo in color_combinations:\n        count_dict[color_combo] = 0\n\n    # Count the number of ways to paint the fence with different colors\n    for i in range(n):\n        # Remove the last color from the current color combination\n        last_color = color_combinations.pop()\n        # Generate all possible combinations of k-1 colors with the last color removed from the current color combination\n        color_combinations_with_last_removed = []\n        for c1 in color_combinations:\n            color_combinations_with_last_removed.append(c1[:-1] + c1[-1])\n        # Update the count of ways for each remaining color combination\n        for color_combo in color_combinations_with_last_removed:\n            if color_combo in count_dict:\n                count_dict[color_combo] += 1\n\n    # Return the count of ways for the last color combination\n    return count_dict[color_combinations[0]]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n//m # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    :param n: first number\n    :param m: second number\n    :return: quotient of n and m rounded down to the nearest integer\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    This function calculates the quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m  # integer division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = n // m\n    \n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function takes in two parameters: the length of the triangle base and height.\n    It returns the third side of the right angled triangle, which is the square root of the sum of the squares of the base and height.\n    '''\n    side1 = math.sqrt(w**2 + h**2)\n    side2 = math.sqrt(w**2 + (h/2)**2)\n    return side2"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function calculates the third side of a right angled triangle given the lengths of its two opposite sides.\n\n    Parameters:\n        w (float): The length of the first opposite side of the triangle.\n        h (float): The length of the second opposite side of the triangle.\n\n    Returns:\n        float: The length of the third side of the triangle.\n    '''\n\n    # Check if the triangle is right-angled\n    if w**2 + h**2!= math.pow(w+h, 2):\n        raise ValueError('The given sides do not form a right angled triangle.')\n\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n\n    # Use the Pythagorean theorem to calculate the length of the third side\n    return math.sqrt(s**2 + h**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = math.sqrt(w**2 + h**2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n\n    # Calculate the length of the third side\n    s = (w**2 + h**2)**0.5\n\n    # Return the third side\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Using Pythagorean theorem\n    a = math.sqrt(w**2 + h**2)\n    b = math.sqrt((w**2 - h**2)**2 + h**2)\n    c = math.sqrt(w**2 + (h**2 - w**2)**2)\n    \n    # Find the largest side\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    c = 2 * a\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for item in listval:\n        if type(item) == int:\n            if item > max_val:\n                max_val = item\n        elif type(item) == float:\n            if item > max_val:\n                max_val = item\n        elif type(item) == str:\n            if len(item) > len(max_val):\n                max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    if len(listval) == 0:\n        return None\n    \n    max_val = listval[0]\n    \n    for item in listval:\n        if type(item)!= type(max_val):\n            if type(max_val) == int and type(item) == float:\n                max_val = max(max_val, item)\n            elif type(max_val) == float and type(item) == int:\n                max_val = max(max_val, item)\n            else:\n                max_val = item\n        elif type(item) == type(max_val):\n            max_val = max(max_val, item)\n    \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for val in listval:\n        if max_value is None or val > max_value:\n            max_value = val\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in it.\n    '''\n    max_num = None\n    for num in listval:\n        if max_num is None or num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if type(listval[i]) > type(max_val):\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for val in listval[1:]:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div = 1\n    total = 0\n    while div*div <= number:\n        if number % div == 0:\n            total += div\n        div += 1\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    i = 1\n    while i * i <= number:\n        if number % i == 0:\n            divisors.append(i)\n        i += 1\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n\n    divisors_list = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors_list.append(i)\n\n    return sum(divisors_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    divisor = 1\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            divisors.append(divisor)\n        divisor += 1\n    \n    return sum(divisors)\n"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n            elif arr[j] > arr[i]:\n                inv_count += j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # Use bubble sort algorithm to sort the array\n    for i in range(len(arr)):\n        for j in range(0, len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Initialize variables to count inversions\n    inv_count = 0\n    temp_inv_count = 0\n\n    # Iterate over the sorted array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += j - i + 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    # Helper function to swap two elements of the array\n    def swap(arr, i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    # Helper function to divide the array into two parts and find the inversions\n    def count_inversions(arr, low, high):\n        if low >= high:\n            return 0\n\n        # Partition the array around a random pivot element\n        pivot = arr[low]\n        i = low + 1\n        j = high\n        while True:\n            while i <= j and arr[i] <= pivot:\n                i += 1\n            while arr[j] >= pivot and i <= j:\n                j -= 1\n            if i <= j:\n                swap(arr, i, j)\n            else:\n                break\n\n        # Recursively count the inversions in the two parts of the array\n        inversions_left = count_inversions(arr, low, j)\n        inversions_right = count_inversions(arr, i, high)\n\n        # Return the sum of the inversions in the two parts plus the inversions between the pivot and the midpoint\n        return inversions_left + inversions_right + j - i + 1\n\n    # Call the helper function to count the inversions in the array\n    return count_inversions(arr, 0, len(arr) - 1)"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    # sort the array in ascending order\n    arr.sort()\n    # initialize variables to keep track of inversions\n    inversions = 0\n    # iterate through the array and count inversions\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inversions += 1\n    # return the total number of inversions\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function counts the number of inversions in an array.\n    '''\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = merge_sort(arr[:mid])\n        right = merge_sort(arr[mid:])\n        \n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n                \n        result.extend(left[i:])\n        result.extend(right[j:])\n        \n        return result\n    \n    arr_sorted = merge_sort(arr)\n    n = len(arr_sorted)\n    \n    inv_count = 0\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr_sorted[i] < arr_sorted[j]:\n                inv_count += n - i - j\n                \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0  # initialize the inversion count to 0\n\n    # Sort the array in non-decreasing order\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                # swap the elements if they are not in order\n                arr[i], arr[j] = arr[j], arr[i]\n                inv_count += n - i - 1  # count the inversion\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n\n    n = len(arr) \n    # find the maximum element in the array \n    max_elem = max(arr) \n\n    # count the number of inversions in the array \n    count = 0 \n    for i in range(1, n): \n        # find the index of the maximum element \n        max_index = i \n        for j in range(i): \n            if arr[j] > arr[max_index]: \n                max_index = j \n        # swap the maximum element with the i-th element \n        arr[max_index], arr[i] = arr[i], arr[max_index] \n        # count the inversions in the subarray from i to n-1 \n        for j in range(i, n): \n            if arr[j] < arr[i]: \n                count += n - j - 1 \n\n    return count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    This function takes an array as input and returns the count of inversions in the array.\n    An inversion is a pair of elements in an array that are in the wrong order.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        # Sort the array in ascending order\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n-j\n        # Update the array in ascending order\n        for j in range(i, n-1, -1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    \n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure into a single level list.\n\n    Args:\n        lst (list): A nested list structure to be flattened.\n\n    Returns:\n        list: A single level flattened list.\n    \"\"\"\n    flat_lst = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_lst.extend(flatten_list(item))\n        else:\n            flat_lst.append(item)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    # Initialize an empty list to store the flattened structure\n    flat_list = []\n\n    # Iterate through the list1\n    for item in list1:\n        # If the item is a list, recursively flatten it\n        if isinstance(item, list):\n            flat_list += flatten_list(item)\n        # If the item is not a list, append it to the flat_list\n        else:\n            flat_list.append(item)\n\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes in a nested list and returns a flattened list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n\n    def flatten_helper(lst):\n        flat_lst = []\n        for i in lst:\n            if isinstance(i, list):\n                flat_lst.extend(flatten_helper(i))\n            else:\n                flat_lst.append(i)\n        return flat_lst\n\n    return flatten_helper(list1)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n\n    for item in stdata:\n        # add the item to the dictionary with its value as the sum\n        agg_dict[item[1]] += item[0]\n\n    # find the maximum value in the dictionary\n    max_value = max(agg_dict.values())\n\n    # create a new dictionary where the keys are the maximum values and the values are the corresponding maximum aggregates\n    max_agg_dict = {k: v for k, v in agg_dict.items() if v == max_value}\n\n    # return the maximum aggregate\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n\n    # Iterate over the list of tuples and calculate the maximum aggregate for each customer\n    for customer, items in stdata:\n        total = sum([x[1] for x in items])\n        max_agg[customer] = max(max_agg[customer], total)\n\n    # Find the maximum aggregate across all customers and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    max_agg = 0\n\n    for item in stdata:\n        for i in range(len(item)):\n            d[i] += item[i]\n\n    for value in d.values():\n        max_agg = max(max_agg, value)\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_dict = defaultdict(int)\n    for item in stdata:\n        max_aggregate_dict[item[0]] = max(max_aggregate_dict[item[0]], item[1])\n    max_aggregate_list = [(k, v) for k, v in max_aggregate_dict.items()]\n    max_aggregate_list.sort(key=lambda x: x[1], reverse=True)\n    return max_aggregate_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each item\n    max_aggr = defaultdict(int)\n\n    # iterate over the list of tuples\n    for item, price in stdata:\n        # get the current price and add it to the max_aggr value\n        max_aggr[item] += price\n\n    # find the maximum value in the max_aggr dictionary\n    max_value = max(max_aggr.values())\n\n    # create a new list of tuples with item and price as keys\n    result = [(item, max_aggr[item]) for item in max_aggr]\n\n    # sort the list of tuples by the second element (price)\n    result.sort(key=lambda x: x[1])\n\n    # return the list of tuples with item and price as keys\n    return result"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    \n    for item in stdata:\n        for sale in item:\n            max_dict[sale] += 1\n            max_sum += sale\n    \n    max_dict = {key: value for key, value in max_dict.items() if value > 0}\n    return max(max_dict.keys())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = defaultdict(int)\n    for st in stdata:\n        for item, quantity in st:\n            max_agg[item] += quantity\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_agg_dict = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for customer, item_price in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_agg = max(max_agg_dict[customer], item_price)\n        # Update the maximum aggregate for the customer\n        max_agg_dict[customer] = max_agg\n        \n    # Return the maximum aggregate from the dictionary\n    return max(max_agg_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)  # defaultdict to store the maximum value for each item\n    max_sum = 0  # initialize the maximum aggregate sum to 0\n\n    # iterate over the list of tuples and calculate the maximum aggregate for each item\n    for item, price in stdata:\n        max_dict[item] = max(max_dict[item], price)\n        max_sum += max_dict[item]\n\n    # return the maximum aggregate sum\n    return max_sum"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Initialize a defaultdict to store the maximum aggregate for each day\n    max_agg = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for day, values in stdata:\n        # For each day, iterate through the list of values and calculate the maximum aggregate\n        for val in values:\n            max_agg[day] = max(max_agg[day], val)\n\n    # Return the maximum aggregate for each day\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize the count of binary sequences as 0\n    count = 0\n\n    # Initialize the first n bits as 0\n    first_bits = 0\n\n    # Initialize the last n bits as 0\n    last_bits = 0\n\n    # Loop from 0 to 2^n - 1\n    for i in range(2 ** n):\n\n        # Calculate the sum of the first n bits\n        first_sum = sum([int(digit) for digit in format(first_bits, '0{}b'.format(n))])\n\n        # Calculate the sum of the last n bits\n        last_sum = sum([int(digit) for digit in format(last_bits, '0{}b'.format(n))])\n\n        # If the sum of the first n bits is equal to the sum of the last n bits, increment the count\n        if first_sum == last_sum:\n            count += 1\n\n        # Update the first and last bits for the next iteration\n        first_bits = (first_bits << 1) | 1\n        last_bits = last_bits >> 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        # convert binary number to integer\n        num = int(bin(i)[2:], 2)\n        # check if sum of first n bits is same as sum of last n bits\n        if num == sum(num//2**(n-1):num//2**n) and num == sum(num//2**(n-1)::-1):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n):\n        temp = i\n        if i >= 1<<n:\n            temp = i - 1 << (2*n)\n        sum_i = sum(bin(temp)[2:].zfill(n))\n        if temp >= 1<<n:\n            temp -= 1\n        for j in range(temp, temp-1-2**n+1, -1):\n            sum_j = sum(bin(j)[2:].zfill(n))\n            if sum_i == sum_j:\n                count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(1,2**n+1):\n        if sum(int(bit) for bit in bin(i)[2:]) == sum(int(bit) for bit in bin(i)[-2:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        a = bin(i)[2:]\n        b = bin(i >> n)[2:]\n        if a == b:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1), 2**n):\n        first_n_bits = i >> n-1\n        last_n_bits = i & ((1 << n)-1)\n        if first_n_bits == last_n_bits:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    # Initialize the counts to 0\n    count_seq = 0\n    count_diff = 0\n\n    # Check all possible binary strings of length 2n\n    for i in range(2**n):\n        # Convert the integer to binary string and split it into two parts\n        binary_str = bin(i)[2:]\n        left_part = binary_str[:n]\n        right_part = binary_str[n:]\n\n        # Check if the sum of first n bits is the same as the sum of last n bits\n        if int(left_part, 2) + int(right_part, 2) == 2**n:\n            # If they are the same, increment the count of the binary sequence\n            count_seq += 1\n        # If they are different, increment the count of the sequence that differ\n            count_diff += 1\n\n    return count_seq + count_diff"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # initialize a variable to store the count of sequences\n    count = 0\n    \n    # loop through all possible values of n bits\n    for i in range(2**n):\n        # extract the first n bits\n        first_bits = bin(i)[2:n+2]\n        \n        # extract the last n bits\n        last_bits = bin(i)[n+2:]\n        \n        # check if the sum of first and last bits is same\n        if int(first_bits, 2) == int(last_bits, 2):\n            # if yes, increment the count\n            count += 1\n    \n    # return the count of sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if (i % (2**(n-1))) == 0:\n            continue\n        binary_str = bin(i)[2:]\n        if sum(int(binary_str[i:i+n]) for i in range(len(binary_str)//n)) == sum(int(binary_str[len(binary_str)//n:]) for i in range(len(binary_str)//n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)):\n        binary = bin(i)[2:].zfill(2*n)\n        first_half = binary[:n]\n        last_half = binary[n:]\n        if sum(int(bit) for bit in first_half) == sum(int(bit) for bit in last_half):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        depth = 1\n        for value in d.values():\n            depth = max(depth, dict_depth(value))\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n        elif isinstance(value, list):\n            for item in value:\n                if isinstance(item, dict):\n                    depth += 1 + dict_depth(item)\n        else:\n            pass\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, 1 + dict_depth(d[key]))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for item in d.values():\n        if isinstance(item, dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    if not isinstance(d, dict):\n        raise TypeError(\"Input must be a dictionary\")\n    \n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth = 1 + dict_depth(v)\n        else:\n            depth = 0\n        max_depth = max(max_depth, depth)\n    \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    elif isinstance(d, list):\n        depth = 1 + max(dict_depth(x) for x in d)\n    else:\n        depth = 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 0\n    while stack:\n        d = stack.pop()\n        depth += 1\n        for key, value in d.items():\n            if isinstance(value, dict):\n                stack.append(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            sub_depth = dict_depth(v) + 1\n            max_depth = max(max_depth, sub_depth)\n        else:\n            max_depth += 1\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1\n        for value in d.values():\n            depth = max(depth, dict_depth(value))\n        return depth + 1\n    else:\n        return 1"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and the number of rotations, and an index as input.\n    It returns the element at the given index after rotating the array by the specified number of times.\n    \"\"\"\n    # check if the index is valid\n    if index >= len(arr):\n        return \"Index out of range\"\n    \n    # check if there are any rotations to be performed\n    if not rotations:\n        return arr[index]\n    \n    # iterate through the ranges and apply the rotations\n    for i in range(len(ranges)):\n        # find the start and end index for the range\n        start = ranges[i][0]\n        end = ranges[i][1]\n        \n        # rotate the array within the range\n        left = arr[start:end]\n        right = arr[end:start-1:-1]\n        arr[start:end] = left + right\n        \n        # update the range after the rotation\n        start = end\n        end = start + len(left) - 1\n    \n    # return the element at the final index\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes three arguments:\n    arr: a list of integers\n    ranges: a list of integers\n    rotations: an integer representing number of rotations\n    index: an integer representing the index of the element to be found\n    \n    The function returns the element at the given index after the number of rotations.\n    \"\"\"\n\n    # Initialize the result variable with the first element in the list\n    result = arr[0]\n\n    # Loop through each element of the array\n    for i in range(1, len(arr)):\n\n        # Calculate the rotation index for the current element\n        rotation_index = (i - index) % len(arr)\n\n        # Check if the current element is within the range of rotations\n        if rotations % 2 == 1 and rotation_index == 0:\n            continue\n        elif rotations % 2 == 0 and rotation_index == len(arr) - 1:\n            continue\n\n        # Calculate the element after the rotation\n        rotated_element = arr[(i - index) % len(arr)]\n\n        # Check if the current element is within the range of rotations\n        if rotations % 2 == 1 and rotated_element < result:\n            result = rotated_element\n        elif rotations % 2 == 0 and rotated_element > result:\n            result = rotated_element\n\n    # Return the result\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # find the number of rotations for each element in the array\n    rotations_arr = []\n    for i in range(len(arr)):\n        count = 0\n        for j in range(len(arr[i])):\n            if arr[i][j]!= 0:\n                count += 1\n        rotations_arr.append(count)\n\n    # find the maximum rotations for all elements\n    max_rotations = max(rotations_arr)\n\n    # create a list of elements in each range after rotations\n    elements_after_rotations = []\n    for i in range(len(ranges)):\n        element_list = []\n        for j in range(len(arr[ranges[i][0]]) - rotations_arr[ranges[i][0]] + 1):\n            element_list.append(arr[ranges[i][0]][j])\n            element_list.append(arr[ranges[i][1]][-rotations_arr[ranges[i][1]] + j + 1])\n        elements_after_rotations.append(element_list)\n\n    # find the minimum element after rotations\n    min_element = 0\n    for i in range(len(ranges)):\n        min_element = min(min_element, min(elements_after_rotations[i]))\n\n    # find the element at the given index after rotations\n    element_at_index = 0\n    for i in range(len(ranges)):\n        element_at_index += elements_after_rotations[i].count(min_element)\n        if element_at_index >= index:\n            break\n\n    # find the element at the given index\n    element_at_index_after_rotations = elements_after_rotations[ranges.index(element_at_index)][-rotations_arr[element_at_index] + index]\n\n    return element_at_index_after_rotations"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the number of rotations that the element will take to rotate\n    rotations = arr[index] % rotations\n\n    # Initialize the current element and its rotation count\n    current_element = arr[index]\n    current_rotations = 0\n\n    # Loop through the array\n    for i in range(index - rotations + 1, index + 1):\n        # If the index is within the rotation range, add the element to the current element and increment the rotation count\n        if i >= 0 and i < len(arr):\n            current_element += arr[i]\n            current_rotations += 1\n\n        # If the index is outside the rotation range, rotate the current element to get the correct element at the given index\n        else:\n            # Calculate the index of the element to rotate to\n            rotate_to = (i - index + rotations) % len(arr)\n\n            # Calculate the difference between the current element and its rotation count\n            rotation_difference = rotations - current_rotations\n\n            # Rotate the current element to get the correct element at the given index\n            while rotation_difference > 0:\n                current_element = (current_element - arr[rotate_to]) % len(arr)\n                rotate_to = (rotate_to + 1) % len(arr)\n                rotation_difference -= 1\n\n            # Add the rotated element to the current element and increment the rotation count\n            current_element += arr[rotate_to]\n            current_rotations += 1\n\n        # If the current element equals the element at the given index, return it\n        if current_element == arr[index]:\n            return current_element\n\n    # If the element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    x = 0\n    for i in range(n):\n        if arr[i] == ranges[index]:\n            x = i\n            break\n    if x == 0:\n        return None\n    else:\n        for i in range(rotations):\n            left, right = 0, n - 1\n            while left < right:\n                mid = (left + right) // 2\n                if arr[mid] < ranges[index]:\n                    left = mid + 1\n                else:\n                    right = mid\n            if arr[left]!= ranges[index]:\n                return None\n            x = x - (n - left)\n            x %= n\n            x += left\n        return arr[x]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the input of an array, range of rotations, and index.\n    It then rotates the array by the given number of rotations and returns the element at the given index after the rotations.\n    \"\"\"\n\n    # Find the number of rotations required to reach the index\n    rotations = rotations % len(arr)\n\n    # Rotate the array by the required number of rotations\n    for i in range(rotations):\n        arr.append(arr.pop(0))\n\n    # Find the element at the given index after the rotations\n    element = arr[index]\n\n    # Remove the last element from the array after rotations\n    arr.pop()\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array of integers, find the element at a given index after rotating the array by a given number of rotations.\n\n    Args:\n        arr (list): the input array of integers.\n        ranges (list): the range of integers that can appear in the input array.\n        rotations (int): the number of rotations to perform.\n        index (int): the index at which to find the element.\n\n    Returns:\n        The element at the given index after rotating the array by the given number of rotations.\n    \"\"\"\n\n    # Create a dictionary to map each integer to its corresponding range index.\n    range_map = {}\n    for i, range_ in enumerate(ranges):\n        for j in range(range_):\n            range_map[j] = i\n\n    # Perform the rotations.\n    for _ in range(rotations):\n        # Get the current range index for each integer in the array.\n        current_range_indices = [range_map[arr[i]] for i in range(len(arr))]\n\n        # Find the first index with a range of 1.\n        start_index = current_range_indices.index(1)\n\n        # Find the last index with a range of 1.\n        end_index = current_range_indices.index(len(ranges))\n\n        # Reverse the range between the start and end indices.\n        current_range_indices[start_index:end_index+1] = current_range_indices[start_index:end_index+1][::-1]\n\n        # Map the modified range indices back to integers.\n        new_arr = [ranges[i] for i in current_range_indices]\n\n        # Copy the new array back to the original array.\n        for i, j in enumerate(new_arr):\n            arr[i] = j\n\n    # Get the element at the given index.\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the starting index of the rotated array after rotations\n    rotated_index = (index + rotations) % len(arr)\n\n    # Calculate the range of the rotated array\n    rotated_range = ranges[rotated_index]\n\n    # Find the element at the rotated index\n    rotated_element = arr[rotated_range[0]:rotated_range[1]]\n\n    # Find the element at the original index\n    original_element = arr[index]\n\n    # If the original element is part of the rotated range, return the original element\n    if rotated_element.count(original_element) > 0:\n        return original_element\n\n    # Otherwise, return the element from the rotated array\n    return rotated_element[rotated_element.index(original_element)]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, list of ranges, and a number of rotations as input\n    and returns the element at the given index after the specified number of rotations.\n    \n    :param arr: The array from which the element needs to be found.\n    :type arr: list\n    :param ranges: List of ranges of rotations.\n    :type ranges: list\n    :param rotations: Number of rotations required to find the element.\n    :type rotations: int\n    :param index: Index of the element to be found.\n    :type index: int\n    \n    :return: The element at the given index after the specified number of rotations.\n    :rtype: int or str or float\n    \"\"\"\n    \n    # Check if the index is valid\n    if index < 0 or index >= len(arr):\n        return \"Index out of range\"\n    \n    # Check if the rotations are valid\n    if rotations < 1:\n        return \"Number of rotations should be greater than or equal to 1\"\n    \n    # Initialize variables\n    temp_arr = []\n    curr_index = index\n    \n    # Perform rotations\n    for i in range(rotations):\n        temp_arr = arr[curr_index]\n        arr[curr_index] = arr[curr_index - ranges[i]]\n        arr[curr_index - ranges[i]] = temp_arr\n        \n        # Update the current index\n        curr_index = curr_index - ranges[i]\n    \n    return arr[curr_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array `arr`, a list of ranges `ranges`, and a list of rotations `rotations` and returns the element at the given index after the specified number of rotations.\n\n    Args:\n        arr: A list of integers.\n        ranges: A list of tuples where each tuple contains two integers. The first integer in the tuple represents the minimum value of the range, and the second integer represents the maximum value of the range.\n        rotations: A list of integers representing the number of rotations required.\n        index: An integer representing the index for which we want to find the element after the specified number of rotations.\n\n    Returns:\n        An integer representing the element at the given index after the specified number of rotations.\n    \"\"\"\n\n    # Initialize the minimum value of the range to the first element of the array.\n    min_val = arr[0]\n\n    # Loop through all the rotations and update the minimum value of the range.\n    for rotation in rotations:\n        min_val = arr[(index + rotation) % len(arr)]\n\n        # Loop through all the ranges and update the minimum value of the range if the current element is within the range.\n        for i in range(len(ranges)):\n            if min_val >= ranges[i][0] and min_val <= ranges[i][1]:\n                min_val = ranges[i][0]\n\n    # Return the element at the given index after the specified number of rotations.\n    return min_val"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    match = re.search(pattern, words)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+'\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches\n    else:\n        return \"No two words starting with 'p' were found in the list.\""
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*$')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p.*'\n    match = re.search(pattern, words)\n    if match:\n        return [match.group(), match.group(1)]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return words[i], words[i+1]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'p\\w+')\n    result = pattern.findall(words)\n    return result"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile('^p')\n    matches = re.findall(pattern, words)\n    if len(matches) > 1:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.match(r'^p', word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    return [word for word in words if re.match(pattern, word)]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize the table to store the maximum sum of increasing subsequences till i\n    dp = [0] * n\n    \n    # Initialize the maximum sum of increasing subsequences till i\n    max_sum = 0\n    \n    # Loop through the indices from 0 to i-1\n    for i in range(n):\n        # Check if the current element is greater than k\n        if a[i] > k:\n            # Calculate the maximum sum of increasing subsequences till i-1\n            dp[i] = max(dp[i], dp[i-1] + a[i])\n            \n            # Update the maximum sum of increasing subsequences till i\n            max_sum = max(max_sum, dp[i])\n    \n    # Return the maximum sum of increasing subsequences till i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Initialize max_sum as 0\n    max_sum = 0\n\n    # Initialize a list to store all subsequences till now\n    subseq = [0] * (k+1)\n\n    # Traverse the array from index+1 to n-1\n    for i in range(index+1, n):\n\n        # Calculate the maximum sum of any subsequence that ends at i and includes a given kth element\n        for j in range(k, i):\n\n            # If a[j] is greater than a[i], we can include a[i] in the subsequence ending at j\n            if a[j] > a[i]:\n                subseq[i] = max(subseq[i], subseq[j]+a[i])\n\n        # Update the maximum sum of increasing subsequence till now\n        max_sum = max(max_sum, subseq[i])\n\n    # Return the maximum sum of increasing subsequence till now\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # initialize the maximum sum and max sum of increasing subsequence\n    max_sum = float('-inf')\n    max_sum_subseq = []\n\n    # loop through the array\n    for i in range(index, n):\n        # if the current element is greater than the kth element and the current element is greater than the previous element,\n        # then include the current element in the increasing subsequence and update the maximum sum of increasing subsequence\n        if a[i] > a[k] and (i == index or a[i] > a[index-1]):\n            max_sum_subseq.append(a[i])\n            max_sum_subseq = max_sum_subseq[:-1] + [max(max_sum_subseq)]\n            max_sum = max(max_sum, max(max_sum_subseq))\n\n    # if the maximum sum is negative, it means that the array is not strictly increasing and we need to backtrack to find the maximum increasing subsequence\n    if max_sum < 0:\n        # initialize the current index and max sum of increasing subsequence\n        curr_index = index\n        curr_sum = a[curr_index]\n\n        # loop through the array\n        for i in range(index, n):\n            # if the current element is greater than the previous element, then include the current element in the increasing subsequence and update the maximum sum of increasing subsequence\n            if a[i] > curr_sum:\n                curr_sum = a[i]\n                curr_index = i\n\n        # find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n        max_sum = max(max_sum_increasing_subseq(a, n, 0, k))\n\n    # return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0\n    if a[index] >= a[k]:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), a[index]) + a[index]\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    dp = [0] * (n+1)\n    max_sum = float('-inf')\n    max_sum_prefix = 0\n    \n    # Initialize dp list with the first element\n    for i in range(1, n+1):\n        if i == index:\n            dp[i] = a[i]\n        elif i == k:\n            dp[i] = a[i] + dp[i-1]\n        else:\n            dp[i] = max(a[i], dp[i-1])\n            \n    # Update max_sum and max_sum_prefix\n    for i in range(n, index+1, -1):\n        if i == k:\n            max_sum = max(max_sum, dp[i] - a[i] - dp[i-1])\n        else:\n            max_sum_prefix = max(max_sum_prefix, dp[i])\n        if max_sum_prefix > max_sum:\n            max_sum = max_sum_prefix\n            \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function takes a list a, its length n, the index i for which we want to find the maximum sum of increasing subsequence (including k), and returns the maximum sum.\n    \"\"\"\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] < a[i] and dp[j] < dp[i] + a[j]:\n                dp[i] = dp[j] + a[i]\n    return max(dp[i] for i in range(1, n + 1) if a[i - 1] < a[i] and i <= k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function finds the maximum sum of increasing subsequence\n    from prefix until the ith index and also including the kth element\n    which is after i, i.e., k > i.\n\n    Time Complexity: O(n^2)\n    Space Complexity: O(n)\n    \"\"\"\n\n    # Initialize the table to store the maximum sum of increasing subsequence\n    # from prefix to each index\n    table = [0] * n\n\n    # Initialize the maximum sum of increasing subsequence to itself\n    max_sum = a[index]\n\n    # Iterate through the array from index 1 to n-1\n    for i in range(index + 1, n):\n        # Calculate the maximum sum of increasing subsequence\n        # from prefix to the current index\n        current_sum = max(a[i], a[i] + table[i - 1])\n\n        # Update the table with the maximum sum of increasing\n        # subsequence from prefix to the current index\n        table[i] = current_sum\n\n        # Update the maximum sum of increasing subsequence if\n        # the current sum is greater than the current maximum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Check if the maximum sum of increasing subsequence from prefix\n    # to index i (inclusive) also includes the kth element which is after i,\n    # i.e., k > i\n    if k > index:\n        # Calculate the maximum sum of increasing subsequence from prefix\n        # to k, which is after i\n        kth_sum = max(a[k], a[k] + table[index - 1])\n\n        # Update the table with the maximum sum of increasing\n        # subsequence from prefix to k, which is after i\n        table[k] = kth_sum\n\n        # Update the maximum sum of increasing subsequence if\n        # the current sum is greater than the current maximum\n        if kth_sum > max_sum:\n            max_sum = kth_sum\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k == n-1:\n        return max(a[index:k+1])\n    elif k > index:\n        return max(a[index:k+1]) + max_sum_increasing_subseq(a, n, k, n-1)\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n-1:\n        if a[index] < k:\n            return 0\n        else:\n            return a[index]\n    \n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    # Traverse through the array\n    for i in range(index+1, n):\n        if a[i] > k:\n            current_sum += a[i] - k\n        else:\n            current_sum += a[i]\n        \n        # Check if the current sum is greater than the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n    \n    # If k is not included in the increasing subsequence, then remove the last element from the current sum\n    if a[index] < k:\n        current_sum -= a[index]\n    \n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n\n    # Initialize the maximum sum of increasing subsequence as negative infinity\n    max_sum = float('-inf')\n\n    # Initialize the current prefix sum as the first element of the subsequence\n    prefix_sum = a[index]\n\n    # Initialize a list to store the indices of the subsequence\n    subseq = [index]\n\n    # Initialize a variable to keep track of the maximum sum of increasing subsequence ending at a given index\n    max_ending_sum = 0\n\n    # Loop through the rest of the array\n    for i in range(index + 1, n):\n        # Calculate the sum of the prefix from the previous element to the current element\n        prefix_sum = max(prefix_sum + a[i], a[i])\n\n        # If the current prefix sum is greater than the kth element, update the maximum sum of increasing subsequence ending at the previous element\n        if prefix_sum > k:\n            # Calculate the maximum sum of increasing subsequence ending at the previous element\n            ending_sum = max(max_ending_sum, prefix_sum - a[subseq[-1]])\n\n            # If the maximum sum of increasing subsequence ending at the previous element is greater than the current maximum sum, update the maximum sum and the subsequence\n            if ending_sum > max_sum:\n                max_sum = ending_sum\n                subseq = [i]\n            elif ending_sum == max_sum:\n                subseq.append(i)\n\n        else:\n            # If the current prefix sum is less than or equal to the kth element, update the maximum sum of increasing subsequence ending at the previous element\n            ending_sum = max(max_ending_sum, prefix_sum - a[subseq[-1]])\n\n            # If the maximum sum of increasing subsequence ending at the previous element is greater than the current maximum sum, update the maximum sum and the subsequence\n            if ending_sum > max_sum:\n                max_sum = ending_sum\n                subseq = [i]\n            elif ending_sum == max_sum:\n                subseq.append(i)\n\n    # If the maximum sum of increasing subsequence ending at the last element is greater than the current maximum sum, update the maximum sum and the subsequence\n    if max_ending_sum > max_sum:\n        max_sum = max_ending_sum\n        subseq = [n - 1]\n\n    return subseq, max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # create a new tuple to store the colon\n    colontuple = deepcopy(tuplex)\n    # split the tuple into rows and columns\n    rows = [tuplex[:i] for i in range(m, len(tuplex), n)]\n    # loop through each row\n    for row in rows:\n        # loop through each tuple in the row and change the colon value\n        for i in range(len(row)):\n            colontuple[row.index(row[i])] = \":\"\n    return colontuple"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n    for i in range(n):\n        new_tuplex = new_tuplex[:-1]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Return a tuple where each element is the n-th element of the input tuple\n    and the m-th element of the input tuple, respectively.\n\n    Parameters:\n    - tuplex (tuple): the input tuple\n    - m (int): the index of the first element to extract\n    - n (int): the index of the last element to extract\n\n    Returns:\n    - tuple: the desired colon of the input tuple\n    \"\"\"\n    # Make a copy of the input tuple to modify it\n    new_tuplex = deepcopy(tuplex)\n\n    # Extract the desired elements from the tuple\n    desired_elements = new_tuplex[m:n+1]\n\n    return tuple(desired_elements)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row_indices = list(range(m))\n    col_indices = list(range(n))\n    colon_tup = tuple(deepcopy(tuplex[row_indices[i]][col_indices[j]]) for i in range(m) for j in range(n))\n    return colon_tup"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Parameters:\n    -----------\n    tuplex: tuple\n        The tuple to get a colon of.\n    m: int\n        The number of columns in the colon.\n    n: int\n        The number of rows in the colon.\n\n    Returns:\n    --------\n    list\n        A list of tuples that are the m x n columns of the given tuple.\n    '''\n\n    # Copy the tuple to avoid modifying it\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create a list of tuples to hold the columns\n    columns = []\n\n    # Loop over the rows in the colon\n    for i in range(m):\n        # Create a list to hold the column\n        row = []\n        # Loop over the columns in the row\n        for j in range(n):\n            # Add the jth element of tuplex_copy to the list of columns\n            row.append(tuplex_copy[j])\n        # Add the column to the list of columns\n        columns.append(row)\n        # Remove the jth element of tuplex_copy\n        del tuplex_copy[j]\n\n    # Return the list of columns\n    return columns"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Returns a colon of a tuple in the form of a list.\n    \"\"\"\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i]))\n    for i in range(n):\n        col.append(deepcopy(tuplex[m+i]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # Set the values of the first n elements of the new tuple to the values of the input tuple\n    new_tuplex[:m] = tuplex[:m]\n    \n    # Return the new tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Make a copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n    # Get the length of the tuple\n    length = len(new_tuplex)\n    # Get the index of the last element in the tuple\n    last_index = length - 1\n    # Calculate the number of rows and columns\n    rows = length // m\n    cols = m\n    # Get the rows that the colon should start on\n    start_rows = last_index - rows * (cols - 1)\n    # If there are not enough elements for the specified rows and columns,\n    # adjust the start_rows to the last valid row\n    if start_rows < 0:\n        start_rows = 0\n    # Get the number of columns to be included in the colon\n    end_cols = last_index - start_rows + 1\n    # If there are not enough columns for the specified rows and columns,\n    # adjust the end_cols to the last valid column\n    if end_cols < m:\n        end_cols = m\n    # Get the indices of the elements to be included in the colon\n    indices = list(range(start_rows, last_index + 1, cols))\n    # Create a new colon tuple\n    colon_tuplex = tuple(new_tuplex[i:i+m] for i in indices)\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j] = (tuplex[i][j], 0)\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Calculate the number of elements in the tuple\n    num_elements = len(tuplex_copy)\n    # Initialize the output list\n    output = []\n    # Iterate through the range of elements in the tuple\n    for i in range(m, n):\n        # If the current element is not None, append it to the output list\n        if tuplex_copy[i] is not None:\n            output.append(tuplex_copy[i])\n        # If the current element is None and there are more elements left, append a None to the output list\n        elif i < num_elements - 1:\n            output.append(None)\n        # If the current element is None and there are no more elements left, stop iterating\n        else:\n            break\n    # Return the output list\n    return output"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    # Sort the input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a list to store the largest products\n    largest_products = []\n\n    # Loop through the sorted lists until we have N largest products\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)):\n            for k in range(len(nums2)):\n                for l in range(k+1, len(nums2)):\n                    # Calculate the product of the factors\n                    product = nums1[i] * nums2[k] * nums1[j] * nums2[l]\n                    # Add the product to the list of largest products\n                    if len(largest_products) < N:\n                        largest_products.append(product)\n                    # If we have N largest products, return them\n                    elif len(largest_products) == N:\n                        return largest_products\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1) < N or len(nums2) < N:\n        return None\n\n    nums1_sorted = sorted(nums1, reverse=True)[:N]\n    nums2_sorted = sorted(nums2, reverse=True)[:N]\n\n    largest_product1 = nums1_sorted[0] * nums1_sorted[1]\n    largest_product2 = nums2_sorted[0] * nums2_sorted[1]\n\n    for i in range(2, N):\n        num1 = nums1_sorted[i]\n        num2 = nums2_sorted[i]\n        product1 = num1 * largest_product1\n        product2 = num2 * largest_product2\n        largest_product1 = max(product1, largest_product1)\n        largest_product2 = max(product2, largest_product2)\n\n    return largest_product1 * largest_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort both lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    # Initialize variables to store the product of the selected numbers and the largest number in each list\n    product1 = 0\n    product2 = 0\n    max1 = nums1[0]\n    max2 = nums2[0]\n    # Iterate over the desired number of products and compare the products with the current maximums in the lists\n    for i in range(N):\n        if product1 * product2 > max1 * max2:\n            product1 *= nums1[i]\n            product2 *= nums2[i]\n            max1 = nums1[i]\n            max2 = nums2[i]\n        elif product1 * product2 < max1 * max2:\n            product1 /= nums1[i]\n            product2 /= nums2[i]\n            max1 = max(nums1[i], max1)\n            max2 = max(nums2[i], max2)\n    # Return the final product of the selected numbers\n    return product1 * product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2) or len(nums1)!= N:\n        raise ValueError(\"Both input lists should have the same length and equal to N.\")\n    \n    largest_products = [0] * N\n    for i in range(N):\n        if i < len(nums1):\n            factor1 = nums1[i]\n        else:\n            factor1 = 1\n        if i < len(nums2):\n            factor2 = nums2[i]\n        else:\n            factor2 = 1\n        \n        product = max(factor1, factor2)\n        largest_products[i] = product\n    \n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # initialize a list to store the products\n    products = []\n\n    # loop through each pair of factors\n    for i in range(N):\n        # loop through each pair of lists and compute the product of the pair\n        for j in range(len(nums1)):\n            for k in range(len(nums2)):\n                products.append(nums1[j] * nums2[k])\n\n        # sort the products in descending order\n        products.sort(reverse=True)\n\n        # select the top N products and multiply them together\n        selected_products = products[:N]\n        result = 1\n        for product in selected_products:\n            result *= product\n        products = []\n\n        # return the result\n        return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists must have the same length.\")\n\n    if N > len(nums1):\n        raise ValueError(\"The specified number of products cannot be greater than the length of the first list.\")\n\n    max_product1 = max_product2 = float('-inf')\n    max_product = 0\n\n    for i in range(len(nums1)):\n        for j in range(i + 1, min(N + 1, len(nums1))):\n            product = nums1[i] * nums1[j] * nums2[i] * nums2[j]\n            if product > max_product:\n                max_product1 = nums1[i]\n                max_product2 = nums1[j]\n                max_product = product\n\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Create an empty list to store the largest products\n    largest_products = []\n    \n    # Find the largest product of all pairs of elements from both lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i < j:\n                product = nums1[i] * nums2[j]\n                if len(largest_products) < N:\n                    largest_products.append(product)\n                elif product > largest_products[0]:\n                    largest_products[0] = product\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # find the product of the N largest numbers in both lists\n    product = 1\n    for i in range(N):\n        product *= max(nums1[i], nums2[i])\n\n    return product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the given lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize a list to store the largest products\n    largest_products = []\n    \n    # Iterate over the number of products required\n    for i in range(N):\n        # Calculate the largest product for the current combination of two factors\n        current_product = nums1[i] * nums2[i]\n        \n        # Check if the current product is greater than the current largest product\n        if current_product > largest_products[-1] or (i == N-1 and current_product == largest_products[-1]):\n            # If it is, add the current product to the list of largest products\n            largest_products.append(current_product)\n    \n    # Return the list of largest products\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # find the maximum value in each list\n    max_1 = max(nums1)\n    max_2 = max(nums2)\n\n    # initialize the maximum product list\n    max_product_list = [0] * N\n\n    # loop through the list of indices\n    for i in range(N):\n        # find the product of the two largest numbers\n        product = nums1[i] * nums2[i]\n\n        # compare the product with the current largest product\n        if product > max_product_list[i]:\n            # update the maximum product list\n            for j in range(N):\n                if j!= i:\n                    max_product_list[j] = max(nums1[j] * nums2[i], nums1[i] * nums2[j])\n\n    return max_product_list"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of these two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a Python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    This function takes in two numbers and returns the larger number.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters in the string.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list of characters\n    lst = list(str1)\n    # convert the list of characters to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number `n`.\n\n    :param n: The number to set the left most unset bit in.\n    :type n: int\n    :return: The modified number with the left most unset bit set to 1.\n    :rtype: int\n    \"\"\"\n    # Use bitwise AND to check if any bits are set to 1 in n\n    if n & (n - 1) == 0:\n        # n has no unset bits, set the leftmost bit to 1\n        return n | (1 << (n.bit_length() - 1))\n    else:\n        # n has unset bits, find the index of the first unset bit and set it to 1\n        index = n.bit_length() - 1\n        while n & (1 << index) == 0:\n            index -= 1\n        return n | (1 << index)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    while n & 1 == 0:\n        n >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the variable to hold the unset bit\n    unset_bit = 0\n\n    # Iterate through each bit in the binary representation of n\n    for i in range(31, -1, -1):\n        # Check if the ith bit is 1\n        if (n & (1 << i))!= 0:\n            # If it is, set the unset_bit variable to the ith bit and break out of the loop\n            unset_bit = 1 << i\n            break\n\n    # Return the unset_bit variable\n    return unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the leftmost unset bit in a given integer n.\n    It returns the modified integer.\n    \"\"\"\n    # Initialize the variable to store the result\n    result = 0\n    # Iterate over the set bits in the binary representation of n\n    for i in range(32):\n        # If the i-th bit is set, set the corresponding bit in the result variable\n        if (n & (1 << i))!= 0:\n            result |= 1 << i\n            # If all bits have been set, stop iterating\n            if result == (1 << 32):\n                break\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while (n & (1 << i)) == 0:\n        i += 1\n    n = n | (1 << i)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable with 0\n    result = 0\n    # Initialize the number of bits set in n\n    count = 0\n    \n    # Iterate over all the bits in the binary representation of n\n    while n:\n        # Check if the current bit is set to 1\n        if n & 1:\n            # Set the result to 1 and increment the count\n            result = 1\n            count += 1\n        # Shift the binary representation of n to the right\n        n >>= 1\n    \n    # If there are more unset bits than set bits, set the left most unset bit to 1\n    if count < n:\n        result = 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit of a given integer n.\n    '''\n\n    # Initialize the unset bit counter to 0\n    unset_bit_count = 0\n\n    # Initialize the mask variable to 1\n    mask = 1\n\n    # Iterate through the set bits of n\n    while n & mask == 0:\n        # Increment the unset bit counter\n        unset_bit_count += 1\n\n        # Shift the mask to the right by 1 bit\n        mask = mask << 1\n\n    # Set the left most unset bit\n    n = n | mask\n\n    # Print the number of unset bits\n    print(\"Number of unset bits:\", unset_bit_count)\n\n    # Return the modified number\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Set the left most unset bit in a given integer.\n    '''\n    # Initialize the bitwise AND operator with -1 to reset all bits\n    mask = -1\n    # Iterate through the binary representation of n and find the leftmost unset bit\n    for i in range(32):\n        # If the bit is unset, set it to 1 and continue iterating\n        if (n & mask) == 0:\n            n |= 1\n            break\n        # Shift the mask to the right by one bit\n        mask >>= 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer as input and returns the integer with \n    the left most unset bit set to 1.\n    '''\n    while n & 1 == 0:\n        n >>= 1 # shift right to remove the leftmost 0 bit\n    n |= 1 # set the leftmost 0 bit to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Initialize the bit count variable\n    count = 0\n\n    # Iterate through all bits of the integer\n    while n > 0:\n        # Increment the bit count by 1\n        count += 1\n\n        # Remove the least significant bit from the integer\n        n &= (n - 1)\n\n    # Set the left most unset bit to 1\n    left_most_unset_bit = 1 << (count - 1)\n\n    # Return the left most unset bit\n    return left_most_unset_bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two arguments, r and h, and calculates the volume of a cone.\n    '''\n\n    area = math.pi * r**2\n    volume = area * h / 3\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Calculate the volume of the cone using the formula V = 1/3 * r^2 * h\n    volume = (1/3) * (r ** 2) * (h)\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return (1/3) * math.pi * r ** 2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function finds the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # Formula for volume of a cone: V = pi * r^2 * h\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r**2) * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Args:\n    r (float): radius of the cone\n    h (float): height of the cone\n\n    Returns:\n    float: volume of the cone\n\n    \"\"\"\n    V = (1/3) * math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculates the volume of a cone given its radius and height.\n    \"\"\"\n    area = math.pi * r ** 2  # calculate the area of the cone\n    volume = area * h  # calculate the volume\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone given its radius and height.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n\n    Args:\n    r (float): radius of the base of the cone\n    h (float): height of the base of the cone\n\n    Returns:\n    float: volume of the cone\n    \"\"\"\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to a given integer n.\n    \"\"\"\n    # Initialize the highest power of 2 as 1\n    highest_power_of_2 = 1\n\n    # Loop through each power of 2 from 2 to the square root of n\n    for power_of_2 in range(2, int(n ** 0.5) + 1):\n        # If the current power of 2 is less than n, update the highest power of 2\n        if power_of_2 * power_of_2 <= n:\n            highest_power_of_2 = power_of_2\n\n    # Return the highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    if n < 1:\n        return \"Input must be a positive integer.\"\n    else:\n        i = 1\n        while i <= n:\n            if i <= 1:\n                return i\n            i <<= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n: \n        power <<= 1 \n    return power >> 1 "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Initialize highest power of 2 to 1\n    highest_power = 1\n    \n    # Loop through all possible powers of 2 up to n\n    for i in range(2, n+1):\n        \n        # If the power is a power of 2, update the highest power of 2\n        if i == 2**highest_power:\n            highest_power += 1\n            \n    # Return the highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # if i is a power of 2, return it\n        if i == 1 << i:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    i = 0\n    while n > 0:\n        n = n >> 1\n        i += 1\n    return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Check if n is already a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Set the initial value of power\n    power = 1\n\n    # Iterate through each bit in the binary representation of n from right to left\n    for bit in bin(n)[::-1]:\n        # If the bit is set to 1, multiply power by 2\n        if bit == '1':\n            power *= 2\n\n    # Return the highest power of 2 that is less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 0\n    while power * 2 <= n:\n        power += 1\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function returns the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # initialize variables\n    highest_power = 1\n    current_power = 1\n    \n    # loop through powers of 2 until current_power is greater than n\n    while current_power <= n:\n        highest_power = current_power\n        current_power = current_power << 1\n    \n    return highest_power"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    This function takes an integer n as input and returns the nth Lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    \"\"\"\n    This function takes an integer n as input and returns then'th Lucas number.\n    \"\"\"\n    # Initialize the first two Lucas numbers as 2 and 1 respectively\n    lucas1 = 2\n    lucas2 = 1\n    \n    # Loop n-1 times to find the nth Lucas number\n    for i in range(2, n):\n        # Find the nth Lucas number using the formula lucas(n+1) = 2*lucas(n) - lucas(n-1)\n        lucas3 = lucas1 + lucas2\n        # Update the values of lucas1 and lucas2 for the next iteration\n        lucas1 = lucas2\n        lucas2 = lucas3\n    \n    # Return the nth Lucas number\n    return lucas2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the nth lucas number.\n    '''\n\n    # Base case: if n is 0 or 1, return n \n    if n == 0 or n == 1: \n        return n \n\n    # Initialize the first two lucas numbers as 2 and 1 \n    lucas_1 = 2 \n    lucas_2 = 1 \n\n    # Loop through the remaining n-1 numbers \n    for i in range(2, n): \n        # Calculate the next lucas number by adding the previous two numbers \n        lucas_3 = lucas_1 + lucas_2 \n        # Update the previous two lucas numbers \n        lucas_1 = lucas_2 \n        lucas_2 = lucas_3 \n\n    # Return the nth lucas number \n    return lucas_2 "
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    # Recursive case\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return (find_lucas(n-1) + find_lucas(n-2))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas = find_lucas(n-1) + find_lucas(n-2)\n        return lucas"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(element) for element in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    # apply the format string to each element in the list\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n\n    Args:\n        list_ (list): A list of strings.\n        string (str): A format string to apply to all elements of the list.\n\n    Returns:\n        A list of formatted strings.\n    \"\"\"\n\n    formatted_list = [string.format(element) for element in list_]\n\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(lists)):\n        key = lists[i].pop(0)\n        value = lists[i]\n        if key not in result:\n            result[key] = {}\n        result[key].update(value)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1 (list): A list of strings.\n        l2 (list): A list of integers.\n        l3 (list): A list of float values.\n\n    Returns:\n        A nested dictionary containing the input lists.\n    \"\"\"\n    # Initialize an empty dictionary to store the output\n    output = {}\n\n    # Loop through each list and append each item to the corresponding key in the output dictionary\n    for i in range(len(l1)):\n        output[l1[i]] = l2[i]\n    for i in range(len(l1)):\n        output[l1[i]] = l3[i]\n\n    return output"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Initialize an empty dictionary to store the final result\n    final_dict = {}\n\n    # Iterate through each list and add the elements to the final dictionary\n    for i in range(len(l1)):\n        final_dict[l1[i]] = l2[i]\n        final_dict[l1[i]][l3[i]] = l3[i]\n\n    return final_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = []\n    for i in range(len(l1)):\n        dict_item = {}\n        dict_item[l1[i]] = l2[i]\n        dict_item[l3[i]] = l3[i]\n        dict_list.append(dict_item)\n    return dict_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*args):\n    '''\n    This function takes any number of lists as input and returns a nested dictionary.\n    Each sublist is interpreted as a key-value pair in the returned dictionary.\n    '''\n    result = {}\n    for lst in args:\n        for key, value in lst:\n            result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Combine all the lists into one list of dictionaries\n    result = [dict(zip(l1, x)) for x in zip(*[l2, l3])]\n    # Return the result as a single dictionary\n    return dict(result)"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary to store the nested dictionary\n    nested_dict = {}\n    \n    # Iterate through each list and append each item to the corresponding key in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create an empty dictionary\n    nested_dict = {}\n    \n    # iterate over the input lists and add values to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]] = l3[i]\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n\n    :param l1: A list of lists.\n    :param l2: A list of strings.\n    :param l3: A list of floats.\n    :return: A nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[j]\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1)!= len(l2) or len(l2)!= len(l3):\n        raise ValueError(\"All lists must have the same length\")\n    result = {}\n    for i in range(len(l1)):\n        key = f\"{l1[i]}_{l2[i]}_{l3[i]}\"\n        value = l1[i] + l2[i] + l3[i]\n        result[key] = value\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    if n == 1:\n        return n\n    \n    if n == 2:\n        return n*n\n    \n    max_sum = max(n, get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n    \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2)+get_max_sum(n//3)+get_max_sum(n//4)+get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    max_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    max_sum = get_max_sum(n//2) + n + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n    return max(max_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nprint(get_max_sum(5)) # output: 17"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    \n    elif n % 2 == 0:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Find the length of the list\n    length = len(input_list)\n\n    # Initialize the variable to store the maximum length\n    max_length = 0\n\n    # Iterate through the list and update max_length if a longer list is found\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n\n    # Return the list with the maximum length\n    return input_list[input_list.index(max(input_list, key=len))][::-1]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    for i in range(1, len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return input_list[input_list.index(max(input_list, key=len))]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    result = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = [item]\n        elif len(item) == max_length:\n            result.append(item)\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    longest_list = None\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            longest_list = item\n    \n    return longest_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    This function takes a list as input and returns the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n\n    for i in input_list:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_list = i\n\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty\n    if not unique_set:\n        return True\n    # if the set is not empty, it means there are duplicates\n    return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set from the tuple to remove duplicates\n    unique_set = set(test_tup)\n    # check if the set is empty, which means there are no duplicates\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Create a set to store unique values in the tuple\n    unique_values = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(unique_values) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to eliminate duplicates\n    test_set = set(test_tup)\n    # check if the set has 0 elements\n    if len(test_set) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Use a set to remove duplicates from the tuple\n    unique_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(unique_tup) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # convert the string to a set to remove duplicates\n    set_str1 = set(str1)\n    # find the first character in the set\n    first_char = next(iter(set_str1))\n    # return the first character as the result\n    return first_char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the character frequency\n    freq = {}\n\n    # iterate over the string\n    for char in str1:\n        # check if the character is already in the dictionary\n        if char in freq:\n            # if yes, increment the frequency count by 1\n            freq[char] += 1\n        else:\n            # if not, add the character to the dictionary with frequency count 1\n            freq[char] = 1\n\n    # find the first non-repeating character\n    for char, count in freq.items():\n        if count == 1:\n            return char\n\n    # if no character has frequency count 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # loop through the string and update the frequency of each character\n    for char in str1:\n        freq[char] = freq.get(char, 0) + 1\n    # find the first non-repeated character by looping through the string again and updating the frequency of each character\n    for char in str1:\n        if freq[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(string):\n    \"\"\"\n    This function will return the first non-repeating character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character\n    freq_dict = {}\n    \n    # iterate through the string and update the frequency dictionary\n    for char in string:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n    \n    # find the first non-repeating character\n    for char in string:\n        if freq_dict[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Find the first non-repeating character\n    first_non_repeating = ''\n    for char in freq:\n        if freq[char] == 1:\n            first_non_repeating = char\n            break\n\n    # Return the first non-repeating character\n    return first_non_repeating"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeating character in the string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # loop through each character in the string again, and return the first character with a count of 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.search(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    This function checks whether the given string starts and ends with the same character or not.\n    '''\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef check_char(string):\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    if re.search(pattern, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    result = re.search(pattern, string)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    # sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # calculate the median\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2-1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n\n    # Calculate the median\n    median = sorted_list[len(sorted_list)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    # Get the middle two numbers\n    mid_nums = sorted_nums[1:-1]\n    # Calculate the median\n    median = sum(mid_nums) / len(mid_nums)\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n    \n    # Calculate the median based on the length of the sorted list\n    if len(sorted_numbers) % 2 == 0:\n        # If the length of the list is even, the median is the average of the middle two numbers\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2-1])/2\n    else:\n        # If the length of the list is odd, the median is the middle number\n        median = sorted_numbers[len(sorted_numbers)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Sorting the numbers in ascending order\n    numbers = [a,b,c]\n    numbers.sort()\n\n    # Checking if the length of the array is odd or even\n    if len(numbers)%2 == 0:\n        # If it is even, the median is the average of the two middle numbers\n        middle1 = numbers[len(numbers)//2-1]\n        middle2 = numbers[len(numbers)//2]\n        median = (middle1+middle2)/2\n        return median\n    else:\n        # If it is odd, the median is the middle number\n        middle = numbers[len(numbers)//2]\n        return middle"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    # Sort the three numbers in ascending order\n    sorted_list = sorted([a, b, c])\n    # Find the middle index of the sorted list\n    mid_index = len(sorted_list) // 2\n    # If the length of the list is odd, the median is the middle element\n    if len(sorted_list) % 2 == 1:\n        return sorted_list[mid_index]\n    # If the length of the list is even, the median is the average of the two middle elements\n    else:\n        return (sorted_list[mid_index-1] + sorted_list[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a, b, c])\n\n    # Determine if the third number is greater than the first two\n    if nums[2] > nums[0] + nums[1]:\n        # The third number is greater than the average of the first and second numbers\n        return nums[2]\n    else:\n        # The third number is less than the average of the first and second numbers\n        return nums[1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    numbers = sorted([a, b, c])\n\n    # Find the middle index\n    mid = len(numbers) // 2\n\n    # Check if the length of the list is odd or even\n    if len(numbers) % 2 == 0:\n        # Return the average of the middle two numbers\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        # Return the middle number\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits_sum = sum(int(digit) for digit in str(num))\n        result.append(digits_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        temp = 0\n        while num > 0:\n            temp += num % 10\n            num //= 10\n        total += temp\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += sum_digits(num)\n    return sum\n\n\ndef sum_digits(num):\n    '''\n    Write a function to compute the sum of digits of a given number.\n    '''\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(map(int, str(num)))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(digit) for digit in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += sum([int(d) for d in str(num)])\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Create an empty list to store the sum of digits\n    digit_sums = []\n    \n    # Iterate through the numbers in the list\n    for num in nums:\n        # Convert the number to a string and split it into a list of digits\n        num_digits = [int(digit) for digit in str(num)]\n        # Compute the sum of the digits in the list\n        digit_sum = sum(num_digits)\n        # Append the sum to the list of sums of digits\n        digit_sums.append(digit_sum)\n    \n    # Return the list of sums of digits\n    return digit_sums"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = 0\n    for num in nums:\n        sum_of_digits += sum(int(digit) for digit in str(num))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        sum_of_digits.append(sum(digits))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize a variable to store the sum of digits\n    total_sum = 0\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string and then to a list of digits\n        digits = list(str(num))\n        # Convert the list of digits to a single integer\n        digit_sum = sum(int(d) for d in digits)\n        # Add the digit sum to the total sum\n        total_sum += digit_sum\n    \n    # Return the total sum of digits\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result = xor_result ^ test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the length of the input tuples\n    tup1_len = len(test_tup1)\n    tup2_len = len(test_tup2)\n    # compare the lengths of the input tuples\n    if tup1_len!= tup2_len:\n        # if they are not the same length, raise an error message\n        raise ValueError(\"The input tuples must have the same length!\")\n    # create a new empty list to store the result of the bitwise xor operation\n    result_list = []\n    # iterate through the input tuples\n    for i in range(tup1_len):\n        # perform the bitwise xor operation on the i-th element of each tuple\n        xor_result = test_tup1[i] ^ test_tup2[i]\n        # add the result to the result list\n        result_list.append(xor_result)\n    # return the result list as the result of the function\n    return result_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple with the first element of each tuple\n    result_tup = (test_tup1[0] ^ test_tup2[0],)\n    # Loop through the remaining elements of the first tuple and perform the bitwise xor operation with the current element of the result tuple\n    for i in range(1, len(test_tup1)):\n        result_tup += (test_tup1[i] ^ result_tup[-1],)\n    # Loop through the remaining elements of the second tuple and perform the bitwise xor operation with the current element of the result tuple\n    for i in range(1, len(test_tup2)):\n        result_tup += (test_tup2[i] ^ result_tup[-1],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Calculate the length of the tuples\n    length = len(test_tup1) if len(test_tup1) > len(test_tup2) else len(test_tup2)\n\n    # Initialize the result tuple\n    result = (0,) * length\n\n    # Perform the bitwise xor operation on each pair of elements in the tuples\n    for i in range(length):\n        result[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize a variable to store the result\n    result = []\n    # Loop through each element of the tuples\n    for i in range(len(test_tup1)):\n        # Perform the bitwise xor operation and append the result to the result list\n        result.append(test_tup1[i] ^ test_tup2[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements.\")\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize a tuple with zeros to store the result\n    result_tup = (0,) * len(test_tup1)\n    \n    # loop through each element in both tuples and perform bitwise xor\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Loop through each element in the tuple and perform the bitwise xor operation on them\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] ^ test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for i in test_list:\n        freq_dict[i] = freq_dict.get(i, 0) + 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    This function takes a list of tuples as input and returns the number of unique tuples in the list.\n    \"\"\"\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    freq_dict = {}\n\n    for item in test_list:\n        for tup in item:\n            tup_str = str(tup)\n            if tup_str in freq_dict:\n                freq_dict[tup_str] += 1\n            else:\n                freq_dict[tup_str] = 1\n\n    return freq_dict"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a set of tuples from the list\n    set_of_tuples = set(test_list)\n    # return the length of the set\n    return len(set_of_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    # Create an empty dictionary to store the frequency of tuples\n    freq_dict = {}\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup in freq_dict:\n            # Increment the count of the tuple\n            freq_dict[tup] += 1\n        else:\n            # Add the tuple and its count to the dictionary\n            freq_dict[tup] = 1\n    # Calculate the total number of unique tuples\n    total_freq = sum(freq_dict.values())\n    # Return the total number of unique tuples\n    return total_freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if (item, ) not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # check if both input tuples have equal number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must have equal number of elements.\")\n        return None\n    # create a new tuple with elements of both input tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both input tuples have equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have the same length.\")\n        return None\n    \n    # Initialize an empty result tuple\n    result_tup = ()\n    \n    # Loop through each element of both input tuples\n    for i in range(len(test_tup1)):\n        # Add the corresponding element of both tuples\n        result_tup += (test_tup1[i] + test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n\n    Args:\n    test_tup1 (tuple): A tuple of tuples.\n    test_tup2 (tuple): A tuple of tuples.\n\n    Returns:\n    tuple: A new tuple with elements from the two input tuples after performing index wise addition.\n    \"\"\"\n\n    result_tup = ()\n\n    # Loop through each element of the first tuple and add it to the result tuple\n    for tup1_elem in test_tup1:\n        # Loop through each element of the second tuple and add it to the result tuple\n        for tup2_elem in test_tup2:\n            # Append the sum of the two elements to the result tuple\n            result_tup += (tup1_elem + tup2_elem,)\n\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant nested tuple\n    result_tup = []\n    # Loop through each element of the first nested tuple\n    for i in range(len(test_tup1)):\n        # Loop through each element of the second nested tuple\n        for j in range(len(test_tup2[0])):\n            # Add the corresponding elements of the two nested tuples and store in the result list\n            result_tup.append(test_tup1[i] + test_tup2[i][j])\n    # Return the result list as the final output\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Check if both tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must be of equal length.\")\n        return\n\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Iterate over the first tuple and add the corresponding element to the result list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] + test_tup2[i])\n\n    # Convert the result list to a tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tuple = []\n    for i in range(len(test_tup1)):\n        result_tuple.append(test_tup1[i] + test_tup2[i])\n    return result_tuple"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize an empty list to store the resultant tuple\n    result = []\n    # Check if both the input tuples have the same length\n    if len(test_tup1) == len(test_tup2):\n        # Iterate through each element of the input tuple\n        for i in range(len(test_tup1)):\n            # Add the corresponding element of the input tuple\n            result.append(test_tup1[i] + test_tup2[i])\n        # Return the resultant tuple\n        return tuple(result)\n    else:\n        # If the length of the input tuples is not equal, raise an exception\n        raise ValueError(\"The length of the input tuples should be equal\")"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result_tup = []\n    \n    # iterate through the first tuple\n    for i in range(len(test_tup1)):\n        # add the i-th element of both tuples and append to the result list\n        result_tup.append(test_tup1[i] + test_tup2[i])\n        \n    return tuple(result_tup)"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a,b):\n    '''\n    This function takes two numbers as inputs and returns the minimum of the two.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n\n    # Check if the tuple exists\n    if not isinstance(tuplex, tuple):\n        return \"The given argument is not a tuple.\"\n\n    # Check if the element exists in the tuple\n    if element in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Check if an element exists in a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to search in.\n    tuple1 (tuple): The element to check for.\n\n    Returns:\n    bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            print(item, \"exists in tuple1\")\n        else:\n            print(item, \"does not exist in tuple1\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if it has an odd parity, and False otherwise.\n    \"\"\"\n    # Check if the number is even or zero\n    if x % 2 == 0:\n        return False\n    # If the number is odd, check if it is a multiple of 3\n    elif x % 3 == 0:\n        return True\n    # If none of the above conditions are met, return False\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        print(\"The number\", x, \"is even.\") \n        return False\n    else: \n        print(\"The number\", x, \"is odd.\") \n        return True\n\nnum = int(input(\"Enter a number: \")) \nresult = find_Parity(num) \nif result: \n    print(\"The parity of the number\", num, \"is odd.\") \nelse: \n    print(\"The parity of the number\", num, \"is even.\") \n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd or even.\n    \"\"\"\n    if x % 2 == 0: # Even number\n        print(\"Even number\")\n    else: # Odd number\n        print(\"Odd number\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2!=0: #if x is even\n        return True #return True because parity of even number is odd\n    else:\n        return False #return False because parity of odd number is even"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return \"The parity of the number is even.\"\n    else:\n        return \"The parity of the number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the number to a string\n    num_str = str(n)\n    # Get the length of the number string\n    num_len = len(num_str)\n    # Initialize an empty string to store the digits\n    digit_str = ''\n    # Iterate over the digits of the number string\n    for i in range(num_len):\n        # Get the current digit\n        digit = num_str[i]\n        # Check if the digit is greater than 0\n        if int(digit) > 0:\n            # Add the digit to the digit string\n            digit_str += digit\n        # Otherwise, check if the digit is 0\n        else:\n            # Check if the number has been fully rearranged\n            if len(digit_str) == 1 and digit_str[0] == '0':\n                # If yes, return 0\n                return 0\n            # Check if the next digit is greater than 0\n            elif len(digit_str) < 2 and int(digit_str) > 0:\n                # If yes, append the next digit to the digit string\n                digit_str += str(int(digit_str) + 1)\n            # If the number has not been fully rearranged, return the original number\n            else:\n                return n\n    # If the number has been fully rearranged, create the next bigger number\n    if len(digit_str) == 1:\n        # Return 10*n + int(digit_str)\n        return 10*n + int(digit_str)\n    elif len(digit_str) == 2:\n        # Return 100*n + int(digit_str)\n        return 100*n + int(digit_str)\n    elif len(digit_str) == 3:\n        # Return 1000*n + int(digit_str)\n        return 1000*n + int(digit_str)\n    elif len(digit_str) == 4:\n        # Return 10000*n + int(digit_str)\n        return 10000*n + int(digit_str)\n    else:\n        # Return the original number\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Initialize the maximum number\n    max_num = 0\n\n    # Loop through each digit of the input number\n    for digit in n_str:\n\n        # Initialize the new number with the current digit\n        new_num = digit\n\n        # Loop through each digit of the input number\n        for i in n_str:\n\n            # If the current digit is smaller than the i-th digit, add the i-th digit to the new number\n            if digit < i:\n                new_num += i\n\n        # Check if the new number is greater than the maximum number\n        if int(new_num) > max_num:\n            max_num = int(new_num)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    digits = [int(digit) for digit in num_str]\n    num_list = [digits[i] for i in range(len(digits)-1, -1, -1)]\n    num_str = ''.join(str(num) for num in num_list)\n    next_bigger_num = int(num_str) + 1\n    return next_bigger_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Create a list of all possible digits from 0 to 9\n    digits = [str(i) for i in range(10)]\n    # Create a list of all possible digits from 0 to 9 in reverse order\n    digits_reversed = digits[::-1]\n    # Check if the input number has a non-zero last digit\n    if n >= 10:\n        # Check if the last digit is even\n        if int(str(n)[-1]) % 2 == 0:\n            # If the last digit is even, reverse the digits and add a 0 at the end\n            n = int(str(n)[::-1]) + 0\n        else:\n            # If the last digit is odd, reverse the digits and subtract a 0 from the end\n            n = int(str(n)[::-1]) - 0\n    # Check if the input number has a non-zero first digit\n    if n >= 10:\n        # Check if the first digit is even\n        if int(str(n)[0]) % 2 == 0:\n            # If the first digit is even, reverse the digits and add a 0 at the beginning\n            n = 0 + int(str(n)[1:])\n        else:\n            # If the first digit is odd, reverse the digits and subtract a 0 from the beginning\n            n = 0 - int(str(n)[1:])\n    # Check if the input number has a non-zero last digit\n    if n >= 10:\n        # Check if the last digit is even\n        if int(str(n)[-1]) % 2 == 0:\n            # If the last digit is even, reverse the digits and add a 0 at the end\n            n = int(str(n)[::-1]) + 0\n        else:\n            # If the last digit is odd, reverse the digits and subtract a 0 from the end\n            n = int(str(n)[::-1]) - 0\n    # Check if the input number has a non-zero first digit\n    if n >= 10:\n        # Check if the first digit is even\n        if int(str(n)[0]) % 2 == 0:\n            # If the first digit is even, reverse the digits and add a 0 at the beginning\n            n = 0 + int(str(n)[1:])\n        else:\n            # If the first digit is odd, reverse the digits and subtract a 0 from the beginning\n            n = 0 - int(str(n)[1:])\n    # Check if the input number has a non-zero last digit\n    if n >= 10:\n        # Check if the last digit is even\n        if int(str(n)[-1]) % 2 == 0:\n            # If the last digit is even, reverse the digits and add a 0 at the end\n            n = int(str(n)[::-1]) + 0\n        else:\n            # If the last digit is odd, reverse the digits and subtract a 0 from the end\n            n = int(str(n)[::-1]) - 0\n    # Check if the input number has a non-zero first digit\n    if n >= 10:\n        # Check if the first digit is even\n        if int(str(n)[0]) % 2 == 0:\n            # If the first digit is even, reverse the digits and add a 0 at the beginning\n            n = 0 + int(str(n)[1:])\n        else:\n            # If the first digit is odd, reverse the digits and subtract a 0 from the beginning\n            n = 0 - int(str(n)[1:])\n    # Check if the input number has a non-zero last digit\n    if n >= 10:\n        # Check if the last digit is even\n        if int(str(n)[-1]) % 2 == 0:\n            # If the last digit is even, reverse the digits and add a 0 at the end\n            n = int(str(n)[::-1]) + 0\n        else:\n            # If the last digit is odd, reverse the digits and subtract a 0 from the end\n            n = int(str(n)[::-1]) - 0\n    # Check if the input number has a non-zero first digit\n    if n >= 10:\n        # Check if the first digit is even\n        if int(str(n)[0]) % 2 == 0:\n            # If the first digit is even, reverse the digits and add a 0 at the beginning\n            n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a string representation of the input number\n    str_n = str(n)\n    # Initialize the result string to the last digit of the input number\n    result = str_n[-1]\n    # Loop through the digits of the input number from right to left\n    for i in range(len(str_n)-2, -1, -1):\n        # Initialize the current digit and its index\n        current_digit = str_n[i]\n        index = i\n        # Loop through the digits of the input number from left to right\n        for j in range(i+1, len(str_n)):\n            # If the current digit is greater than the jth digit, swap them and update the index\n            if int(current_digit) > int(str_n[j]):\n                current_digit, str_n[j] = str_n[j], current_digit\n                index = j\n        # If the current digit is not greater than any digit, return the result\n        if index == i:\n            return result\n        # Otherwise, append the current digit to the result string\n        else:\n            result += current_digit\n    # If the input number is already the maximum, return the result string\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the number to a string and remove any leading zeros\n    num_str = str(n)[1:]\n    # get the length of the number\n    num_len = len(num_str)\n    # initialize the result string with a '0'\n    res_str = '0'\n    # loop through each digit in the number\n    for i in range(num_len):\n        # if the current digit is 9, replace it with 0 and append the last digit of the number to the result\n        if num_str[i] == '9':\n            res_str += num_str[num_len-1]\n            num_str = num_str[:num_len-1]\n        # if the current digit is greater than 9, replace it with its next larger digit\n        elif int(num_str[i]) > 9:\n            res_str += str(int(num_str[i])+1)\n            num_str = num_str[:i] + str(int(num_str[i])+1) + num_str[i+1:]\n        # otherwise, move on to the next digit in the number\n        else:\n            num_str = num_str[:i] + num_str[i+1:]\n    # convert the result string back to an integer and return it\n    return int(res_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    while True:\n        # Convert the given number to a string\n        s = str(n)\n        # Check if the first digit is 0\n        if s[0] == '0':\n            # If yes, convert the number to a list of digits and start over\n            n = int(''.join(s))\n        else:\n            # If not, break out of the loop and move on to the next digit\n            break\n\n    # Check if the first digit is 9\n    if int(s[0]) == 9:\n        # If yes, we are done, return 1\n        return 1\n    else:\n        # If not, calculate the next bigger number by rearranging the digits of the given number\n        n = int(str(int(s[0])+1) + s[1:])\n        # Check if the new number is greater than the given number\n        if n > n:\n            # If yes, return the new number\n            return n\n        else:\n            # If not, return the next bigger number\n            return rearrange_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_number = int(''.join(digits))\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Convert the given number into a string\n    num_str = str(n)\n\n    # Initialize the index of the last digit of the original number\n    last_index = len(num_str) - 1\n\n    # Initialize the result string\n    result = ''\n\n    # Iterate through the digits of the original number\n    for i in range(last_index, -1, -1):\n        # Append the digit at the current index to the result string\n        result += num_str[i]\n\n    # Convert the result string into an integer\n    result = int(result)\n\n    # Return the next bigger number\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Split the given number into digits\n    digits = [int(d) for d in str(n)]\n    \n    # Reverse the digits and add 1 to the first digit\n    digits.reverse()\n    digits[0] += 1\n    \n    # Convert the digits back to a string and return it\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = [(-nums1[0], 0)]\n    heap2 = [(-nums2[0], 0)]\n\n    for i in range(1, len(nums1)):\n        heapq.heapify(heap1)\n        while len(heap1) > 0 and heap1[0][0] > nums1[i]:\n            heapq.heappop(heap1)\n\n        heapq.heappush(heap1, (-nums1[i], i))\n\n    for j in range(1, len(nums2)):\n        heapq.heapify(heap2)\n        while len(heap2) > 0 and heap2[0][0] > nums2[j]:\n            heapq.heappop(heap2)\n\n        heapq.heappush(heap2, (-nums2[j], j))\n\n    result = []\n    while len(result) < k and len(heap1) > 0 and len(heap2) > 0:\n        dist1, i1 = heapq.heappop(heap1)\n        dist2, j1 = heapq.heappop(heap2)\n\n        if len(result) < k:\n            result.append((nums1[i1], nums2[j1]))\n            heapq.heappush(heap1, (-nums1[i1], i1))\n            heapq.heappush(heap2, (-nums2[j1], j1))\n\n        if i1 > 0:\n            heapq.heappush(heap1, (-nums1[i1 - 1], i1 - 1))\n        if j1 > 0:\n            heapq.heappush(heap2, (-nums2[j1 - 1], j1 - 1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Use a min heap to keep track of the smallest k pairs\n    min_heap = []\n\n    # Create a dictionary to store the indices of the first array elements\n    first_index = {}\n\n    # Initialize the first array element index as 0\n    first_index[0] = 0\n\n    # Use a dictionary to store the indices of the second array elements\n    second_index = {}\n\n    # Initialize the second array element index as 0\n    second_index[0] = 0\n\n    # Loop through the first array\n    for i in range(len(nums1)):\n        # Loop through the second array\n        for j in range(len(nums2)):\n            # If the current element of the first array is less than the current element of the second array\n            if nums1[i] + nums2[j] < nums1[first_index[i]] + nums2[second_index[j]]:\n                # If the current element of the first array is already in the min heap\n                if nums1[i] in first_index and first_index[nums1[i]] > 0:\n                    # If the current element of the first array is already in the min heap and its index is greater than 0\n                    if nums1[i] in first_index and first_index[nums1[i]] > 0:\n                        # If the current element of the second array is already in the min heap\n                        if nums2[j] in second_index and second_index[nums2[j]] > 0:\n                            # If the current element of the second array is already in the min heap and its index is greater than 0\n                            # Add the current element of the first array and the current element of the second array to the min heap\n                            heapq.heappush(min_heap, (nums1[i], nums2[j]))\n                # If the current element of the first array is not in the min heap\n                else:\n                    # Add the current element of the first array to the min heap\n                    heapq.heappush(min_heap, (nums1[i], None))\n\n                # Update the first array element index for the next iteration\n                first_index[i+1] = j\n            # If the current element of the first array is greater than or equal to the current element of the second array\n            else:\n                # If the current element of the second array is already in the min heap\n                if nums2[j] in second_index and second_index[nums2[j]] > 0:\n                    # If the current element of the second array is already in the min heap and its index is greater than 0\n                    # Add the current element of the second array to the min heap\n                    heapq.heappush(min_heap, (None, nums2[j]))\n                # If the current element of the second array is not in the min heap\n                else:\n                    # Add the current element of the second array to the min heap\n                    heapq.heappush(min_heap, (None, nums2[j]))\n\n                # Update the second array element index for the next iteration\n                second_index[j+1] = i\n\n    # Return the k smallest pairs from the min heap\n    return [pair for pair in min_heap[:k]]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    Args:\n    nums1: List of integers\n    nums2: List of integers\n    k: Integer\n\n    Returns:\n    List of tuples (int, int): A list of tuples of size k, where each tuple contains two elements (an integer from the first array and an integer from the second array) and is the k-th smallest pair.\n\n    Example:\n    k_smallest_pairs([1, 7, 11], [2, 4, 6], 3)\n    Output: [(1, 2), (1, 4), (1, 6), (7, 2), (7, 4), (7, 6)]\n    \"\"\"\n\n    # First, create a min heap of size k\n    min_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(min_heap, (-num1 - num2, (num1, num2)))\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # Create a list to store the pairs\n    pairs = []\n\n    # Iterate over the min heap and add the k smallest pairs to the list\n    while min_heap:\n        priority, pair = heapq.heappop(min_heap)\n        pairs.append(pair)\n        if len(pairs) == k:\n            break\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap of size k to store the k smallest elements from nums1 and nums2\n    heap = []\n    for num in nums1:\n        heapq.heappush(heap, -num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n\n    for num in nums2:\n        if len(heap) > k:\n            heapq.heappop(heap)\n        heapq.heappush(heap, -num)\n\n        # Extract the k smallest elements from both arrays and find the sum of their difference\n        res = [heapq.heappop(heap), -heapq.heappop(heap)]\n        return res"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    result = []\n\n    for num1 in nums1:\n        heapq.heappush(min_heap, (num1, 0))\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n\n    for num2 in nums2:\n        if len(min_heap) > k:\n            continue\n\n        if not min_heap:\n            heapq.heappush(min_heap, (num2, 0))\n            continue\n\n        if num2 <= min_heap[0][0]:\n            heapq.heappush(min_heap, (num2, 0))\n        elif num2 > min_heap[0][0]:\n            if not min_heap[0][1]:\n                heapq.heappush(min_heap, (num2, 0))\n            else:\n                heapq.heappush(min_heap, (-num2, min_heap[0][1] + 1))\n\n    while min_heap:\n        result.append(min_heap[0])\n        if min_heap[0][1] == 0:\n            heapq.heappop(min_heap)\n        else:\n            heapq.heappop(min_heap)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    This function takes three arguments: the first array, the second array, and the number of pairs required.\n    It returns a list of tuples containing pairs of elements from the first and second arrays, ordered by their sum.\n    \"\"\"\n    # Initialize two heaps - one for each array\n    min_heap1 = []\n    min_heap2 = []\n\n    # Fill the heaps with the first elements from the arrays\n    for num in nums1:\n        heapq.heappush(min_heap1, num)\n        heapq.heappush(min_heap2, -heapq.heappop(min_heap1))\n\n    # Initialize the result list\n    result = []\n\n    # Fill the result list with the k smallest pairs\n    for _ in range(k):\n        pair1 = (-heapq.heappop(min_heap1), -heapq.heappop(min_heap2))\n        pair2 = (-heapq.heappop(min_heap2), -heapq.heappop(min_heap1))\n        result.append((pair1[0], pair2[0]))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # initialize a min heap of size k\n    min_heap = []\n\n    # loop through each element in nums1\n    for num1 in nums1:\n        # loop through each element in nums2\n        for num2 in nums2:\n            # add the sum of the two elements to the heap\n            heapq.heappush(min_heap, num1 + num2)\n\n            # if the size of the min heap becomes greater than k, remove the minimum element\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n\n    # return the k smallest pairs\n    return min_heap[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if not heap or heap[0][1] > nums1[i]:\n                heapq.heappush(heap, (nums1[i] + nums2[j], (i, j)))\n            elif not pairs or pairs[-1][0][1] < nums1[i]:\n                heapq.heappushpop(heap, (nums1[i] + nums2[j], (i, j)))\n            if len(pairs) < k:\n                pairs.append((nums1[i], nums2[j]))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\n    :param nums1: List of integers representing the first array\n    :param nums2: List of integers representing the second array\n    :param k: Integer representing the number of pairs we want to find\n    :return: A list of tuples representing the k smallest pairs\n    \"\"\"\n    # Create a min heap to store the pairs\n    min_heap = []\n    \n    # Iterate through the first array\n    for num1 in nums1:\n        # Create a set to store the elements which are smaller than the current number in the first array\n        elements = set()\n        # Iterate through the second array\n        for num2 in nums2:\n            # Check if the sum of the current number in the first array and the current number in the second array is smaller than or equal to k\n            if num1 + num2 <= k:\n                # Add the pair to the min heap\n                heapq.heappush(min_heap, (num1, num2))\n                # If the number of pairs in the min heap is greater than or equal to k, then remove the smallest pair from the heap\n                if len(min_heap) == k:\n                    num1_min, num2_min = heapq.heappop(min_heap)\n                    elements.add(num1_min)\n                    elements.add(num2_min)\n    \n    # Extract the k smallest pairs from the min heap and return them\n    return [pair for pair in min_heap if pair[0] in elements and pair[1] in elements]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    # Loop through the second array\n    for num in nums2:\n        # If the size of min heap is less than k, append the number to the heap\n        if len(min_heap) < k:\n            heapq.heappush(min_heap, num)\n        # If the size of min heap is equal to k, compare the current element with the minimum element of the heap and pop the minimum element if they are not equal\n        elif len(min_heap) == k:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n        # If the size of min heap is greater than k, compare the current element with the maximum element of the heap and pop the maximum element if they are not equal\n        else:\n            if num < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    # Extract the k smallest elements from the heap and return them as a list\n    return heapq.nsmallest(k, min_heap)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # initialize minimum product to a large number\n    min_product = float('inf')\n    \n    # iterate through the list of tuples\n    for i in range(len(list1)):\n        # iterate through the list of tuples again\n        for j in range(i+1, len(list1)):\n            # calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # update the minimum product if the current product is smaller\n            if product < min_product:\n                min_product = product\n                \n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize minimum and product variables to positive infinity\n    min_product = float('inf')\n    product = 1\n\n    # Iterate through the list of tuples\n    for tup in list1:\n        # Calculate the product of the current tuple\n        temp_product = 1\n        for num in tup:\n            temp_product *= num\n\n        # Update minimum product and product variables if necessary\n        if temp_product < min_product:\n            min_product = temp_product\n            product = temp_product\n        elif temp_product == min_product:\n            product *= temp_product\n\n    # Return the minimum product of all tuples\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Define a function to multiply two lists\n    def multiply_lists(list1, list2):\n        result = []\n        for i in range(len(list1)):\n            result.append(list1[i] * list2[i])\n        return result\n\n    # Initialize variables to store the minimum product and the list of pairs\n    min_product = float('inf')\n    pairs = []\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Compute the product of the two tuples\n            product = multiply_lists(list1[i], list1[j])\n\n            # Check if the product is smaller than the current minimum product\n            if product < min_product:\n                min_product = product\n                pairs = [(list1[i], list1[j])]\n            elif product == min_product:\n                pairs.append((list1[i], list1[j]))\n\n    # Return the minimum product and the list of pairs\n    return min_product, pairs"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Calculate the minimum product of any two tuples\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Find the minimum value of a tuple in the list\n    min_val = min(list1, key=lambda x: (sum(x), x))\n\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # Iterate over all pairs of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and the minimum value of the tuple\n            product = (list1[i][0] * list1[j][1], list1[j][0] * list1[i][1])\n            # Update the minimum product if the new product is smaller than the current minimum\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    min_product = float('inf')\n    product1 = 1\n    product2 = 1\n\n    # loop through the list of tuples\n    for tup in list1:\n        # calculate the product of the first tuple\n        product1 *= tup[0]\n        # calculate the product of the second tuple\n        product2 *= tup[1]\n        # calculate the product of the first and second tuple\n        product = product1 * product2\n        # check if the product is less than the minimum product so far\n        if product < min_product:\n            min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            # Update the minimum product if the product is less than the current minimum\n            min_product = min(min_product, product)\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    min_product = list1[0]\n    for i in range(1, len(list1)):\n        product = list1[i][0] * list1[i][1]\n        if product < min_product:\n            min_product = product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value in the list.\n    '''\n    # initialize the minimum value as the first element of the list\n    min_val = listval[0]\n    # loop through the list and update the minimum value if a smaller value is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:  # check if the list is empty\n        return None\n    \n    minval = listval[0]  # initialize the minimum value as the first element of the list\n    \n    for element in listval[1:]:  # iterate over the remaining elements of the list\n        if element < minval:  # check if the current element is smaller than the minimum value\n            minval = element  # update the minimum value if necessary\n    \n    return minval  # return the minimum value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to the first element of the list\n    minimum = listval[0]\n    # loop through the rest of the list and update minimum if an element is smaller\n    for i in range(1, len(listval)):\n        if listval[i] < minimum:\n            minimum = listval[i]\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        print(\"The list is empty!\")\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        minval = listval[0]\n        for i in listval:\n            if i < minval:\n                minval = i\n        return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    \n    # Loop through the remaining values in the list\n    for i in range(1, len(listval)):\n        # Check if the current value is less than the minimum value\n        if listval[i] < min_val:\n            # If it is, update the minimum value\n            min_val = listval[i]\n    \n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in listval:\n        if i < min_value:\n            min_value = i\n    return min_value"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Iterate through the rest of the list and update the minimum value if a smaller element is found\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize min_val to the first element of the list\n    min_val = listval[0]\n    # iterate over the rest of the list\n    for i in range(1, len(listval)):\n        # check if the current element is smaller than min_val\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_value = float('inf')\n    for value in listval:\n        if value < min_value:\n            min_value = value\n    return min_value"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert to lower case\n    word = word.lower()\n    # Split into words using regex\n    words = re.findall(r'\\w+', word)\n    # Capitalize the first letter of each word\n    words = [''.join(w.title()) for w in words]\n    # Join the words together into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub(r'([a-z])([A-Z])', r'\\1_\\2', word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel += word[i].lower()\n        else:\n            camel += word[i]\n        if i < len(word) - 1 and word[i+1].isupper():\n            camel += \"_\"\n    return camel"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    return ''.join(word.title() for word in word.split('_'))"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n    # Convert the first letter of each word to uppercase and join them with an underscore\n    return words[0].lower() + ''.join(word.capitalize() for word in words[1:])"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words using snake case\n    words = re.findall(r'_(.?)', word)\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words into a camel case string\n    camel_case = ''.join(words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the snake case word to camel case word\n    camel_case = re.sub(r'([a-z0-9])([A-Z])', r'\\1_\\2', word).lower()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = re.compile(r'(?<!^)(?=[A-Z])')\n    camel_case = pattern.sub('', word)\n    camel_case = camel_case.title()\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub('(_\\w)', lambda x: x.group(1).upper(), word)\n    # capitalize first letter\n    return camel_case[0].upper() + camel_case[1:]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        l (list): A list of integers.\n\n    Returns:\n        list: A list of even numbers from the original list.\n    \"\"\"\n    even_list = []\n    for num in l:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    This function takes in a list of tuples and an integer n as input.\n    It returns the nth element of the list of tuples.\n    '''\n    return lst[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n\n    Args:\n        list1 (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        The nth element of the list1, if it exists. Otherwise, returns None.\n    \"\"\"\n\n    if n < 1 or n > len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Define a list to store the nth element of each tuple\n    nth_element = []\n\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Append the nth element to the nth_element list\n        nth_element.append(list1[i][n-1])\n\n    # Return the nth_element list\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        return list1[n-1]\n    except IndexError:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    try:\n        nth_element = list1[n-1]\n        return nth_element\n    except IndexError:\n        print(\"Index out of range!\")\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if isinstance(list1, list) and isinstance(list1[0], tuple) and isinstance(n, int):\n        return list1[n-1]\n    else:\n        return None"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(lst, n):\n    '''\n    Extracts the nth element from a given list of tuples.\n    '''\n    if n > len(lst):\n        print(\"Index out of range!\")\n    else:\n        return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the input is a list of tuples\n    if not isinstance(list1, list) or not all(isinstance(item, tuple) for item in list1):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    # Check if the input list contains at least n elements\n    if len(list1) < n:\n        raise ValueError(\"Input list must contain at least {} elements.\".format(n))\n\n    # Extract the nth element from the list\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a second sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): the first sequence\n    list2 (list): the second sequence\n\n    Returns:\n    bool: True if any value in list1 exists in list2 and vice versa, False otherwise.\n    \"\"\"\n    # Convert both lists to sets to make sure they are unique and not sorted\n    set1 = set(list1)\n    set2 = set(list2)\n    # Check whether any element of set1 is in set2 and vice versa\n    return any(elem in set2 for elem in set1)"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in another sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            print(f\"{item} exists in both sequences.\")\n        else:\n            print(f\"{item} does not exist in the second sequence.\")"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Initialize a set to store the values in list1\n    set1 = set(list1)\n    # Loop through list2 and check if any value is present in set1\n    for value in list2:\n        if value in set1:\n            # If value is present in set1, return True\n            return True\n    # If no value is present in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    :param list1: A list of values to check for overlap with list2.\n    :param list2: A list of values to check for overlap with list1.\n    :return: True if there is any overlap between the two sequences, otherwise False.\n    \"\"\"\n    # iterate through list1 and check if any value is in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # if no overlap was found, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input, list1 and list2, and returns True if there is any value in list1 that also exists in list2, otherwise, it returns False.\n    \"\"\"\n    # Loop through the first sequence\n    for value in list1:\n        # If the value exists in list2, return True\n        if value in list2:\n            return True\n    # If no values exist in list2, return False\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max1 = arr[0]\n    max2 = max1\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n            \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n            \n    return (max1*max2, min1*min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize variables to store the maximum product and its indices\n    max_product = arr[0] * arr[1]\n    max_product_index = 0\n    second_max_product = arr[0]\n    second_max_product_index = 1\n\n    # Loop through the array from the second element to the end\n    for i in range(2, len(arr)):\n        # Update the maximum and second maximum product if the current product is greater\n        if arr[i] * arr[i-1] > max_product:\n            max_product = arr[i] * arr[i-1]\n            max_product_index = i\n\n        # Update the second maximum product if the current product is greater\n        if arr[i] > second_max_product:\n            second_max_product = arr[i]\n            second_max_product_index = i\n\n    # Return the pair with the highest product\n    return arr[max_product_index], arr[second_max_product_index]"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    # Initialize max and min values\n    max_val = arr[0]\n    min_val = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update max and min values\n        if arr[i] > max_val:\n            max_val = arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n\n        # Calculate the current product and compare it with the previous max_product\n        curr_product = max_val * min_val\n\n        # If the current product is greater than the previous max_product, update the max_product\n        if curr_product > max_product:\n            max_product = curr_product\n\n    # Return the max_product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    This function finds a pair with the highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Finding the maximum element in the array\n    max_element = max(arr) \n\n    # Initializing the maximum product and two variables to store the indices of the maximum and second maximum elements\n    max_product = max_element\n    second_max_index = 0\n    second_max = float('-inf')\n\n    # Looping through the array\n    for i in range(len(arr)): \n        # Checking if the current element is greater than the maximum element\n        if arr[i] > max_element: \n            # If yes, then updating the maximum and second maximum variables\n            max_product = arr[i]\n            second_max_index = i\n            second_max = max_element\n\n    # Looping through the array again\n    for i in range(len(arr)): \n        # Checking if the current element is greater than the maximum element and not equal to the maximum element\n        if arr[i] > max_element and arr[i]!= max_element: \n            # If yes, then updating the second maximum variable\n            if arr[i] > second_max: \n                second_max = arr[i]\n\n    # Returning the pair with highest product\n    return (second_max_index, second_max)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Find a pair with the highest product from a given array of integers.\n\n    Parameters:\n    arr (list): List of integers.\n\n    Returns:\n    tuple: Tuple containing the indices of the two elements in the array that have the highest product.\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Initialize two variables to store the highest product and the corresponding indices of the two elements\n    max_product = arr[0] * arr[1]\n    max_pair = (0, 1)\n\n    # Iterate through the array and find the two elements that have the highest product\n    for i in range(len(arr)-2):\n        product = arr[i] * arr[i+1]\n\n        # Update the highest product and the corresponding indices if the current product is greater than the previous maximum\n        if product > max_product:\n            max_product = product\n            max_pair = (i, i+1)\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Given an array of integers, this function returns a pair with the highest product of any two integers.\n    \"\"\"\n    max_pair = (float('-inf'), float('-inf'))  # initialize a pair with negative infinity as the highest product\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            pair_product = arr[i] * arr[j]\n            if pair_product > max_pair[0]:\n                max_pair = (pair_product, arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # initialize max and min variables with the first element\n    max_value = arr[0]\n    min_value = arr[0]\n\n    # loop through the array and update the max and min values\n    for i in range(1, len(arr)):\n        if arr[i] > max_value:\n            max_value = arr[i]\n        elif arr[i] < min_value:\n            min_value = arr[i]\n\n        # find the product of the current min and max values\n        product = max_value * min_value\n\n        # if the current product is greater than the previous max product, update the max value\n        if product > arr[i-1]:\n            arr[i-1] = product\n\n    # return the final max product value\n    return arr[i-1]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if not common_element:\n            common_element = tup[0]\n        elif tup[0] == common_element:\n            return common_element\n        else:\n            common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_set = set()\n    for tuple_ in Input:\n        first_set.add(tuple_[0])\n    return first_set"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    unique_tuples = list(set(Input)) # remove duplicates\n    common_tuples = []\n    for i in range(len(unique_tuples)):\n        for j in range(i+1, len(unique_tuples)):\n            if unique_tuples[i][0] == unique_tuples[j][0]: # check for common first element\n                common_tuples.append((unique_tuples[i], unique_tuples[j]))\n    return common_tuples"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # Initialize an empty dictionary to store the count of each first element in the list\n    count = {}\n\n    # Loop through the list of tuples\n    for item in Input:\n\n        # Get the first element of the tuple\n        first = item[0]\n\n        # If the first element is not in the dictionary, add it with a count of 1\n        if first not in count:\n            count[first] = 1\n        # If the first element is already in the dictionary, increment its count by 1\n        else:\n            count[first] += 1\n\n    # Initialize an empty list to store the common first element\n    common = []\n\n    # Loop through the dictionary to find the common first element\n    for key, value in count.items():\n        if value == len(Input):\n            common.append(key)\n\n    # Return the list of common first element\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if common_element is None:\n            common_element = tup[0]\n        else:\n            if tup[0] == common_element:\n                common_element = None\n                break\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for i in range(len(Input)):\n        if common_first is None:\n            common_first = Input[i][0]\n        elif Input[i][0] == common_first:\n            pass\n        else:\n            common_first = None\n            break\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_elements = []\n    for tuple in Input:\n        if len(common_first_elements) == 0:\n            common_first_elements.append(tuple[0])\n        elif tuple[0] in common_first_elements:\n            continue\n        else:\n            common_first_elements.append(tuple[0])\n\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    common_elements = set()\n\n    for tuple_ in Input:\n        first_element = tuple_[0]\n        common_elements.add(first_element)\n\n    return list(common_elements)"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    This function takes a list of tuples as input and returns a dictionary where the keys are the common first elements of the tuples and the values are the lists of tuples with that common first element.\n    \"\"\"\n    group_dict = {}\n    for tuple in Input:\n        for i in range(len(tuple)):\n            if i == 0:\n                if tuple[i] not in group_dict:\n                    group_dict[tuple[i]] = [tuple]\n                else:\n                    group_dict[tuple[i]].append(tuple)\n    return group_dict"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    first_element = []\n    for tup in Input:\n        if tup[0] not in first_element:\n            first_element.append(tup[0])\n    return first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    max_length = 0\n    max_elem = ''\n    for elem in lst: \n        if len(elem) > max_length: \n            max_length = len(elem) \n            max_elem = elem \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = \"\"\n    for element in lst:\n        length = len(element)\n        if length > max_length:\n            max_length = length\n            max_element = element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_len = 0\n    max_elem = \"\"\n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem\n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = len(lst[0])\n    max_elem = lst[0]\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    \"\"\"\n    This function takes a list of numbers as input and returns the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = sum([round(num) for num in lst])\n    print(total_sum * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    result = total * len(lst)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    \n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for number in list1:\n        total_sum += round(number)\n    print(total_sum * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0 \n    for i in range(1, n+1, 2): \n        sum_cubes += i**3 \n    return sum_cubes "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    count = 0\n    while count < n: \n        temp = 2 * count + 1\n        sum += temp * temp * temp\n        count += 1\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(1, n+1, 2):\n        sum_cube += i ** 3\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i*i*i\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n\n    # Initialize sum variable to 0\n    sum_cube = 0\n\n    # Loop through first n even natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the cube of the even number\n        cube = i ** 3\n        # Add the cube to the sum variable\n        sum_cube += cube\n\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n):\n    '''\n    This function takes an integer 'n' as input and returns the cube sum of the first n even natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i**3\n    return sum_of_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of i\n        cube_i = i ** 3\n        \n        # Add cube_i to total_sum\n        total_sum += cube_i\n    \n    # Return the total_sum\n    return total_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_list = []\n    for elem in test_tup:\n        concatenated_list.append(str(elem))\n    return delimiter.join(concatenated_list)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the given delimiter.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \",\"\n    concatenated_str = \"\"\n    for elem in test_tup:\n        concatenated_str += str(elem) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    # Define the delimiter\n    delimiter = \" \"\n\n    # Initialize an empty string to store the concatenated string\n    concatenated_string = \"\"\n\n    # Loop through each element in the tuple\n    for element in test_tup:\n        # Add the element to the concatenated string\n        concatenated_string += str(element) + delimiter\n\n    # Remove the trailing delimiter from the concatenated string\n    concatenated_string = concatenated_string[:-len(delimiter)]\n\n    # Return the concatenated string\n    return concatenated_string"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Create an empty string to store the concatenated result\n    result = \"\"\n    # Iterate through each element of the tuple\n    for element in test_tup:\n        # Append the element to the result string\n        result += str(element)\n    # Return the concatenated result\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = ', '\n    new_tup = []\n    for element in test_tup:\n        new_tup.append(str(element))\n    return delimiter.join(new_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # use join() method to concatenate each element of tuple by delimiter\n    concatenated_str = ', '.join(str(x) for x in test_tup)\n    # return concatenated string\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter='-'):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for item in test_tup:\n        concatenated_string += str(item) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_cubes = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    average_of_cubes = sum_cubes/n\n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += i*i*i\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    \n    # initializing sum variable to 0\n    sum = 0\n    \n    # loop to iterate over the first n natural numbers\n    for i in range(1, n+1):\n        \n        # calculating cube of each number\n        cube = i ** 3\n        \n        # adding cube to sum\n        sum += cube\n        \n    # dividing sum by n to get average of cubes\n    average = sum / n\n    \n    # printing the average of cubes\n    print(\"The average of cubes of first {} natural numbers is: {}\".format(n, average))"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum += i**3\n    return cube_sum / n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 3\n    average = sum / n\n    print(f\"The average of cubes of the first {n} natural numbers is {average}\")"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube_sum = 0  \n    for i in range(n):  \n        cube_sum += i**3  \n    average = cube_sum / n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(n):  \n        sum += i*i*i  \n    average = sum/n  \n    return average  \n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0  \n    for i in range(1, n+1):  \n        total += i**3  \n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(n):\n        sum_of_cubes += i**3\n        count += 1\n\n    average_of_cubes = sum_of_cubes/count\n    return average_of_cubes\n"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    extracted_values = []\n    for value in test_tuple:\n        extracted_values.append(value[-1])\n    return extracted_values"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_elements = []\n    for item in test_tuple:\n        rear_index_elements.append(item[-1])\n    return rear_index_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, s in enumerate(test_tuple):\n        rear_indices.append(len(s)-1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # initialize an empty list to store the rear index elements\n    rear_index_elements = []\n    # iterate over each string in the tuple\n    for string in test_tuple:\n        # extract the last element of the string using index [-1]\n        rear_index_element = string[-1]\n        # append the rear index element to the list\n        rear_index_elements.append(rear_index_element)\n    # return the list of rear index elements\n    return rear_index_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    \"\"\"\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    This function takes two parameters: the list to be searched and the element to be searched.\n    It returns the number of sublists containing the element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    result = []\n    for num in nums:\n        if num % 2 == 1:\n            result.append(num)\n    return result"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    odd_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_nums.append(num)\n    return odd_nums"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern to match the date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input string matches the pattern\n    if re.match(pattern, dt):\n        # Convert the input string to datetime format using datetime.datetime.strptime()\n        import datetime\n        dt_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n        \n        # Format the datetime object in dd-mm-yyyy format using strftime()\n        formatted_dt = dt_obj.strftime('%d-%m-%Y')\n        \n        # Return the formatted date string\n        return formatted_dt\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Match the pattern with the input string\n    match = re.match(pattern, dt)\n    \n    # If the match is not None, extract the required parts of the date and format them accordingly\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        formatted_date = f'{day}-{month}-{year}'\n        return formatted_date\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    date_obj = re.search(pattern, dt)\n    if date_obj:\n        return date_obj.group().replace('-', '')\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regex pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Find all matches of the date format pattern in the input string\n    matches = re.findall(pattern, dt)\n    \n    # If there are no matches, return the input string as is\n    if not matches:\n        return dt\n    \n    # Extract the day, month, and year values from the matches\n    day, month, year = matches[0]\n    \n    # Format the date string according to the new format pattern\n    new_date = f'{day}-{month}-{year}'\n    \n    # Return the formatted date string\n    return new_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Define the regular expression pattern for date format conversion\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Convert the date string using re.sub() function\n    new_dt = re.sub(pattern, lambda match: datetime.datetime.strptime(match.group(), '%Y-%m-%d').strftime('%d-%m-%Y'), dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the pattern to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    \n    # match the pattern with the input date string\n    match = re.match(pattern, dt)\n    \n    # check if the match was successful\n    if match:\n        # extract the components from the match object\n        year, month, day = match.groups()\n        # convert the components to the desired format\n        yyyy = '-'.join(reversed(year.split('-')))\n        mm = '-'.join(reversed(month.split('-')))\n        dd = '-'.join(reversed(day.split('-')))\n        # return the final date in the desired format\n        return dd + '-' + mm + '-' + yyyy\n    else:\n        return None"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    new_pattern = r'\\d{2}-\\d{2}-\\d{4}'\n    dt_match = re.search(pattern, dt)\n    if dt_match:\n        return re.sub(pattern, new_pattern, dt)\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    \"\"\"\n    # Define the regular expression pattern for yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub function to replace the matches with the desired format\n    result = re.sub(pattern, r'\\3-\\2-\\1', dt)\n    # Return the modified date in dd-mm-yyyy format\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Find all matches of the pattern in the input string\n    matches = re.findall(pattern, dt)\n    \n    # If there are no matches, return the input string as it is already in the required format\n    if not matches:\n        return dt\n    \n    # If there is a match, extract the date components and format them as required\n    year, month, day = int(matches[0][0]), int(matches[0][1]), int(matches[0][2])\n    formatted_date = f'{day}-{month:02d}-{year:04d}'\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern to match a date in yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    # match the date in the given string using the pattern\n    match = re.match(pattern, dt)\n    # if the date matches, split it into components and reverse the order of the month and day\n    if match:\n        year, month, day = match.groups()\n        return day+'-'+month+'-'+year\n    # if the date does not match, return the original date\n    else:\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Find the largest value in the array\n    max_value = my_list[-1]\n    for i in range(len(my_list) - 2, -1, -1):\n        if my_list[i] > max_value:\n            max_value = my_list[i]\n\n    # Perform insertion sort on the max_value\n    count = 0\n    while max_value > 0:\n        for i in range(len(my_list)):\n            if my_list[i] > max_value:\n                my_list[i], my_list[i - count] = my_list[i - count], my_list[i]\n        max_value //= 10\n        count += 1\n\n    # Insertion sort for the remaining values\n    for i in range(1, len(my_list)):\n        temp = my_list[i]\n        j = i - 1\n        while j >= 0 and temp < my_list[j]:\n            my_list[j + 1] = my_list[j]\n            j -= 1\n        my_list[j + 1] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    # Step 1: Find the largest gap (length)\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        # Step 2: Insertion sort for this gap size\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        \n        # Step 3: Decrease the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same number of elements.\")\n    \n    # Initialize the result tuple with all False values\n    result_tup = [False] * len(test_tup1)\n    \n    # Extract the elementwise and tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup[i] = True\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the output list\n    output_list = []\n    # Iterate through the elements of both tuples\n    for i in range(len(test_tup1)):\n        # Add the elementwise and of the corresponding elements of the two tuples to the output list\n        output_list.append(test_tup1[i] & test_tup2[i])\n    # Return the output list as a tuple\n    return tuple(output_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tups = []\n    for i in range(len(test_tup1)):\n        and_tups.append((test_tup1[i] & test_tup2[i]))\n    return and_tups"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i], test_tup2[i])\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to store the resulting tuples\n    result_list = []\n    # Loop through each element in the two tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements from the two tuples and use the bitwise and operator to find the elementwise and\n        elem_and = test_tup1[i] & test_tup2[i]\n        # Create a new tuple with the extracted element and the elementwise and\n        result_list.append((test_tup1[i], elem_and))\n    # Return the resulting list of tuples\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuple = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return and_tuple"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = (0,) * len(test_tup1)\n\n    # Iterate through each element in the result tuple\n    for i in range(len(result_tup)):\n        # Extract the corresponding elements from the two input tuples\n        x = test_tup1[i]\n        y = test_tup2[i]\n\n        # Compute the elementwise and of the corresponding elements\n        result = x & y\n\n        # Store the result in the result tuple\n        result_tup[i] = result\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if b**2 - 4*a*c < 0:\n        return \"No directrix\"\n    elif b**2 - 4*a*c == 0:\n        return \"One directrix\"\n    else:\n        root1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n        root2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n        return \"The directrix is between \" + str(root1) + \" and \" + str(root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate discriminant\n    disc = b**2 - 4*a*c\n    \n    # If discriminant is positive\n    if disc > 0:\n        return (-b + disc**0.5)/(2*a)\n        \n    # If discriminant is negative\n    elif disc < 0:\n        return (-b - disc**0.5)/(2*a)\n        \n    # If discriminant is zero\n    else:\n        return \"No real roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta >= 0:\n        root1 = (-b + math.sqrt(delta)) / (2*a)\n        root2 = (-b - math.sqrt(delta)) / (2*a)\n        print(\"The directrix of the parabola is:\", root1)\n        print(\"The directrix of the parabola is:\", root2)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the coefficients of the quadratic equation\n    discriminant = b**2 - 4*a*c\n    \n    # check if the equation has a real root\n    if discriminant > 0:\n        # find the root\n        root = (-b + discriminant**0.5)/(2*a)\n        # return the root\n        return root\n    else:\n        # print an error message\n        print(\"The equation does not have a real root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Find the two roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        # Find the minimum and maximum roots\n        min_root = roots[0]\n        max_root = roots[1]\n        \n        # Calculate the directrix\n        directrix = (-b)/(2*a)\n        \n        return min_root, max_root, directrix\n    \n    # If the discriminant is negative, the directrix cannot exist\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # check if the discriminant is negative\n    if discriminant < 0:\n        return \"No real root\"\n\n    # calculate the roots\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # check if the roots are real and distinct\n    if root1.imag == 0 and root2.imag == 0:\n        if root1 == root2:\n            return \"No distinct real root\"\n        else:\n            return \"Two distinct real roots\"\n\n    # check if the roots are real and complex conjugate of each other\n    elif root1.imag == 0 and root2.imag!= 0:\n        return \"Two distinct complex conjugate roots\"\n\n    # check if the roots are complex conjugate of each other\n    elif root1.imag!= 0 and root2.imag == 0:\n        return \"Two distinct complex conjugate roots\"\n\n    # check if the roots are complex conjugate and distinct\n    elif root1.imag!= 0 and root2.imag!= 0:\n        if root1 == root2:\n            return \"Two distinct complex conjugate roots\"\n        else:\n            return \"Three distinct complex conjugate roots\""
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # Check if the discriminant is greater than 0\n    if discriminant > 0:\n        # Calculate the roots of the discriminant\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Sort the roots in ascending order\n        root1, root2 = sorted([root1, root2])\n        \n        # Return the directrix of the parabola\n        return root1\n    \n    # If the discriminant is 0, the directrix is either root1 or root2\n    elif discriminant == 0:\n        root1 = (-b)/(2*a)\n        root2 = root1\n        \n        # Sort the roots in ascending order\n        root1, root2 = sorted([root1, root2])\n        \n        # Return the directrix of the parabola\n        return root1\n    \n    # If the discriminant is less than 0, there are no real roots and the directrix is None\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        print(\"No real roots.\")\n    elif discriminant == 0:\n        x = -b/2/a\n        print(f\"The directrix is {x:.2f}\")\n    else:\n        x1 = (-b - discriminant**0.5)/(2*a)\n        x2 = (-b + discriminant**0.5)/(2*a)\n        print(f\"The roots of the parabola are {x1:.2f} and {x2:.2f}\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola using the quadratic formula.\n\n    Args:\n    a (float): Coefficient of the second degree term\n    b (float): Coefficient of the first degree term\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n\n    if discriminant < 0:\n        print(\"The equation does not have a real root.\")\n        return None\n    else:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return (root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if disc > 0:\n        # Calculate the two roots of the discriminant\n        root1 = (-b + disc**0.5) / (2*a)\n        root2 = (-b - disc**0.5) / (2*a)\n\n        # Return the two roots\n        return root1, root2\n    else:\n        # If the discriminant is negative, the parabola does not have a unique directrix\n        return None"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # create a set of elements from both lists\n    set1 = set(list1)\n    set2 = set(list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # return True if there is at least one common element, False otherwise\n    return len(intersection) > 0"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Loop through each element in the list\n    for element in list1:\n        # If the element is in the second list, return True\n        if element in list2:\n            return True\n    \n    # If the loop completes without finding a common element, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    if len(list1) < len(list2):\n        # If list1 is shorter, swap the two lists\n        list1, list2 = list2, list1\n    # Iterate through each element in list1 and check if it exists in list2\n    for element in list1:\n        if element in list2:\n            return True\n    # If no common elements are found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    # convert both lists to sets to eliminate duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n    \n    # check if there is at least one common element in both sets\n    if set1.intersection(set2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Create a set of the second list to remove duplicates\n    set2 = set(list2)\n\n    # Loop through the first list and check if each element is in the set of the second list\n    for element in list1:\n        if element in set2:\n            return True\n\n    # If we've made it this far, there were no common elements\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Find the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the height of each half of the trapezium\n    half_height = height / 2\n\n    # Find the length of the top half\n    top_length = area / base1\n\n    # Find the length of the bottom half\n    bottom_length = area / base2\n\n    # Find the total length of the trapezium\n    total_length = top_length + bottom_length\n\n    # Find the median length of the trapezium\n    median_length = total_length / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # calculate the length of the base and height\n    base_length = base1 + base2\n    height_length = height\n    \n    # calculate the length of the top half\n    top_half_length = (base1 + base2) / 2\n    \n    # calculate the length of the bottom half\n    bottom_half_length = (base1 + base2) / 2 + height\n    \n    # calculate the length of the trapezium\n    trapezium_length = 2 * (top_half_length + bottom_half_length)\n    \n    # find the length of the base on both sides of the trapezium\n    base_sides = (base_length - trapezium_length) / 2\n    \n    # calculate the median length\n    median_length = base_sides * 2\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Compute the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Compute the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n    \n    # Find the lengths of the sides of the trapezium\n    side1 = (0.5 * base1)**0.5\n    side2 = (0.5 * base2)**0.5\n    \n    # Find the length of the trapezium\n    trapezium_length = 0.5 * (side1 + side2)\n    \n    # Compute the median length of the trapezium\n    median_length = (area / perimeter) * trapezium_length\n    \n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # find the length of the trapezium's base that is half of its perimeter\n    base_half_perimeter = perimeter / 2\n\n    # calculate the length of the trapezium's right half\n    right_half_length = math.sqrt(area / base_half_perimeter)\n\n    # calculate the length of the trapezium's left half\n    left_half_length = right_half_length\n\n    # find the length of the trapezium's median\n    median = (left_half_length + right_half_length) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n\n    # Compute the lengths of the three sides of the trapezium\n    side1 = base1 + base2\n    side2 = base1 + half_height\n    side3 = base2 + half_height\n\n    # Sort the three sides of the trapezium\n    side1_sorted = sorted([side1, side2, side3])\n\n    # Compute the length of the median side\n    median_side = side1_sorted[1]\n\n    # Return the length of the median side\n    return median_side"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * base2\n    base_length = math.sqrt(area / height)\n    return 2 * base_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = (base1 + base2) * height / 2\n    median_length = math.sqrt(area)\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the semi-perimeter of the trapezium\n    s1 = 0.5 * (base1 + base2) * height\n    s2 = 0.5 * (base1 + base2) * (height - base2)\n    semi_perimeter = s1 - s2\n    \n    # Calculate the length of the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n    \n    # Calculate the length of the trapezium\n    trapezium_length = (area / semi_perimeter) * 0.5\n    \n    # Calculate the median of the two semi-perimeters\n    median_s1 = 0.5 * (0.5 * base1 + 0.5 * base2) * height\n    median_s2 = 0.5 * (0.5 * base1 + 0.5 * base2) * (height - 0.5 * base2)\n    \n    # Calculate the median of the two perimeters\n    median_perimeter = 0.5 * (0.5 * base1 + 0.5 * base2) * height\n    \n    # Calculate the median of the trapezium length\n    median_trapezium = (trapezium_length / 2) + 0.5 * median_s1 + 0.5 * median_s2\n    \n    # Return the median of the trapezium length\n    return median_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2 + height) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the two base rectangles\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n\n    # Calculate the areas of the trapezium\n    area_trap = 0.5 * (base1 + base2) * height\n\n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2 + height)\n\n    # Calculate the area of the triangle formed by the two base rectangles\n    area_trapez = 0.5 * base1 * height * 0.5 * (base1 + height)\n\n    # Calculate the slope of the triangle formed by the two base rectangles\n    slope = area_trapez / area1\n\n    # Calculate the y-intercept of the triangle formed by the two base rectangles\n    y_intercept = area_trapez / (slope * area1)\n\n    # Calculate the length of the base of the triangle formed by the two base rectangles\n    length_base = 0.5 * (base1 + base2 + height)\n\n    # Calculate the length of the base of the trapezium\n    length_trap = perimeter / 2\n\n    # Calculate the length of the height of the trapezium\n    length_height = perimeter / 2\n\n    # Calculate the area of the base of the trapezium\n    area_trap_base = length_trap * length_base\n\n    # Calculate the area of the trapezium\n    area_trap_trap = length_trap * length_trap\n\n    # Calculate the area of the height of the trapezium\n    area_trap_height = length_height * length_trap\n\n    # Calculate the area of the whole trapezium\n    area_trap_whole = area_trap_trap + area_trap_base + area_trap_height\n\n    # Calculate the area of the whole trapezium using the formulas\n    area_trap_whole_formula = 0.5 * (base1 + base2 + height) * (base1 + height + height)\n\n    # Calculate the distance from the midpoint of the trapezium to the base of the first rectangle\n    distance1 = (area_trap_trap - area_trap_base) / (area_trap_trap - area_trap_whole)\n\n    # Calculate the distance from the midpoint of the trapezium to the base of the second rectangle\n    distance2 = (area_trap_trap - area_trap_height) / (area_trap_trap - area_trap_whole)\n\n    # Calculate the distance from the midpoint of the trapezium to the base of the whole trapezium\n    distance3 = (area_trap_trap - area_trap_whole_formula) / (area_trap_trap - area_trap_whole)\n\n    # Determine the position of the median of the trapezium\n    if area_trap_whole_formula == 0:\n        median_position = 0\n    elif area_trap_whole_formula > area_trap_trap:\n        median_position = area_trap_trap - area_trap_whole_formula / 2\n    else:\n        median_position = area_trap_whole_formula / 2\n\n    # Calculate the length of the median line\n    if area_trap_whole_formula == 0:\n        median_length = 0\n    elif area_trap_whole_formula > area_trap_trap:\n        median_length = distance1 * area_trap_trap / (area_trap_trap - area_trap_whole)\n    else:\n        median_length = distance3 * area_trap_trap / (area_trap_trap - area_trap_whole)\n\n    # Calculate the midpoint of the median line\n    median_midpoint = median_position + median_length / 2\n\n    # Calculate the length of the left half of the trapezium\n    length_left = (area_trap_trap - area_trap_base) / (area_trap_trap - area_trap_trap)\n\n    # Calculate the length of the right half of the trapezium\n    length_right = (area_trap_trap - area_trap_height) / (area_trap_trap - area_trap_trap)\n\n    # Calculate the midpoint of the left half of the trapezium\n    midpoint_left = median_position + distance1 / 2\n\n    # Calculate the midpoint of the right half"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_than_number = False\n    for element in arr:\n        if element > number:\n            greater_than_number = True\n            break\n    return greater_than_number"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(\"The number is greater than the element at position\", i)\n            return\n    print(\"The number is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(True)\n            return\n    print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if number > arr[0]:\n        print(\"The number is greater than the first element of the array.\")\n    else:\n        for i in range(len(arr)):\n            if number > arr[i]:\n                print(\"The number is greater than the element at index\", i, \"of the array.\")\n                break\n        else:\n            print(\"The number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i)\n            break\n    else:\n        print(number, 'is not greater than any element in the array.')"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    for num in arr:\n        if num > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a{1,}b')\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*\\b.*b\\w*\\b'\n    result = re.search(pattern, text)\n    if result:\n        return result.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r\"a.*b\"\n    match = re.search(pattern, text)\n    if match:\n        print(\"Match found!\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # define the regular expression pattern to match the string\n    pattern = re.compile(r'a+b+')\n    # search the string using the pattern and return the match object\n    match = pattern.search(text)\n    # return the matched string if found, otherwise return an empty string\n    return match.group() if match else ''"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a(b){1,}'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a\\b\\w+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a positive integer as input and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Convert the number to a string\n    str_n = str(n)\n    # Extract the last character of the string\n    last_char = str_n[-1]\n    # Convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string and get the last character\n    last_char = str(n)[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # find the last character of the string\n    last_char = num[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for num in list1:\n        if num < 0:\n            negative_list.append(num)\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as an argument and returns the negative numbers in the list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers in the original list.\n    '''\n    return [x for x in lst if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns the negative numbers in the list.\n    '''\n    neg_lst = []\n    for num in lst:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    result = \"\"\n    for char in str1:\n        if char.isalnum():\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if ord(char) % 2 == 0)\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit():  # check if character is a digit\n            if int(char) % 2 == 0:  # check if digit is even\n                new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_str = ''\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, append it to the even_str\n        if char % 2 == 1:\n            even_str += char\n    # return the even_str\n    return even_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or (char.isalpha() and char.isupper())])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # Initialize an empty string to store the odd characters\n    odd_str = \"\"\n    # Iterate through each character in the string\n    for char in str1:\n        # Check if the character is odd\n        if char % 2!= 0:\n            # If it is odd, append it to the odd string\n            odd_str += char\n    # Return the odd string\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # create an empty string to store the result\n    result = \"\"\n    # loop through each character in the input string\n    for char in str1:\n        # if the character is odd, add it to the result string\n        if char % 2!= 0:\n            result += char\n    # return the result string\n    return result\n"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # convert string to list\n    lst = list(str1)\n    # initialize an empty string to store the odd characters\n    result = \"\"\n    # loop through each character in the list\n    for char in lst:\n        # if the character is odd, append it to the result string\n        if char % 2 == 1:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    # convert the string to a list of characters\n    chars = list(str1)\n    # initialize an empty list to hold the odd characters\n    odd_chars = []\n    # iterate over each character in the list\n    for char in chars:\n        # check if the character is odd\n        if char % 2!= 0:\n            # if the character is odd, append it to the odd_chars list\n            odd_chars.append(char)\n    # join the odd characters into a new string\n    new_str = ''.join(odd_chars)\n    # return the new string\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j]:\n                bidirectional_count += 1\n    return bidirectional_count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:i+1] or (test_list[j], test_list[i]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # Initialize count variable\n    count = 0\n    \n    # Iterate over the list of tuples\n    for i in range(len(test_list)):\n        # Check if the current tuple is in the reversed list\n        if test_list[i] in test_list[i+1:]:\n            # Increment the count\n            count += 1\n            \n    # Return the count\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(sorted(test_list[i])) == tuple(sorted(test_list[j])):\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    num = 1\n    for i in L:\n        num = num * i\n    return num"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # initialize the result to 0\n    result = 0\n    # iterate over the list\n    for num in L:\n        # multiply the current number by the result so far\n        result = result * num\n    # return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 1\n    for num in L:\n        total *= num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # If the list contains only one element, return it as is\n    if len(L) == 1:\n        return L[0]\n    # Initialize an empty string to store the result\n    result = ''\n    # Iterate over each element of the list\n    for i in L:\n        # If the element is a multiple of 2, add 2 to the result\n        if i % 2 == 0:\n            result += str(2 * int(i/2))\n        # If the element is a multiple of 3, add 3 to the result\n        elif i % 3 == 0:\n            result += str(3 * int(i/3))\n        # If the element is a multiple of 4, add 4 to the result\n        elif i % 4 == 0:\n            result += str(4 * int(i/4))\n        # If the element is a multiple of 5, add 5 to the result\n        elif i % 5 == 0:\n            result += str(5 * int(i/5))\n        # If the element is not a multiple of 2, 3, 4, 5, raise a ValueError\n        else:\n            raise ValueError('Element {} is not a multiple of 2, 3, 4, or 5'.format(i))\n    # Return the result as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable\n    result = 0\n    \n    # Iterate through the list of integers\n    for num in L:\n        # If the current integer is a multiple of 10, add it to the result\n        if num % 10 == 0:\n            result += num\n            \n    # Return the final result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function takes a text as input and returns a list of tuples containing the adverb and its position in the sentence.\n    '''\n    # Define a regular expression to match adverbs\n    pattern = r'\\b([a-z]+)([.,!?])\\b'\n\n    # Find all matches in the text using the regular expression\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Initialize an empty list to store the tuples\n    adverb_positions = []\n\n    # Iterate over the matches and extract the adverb and its position\n    for match in matches:\n        # Extract the adverb and its position\n        adverb = match.group(1)\n        position = match.start()\n\n        # Append the tuple to the list\n        adverb_positions.append((adverb, position))\n\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b\\w*[a-z]*\\b\\b'\n    match = re.search(pattern, text)\n    if match:\n        adverb = match.group().lower()\n        return (adverb, match.start(), match.end())\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(?:[a-z]+\\s*)?(?:[a-z]+ing|able|adventurous|aggressive|amazing|amazingly|angry|annoying|annoyed|annoyingly|appalling|appallingly|appealing|appealingly|arrogant|ashamed|ashamedly|astonishing|astonishingly|awful|awfully|baffling|bafflingly|belated|belatedly|bewildering|bizarre|bizarrely|boastful|boastfully|boring|boringly|brilliant|brilliantly|bumpy|burly|calm|calmly|careful|carefully|careless|carelessly|cautious|cautiously|chilly|clear|clearly|clever|cleverly|cloudy|clumsy|clumsyly|cowardly|cowardlyly|crazy|crazily|cruel|cruelly|cultured|culturally|curious|curiously|daily|damaging|damagingly|depressing|depressingly|depressive|determined|determinedly|disappointed|disappointedly|disappointing|disappointingly|disgusted|disgustedly|disturbing|disturbingly|dutiful|dutifully|eager|eagerly|elated|elatedly|embarrassed|embarrassedly|embarrassing|embarrassingly|enchanting|enchantingly|energetic|energetically|excited|excitedly|exciting|excitingly|fervent|fervently|festive|flippant|flippantly|frail|frailly|frightening|frighteningly|friendly|frightfully|funny|funnily|futile|futuristic|gallant|gallantly|generous|generously|glamorous|glamorously|gleaming|gleamingly|glorious|gloriously|good|goodly|gorgeous|gorgeously|grateful|gratefully|gratifying|gratifyingly|greedy|greedily|grim|grimacing|grimacingly|grieving|grievingly|groovy|grubby|guilty|guiltyly|hateful|hatefully|heady|helpful|helpfully|helping|helplessly|hesitant|hesitantly|hilarious|hilariously|hopeful|hopefully|horrible|horrific|horrified|horrifiedly|horrifying|horrifyingly|hospitable|hospitably|humiliating|humiliatingly|humming|humorous|humorously|hypnotic|hypnotically|icky|ill|illogical|illogically|impatient|impatiently|imperfect|imperfectly|incredible|incredibly|infuriating|infuriatingly|irritating|irritatingly|jittery|jolly|jollying|joyful|joyfully|joyous|joyously|jealous|jealously|jittery|jolly|jollying|joyful|joyfully|joyous|joyously|joyful|joyfully|joyous|joyously|jubilant|jubilantly|judicious|judiciously|jumpy|jumpyly|kind|kindhearted|kindheartedly|kindly|kindness|kindnesses|knotty|lamentable|lamentably|late|lately|laughable|laughably|lavish|lavishly|lazy|lazyly|lethargic|lethargically|lively|livelylike|lonely|lonelyly|lost|lovely|lovelyly|lucky|luckily|lustful|lustfully|mad|madly|madness|madnesses|majestic|majestically|malicious|maliciously|manly"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*adv\\w*\\b', text, re.IGNORECASE)\n\n    # Initialize an empty dictionary to store the adverb positions\n    adverb_positions = {}\n\n    # Iterate through all the adverbs found in the sentence\n    for i, adv in enumerate(adverbs):\n        # Get the position of each adverb in the sentence\n        position = text.find(adv)\n\n        # Add the position to the dictionary\n        adverb_positions[adv] = position\n\n    # Return the dictionary of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # create a regular expression pattern to match adverbs\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    \n    # find all the matches in the text\n    matches = pattern.findall(text)\n    \n    # loop through the matches and get their positions in the text\n    for match in matches:\n        # get the start and end positions of the match in the text\n        start_pos = text.find(match)\n        end_pos = start_pos + len(match)\n        \n        # print the match and its position in the text\n        print(match, ':', start_pos)"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Extract adverbs from the sentence\n    adverbs = re.findall(r'\\b\\w*ed\\b', text)\n    \n    # Find the position of the first adverb\n    adverb_position = -1\n    for i, adverb in enumerate(adverbs):\n        if adverb_position == -1:\n            adverb_position = i\n    \n    # Return the adverb and its position\n    return adverb, adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b\\w+(?:st|nd|rd|th)\\b'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n    \n    # Loop through the matches and append each adverb to the adverbs list along with its position\n    for match, pos in matches:\n        adverbs.append((match, int(pos)))\n    \n    # Sort the adverbs by their position in the sentence (smallest to largest)\n    adverbs.sort(key=lambda x: x[1])\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match an adverb\n    pattern = re.compile(r'\\b(\\w+)(?:st|nd|rd|th)\\b')\n\n    # Find all occurrences of the pattern in the given text\n    matches = pattern.finditer(text)\n\n    # Iterate over the matches and print the adverbs and their positions\n    for match in matches:\n        adverb = match.group(1)\n        pos = match.start()\n\n        print(f'{adverb} is at position {pos}')\n\n    # If no matches are found, print a message saying so\n    if not matches:\n        print('No adverbs found in the text.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n\n    # Define a regular expression pattern for matching adverbs\n    pattern = r\"\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*ly\\b|\\b\\w*gently\\b|\\b\\w*quietly\\b', text, re.IGNORECASE)\n    \n    # Create a dictionary to store the adverbs and their positions\n    adverb_positions = {}\n    \n    # Loop through each adverb and find its position in the sentence\n    for i, adverb in enumerate(adverbs):\n        # Find the index of the first occurrence of the adverb in the sentence\n        index = text.find(adverb, i+1)\n        \n        # Add the adverb and its position to the dictionary\n        adverb_positions[adverb] = index\n    \n    # Return the dictionary of adverbs and their positions\n    return adverb_positions"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2  # formula for cube surface area\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    print(\"The surface area of a cube of length\", l, \"is\", surface_area)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l**2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l*l"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count_list = []\n    for num in nums:\n        if num > 0:\n            count_list.append(num)\n    \n    count = len(count_list)\n    positive_ratio = count / len(nums)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # create an array of integers\n    arr = array('i', nums)\n\n    # count the number of positive integers in the array\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n\n    # calculate the ration of positive integers in the array\n    if len(arr) == 0:\n        return 0\n    else:\n        return pos_count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_nums = array('i')\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n    if len(positive_nums) == 0:\n        return 0\n    else:\n        return len(positive_nums)/len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers and returns the ration of positive numbers in the array.\n    '''\n    pos = 0\n    neg = 0\n    \n    for num in nums:\n        if num > 0:\n            pos += 1\n        else:\n            neg += 1\n    \n    if pos == 0:\n        return 0\n    else:\n        return round(pos/len(nums), 2)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize the count array\n    count_array = array('i', [0]*2)\n    # Iterate over the array\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # Increment the count array element corresponding to the number\n            count_array[num] += 1\n    # Calculate the ration of positive numbers\n    pos_count = count_array[1] / count_array[0]\n    # Return the ration of positive numbers\n    return pos_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Create an array of 0s to store the counts of positive and negative numbers\n    count_array = array('i', [0] * 2)\n\n    # Iterate over each number in the array\n    for num in nums:\n        # If the number is positive, increment its count in the positive array\n        if num > 0:\n            count_array[0] += 1\n        # If the number is negative, increment its count in the negative array\n        elif num < 0:\n            count_array[1] += 1\n\n    # Calculate the ration of positive numbers as a float between 0 and 1\n    positive_ratio = count_array[0] / (count_array[0] + count_array[1])\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to an array of integers\n    int_array = array('i', nums)\n\n    # Initialize the count of positive numbers to zero\n    count = 0\n\n    # Iterate through the array and count the number of positive numbers\n    for num in int_array:\n        if num > 0:\n            count += 1\n\n    # Calculate the ration of positive numbers\n    ratio = count / len(int_array)\n\n    # Return the ration of positive numbers\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n\n    Args:\n        nums (list or array): A list or array of integers.\n\n    Returns:\n        float: The ratio of positive numbers to all numbers in the array.\n    \"\"\"\n    num_pos = 0\n    for num in nums:\n        if num > 0:\n            num_pos += 1\n    return num_pos / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative number.\n    \"\"\"\n    largest = float('-inf')  # Initialize largest to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = None\n    for num in list1:\n        if num < 0:\n            if max_neg is None or num > max_neg:\n                max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n\n    largest = None\n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for num in list1:\n        if num < 0 and num > largest_num:\n            largest_num = num\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1000 #initialize largest as negative infinity\n    \n    for num in list1: \n        if num < 0 and num > largest: #check if current number is negative and greater than largest number found so far\n            largest = num #update largest with current number\n            \n    return largest #return largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Returns the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = None\n    for num in list1:\n        if num < 0:\n            if max_num is None or num > max_num:\n                max_num = num\n    return max_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if j < K:\n                test_list[i][j] = None\n            elif j > K + len(test_list[i]) - 1:\n                test_list[i].pop(j - K)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # loop through each element in the tuple\n        for i in range(len(tup)):\n            # check if the index of the element is greater than or equal to k\n            if i >= K:\n                # if it is, remove the element from the tuple\n                tup.pop(i)\n    # return the modified test_list\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Check if K is a positive integer\n    if not isinstance(K, int) or K < 1:\n        raise ValueError('K must be a positive integer')\n\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_list = []\n\n    # Loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # Trim the tuple by K\n        trimmed_tuple = tuple(test_list[i][:K])\n        # Append the trimmed tuple to the trimmed list\n        trimmed_list.append(trimmed_tuple)\n\n    # Return the trimmed list\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    result = []\n    for tup in test_list:\n        new_tup = tuple(tup[:K] + tup[K+1:])\n        result.append(new_tup)\n    return result"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to store the trimmed tuples\n    trimmed_list = []\n    for tup in test_list:\n        # trim each tuple by k using slicing\n        trimmed_tup = tup[:K]\n        # add the trimmed tuple to the new list\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) > K:\n            trimmed_list.append(tup[:K])\n        else:\n            trimmed_list.append(tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to store the trimmed tuples\n    trimmed_tuples = []\n\n    # Loop through each tuple in the list\n    for tuple in test_list:\n        # Initialize a list to store the elements of the tuple to be trimmed\n        trimmed_elements = []\n\n        # Loop through each element of the tuple\n        for element in tuple:\n            # If the element is greater than or equal to K, append it to the trimmed_elements list\n            if element >= K:\n                trimmed_elements.append(element)\n\n        # If the trimmed_elements list is not empty, append the trimmed tuple to the trimmed_tuples list\n        if trimmed_elements:\n            trimmed_tuples.append(tuple[:])\n\n    # Return the trimmed_tuples list\n    return trimmed_tuples"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            del test_list[i][K:]"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] * test_tup2[i])\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same number of elements.\")\n        return None\n    \n    # Initialize a new tuple of length equal to the maximum number of elements in the tuples\n    result_tup = (0 for _ in range(max(len(test_tup1), len(test_tup2))))\n    \n    # Multiply the elements of the tuples based on their indices\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Convert the tuple to a set to remove any duplicates\n    tup_set = set(tup)\n    \n    # Create a dictionary to store the count of each element in the tuple\n    count_dict = Counter(tup_set)\n    \n    # Count the occurrence of each element in the list\n    for item in lst:\n        if item in count_dict:\n            count_dict[item] += 1\n            \n    # Convert the dictionary to a list and sort by value in descending order\n    result_list = sorted(count_dict.items(), key=lambda x: x[1], reverse=True)\n    \n    # Print the result\n    print(result_list)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = {}\n    for i in tup:\n        if i in count:\n            if count[i] in result:\n                result[count[i]] += 1\n            else:\n                result[count[i]] = 1\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert tuple to list\n    lst = list(tup)\n    # Count the occurrence of each element in the list\n    counter = Counter(lst)\n    # Create a dictionary to store the result\n    result = {}\n    # Loop through the counter object and add the key-value pairs to the result dictionary\n    for key, value in counter.items():\n        result[key] = value\n    # Return the result dictionary\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    count = {k: v for k, v in counter.items() if k in lst}\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and returns a dictionary of counts of each element in the tuple.\n    '''\n    count_dict = {}\n    for i in tup:\n        if i in lst:\n            count_dict[i] = count_dict.get(i, 0) + 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for i in tup:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    for j in lst:\n        if j in count_dict:\n            del count_dict[j]\n\n    final_count = Counter(count_dict)\n    return final_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = Counter(lst) \n    for i in range(len(tup)): \n        tup[i] = cnt[tup[i]] \n    return tup"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # using Counter module in Python to count the occurence of elements in the list in the tuple\n    count = Counter(tup[lst.index(i)] for i in lst if i in tup)\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Convert the tuple to a list and convert the list to a dictionary\n    lst = list(tup)\n    count = Counter(lst)\n    # Count the occurence of each element in the list\n    for item in lst:\n        count[item] += 1\n    \n    # Return the count dictionary\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(lst)\n    count_dict.update(tup)\n    result = {}\n    for key, value in count_dict.items():\n        if key in tup:\n            result[key] = value\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num**3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Initialize an empty list to store the cubes of each element in the input list\n    cubes = []\n    # Loop through each element in the input list\n    for num in nums:\n        # Calculate the cube of the current element and append it to the cubes list\n        cubes.append(num**3)\n    # Return the cubes list\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (2*i-1) // 2\n    return sum\n\nprint(cal_sum(10)) # Output: 170"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [2, 5, 10, 20, 40, 80, 160]\n    total_sum = 0\n\n    for i in range(len(perrin_numbers)):\n        total_sum += perrin_numbers[i]\n\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i ** 2) + (i - 1) ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0 \n    for i in range(1, n+1): \n        perrin_sum += i \n        if perrin_sum >= n: \n            return perrin_sum "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n+1):\n        perrin_sum += i * (n-i+1) // (i+1)\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize variables\n    perrin_number = 1\n    sum_perrin = 0\n    \n    # Calculate the sum of perrin numbers\n    while perrin_number <= n:\n        sum_perrin += perrin_number\n        perrin_number += 2\n    \n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perrin_sum(n):\n    '''\n    Calculate the sum of Perrin numbers.\n    '''\n    perrin_nums = [1, 2, 5, 10, 20, 40, 80, 160, 320, 640, 1280, 2560, 5120, 10240, 20480]\n    total = 0\n    for num in perrin_nums:\n        total += num\n        if total > n:\n            break\n    return total\n\nn = int(input(\"Enter the upper limit: \"))\nresult = perrin_sum(n)\nprint(\"The sum of Perrin numbers up to\", n, \"is\", result)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    total_sum = 0\n    \n    for num in perrin_numbers:\n        total_sum += num\n        \n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(len(l)):\n        if len(str) <= l[i]:\n            extracted_strings.append(str)\n            break\n        else:\n            extracted_strings.append(str[:l[i]])\n            str = str[l[i]:]\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].index(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and the size of the strings to extract as arguments.\n    The function returns a new list of strings of length `size` containing the extracted strings.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) > size:\n            extracted_list.append(string[:size])\n        else:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function extracts the specified size of strings from a given list of string values.\n    '''\n    str_list = str_list[:l]  # extracting the specified size of strings\n    return str_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [str[:size] for str in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l if len(s) >= l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of strings and a size of strings to extract as input and returns the list of extracted strings.\n    \"\"\"\n    result = []\n    for i in range(len(str_list)):\n        result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and an integer representing the desired size of the strings.\n    It returns a list of the specified size strings.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    Extract specified size of strings from a given list of string values.\n\n    Args:\n        str_list (list): A list of string values.\n        size (int): The specified size of string values to extract.\n\n    Returns:\n        list: A list of extracted string values.\n    \"\"\"\n\n    extracted_list = []\n\n    for str in str_list:\n        if len(str) >= size:\n            extracted_list.append(str[:size])\n\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespace characters\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expression to remove all whitespaces\n    text2 = re.sub('\\s+','', text1).strip()\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regex\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function will remove all the whitespaces from the given string.\n    '''\n    # Using regular expression to remove all whitespaces\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces using regular expression\n    text = re.sub('\\s+','', text)\n    # remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub('\\s+','', text1).strip()"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return (actual_cost - sale_amount)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    \n    if actual_cost >= sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.05\n    if actual_cost >= (sale_amount * (1 - loss_percentage)):\n        return sale_amount * (1 - loss_percentage) - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = 0.05 #loss percentage\n    loss_amount = (sale_amount * loss_percentage) - sale_amount\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        while n%i == 0:\n            sum += i\n            n //= i\n    if n > 1:\n        sum += n\n    return sum\n\nprint(sumofFactors(60))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (2*i) == 0:\n                sum += n/i + n/2*i\n            else:\n                sum += n/i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (i+2) == 0:\n                total += i + n // i\n            else:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # initialize sum variable to 0\n    sum = 0\n    \n    # loop through odd numbers from 3 to sqrt(n)\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        \n        # check if i is evenly divisible by n\n        if n % i == 0:\n            \n            # if it is, add it to the sum\n            sum += i\n            \n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    This function takes an integer as input and returns the sum of even factors of that number.\n    \"\"\"\n    sum = 0 \n    for i in range(2, int(math.sqrt(n))+1) : \n        if(n%i == 0 and i%2 == 0) : \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1) : \n        if n % i == 0 : \n            count += 1\n    if count == 0 : \n        return n\n    else : \n        sum = 0\n        for i in range(2, int(math.sqrt(n))+1) : \n            if n % i == 0 : \n                sum += i\n        return sum + n"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Regular expression pattern to match a word containing 'z'\n    pattern = r'\\b[a-zA-Z]*z\\b'\n    \n    # Use the re.findall() function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Print all matches found\n    for match in matches:\n        print(match)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(word_pattern, text, flags=re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.findall('\\w+z', text)\n    if word:\n        print(word[0])\n    else:\n        print('No word containing \"z\" found.')"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    match_obj = re.findall(word_pattern, text)\n    return match_obj"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    match = re.search(pattern, text)\n\n    if match:\n        print(f\"The word containing 'z' is: {match.group()}\")\n    else:\n        print(\"The word 'z' was not found in the text.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b(z)\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function will match a word containing 'z' in the given text.\n    '''\n    pattern = r'\\b(z)\\w+\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        print(\"No matches found\")\n    else:\n        for match in matches:\n            print(\"Match found:\", match)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]*z[a-z]*\\b'\n    result = re.search(pattern, text)\n\n    if result:\n        print(f'The word \"z\" is found in the text: {result.group()}')\n    else:\n        print('The word \"z\" is not found in the text.')"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check for the length of the month number\n    if len(monthnum)!= 2:\n        print(\"Invalid month number.\")\n        return\n    \n    # Convert the month number to a number\n    monthnum = int(monthnum)\n    \n    # Check if the number is in the range of 1 to 12\n    if monthnum < 1 or monthnum > 12:\n        print(\"Invalid month number.\")\n        return\n    \n    # Check if the month number is divisible by 100 (i.e., leap year)\n    if monthnum % 100 == 0:\n        if monthnum % 400 == 0:\n            print(\"31 days\")\n        else:\n            print(\"28 days\")\n    else:\n        if monthnum % 4 == 0:\n            print(\"31 days\")\n        else:\n            print(\"28 days\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 1 or monthnum == 3 or monthnum == 5 or monthnum == 7 or monthnum == 8 or monthnum == 10 or monthnum == 12:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return False\n    elif monthnum == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days, False otherwise.\n    \"\"\"\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum > 12 or monthnum < 1:\n        return False\n    else:\n        return days_in_months[monthnum-1]"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 2 == 0:\n        if monthnum2 in [4, 6, 9, 11]:\n            return True\n        else:\n            return False\n    else:\n        if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        else:\n            return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    \"\"\"\n    This function takes a month number as input and returns True if it contains 31 days, otherwise False.\n    \"\"\"\n    if monthnum == 2 or monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 30, 10: 31, 12: 31}\n    return monthnum in days_in_month"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return False\n    else:\n        print(\"Invalid month number!\")\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    days_in_month = {1: 31, 3: 31, 5: 31, 7: 31, 8: 31, 10: 31, 12: 31, 2: 28, 4: 30, 6: 30, 9: 30, 11: 30}\n\n    if monthnum in days_in_month:\n        if days_in_month[monthnum] == 28 and monthnum in {2, 4, 6, 9, 11}:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [word[::-1] for word in stringlist]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # create a new list to store the reversed strings\n    reversed_list = []\n    # iterate through each string in the input list\n    for string in stringlist:\n        # convert the string to a list of characters\n        chars = list(string)\n        # reverse the order of the characters in the list\n        chars.reverse()\n        # convert the list of characters back to a string\n        reversed_string = ''.join(chars)\n        # add the reversed string to the new list\n        reversed_list.append(reversed_string)\n    # return the new list of reversed strings\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the current string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # loop through each string in the list\n    for i in range(len(stringlist)):\n        # reverse the string and assign it to the same index in the list\n        stringlist[i] = stringlist[i][::-1]"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the minimum length sublist\n    min_length = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    This function finds the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf') # initialize the minimum length to infinity\n    min_sublist = None # initialize the minimum sublist as None\n    for i in range(len(lst)):\n        sublist = lst[i:] # extract the sublist starting from index i\n        if len(sublist) < min_length: # check if the length of the sublist is less than the minimum length\n            min_length = len(sublist) # update the minimum length\n            min_sublist = sublist # update the minimum sublist\n    return min_sublist # return the minimum sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst):\n    # initialize variables to store minimum length and minimum sublist\n    min_len = float('inf')\n    min_sublist = []\n\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        # loop through each element in the sublist\n        for j in range(i+1, len(lst[i])+1):\n            # check if the length of the sublist is less than minimum length\n            if j-i < min_len:\n                # update minimum length and minimum sublist\n                min_len = j-i\n                min_sublist = lst[i:j]\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize minimum length and its index \n    min_len = float('inf') \n    min_idx = -1 \n    # Traverse through the list \n    for i in range(len(lst)): \n        # If the length of the current sublist is smaller than minimum \n        if len(lst[i]) < min_len: \n            # Update the minimum length and its index \n            min_len = len(lst[i]) \n            min_idx = i \n    # Return the minimum sublist \n    return lst[min_idx] "
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Find the length of the longest sublist\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i+1 > max_length:\n                max_length = j-i+1\n    # Initialize the minimum sublist length as the maximum length\n    min_length = max_length\n    # Find the minimum sublist\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i+1 == min_length:\n                min_sublist = lst[i:j]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize min_len to the length of the entire list\n    min_len = len(lst)\n    # initialize min_sublist to an empty list\n    min_sublist = []\n    # loop through the list and check each sublist for minimum length\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_len:\n                # update min_len and min_sublist if a shorter sublist is found\n                min_len = len(sublist)\n                min_sublist = sublist\n    # return the sublist with minimum length\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length,breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return length * breadth"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile('[A-Z]+')\n\n    # Find all uppercase substrings in the input string\n    matches = pattern.findall(str1)\n\n    # Loop through each match and replace it with an empty string\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    # Return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(?i)[A-Z]+', '', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings\n    '''\n    pattern = re.compile(r'([a-z]+)')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define regex pattern to find uppercase substrings\n    pattern = r'[A-Z]+'\n    # use re.findall() to find all uppercase substrings\n    uppercase_substrings = re.findall(pattern, str1)\n    # loop through all uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n    # return the modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    uppercase_pattern = re.compile(r'(?i)[A-Z]')\n    return uppercase_pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?<!\\w)\\b[A-Z]+\\b(?!\\w)'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Convert string to lowercase\n    str1 = str1.lower()\n    # Use regular expressions to find all uppercase substrings\n    match = re.findall(r'[A-Z][a-z]+', str1)\n    # Loop through matches and replace them with an empty string\n    for item in match:\n        str1 = str1.replace(item, '')\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # find all uppercase substrings\n    uppercase = re.findall(r'[A-Z]+', str1)\n    # remove uppercase substrings from string\n    for up in uppercase:\n        str1 = re.sub(up, '', str1)\n    # return modified string\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    # Define regular expression pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]{1}[a-z]*\\b'\n    \n    # Use re.findall() method to find all occurrences of uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n    \n    # Iterate over all uppercase substrings and replace them with an empty string\n    for substring in uppercase_substrings:\n        str1 = str1.replace(substring, '')\n        \n    return str1"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for i in lst:\n        new_lst.append(i[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    \"\"\"\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for item in lst:\n        res.append(item[0])\n    return res\n\nlst = [[\"apple\", \"banana\", \"cherry\"], [\"orange\", \"grape\", \"kiwi\"], [\"mango\", \"papaya\", \"guava\"]]\nresult = Extract(lst)\nprint(result) # Output: ['apple', 'orange','mango']\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if sublist:\n            new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        if isinstance(i, list):\n            res.append(i[0])\n        else:\n            res.append(i)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        if isinstance(item, list):\n            lst.append(item[0])\n        else:\n            lst.append(item)\n    return lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of upper case characters in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a Python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Create a list to store the combinations\n    combinations = []\n\n    # Create a function to generate all combinations of length n\n    def generate_combinations(n, curr_comb, pool):\n        # Base case: if n becomes zero, add the current combination to the list of combinations\n        if n == 0:\n            combinations.append(curr_comb)\n            return\n        # Generate all combinations of length n-1 using recursion with remaining elements in pool\n        generate_combinations(n-1, curr_comb, pool)\n        # Generate all combinations of length n by adding the remaining elements in pool to the current combination\n        for i in range(len(pool)):\n            curr_comb.append(pool[i])\n            generate_combinations(n, curr_comb, pool[:i]+pool[i+1:])\n            curr_comb.pop()\n\n    # Generate all combinations of length n using the list of elements as the pool\n    generate_combinations(len(list1), [], list1)\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(tuple(list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    def comb(n, k):\n        if n == 0 or k == 0:\n            return []\n        if n > k:\n            return comb(n, k - 1)\n        else:\n            return [comb(n - 1, k) + [list1[n - 1]], comb(n - 1, k - 1) + [list1[n - 1]]]\n\n    res = []\n    for i in range(1, len(list1) + 1):\n        res += comb(i, i)\n\n    return res"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) < 2:\n        return []\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # First, we create a list of all the possible combinations by recursively iterating over each element in the list.\n    def generate_combinations(current, remaining, index):\n        # If there are no more elements to add to the combination, we add it to our list of combinations.\n        if not remaining:\n            combinations.append(current[:])\n            return\n        # If we have reached the end of the list, we can't add any more elements to the combination, so we return.\n        if index == len(remaining):\n            return\n        # Otherwise, we add the next element to the combination and recursively call the function again with the remaining elements.\n        generate_combinations(current+[remaining[index]], remaining[:index]+remaining[index+1:], index+1)\n\n    # Initialize an empty list to hold all the combinations.\n    combinations = []\n    # Call the recursive function to generate all the combinations.\n    generate_combinations([], list1, 0)\n    # Return the list of combinations.\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combination = list1[j:j+i]\n            result.append(combination)\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list as input and returns all possible combinations of its elements.\n    \"\"\"\n    # Create an empty list to store the combinations\n    combinations = []\n    # Get the length of the list\n    n = len(lst)\n    # Loop through all possible combinations of length n\n    for i in range(n):\n        # Loop through all elements of the list\n        for j in range(i+1, n+1):\n            # Add the current combination to the combinations list\n            combinations.append(lst[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(list1[i:j], end=' ')"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(max_ending_here * arr[i], arr[i], max_ending_here)\n        min_ending_here = min(min_ending_here * arr[i], arr[i], min_ending_here)\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n        elif i > 0:\n            current_product = max(arr[i], current_product) * arr[i]\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = float('-inf')\n    max_ending_here = 1\n\n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables for maximum product subarray and current maximum product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Traverse through the array\n    for i in range(len(arr)):\n        # Update current product\n        current_product *= arr[i]\n        \n        # Update maximum product if current product is greater than maximum product\n        if current_product > max_product:\n            max_product = current_product\n        \n        # If current product is negative, reset it to 1\n        if current_product < 0:\n            current_product = 1\n    \n    # Return maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Update the current product\n        current_product *= arr[i]\n        \n        # Update the maximum product if the current product is greater\n        if current_product > max_product:\n            max_product = current_product\n        \n        # If the current product is negative, set it to 1\n        if current_product < 0:\n            current_product = 1\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(value == values[0] for value in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize a counter to keep track of the number of unique values\n    unique_count = 0\n    \n    # Loop through all the values in the dictionary\n    for value in dict.values():\n        # If the current value is the same as the n-th value, increment the unique count\n        if value == n:\n            unique_count += 1\n    \n    # Check if all values are the same\n    if unique_count == len(dict.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes a dictionary and an integer n as input.\n    It checks if all values in the dictionary are the same, if yes then it returns True, else it returns False.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Create a set to store the values of the dictionary\n    values = set(dict.values())\n    # Check if the length of the set is 1\n    if len(values) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.keys()) == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n    else:\n        for value in dict.values():\n            if value!= dict.values()[0]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        if dict[i] == dict[i+1]:\n            count += 1\n    if count == n-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    value = True\n    for i in range(n):\n        if dict[i]!= dict[0]:\n            value = False\n            break\n    return value"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_values = []\n    for value in dict.values():\n        all_values.append(value)\n\n    if len(set(all_values)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    for value in dict.values():\n        if value!= n:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value is not None and value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    # Create a new dictionary\n    new_dict = {}\n    # Loop through each key-value pair in the original dictionary\n    for key, value in dict1.items():\n        # Check if the value is empty (i.e. None, '', [], {}, or 0)\n        if not value:\n            # Skip the key-value pair if the value is empty\n            continue\n        # Add the key-value pair to the new dictionary\n        new_dict[key] = value\n    # Return the new dictionary\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k:v for k, v in dict1.items() if v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) <= 1:\n        return 0\n    \n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here = max(max_product_ending_here * arr[i], max_product_ending_here, arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n    \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        if arr[0] > arr[1]:\n            a = arr[0]\n            b = arr[1]\n        else:\n            a = arr[1]\n            b = arr[0]\n        max_product_1 = max_product(arr[1:])\n        max_product_2 = max_product(arr[2:])\n        return max(a*max_product_1, b*max_product_2)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n        else:\n            # arr[i] is equal to min_ending_here, do nothing\n            pass\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n        if min_ending_here < 0:\n            min_ending_here = 0\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # sort the array in non-decreasing order\n    arr = sorted(arr)\n\n    # initialize variables for max product\n    max_product = float('-inf')\n    current_product = 1\n\n    # loop through the array\n    for i in range(len(arr)):\n        # if the current element is greater than the previous element, update the current product\n        if arr[i] > arr[i-1]:\n            current_product *= arr[i]\n        # otherwise, update the max product and reset the current product\n        else:\n            if current_product > max_product:\n                max_product = current_product\n            current_product = 1\n\n    # check if the current product is greater than max_product\n    if current_product > max_product:\n        max_product = current_product\n\n    # return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_so_far = max_ending_here = arr[0]\n    \n    for i in range(1, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n            \n        if arr[i] > max_so_far:\n            max_so_far = arr[i]\n            \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return arr[0]\n\n    max_ending_here = max(arr[0], arr[1])\n    max_so_far = max_ending_here\n    min_ending_here = min(arr[0], arr[1])\n    min_so_far = min_ending_here\n\n    for i in range(2, n):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_ending_here = max(max_ending_here, arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n        min_so_far = min(min_so_far, min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    max_product = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            subarray.sort()\n            product = 1\n            for num in subarray:\n                product *= num\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Given an array of integers, find the maximum product of two adjacent integers in the array.\n    \"\"\"\n    max1 = max2 = arr[0]\n    min1 = min2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max1 = arr[i]\n            min2 = min1\n        elif arr[i] < min1:\n            min1 = arr[i]\n            max2 = max1\n        else:\n            min2 = min(min2, arr[i])\n            max2 = max(max2, arr[i])\n\n    return max(max1 * max2, max1 * min1)"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Create a table of maximum products for all pairs of increasing subsequences\n    dp = [[0 for j in range(n)] for i in range(n)]\n\n    # Base case: if arr is empty or has only one element, return 0\n    if n == 0 or n == 1:\n        return 0\n\n    # Base case: if arr has only two elements, return their product\n    if n == 2:\n        return arr[0] * arr[1]\n\n    # Fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            # If the current element is smaller than the next element, update the maximum product\n            if arr[i] > arr[j]:\n                dp[i][j] = max(arr[i] * dp[i - 1][j], arr[j] * dp[i - 1][i])\n\n    # Return the maximum product obtained\n    return max(dp[n - 1][0], dp[n - 1][n - 1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # initialize variables to keep track of current subsequence and its product\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        # update max_so_far and max_ending_here based on current value\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        # update min_ending_here based on current value\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        # update max_so_far based on max_ending_here and min_ending_here\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # Initialize a variable to store the sum of neighboring elements\n    sum_neighb = 0\n    # Loop through each element in the tuple, except the last one\n    for i in range(len(test_tup)-1):\n        # Add the current element and the next element to get the sum of neighboring elements\n        sum_neighb += test_tup[i] + test_tup[i+1]\n    # Return the sum of neighboring elements\n    return sum_neighb"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup) - 1):\n        result += test_tup[i] + test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables\n    sum_prev = 0\n    sum_curr = 0\n    # Iterate over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element with the previous element to get the sum of the pair\n        sum_curr = test_tup[i] + test_tup[i+1]\n        # Update the sum of the previous element\n        sum_prev = test_tup[i+1]\n        # Return the sum of the pair\n        return sum_curr"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # initialize the variables to store the sum of neighboring elements\n    prev_sum = 0\n    curr_sum = 0\n\n    # loop through the tuple and add the neighboring elements to the sum\n    for i in range(len(test_tup) - 1):\n        curr_sum = test_tup[i] + test_tup[i + 1]\n        # check if the sum is greater than the previous sum\n        if curr_sum > prev_sum:\n            # if it is, add the difference to the previous sum and store the result\n            prev_sum = prev_sum + (curr_sum - prev_sum)\n        else:\n            # if it isn't, just store the current sum\n            prev_sum = curr_sum\n\n    # return the final sum\n    return prev_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    n = len(test_tup)\n    if n < 2:\n        return 0\n    elif n == 2:\n        return test_tup[0] + test_tup[1]\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:]) + add_pairwise(test_tup[:-1])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize variables\n    result = 0\n    size = len(test_tup)\n    \n    # Loop through the tuple and add the adjacent elements\n    for i in range(1, size):\n        result += test_tup[i-1] + test_tup[i]\n        \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # loop through the tuple\n    for i in range(len(test_tup) - 1):\n        # add the current element with the next element\n        sum += test_tup[i] + test_tup[i+1]\n    # return the sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    if length < 2:\n        return None\n    \n    pair_sum = 0\n    for i in range(length-1):\n        pair_sum += test_tup[i] + test_tup[i+1]\n    \n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i-1] + test_tup[i]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i+1]\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a number n as input.\n    It calculates the product of the array multiplications modulo n.\n\n    Returns:\n    The product of the array multiplications modulo n.\n    \"\"\"\n\n    # Initialize the product variable to 1\n    product = 1\n\n    # Iterate through each element in the array\n    for i in range(len(arr)):\n        # Multiply the current element with the product variable\n        product = (product * arr[i]) % n\n\n    # Return the product\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # Initialize variables\n    product = 1\n    remainder = 0\n\n    # Iterate through the array and multiply each element with the current product\n    for i in range(len(arr)):\n        product = product * arr[i] % n\n\n    # Return the product modulo n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array of integers and a number n as input and returns the remainder of \n    the product of the array modulo n.\n    '''\n    \n    # Calculate the product of the array\n    prod = 1\n    for num in arr:\n        prod *= num\n    \n    # Calculate the remainder of the product\n    rem = prod % n\n    \n    return rem"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments:\n    arr: An array of integers\n    n: An integer that is a divisor of the array\n    \n    This function returns the product of the array multiplication modulo n.\n    '''\n\n    # initialize a variable to store the product\n    result = 1\n\n    # iterate through the array and multiply each element with the result\n    for num in arr:\n        result = (result * num) % n\n    \n    # return the result modulo n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and an integer n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    if len(l) < 2:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1!= l[i+1]:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(1, len(l)):\n        if l[i] == l[i-1] + 1:\n            count += 1\n    if count == 0:\n        return \"The given list does not contain consecutive numbers\"\n    else:\n        return \"The given list contains consecutive numbers\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n == 0:\n        return True\n    for i in range(n-1):\n        if l[i] == l[i+1]+1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    n = len(l) \n    for i in range(n-1): \n        if l[i] == l[i+1]: \n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    # Initialize a boolean variable to keep track of the consecutive state\n    consecutive = True\n    \n    # Traverse through the list and check if each element is consecutive with the previous element\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            consecutive = False\n            break\n    \n    # If all elements are consecutive, return True\n    if consecutive:\n        return True\n    \n    # If at any point the list is not consecutive, return False\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from the first tuple list to remove duplicates\n    set1 = set(test_list1)\n    # Create a set from the second tuple list to remove duplicates\n    set2 = set(test_list2)\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    # Return the intersection as a tuple list\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set back to a list\n    result = list(intersection)\n    # sort the result list in ascending order of the original lists\n    result.sort(key=lambda x: (test_list1.index(x), test_list2.index(x)))\n    # return the sorted result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes two tuple lists as input and returns a new tuple list containing the elements that are present in both input lists.\n    The elements are compared in the order they appear in the input lists.\n    '''\n    # Initialize an empty list to store the intersection of elements\n    result_list = []\n    # Loop through each element in the first input list\n    for element1 in test_list1:\n        # Check if the element is present in the second input list\n        if element1 in test_list2:\n            # If it is present, append it to the result list\n            result_list.append(element1)\n    # Return the result list\n    return tuple(result_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check that the two lists have the same length\n    if len(test_list1)!= len(test_list2):\n        return None\n    \n    # Create a set to store the common elements\n    common_set = set()\n    \n    # Iterate over the first list and check if each element is in the second list\n    for element in test_list1:\n        if element in test_list2:\n            # Add the element to the common set if it is also in the second list\n            common_set.add(element)\n    \n    # Convert the common set to a list and sort it\n    sorted_common_list = sorted(list(common_set))\n    \n    # Return the sorted list of common elements\n    return sorted_common_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    # create a set of all elements in test_list1\n    set1 = set(test_list1)\n    # create a set of all elements in test_list2\n    set2 = set(test_list2)\n    # find the intersection of sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set back to a list\n    intersection_list = list(intersection)\n    # sort the list of tuples in lexicographic order\n    intersection_list.sort()\n    # return the list of tuples\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create an empty set to store the unique elements from both lists\n    unique_elements = set()\n    \n    # loop through each element in the first list\n    for item in test_list1:\n        # if the element is not already in the set, add it\n        if item not in unique_elements:\n            unique_elements.add(item)\n    \n    # create an empty set to store the intersection of the unique elements from both lists\n    intersection = set()\n    \n    # loop through each element in the second list\n    for item in test_list2:\n        # if the element is in the set of unique elements from the first list, add it to the intersection set\n        if item in unique_elements:\n            intersection.add(item)\n    \n    # return the intersection as a tuple\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Removing duplicates from test_list1 and test_list2\n    test_list1 = list(set(test_list1))\n    test_list2 = list(set(test_list2))\n    \n    # Sorting test_list1 and test_list2\n    test_list1.sort()\n    test_list2.sort()\n    \n    # Creating empty set to store the common elements\n    common_set = set()\n    \n    # Looping through each element in test_list1\n    for i in range(len(test_list1)):\n        # Checking if the element is present in test_list2\n        if test_list1[i] in test_list2:\n            # Adding the element to the common_set\n            common_set.add(test_list1[i])\n    \n    # Converting the common_set to a list and returning it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both tuple lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a set of all unique elements in both lists\n    unique_elements = set(test_list1 + test_list2)\n    # Create an empty set to store the intersection\n    intersection = set()\n    # Loop through all elements in the unique set\n    for element in unique_elements:\n        # If the element is present in both lists, add it to the intersection set\n        if element in test_list1 and element in test_list2:\n            intersection.add(element)\n    # Return the intersection as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n\n    # Create a set from the first list\n    set1 = set(test_list1)\n\n    # Create a set from the second list\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # initialize an empty string to store the result\n    result = \"\"\n    # loop over each character in the string\n    for char in str1:\n        # if the character matches the search character, replace it with the replacement character\n        if char == ch:\n            result += newch\n        # otherwise, add the original character to the result string\n        else:\n            result += char\n    # return the final result string\n    return result"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes a string, a character to be replaced, and a new character to replace it with.\n    It replaces all instances of the character to be replaced with the new character in the string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Loop through each character in the list and replace the character if it matches the target character\n    for i in range(len(char_list)):\n        if char_list[i] == ch:\n            char_list[i] = newch\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character `ch` in the string `str1` with the character `newch`.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            new_str += newch\n        else:\n            new_str += str1[i]\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an argument and returns a sorted dictionary based on the value of the dictionary's keys.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    result = {}\n    for key, value in sorted_count:\n        result[key] = value\n    return result"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    # Sort the Counter object by values in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    # convert dictionary to Counter object\n    counter = Counter(dict1)\n    # sort Counter object by value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    # convert sorted Counter object back to dictionary\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object by value\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary with the sorted items\n    sorted_dict = {}\n    for item in sorted_counter:\n        sorted_dict[item[0]] = item[1]\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n\n    # find the largest and smallest values\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n\n    # calculate the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Finding the maximum and minimum values in the array\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # Adding the maximum and minimum values\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in ascending order\n    nums.sort()\n\n    # Find the largest and smallest value in the sorted array\n    largest = nums[-1]\n    smallest = nums[0]\n\n    # Calculate the sum of the largest and smallest value\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Get the smallest and largest value in the array\n    smallest = max(nums)\n    largest = min(nums)\n\n    # Calculate the sum of the smallest and largest value\n    total = smallest + largest\n\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    # add the maximum and minimum values together\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Find the maximum and minimum values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return None\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return 0\n    else:\n        min_val = min(nums)\n        max_val = max(nums)\n        return min_val + max_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and returns True if it is all lowercase, and False otherwise.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define a regular expression pattern for lowercase substrings\n    pattern = re.compile(r'\\b[a-z]\\w*\\b', re.IGNORECASE)\n    # Use the pattern to find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # Loop through all matches and remove them from the string\n    for match in matches:\n        str1 = re.sub(r'\\b' + match + r'\\b', '', str1, flags=re.IGNORECASE)\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function will remove all lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    string = string.lower()\n\n    # Use regular expressions to remove all lowercase substrings\n    pattern = re.compile('[a-z]+')\n    cleaned_string = pattern.sub('', string)\n\n    return cleaned_string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the given string using regular expressions\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # Find all lowercase substrings in the given string\n    lowercase_substrings = re.findall(r'\\b[a-z]+\\b', str1)\n\n    # Iterate over each lowercase substring and remove it from the string\n    for substring in lowercase_substrings:\n        str1 = re.sub(r'\\b' + substring + r'\\b', '', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Compile regular expression pattern for lowercase substrings\n    lowercase_pattern = re.compile(r'[a-z]+')\n    # Find all lowercase substrings in the given string\n    matches = lowercase_pattern.findall(str1)\n    # Loop through all matches and replace them with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n    # Return the modified string\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    pattern = r'[a-z]+'\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert string to lowercase\n    str1 = str1.lower()\n    # split string into words\n    words = str1.split()\n    # loop through words and remove lowercase substrings\n    new_words = []\n    for word in words:\n        if word.isalpha():\n            new_word = re.sub('[a-z]', '', word)\n            new_words.append(new_word)\n    # join words into a string and return the result\n    result =''.join(new_words)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lower_case_pattern = re.compile(r'[a-z]+')\n    return lower_case_pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer number as input and returns the first digit of the number.\n    '''\n    # Convert the given number to a string\n    num_str = str(n)\n    # Get the first character of the string\n    first_char = num_str[0]\n    # Return the first digit of the number\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the input number to a string\n    num_str = str(n)\n    # Return the first character of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the given number to a string\n    str_n = str(n)\n    # convert the first digit of the string to an integer\n    first_digit = int(str_n[0])\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(n)\n    # find the first digit of the string\n    first_digit = num_str[0]\n    # return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Find the length of the number\n    length = len(str(n))\n    # Convert the number to a string and take the first character\n    first_digit = str(n)[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num = str(n)\n    # Return the first digit of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n<10:\n        return n\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        while n > 9:\n            n = n // 10\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # if the input is a string or list, convert it to a number first\n    if type(n) not in [int, float]:\n        n = int(n)\n    # if the input number is less than 10, return 0\n    if n < 10:\n        return 0\n    # iterate through each digit of the number\n    for digit in str(n):\n        # if the first digit is found, return its value\n        if digit == str(n)[0]:\n            return int(digit)"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(lst):\n    \"\"\"\n    Takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    odd_numbers = []\n    for num in list:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for num in list:\n        if num % 2!= 0:\n            odd.append(num)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    odd_list = [] # initialize an empty list to store odd numbers\n    \n    for num in list: # iterate through each number in the input list\n        if num % 2 == 1: # check if the number is odd\n            odd_list.append(num) # if it is, append it to the odd list\n\n    return odd_list # return the odd list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculate sum of cubes of first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    \n    # calculate sum of first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n    \n    # find difference between sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    This function calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    \n    sum_of_natural_numbers = 0\n    for j in range(1, n+1):\n        sum_of_natural_numbers += j\n    \n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes\n    def sum_of_cubes(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i**3\n        return sum\n    \n    # Function to calculate the sum of first n natural numbers\n    def sum_of_first_n(n):\n        sum = 0\n        for i in range(1, n+1):\n            sum += i\n        return sum\n    \n    # Function to find the difference between the two sums\n    def find_difference(n):\n        return sum_of_cubes(n) - sum_of_first_n(n)\n    \n    # Call the function to find the difference between the two sums\n    diff = find_difference(n)\n    \n    # Print the result\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", diff)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # finding the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n    \n    # finding the sum of the first n natural numbers\n    sum_nums = sum(range(1, n+1))\n    \n    # finding the difference between the two sums\n    diff = sum_cubes - sum_nums\n    \n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_numbers = sum(range(1,n+1))\n    return abs(sum_of_cubes - sum_of_numbers)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is:\", difference(n))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    def sum_of_cubes(n):\n        \"\"\"\n        Returns the sum of cubes of the first n natural numbers.\n        \"\"\"\n        return n * (n + 1) * (2 * n + 1) // 6\n\n    def sum_of_natural_numbers(n):\n        \"\"\"\n        Returns the sum of the first n natural numbers.\n        \"\"\"\n        return n * (n + 1) // 2\n\n    sum_of_cubes_result = sum_of_cubes(n)\n    sum_of_natural_numbers_result = sum_of_natural_numbers(n)\n\n    difference_result = sum_of_cubes_result - sum_of_natural_numbers_result\n\n    return difference_result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n\n    sum_cubes = 0\n    sum_natural = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n        sum_natural += i\n    \n    return abs(sum_cubes - sum_natural)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    sum_natural = 0\n\n    # calculating sum of cubes of first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n\n    # calculating sum of first n natural numbers\n    for i in range(1, n+1):\n        sum_natural += i\n\n    # finding the difference between sum of cubes and sum of natural numbers\n    difference = sum_cubes - sum_natural\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i ** 3\n    # Calculate the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n    # Calculate the difference between the two sums\n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    for i in range(len(A)):\n        xor_val = A[i]\n        for j in range(i+1,len(A)):\n            xor_val = xor_val ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n\n    # Initialize the count variable to 0\n    count = 0 \n\n    # Iterate through all possible pairs of elements in the array\n    for i in range(N) : \n        for j in range(i+1,N) : \n\n            # XOR the two elements and check if the result is odd\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0 : \n\n                # Increment the count variable\n                count += 1 \n\n    # Return the count of odd xor pairs\n    return count "
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and its size N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    # Initializing the count variable\n    count = 0\n\n    # Looping through the array elements from 0 to N-1\n    for i in range(N):\n        # Looping through the array elements from i+1 to N-1\n        for j in range(i+1, N):\n            # XOR operation to find the xor value\n            xor_val = A[i] ^ A[j]\n\n            # If the xor value is odd, increment the count variable\n            if xor_val % 2 == 1:\n                count += 1\n\n    # Returning the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    # Create an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    for i in range(N):\n        if A[i] not in freq:\n            freq[A[i]] = 1\n        else:\n            freq[A[i]] += 1\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through the array and for each element, check if the frequency of its even parity is odd\n    for i in range(N):\n        even_freq = freq.get(2*A[i], 0)\n        if even_freq % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize the count variable to zero\n    count = 0\n    \n    # Loop through the array A\n    for i in range(N):\n        # Calculate the xor of the ith element with all the elements after it\n        xor_sum = sum([A[j] for j in range(i+1,N)])\n        \n        # Check if the xor value is odd\n        if xor_sum % 2 == 1:\n            # If it is, increment the count\n            count += 1\n    \n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2!= 0:\n                xor_count += 1\n    return xor_count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the result\n    result = ''\n\n    # iterate over each character in the input string\n    for char in string:\n        # convert the current character to lowercase\n        lower_char = char.lower()\n        # convert the current character to uppercase\n        upper_char = char.upper()\n        # add the lowercase and uppercase characters to the result string\n        result += lower_char + upper_char\n\n    # return the result string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all characters toggled.\n    \"\"\"\n    # Convert the string to lowercase\n    lower_string = string.lower()\n    # Initialize an empty string to store the modified characters\n    modified_string = \"\"\n    # Iterate over each character in the lowercase string\n    for char in lower_string:\n        # If the character is uppercase, convert it to lowercase\n        if char.isupper():\n            modified_string += char.lower()\n        # If the character is lowercase, convert it to uppercase\n        elif char.islower():\n            modified_string += char.upper()\n        # Otherwise, leave it unchanged\n        else:\n            modified_string += char\n    # Return the modified string\n    return modified_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(char) ^ 32) if char.isupper() else char for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string\n"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return ''.join(chr(ord(c) ^ 32) if c.islower() else chr(ord(c) ^ 32) for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize an empty string to store the toggled string\n    toggled_string = \"\"\n\n    # iterate over each character in the original string\n    for char in string:\n        # if the character is uppercase, convert it to lowercase\n        if char.isupper():\n            toggled_string += char.lower()\n        # if the character is lowercase, convert it to uppercase\n        elif char.islower():\n            toggled_string += char.upper()\n        # otherwise, leave it unchanged\n        else:\n            toggled_string += char\n\n    # return the toggled string\n    return toggled_string"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        diff = n1 // 10**i - n2 // 10**i\n        sum_diff += diff**2\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= 0 and n2!= 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings\n    num1_str = str(n1)\n    num2_str = str(n2)\n    # Calculate the length of each string\n    num1_len = len(num1_str)\n    num2_len = len(num2_str)\n    # Initialize the sum of per-digit differences\n    digit_diff_sum = 0\n    # Loop through each character in the first string\n    for i in range(num1_len):\n        # Get the corresponding characters in the second string\n        char1 = num1_str[i]\n        char2 = num2_str[i]\n        # Convert the characters to integers\n        int1 = int(char1)\n        int2 = int(char2)\n        # Calculate the per-digit difference and add it to the sum\n        digit_diff = abs(int1 - int2)\n        digit_diff_sum += digit_diff\n    # Return the sum of per-digit differences\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    # Function to find the sum of the per-digit difference between two integers\n    def sum_of_per_digit_diff(n1, n2):\n        sum_diff = 0\n        for i in range(10):\n            n1_digit = n1 // (10**i)\n            n2_digit = n2 // (10**i)\n            diff = abs(n1_digit - n2_digit)\n            sum_diff += diff\n        return sum_diff\n\n    # Find the sum of per-digit differences between n1 and n2\n    return sum_of_per_digit_diff(n1, n2)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to lists of digits\n    num1 = [int(d) for d in str(n1)]\n    num2 = [int(d) for d in str(n2)]\n    # compare the numbers\n    diff_sum = 0\n    for i in range(len(num1)):\n        diff = abs(num1[i] - num2[i])\n        diff_sum += diff\n    # return the sum of differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference\n    diff_sum = 0\n    for i in range(len(digits1)):\n        diff = digits1[i] - digits2[i]\n        diff_sum += abs(diff)\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a dictionary to store the difference between each digit\n    digit_diff = {}\n\n    # Iterate through the digits of both numbers\n    for num in [n1, n2]:\n        for digit in str(num):\n            # If the digit is not in the dictionary, add it with a value of 0\n            if digit not in digit_diff:\n                digit_diff[digit] = 0\n\n            # Update the value in the dictionary\n            digit_diff[digit] += abs(int(digit) - int(str(num)[digit]))\n\n    # Calculate the sum of the per-digit differences\n    digit_sum = sum(digit_diff.values())\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the numbers to lists of digits\n    num1_list = list(str(n1))\n    num2_list = list(str(n2))\n\n    # Initialize the sum of the differences\n    digit_diff_sum = 0\n\n    # Loop through each digit of each number\n    for i in range(max(len(num1_list), len(num2_list))):\n        # Calculate the difference between the two digits\n        digit_diff = int(num1_list[i]) - int(num2_list[i])\n\n        # Add the difference to the sum of differences\n        digit_diff_sum += digit_diff ** 2\n\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    sum_diff = 0\n    while diff > 0:\n        digit_diff = diff % 10\n        sum_diff += digit_diff\n        diff //= 10\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    \n    # Calculate the per-digit difference\n    diff = []\n    for i in range(len(digits1)):\n        diff.append(abs(digits1[i] - digits2[i]))\n    \n    # Sum up the per-digit differences\n    return sum(diff)"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Returns the maximum subarray sum of size k from a given array arr.\n\n    Parameters:\n    arr (list): A list of integers.\n    size (int): The size of the subarray to consider.\n\n    Returns:\n    int: The maximum subarray sum of size k from the given array arr.\n\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    current_sum = 0  # initialize current_sum to 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if current index is within the window\n        if i >= size:\n            # Compute the sum of the subarray from the current index and before it\n            current_sum = current_sum - arr[i - size]\n        # Add the current element to the current_sum\n        current_sum = current_sum + arr[i]\n        # Update max_sum if current_sum is greater\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Args:\n    a (list): list of integers representing the input array\n    size (int): size of the sublist to consider\n\n    Returns:\n    int: sum of the largest contiguous sublist in the given list\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    current_sum = 0\n\n    for i in range(start, len(a) - size + 1):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    current_sum = 0\n    max_sum = float('-inf')\n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if i >= size - size//2:\n            max_sum = max(max_sum, current_sum)\n            if current_sum < 0:\n                current_sum = 0\n                start_index = i + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if i >= size - 2:\n            current_sum -= a[i - size + 1]\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    else:\n        if a[0] >= a[1]:\n            return max(a[0] + max_sub_array_sum(a[1:], size - 1), a[1] + max_sub_array_sum(a[2:], size - 1))\n        else:\n            return max(a[1] + max_sub_array_sum(a[0:], size - 1), a[0] + max_sub_array_sum(a[2:], size - 1))"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(arr)\n    elif size > 1:\n        max_ending_here = max_sub_array_sum(arr, size-1)\n        max_so_far = max(max_ending_here, arr[0])\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size > len(a):\n        size = len(a)\n    \n    max_sum = float('-inf')\n    curr_sum = 0\n    \n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    start = 0\n\n    for i in range(len(a)):\n        curr_sum += a[i]\n        if i >= size:\n            curr_sum -= a[start]\n            start += 1\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create an empty set to store the union of the two tuples\n    union_set = set()\n    # loop through each element in the two tuples\n    for elem in test_tup1:\n        # add the element to the union set if it doesn't already exist\n        if elem not in union_set:\n            union_set.add(elem)\n    for elem in test_tup2:\n        # add the element to the union set if it doesn't already exist\n        if elem not in union_set:\n            union_set.add(elem)\n    # convert the set to a list and sort it in ascending order\n    union_list = list(union_set)\n    union_list.sort()\n    # return the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = list(set(test_tup1 + test_tup2))\n    union.sort()\n    return union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(union)\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set() to convert the tuples to sets and then union them\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Converting the set to a list and sorting it\n    sorted_list = sorted(list(union_set))\n    \n    # Printing the sorted union of the tuples\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n    # Remove duplicates and sort the result\n    unique_sorted_tup = sorted(list(set(combined_tup)))\n    # Output the result\n    print(\"The union of the elements of the two given tuples is:\")\n    print(unique_sorted_tup)\n    return unique_sorted_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two tuples\n    union = test_tup1 + test_tup2\n    # Sort the union in ascending order and print the result\n    print(sorted(union))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set of unique elements in both tuples\n    union = set(test_tup1 + test_tup2)\n    # convert the set back to a sorted list\n    sorted_union = sorted(list(union))\n    # return the sorted list\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Merge the two tuples using the set union method\n    union_set = test_tup1.union(test_tup2)\n    # Convert the set back to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # Return the sorted union\n    return sorted_union"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to hold the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set to a list and sort the list\n    union_list = sorted(list(union_set))\n\n    # Output the sorted union of the two tuples\n    print(\"The union of the elements of the two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # get the union of the two tuples using set()\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the union set to a list and sort it\n    sorted_union = sorted(list(union_set))\n    # print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    sub_list = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i]!= lst[i-1]:\n            if sub_list:\n                if len(sub_list) > max_length:\n                    max_length = len(sub_list)\n            sub_list = []\n        sub_list.append(lst[i])\n    if sub_list:\n        if len(sub_list) > max_length:\n            max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # initialize variables\n    max_length = 0\n    curr_length = 0\n\n    # iterate through the list\n    for i in range(len(lst)):\n        curr_length += 1\n        if i > 0 and lst[i] == lst[i-1]:\n            curr_length -= 1\n        if curr_length > max_length:\n            max_length = curr_length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if len(lst[i:j]) > max_length:\n                max_length = len(lst[i:j])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            if j < i+5:\n                continue\n            current_len = j - i + 1\n            if current_len > max_len:\n                max_len = current_len\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            max_length = max(max_length, len(lst[j:i+1]))\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # Initialize variables to keep track of the current sublist and the length of its longest segment\n    curr_sublist = []\n    max_length = 0\n    \n    # Loop through the list and for each element:\n    for elem in lst:\n        # If the element is the start of a new sublist, reset the current sublist and start a new sublist\n        if len(curr_sublist) == 0:\n            curr_sublist.append(elem)\n        # If the element is part of the same sublist as the current element, append it to the current sublist\n        else:\n            curr_sublist.append(elem)\n        # Check if the length of the current sublist is greater than the length of the longest segment found so far\n        if len(curr_sublist) > max_length:\n            max_length = len(curr_sublist)\n            \n    # Return the length of the longest sublist found\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    # initialize variables to store the length and index of the longest sublist\n    max_length = 0\n    start_index = 0\n    max_index = 0\n    # loop through the list\n    for i in range(len(lst)):\n        # if we encounter a sublist longer than the current max length, update the max length and start index\n        if lst[i] + i - start_index > max_length:\n            max_length = lst[i] + i - start_index\n            max_index = i\n        # if we encounter a sublist shorter than the current max length, update the start index\n        elif lst[i] + i - start_index == max_length:\n            start_index = i\n    # return the max length and index\n    return max_length, max_index"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    for i in range(1,len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    \n    max_length = 1\n    curr_length = 1\n    start = 0\n    \n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            curr_length += 1\n        else:\n            max_length = max(max_length, curr_length)\n            curr_length = 1\n            start = i\n            \n    max_length = max(max_length, curr_length)\n    return max_length"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern to match quotation marks\n    pattern = r'[\"\\']'\n    # Find all occurrences of quotation marks in the string\n    matches = re.findall(pattern, text)\n    # Loop through matches and extract values between them\n    values = []\n    for match in matches:\n        if match[0] == match[-1] == '\"':\n            values.append(match[1:-1])\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Using regular expression to extract values between quotation marks\n    pattern = re.compile(r'\"([^\"]*)\"')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r\"(?<=\\\").*?(?=\\\")\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\"]+)\"'  # regex pattern to match double-quoted string values\n    matches = re.findall(pattern, text)  # find all matches in the text\n    values = [match.strip('\"') for match in matches]  # remove quotes and whitespace from each match\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define regular expression pattern to match quoted values\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # Use re.findall() method to extract all values between quotes\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'[\"](.*?)[\"]'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            if arr[i]!= arr[j]: \n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    :param arr: a list of integers\n    :param n: the maximum integer in the list\n    :return: the number of possible unordered pairs where both elements are unequal\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and splits it into a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    This function takes a string as input and returns a list of characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    This function splits a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n\n    # Initialize a variable to store the sum of the digits\n    total = 0\n\n    # Loop through each digit and add it to the total\n    for digit in digits:\n        total += int(digit)\n\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize the sum variable to zero\n    sum = 0\n    # Convert the integer to a string\n    num_str = str(n)\n    # Loop through each character in the string\n    for digit in num_str:\n        # Add the integer value of the current digit to the sum\n        sum += int(digit)\n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        print(\"Error: Input must be a non-negative integer.\")\n        return\n    else:\n        # Convert the integer to a list of digits\n        digits = [int(d) for d in str(n)]\n        # Compute the sum of the digits\n        return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Check if the input is a non-negative integer\n    if not isinstance(n, int) or n < 0:\n        return \"Invalid input\"\n\n    # Convert the integer to a string and iterate over its digits\n    digits = [int(digit) for digit in str(n)]\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to store the sum of digits\n    total_sum = 0\n    # loop through each digit of the integer and add it to the total sum\n    while n > 0:\n        # get the last digit of the integer\n        digit = n % 10\n        # add the digit to the total sum\n        total_sum += digit\n        # divide the integer by 10 to remove the last digit\n        n //= 10\n    # return the total sum of digits\n    return total_sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string to get the digits\n    digits = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Iterate over the digits of the integer and add them to the sum\n    for digit in digits:\n        sum_digits += int(digit)\n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize the variable to store the sum of digits\n    sum_of_digits = 0\n    # loop through each digit in the integer\n    for digit in str(n):\n        # add the digit to the sum of digits\n        sum_of_digits += int(digit)\n    # return the sum of digits\n    return sum_of_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n    # loop through each digit of the integer\n    while n > 0:\n        # add the rightmost digit of the integer to the sum\n        sum += n % 10\n        # remove the rightmost digit of the integer from the integer\n        n //= 10\n    # return the sum of the digits\n    return sum"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as an argument and returns True if the list is sorted in ascending order or False if it's not sorted.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    else:\n        if list1[0] <= list1[1]:\n            return issort_list(list1[1:])\n        else:\n            return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] <= list1[1]:\n        for i in range(1, len(list1)-1):\n            if list1[i] < list1[i-1] or list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    - lst: a list to be checked for sorting\n\n    Returns:\n    - True if the list is sorted, and False otherwise\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_dicts = []\n    for i in range(length):\n        empty_dicts.append({})\n    return empty_dicts"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # iterate through each sublist in the list of lists\n    for i in range(len(list1)):\n        # convert the sublist to a list of strings\n        sublist = list(list1[i])\n        # sort the sublist in ascending order\n        sublist.sort()\n        # convert the sorted sublist back to a list and replace the original sublist in the list of lists\n        list1[i] = list(sublist)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the list of lists\n    for sublist in list1:\n        # Sort the sublist in alphabetical order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n\n    # loop through each sublist in the list\n    for sublist in list1:\n        # convert the sublist to a list of strings\n        sublist = [str(item) for item in sublist]\n        # sort the sublist using the sort() method\n        sublist.sort()\n        # convert the sorted list of strings back to a list of lists\n        sublist = [list(item) for item in sublist]\n        # replace the original sublist with the sorted and converted sublist\n        list1[list1.index(sublist)] = sublist\n\n    # return the sorted list of lists\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, lst in enumerate(list1):\n        list1[i] = sorted(lst)\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num_list in nums:\n        unique_nums |= set(num_list)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set to store the unique numbers from all the lists\n    unique_nums = set()\n\n    # loop through each list in the input list\n    for lst in nums:\n        # add each number from the list to the set\n        unique_nums.update(lst)\n\n    # convert the set back to a list\n    unique_nums = list(unique_nums)\n\n    # return the unique list of numbers\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_set = set()\n    for num_list in nums:\n        unique_set.update(set(num_list))\n    return list(unique_set)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Remove duplicates from each list\n    unique_nums = [x for x in nums[0] if x not in set(nums[1:])]\n    # Combine unique numbers into a single list\n    combined_list = []\n    for num in unique_nums:\n        for lst in nums:\n            if num in lst:\n                combined_list.append(num)\n    return combined_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    # Check if the input is a list of lists\n    if not isinstance(nums, list) or any(not isinstance(sublist, list) for sublist in nums):\n        print(\"Input must be a list of lists\")\n        return None\n\n    # Create a set to keep track of unique numbers\n    unique_nums = set()\n\n    # Iterate through each sublist and add the unique numbers to the set\n    for sublist in nums:\n        for num in sublist:\n            if num not in unique_nums:\n                unique_nums.add(num)\n\n    # Return the list of unique numbers\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n    nums (list of lists): A list of lists containing integers.\n\n    Returns:\n    list: A new list containing the unique integers from the given lists.\n\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        for n in num:\n            if n not in unique_nums:\n                unique_nums.append(n)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Remove duplicates from the first list\n    nums[0] = list(set(nums[0]))\n    # Remove duplicates from the second list\n    nums[1] = list(set(nums[1]))\n    # Combine the two lists into a single list\n    result = nums[0] + nums[1]\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    unique_num_product = 1\n    for num in unique_nums:\n        unique_num_product *= num\n\n    return unique_num_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_numbers = set(list_data)\n\n    # Calculate the product of the unique numbers\n    unique_product = 1\n    for number in unique_numbers:\n        unique_product *= number\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = list(set(list_data))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # create a set to store the unique numbers in the list\n    unique_set = set(list_data)\n\n    # convert the set to a list and sort the list\n    unique_list = sorted(list(unique_set))\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_list:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = sorted(set(list_data))\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # convert list to set to remove duplicates\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)  # Convert the list to a set to get unique numbers\n    product = 1  # Initialize the product to 1\n    \n    for num in unique_numbers:\n        product *= num  # Multiply each unique number by the product\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2*math.pi*r*h\n    \n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find the surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula for the surface area of a cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi*(r**2)*h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = (2 * 3.14159 * r * r) + (2 * 3.14159 * r * h) + (2 * 3.14159 * h * h)\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h\n    return surface_area"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # check if B is a subset of A\n    if all(x in A for x in B): \n        return True\n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not B:\n        return True\n    if not A or B[0]!= A[0]:\n        return False\n    return is_Sub_Array(A[1:], B[1:])\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    \n    if len(A) > len(B):\n        A, B = B, A\n    \n    for i in range(len(B)):\n        if A == B[i:]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A, B):\n    # Check if B is a sublist of A\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if not isinstance(A, list) or not isinstance(B, list):\n        return False\n    elif len(A) < len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Checks whether a list A is a sublist of list B or not.\n    \"\"\"\n    if not B:\n        return True  # empty list is a sublist of any list\n    i, j = 0, 0  # initialize pointers for A and B respectively\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    return i == len(A)  # check if pointers have reached the end of A"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if the second list is a sublist of the first list.\n    if B in A:\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if B[i] in A:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A, B): \n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # if both lists are empty then it is a sublist\n    if len(A) == 0 and len(B) == 0: \n        return True\n\n    # if one list is empty then it is not a sublist\n    if len(A) == 0 or len(B) == 0: \n        return False\n\n    # if both lists are not empty then check if they have the same elements\n    if len(A)!= len(B): \n        return False\n\n    # if the lists have the same elements then check if they are sublists of each other\n    i = 0\n    j = 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i - j\n            j = 0\n\n    # if the sublists have the same elements then they are sublists of each other\n    return i == len(A)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes an integer as input and returns the last digit in the factorial of the input number.\n    \"\"\"\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n //= 10\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    num = n\n    while num > 0:\n        digit = num % 10\n        num //= 10\n        if digit == 0:\n            continue\n        else:\n            return digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize the last digit variable\n    last_digit = 0\n    \n    # find the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # find the last digit of the factorial\n    while factorial >= 10:\n        last_digit = factorial % 10\n        factorial //= 10\n    \n    # return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0: \n        return \"Please enter a positive integer.\"\n\n    # Initialize the factorial variable\n    factorial = 1\n\n    # Calculate the factorial\n    for i in range(1, n+1): \n        factorial *= i\n\n    # Find the last digit of the factorial\n    last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize variables for factorial and last digit\n    factorial = 1\n    last_digit = 0\n\n    # Calculate factorial of n\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Get the last digit of factorial\n    last_digit = factorial % 10\n    \n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    # Get the last digit of the factorial of n\n    factorial_n = 1\n    for i in range(1, n+1):\n        factorial_n *= i\n    last_digit = factorial_n % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # take input from the user\n    num = int(input(\"Enter a number: \"))\n    \n    # initialize variables to hold the digits and factorial\n    factorial = 1\n    last_digit = 0\n    \n    # loop through each digit of the number and calculate the factorial\n    while num > 0:\n        factorial *= num % 10\n        last_digit = num % 10 % 100\n        num //= 10\n    \n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Get the length of the number\n    length = len(num)\n    # Calculate the factorial\n    factorial = 1\n    for i in range(1, length+1):\n        factorial *= int(num[-i])\n    # Get the last digit of the factorial\n    last_digit = factorial % 10\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Convert the given number to a string\n    n = str(n)\n\n    # Find the last digit of the factorial\n    last_digit = int(n[-1])\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    # convert the given number to a string\n    n = str(n)\n    # convert the string to a list of digits\n    digits = list(map(int, n))\n    # find the last digit in the list of digits\n    last_digit = digits[-1]\n    # return the last digit of the factorial of n\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Concatenate all the lists into one big list\n    interleaved_list = list1 + list2 + list3\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n\n    # Loop through each element in each list and add it to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check that all lists are of the same length\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError('All input lists must be of the same length.')\n\n    # Create an empty list to hold the interleaved elements\n    interleaved = []\n\n    # Iterate over each element of the first list\n    for i in range(len(list1)):\n        # Append the i-th element of list1 to the interleaved list\n        interleaved.append(list1[i])\n        # Append the i-th element of list2 to the interleaved list\n        interleaved.append(list2[i])\n        # Append the i-th element of list3 to the interleaved list\n        interleaved.append(list3[i])\n\n    # Return the interleaved list\n    return interleaved"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes 3 lists as input and returns a single list that contains all the elements from the input lists.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Using set() function to get unique elements of both tuples\n    unique_tup1 = set(test_tup1)\n    unique_tup2 = set(test_tup2)\n\n    # Using set() function to get the intersection of unique elements of both tuples\n    intersection_set = unique_tup1.intersection(unique_tup2)\n\n    # Convert the intersection set to a list and return the dissimilar elements\n    return list(intersection_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set for the first tuple to remove duplicates\n    unique_tup1 = set(test_tup1)\n\n    # create a set for the second tuple to remove duplicates\n    unique_tup2 = set(test_tup2)\n\n    # find the common elements in the two sets\n    common_elems = unique_tup1.intersection(unique_tup2)\n\n    # return the dissimilar elements from the first tuple\n    return list(unique_tup1 - common_elems)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    # Iterate over the elements of the tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # If the elements are not equal, add them to the dissimilar list\n        if element1!= element2:\n            dissimilar_list.append(element1)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    # Create a set of all elements in both tuples\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    \n    # Find the dissimilar elements in both sets\n    dissimilar = set1.symmetric_difference(set2)\n    \n    # Return the dissimilar elements as a list\n    return list(dissimilar)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    dissimilar_set = set(test_tup1) ^ set(test_tup2)\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Get the length of the tuples\n    length = len(test_tup1)\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through each element in the tuples\n    for i in range(length):\n        # If the element at the current index is not equal to the element at the next index, add it to the list\n        if test_tup1[i]!= test_tup2[i+1]:\n            dissimilar_list.append(test_tup1[i])\n    # Return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the element is present in the second tuple\n        if test_tup1[i] not in test_tup2:\n            # If it's not present, add it to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        else:\n            result.append(even_fnc(item))\n    return tuple(result)\n\ndef even_check(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.extend(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            result.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            result.append(item)\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for elem in test_tuple:\n        if even_fnc(elem):\n            even_list.append(elem)\n    return even_list\n\ndef even_fnc(elem):\n    return type(elem) == int and elem % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def remove_even(nested_tuple):\n        '''\n        Remove even elements from the nested tuple.\n        '''\n        return [item for item in nested_tuple if not even_fnc(item)]\n\n    def is_even(x):\n        '''\n        Determine whether the input is even or not.\n        '''\n        return x % 2 == 0\n\n    return remove_even(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_tuple = []\n    for t in test_tuple:\n        if isinstance(t, tuple):\n            uneven_tuple.extend(even_ele(t, even_fnc))\n        elif even_fnc(t):\n            uneven_tuple.append(t)\n    return uneven_tuple\n\ndef is_even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for sub_list in test_tuple:\n        for element in sub_list:\n            if even_fnc(element):\n                even_list.append(element)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result_list = []\n    for i in test_tuple:\n        if isinstance(i, list):\n            result_list.extend(even_ele(i, even_fnc))\n        elif even_fnc(i):\n            result_list.append(i)\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, list):\n            even_list.extend(even_ele(item, even_fnc))\n        elif isinstance(item, tuple):\n            even_list.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2) + (2*b*s) + (b**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    area = b * s # calculate the area of the pyramid using the formula for a square pyramid\n    surface_area = 2 * b * s + 6 * b * b + 3 * b # calculate the surface area using the formula for the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = b * s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # find the half the base edge\n    h = b/2\n    # calculate the area of each triangle\n    triangle_area = 0.5 * b * s\n    # calculate the number of triangles based on the height\n    num_triangles = int(s)\n    # calculate the surface area by multiplying the area of each triangle with the number of triangles\n    surface_area = triangle_area * num_triangles\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the side of the pyramid\n    side = b * 2\n\n    # Calculate the base of the pyramid\n    base = side - s\n\n    # Calculate the total surface area of the pyramid\n    total_area = (b ** 2 + s ** 2) * 2\n\n    # Return the total surface area\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = ((b**2) * (s/2)) + ((b**2) * (s/2)) # calculating the surface area of the base of the pyramid\n    surface_area += ((b**2) * (s/2)) + ((s/2) * (b**2)) # adding the surface area of the base and height of the pyramid\n    surface_area += ((s/2) * (b**2)) + ((s/2) * (b**2)) # adding the surface area of the base and height of the pyramid again\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 2 * b * s\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*b*s + 6*b + 6*s + 3*s*b + 3*b*s - 3*b*s*b + 12*b*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)+(2*b)+(2*s) "
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base and height\n    area_base = b**2\n    area_height = s**2\n    \n    # Calculate the surface area of the pyramid\n    surface_area = (area_base + area_height) * 2\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1.keys() == dict1.values():\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return \"The dictionary is empty\"\n    else:\n        return \"The dictionary is not empty\""
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(d):\n    '''\n    Check if a dictionary is empty.\n\n    Args:\n        d (dict): The dictionary to check.\n\n    Returns:\n        bool: True if the dictionary is empty, False otherwise.\n    '''\n    return not any(d.values())"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    This function checks if a dictionary is empty or not.\n    \"\"\"\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return int(n * catalan_number(n - 1)) // (2 * n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    This function returns the nth catalan number.\n    '''\n    if num < 0:\n        return \"Invalid input. Please enter a non-negative integer.\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num - 1) * (1 - 2 * num + num * num) / (num + 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    n = num\n    k = 0\n    catalan_list = []\n    for i in range(1, n+1):\n        catalan_list.append(0)\n    for i in range(n):\n        catalan_list[i] = (i*(2*n-i-1))//(i+1)\n    catalan_list[n-1] = (2*n-n)//(n)\n    for i in range(1, n-1):\n        catalan_list[i] = catalan_list[i-1] + catalan_list[i+1]\n    catalan_list[0] = 1\n    catalan_list[n-1] = 1\n    catalan_list[n] = 1\n    return catalan_list[n-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (4*n*(2*n-1))/(n-1) + catalan_number(n-1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(1)\n    1\n    >>> catalan_number(2)\n    6\n    >>> catalan_number(5)\n    64\n    \"\"\"\n\n    # Helper function to calculate catalan number of k\n    def catalan_helper(k):\n        if k == 0 or k == n:\n            return 1\n        else:\n            return catalan_helper(k-1) * (2*k-1) // (k+1)\n\n    # Return nth catalan number\n    return catalan_helper(n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    num = 1\n    for i in range(1, n+1):\n        num = num * (2*i - 1) // (i + 1)\n    return num"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Return the nth Catalan number using the formula:\n    C(n) = (2n+1)!/(n+1)! * (n+1)!/(n)!\n    \"\"\"\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    # Check if n is positive\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the Catalan number\n    catalan = (2 * n + 1) // (n + 1) * (n + 1) // (n)\n\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th Catalan number is:\", catalan_number(n))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using dynamic programming.\n    \"\"\"\n    # Base case\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize a table to store Catalan numbers\n    catalan_numbers = [0] * (n + 1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(2, n + 1):\n        catalan_numbers[i] = (4 * catalan_numbers[i - 1]) // (i + 1)\n\n    return catalan_numbers[n]\n"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    # Base case\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        # Recursive case\n        return catalan_number(n-1) + 2*catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[A-Za-z]+ly\\b'\n    \n    # Find all occurrences of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return an empty list\n    if not matches:\n        return []\n    \n    # Extract the positions of the matches from the list of tuples returned by re.findall()\n    positions = [match.start() for match in matches]\n    \n    # Sort the positions in ascending order and return the first position\n    return sorted(positions)[0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a pattern to match for adverbs ending with 'ly'\n    pattern = r'\\b\\w+\\s+(?:ly|l[aeiou])\\b'\n\n    # use re.findall() method to find all occurrences of the pattern in the given string\n    matches = re.findall(pattern, text)\n\n    # create a list of tuples containing the positions and adverbs of the matches found\n    result = [(match.start(), match.group()) for match in matches]\n\n    return result"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b\\w+ly\\b'\n    \n    # Use the re.findall() function to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Create a dictionary to store the positions and lengths of all adverbs found\n    adverbs = {}\n    \n    # Loop through all matches and update the adverbs dictionary with their positions and lengths\n    for match in matches:\n        adverb = match.lower()\n        pos = text.lower().find(adverb)\n        length = len(adverb)\n        adverbs[adverb] = (pos, length)\n    \n    # Return the dictionary of adverbs and their positions and lengths\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b\\w*ly\\b'\n    \n    # Use the re.finditer() function to search for all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the positions of the adverbs\n    adverb_positions = []\n    \n    # Loop over the matches and extract the positions of the adverbs\n    for match in matches:\n        adverb_positions.append(match.start())\n    \n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b(\\w+ly)\\b', text)\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Compile a regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'\\bly\\b')\n\n    # Find all occurrences of the pattern in the text\n    matches = pattern.finditer(text)\n\n    # Iterate over the matches and print the adverb and its positions in the string\n    for match in matches:\n        print(f\"Adverb: {match.group()} (start: {match.start()}, end: {match.end()})\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    return adverbs\n\ntext = \"I love your party tonight. I would really love to go to your house.\"\nadverbs = find_adverbs(text)\nprint(adverbs)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Define the regular expression pattern for finding the first adverb ending with \"ly\"\n    pattern = r'\\b\\w*[lL][yY]\\w*\\b'\n\n    # Use the re.finditer() function to iterate over all non-overlapping matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverbs and their positions\n    adverbs = []\n\n    # Iterate over all matches and extract the adverb and its position from the match object\n    for match in matches:\n        adverb = match.group()\n        pos = match.start()\n        adverbs.append((adverb, pos))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\bly\\b', text)\n    positions = []\n    for i, a in enumerate(adverbs):\n        positions.append(i)\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    # Initialize the min heap with the first n items in the dataset\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    # Iterate through the remaining items in the dataset and push them onto the heap\n    for item in items[n:]:\n        # If the heap is empty or the next item is less expensive, push it onto the heap\n        if not heap or heapq.heappop(heap) < item:\n            heapq.heappush(heap, item)\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = [0] * n\n    # Initialize the heap with the first n items in the list\n    heapq.heapify(min_heap)\n    for item in items[:n]:\n        # Add the next item to the min-heap\n        heapq.heappush(min_heap, item)\n        # Remove the smallest item from the heap if it exceeds the current n most expensive item\n        if item > min_heap[0]:\n            heapq.heappop(min_heap)\n    # Return the min-heap of size n containing the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items (list): List of tuples (price, item), where price is the cost of the item and item is the name of the item.\n\n    Returns:\n    list: A list of the n most expensive items in the dataset.\n    '''\n    # Sort the items based on their prices in ascending order\n    items.sort(key=lambda x: x[0])\n\n    # Create a min-heap of the first n items\n    min_heap = [heapq.heappop(items) for _ in range(n)]\n\n    # Return the n most expensive items from the min-heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if not heapq.heappushpop(heap,item):\n            heapq.heappush(heap,item)\n            heapq.heapify(heap)\n            if len(heap) > n:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of n elements\n    min_heap = [heapq.nsmallest(n, items)]\n    # Iterate through the remaining items and update the heap accordingly\n    for item in items:\n        # If the item is cheaper than the current min element, replace it\n        if item < min_heap[0]:\n            heapq.heapreplace(min_heap, item)\n    # Return the n smallest elements from the min heap as the result\n    return min_heap[0]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    This function takes a list of items and an integer n as input and returns a list of the n most expensive items.\n    If there are fewer than n items in the dataset, it returns the entire dataset.\n    '''\n    # initialize a min heap of size n\n    min_heap = []\n    \n    # iterate through the list of items\n    for item in items:\n        # if the size of the heap is less than n, add the item to the heap\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, item)\n        # if the size of the heap is equal to or greater than n, compare the item to the minimum element of the heap\n        else:\n            if item < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, item)\n    \n    # extract the n most expensive items from the heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n    \n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Find the n most expensive items in a given dataset.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    \n    # Return the n most expensive items in descending order\n    return sorted(heap, reverse=True)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the given dataset into a min heap\n    min_heap = []\n    for item in items:\n        heapq.heappush(min_heap, -item)\n        # If the size of the min heap exceeds n, pop the smallest element from it\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Extract the n most expensive items from the min heap and return them as a list\n    result = []\n    for _ in range(n):\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= n:\n        return None\n    else:\n        part1 = l[:n]\n        part2 = l[n:]\n        part1.append(part2)\n        return part1"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        raise ValueError(\"n is greater than or equal to the length of the list\")\n    return [l[-1]] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return \"Error: The value of n must be greater than or equal to 0.\"\n    elif n > len(l):\n        return \"Error: The value of n must be less than or equal to the length of the list.\"\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l, []\n    else:\n        return l[n:], l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        mid = len(l)//2\n        arr1 = l[:mid]\n        arr2 = l[mid+1:]\n        arr1.append(l[n])\n        return arr1+arr2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return [l[n-1]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return None\n    else:\n        return l[n:] + l[:n]"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # initialize variables for smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # loop through the list and update smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # calculate the difference between largest and smallest values\n    diff = largest - smallest\n\n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return \"Error: empty list\"\n    else:\n        max_val = max(nums)\n        min_val = min(nums)\n        return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    if not nums:\n        return \"List is empty\"\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return \"List is empty\"\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        print(\"List should have at least two elements to find the difference between largest and smallest value.\")\n        return\n    \n    max_num = max(nums)\n    min_num = min(nums)\n    \n    return max_num - min_num"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5)+1):\n        if i*i <= b:\n            print(i*i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Initialize a variable to store the perfect squares found\n    perfect_squares_list = []\n\n    # Loop through the range of numbers from a to b, inclusive\n    for i in range(a, b+1):\n\n        # Check if the square of the current number is a perfect square\n        if i*i == i:\n\n            # If it is, add it to the list of perfect squares found\n            perfect_squares_list.append(i)\n\n    # Return the list of perfect squares found\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if a > b:\n        a, b = b, a  # swap a and b if a is greater than b\n    \n    # iterate through all possible perfect squares\n    for i in range(a, b+1):\n        j = i * i  # calculate the square of i\n        \n        if j == a or j == b:  # if j is a perfect square, return the value of i\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # initialize variables to hold the count and sum of perfect squares\n    count = 0\n    sum_of_squares = 0\n\n    # loop through each number from a to b\n    for i in range(a, b+1):\n\n        # check if the number is a perfect square\n        if i**2 == i:\n\n            # if it is, add it to the sum of squares and increment the count\n            sum_of_squares += i\n            count += 1\n\n    # return the count and sum of squares\n    return count, sum_of_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n\n    # Loop through all the numbers between a and b\n    for num in range(a, b+1):\n\n        # Check if the square of the number is equal to the number\n        if num == num ** 2:\n\n            # If it is, print the number\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize an empty list to store the perfect squares\n    perfect_squares_list = []\n\n    # Loop through the range of numbers between a and b (inclusive)\n    for num in range(a, b+1):\n        # Check if the number is a perfect square\n        if num**2 == num:\n            perfect_squares_list.append(num)\n\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    for i in range(a, b+1):\n        for j in range(i, 0, -1):\n            if i**2 == j**2:\n                print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # initialize an empty list to store perfect squares\n    perfect_squares_list = []\n    \n    # loop through each integer from a to b (inclusive)\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        if num**0.5 == int(num**0.5):\n            # if it is, add it to the list of perfect squares\n            perfect_squares_list.append(num)\n    \n    # return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        num = i*i\n        if num == i:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        if i**2 == a or i**2 == b:\n            result.append(i**2)\n    return result"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n\n    Inputs:\n    r (float): The radius of the circle.\n    theta (float): The angle of the line segment from the origin (0,0).\n\n    Outputs:\n    x (float): The horizontal component of the vector.\n    y (float): The vertical component of the vector.\n    '''\n\n    # Convert angle from degrees to radians\n    theta = theta * cmath.pi / 180\n\n    # Calculate x and y components of vector\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    :param x: the radial coordinate\n    :param y: the angular coordinate\n    :return: a tuple containing the rectangular coordinates (x, y)\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    if y >= 0:\n        r = x\n        theta = y\n    else:\n        r = x\n        theta = cmath.pi + y\n\n    # Calculate the rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x.real, x.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert angle from degrees to radians\n    theta = cmath.radians(theta)\n    \n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r * cmath.exp(1j*theta)\n\nx = 3\ny = 4\nprint(polar_rect(x, y))"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes a polar coordinate (r, theta) as inputs and\n    returns the corresponding rectangular coordinate (x, y) as output.\n    \"\"\"\n    # Convert polar coordinates to complex number\n    z = r * cmath.exp(theta * 1j)\n    \n    # Convert complex number to rectangular coordinates\n    x = z.real\n    y = z.imag\n    \n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    return r, theta\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_new = r*cmath.cos(theta)\n    y_new = r*cmath.sin(theta)\n    return x_new, y_new"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(rho,theta):\n    '''\n    This function takes in polar coordinates (rho and theta) and returns the\n    rectangular coordinates (x and y).\n    '''\n    # Convert the angle from degrees to radians\n    theta = theta * cmath.pi/180.0\n    \n    # Calculate the x and y coordinates\n    x = rho * cmath.cos(theta)\n    y = rho * cmath.sin(theta)\n    \n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    return x_rect, y_rect\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # get the length of the list\n    length = len(newList)\n    \n    # check if the list has 1 or less element\n    if length <= 1:\n        return newList\n    \n    # swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # initialize variables for first and last elements in the list\n    first = newList[0]\n    last = newList[-1]\n    # initialize list for swapped elements\n    swapped = []\n    # append last element to swapped list\n    swapped.append(last)\n    # remove last element from the original list\n    newList.pop()\n    # append first element to the original list\n    newList.insert(0, first)\n    # append swapped elements to the original list\n    newList.extend(swapped)\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    n = len(newList)\n    if n < 2:\n        return newList\n    else:\n        first = newList[0]\n        last = newList[-1]\n        newList[0] = last\n        newList[-1] = first\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #get the length of the list\n    n = len(newList)\n    #check if the list has at least two elements\n    if n<2:\n        return newList\n    #swap the first and last elements\n    first = newList[0]\n    last = newList[n-1]\n    newList[0] = last\n    newList[n-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # Check if the input list is empty\n    if len(newList) == 0:\n        return newList\n\n    # Check if the length of the list is greater than 1\n    if len(newList) > 1:\n\n        # Interchange the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) < 2: \n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0:\n        return 0\n    \n    if k == 0 or k == n:\n        return 1\n    \n    coeff = 1\n    for i in range(1, k+1):\n        coeff *= (n-i+1) // i\n    \n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    if n < 0 or k < 0:\n        return 0\n    elif k > n:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)\n\nn = int(input(\"Enter value of n: \"))\nk = int(input(\"Enter value of k: \"))\n\nresult = binomial_Coeff(n, k)\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", result)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Check if the input is valid\n    if k > n or k < 0:\n        return -1\n\n    # Calculate the binomial coefficient\n    for i in range(k+1):\n        sum += (n-k+i)/(i)\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return None\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize the sum and counter variables\n    sum_binomial = 0\n    count = 1\n\n    # Calculate the binomial coefficient using a loop\n    while count <= n:\n        sum_binomial += (n-count+1) * (k-1) * (count) // (count)\n        count += 1\n\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # check if n is less than or equal to zero\n    if n <= 0:\n        return \"Error: n should be a positive integer\"\n\n    # check if k is greater than n\n    if k > n:\n        return \"Error: k should be less than or equal to n\"\n\n    # initialize the sum to 0\n    total = 0\n\n    # loop through the range of k from 1 to n\n    for i in range(1, n + 1):\n\n        # check if i is less than or equal to k\n        if i <= k:\n\n            # calculate the binomial coefficient and multiply it with i\n            coeff = (n + 1) // 2 - i + (n - i + 1) // 2\n            total += coeff * i\n\n    # return the total\n    return total"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            sum += i * j\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n    if n == 0 or k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)\n\nn = int(input(\"Enter a positive integer for n: \"))\nk = int(input(\"Enter a positive integer for k: \"))\n\nprint(\"The sum of the product of consecutive binomial co-efficients is:\", binomial_Coeff(n, k))"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Base cases\n    if k == 0 or k == n:\n        return 1\n    elif k > n:\n        return 0\n\n    # Calculate the binomial coefficient using recursion\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Match all the leading zeros in the IP address\n    pattern = r'^\\d*[0]\\d*\\.\\d+\\.\\d+\\.\\d+$'\n    # Use the pattern to search for all the leading zeros in the IP address\n    matches = re.findall(pattern, ip)\n    # Replace all the leading zeros in the IP address with an empty string\n    for match in matches:\n        ip = ip.replace(match, '')\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', ip)\n    ip_list = [int(x) for x in ip_list]\n    ip_list = [str(x) for x in ip_list]\n    ip_list = [x.lstrip('0') for x in ip_list]\n    ip_list = ['.'.join(ip_list)]\n    return ip_list[0]"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # remove leading zeroes from ip address\n    ip = re.sub(r'^\\d+\\.0\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+\\.\\d+\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.0\\.0', '', ip)\n    ip = re.sub(r'^\\d+\\.\\d+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'(?!.*(?:\\b0\\b))\\d+\\.\\d+\\.\\d+\\.\\d+')\n    new_ip = pattern.sub('', ip)\n    return new_ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group()\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = re.compile(r'^\\d+\\.\\d+\\.\\d+\\.\\d+$')\n    if pattern.match(ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i].startswith('0'):\n                ip_list[i] = ip_list[i][1:]\n        return '.'.join(ip_list)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    This function removes leading zeroes from an ip address.\n    '''\n    return re.sub(r'(\\b0+)(\\d)', r'\\2', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^0+(?=[^\\d])', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0\\.', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_first = list1[0]\n    odd_first = list1[1]\n    diff = even_first - odd_first\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd number of the list.\n    '''\n    even_num = lst[0]\n    odd_num = lst[1]\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        elif num % 2!= 0:\n            odd_num = num\n    return odd_num - even_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = -1\n    odd_index = -1\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_index = i\n            break\n    for i in range(len(list1)-1, -1, -1):\n        if list1[i] % 2!= 0:\n            odd_index = i\n            break\n    return odd_index - even_index"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Initialize variables for even and odd numbers\n    even_num = None\n    odd_num = None\n\n    # Loop through the list and find the first even and first odd numbers\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 == 1 and odd_num is None:\n            odd_num = num\n\n    # Check if the first even and first odd numbers were found\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        # Calculate the difference between the even and odd numbers\n        diff = abs(even_num - odd_num)\n        return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and finds the difference of the first even and first odd number of the list.\n    '''\n    even = lst[0]\n    odd = lst[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2!= 0 and first_odd is None:\n            first_odd = num\n        elif num % 2 == 0 and first_even is not None:\n            return first_even - first_odd\n    return first_even - first_odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in list1:\n        if i % 2 == 0:\n            count += 1\n        else:\n            break\n    first_even = list1[0]\n    first_odd = list1[1]\n    diff = abs(first_even - first_odd)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return \"List contains no even or odd numbers.\"\n    elif odd_count > even_count:\n        return f\"The odd number is at index {odd_count - 1}.\"\n    else:\n        return f\"The even number is at index {even_count - 1}.\""
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    \n    # Find the first even number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # Calculate the difference between the even and odd numbers\n    diff = odd_num - even_num\n    \n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    count = 0\n    max_count = 0\n    min_str = min(str1, str2)\n    max_str = max(str1, str2)\n\n    # Compare binary strings\n    for i in range(len(min_str)):\n        if min_str[i] == '1' and max_str[i] == '0':\n            count += 1\n        elif min_str[i] == '0' and max_str[i] == '1':\n            count += 1\n        else:\n            pass\n\n    # Update max_count\n    if count > max_count:\n        max_count = count\n\n    # Return minimum swaps required\n    return max_count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Initialize variables\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    swaps = 0\n    \n    # Check if the length of both strings are same\n    if len_str1!= len_str2:\n        return -1\n    \n    # Convert strings to binary numbers\n    bin_str1 = bin(int(str1, 2))[2:]\n    bin_str2 = bin(int(str2, 2))[2:]\n    \n    # Check if the binary numbers are same\n    if bin_str1 == bin_str2:\n        return 0\n    \n    # Initialize binary number arrays\n    bin_arr1 = [0]*len_str1\n    bin_arr2 = [0]*len_str2\n    \n    # Convert binary strings to binary number arrays\n    for i in range(len_str1):\n        bin_arr1[i] = int(bin_str1[i])\n    for i in range(len_str2):\n        bin_arr2[i] = int(bin_str2[i])\n    \n    # Check for swaps\n    while bin_arr1!= bin_arr2:\n        # Check if both arrays have different elements\n        if bin_arr1[0]!= bin_arr2[0]:\n            # Swap the elements in the array\n            temp = bin_arr1[0]\n            bin_arr1[0] = bin_arr1[1]\n            bin_arr1[1] = temp\n            \n            # Increment the swap count\n            swaps += 1\n            \n            # Check if the binary number arrays are same now\n            if bin_arr1 == bin_arr2:\n                break\n    \n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    if n!= len(str2):\n        return \"Strings are of different length\"\n\n    # Convert strings to binary\n    bin1 = [bin(int(x))[2:].zfill(8) for x in str1]\n    bin2 = [bin(int(x))[2:].zfill(8) for x in str2]\n\n    # Initialize variables for swap count and carry\n    swaps = 0\n    carry = 0\n\n    # Iterate through each pair of bits and count swaps\n    for i in range(n):\n        if bin1[i]!= bin2[i]:\n            swaps += 1\n            carry += 1 if bin1[i] == '0' and bin2[i] == '1' else 0\n            carry -= 1 if bin1[i] == '1' and bin2[i] == '0' else 0\n        else:\n            carry = 0\n\n    # Check if there are any carry bits left\n    while carry:\n        swaps += 1\n        carry -= 1\n\n    # Return the number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables for the swaps and the current digit\n    swaps = 0\n    curr_digit = num1 % 10\n\n    # Iterate over the binary digits of both numbers\n    for i in range(len(str1)-1, -1, -1):\n        # Check if the current digit is not equal to the previous digit\n        if curr_digit!= int(str1[i], 2):\n            # Swap the digits and increment the swaps count\n            num1 = num1 ^ (1 << (i+1))\n            num2 = num2 ^ (1 << (i+1))\n            swaps += 1\n            curr_digit = int(str1[i], 2)\n\n    # Return the minimum swaps required to convert the binary numbers\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n\n    return dp[n][n]\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes in two binary strings as input and returns the minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n1 = len(str1)\n    n2 = len(str2)\n    swaps = 0\n\n    for i in range(min(n1, n2)):\n        if str1[i]!= str2[i]:\n            if str1[i] == '0' and str2[i] == '1':\n                swaps += 1\n            elif str1[i] == '1' and str2[i] == '0':\n                swaps -= 1\n            else:\n                return -1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers as input and returns the minimum number of swaps required to convert one binary number to another.\n    \n    Args:\n    str1 (str): Binary number represented as a string.\n    str2 (str): Binary number represented as a string.\n    \n    Returns:\n    int: Minimum number of swaps required to convert binary number str1 to binary number str2.\n    \n    \"\"\"\n    # Convert the input strings to lists of 1s and 0s\n    str1 = list(str1)\n    str2 = list(str2)\n\n    # Initialize a list of lists for storing the corresponding binary numbers in each position\n    pos_binary_num = [[] for _ in range(len(str1) + 1)]\n\n    # Iterate through the positions in the two binary numbers\n    for i in range(len(str1)):\n        # Calculate the difference between the two binary numbers in that position\n        diff = int(str1[i]) ^ int(str2[i])\n\n        # If the difference is 1, add the position and its binary number to the corresponding list in the matrix\n        if diff == 1:\n            pos_binary_num[i+1].append(i)\n            pos_binary_num[i+1].append(int(str1[i]))\n\n    # Initialize a variable to store the minimum number of swaps required to convert the two binary numbers\n    min_swaps = float('inf')\n\n    # Iterate through the matrix to find the minimum number of swaps\n    for i in range(len(str1) + 1):\n        for j in range(len(str2) + 1):\n            if pos_binary_num[i] and pos_binary_num[j] and pos_binary_num[i][0] == j:\n                # Calculate the minimum number of swaps required to convert the two binary numbers in that position\n                swaps = pos_binary_num[i][1:] + pos_binary_num[j][1:]\n                min_swaps = min(min_swaps, len(swaps))\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Remove leading zeros from the input strings\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n\n    # Check if the input strings are of equal length\n    if len(str1)!= len(str2):\n        return \"Input strings are not of equal length\"\n\n    # Initialize the result variable and flag variable\n    result = 0\n    flag = True\n\n    # Iterate over each pair of digits\n    for i in range(len(str1)):\n        # Check if the current digits are equal\n        if str1[i]!= str2[i]:\n            # If not, set the flag to False and break\n            flag = False\n            break\n\n    # If the flag is True, there are no swaps required to convert the binary strings\n    if flag:\n        return result\n\n    # Iterate over each pair of digits\n    for i in range(len(str1)):\n        # If the current digits are not equal, check if they can be swapped\n        if str1[i]!= str2[i]:\n            # If they can be swapped, increment the result variable and break\n            result += 1\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + str1[i] + str2[i+1:]\n            break\n\n    # If no swaps are possible, return \"No swaps possible\"\n    if result == 0:\n        return \"No swaps possible\"\n\n    # Check for adjacent pairs of zeros\n    while str1.startswith('0') or str2.startswith('0'):\n        # If there are adjacent zeros, increment the result variable and remove the leading zeros\n        result += 1\n        str1 = str1[1:]\n        str2 = str2[1:]\n\n    # Return the result variable\n    return result"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to binary lists\n    list1 = [int(bit) for bit in str1]\n    list2 = [int(bit) for bit in str2]\n\n    # Calculate the length of the shorter string\n    length = len(str1) if len(str1) < len(str2) else len(str2)\n\n    # Initialize a variable to store the minimum number of swaps\n    min_swaps = 0\n\n    # Iterate through the lists from left to right\n    for i in range(length):\n        # Check if the bits at the current positions of both lists are different\n        if list1[i]!= list2[i]:\n            # If they are different, swap the bits\n            list1[i], list2[i] = list2[i], list1[i]\n            min_swaps += 1\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    This function takes two binary numbers as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    str1 = str1.zfill(len(str2)) # pad the shorter string with zeros to the same length as the longer string\n    swaps = 0\n    i = 0 # pointer for str1\n    j = 0 # pointer for str2\n    \n    while i < len(str1) and j < len(str2):\n        # check if the characters at the current positions are equal\n        if str1[i] == str2[j]:\n            # if they are equal, increment both pointers\n            i += 1\n            j += 1\n        else:\n            # if they are not equal, swap the characters and increment the swap count\n            str1[i], str1[j] = str1[j], str1[i]\n            i += 1\n            j += 1\n            swaps += 1\n    \n    # if the pointers reach the end of one string, we need to swap the remaining characters of the other string\n    while i < len(str1):\n        str1[i], str1[j] = str1[j], str1[i]\n        i += 1\n        j += 1\n        swaps += 1\n    \n    # if the pointers reach the end of the other string, we need to swap the remaining characters of the first string\n    while j < len(str2):\n        str1[i], str1[j] = str1[j], str1[i]\n        i += 1\n        j += 1\n        swaps += 1\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for tup in tuple_list:\n        total_size += sys.getsizeof(tup)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    This function takes a list of tuples as input and returns the total size of the tuples in bytes.\n    '''\n    # initializing the total size variable to 0\n    total_size = 0\n    # iterating over each tuple in the list\n    for tup in tuple_list:\n        # iterating over each element in the tuple\n        for elem in tup:\n            # adding the size of each element in bytes to the total size variable\n            total_size += sys.getsizeof(elem)\n    # returning the total size of the tuples in bytes\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    # initialize size to zero\n    size = 0\n    \n    # loop through the tuple elements and calculate their size\n    for element in tuple_list:\n        size += sys.getsizeof(element)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n\n    total_size = 0\n    for i in range(len(tuple_list)):\n        # The sys.getsizeof() function returns the size of an object in bytes\n        total_size += sys.getsizeof(tuple_list[i])\n\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = sys.getsizeof(tuple_list)\n    return byte_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for item in tuple_list:\n        tuple_size += sys.getsizeof(item)\n    return tuple_size\n\nif __name__ == \"__main__\":\n    input_list = [(1,2,3),(4,5),(6,7,8,9,10)]\n    for item in input_list:\n        print(\"Size of tuple: \", tuple_size(item))"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes two sorted arrays and an integer k as inputs and returns the kth smallest element from the two sorted arrays.\n    \"\"\"\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    # merge the two arrays into a single sorted array\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr1[i+n2], arr1[i] = arr1[i], arr1[i+n2]\n            i += 1\n        else:\n            arr1[i+n2], arr1[j] = arr1[j], arr1[i+n2]\n            j += 1\n    \n    # add the remaining elements of arr1 to the end of arr2\n    while i < n1:\n        arr1[i+n2], arr1[i] = arr1[i], arr1[i+n2]\n        i += 1\n    \n    # return the kth smallest element from the merged array\n    return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            k -= 1\n    if k == 0:\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and a target k. It returns the kth element from the two arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n    # If the kth element is not found, return None.\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth smallest element in two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k > 1:\n                i += 1\n                k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k > 1:\n                j += 1\n                k -= 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find the length of the two arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # Calculate the total number of elements in the two arrays\n    total_elements = n1 + n2\n\n    # Find the total number of elements in the first array\n    total_elements_in_first_array = k + n2\n\n    # Calculate the number of elements in the second array required to have k elements\n    remaining_elements = total_elements - total_elements_in_first_array\n\n    # Calculate the position of the element at index k in the first array\n    first_array_index = binary_search(arr1, 0, n1 - 1, k)\n\n    # Calculate the position of the element at index remaining_elements in the second array\n    second_array_index = binary_search(arr2, 0, n2 - 1, remaining_elements)\n\n    # Return the element at index first_array_index in the first array\n    return arr1[first_array_index]\n\n\ndef binary_search(arr, low, high, target):\n    '''\n    Write a function to perform a binary search on an array.\n    '''\n    # Initialize the left and right boundaries of the search range\n    left = low\n    right = high\n\n    # While the left boundary is less than or equal to the right boundary\n    while left <= right:\n        # Calculate the middle index of the search range\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to the target\n        if arr[mid] == target:\n            # Return the middle index\n            return mid\n\n        # If the target is less than the element at the middle index\n        elif arr[mid] < target:\n            # Update the right boundary of the search range to mid - 1\n            right = mid - 1\n\n        # If the target is greater than the element at the middle index\n        else:\n            # Update the left boundary of the search range to mid + 1\n            left = mid + 1\n\n    # If the target is not found in the array\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and the kth element as input.\n    The function first checks if the length of arr1 is less than k, and if it is,\n    it simply returns arr1[0] (the smallest element in arr1).\n    If the length of arr1 is greater than or equal to k, the function checks if the\n    length of arr2 is less than k, and if it is, it simply returns arr2[0] (the smallest element in arr2).\n    If both arrays have the same length, the function returns the kth element from the arrays.\n    \"\"\"\n\n    # Check if arr1 is less than k\n    if len(arr1) < k:\n        return arr1[0]\n\n    # Check if arr2 is less than k\n    elif len(arr2) < k:\n        return arr2[0]\n\n    # If both arrays have the same length, return the kth element\n    else:\n        return arr1[k-1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # converting the number to string to iterate over each digit\n    num_str = str(number)\n    # initializing the sum of digits to 0\n    sum_digits = 0\n    # iterating over each digit of the number\n    for digit in num_str:\n        # adding the digit to the sum of digits\n        sum_digits += int(digit)\n    # checking if the sum of digits is equal to the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum_of_powers = 0\n    temp_num = number\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_of_powers += digit ** 3\n        temp_num //= 10\n    if number == sum_of_powers:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    This function takes a number as an input and returns True if it is an armstrong number\n    and False otherwise.\n    \"\"\"\n    if number == 0 or number < 10:\n        return False\n\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum of the digits to 0\n    sum_digits = 0\n\n    # Iterate over the digits of the number and add each digit to the sum\n    for digit in number_str:\n        sum_digits += int(digit)\n\n    # Check if the sum of the digits is equal to the original number\n    if sum_digits == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Convert the input number to a string so that we can iterate over each digit\n    number_string = str(number)\n    # Initialize a variable to keep track of the sum of the cubes of each digit\n    digit_sum = 0\n    # Iterate over each digit in the number string\n    for digit in number_string:\n        # Convert the current digit to an integer and cube it\n        current_digit = int(digit) ** 3\n        # Add the cube of the current digit to the running total\n        digit_sum += current_digit\n    # Check if the sum of the cubes of each digit is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert the number to string\n    number_str = str(number)\n    # calculate the sum of the cubes of the digits\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n    # compare the original number with the sum of the cubes\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    sum = 0\n    temp = number\n    \n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    \n    if number == sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the given number to a string\n    number_str = str(number)\n    # Initialize the sum of the digits to zero\n    sum_of_digits = 0\n    # Loop through each digit in the string and add it to the sum of digits\n    for digit in number_str:\n        sum_of_digits += int(digit)\n    # Check if the sum of digits is equal to the original number\n    if sum_of_digits == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a given number is an armstrong number or not.\n\n    :param number: the number to be checked\n    :type number: int\n    :return: True if the number is an armstrong number, False otherwise\n    :rtype: bool\n    \"\"\"\n    total = 0\n    temp_num = number\n    while temp_num > 0:\n        digit = temp_num % 10\n        total += digit ** 3\n        temp_num //= 10\n    return number == total"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = int(number)\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return sum == number"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function checks whether the given number is armstrong or not.\n    \"\"\"\n    num = n\n    total = 0\n    while num > 0:\n        digit = num % 10\n        total += digit ** 3\n        num //= 10\n    return total == n"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    return sum, average\n\nprint(sum_average(10)) # Output: (55, 5.0)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables for sum and count\n    sum = 0\n    count = 0\n    \n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        # add the current number to the sum\n        sum += i\n        # increment the count\n        count += 1\n    \n    # calculate the average\n    average = sum / count\n    \n    # return the sum and average\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total/count\n    print(f\"The sum is {total} and the average is {average}.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n    \n    average = sum/count\n    \n    print(\"Sum of first\", n, \"natural numbers is:\", sum)\n    print(\"Average of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    avg = sum / n\n    print(\"The sum is:\", sum)\n    print(\"The average is:\", avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize variables\n    sum = 0\n    count = 0\n    average = 0\n\n    # iterate through the first n natural numbers\n    for i in range(1, number+1):\n        # add i to sum\n        sum += i\n        # increment count\n        count += 1\n\n    # calculate the average\n    average = sum / count\n\n    # return the sum and average\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    avg = sum / number\n    return sum, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    # Initialize variables\n    total = 0\n    count = 0\n\n    # Iterate over the first n numbers\n    for i in range(1, number+1):\n        total += i\n        count += 1\n\n    # Calculate the sum and average\n    sum_value = total\n    average = sum_value / count\n\n    # Return the sum and average\n    return (sum_value, average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, 'is even')\n    else:\n        print(n, 'is odd')"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 :\n        return True\n    else :\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = 1\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the dictionary and find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] > 1:\n            return char\n    \n    return \"No repeated character found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) > 1:\n            return str1[i]\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character\n    freq = {}\n    # loop through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its count\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a count of 1\n        else:\n            freq[char] = 1\n    # loop through each character in the string again to find the first repeated character\n    for char in str1:\n        # if the character is already in the dictionary and its count is greater than 1, return its index\n        if char in freq and freq[char] > 1:\n            return str1.index(char)\n    # if no repeated character is found, return -1\n    return -1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes in a string and returns the first repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    return \"No repeated character found.\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # find the first repeated character\n    for char in str1:\n        if freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            return char\n        else:\n            char_dict[char] = True\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if sum([int(j) for j in str(i)]) == i:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(num):\n    '''\n    Helper function to check if a number is a lucid number.\n    '''\n    if num < 10:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Determine if a given integer is a lucid number or not.\n    '''\n    lucid = 0\n    for i in str(n):\n        lucid += int(i) ** 2\n    return lucid == n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    current_number = 1\n    while current_number <= n:\n        for i in range(2, current_number):\n            if current_number % i == 0:\n                break\n        else:\n            lucid_numbers.append(current_number)\n        current_number += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = [2]\n    for i in range(2, n):\n        lucid_number = 2 * lucid_numbers[-1] + 1\n        lucid_numbers.append(lucid_number)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    num = 1\n    while num <= n:\n        lucid_numbers.append(num)\n        num += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 2\n    while i <= n:\n        if sum(map(int, str(i))) == i:\n            lucid_numbers.append(i)\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize a list to store the lucid numbers\n    lucid_numbers = []\n    # Start with the first lucid number (2)\n    current_number = 2\n    # While the current number is less than or equal to the given integer n\n    while current_number <= n:\n        # If the current number is a lucid number\n        if is_lucid(current_number):\n            # Add it to the list of lucid numbers\n            lucid_numbers.append(current_number)\n        # Increment the current number\n        current_number += 1\n    # Return the list of lucid numbers\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    '''\n    # Check if the integer is divisible by 2 or 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    # Check if the integer has a digit that is divisible by 3\n    for digit in str(n):\n        if int(digit) % 3 == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    # Initialize a list to store all the lucid numbers\n    ludic_numbers = []\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is a lucid number\n        if is_lucid(i):\n            # If it is, add it to the list\n            ludic_numbers.append(i)\n\n    # Return the list of lucid numbers\n    return ludic_numbers\n\ndef is_lucid(n):\n    '''\n    Write a function to check if a given integer is a lucid number.\n    A lucid number is defined as the product of its digits raised to the power of the number of digits.\n    '''\n\n    # Initialize a variable to store the number of digits\n    num_digits = len(str(n))\n\n    # Loop through all the digits in the number\n    for i in range(num_digits):\n        # Extract the digit at position i\n        digit = n % 10\n\n        # Raise the digit to the power of the number of digits\n        digit_pow = 1\n        for j in range(num_digits):\n            if j!= i:\n                digit_pow *= digit\n\n        # Check if the digit raised to the power of the number of digits is equal to n\n        if digit_pow!= n:\n            return False\n\n    # If all the digits raised to the power of the number of digits are equal to n, then n is a lucid number\n    return True"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word and join them back into a string\n    reversed_words =''.join(words[::-1])\n    return reversed_words"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    \n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    \n    # Join the words with spaces to form the reversed string\n    reversed_s =''.join(words)\n    \n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert the string to a list of words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return \" \".join(reversed_words)\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split() # Split the string into words\n    words.reverse() # Reverse the words\n    return''.join(words) # Join the reversed words back into a string with spaces\n"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    result = \" \".join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    s =''.join(words)\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string separated by spaces\n    reversed_s =''.join(words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    else:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # If the number is less than 2, then it is not a prime number\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If none of the numbers from 2 to the square root of the number divide the number, then it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef prime_num(num):\n    '''\n    Check if the given integer is a prime number using the above function.\n    '''\n    return is_prime(num)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    # check if the number is equal to 2\n    elif num == 2:\n        return True\n    # check if the number is greater than 2\n    else:\n        # loop through the numbers from 3 to the square root of the given number\n        for i in range(3, int(num**0.5)+1, 2):\n            # check if the number is divisible by any of these numbers\n            if num % i == 0:\n                return False\n        # if no divisor is found, the number is prime\n        return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    if num < 2:\n        return False\n\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return round(radian, 2)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    \n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = text.index(matches[0])\n        end_index = start_index + len(matches[0])\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        start_index = re.search(pattern, text).start()\n        end_index = re.search(pattern, text).end()\n        return matches[0], start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        start = matches[0].start()\n        end = matches[-1].end()\n        return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    This function searches for a regular expression pattern in a given string and returns the matching substring, start index and end index.\n    '''\n    # Compile the regular expression pattern\n    pattern_obj = re.compile(pattern)\n    # Find all the matches in the string\n    matches = pattern_obj.finditer(text)\n    # Initialize variables to store the matches\n    matching_string = None\n    start_index = None\n    end_index = None\n    # Loop through the matches and store the matching substring, start index and end index\n    for match in matches:\n        matching_string = match.group()\n        start_index = match.start()\n        end_index = match.end()\n    # Return the matching string, start index and end index\n    return matching_string, start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    result = re.findall(pattern, text)\n    \n    if result:\n        return result[0], 0, len(result[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n <= 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initialize the sum of the first n positive integers\n    sum_n = 0\n\n    # Loop through the first n positive integers and add them to the sum\n    for i in range(1, n+1):\n        sum_n += i\n\n    # Calculate the nth bell number using the formula: bell(n) = ((n/2)!) * ((n/2)! * (n/2-1)!)\n    # This formula is the same as the standard bell number formula: (n/2) + (1/2)ln(n/2)\n    return (sum_n/2) + (1/2)*math.log(n/2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    This function takes an integer n as input and returns the nth bell number.\n    '''\n    # convert n to binary string\n    binary_str = bin(n)[2:]\n    \n    # initialize variable to hold the result\n    result = 0\n    \n    # iterate through the binary string and add the number of ones to the result\n    for i in range(len(binary_str)):\n        if binary_str[i] == '1':\n            result += 1\n            \n    # return the result\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            bell_number = 0\n            for j in range(1, i+1):\n                bell_number += 1\n            bell_number *= i\n            if bell_number == n:\n                return i\n        return \"Bell number not found\""
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    # Initializing the first bell number to 1\n    bell_num = 1\n\n    # Looping through the numbers until nth bell number is found\n    for i in range(2, n+1):\n        # Adding bell number to the previous bell number\n        bell_num = bell_num + bell_num - 1\n\n    # Returning the nth bell number\n    return bell_num"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the kth element from a given list.\n    \"\"\"\n    return lst[:k-1] + lst[k:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        return \"Error: L is greater than the length of the list.\"\n    else:\n        k = L - 1\n        return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and an integer k as input and returns a list with the same elements,\n    but the k'th element removed.\n    '''\n    # check if the length of the list is greater than k\n    if len(list1) > L:\n        # create a new list without the k'th element\n        new_list = list1[:L]\n    else:\n        # return the list if k is greater than or equal to the length of the list\n        return list1\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Remove the kth element from the list\n    list1.pop(L-1)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # initialize index to 0\n    index = 0\n    # initialize new list\n    new_list = []\n    # iterate over the list\n    for i in range(len(list1)):\n        # if current index is less than k\n        if index < L:\n            # add element to new list\n            new_list.append(list1[i])\n            # increment index\n            index += 1\n        # if current index is equal to k\n        else:\n            # ignore element and increment index\n            index += 1\n    # return new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) <= L:\n        return list1\n    else:\n        return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # create a new list with the same elements as the original list\n    new_list = list1[:]\n    # remove the kth element from the new list\n    kth_element = new_list.pop(L-1)\n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # define the function to remove the k'th element from the list\n    def remove_kth(list1, L, k):\n        # check if the list is empty\n        if len(list1) == 1:\n            return []\n        # check if the k'th element is to be removed\n        if k == 1:\n            # check if the list has only one element\n            if len(list1) == 2:\n                return [list1[1]]\n            # check if the list has two elements\n            else:\n                return list1[:-1]\n        # check if the list has more than two elements\n        else:\n            # check if the list has only one element\n            if len(list1) == 2:\n                # get the first element of the list and the second element\n                first_elem = list1[0]\n                second_elem = list1[1]\n                # check if the second element should be removed\n                if k == 2:\n                    # return the first element and the second element\n                    return [first_elem, second_elem]\n                # check if the first element should be removed\n                else:\n                    # return the first element and the second element\n                    return [second_elem]\n            # check if the list has two elements\n            else:\n                # get the first element of the list, the second element, and the third element\n                first_elem = list1[0]\n                second_elem = list1[1]\n                third_elem = list1[2]\n                # check if the second element should be removed\n                if k == 2:\n                    # get the first element and the third element and return them\n                    return [first_elem, third_elem]\n                # check if the first element should be removed\n                else:\n                    # get the second element and the third element and return them\n                    return [second_elem, third_elem]\n\n    # check if the length of the list is less than or equal to L\n    if len(list1) <= L:\n        return list1\n    else:\n        # call the function to remove the k'th element\n        return remove_kth(list1, L, L)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    # get the number of rows and columns in the matrix\n    rows = len(test_list)\n    cols = len(test_list[0])\n\n    # check if then'th column exists\n    if N >= cols:\n        raise ValueError(\"N is greater than or equal to the number of columns in the matrix.\")\n\n    # initialize the max value to be the first element of the first row\n    max_value = test_list[0][0]\n\n    # loop through all rows and columns and find the max value of then'th column\n    for i in range(rows):\n        if i == 0:\n            # skip the first row (the column we are interested in is already initialized to the first element)\n            continue\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the longest row in the matrix\n    max_row_length = len(test_list[0])\n    \n    # Initialize an empty list to store the max values of each row\n    row_maxes = []\n    \n    # Iterate over each row in the matrix\n    for row in test_list:\n        # If the current row has the same length as the longest row, it means we have found the max value for the nth column\n        if len(row) == max_row_length:\n            row_maxes.append(max(row[i] for i in range(len(row))))\n    \n    # Return the maximum value of the nth column\n    return max(row_maxes)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list)\n    m = len(test_list[0])\n    for i in range(n):\n        max_val = max(test_list[i][N-1], key=lambda x: test_list[i][N-1])\n        test_list[i][N-1] = max_val\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(test_list[i][N-1], max_val)\n        else:\n            max_val = max(test_list[i][N-1], max_val)\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the number of rows and columns in the matrix\n    num_rows = len(test_list)\n    num_cols = len(test_list[0])\n    \n    # Check if the column index is within the range of columns in the matrix\n    if N >= num_cols:\n        return 'Invalid column index'\n    \n    # Initialize the maximum value to be the first element in the first row\n    max_val = test_list[0][0]\n    \n    # Loop through each row in the matrix\n    for i in range(num_rows):\n        # Check if the current element is greater than the maximum value\n        if test_list[i][N] > max_val:\n            # Update the maximum value to be the current element\n            max_val = test_list[i][N]\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = None\n    for row in test_list:\n        if max_value is None or max_value < row[N-1]:\n            max_value = row[N-1]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row in the matrix\n    first_row_length = len(test_list[0])\n    # Check if N is valid\n    if N > first_row_length or N < 1:\n        return \"Invalid input. N should be between 1 and the length of the first row.\"\n    # Find the max of then'th column for all rows in the matrix\n    max_values = []\n    for row in test_list:\n        max_value = max(row[N-1])\n        max_values.append(max_value)\n    # Return the max value of then'th column for all rows in the matrix\n    return max_values"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the longest row in the matrix\n    longest_row = max(len(row) for row in test_list)\n\n    # Loop through each row in the matrix and find the nth column maximum value\n    for row in test_list:\n        # Find the index of then'th column\n        nth_col_index = (longest_row - 1) - N\n\n        # If the nth column index is out of range, set it to the maximum value\n        if nth_col_index < 0:\n            nth_col_index = 0\n\n        # Find the maximum value of the nth column\n        nth_col_max = max(row[nth_col_index])\n\n        # Replace the nth column maximum value with the maximum of the entire row\n        row[nth_col_index] = [nth_col_max] * longest_row\n\n    # Return the modified matrix\n    return test_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # iterate over all rows in the matrix\n    for row in matrix:\n        # find then'th column\n        nth_col = [row[i] for i in range(len(row)) if i % N == 0]\n        # find the max of the nth column\n        max_of_nth_col = max(nth_col)\n        # replace the value of the nth column with the max value\n        for i in range(len(nth_col)):\n            if nth_col[i] == max_of_nth_col:\n                nth_col[i] = max_of_nth_col\n    # return the modified matrix\n    return matrix"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][0]\n        test_list[i] = (test_list[i][0], cum_sum)\n    return test_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for num in test_list:\n        cumulative_sum += num\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize cumulative sum to zero\n    cumulative_sum = 0\n    # Iterate through the list and add each value to the cumulative sum\n    for value in test_list:\n        cumulative_sum += value\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to zero\n    cum_sum = 0\n    # loop through each element in the list\n    for num in test_list:\n        # add the current number to the cumulative sum\n        cum_sum += num\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] == 1:\n            cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in test_list:\n        cum_sum += i\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum\n    cum_sum = 0\n    \n    # Iterate over each element in the list\n    for num in test_list:\n        # Add the current element to the cumulative sum\n        cum_sum += num\n        \n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cumulative_sum = 0\n    # Iterate over each tuple in the list\n    for tup in test_list:\n        # Iterate over each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumulative_sum += val\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the averages\n    averages = []\n    \n    # Loop through each tuple in the input list\n    for i in range(len(nums)):\n        # Get the average value for the current tuple\n        avg = sum(nums[i]) / len(nums[i])\n        # Append the average value to the averages list\n        averages.append(avg)\n    \n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n    avg = total / count\n    return [avg]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # convert the input tuple of tuples to a list of lists\n    nums_list = [list(i) for i in nums]\n    # calculate the average of each sublist\n    averages = [sum(i)/len(i) for i in nums_list]\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store average values\n    averages = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the average value of the tuple\n        avg = sum(tup) / len(tup)\n        # append the average value to the list\n        averages.append(avg)\n    # return the list of average values\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create an empty list to store the average values\n    avg_list = []\n    # loop through each tuple in the input tuple of tuples\n    for tup in nums:\n        # calculate the average value of the tuple\n        avg = sum(tup) / len(tup)\n        # append the average value to the avg_list\n        avg_list.append(avg)\n    # return the avg_list\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        if len(num_tuple) == 1:\n            result.append(num_tuple[0])\n        else:\n            result.append(sum(num_tuple) / len(num_tuple))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        total = sum(t)\n        count = len(t)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    num_list = []\n    for tup in nums:\n        num_list.append(sum(tup)/len(tup))\n    return num_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # check if the two tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must be of the same length.')\n    # loop through the tuples and perform the element wise modulo\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs element-wise modulo operation.\n    '''\n    # Check if the length of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        return 'Input tuples are not of equal length.'\n    # Perform element-wise modulo operation\n    result_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n\n    # Perform element-wise modulo\n    result_tup = tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result = result + (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    # Check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both input tuples must be of equal length.\")\n        return\n\n    # Perform element wise modulo using a loop\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    def min_jumps_helper(curr, total_jumps, max_jumps):\n        if curr == (d, 0):\n            return total_jumps\n        if max_jumps == 0:\n            return float('inf')\n        \n        next_positions = [(curr[0] + i[0], curr[1] + i[1]) for i in [[-1, 0], [0, -1], [1, 0], [0, 1]]]\n        \n        for i in next_positions:\n            if 0 <= i[0] < steps and 0 <= i[1] < steps and abs(i[0] - d) + abs(i[1]) <= max_jumps:\n                total_jumps += min_jumps_helper(i, total_jumps, max_jumps - 1)\n        \n        return total_jumps\n    \n    total_jumps = 0\n    max_jumps = steps\n    while max_jumps > 0:\n        total_jumps += min_jumps_helper((0, 0), total_jumps, max_jumps)\n        max_jumps -= 1\n        \n    return total_jumps\n\nprint(min_Jumps(5, 2)) # Output: 3"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Find the maximum number of jumps possible\n    max_jumps = steps // d\n    # If the last step is greater than or equal to d, then add 1 to the maximum number of jumps\n    if steps % d >= d:\n        max_jumps += 1\n    # Return the maximum number of jumps\n    return max_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # finding minimum number of jumps required\n    min_jumps = 0\n    last_position = 0\n    # using dynamic programming approach\n    for i in range(1, steps+1):\n        if steps-i >= d:\n            # reach the desired point within the given number of steps\n            min_jumps += steps-i\n            # backtrack to the previous position and set the new last position\n            steps = i\n            last_position = i - d\n        else:\n            # cannot reach the desired point within the given number of steps\n            min_jumps += steps-last_position\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Initialize variables\n    is_valid = False\n    count = 0\n    last_x = -1\n    last_y = 0\n    \n    # Iterate through the steps\n    for i in range(steps):\n        x = last_x + d\n        y = last_y - 1\n        \n        # Check if the point is valid\n        if 0 <= x < steps and 0 <= y < steps:\n            if x == steps - 1 and y == 0:\n                is_valid = True\n                break\n            last_x = x\n            last_y = y\n            count += 1\n    \n    # Return the count of jumps\n    return count if is_valid else -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    end_point = (steps-d, 0)\n    # Iterate through all possible starting points\n    for i in range(0, steps-d, 1):\n        # Check if the end point is reached\n        if end_point == (i, 0):\n            return count + 1\n        # Check if the start point is valid\n        if i+d > steps:\n            continue\n        # Check if the start point is closer than the current end point\n        if (abs(i+d-end_point[0]) < abs(end_point[0]-end_point[1])):\n            end_point = (i+d, 0)\n            count += 1\n    # If the end point is not reached, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # The number of steps required to reach the origin from a point with (x, y) coordinates\n    def stepCount(x, y):\n        return abs(x) + abs(y)\n    \n    # The maximum number of jumps required to reach the origin from a point with (x, y) coordinates\n    def maxJumps(x, y):\n        return int(d / stepCount(x, y))\n    \n    # The minimum number of jumps required to reach the origin from a point with (x, y) coordinates\n    def minJumps(x, y):\n        return 1 if abs(x) > d else 0\n    \n    # The minimum number of jumps required to reach the origin from the starting point (0, 0)\n    minSteps = min(stepCount(x, y) for x in range(d+1) for y in range(d+1))\n    \n    # Find the minimum number of jumps required to reach the point (d, 0) from the starting point (0, 0)\n    jumps = minJumps(0, 0) + minJumps(d, 0) - 2\n    \n    # The number of jumps required to reach the origin from a point with (x, y) coordinates\n    def jumpCount(x, y):\n        return min(maxJumps(x, y), jumps)\n    \n    # The minimum number of jumps required to reach the origin from a point with (x, y) coordinates\n    def minJumpsFrom(x, y):\n        return min(jumpCount(x, y))\n    \n    # The minimum number of jumps required to reach the origin from the starting point (0, 0)\n    minStepsFrom = min(minJumpsFrom(x, y) for x in range(d+1) for y in range(d+1))\n    \n    return minStepsFrom"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function checks for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Steps: int\n    d: int\n\n    Returns: int\n    '''\n\n    # Set the starting point of the plane\n    start = (0, d)\n\n    # Initialize the jump counter and set the current position to start\n    jumps = 0\n    current = start\n\n    # Iterate through the steps and check for the number of jumps required\n    for step in range(steps):\n        # Check for the number of possible jumps to the left and right from the current position\n        left_jumps = 1 if current[0] > 0 else 0\n        right_jumps = 1 if current[0] + 1 < d else 0\n\n        # Calculate the number of jumps required in the current position\n        current_jumps = min(left_jumps, right_jumps)\n\n        # Update the jump counter and the current position\n        jumps += current_jumps\n        current = (current[0] + current_jumps, current[1] - current_jumps)\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n        steps (int): Number of steps required to reach (d, 0) from origin.\n        d (int): Maximum distance allowed to reach (d, 0) from origin.\n\n    Returns:\n        int: Number of jumps required to reach (d, 0) from origin.\n\n    \"\"\"\n\n    # initialize variables\n    current_position = (0, 0)\n    current_distance = 0\n    jumps = 0\n\n    # loop through each step\n    for i in range(steps):\n        # move to the next position\n        next_position = (current_position[0] + 1, current_position[1])\n\n        # check if next position is valid\n        if next_position[0] < 0 or next_position[0] >= d or next_position[1] < 0 or next_position[1] >= d:\n            # if next position is invalid, return jumps required\n            return jumps\n\n        # check if next position is closer to (d, 0) from origin\n        if abs(next_position[0] - d) + abs(next_position[1]) < abs(current_position[0] - d) + abs(current_position[1]):\n            # if next position is closer, update current position and distance\n            current_position = next_position\n            current_distance = abs(next_position[0] - d) + abs(next_position[1])\n        else:\n            # if next position is not closer, move to the next position\n            current_position = next_position\n\n        # increment number of jumps\n        jumps += 1\n\n    # if all steps are completed without reaching (d, 0) from origin, return jumps required\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    def helper(dist):\n        if dist == 0:\n            return 1\n        elif dist == 1:\n            return 2\n        else:\n            return 3 + helper(dist-1)\n\n    jumps = helper(d)\n    return min(jumps, steps)\n"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # number of jumps required to reach (d, 0) from origin\n    jumps = 0\n    # number of steps to reach (d, 0) from origin\n    i = steps\n    # checking for the number of jumps required to reach (d, 0) from origin\n    while i >= 1:\n        if i >= d:\n            jumps += i//d\n            i -= d\n        else:\n            jumps += 1\n            i -= 1\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the lists are same\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length.\")\n        return\n    \n    # loop through each element of the lists\n    for i in range(len(nums1)):\n        # divide the two elements and store the result in a new list\n        nums1[i] = nums1[i] / nums2[i]\n    \n    # return the new list of divided elements\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list where each element is the element-wise division of corresponding elements in the two input lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: division by zero\")\n            break\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list with element-wise division of the corresponding elements.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must be of equal length\")\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1/num2)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    return ''.join(numbers) + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    new_str = ''\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            new_str += char\n    new_str += ''.join(num_list)\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list to store the numbers in the string\n    nums = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number\n        if char.isdigit():\n            # append the number to the nums list\n            nums.append(char)\n    # join the nums list to form a string\n    new_str = ''.join(nums)\n    # loop through the new string in reverse order\n    for i in range(len(new_str)-1, -1, -1):\n        # if the character is a number\n        if new_str[i].isdigit():\n            # append it to the end of the original string\n            test_str = test_str[:i] + new_str[i] + test_str[i+1:]\n            # break out of the loop\n            break\n    # return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_regex = re.compile(r'\\d+')\n    match = num_regex.search(test_str)\n    if match:\n        # Extract the number(s) from the string\n        num_str = match.group()\n        # Replace the number(s) with an empty string\n        test_str = re.sub(r'\\d+', '', test_str)\n        # Append the number(s) to the end of the string\n        test_str += num_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    num_str = \"\"\n    # loop through each character in the input string\n    for char in test_str:\n        # check if the current character is a number\n        if char.isdigit():\n            # if it is, add it to the num_str variable\n            num_str += char\n        else:\n            # if it's not a number, move it to the beginning of the string\n            test_str = char + test_str\n    # return the modified string with the numbers moved to the end\n    return num_str + test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = []\n    for i in test_str:\n        if i.isdigit():\n            nums.append(i)\n    nums.sort(reverse=True)\n    test_str = ''.join(nums) + test_str\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    new_str = \"\"\n    is_number = False\n    for char in test_str:\n        if char.isdigit():\n            is_number = True\n        else:\n            if is_number:\n                new_str += char\n                is_number = False\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize a variable to store the numbers\n    nums = \"\"\n\n    # Loop through each character in the string\n    for char in test_str:\n\n        # Check if the character is a number\n        if char.isdigit():\n\n            # If it is, append it to the nums variable\n            nums += char\n\n    # Loop through each character in the string again and replace any number\n    # with its corresponding character in the nums variable\n    for i, char in enumerate(test_str):\n        if char.isdigit():\n            test_str = test_str[:i] + nums + test_str[i:]\n\n    # Return the modified string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = \"\"\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    return result + test_str.replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\")"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    # initialize an empty list to store numbers\n    num_list = []\n\n    # iterate through each character in the string\n    for char in test_str:\n        # if the character is a number, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n\n    # join the num_list into a string and return it\n    return ''.join(num_list)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the list in ascending order\n    a.sort()\n\n    # Initialize the maximum subset size to 1\n    max_size = 1\n\n    # Iterate through the list\n    for i in range(len(a) - 1):\n        # If the difference between the current element and the next element is not divisible by 2\n        if a[i+1] - a[i] % 2!= 0:\n            # Increment the maximum subset size by 1\n            max_size += 1\n            # If the maximum subset size is greater than the current largest subset, update the largest subset\n            if max_size > largest_subset:\n                largest_subset = max_size\n\n    # Return the largest subset size\n    return largest_subset"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                max_size = max(max_size, j-i+1)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    subset = [0] * n\n    max_size = 0\n    for i in range(n):\n        max_index = -1\n        max_subset_size = 0\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and subset[j] + 1 > max_subset_size:\n                max_index = j\n                max_subset_size = subset[j] + 1\n        subset[i] = max_index\n        max_size = max(max_size, max_subset_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Sort the input list in ascending order\n    a.sort()\n    \n    # Initialize variables to store the largest subset size and the index of the last element\n    max_size = 0\n    last_index = 0\n    \n    # Loop through the list and find the largest subset of every pair\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            max_size = max(max_size, i-last_index)\n        else:\n            last_index = i\n    \n    # Return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the input list in descending order\n    a.sort(reverse=True)\n    # initialize variables to keep track of the current subset and the maximum size found so far\n    current_subset = []\n    max_size = 0\n    # iterate through the input list\n    for num in a:\n        # check if the current number is divisible by the last number in the current subset\n        if num % current_subset[-1] == 0:\n            # if so, add the current number to the current subset and check if the size of the subset is greater than the current maximum\n            current_subset.append(num)\n            if len(current_subset) > max_size:\n                max_size = len(current_subset)\n        else:\n            # if not, remove the last number in the current subset and keep checking for a divisible pair\n            current_subset = current_subset[:-1]\n    # return the maximum size of the subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # Sort the list in ascending order\n    size = 1  # Initialize the size to 1\n\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            size += 1\n        else:\n            size = 1\n\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if a[i - 1] % a[j - 1] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[n]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort() # sort the list in ascending order\n    \n    # initialize variables\n    max_size = 0\n    current_size = 1\n    end = 0\n    \n    # iterate through the list\n    for i in range(1, len(a)):\n        # if the current number is divisible by the end number, increment the size and update max_size\n        if a[i] % a[end] == 0:\n            current_size += 1\n            if current_size > max_size:\n                max_size = current_size\n        # otherwise, reset the current size and move to the next end number\n        else:\n            current_size = 1\n            end = i\n    \n    # return the largest size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the given list in ascending order\n    a.sort()\n\n    # Initialize variables to store the current subarray size and the maximum subarray size\n    current_size = 1\n    max_size = 1\n\n    # Iterate through the list\n    for i in range(1, len(a)):\n        # If the difference between the current element and the next element is not divisible by 2, add the next element to the current subarray\n        if a[i] - a[i - 1] % 2!= 0:\n            current_size += 1\n        else:\n            # If the current subarray size is greater than the maximum subarray size, update the maximum subarray size\n            if current_size > max_size:\n                max_size = current_size\n            # Reset the current subarray size\n            current_size = 1\n\n    # If the current subarray size is greater than the maximum subarray size, update the maximum subarray size\n    if current_size > max_size:\n        max_size = current_size\n\n    return max_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n\n    pivot_index = random.randint(0, len(arr) - 1)\n    pivot = arr[pivot_index]\n\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n\n    if k < len(left):\n        return quickselect(left, k)\n    elif k < len(left) + len(middle):\n        return middle[0]\n    else:\n        return quickselect(right, k - len(left) - len(middle))\n\ndef get_median(arr1, arr2, n):\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n\n    sorted_arr = sorted_arr1 + sorted_arr2\n    median = quickselect(sorted_arr, n)\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    merged_list.sort()\n\n    # Find the median\n    if n % 2 == 0:\n        return (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        return merged_list[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Sort the two lists\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the indices of the middle element in each list\n    i = n // 2\n    j = (n + 1) // 2\n    \n    # Return the median as the average of the middle elements from each list\n    return (arr1[i] + arr2[j]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    \n    # Sort both the lists\n    arr1.sort()\n    arr2.sort()\n    \n    # Find the mid-point of both sorted lists\n    mid1 = n//2\n    mid2 = n - mid1\n    \n    # Find the median of the two mid-points\n    if n % 2 == 0:\n        median = (arr1[mid1] + arr1[mid1-1]) / 2\n    else:\n        median = arr1[mid1]\n    \n    # Check if median is in either of the lists\n    if median in arr1[:mid1] or median in arr1[mid1+1:] or \\\n       median in arr2[:mid2] or median in arr2[mid2+1:]:\n        # If median is in one of the lists, return the other one\n        return get_median(arr1, arr2, n)\n    else:\n        # If median is in both lists, return the median\n        return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of two sorted lists\n    if n % 2 == 0:\n        mid = n // 2\n        median1 = (arr1[mid - 1] + arr1[mid]) / 2\n        median2 = (arr2[mid - 1] + arr2[mid]) / 2\n        median = (median1 + median2) / 2\n    else:\n        mid = n // 2\n        median1 = arr1[mid]\n        median2 = arr2[mid]\n        median = (median1 + median2) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two lists into a single list\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Find the middle index\n    middle_index = n // 2\n    # If the list size is odd, the median is the middle element\n    if n % 2 == 1:\n        median = sorted_list[middle_index]\n    # If the list size is even, the median is the average of the middle two elements\n    else:\n        median = (sorted_list[middle_index-1] + sorted_list[middle_index]) / 2\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into one sorted list\n    merged_list = arr1 + arr2\n    \n    # Find the middle index\n    mid = n // 2\n    \n    # If the length of the merged list is odd, then the median is the middle element\n    if n % 2 == 1:\n        return merged_list[mid]\n    \n    # If the length of the merged list is even, then the median is the average of the middle two elements\n    else:\n        return (merged_list[mid-1] + merged_list[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    # Calculate the median\n    if n % 2 == 0:\n        median = (sorted_list[n//2-1] + sorted_list[n//2]) / 2\n    else:\n        median = sorted_list[n//2]\n    return median"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    This function computes the n-th power of each number in a list.\n    \"\"\"\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    power = [0]*len(nums)\n    for i in range(len(nums)):\n        power[i] = nums[i]**n\n    return power"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num**n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i] ** n\n    return nums"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper_string = string.upper()\n    return upper_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is all uppercase or not.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if len(string) == 0:\n        return \"The string is empty.\"\n    elif len(string) == 1:\n        return string.upper()\n    else:\n        return ''.join([char.upper() if char.islower() else char for char in string])"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are uppercase, False otherwise.\n    '''\n    return string.isupper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the length of the list is less than 2 or not\n    if len(newList) < 2:\n        return \"The length of the list should be at least 2\"\n    \n    # Swapping the first and last element\n    firstLast = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = firstLast\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 0:\n        if len(newList) == 1:\n            newList[0], newList[-1] = newList[-1], newList[0]\n            return newList\n        else:\n            newList[0], newList[-1] = newList[-1], newList[0]\n            swap_List(newList[1:-1])\n            newList[0], newList[-1] = newList[-1], newList[0]\n            return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # swapping the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    else:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the given list has at least two elements\n    if len(newList) < 2:\n        print(\"The given list should have at least two elements\")\n        return\n    \n    # Swap the first and last elements of the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements\"\n    \n    # interchange the first and last elements in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 2:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return \"List must have exactly two elements to swap.\""
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # calculate the area of the smallest triangle\n    area_smallest = math.pi * r**2\n    # calculate the area of the largest triangle\n    area_largest = 2 * math.pi * r\n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    area_largest_inscribed = math.acos(1 - (1 / (area_largest/area_smallest))) * area_smallest\n    # return the area of the largest triangle that can be inscribed in the semicircle\n    return area_largest_inscribed"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate semi-perimeter of the semicircle\n    sp = 2 * r * 3.14159265358979323846\n    \n    # Calculate area of largest triangle\n    area = sp * (3/2)\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # convert radius to radians and calculate semi-circle radius\n    semi_radius = r / 2.0\n    # calculate area of the smallest triangle that can be inscribed in the semi-circle\n    area1 = 3.0 * r * r / 4.0\n    # calculate area of the largest triangle that can be inscribed in the semi-circle\n    area2 = (semi_radius * semi_radius - r * r) * (semi_radius * semi_radius - r * r) / 4.0\n    # calculate the maximum of the two areas\n    area = max(area1, area2)\n    # convert area to square centimeters\n    area_sq_cm = area * 100.0 * 100.0\n    return area_sq_cm"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    s = math.pi/4 # radius\n    a = 2*r/3 # semi-perimeter\n    b = 1/2*r # semi-perimeter\n    c = math.sqrt(3)/2*r # semi-perimeter\n    area = math.sqrt(s*(s-a)*(s-b)*(s-c)) # Heron's formula\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n    \n    # Calculate the area of a triangle with sides of length 1\n    area1 = 0.5 * r ** 2\n    \n    # Calculate the area of a triangle with sides of length 2\n    area2 = 0.5 * semi_perimeter ** 2\n    \n    # Calculate the area of the largest triangle\n    area3 = 0.5 * semi_perimeter ** 2 - area1 - area2\n    \n    # Return the area of the largest triangle\n    return area3"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    import math\n\n    # Find the semi-circle radius\n    semi_circle_radius = 2*r\n\n    # Find the perimeter of the triangle\n    a = math.sqrt(3)*semi_circle_radius\n    b = 2*semi_circle_radius\n\n    # Find the semi-perimeter of the triangle\n    c = 2*r\n\n    # Use Heron's formula to find the area of the largest triangle\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Using Heron's formula to find the area of a triangle\n    s = 3 * r**2 / (4 * (1 + r))\n    area = (s * (s - r) * (s - 2*r) * (s - 3*r))**0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Convert radius to radians\n    r_radians = r * (3.14159 / 180)\n\n    # Find the semiperimeter\n    s = (3 * r_radians)**0.5\n\n    # Calculate the area of the base\n    A = 3 * r_radians - (s**2)\n\n    # Calculate the area of the largest triangle\n    area = (A * s) / 2\n\n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r\n    b = 2*r\n    c = r**2\n\n    s = (a + b + c)**0.5\n\n    # Calculate the semi-perimeter of the largest triangle that can be inscribed in the semicircle\n    s_sq = s*s\n    p = (2*s_sq)**0.5\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3*math.sqrt(s_sq) / p)**0.5\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    # calculate the semi-circle's area\n    area = math.pi * r**2\n    \n    # calculate the largest triangle's area\n    largest_triangle_area = math.sqrt(3) * r**2\n    \n    return area, largest_triangle_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] > mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i] - i!= 0 and array[i] - i!= i:\n            return array[i] - i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number in the array.\n    The function first checks if the array is sorted. If it is, then the function uses binary search to find\n    the smallest missing number. If the array is not sorted, then the function uses a more efficient algorithm\n    that iterates through the array and checks if each number is present in the array.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if array[mid] > mid:\n            start = mid + 1\n        elif array[mid] < mid:\n            end = mid - 1\n        else:\n            end = mid - 1\n\n    return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if not end:\n        end = len(array) - 1\n\n    # iterate over the array and check for missing numbers\n    for num in range(start, end + 1):\n        if num not in array:\n            return num\n\n    # if no missing numbers are found, return the last number + 1\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n\n    Parameters:\n    array (list): A sorted list of natural numbers.\n    start (int): The starting index of the array. Default is 0.\n    end (int): The ending index of the array. Default is None, which means the last index of the array.\n\n    Returns:\n    int: The first missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = start + (end - start) // 2\n\n        if mid > 0 and array[mid - 1] == mid:\n            start = mid + 1\n        elif mid < len(array) - 1 and array[mid + 1] == mid:\n            end = mid - 1\n        else:\n            return mid\n\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n\n    even_list = [] # empty list to store even numbers\n    \n    for num in list: # iterate through each number in the list\n        \n        if num % 2 == 0: # if the number is even\n            \n            even_list.append(num) # add it to the even_list\n    \n    return even_list # return the even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    \n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num)\n            \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = [(x-1, y), (x+1, y), (x, y-1), (x, y+1)]\n    for sub_ele in sub:\n        x, y = sub_ele\n        if (x-1, y) in adj_list:\n            adj_list.remove((x-1, y))\n        if (x+1, y) in adj_list:\n            adj_list.remove((x+1, y))\n        if (x, y-1) in adj_list:\n            adj_list.remove((x, y-1))\n        if (x, y+1) in adj_list:\n            adj_list.remove((x, y+1))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if sub is None:\n        sub = []\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x - 1, y))\n    if y > 0:\n        adj.append((x, y - 1))\n    if x < len(grid) - 1:\n        adj.append((x + 1, y))\n    if y < len(grid[0]) - 1:\n        adj.append((x, y + 1))\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]\n    return adj + sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    This function extracts all the adjacent coordinates of a given coordinate tuple.\n\n    Args:\n        ele: coordinate tuple to extract adjacent coordinates from\n        sub: optional argument to specify the sub-grid size (default=1)\n\n    Returns:\n        list of adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    sub = sub or 1\n    sub_size = sub * 2 + 1\n    adj = []\n    for i in range(sub_size):\n        for j in range(sub_size):\n            if i!= 0 or j!= 0:\n                adj.append((x + i, y + j))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adj_coords = []\n    for i in range(len(ele)):\n        if i == 0:\n            if sub:\n                adj_coords.append((ele[i]+1, sub[0][1]))\n                adj_coords.append((ele[i]+1, sub[0][0]))\n            else:\n                adj_coords.append((ele[i]+1, ele[i+1]))\n        elif i == len(ele)-1:\n            if sub:\n                adj_coords.append((ele[i-1], sub[-1][1]))\n                adj_coords.append((ele[i-1], sub[-1][0]))\n            else:\n                adj_coords.append((ele[i-1], ele[i]))\n        else:\n            if sub:\n                adj_coords.append((ele[i-1], sub[i-1][1]))\n                adj_coords.append((ele[i-1], sub[i-1][0]))\n                adj_coords.append((ele[i+1], sub[i][1]))\n                adj_coords.append((ele[i+1], sub[i][0]))\n            else:\n                adj_coords.append((ele[i-1], ele[i]))\n                adj_coords.append((ele[i+1], ele[i]))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n\n    Parameters:\n    ele (tuple): a coordinate tuple (x, y)\n    sub (list): a list to store the sub-coordinates (default: None)\n\n    Returns:\n    sub (list): the list of adjacent coordinates\n    '''\n\n    # initialize variables\n    x, y = ele\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n    adj = []\n\n    # iterate over the 4 adjacent cells\n    for i in range(4):\n        nx = x + dx[i]\n        ny = y + dy[i]\n        if 0 <= nx < 10 and 0 <= ny < 10:\n            if (nx, ny)!= ele and (nx, ny) not in sub:\n                adj.append((nx, ny))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    if sub:\n        for coord in sub:\n            x_new, y_new = coord\n            if x-1 == x_new:\n                yield (x, y_new), ((x-1, y), (x-1, y_new))\n            if x+1 == x_new:\n                yield (x, y_new), ((x+1, y), (x+1, y_new))\n            if y-1 == y_new:\n                yield ((x_new, y), (x_new, y-1)), ((x, y-1), (x_new, y-1))\n            if y+1 == y_new:\n                yield ((x_new, y), (x_new, y+1)), ((x, y+1), (x_new, y+1))\n    else:\n        if x-1 >= 0:\n            yield (x, y-1), ((x-1, y), (x, y-1))\n        if x+1 < len(grid):\n            yield (x, y+1), ((x+1, y), (x, y+1))\n        if y-1 >= 0:\n            yield ((x, y), (x-1, y)), ((x, y-1), (x-1, y))\n        if y+1 < len(grid[0]):\n            yield ((x, y), (x+1, y)), ((x, y+1), (x+1, y))"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    # iterate over all possible adjacent x and y coordinates\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i == x and j == y:\n                continue\n            # check if the adjacent coordinates are within the bounds of the image\n            if 0 <= i < width and 0 <= j < height:\n                # append the adjacent coordinates to the list\n                adj_coords.append((i, j))\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Initialize an empty list to store adjacent coordinates\n    adj = []\n\n    # Extract the x and y coordinates of the given tuple\n    x, y = ele\n\n    # Check all possible adjacent coordinates and append them to the adj list\n    if x > 0:\n        adj.append((x-1, y))\n    if x < len(sub)-1:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < len(sub[x])-1:\n        adj.append((x, y+1))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n        nx, ny = x+dx, y+dy\n        if (0 <= nx < n) and (0 <= ny < m):\n            if (nx, ny) not in sub:\n                adj.append((nx, ny))\n                sub.append((nx, ny))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the text into words\n    words = text.split()\n    # Iterate over each word\n    for word in words:\n        # Check if the word contains only spaces\n        if word.strip() == '':\n            # Replace the spaces with underscores\n            words[words.index(word)] = word.replace(' ', '_')\n        # Check if the word contains only underscores\n        elif word.strip() == '_':\n            # Replace the underscores with spaces\n            words[words.index(word)] = word.replace('_','')\n    # Join the words back into a string\n    text =''.join(words)\n    # Return the final string\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Convert spaces to underscores\n    new_text = text.replace(\" \", \"_\")\n    # Convert underscores to spaces\n    new_text = new_text.replace(\"_\", \" \")\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Remove spaces from the text\n    text = text.replace(' ', '')\n\n    # Replace underscores with spaces\n    text = text.replace('_','')\n\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    # Check if the input is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n    \n    # Convert all whitespaces to underscores and vice versa\n    new_text = text.replace(\" \", \"_\")\n    new_text = new_text.replace(\"_\", \" \")\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-zero_count] = num_list[len(num_list)-1-zero_count], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    # create a copy of the list so that we don't modify the original one\n    num_list = list(num_list)\n    # loop through the list from the beginning\n    for i in range(len(num_list)):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list.append(num_list.pop(i))\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n    for i in range(len(zero_index)-1, -1, -1):\n        num_list.pop(zero_index[i])\n        num_list.insert(len(num_list)-1, 0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = -1\n\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index = i\n            break\n\n    if zero_index == -1:\n        return num_list\n\n    for i in range(zero_index, len(num_list) - 1):\n        num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Initialize two pointers: one for the current position in the list and one for the last position in the list.\n    i = 0\n    j = len(num_list) - 1\n    \n    # Traverse the list from both ends. If the element at the current position is not zero, swap it with the element at the last position.\n    while i < j:\n        if num_list[i]!= 0:\n            i += 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n            \n    # Return the modified list.\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # loop through the list\n    for i in range(len(num_list)):\n        # if the current element is zero, move it to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[-1] = num_list[-1], num_list[i]\n            # decrement the length of the list to reflect the change\n            len_list = len(num_list)\n            while len_list > 0 and num_list[-1] == 0:\n                num_list.pop()\n                len_list -= 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1-count] = num_list[len(num_list)-1-count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = 0\n    \n    while j < len(num_list):\n        if num_list[j]!= 0:\n            if i!= j:\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    while i < len(num_list):\n        num_list[i] = 0\n        i += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list) - zero_count - 1] = num_list[len(num_list) - zero_count - 1], num_list[i]\n            zero_count += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor ^= arr[i] ^ arr[j]\n    return xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n\n    # XOR of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    \n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # xor of all elements in the list\n    xor_sum = 0\n    # loop through all elements in the list\n    for i in range(n):\n        # loop through all remaining elements in the list\n        for j in range(i+1, n):\n            # calculate the xor of the current pair of elements\n            xor_sum ^= arr[i] ^ arr[j]\n    # return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            xor_val = arr[i] ^ arr[j]\n            sum_xor += xor_val\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum += arr[i] ^ arr[j]\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n) : \n        for j in range(i+1,n) : \n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of n integers as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n): \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable into a max heap\n    hq.heapify(iterable)\n    # Extract the elements from the heap in sorted order\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list so that it can be used with heapq\n    iterable = list(iterable)\n    # use heapify to build the max-heap\n    for i in range(len(iterable)//2, -1, -1):\n        heapify(iterable, i, len(iterable))\n    # remove the elements from the max-heap one by one and append them to the sorted list\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the list to a max heap\n    hq.heapify(iterable)\n\n    # extract the maximum element from the heap\n    max_element = hq.heappop(iterable)\n\n    # repeat the process for the remaining elements in the heap\n    while iterable:\n        # extract the maximum element from the heap\n        max_element = hq.heappop(iterable)\n\n        # insert the maximum element in the end of the list\n        iterable.append(max_element)\n\n    # return the sorted list\n    return iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min heap from the given list\n    heap = [0] * len(iterable)\n    for i in range(len(iterable)):\n        heap[i] = iterable[i]\n        hq.heappushpop(heap, iterable[i])\n\n    # Convert the min heap back to a sorted list\n    sorted_list = []\n    for _ in range(len(heap)):\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the list to a max heap\n    hq.heapify(iterable)\n\n    # extract items from the heap and store them in a new list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    \"\"\"\n    Sorts the given list using heap sort algorithm.\n\n    Args:\n    iterable (list): list to be sorted.\n\n    Returns:\n    list: sorted list.\n    \"\"\"\n\n    # convert the list to a min-heap\n    heap = hq.nsmallest(len(iterable), iterable)\n\n    # extract the elements from the heap and build the sorted list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    result = []\n    while iterable:\n        result.append(hq.heappop(iterable))\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the list to a heap\n    hq.heapify(iterable)\n    # Convert the heap to a list\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        hq.heappop(iterable)\n    return result"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # If the actual cost is greater than the sale amount, then it has no profit\n    if actual_cost > sale_amount:\n        return \"No Profit\"\n    \n    # If the actual cost is equal to or less than the sale amount, then it has no loss\n    elif actual_cost == sale_amount:\n        return \"No Loss\"\n    \n    # If the actual cost is less than the sale amount, then it has a profit\n    else:\n        return \"Profit\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    # Calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # Check if both profit and loss are zero or positive\n    if profit == 0 and loss == 0:\n        print(\"The amount has no profit and no loss.\")\n    elif profit > 0 and loss == 0:\n        print(\"The amount has a positive profit, but no loss.\")\n    elif profit == 0 and loss > 0:\n        print(\"The amount has no profit, but a negative loss.\")\n    elif profit > 0 and loss > 0:\n        print(\"The amount has both a positive profit and loss.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Parameters:\n    actual_cost (float): The actual cost of the sale\n    sale_amount (float): The amount being sold\n\n    Returns:\n    bool: True if no profit and no loss, False otherwise\n    \"\"\"\n    # Check if actual cost is greater than sale amount\n    if actual_cost > sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # calculate profit and loss\n    profit_loss = sale_amount - actual_cost\n    \n    # check for profit and loss\n    if profit_loss >= 0: \n        return \"Profit\"\n    elif profit_loss < 0: \n        return \"Loss\"\n    else: \n        return \"Neither profit nor loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        print(\"No profit or loss\")\n        return True\n    elif actual_cost + sale_amount <= 0:\n        print(\"No profit or loss\")\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss\n    '''\n\n    # Calculate profit and loss\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    # Check if there is no profit or loss\n    if profit == 0 or loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # If the actual cost is greater than the sale amount, then it means that there is no profit\n    if actual_cost > sale_amount:\n        return True\n\n    # If the actual cost is equal to the sale amount, then it means that there is no profit or loss\n    if actual_cost == sale_amount:\n        return True\n\n    # If the actual cost is less than the sale amount, then it means that there is profit\n    if actual_cost < sale_amount:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount > actual_cost: # if sale amount is greater than actual cost, it means no profit and no loss\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # If actual cost is greater than or equal to sale amount, then no profit and no loss\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate the heat index\n    hi = t - (0.6215 * (v/100)) + ((0.0075 * (v/100)) ** 2) + ((0.05 * (t - 80)) * (v/100))\n    \n    # Calculate the wind chill index\n    wc = 35.74 + 0.6215 * (v/100) - 35.75 * math.exp((17.625 * (t - 32)) / (t - 273.15)) + 0.4275 * (hi - 80)\n    \n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n    \n    # Return the wind chill index rounded to the nearest integer\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer.\n    \n    Args:\n        v (float): Wind velocity in kilometers per hour.\n        t (float): Temperature in Celsius.\n        \n    Returns:\n        float: The wind chill index rounded to the next integer.\n        \n    Raises:\n        ValueError: If v or t is not a positive number.\n    \"\"\"\n    if not all(isinstance(x, (int, float)) and x > 0 for x in (v, t)):\n        raise ValueError(\"v and t must be positive numbers.\")\n    \n    # Convert to meters per second and kelvin\n    vp = v * 1000\n    tp = t + 273.15\n    \n    # Calculate the wind chill index\n    wci = 13.12 + 0.6215 * tp - 11.37 * math.log(vp) + 0.3965 * tp * math.log(vp)\n    \n    # Round to the nearest integer\n    wci_rounded = round(wci)\n    \n    return wci_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    \n    # Calculate the speed of sound\n    c = math.sqrt(g*k/(rho*math.pi))\n    \n    # Calculate the wind chill index\n    wci = 35.74 + 0.6215*v + 13.39*(v**1.5) + 0.133*t\n    \n    # Round the wind chill index to the nearest integer\n    wci = round(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature from Celsius to Fahrenheit\n    fahrenheit = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    if v <= 10:\n        wci = (fahrenheit - 32) / 16\n    elif 10 < v <= 16:\n        wci = (fahrenheit - 32) / 8\n    else:\n        wci = (fahrenheit - 32) / 4\n    \n    # Round the wind chill index to the nearest integer\n    wci = math.ceil(wci)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_value = -45.7 + 0.21 * t + 0.00621 * v**2\n    return int(math.ceil(wind_chill_value))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 26.5  # temperature conversion factor from Celsius to Kelvin\n    k = math.pow(c, 0.065)  # calculate the constant k from Celsius and the constant from the formula\n    fc = 11.16  # constant from the formula\n    ft = 13.15  # constant from the formula\n    s = 0.115  # constant from the formula\n    s1 = s * t  # calculate the s1 value from the formula\n    e = (v * 1.609344) / (0.5 * k * s1 + t)  # calculate the e value from the formula\n    if t < 0:\n        return 0\n    elif e < 13:\n        return round((t - (ft - s1 * (e - 10) * (ft - 13)) / (2 * (e - 10))) / 1.8)\n    elif e >= 13:\n        return round((t + (ft - s1 * (e - 10) * (ft - 13)) / (2 * (e - 10))) / 1.8)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the dew point temperature from the given temperature and wind velocity\n    dpt = math.degrees(math.atan((1.036*(1/t)-0.0065)*((v*1000)/1.609344))))\n    # Calculate the wind chill index\n    wci = round((13.12 + 0.6215*t - 11.37*math.exp((17.625/t)-3.79)/(243.04+math.exp((17.625/t)-3.79))), 2)\n    # If the wind chill index is less than 13, return 13\n    if wci < 13:\n        return 13\n    # If the wind chill index is greater than 14, return 14\n    elif wci > 14:\n        return 14\n    # Otherwise, return the wind chill index\n    else:\n        return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Args:\n        v (float): wind velocity in km/h\n        t (float): temperature in celsius\n    \n    Returns:\n        int: wind chill index rounded to the next integer\n    \"\"\"\n    \n    # Convert wind speed from km/h to m/s\n    ws = v * 1000\n    \n    # Convert temperature from celsius to fahrenheit\n    tf = (t * 9/5) + 32\n    \n    # Calculate the wind chill index\n    wc = math.floor((tf - 32) * 5/9 + 32)\n    \n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill\n    wc = 35.74 + (0.6215 * v) - (35.75 * (t - 23.15)) + ((0.4275 * v) * (t - 23.15))\n    \n    # Round to the nearest integer\n    wc_int = int(math.ceil(wc))\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        v: float\n            The wind velocity in km/h.\n        t: float\n            The temperature in celsius.\n\n    Returns:\n        int\n            The wind chill index rounded to the next integer.\n    \"\"\"\n    w = v * (t / 25) + 25\n    if w < 50:\n        w = 50\n    return round(w)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if not name.startswith('a'):\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to store the sum of the lengths of the names\n    total_length = 0\n    \n    # iterate through the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if the name starts with a lowercase letter, skip it and continue to the next name\n            continue\n        # add the length of the name to the total length\n        total_length += len(name)\n        \n    # return the total length of the names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].islower():\n            names.append(name)\n    total_length = sum(len(name) for name in names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum of names' lengths to 0\n    total_length = 0\n    \n    # iterate over the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip to the next name\n            continue\n        # if the name doesn't start with a lowercase letter, add its length to the total_length\n        total_length += len(name)\n    \n    # return the total length of names after removing the names that start with a lowercase letter\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize a variable to store the sum of the lengths of names that start with a lowercase letter\n    sum_of_lengths = 0\n    # Loop through each name in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip to the next name\n            continue\n        # If the name doesn't start with a lowercase letter, add its length to the sum_of_lengths variable\n        sum_of_lengths += len(name)\n    # Return the sum_of_lengths variable\n    return sum_of_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    start_with_lowercase = []\n    # loop through each name in the sample_names list\n    for name in sample_names:\n        # if the name starts with a lowercase letter, add it to the start_with_lowercase list\n        if name[0].islower():\n            start_with_lowercase.append(name)\n    # loop through the start_with_lowercase list and sum the lengths of each name\n    sum_lengths = 0\n    for name in start_with_lowercase:\n        sum_lengths += len(name)\n    # return the sum of the lengths of the names that start with a lowercase letter\n    return sum_lengths"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile('\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^\\)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\([^)]*\\)\"\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile('\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regex pattern to match parenthesis\n    pattern = r'\\((.*?)\\)'\n    # Use regex.sub() to replace parenthesis with nothing\n    result = re.sub(pattern, '', items)\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    # Use regular expression to remove what is between parenthesis\n    pattern = re.compile(r'([^)]*)\\)')\n    items = pattern.sub('', items)\n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to remove the parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function removes the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match parenthesis\n    pattern = re.compile(r'\\(.*?\\)')\n    # Remove parenthesis from the string using the pattern\n    result = pattern.sub('', items)\n    # Return the result\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'(\\([^)]*\\))'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # initialize variables\n    prev_row = 0\n    row = 0\n    nonagonal = 0\n    \n    # loop through rows\n    for i in range(1, n+1):\n        # calculate number in the row\n        row = prev_row + i\n        \n        # check if row is nonagonal\n        if i % 2 == 0:\n            nonagonal += row\n        \n        # update previous row\n        prev_row = row\n        \n    # return the nth nonagonal number\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num1 = 0\n    num2 = 1\n    for i in range(2, n+1):\n        num3 = num1 + num2\n        num1 = num2\n        num2 = num3\n    return num2\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_nonagonal(n)\nprint(\"The nth nonagonal number is:\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_right_angled_triangle(a, b, c):\n        '''\n        Determine if a triangle with sides a, b, and c is right-angled or not.\n        '''\n        return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2\n\n    def is_valid_nonagonal(i, j, side_length):\n        '''\n        Determine if a given side length and position of a nonagonal number is valid.\n        '''\n        return is_right_angled_triangle(i, side_length, side_length + j) and is_right_angled_triangle(j, side_length, side_length + i)\n\n    def find_valid_positions(i, j, side_length):\n        '''\n        Find all valid positions of a nonagonal number of length side_length.\n        '''\n        positions = []\n        for x in range(1, side_length + 1):\n            for y in range(i, side_length + 1):\n                if is_valid_nonagonal(x, y, side_length):\n                    positions.append((x, y))\n        return positions\n\n    def find_nth_nonagonal(n):\n        '''\n        Find the nth nonagonal number using the above functions.\n        '''\n        if n == 1:\n            return 1\n        side_length = 1\n        position = (1, 1)\n        while True:\n            positions = find_valid_positions(*position, side_length)\n            if len(positions) == n:\n                return side_length + position[0]\n            elif len(positions) > n:\n                return find_nth_nonagonal(n)\n            else:\n                side_length += 1\n                position = positions[0]\n\n    return find_nth_nonagonal(n)\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        a = 1\n        b = 2\n        c = a + b\n        while c < n:\n            a = b\n            b = c\n            c = a + b\n        return c"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    a, b = 1, 1\n    for i in range(2, n+1):\n        a, b = b, 2*a + b\n    return a"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the sum of nonagonal numbers to 0\n    sum_nonagonal = 0\n    # Initialize the row index to 0\n    row_index = 1\n    # Loop through the rows\n    while row_index <= n:\n        # Calculate the sum of the current row\n        current_row_sum = row_index * (row_index + 1) // 2\n        # Add the current row sum to the sum of nonagonal numbers\n        sum_nonagonal += current_row_sum\n        # Increment the row index\n        row_index += 1\n    # Return the sum of nonagonal numbers\n    return sum_nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    j = 1\n    while i < n:\n        k = 1\n        while j < n:\n            k += 1\n            j += 2\n        i += 1\n        j += 1\n    return k\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"th nonagonal number is:\", result)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # first we need to calculate the value of the base of the triangle\n    base = (n * (n+1)) // 2\n\n    # then we need to calculate the value of the length of the triangle\n    length = n * (n+1)\n\n    # finally, we need to return True if the length of the triangle is equal to the sum of the base and length\n    return length == base + length"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n*(n+1))//2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-word characters from the text\n    text = re.sub(r'\\W+','', text)\n    \n    # Split the text into words and convert to lowercase\n    words = [word.lower() for word in text.split()]\n    \n    # Loop through each word and check if it starts or ends with 'z'\n    for word in words:\n        if word.startswith('z') or word.endswith('z'):\n            # If a 'z' is found at the start or end of the word, return True\n            return True\n    \n    # If no 'z' is found, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r\"(?<=\\b)z(?=\\b)\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)\\w+\\b')\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]*z[a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Replace all non-alphanumeric characters with whitespace\n    text = re.sub('[^a-zA-Z0-9\\s]','', text)\n    \n    # Split the text into words\n    words = text.split()\n    \n    # Iterate over the words and check if 'z' is at the start or end of the word\n    for word in words:\n        if word.startswith('z'):\n            if word.endswith('z'):\n                print(f\"'z' found at the start and end of the word '{word}'.\")\n            elif word[1:].startswith('z'):\n                print(f\"'z' found at the start of the word '{word}'.\")\n            else:\n                print(f\"'z' found at the end of the word '{word}'.\")\n        elif word.endswith('z'):\n            if word.startswith('z'):\n                print(f\"'z' found at the end of the word '{word}'.\")\n            elif word[:-1].endswith('z'):\n                print(f\"'z' found at the end of the word '{word}'.\")\n            else:\n                print(f\"'z' found at the start of the word '{word}'.\")"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Define a regular expression to match words with 'z' except at the start and end\n    pattern = r'\\b[a-zA-Z]*[zZ][a-zA-Z]*\\b'\n    \n    # Use re.search() to find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Check if any matches were found\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]\\w+[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Loop through the words\n    for word in words:\n        # Check if the first and last characters of the word are 'z'\n        if word[0] == 'z' and word[-1] == 'z':\n            # If they are, check if the middle of the word is also 'z'\n            middle = word[1:-1]\n            if middle.count('z') == 2:\n                # If so, return True, indicating that the word contains 'z'\n                return True\n    # If no words contain 'z' in the middle, return False\n    return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    This function takes in an array of integers and a position k (where k < len(input)).\n    It then reverses the first k elements of the array and returns the reversed array.\n    '''\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # Return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # get the length of the array\n    n = len(input)\n    # reverse the first k elements\n    input = input[:k][::-1] + input[k:]\n    # reverse the remaining elements of the array\n    input = input[:n-k][::-1] + input[n-k:]\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reversing the array from 0 to k-1\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # Reversing the array from k to n-1\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Check if k is valid\n    if k > len(input):\n        return input\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input) - i - 1] = input[len(input) - i - 1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k):\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the entire array\n    input.reverse()\n    # Reverse the array upto position k\n    input[:k].reverse()\n    # Concatenate the two reversed arrays\n    output = input[:k] + input[k:]\n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    \n    # Reverse the array from k to len(input)-1\n    for i in range(k, len(input)):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the input array from 0 to k-1 \n    for i in range(k): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n    return input "
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n\n    # Reverse the first k elements of the input array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the input array\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(\"Reversed array:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Get the length of the input array\n    n = len(input)\n    # Reverse the first k elements of the array\n    input[0:k] = input[0:k][::-1]\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n    # Return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup = new_tup + (key, value)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup.items() + test_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tup = (test_tup[0], test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # check if test_dict is a dictionary\n    if not isinstance(test_dict, dict):\n        raise TypeError(\"test_dict must be a dictionary\")\n    # create a new dictionary by adding the elements of test_dict to the elements of test_tup\n    new_dict = {**test_tup, **test_dict}\n    # convert the new_dict to a tuple\n    new_tuple = tuple(new_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Convert the tuple to a dictionary\n    test_dict = dict(test_tup)\n    # Merge the two dictionaries\n    test_dict.update(test_dict)\n    # Convert the merged dictionary back to a tuple\n    return tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Initialize an empty dictionary to hold the key-value pairs from the input dictionary\n    new_dict = {}\n    # Iterate over the input tuple and add the key-value pairs to the new dictionary\n    for key, value in test_tup:\n        new_dict[key] = value\n    # Add the key-value pairs from the input dictionary to the new dictionary\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    # Return the modified tuple\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # convert the dictionary to a tuple\n    dict_tuple = tuple(test_dict.items())\n    # add the dictionary to the tuple\n    result_tup = test_tup + dict_tuple\n    # return the modified tuple\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Convert the dictionary to a list of key-value pairs\n    key_value_list = [(k, test_dict[k]) for k in test_dict]\n    # Add the dictionary to the tuple\n    return (test_tup + key_value_list)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Create a new dictionary with the values from the original dictionary and the values from the tuple\n    new_dict = {**test_dict, **test_tup}\n    \n    # Convert the new dictionary to a tuple\n    new_tup = tuple(new_dict.values())\n    \n    return new_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    n = len(cost)\n    m = len(cost[0])\n    max_avg = 0\n    paths = []\n    current_path = []\n\n    # Traverse the matrix from top-left to bottom-right\n    for i in range(n):\n        for j in range(m):\n            # If current cell is empty, skip it\n            if cost[i][j] == 0:\n                continue\n            \n            # Mark current cell as visited\n            current_path.append((i, j))\n            \n            # If current cell is the bottom-right cell, compute the average\n            if (i == n-1) and (j == m-1):\n                avg = sum(cost[i][j]) / (len(current_path)+1)\n                max_avg = max(max_avg, avg)\n                paths.append(current_path)\n                current_path.pop()\n                \n            # Traverse downwards\n            if j < m-1:\n                i_down = i\n                j_down = j+1\n                if i_down < n and cost[i_down][j_down] > 0 and (i_down, j_down) not in current_path:\n                    max_avg, paths = maxAverageOfPath(cost, max_avg, paths, current_path, i_down, j_down, avg, 1)\n            \n            # Traverse rightwards\n            if i < n-1:\n                i_right = i+1\n                j_right = j\n                if i_right < n and cost[i_right][j_right] > 0 and (i_right, j_right) not in current_path:\n                    max_avg, paths = maxAverageOfPath(cost, max_avg, paths, current_path, i_right, j_right, avg, 2)\n            \n            # Unmark current cell as visited\n            current_path.pop()\n    \n    # Return the maximum average over all existing paths\n    return max_avg, paths"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            elif i == 0:\n                dp = [[0]*N for _ in range(N)]\n                for k in range(j, N):\n                    dp[i][k] = cost[i][k] + dp[i][k-1]\n            elif j == 0:\n                dp = [[0]*N for _ in range(N)]\n                for k in range(i, N):\n                    dp[k][j] = cost[k][j] + dp[k-1][j]\n            else:\n                dp = [[0]*N for _ in range(N)]\n                for k in range(i, N):\n                    for l in range(j, N):\n                        dp[k][l] = cost[k][l] + min(dp[k-1][l], dp[k][l-1])\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j]/(N-1))\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    paths = []\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                paths.append((j, 1))\n            elif j == 0:\n                paths.append((1, i))\n            else:\n                paths.append((cost[i-1][j], 1))\n                paths.append((cost[i][j-1], 1))\n    paths.sort(key=lambda x: (-x[0], x[1]))\n    total_cost = sum(path[0] for path in paths)\n    num_cells = sum(path[1] for path in paths)\n    return total_cost / num_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i][j-1])\n            elif j == 0:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j])\n            else:\n                dp[i][j] = max(dp[i][j], cost[i][j] + dp[i-1][j-1])\n                \n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N-1):\n            for k in range(j+2, N):\n                path_cost = cost[i][j] + cost[i][k] + cost[k][j] + cost[k][k]\n                avg_cost = path_cost / 4\n                if avg_cost > max_avg:\n                    max_avg = avg_cost\n                \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize the maximum average and the number of visited cells\n    max_avg = 0\n    visited = 0\n    \n    # Initialize the matrix size\n    N = len(cost)\n    \n    # Loop through all possible paths\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is not visited yet, visit it and compute its cost\n            if cost[i][j] == 0 and i > 0 and j > 0:\n                visited += 1\n                cost[i][j] = cost[i-1][j] + cost[i][j-1]\n            \n            # If the current cell is not visited yet and its cost is greater than the maximum average, update the maximum average and visited cells\n            if cost[i][j] == 0 and visited > max_avg:\n                max_avg = visited\n                max_path = []\n            \n            # If the current cell is visited, add it to the maximum path\n            elif cost[i][j]!= 0:\n                max_path.append(cost[i][j])\n    \n    # Compute the maximum average and the number of visited cells\n    max_avg = max_avg / visited\n    \n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": ""
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables\n    N = len(cost)\n    paths = [[0 for j in range(N)] for i in range(N)]\n    max_avg = 0\n    max_path = None\n\n    # Initialize paths matrix with -1 as the starting point of each path\n    for i in range(N):\n        for j in range(N):\n            paths[i][j] = -1\n\n    # Function to check if a given cell can be visited\n    def is_valid(i, j, path):\n        # Check if i, j is outside the range of the matrix\n        if i < 0 or i >= N or j < 0 or j >= N:\n            return False\n\n        # Check if cell is already visited in the path\n        if paths[i][j] == path:\n            return False\n\n        return True\n\n    # Function to find the maximum average of a path\n    def max_avg_of_path(path, path_cost):\n        nonlocal max_avg, max_path\n        # If the path is shorter than the current best path, update the best path\n        if len(path) < len(max_path):\n            max_avg = 0\n            max_path = path\n        # Calculate the average cost of the path\n        avg_cost = path_cost / len(path)\n        # Update the maximum average if the new average is greater\n        if avg_cost > max_avg:\n            max_avg = avg_cost\n            max_path = path\n\n    # Main function\n    def main():\n        # Traverse through all possible paths\n        for i in range(N):\n            for j in range(N):\n                # Check if this cell can be visited\n                if is_valid(i, j, -1):\n                    # Create a new path\n                    path = []\n                    # Add the starting point to the path\n                    path.append((i, j))\n                    # Recursively traverse the matrix to explore all possible paths\n                    paths[i][j] = 0\n                    explore(i, j, path)\n\n    # Recursive function to explore all possible paths\n    def explore(i, j, path):\n        # Add the current cell to the path\n        path.append((i, j))\n        # Check if the current cell is the bottom right cell\n        if i == N - 1 and j == N - 1:\n            # Calculate the average cost of the path\n            path_cost = sum(cost[i][j] for i in range(N))\n            # Check if this path is longer than the current best path\n            if len(path) > len(max_path):\n                max_avg = 0\n                max_path = path\n            # Calculate the average cost of the path\n            avg_cost = path_cost / len(path)\n            # Update the maximum average if the new average is greater\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n                max_path = path\n        # Move to the next cell and explore all possible paths\n        explore(i + 1, j, path)\n        explore(i, j + 1, path)\n        # Backtrack and remove the current cell from the path\n        path.pop()\n        paths[i][j] = -1\n\n    # Call the main function to start exploring paths\n    main()\n\n    # Return the maximum average of the best path\n    return max_avg, max_path\n"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Initialize variables\n    m = len(cost)\n    n = len(cost[0])\n    max_avg = 0\n    current_avg = 0\n    visited = set()\n    paths = []\n    \n    # Traverse through the matrix\n    for i in range(m):\n        for j in range(n):\n            # Check if we have visited this cell before\n            if (i, j) in visited:\n                continue\n            \n            # Recursively explore this cell\n            self.dfs(cost, visited, paths, i, j, 1, current_avg)\n            visited.add((i, j))\n            \n            # Update the maximum average and current average\n            if current_avg > max_avg:\n                max_avg = current_avg\n            \n            # Reset the current average\n            current_avg = 0\n            \n    # Return the maximum average\n    return max_avg\n\n\ndef dfs(cost, visited, paths, i, j, curr_cost, curr_avg):\n    '''\n    Recursively explore the matrix. We update the current average and keep track of visited cells.\n    '''\n    visited.add((i, j))\n    \n    # Check if we have reached the bottom right cell\n    if i == m - 1 and j == n - 1:\n        curr_avg += curr_cost\n        paths.append(curr_cost)\n        return\n    \n    # Explore the right and down cells\n    if j < n - 1:\n        dfs(cost, visited, paths, i, j + 1, curr_cost + cost[i][j + 1], curr_avg)\n    if i < m - 1:\n        dfs(cost, visited, paths, i + 1, j, curr_cost + cost[i + 1][j], curr_avg)\n    \n    # Remove the visited cell from the visited set\n    visited.remove((i, j))"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n\n    # Initialize first row and column with 0\n    dp[0][0] = cost[0][0]\n    dp[0][-1] = cost[0][-1]\n\n    # Calculate maximum value for each cell in the matrix\n    for j in range(1, N):\n        dp[0][j] = dp[0][j-1] + cost[0][j]\n        dp[-1][j] = dp[-1][j-1] + cost[-1][j]\n\n    # Calculate maximum value for each cell in the matrix\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n        dp[i][-1] = dp[i-1][-1] + cost[i][-1]\n\n    # Initialize maximum average\n    max_avg = 0\n\n    # Calculate maximum average for each cell in the matrix\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            dp[i][j] += min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n            avg = dp[i][j] / 4\n            max_avg = max(max_avg, avg)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = 0\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n        if i > 0:\n            dp[i][i-1] += cost[i][i]\n    for k in range(2, N):\n        for i in range(N-k):\n            j = i+k\n            dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + cost[i][j]\n    for i in range(N):\n        for j in range(N):\n            if j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n    return max_avg"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # creating a new dictionary to store the filtered students\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # filter out students with height and weight below the minimum\n    filtered_students = {name: info for name, info in students.items() if info[0] > h and info[1] > w}\n\n    # print the filtered students\n    for name, info in filtered_students.items():\n        print(f\"{name}: height {info[0]}, weight {info[1]}\")"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, info in students.items():\n        height, weight = info\n        if height >= h and weight >= w:\n            filtered_students[name] = info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n            \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    \n    for name, values in students.items():\n        height, weight = values\n        \n        if height > h and weight > w:\n            filtered_students[name] = values\n    \n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height >= h and weight >= w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, info in students.items():\n        if info[0] > h and info[1] > w:\n            filtered_students[student] = info\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_pairs = []\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            same_pairs.append(i)\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    \"\"\"\n    This function takes two lists as input and counts the number of indices where the lists have the same values.\n\n    Parameters:\n    nums1 (list): A list of numbers\n    nums2 (list): A list of numbers\n\n    Returns:\n    int: The number of indices where the lists have the same values\n    \"\"\"\n\n    # Initialize a dictionary to store the frequency of each number in both lists\n    freq = {}\n\n    # Iterate over both lists and count the frequency of each number\n    for num in nums1 + nums2:\n        freq[num] = freq.get(num, 0) + 1\n\n    # Initialize a counter for the number of same pairs found\n    count = 0\n\n    # Iterate over the dictionary to find the same pairs\n    for num in freq:\n        if freq[num] == 2:\n            # Check if the number appears in both lists and increment the counter if it does\n            if num in nums1 and num in nums2:\n                count += 1\n\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_digits = [int(d) for d in str(base)]\n    sum_of_digits = 0\n\n    for digit in base_digits:\n        sum_of_digits += digit ** power\n\n    return sum_of_digits\n"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        digit = base % 10\n        result += digit\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    for i in range(power):\n        sum_digits += int(str(base)[i])\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    for digit in str(base):\n        result += int(digit) ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        digit = base % 10\n        total += digit\n        power -= 1\n        base //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Loop through each character in the base string\n    for char in base_str:\n        # Convert the character to an integer\n        digit = int(char)\n        \n        # Multiply the digit by the power\n        power_digit = digit * power\n        \n        # Add the power digit to the sum\n        sum += power_digit\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit of the base and calculate the sum to the power\n    for digit in base_str:\n        digit_int = int(digit)\n        digit_power = digit_int ** power\n        sum_of_digits += digit_power\n    # Return the sum of digits raised to the power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    total = 0\n    base_str = str(base)\n    \n    for digit in base_str:\n        total += int(digit) ** power\n    \n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum to 0\n    total_sum = 0\n    # Loop through each digit in the string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the total sum\n        total_sum += int(digit)\n    # Calculate the sum of the digits raised to the power of the specified power\n    result = sum([int(digit) ** power for digit in base_str])\n    # Return the result\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string to calculate the sum of digits\n    base_str = str(base)\n    # Initialize the sum variable to zero\n    sum = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum\n        digit_int = int(digit)\n        sum += digit_int ** power\n    # Return the sum\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    pattern = r'(?<!\")(?<=\")([^\"]*)'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Using regular expressions to match the quotation marks\n    pattern = r'\"(.*?)\"'\n    # Finding all the matches of the pattern in the text1 string\n    matches = re.findall(pattern, text1)\n    # Extracting the values between the quotation marks and returning it as a list\n    return [match.strip() for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'  # regex pattern to match quotes\n    matches = re.findall(pattern, text1)  # find all matches using regex\n    if matches:\n        return''.join(matches)  # concatenate matches with spaces and return as string\n    else:\n        return \"No quotation marks found.\""
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<!\\\\)\"(?:[^\\\\\"]|\\\\.)*?(?<!\\\\)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'\"(.+?)\"')\n    result = pattern.findall(text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = tuple([test_tup[i] * test_tup[i+1] for i in range(N-1)])\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup)-1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = []\n    for i in range(N-1):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # initialize an empty list to store the results\n    result_list = []\n    # loop through each element in the input tuple\n    for i in range(len(test_tup)-1):\n        # multiply the current element with the next element\n        result = test_tup[i] * test_tup[i+1]\n        # append the result to the result_list\n        result_list.append(result)\n    # return the result_list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    new_tup = []\n    for i in range(len(test_tup)-1):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return new_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # check if both lists have the same length\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    # initialize an empty list to store the sum of the two lists\n    result = []\n    # iterate over the elements of both lists\n    for i in range(len(lst1)):\n        # add the corresponding elements of the two lists and append the result to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the sum of the lists\n    sum_lst = []\n\n    # Iterate through the two lists and add their sum to the sum_lst\n    for i in range(len(lst1)):\n        sum_lst.append(lst1[i] + lst2[i])\n\n    # Return the sum_lst\n    return sum_lst"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    # initialize the sum list with 0's\n    result = [0] * (len(lst1) + len(lst2))\n    \n    # iterate through each element of the lists\n    for i in range(len(lst1)):\n        result[i] += lst1[i]\n        \n    for j in range(len(lst2)):\n        result[i+j] += lst2[j]\n        \n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # create a list to store the result\n    result = []\n    # iterate through each element in the first list\n    for i in range(len(lst1)):\n        # append the sum of the element at index i from both lists to the result list\n        result.append(lst1[i] + lst2[i])\n    # return the result list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n\n    :param nums: a list of integers\n    :return: a list with consecutive duplicates removed\n    \"\"\"\n\n    # group the list by the same element\n    grouped_nums = groupby(nums)\n\n    # create an empty list to store the unique elements\n    unique_nums = []\n\n    # iterate through the grouped list and append each element to the unique list\n    for key, group in grouped_nums:\n        if len(list(group)) == 1:\n            # if the group has only one element, append it to the unique list\n            unique_nums.append(key)\n        else:\n            # if the group has more than one element, discard it\n            pass\n\n    # return the unique list with consecutive duplicates removed\n    return unique_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for key, group in groupby(nums):\n        if len(list(group)) > 1:\n            result.append(next(group))\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Group the list by the index and get the items\n    grouped_list = groupby(enumerate(nums), key=lambda x: x[0])\n\n    # Iterate through the grouped list\n    result = []\n    for item in grouped_list:\n        # Check if there are consecutive duplicates\n        if len(list(item[1])) > 1:\n            # If there are, skip the first item\n            if item[0] > 0:\n                continue\n        # Add the item to the result list\n        result.append(item[1][0])\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use the groupby function from itertools to group the numbers by their consecutive duplicates\n    group_by_duplicates = groupby(nums)\n    \n    # Initialize an empty list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n    \n    # Iterate through the groups and append each non-duplicate number to the non_consecutive_duplicates list\n    for group in group_by_duplicates:\n        if not group:\n            continue\n        else:\n            non_consecutive_duplicates.append(group[0])\n    \n    return non_consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    if not nums:\n        return []\n    first = nums[0]\n    last = first\n    count = 1\n    res = []\n    for num in nums[1:]:\n        if num == last + 1:\n            count += 1\n        else:\n            res.append(first)\n            first = num\n            count = 1\n        last = num\n    res.append(last)\n    return res"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    result = []\n    for key, group in groupby(sorted(nums)):\n        if not key:\n            continue\n        if key == group[0]:\n            continue\n        result.extend(group)\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    for item in nums:\n        if item not in result:\n            result.append(item)\n        else:\n            result.pop()\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if not k]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * r ** 2\n    area = (s * h) / 3\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the lateral surface area of the cone using the formula:\n    # lateral_surface_area = 2 * pi * r * h / 3\n    lateral_surface_area = 2 * math.pi * r * h / 3\n    # Return the lateral surface area as a float:\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for the lateral surface area of a cone\n    lateral_area = math.pi * r**2 * h / 3\n    return lateral_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r**2*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r * (r + h) / 2"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    \"\"\"\n    # Formula for lateral surface area of a cone:\n    # 2 * pi * r * h\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    \"\"\"\n\n    # Find the area of the base\n    base_area = math.pi * r**2\n\n    # Find the area of the cone\n    cone_area = math.pi * r**2 * h / 3\n\n    # Calculate the lateral surface area\n    lateral_surface_area = cone_area - base_area\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n\n    Args:\n        r (float): The radius of the cone.\n        h (float): The height of the cone.\n\n    Returns:\n        float: The lateral surface area of the cone.\n    \"\"\"\n    lateral_surface = (3*math.pi*r**2)/4 #formula for lateral surface area of a cone\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Find the semi-perimeter of the cone\n    s = 2 * r + math.sqrt(r**2 + h**2)\n    # Calculate the lateral surface area\n    area = math.pi * r**2 * s\n    return area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'([,\\.])'\n    result = re.sub(pattern, ':', text)\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'\\s+|,+|[.]+'\n    return re.sub(pattern, ':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[^\\w\\s-]', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match special characters\n    pattern = re.compile(r'[^\\w\\s]|_')\n\n    # Replace special characters with a colon\n    text = pattern.sub(':', text)\n\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = re.compile(r'\\s+|,+|\\.+')\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]+', ':', text) # replace spaces with a colon\n    text = re.sub(r'[,.]', '', text) # remove commas and dots\n    return text\n\ntext = \"This, is a sample text with, commas and dots.\"\nnew_text = replace_specialchar(text)\nprint(new_text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace special characters with a colon\n    text = re.sub('[\\s,.]', ':', text)\n    # remove leading and trailing whitespace\n    text = text.strip()\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove all non-alphanumeric characters except spaces and underscores\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    text = text.replace(' ', ':')\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,\\. ]', ':', text)"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(A) - 1\n\n    # Initialize the result variable to -1\n    result = -1\n\n    # Loop until the left index is greater than or equal to the right index\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the given element, compare it with the left element\n        if A[mid] == x:\n            # If the left element is equal to the given element, compare it with the right element\n            if mid == 0 or A[mid - 1]!= x:\n                result = mid\n                right = mid - 1\n            # If the left element is not equal to the given element, search in the right half of the array\n            else:\n                left = mid + 1\n        # If the middle element is less than the given element, search in the left half of the array\n        else:\n            left = mid + 1\n\n    # Return the result\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable\n    index = -1\n\n    # Loop through the array\n    for i in range(len(A)):\n        # Check if the current element is equal to the given number\n        if A[i] == x:\n            # If the element is equal to the given number, update the index variable\n            index = i\n            # Break out of the loop\n            break\n\n    # Return the index of the first occurrence\n    return index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    A: A sorted array.\n    x: A number.\n\n    Returns:\n    The index of the first occurrence of x in A. If x is not in A, the function should return -1.\n\n    Example:\n    A = [1, 3, 5, 7, 9, 10]\n    x = 3\n    Output: 1\n\n    A = [1, 2, 3, 4, 5]\n    x = 6\n    Output: -1\n    \"\"\"\n    # Initialize the index of the first occurrence of x to -1\n    first_occurrence_index = -1\n\n    # Iterate through the sorted array\n    for i in range(len(A)):\n        # If the current element is equal to x, update the index of the first occurrence\n        if A[i] == x:\n            first_occurrence_index = i\n            break\n\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not present in A, it returns -1.\n    \"\"\"\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n\n    # Initialize variables\n    first_occurrence = -1\n    index = 0\n\n    # Iterate through the array to find the first occurrence of x\n    while index < len(A) and A[index]!= x:\n        if A[index] < x:\n            index += 1\n        else:\n            first_occurrence = index\n            index += 1\n\n    # Return the index of the first occurrence of x\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes in two arguments: the sorted array A and the number x. It returns the index of the first occurrence of x in A, or -1 if x is not in A.\n    \n    This function works by iterating through the array A and comparing each element to x. If the element is equal to x, it returns the current index. If the element is less than x, it means that x has already been found and the function can return the index of the first occurrence of x.\n    \n    If the loop completes without finding x, the function returns -1.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the index variable to -1\n    index = -1\n    \n    # Traverse the array using two pointers\n    left = 0\n    right = len(A)-1\n    \n    # If x is not present in the array, return -1\n    if x not in A:\n        return index\n    \n    # If x is present in the array, then traverse the array using two pointers\n    while left <= right:\n        mid = (left + right) // 2\n        \n        if A[mid] == x:\n            # Update the index variable if x is found in the middle of the array\n            index = mid\n            \n            # If x is found in the left half of the array, then the first occurrence will be in the right half\n            if mid == 0 or A[mid-1] < x:\n                break\n            \n            # If x is found in the right half of the array, then the first occurrence will be in the left half\n            else:\n                right = mid - 1\n        \n        # If x is smaller than the middle element, then search in the left half\n        elif A[mid] < x:\n            left = mid + 1\n            \n    # Return the index variable if x is found in the array\n    return index"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    # initialize variables\n    n = len(arr)\n    prod_sum = 0\n    subarray_sum = 0\n    subarray_prod = 1\n    # calculate product of first element\n    subarray_prod *= arr[0]\n    # loop through remaining elements\n    for i in range(1, n):\n        # calculate new subarray product\n        subarray_prod *= arr[i]\n        # update subarray sum and sum of products\n        subarray_sum += arr[i]\n        prod_sum += subarray_sum * subarray_prod\n    return prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += arr[j] * (arr[j] - 1) // 2\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    max_sum = dp[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i - 1])\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [0] * (n + 1)\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            dp[j] = max(dp[j], dp[i] + arr[i] * arr[j])\n\n    return sum(dp)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    sum_prod = 0\n    for i in range(n):\n        prod *= arr[i]\n        sum_prod += prod\n    return sum_prod\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n    \"\"\"\n    n = len(arr)\n    # Initialize the sum and product of sublists\n    sum_of_subarrays = 0\n    prod_of_subarrays = 1\n\n    # Iterate through each subarray of the list\n    for i in range(n):\n        # Calculate the product of the current subarray\n        prod_of_subarray = 1\n        for j in range(i, n):\n            prod_of_subarray *= arr[j]\n\n        # Add the product of the subarray to the sum of subarrays\n        sum_of_subarrays += prod_of_subarray\n\n        # Calculate the product of the remaining subarrays\n        prod_of_remaining_subarrays = 1\n        for j in range(i + 1, n):\n            prod_of_remaining_subarrays *= arr[j]\n\n        # Update the product of subarrays\n        prod_of_subarrays *= prod_of_remaining_subarrays\n\n    # Return the sum of products of subarrays\n    return sum_of_subarrays"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    ans = 0\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n    ans += prod\n    for i in range(n):\n        prod = prod * arr[i]\n        for j in range(i+1,n):\n            prod = prod * (arr[j] - arr[i])\n            ans += prod\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def subarray_product(arr, start, end):\n        product = 1\n        for i in range(start, end):\n            product *= arr[i]\n        return product\n\n    subarray_product_list = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            subarray_product_list.append(subarray_product(arr, i, j))\n\n    return sum(subarray_product_list)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Initialize a variable to store the sum of products of all sublists\n    sublist_prod_sum = 0\n\n    # Calculate the product of the first element of the list\n    first_element = 1\n    for i in range(len(arr)):\n        first_element *= arr[i]\n\n    # Initialize two variables to store the sum of products of the first element and its indices\n    first_element_prod_sum = first_element\n    first_element_indices = [0]\n\n    # Loop through the list and update the variables accordingly\n    for i in range(1, len(arr)):\n        # Calculate the product of the current element and subtract the product of the first element\n        current_element = arr[i]\n        sublist_prod = current_element * first_element\n\n        # Update the variables for the next iteration\n        first_element_prod_sum -= first_element_indices[i - 1] * current_element\n        sublist_prod_sum += sublist_prod\n        first_element *= current_element\n        first_element_indices.append(i)\n\n    return sublist_prod_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize sum variable\n    sum_products = 0\n    # Initialize sum of subarrays variable\n    sum_subarrays = 0\n    # Initialize product variable\n    product = 1\n    # Loop through the array\n    for i in range(len(arr)):\n        # Update product variable\n        product *= arr[i]\n        # Update sum_subarrays variable\n        sum_subarrays += product\n        # Update sum_products variable\n        sum_products += sum_subarrays\n        # Update product variable\n        product //= arr[i]\n    # Return sum_products variable\n    return sum_products"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Check if the number has more than 32 bits\n    if n.bit_length() > 32:\n        print(\"Number should have 32 bits or less\")\n        return None\n    \n    # Extract the first and last bits\n    first_bit = (n & 0b1) == 1\n    last_bit = (n & 0b1000000000000000000000000000000) == 0b10000000000000000000000000000000\n    \n    # Toggle the middle bits\n    toggled_bits = (n & 0b11111111111111111111111111111110) ^ 0b1111111111111111111111111111111\n    \n    # Combine the first and last bits with the toggled bits\n    result = first_bit << 31 | toggled_bits | last_bit << 30\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize variables\n    first_bit = n & 1 # get the first bit\n    last_bit = n & (1 << (32 - 1)) # get the last bit\n    middle_bits = n & ((1 << 32) - 2) # get the middle bits\n    \n    # toggle the middle bits\n    middle_bits = middle_bits ^ (middle_bits ^ 1)\n    \n    # set the first and last bits\n    first_bit = first_bit ^ 1\n    last_bit = last_bit ^ 1\n    \n    # combine the bits\n    result = (middle_bits << 1) | first_bit | last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    # get the binary representation of the given number\n    binary_representation = bin(n)[2:]\n\n    # get the length of the binary representation\n    length = len(binary_representation)\n\n    # get the index of the first and last bits\n    first_bit = 1\n    last_bit = length\n\n    # toggle all the bits except the first and last\n    for i in range(first_bit, last_bit):\n        binary_representation[i] = '0' if binary_representation[i] == '1' else '1'\n\n    # convert the binary representation back to an integer\n    set_middle_bits_int = int(binary_representation, 2)\n\n    return set_middle_bits_int"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the length of the binary representation of n\n    binary_len = len(bin(n)[2:])\n    \n    # Create an array of zeros with the same length as the binary representation of n\n    zero_array = [0]*binary_len\n    \n    # Find the middle index of the binary representation of n\n    middle_index = binary_len//2\n    \n    # Extract the first and last bits of n\n    first_bit = n & 1\n    last_bit = (n >> binary_len-1) & 1\n    \n    # Reverse the first and last bits of n\n    n ^= (first_bit << middle_index) ^ (last_bit << middle_index)\n    \n    # Set the middle bits to their opposite value\n    n ^= (1 << middle_index)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # first bit is 1\n    n = (n & 0x55555555) << 1\n    # second to last bit is 1\n    n = (n & 0xAAAAAAAA) >> 1\n    # last bit is 0\n    n = n | 0xAAAAAAAA\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # The first and last bit are fixed to 1\n    n = n & 0x5555555555555555 # 0b10101010101010101010101010101010101010101010101010101010101010101010\n    n = n & 0xaaaaaaaaaaaaaaaa # 0b1010101010101010101010101010101010101010101010101010101010101010101010\n    # Toggle the middle bits\n    n = n ^ 0x3333333333333333 # 0b010101010101010101010101010101010101010101010101010101010101010101010101010\n    n = n ^ 0xcccccccccccccccc # 0b010101010101010101010101010101010101010101010101010101010101010101010101010\n    # Combine the fixed bits with the middle bits\n    return (n | 0x5555555555555555) & 0xffffffffffffffff # 0b
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Check if the number is odd or even\n    if n & 1:\n        # If the number is odd, toggle the first and the last bit\n        n = (n & 0x55555555) << 1 | (n & 0xAAAAAAAA) >> 1\n    else:\n        # If the number is even, toggle the last bit\n        n = n ^ 0xAAAAAAAA\n        \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # extract the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n & (2**31-1)\n\n    # toggle the middle bits\n    middle_bits = n ^ (first_bit ^ last_bit)\n\n    # combine the middle bits with the first and last bits\n    result = first_bit ^ middle_bits ^ last_bit\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # Initialize the result variable\n    result = 0\n\n    # Iterate over all bits in the binary representation of n\n    for i in range(1, len(bin(n)[2:])):\n\n        # Check if the current bit is 0\n        if bin(n)[2:].count('0') > bin(n)[2:].count('1') and bin(n)[2:].count('1') == 1:\n\n            # Toggle the bit\n            if bin(n)[2:].count('0') == bin(n)[2:].count('1'):\n                result += 2**(len(bin(n)[2:]) - i - 1)\n\n            # If the current bit is 1, add it to the result\n            else:\n                result += 2**(len(bin(n)[2:]) - i - 1)\n\n        # If the current bit is 1, add it to the result\n        else:\n            result += 2**(len(bin(n)[2:]) - i - 1)\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    first_bit_mask = 1\n    last_bit_mask = ~(1 << 31)  # 32 bits number has only 1 bit set to 1 in the lowest position\n    toggle_bit_mask = ~(first_bit_mask | last_bit_mask)\n    first_bit = (n & first_bit_mask) >> 0\n    last_bit = (n & last_bit_mask) >> 31\n    toggled_bits = first_bit ^ last_bit\n    return n & toggle_bit_mask | toggled_bits"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # use bisect_left function from bisect module to locate the left insertion point\n    index = bisect.bisect_left(a, x)\n    # check if the value is present in the list or not\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        # return -1 if the value is not present in the list\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    # Using binary search to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    elif index == len(a):\n        return index\n    elif a[index-1] < x:\n        return index\n    else:\n        return bisect.bisect_right(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    elif a[i] < x:\n        return i+1\n    else:\n        return i"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    left = bisect.bisect_left(a, x)\n    if left == len(a):\n        return len(a)\n    elif left == 0 or a[left-1] < x:\n        return left\n    else:\n        return left_insertion(a[:left], x)\n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    # Find the index of the leftmost element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    # If the element is not present, index will be the index of the leftmost element greater than x\n    if index == len(a):\n        index = len(a) - 1\n    # If x is less than the first element of the list, return the index\n    elif x < a[0]:\n        index = 0\n    else:\n        # If x is greater than the last element of the list, return the index of the last element\n        if x > a[-1]:\n            index = len(a) - 1\n        else:\n            # If x is between two elements of the list, search the right half of the list\n            for i in range(index + 1, len(a)):\n                if x > a[i]:\n                    index = i - 1\n                    break\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. \n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    def helper(i, j):\n        if i == 1:\n            return j\n        else:\n            return helper(i - 1, j * i)\n\n    return helper(n, 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (1/(n-1))*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n * geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Initialize the result variable \n    index = 0\n    \n    # Calculate the maximum value of n \n    max_val = int(math.pow(10, n))\n    \n    # Iterate from 1 to max_val \n    for i in range(1, max_val + 1): \n        # Calculate the triangular number of i digits \n        triangular = i*i*i\n        \n        # If the triangular number is less than or equal to the maximum value, increment the index \n        if triangular <= max_val: \n            index += 1\n    \n    # Return the index \n    return index "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Using dynamic programming approach\n    n_digit = int(math.log10(n)) + 1\n    dp = [[0]*(n+1) for _ in range(n_digit+1)]\n\n    for i in range(1, n_digit+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-int(''.join(str(j)))*10**i]\n\n    # Find the index of smallest triangular number with n digits\n    index = 0\n    min_num = n * (n + 1) // 2\n    for i in range(n_digit, 0, -1):\n        if dp[i][min_num]!= dp[i-1][min_num]:\n            break\n        index += i\n        min_num = dp[i][min_num]\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # Function to find the smallest triangular number with n digits\n    def smallest_triangular(n):\n        # Initialize the smallest triangular number to 0\n        smallest = 0\n        \n        # Find the sum of digits of smallest triangular number\n        sum_digits = 0\n        \n        # Initialize the digit count\n        digit_count = 0\n        \n        # Loop till n digits\n        while digit_count < n:\n            # Find the next digit of smallest triangular number\n            digit = math.floor((smallest + sum_digits) / 10)\n            \n            # If the digit count is less than n, add the digit to the sum of digits\n            if digit_count < n:\n                sum_digits += digit\n                \n            # If the digit count is greater than or equal to n, update the smallest triangular number\n            if digit_count >= n:\n                smallest = sum_digits\n                \n            # Increment the digit count\n            digit_count += 1\n            \n        # Return the smallest triangular number\n        return smallest\n    \n    # Call the smallest triangular function with n digits\n    index = smallest_triangular(n)\n    \n    # Return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef find_Index(n): \n    \"\"\"\n    This function will return the index of the smallest triangular number with n digits. \n    The triangular numbers are numbers with the property that the sum of the digits is equal to the number itself. \n    \"\"\"\n\n    # define the triangular number with n digits \n    triangular_number = 10**(n-1) + 5\n\n    # find the index of the smallest triangular number with n digits using binary search \n    left = 0 \n    right = triangular_number - 1 \n    result = -1 \n\n    while left <= right: \n        mid = (left + right) // 2 \n        sum_of_digits = sum(int(digit) for digit in str(mid)) \n\n        # if the sum of the digits is equal to the number itself, return the index \n        if sum_of_digits == mid: \n            result = mid \n            break \n        elif sum_of_digits < mid: \n            right = mid - 1 \n        else: \n            left = mid + 1 \n\n    return result "
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Base case\n    if n == 1:\n        return 0\n\n    # Initialize a variable to store the smallest triangular number with n digits\n    min_triangular = 10**n\n\n    # Find the index of the smallest triangular number with n digits\n    index = 1\n    while True:\n        triangular = (index * (index + 1)) // 2\n\n        if triangular < min_triangular:\n            min_triangular = triangular\n            index += 1\n        else:\n            break\n\n    return index - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n\n    # Calculate the sum of digits of n\n    sum_digits = sum(int(digit) for digit in str(n))\n\n    # Calculate the number of digits in n\n    num_digits = len(str(n))\n\n    # Calculate the smallest triangular number with n digits\n    smallest_triangular = int((9 * sum_digits**2 + 1) ** 0.5 + 1)\n\n    # Calculate the number of digits in smallest triangular number\n    triangular_num_digits = len(str(smallest_triangular))\n\n    # Calculate the difference between n and smallest triangular number\n    diff_digits = n - smallest_triangular\n\n    # If the difference between n and smallest triangular number is greater than or equal to 3, return the difference\n    if diff_digits >= 3:\n        return diff_digits\n\n    # If the difference between n and smallest triangular number is less than 3, return the number of digits in smallest triangular number\n    else:\n        return triangular_num_digits"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = []\n    triangular_num.append(1)\n    triangular_num.append(5)\n    triangular_num.append(12)\n    triangular_num.append(22)\n    triangular_num.append(35)\n    triangular_num.append(51)\n    triangular_num.append(70)\n    triangular_num.append(92)\n    triangular_num.append(117)\n    triangular_num.append(145)\n    triangular_num.append(176)\n    triangular_num.append(210)\n    triangular_num.append(247)\n    triangular_num.append(287)\n    triangular_num.append(330)\n    triangular_num.append(376)\n    triangular_num.append(425)\n    triangular_num.append(477)\n    triangular_num.append(532)\n    triangular_num.append(590)\n    triangular_num.append(651)\n    triangular_num.append(715)\n    triangular_num.append(782)\n    triangular_num.append(852)\n    triangular_num.append(925)\n    triangular_num.append(1001)\n    triangular_num.append(1080)\n    triangular_num.append(1162)\n    triangular_num.append(1247)\n    triangular_num.append(1335)\n    triangular_num.append(1426)\n    triangular_num.append(1520)\n    triangular_num.append(1617)\n    triangular_num.append(1717)\n    triangular_num.append(1820)\n    triangular_num.append(1926)\n    triangular_num.append(2035)\n    triangular_num.append(2147)\n    triangular_num.append(2262)\n    triangular_num.append(2380)\n    triangular_num.append(2501)\n    triangular_num.append(2625)\n    triangular_num.append(2752)\n    triangular_num.append(2882)\n    triangular_num.append(3015)\n    triangular_num.append(3151)\n    triangular_num.append(3290)\n    triangular_num.append(3432)\n    triangular_num.append(3577)\n    triangular_num.append(3725)\n    triangular_num.append(3876)\n    triangular_num.append(4030)\n    triangular_num.append(4187)\n    triangular_num.append(4347)\n    triangular_num.append(4510)\n    triangular_num.append(4676)\n    triangular_num.append(4845)\n    triangular_num.append(5017)\n    triangular_num.append(5192)\n    triangular_num.append(5370)\n    triangular_num.append(5551)\n    triangular_num.append(5735)\n    triangular_num.append(5922)\n    triangular_num.append(6112)\n    triangular_num.append(6305)\n    triangular_num.append(6501)\n    triangular_num.append(6700)\n    triangular_num.append(6902)\n    triangular_num.append(7107)\n    triangular_num.append(7315)\n    triangular_num.append(7526)\n    triangular_num.append(7740)\n    triangular_num.append(7957)\n    triangular_num.append(8177)\n    triangular_num.append(8400"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0\n    while True:\n        triangular = i * (i + 1) // 2\n        if triangular >= 10 ** n:\n            break\n        i += 1\n    \n    return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    # Find the smallest triangular number with n digits\n    triangular = int(math.factorial(n) / (math.factorial(n-1) * math.factorial(1)))\n\n    # Find the index of the smallest triangular number\n    index = 1\n    while triangular > 1:\n        triangular -= 1\n        index += 1\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    # The smallest triangular number with n digits has n + 1 digits\n    smallest_triangular = int(math.pow(10, n+1))\n\n    # Initialize the count of digits for each triangular number\n    triangular_count = [1] * smallest_triangular\n\n    # Initialize the current triangular number\n    i = 2\n\n    while i < smallest_triangular:\n        # Calculate the next triangular number\n        j = i + i\n        while j < smallest_triangular:\n            # Count the number of digits in the current triangular number\n            triangular_count[j] += 1\n            # Increase the current triangular number by the count\n            j += i\n\n        # Find the index of the smallest triangular number with n digits\n        min_index = i\n        for j in range(i+1, smallest_triangular):\n            if triangular_count[j] < triangular_count[min_index]:\n                min_index = j\n\n        # Update the smallest triangular number with n digits\n        smallest_triangular = j\n\n        # Move to the next triangular number\n        i = smallest_triangular + 1\n\n    return min_index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result_dict[key] = value\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    my_dict = {}\n    i = 0\n    while i < len(test_tup):\n        my_dict[i] = test_tup[i]\n        i += 2\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup), 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    test_dict = {}\n    for i in range(0, len(test_tup)-1, 2):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The input tuple must have an even number of elements.\")\n\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    dict_obj = {}\n    for i in range(0, len(test_tup)-1, 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dictionary = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        dictionary[key] = value\n        i += 2\n    return dictionary\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    if len(test_tup) % 2!= 0:\n        print(\"The length of the tuple should be even.\")\n        return None\n    else:\n        key_value_dict = {}\n        for i in range(0, len(test_tup), 2):\n            key_value_dict[test_tup[i]] = test_tup[i+1]\n        return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    my_dict = {}\n    i = 0\n    while i < len(test_tup)-1:\n        my_dict[i] = test_tup[i+1]\n        i += 1\n    return my_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to a list\n    s = list(s)\n    \n    # Check if all the characters in the list are same\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    \n    # If all characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to list to make comparison easier\n    s = list(s)\n\n    # Check if all characters in the string are the same\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    # check if the string is empty\n    if len(s) == 0:\n        return True\n    # get the first character of the string\n    first_char = s[0]\n    # loop through the remaining characters of the string\n    for char in s[1:]:\n        # if the character is not equal to the first character, return False\n        if char!= first_char:\n            return False\n    # if the loop completes without returning False, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        print(\"All characters are same\")\n    else:\n        print(\"All characters are different\")"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert string to list of characters\n    lst = list(s)\n    # Check if all the characters are same\n    if lst.count(lst[0]) == len(lst):\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    \n    first_char = s[0]\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            return False\n    \n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # take the first character of the string\n    first_char = s[0]\n    # loop through the string\n    for char in s:\n        # check if the character is not the same as the first character\n        if char!= first_char:\n            # if it is not, return False\n            return False\n    # if all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function checks whether all the characters in a given string are same or not.\n    \"\"\"\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(set(s)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n    \"\"\"\n    s = (3 * side ** 2) ** 0.5\n    area = (s ** 2 + 3 * side ** 2) / 6\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1/3)*side*side\n    return math.sqrt(s)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # using Heron's formula for calculating the area of a right triangle\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    area = math.sqrt(s * (s-side)*(s-2*side)*(s-3*side))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * side**2 / (math.factorial(3))"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (3*side)**0.5\n    area = 4*math.pi*s**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to caluclate the area of a tetrahedron.\n\n    Args:\n        side (float): The length of the base of the tetrahedron\n\n    Returns:\n        float: The area of the tetrahedron\n    \"\"\"\n\n    # Use Heron's formula to calculate the area of the tetrahedron\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5\n    area = (1/3) * side * s\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 0.5 * side\n    area = math.sqrt(s * (s - side) * (s - 2 * side))\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side ** 2) / 2\n    area = math.sqrt(s * (s - side) * (s - (side * math.sqrt(3))))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n\n    # Calculate the semi-perimeter of the tetrahedron\n    semi_perimeter = side * (1 + math.sqrt(2)/2)\n\n    # Calculate the area of the tetrahedron\n    area = math.sqrt(3) * semi_perimeter / 2\n\n    return area"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    A function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    return lst[-n:] + lst[:-n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[:m], list[m:] = list[m:], list[:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # Check if the input list is empty\n    if not list:\n        return list\n    \n    # Calculate the length of the list\n    n = len(list)\n    \n    # Calculate the number of items to be moved\n    k = m % n\n    \n    # Move the items to the left by k items\n    for i in range(k):\n        list[i], list[n-i-1] = list[n-i-1], list[i]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list = list[m:] + list[:n-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Calculate the total number of items in the list\n    n = len(list)\n\n    # Check if the rotation count is valid\n    if m > n:\n        print(\"Invalid rotation count\")\n        return list\n\n    # Store the first m items in a separate list\n    temp = list[:m]\n\n    # Store the last n-m items in a separate list\n    left = list[m:]\n\n    # Concatenate the two lists\n    list = temp + left\n\n    # Return the modified list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    n = len(list)\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Reverse the list to make room for the rotated elements\n    list.reverse()\n\n    # Rotate the list by specified number of items\n    for i in range(m):\n        list.append(list.pop(0))\n\n    # Reverse the reversed list to get the final result\n    list.reverse()\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n # handle wrap around\n\n    for i in range(m):\n        # swap the first and last items\n        list[i], list[n-1-i] = list[n-1-i], list[i]\n\n    # return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    if m == 0:\n        return list\n\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    lst.rotate(n)\n    return lst"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(digit in str(num) for digit in '123456789')\n    \n    return filter(is_divisible_by_digit, range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n\n    # Define a function to check if a number is divisible by a certain digit\n    def is_divisible(num, digit):\n        if num % digit == 0:\n            return True\n        else:\n            return False\n\n    # Define a lambda function that checks if a number is divisible by every digit it contains\n    check_divisible = lambda x: all(is_divisible(x, d) for d in str(x))\n\n    # Find all numbers within the given range where the check_divisible function is true\n    result = [x for x in range(startnum, endnum+1) if check_divisible(x)]\n\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit in it.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    return filter(lambda num: is_divisible_by_digits(num), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % i == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        return all(digit in str(num) for digit in str(num))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    digits = list(range(10))\n    divisible_numbers = []\n    for num in range(startnum, endnum+1):\n        is_divisible = all(digit in str(num) for digit in digits)\n        if is_divisible:\n            divisible_numbers.append(num)\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        for d in digits:\n            if d % 2 == 0:\n                return False\n        return True\n\n    return list(filter(lambda x: is_divisible_by_digits(x), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Error: Angle cannot be greater than 360 degrees.\")\n        return None\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r * a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # Find the length of the sector\n    l = r * math.sin(math.radians(a/2))\n    \n    # Calculate the area of the sector\n    area = math.pi * r ** 2\n    \n    # Calculate the area of the sector using the formula\n    # area = pi * r^2 * sin(theta/2)\n    # or\n    # area = pi * r^2 * sin(theta) / 2\n    \n    # Find the angle of the sector\n    theta = math.asin(l/r) * 180 / math.pi\n    \n    # Return the area of the sector and the angle\n    return area, theta"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area of sector\n    area = math.pi * r**2 * a / 360\n    \n    # Return area of sector\n    return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) # length of X\n    n = len(Y) # length of Y\n    p = len(Z) # length of Z\n    \n    # create a new matrix to store LCS values\n    L = [[0 for j in range(p+1)] for i in range(m+1)]\n    \n    # fill the matrix L[][] in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n                \n    # get the LCS value by tracing back the matrix\n    i = m\n    j = p\n    lcs = []\n    while i!= 0 and j!= 0:\n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-j]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n            \n    # reverse the list to get the LCS\n    lcs.reverse()\n    \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    LCS = [[0]*(p+1) for i in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, p+1):\n            if X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n\n    return LCS[m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    result = \"\"\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            result = X[i-1] + result\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return result\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Create a table to store lengths of LCS for all prefixes of X and all prefixes of Y\n    table = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill table in bottom up manner\n    for i in range(1,len(X)+1):\n        for j in range(1,len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Construct the LCS\n    lcs = []\n    i,j = len(X), len(Y)\n    while i>0 and j>0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        m, n = len(X), len(Y) \n        L = [[0] * (n+1) for _ in range(m+1)] \n        for i in range(m+1): \n            for j in range(n+1): \n                if i == 0 or j == 0: \n                    L[i][j] = 0 \n                elif X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n        return L \n    L1 = lcs(X, Y) \n    L2 = lcs(Y, Z) \n    L3 = lcs(X, Z) \n    L = L1 + L2 + L3 \n    return max(L) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # Step 1: Build table to store LCS lengths in bottom-up fashion\n    L = [[0] * (o + 1) for _ in range(m + 1)]\n\n    # Step 2: Fill LCS table in bottom-up fashion\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, o + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i - 1][j - 1][k - 1] + 1\n                elif X[i - 1] == Y[j - 1]:\n                    L[i][j][k] = L[i - 1][j][k]\n                elif Y[j - 1] == Z[k - 1]:\n                    L[i][j][k] = L[i][j - 1][k - 1]\n                else:\n                    L[i][j][k] = max(L[i - 1][j][k], L[i][j - 1][k], L[i - 1][j - 1][k - 1])\n\n    # Step 3: Starting from the bottom-right corner of the table,\n    # extract the LCS one by one\n    i = m\n    j = n\n    k = o\n    lcs = []\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i - 1][j][k] == L[i][j - 1][k]:\n            i -= 1\n        elif L[i][j - 1][k] == L[i][j][k - 1]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it\n    lcs = lcs[::-1]\n    return ''.join(lcs)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Create a matrix to store the length of longest common subsequence for all prefixes of X, Y, and Z\n    matrix = [[0] * (len(Y) + 1) for i in range(len(X) + 1)]\n\n    # Fill the matrix in bottom-up manner\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                matrix[i][j] = matrix[i - 1][j - 1] + 1\n            else:\n                matrix[i][j] = max(matrix[i - 1][j], matrix[i][j - 1])\n\n    # Traverse the matrix to find the length of longest common subsequence for the given strings\n    i, j = len(X), len(Y)\n    l = 0\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            l += 1\n            i -= 1\n            j -= 1\n        elif matrix[i - 1][j] > matrix[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return l"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    # Initialize a dictionary to store the length of LCS for all possible subsequences\n    dp = {}\n\n    # Initialize the first row and column of the DP table\n    for i in range(len(X) + 1):\n        dp[i] = [0] * (len(Y) + 1)\n\n    # Fill the DP table using dynamic programming\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Extract the LCS from the DP table\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return \"\".join(reversed(lcs))\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n\n    # creating a table to store LCS lengths \n    L = [[0 for j in range(p+1)] for i in range(m+1)] \n\n    # Following steps build L[m+1][n+1] in bottom up fashion. \n    # Note that L[i][j] contains length of LCS of X[0...i-1] and Y[0...j-1] and Z[0...k-1] \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n\n    # Following step backtrack to get the LCS of X[0...m-1], Y[0...n-1] and Z[0...p-1] \n    i = m \n    j = n \n    k = p \n    lcs = [] \n\n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    # reverse the order of the lcs and return it \n    lcs.reverse() \n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    def common_substrings(s, t, u):\n        m, n, p = len(s), len(t), len(u)\n        dp = [[0]*(p+1) for i in range(m+1)]\n        for i in range(m):\n            for j in range(n):\n                for k in range(p):\n                    if s[i] == t[j] and t[j] == u[k]:\n                        dp[i+1][j+1] = dp[i][j] + dp[i][k] + dp[i][j+1] + dp[i][j+1] + 1\n                    elif s[i] == t[j]:\n                        dp[i+1][j+1] = dp[i][j] + 1\n                    elif t[j] == u[k]:\n                        dp[i+1][j+1] = dp[i][j+1] + 1\n                    else:\n                        dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1])\n        return dp[m][n]\n    \n    m, n, p = len(X), len(Y), len(Z)\n    dp = [[0]*(p+1) for i in range(m+1)]\n    \n    # Calculate lengths of LCS of X and Y\n    for i in range(m):\n        for j in range(n):\n            dp[i+1][j+1] = max(X[i] == Y[j], dp[i+1][j], dp[i][j+1])\n    \n    # Calculate lengths of LCS of X, Y and Z\n    for i in range(m):\n        for j in range(n):\n            for k in range(p):\n                if X[i] == Y[j] and Y[j] == Z[k]:\n                    dp[i+1][j+1] = max(dp[i+1][j] + dp[i][k], dp[i][j+1] + dp[i][k], dp[i][j] + dp[i][j+1] + dp[i][k] + dp[i][j] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j+1] + dp[i][k] + dp[i][j"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    words = re.findall(r'\\b[a-z][a-z\\s]*\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Define regular expression pattern to match capital words with non-word characters\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    \n    # Iterate over each word in the string\n    words = pattern.findall(str1)\n    \n    # Iterate over each word and check if it starts with a capital letter\n    for word in words:\n        # If the word starts with a capital letter, add a space before it\n        if word[0].isupper():\n            str1 = str1.replace(word,'' + word)\n    \n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n\n    # Regular expression to match capital letters followed by a space\n    pattern = r'[A-Z][a-z]*'\n\n    # Split the string into words\n    words = re.findall(pattern, str1)\n\n    # Convert words starting with capital letters to uppercase and insert spaces between them\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'([A-Z][a-z]*(?=[A-Z])|(?<=\\W)[A-Z](?=[A-Z][a-z]*))'\n    return re.sub(pattern, r'\\1 ', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all spaces with underscores to split by words\n    str1 = str1.replace(\" \", \"_\")\n    # Split the string by words\n    words = str1.split(\"_\")\n    # Define a regular expression pattern to match capital letters\n    pattern = r'[A-Z][a-z]+'\n    # Loop through the words and insert spaces between them if they start with capital letters\n    for i in range(len(words)):\n        if re.match(pattern, words[i]):\n            words[i] = words[i].replace(words[i][0], words[i][0] + \" \")\n    # Join the words back together with underscores\n    result = \"_\".join(words)\n    # Remove the underscores from the beginning and end of the string\n    result = result[1:-1]\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Define the regular expression pattern for matching capitalized words\n    pattern = r'\\b[A-Z][a-z]+\\b'\n\n    # Replace all the capitalized words with a space\n    new_str = re.sub(pattern, r'\\1 ', str1)\n\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b[a-zA-Z]+\\b', str1)\n    # Use a loop to iterate over the words list and check if the first letter is capitalized\n    for i in range(len(words)):\n        # Check if the first letter of the current word is capitalized\n        if words[i][0].isupper():\n            # If it is, add a space before the word\n            words[i] ='' + words[i]\n    # Join the words list with spaces to get the final string with spaces between capitalized words\n    result = ''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Create a regular expression pattern to match all words starting with capital letters\n    pattern = r'\\b\\w*[A-Z]\\w*\\b'\n\n    # Use the re.sub() function to replace all matches of the pattern with a single space\n    result = re.sub(pattern,'', str1)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', string)\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')\n    words = pattern.findall(str1)\n    capitalized_words = [word.capitalize() if len(word) > 1 else word for word in words]\n    return''.join(capitalized_words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    # convert all strings to floats and append to the nums list\n    for num in nums_str:\n        nums.append(float(num))\n\n    # sort the list numerically using the sorted() function\n    nums.sort()\n\n    # convert the sorted list back to strings and return it\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    # Split the list into a list of lists, where each inner list contains one or more numbers\n    nums_list = [[int(x) for x in num.split()] for num in nums_str]\n    # Sort the inner lists numerically using the sorted() function\n    sorted_nums_list = sorted(nums_list, key=lambda x: x[0])\n    # Flatten the sorted list to a single list\n    sorted_nums = [num for sublist in sorted_nums_list for num in sublist]\n    # Return the sorted list as a string\n    return ''.join(map(str, sorted_nums))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # convert all the strings in the list to numbers\n    nums_list = [int(num_str) for num_str in nums_str]\n    \n    # use the sorted() function to sort the list in ascending order\n    sorted_nums_list = sorted(nums_list)\n    \n    # convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in sorted_nums_list]\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda s: [int(c) if c.isdigit() else float('inf') for c in s])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    This function takes a list of strings as input and returns a sorted list of strings.\n    The strings are sorted in numerical order (i.e. all strings are sorted in numerical order, no strings are sorted alphabetically)\n    '''\n    nums = []\n    for s in nums_str:\n        # remove non-numeric characters from the string\n        s = ''.join(filter(str.isdigit, s))\n        # add the numeric value of the string to the list of nums\n        nums.append(int(s))\n    # sort the list of nums in ascending order\n    nums.sort()\n    # create a new list of strings and populate it with the sorted nums\n    sorted_nums_str = []\n    for num in nums:\n        sorted_nums_str.append(str(num))\n    # return the sorted list of strings\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [float(num) for num in nums_str]\n    nums.sort()\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    # Split the strings of numbers and convert them to numbers\n    nums = [float(num) for num in nums_str]\n    # Sort the numbers in ascending order\n    nums.sort()\n    # Convert the sorted numbers back to strings and join them into a single string\n    return ', '.join([str(num) for num in nums])"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: [int(s) for s in re.findall(r'\\d+', x)])\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    nums = [int(num) for num in nums_str]\n    nums.sort()\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. \n    '''\n    # Convert all strings to numbers\n    nums = []\n    for num_str in nums_str:\n        num = float(num_str)\n        nums.append(num)\n    # Sort the numbers in the list\n    nums.sort()\n    # Convert the sorted numbers back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for num in test_tup:\n        test_list.append(num)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= 1:\n        if arr[i] > arr[i//2]:\n            return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return True\n    \n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) < 2:\n        return True\n    \n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif i == len(arr) - 1:\n        return False\n    elif arr[i] <= arr[i // 2]:\n        return check_min_heap_helper(arr, i // 2)\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 1:\n        return False\n    if i == 1:\n        if arr[i] < arr[0]:\n            return False\n        return True\n    if i == len(arr):\n        if arr[i-1] > arr[i]:\n            return False\n        return True\n    if arr[i] < arr[i-1] and arr[i] < arr[i+1]:\n        return True\n    if arr[i] < arr[i-1]:\n        return check_min_heap_helper(arr, i-1)\n    if arr[i] < arr[i+1]:\n        return check_min_heap_helper(arr, i+1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents a min heap or not.\n    \"\"\"\n    if i == 0:\n        return True\n    \n    if arr[i] <= arr[int((i-1)/2)]:\n        return False\n    \n    return check_min_heap_helper(arr, int((i-1)/2))\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n    \"\"\"\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if left child is smaller than parent\n    if arr[i] > arr[2*i]:\n        return False\n\n    # Recursively check left and right children of current node\n    return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if len(arr) == 1:\n        return True\n\n    # Check if all elements of the array are greater than the root node\n    if check_min_heap_helper(arr, 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return arr\n\ndef check_min_heap_helper(arr, i):\n    '''\n    Helper function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2*i + 1\n    right = 2*i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        return arr[i] <= arr[i//2] and check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 1:\n        return True\n    \n    if arr[i] < arr[i//2]:\n        return False\n    \n    return check_min_heap_helper(arr, i//2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n\n    return check_min_heap_helper(arr, left) and check_min_heap_helper(arr, right)\n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth Jacobsthal number.\n    \"\"\"\n    a = 1\n    b = 0\n    c = 1\n    j = 0\n    while j < n:\n        if j % 2 == 0:\n            a, b = b, a + b\n        else:\n            c, a = a, c + a\n        j += 1\n    return b"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n % 2 == 0: \n        return jacobsthal_num(n//2) + 1\n    else: \n        return jacobsthal_num((n-1)//2) + 2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365,...\n    \"\"\"\n    j = 0\n    while j < n:\n        j += 1\n        if j % 2 == 1:\n            jacobsthal_num = j + 1\n            print(jacobsthal_num)\n    return jacobsthal_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob = 2 * n - 1\n        return jacobsthal_num(jacobs) + 1\n        \n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        jacobsthal_num_n = jacobsthal_num(n-1) + jacobsthal_num(n-2)\n        return jacobsthal_num_n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2*jacobsthal_num(n//2) - 1\n    else:\n        return 2*jacobsthal_num((n-1)//2) - jacobsthal_num((n-1)//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # initialize the first two numbers\n    j1, j2 = 0, 1\n\n    # loop n times and calculate the nth number\n    for i in range(n):\n        # calculate the next number\n        next_num = (j1 + j2) * (2 * j1 + 1)\n        # update the current numbers\n        j1, j2 = j2, next_num\n\n    # return the nth number\n    return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        jacob_num = jacobsthal_num(n-1) + jacobsthal_num(n-2)\n        return jacob_num"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the tuple list in ascending order of the first element\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize variables for minimum and maximum keys found so far\n    min_key = float('inf')\n    max_key = float('-inf')\n\n    # Initialize variables for minimum and maximum values found so far\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    # Iterate through the sorted tuple list\n    for key, val in sorted_list:\n        # Update minimum and maximum keys and values\n        min_key = min(min_key, key)\n        max_key = max(max_key, key)\n        min_val = min(min_val, val)\n        max_val = max(max_val, val)\n\n        # Check if we have found K records\n        if K == 0:\n            break\n\n        # If we have found K-1 records, update K and break\n        K -= 1\n\n    # Check if we have found K records\n    if K > 0:\n        # If we have found K records, return the minimum and maximum values\n        return min_val, max_val\n\n    # If we have not found K records, return None\n    return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    min_k_records = []\n    for i in range(K):\n        min_k_records.append(sorted_list[i])\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for i in range(len(test_list)):\n        if test_list[i][0] in freq:\n            freq[test_list[i][0]] += 1\n        else:\n            freq[test_list[i][0]] = 1\n\n    # Sort the dictionary by the frequency of each element in ascending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1])\n\n    # Initialize the minimum count as infinity and a list to store the minimum k records\n    min_count = float('inf')\n    min_k_records = []\n\n    # Iterate through the sorted dictionary\n    for i in range(K):\n        # Check if the frequency of the current element in the sorted dictionary is less than the minimum count\n        if sorted_freq[i][1] < min_count:\n            break\n        # If the frequency of the current element is equal to the minimum count, append it to the list\n        elif sorted_freq[i][1] == min_count:\n            min_k_records.append(sorted_freq[i][0])\n\n    return min_k_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize an empty dictionary to store the minimum k records\n    min_k_dict = {}\n\n    # Iterate through the sorted list of tuples\n    for i in range(len(sorted_list)):\n        # If the length of the dictionary is less than k, add the current tuple to the dictionary\n        if len(min_k_dict) < K:\n            min_k_dict[sorted_list[i]] = i\n        # If the length of the dictionary is equal to k, check if the current tuple is smaller than the minimum value in the dictionary\n        elif sorted_list[i][1] < min_k_dict[min(min_k_dict, key=min_k_dict.get)][1]:\n            # If the current tuple is smaller, update the minimum value in the dictionary and remove the previous minimum value from the dictionary\n            min_k_dict[sorted_list[i]] = i\n            min_k_dict.pop(min(min_k_dict, key=min_k_dict.get))\n\n    # Initialize a list to store the minimum k records\n    min_k_records = []\n\n    # Iterate through the sorted list of tuples again to add the minimum k records to the list\n    for i in range(len(sorted_list)):\n        if i in min_k_dict:\n            min_k_records.append(sorted_list[i])\n\n    # Return the minimum k records\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list = sorted(test_list, key=lambda x: x[1])\n    min_record = test_list[0]\n    count = 1\n    for i in range(1, len(test_list)):\n        if test_list[i][1] == min_record[1]:\n            count += 1\n        else:\n            break\n    return (min_record, count)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    Write a function to find minimum k records from tuple list.\n    \"\"\"\n    # Sort the list based on the second element (the count of the first element) in descending order\n    sorted_list = sorted(test_list, key=lambda x: x[1], reverse=True)\n\n    # Initialize the minimum count to infinity\n    min_count = float('inf')\n\n    # Initialize an empty list to store the k records\n    k_records = []\n\n    # Iterate through the sorted list and check if the count of the current element is less than K. If yes, add the element to k_records.\n    for count, element in enumerate(sorted_list):\n        if count < K:\n            k_records.append(element)\n        else:\n            # If the count is greater than or equal to K, then we need to check if the count of the next element is less than K. If yes, add the next element to k_records. Otherwise, we can break out of the loop as all the subsequent elements will also have a count greater than K.\n            if count < len(sorted_list) and sorted_list[count][1] < K:\n                k_records.append(sorted_list[count])\n                break\n            else:\n                break\n\n    # Return the list of k records\n    return k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list, key=lambda x: x[1]) #sorting the list based on the second element of each tuple\n    min_k_list = sorted_list[:K] #getting the first K records from the sorted list\n    min_k_list.sort(reverse=True) #sorting the list in descending order\n    return min_k_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_set = set()\n    for i in range(K):\n        min_set.add(test_list[i][0])\n    min_list = sorted(list(min_set))\n    for i in range(K, len(test_list)):\n        if min_list[0] not in min_set:\n            min_set.add(test_list[i][0])\n        else:\n            min_list.remove(min_list[0])\n            min_set.remove(min_list[0])\n            min_list.append(test_list[i][0])\n            min_set.add(test_list[i][0])\n    min_list.sort()\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Initialize an empty dictionary to store the minimum values\n    min_dict = {}\n\n    # Iterate through the tuple list\n    for record in test_list:\n        # Get the value of the record and the key\n        value = record[1]\n        key = record[0]\n\n        # If the key is not already in the dictionary or the value is less than the current minimum value, update the dictionary\n        if key not in min_dict or value < min_dict[key]:\n            min_dict[key] = value\n\n    # Sort the dictionary by value in ascending order\n    min_dict = dict(sorted(min_dict.items(), key=lambda item: item[1]))\n\n    # Create a list to store the minimum k records\n    min_list = []\n\n    # Iterate through the keys of the sorted dictionary\n    for key in min_dict.keys():\n        # If the length of the min_list is equal to K, break the loop\n        if len(min_list) == K:\n            break\n        # Add the record with the minimum value to the min_list\n        min_list.append((key, min_dict[key]))\n\n    # Return the min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    # Initialize an empty dictionary to store the count of each record\n    record_count = {}\n\n    # Iterate through the list of tuples and update the count of each record\n    for record in test_list:\n        if record in record_count:\n            record_count[record] += 1\n        else:\n            record_count[record] = 1\n\n    # Initialize an empty list to store the minimum k records\n    min_records = []\n\n    # Iterate through the dictionary and add the records with the minimum count to the list\n    for record in record_count:\n        if record_count[record] == min(record_count.values()) and len(min_records) < K:\n            min_records.append(record)\n\n    # Return the list of minimum k records\n    return min_records"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Create a set of common elements in l1 and l2\n    common_elements = set(l1).intersection(set(l2))\n\n    # Create an empty set to store the common elements in l3\n    common_in_l3 = set()\n\n    # Iterate through each index in l3\n    for i in range(len(l3)):\n        # Check if the current element is in common_elements\n        if l3[i] in common_elements:\n            # Add it to the set of common elements in l3\n            common_in_l3.add(l3[i])\n\n    # Convert the set of common elements in l3 to a list and return it\n    return list(common_in_l3)"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l2[i] in l3 and l3[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in index_list:\n            index_list.append(l1[i])\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty dictionary to store the common elements\n    common_elements = {}\n\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at the current index is in l2, l3 and not in the dictionary yet\n        if l1[i] in l2 and l1[i] in l3 and l1[i] not in common_elements:\n            # If it's not in the dictionary yet, add it to the dictionary and append its index to a list of common indexes\n            common_elements[l1[i]] = [i]\n        elif l1[i] in l2 and l1[i] in l3 and l1[i] in common_elements:\n            # If it's in the dictionary, add its index to the list of common indexes\n            common_elements[l1[i]].append(i)\n\n    # Initialize an empty list to store the final common elements\n    final_common_elements = []\n\n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at the current index is in the final dictionary and its index is in the list of common indexes\n        if l1[i] in common_elements and i in common_elements[l1[i]]:\n            # If it's in the final dictionary and its index is in the list, append it to the final list of common elements\n            final_common_elements.append(l1[i])\n\n    return final_common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return min(numbers[1:], key=lambda x:x)"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    sorted_numbers = sorted(numbers)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n    else:\n        sorted_numbers = sorted(numbers)\n        return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = None\n    for num in numbers[1:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        numbers.sort()\n        return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b'\n    result = re.search(pattern, text)\n    if result:\n        return 'Match found at index'+ str(result.start()) + ':' + text[result.start():result.end()]\n    else:\n        return 'No match found'"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[^b]*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=\\b)' + r'b+'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"Found:\", matches)\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a(b*)')\n    result = pattern.match(text)\n    if result:\n        group = result.group(1)\n        return group\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. \n    https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?:b+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n\n    def reverse_string(s):\n        return s[::-1]\n\n    def count_reverse_pairs_helper(s1, s2):\n        if len(s1) == 0:\n            return 0\n\n        # Count the number of substrings that are equal to the reversed s2\n        count = 0\n        for i in range(len(s1)):\n            if s1[i] == s2[i]:\n                count += 1\n\n        # If the first character of s1 is equal to the last character of s2,\n        # we can consider the second character as a reverse substring of s1\n        if s1[0] == s2[-1]:\n            count += count_reverse_pairs_helper(s1[1:], s2[0:-1])\n\n        return count\n\n    # Iterate through each string in the list\n    count = 0\n    for s1 in test_list:\n        for s2 in test_list:\n            if s1!= s2:\n                # Count the number of reverse pairs for the given strings\n                reverse_s1 = reverse_string(s1)\n                reverse_s2 = reverse_string(s2)\n                count += count_reverse_pairs_helper(s1, reverse_s2)\n                count += count_reverse_pairs_helper(reverse_s1, s2)\n\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    # Initialize a dictionary to store the count of reverse pairs\n    count = {}\n\n    # Iterate through the given string list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Reverse the list of characters\n        char_list.reverse()\n        # Convert the reversed list back to a string\n        reversed_string = ''.join(char_list)\n        # Check if the reversed string exists in the dictionary\n        if reversed_string in count:\n            # Increment the count of the current string by 1\n            count[string] += 1\n        else:\n            # If the reversed string is not in the dictionary, add it with a count of 1\n            count[string] = 1\n\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string1 in test_list:\n        for i in range(len(string1)):\n            for j in range(len(string1)-i-1):\n                if string1[j] == string1[j+1][::-1]:\n                    count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i < j:\n                if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # Initialize count to 0\n    count = 0\n    # Sort the given list in ascending order\n    test_list.sort()\n    # Iterate over the given list\n    for i in range(len(test_list) - 1):\n        # Iterate over the remaining elements of the list starting from the next element\n        for j in range(i + 1, len(test_list)):\n            # Check if the reversed substring from index i to j is in the list\n            if test_list[i][::-1] in test_list[j:]:\n                # Increment the count by 1\n                count += 1\n    # Return the count of reverse pairs\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        \n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        \n        left = merge_sort(left)\n        right = merge_sort(right)\n        \n        return merge(left, right)\n    \n    def merge(left, right):\n        result = []\n        i = j = 0\n        \n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += 1\n            elif left[i] < right[j]:\n                result.append(right[j])\n                j += 1\n            else:\n                result.append(left[i])\n                i += 1\n                j += 1\n        \n        result += left[i:]\n        result += right[j:]\n        \n        return result\n    \n    sorted_list = merge_sort(test_list)\n    \n    count = 0\n    \n    for i in range(len(sorted_list) - 1):\n        for j in range(i + 1, len(sorted_list)):\n            if sorted_list[i] == sorted_list[j][::-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate through each element in the list\n    for i in range(len(list1)):\n        # Convert the current element to a tuple\n        curr_tuple = (list1[i],)\n        \n        # Check if the current tuple is already in the dictionary\n        if curr_tuple in counts:\n            # If it is, increment its count by 1\n            counts[curr_tuple] += 1\n        else:\n            # If not, add it to the dictionary with a count of 1\n            counts[curr_tuple] = 1\n            \n    # Return the dictionary with the counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    counts = {}\n    for item in list1:\n        for sublist in list1:\n            if item not in sublist:\n                if tuple(sublist) in counts:\n                    counts[tuple(sublist)] += 1\n                else:\n                    counts[tuple(sublist)] = 1\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        count_dict[tuple(item)] = count_dict.get(tuple(item), 0) + 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each tuple\n    counts = {}\n    # loop through each element in the list1\n    for i in range(len(list1)):\n        # create a tuple of the current element and the next element\n        t = (list1[i], list1[i+1])\n        # check if the tuple already exists in the dictionary\n        if t in counts:\n            # if it does, increment its count by 1\n            counts[t] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            counts[t] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # convert lists to tuples and count the occurrences of each tuple\n    sublists = {}\n    for item in list1:\n        for sublist in item:\n            sublists[tuple(sublist)] = sublists.get(tuple(sublist), 0) + 1\n\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Initialize an empty dictionary to store the counts\n    counts = {}\n\n    # Loop through each list in the input list\n    for lst in list1:\n\n        # Convert the list to a tuple and count its occurrences in the original list\n        tup = tuple(lst)\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    counts = {}\n    for item in lst:\n        # Convert the list to a tuple and count its occurrences in the list\n        counts[tuple(item)] = lst.count(item)\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    \n    # Loop through each element in the list\n    for elem in list1:\n        # Convert the element to a tuple\n        elem_tuple = tuple(elem)\n        \n        # If the tuple is already in the dictionary, increment its value\n        if elem_tuple in count_dict:\n            count_dict[elem_tuple] += 1\n        # Otherwise, add the tuple to the dictionary with a value of 1\n        else:\n            count_dict[elem_tuple] = 1\n    \n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if num.replace(\".\", \"\").replace(\",\", \"\").replace(\" \", \"\").isdigit():\n            int_part = int(float_num)\n            dec_part = float_num - int_part\n            if abs(dec_part) < 0.01:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num:\n        decimal_part = num.split('.')[-1]\n        if len(decimal_part) > 2:\n            return False\n        for digit in decimal_part:\n            if not digit.isdigit():\n                return False\n    else:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if float_num.is_integer() and abs(float_num - int(float_num)) < 0.01:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float_num = float(num)\n        # Check if the number has more than two decimal places\n        if len(num.split('.')[1]) > 2:\n            return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    if '.' not in num:\n        return False\n    for i in range(len(num)-1, -1, -1):\n        if num[i] == '.':\n            continue\n        elif not num[i].isdigit():\n            return False\n        elif int(num[i:]) >= 10:\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove non-numeric characters from the string\n    num = ''.join(c for c in num if c.isdigit() or c == '.' or c == '-')\n\n    # Check if the string is empty\n    if not num:\n        return False\n\n    # Check if the string contains only one decimal point\n    if '.' not in num:\n        return False\n\n    # Split the string by the decimal point\n    integer_part, decimal_part = num.split('.')\n\n    # Check if the integer part is empty\n    if not integer_part:\n        return False\n\n    # Check if the integer part is only one digit long\n    if len(integer_part) > 1:\n        return False\n\n    # Check if the decimal part is not empty\n    if not decimal_part:\n        return False\n\n    # Check if the number of digits in the integer part is less than 2\n    if len(integer_part) < 2:\n        return False\n\n    # Check if the number of digits in the decimal part is less than 2\n    if len(decimal_part) < 2:\n        return False\n\n    # Return True if the string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        decimal_part = num.split('.')[1]\n        if len(decimal_part) == 2:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if len(num) > 2:\n        return False\n    try:\n        float(num)\n    except ValueError:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        float(num)\n        if '.' in num:\n            if len(num.split('.')[-1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Split the number into digits\n    num_list = [int(digit) for digit in num]\n\n    # Check if the number has a length of 2\n    if len(num_list)!= 2:\n        return False\n\n    # Check if the number is a valid decimal number\n    decimal_part = num_list[1]\n    if decimal_part < 0 or decimal_part >= 10:\n        return False\n\n    # Check if the decimal part is less than 10\n    if decimal_part < 1:\n        return False\n\n    # Check if the integer part is greater than 100\n    int_part = num_list[0]\n    if int_part > 100:\n        return False\n\n    # Check if the integer part is less than 10\n    if int_part < 10:\n        return False\n\n    # Check if the integer part has more than 1 digit\n    if len(str(int_part)) > 1:\n        return False\n\n    # If all the checks pass, return True\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # convert the list to a set to remove duplicates and then back to a list\n    arr = list(set(arr))\n    # check if the length of the list is equal to 1\n    if len(arr) == 1:\n        print(\"The list contains only one distinct element.\")\n    else:\n        print(\"The list contains more than one distinct element.\")"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return False\n        seen.add(num)\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # creating a set to store the unique elements\n    unique_set = set(arr)\n    # checking if the length of the set is equal to the length of the list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # Create a set from the list\n    set_arr = set(arr)\n\n    # Check if the set has only one element\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initialize an empty dictionary to store the frequency of each element in the array\n    freq = {}\n    # loop through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # check if the length of the dictionary is 1, which means all elements are distinct\n    if len(freq) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # check if the list contains any duplicate elements\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # initialize a set to store the unique elements in the list\n    unique_set = set()\n    \n    # iterate over the elements in the list\n    for num in arr:\n        # if the element is not already in the set, add it\n        if num not in unique_set:\n            unique_set.add(num)\n            # if the set contains only one element, return True\n            if len(unique_set) == 1:\n                return True\n    \n    # if the loop completes without finding a single distinct element, return False\n    return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum == 2:\n        return True\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum in [1,3,5,7,8,10,12]:\n        return False\n    elif monthnum in [4,6,9,11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum3 == 2 and day >= 29:\n                print(\"30 days in February\")\n            else:\n                print(\"30 days in February\")\n        else:\n            if monthnum3 == 2 and day >= 28:\n                print(\"30 days in February\")\n            else:\n                print(\"30 days in February\")\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11 and day >= 30:\n            print(\"30 days in March, April, June, September, or November\")\n        else:\n            print(\"30 days in March, April, June, September, or November\")\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12 and day >= 31:\n            print(\"30 days in January, March, May, July, August, October, or December\")\n        else:\n            print(\"30 days in January, March, May, July, August, October, or December\")\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1,13):\n        return days_in_months[monthnum3-1] in [31, 30, 28]\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    # Check if the month number is valid\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid month number. Month numbers should be between 1 and 12.\"\n    \n    # Check if the month has 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        return \"30 days in month number {}.\".format(monthnum3)\n    else:\n        return \"No 30 days in month number {}.\".format(monthnum3)"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        if monthnum3%4 == 0:\n            if monthnum3%100 == 0:\n                if monthnum3%400 == 0:\n                    if monthnum3%100 == 0:\n                        return True\n                else:\n                    return True\n            else:\n                return True\n        else:\n            return True\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Define the number of days in each month\n    month_days = {\n        1: 31,  # January\n        2: 28,  # February\n        3: 31,  # March\n        4: 30,  # April\n        5: 31,  # May\n        6: 30,  # June\n        7: 31,  # July\n        8: 31,  # August\n        9: 30,  # September\n        10: 31,  # October\n        11: 30,  # November\n        12: 31  # December\n    }\n\n    # Check if the month number is in the range of 1 to 12\n    if 1 <= monthnum3 <= 12:\n        # Check if the month number contains 30 days\n        if month_days[monthnum3] == 30:\n            return True\n        else:\n            return False\n    else:\n        # Raise an error if the month number is outside the range of 1 to 12\n        raise ValueError(\"Month number should be between 1 and 12\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        if monthnum3 % 2 == 0:\n            return True\n        else:\n            return False\n    elif monthnum3 in [4, 6, 9, 11]:\n        if monthnum3 % 2 == 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in non-decreasing order\n    arr.sort()\n\n    # Initialize minimum difference\n    min_diff = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    min_diff = float('inf')\n    min_diff_index = 0\n    hash_table = {}\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = abs(arr[i]-arr[j])\n            if diff in hash_table:\n                min_diff = min(min_diff, diff)\n                min_diff_index = min(min_diff_index, min(hash_table[diff],i))\n            else:\n                hash_table[diff] = i\n    return min_diff, min_diff_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its size as input, and returns the minimum difference between any two elements in the array.\n\n    Example:\n    arr = [3, 1, 5, 7, 2]\n    n = 5\n    Output: 2\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference variable as infinity\n    min_diff = float('inf')\n\n    # Traverse the array for pairs of adjacent elements\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    # Sort the array in ascending order \n    arr.sort() \n    # Initialize the minimum difference as the difference between the first two elements \n    min_diff = arr[1] - arr[0] \n\n    # Traverse the remaining array elements \n    for i in range(2, n): \n        # Calculate the difference between current element and next element \n        diff = arr[i] - arr[i-1] \n        # Update the minimum difference if the current difference is smaller \n        if diff < min_diff: \n            min_diff = diff \n    # Return the minimum difference \n    return min_diff "
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n\n    Time Complexity: O(n^2)\n\n    :param arr: A list of integers representing the array.\n    :param n: The length of the array.\n    :return: The minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    The function uses two nested loops to iterate through each pair of elements in the array.\n    \"\"\"\n\n    # Initialize min_diff variable to a large value\n    min_diff = float('inf')\n\n    # Iterate through each pair of elements in the array\n    for i in range(n):\n        for j in range(i+1, n):\n\n            # Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the current difference is smaller than min_diff\n            if diff < min_diff:\n                min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return \"Array should have at least two elements\"\n\n    arr.sort()\n    min_diff = arr[1] - arr[0]\n\n    for i in range(1, n - 1):\n        if arr[i + 1] - arr[i] < min_diff:\n            min_diff = arr[i + 1] - arr[i]\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    # Initialize minimum difference to maximum integer value \n    min_diff = float('inf') \n    # Iterate over the array and find the minimum difference between any two elements \n    for i in range(1,n): \n        diff = arr[i] - arr[i-1] \n        diff2 = arr[n-1] - arr[i+1] \n        # Update minimum difference if current difference is smaller than previous minimum difference \n        min_diff = min(min_diff, diff, diff2) \n    return min_diff "
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    a = 0\n    b = 0\n    polite_number = 0\n\n    while a <= n:\n        b = (a * a) + (b * 2)\n        polite_number = b\n        a += 1\n\n    if polite_number == 0:\n        return \"Invalid Input\"\n    else:\n        return polite_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    else:\n        return is_polite(n-1) + 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. \n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_numbers = {1: 1, 2: 3, 3: 7, 4: 11, 5: 13, 6: 17, 7: 19, 8: 23, 9: 29, 10: 31, 11: 37, 12: 41, 13: 43, 14: 47, 15: 53, 16: 59, 17: 61, 18: 67, 19: 71, 20: 73}\n    return polite_numbers[n]\n\nn = int(input(\"Enter a number: \"))\nprint(f\"{n}th polite number is {is_polite(n)}\")"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize a list of polite numbers\n    polite_numbers = []\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Check if the number is polite\n        polite = True\n        # Iterate from 1 to sqrt(i)\n        for j in range(1, math.sqrt(i) + 1):\n            # If i is a multiple of j, it is not polite\n            if i % j == 0:\n                polite = False\n                break\n        # If i is still polite, add it to the list of polite numbers\n        if polite:\n            polite_numbers.append(i)\n\n    # Return the nth polite number\n    return polite_numbers[n - 1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 2:\n        return 1\n    else:\n        polite = 1\n        i = 2\n        while i <= n:\n            if i % 2 == 0:\n                polite += i\n            i += 1\n        return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    polite_numbers = []\n    for i in range(1, n+1):\n        is_polite = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_polite = False\n                break\n        if is_polite:\n            polite_numbers.append(i)\n        if len(polite_numbers) == n:\n            break\n\n    return polite_numbers"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1:\n        return 1\n\n    numerator = 2\n    denominator = 1\n    polite_num = 1\n\n    while polite_num <= n:\n        if polite_num % denominator == 0:\n            polite_num += numerator\n        else:\n            numerator += 2\n            denominator = 6\n\n        polite_num = numerator // denominator\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    elif n == 3:\n        return 7\n    elif n == 4:\n        return 9\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 13\n    elif n == 7:\n        return 15\n    elif n == 8:\n        return 17\n    elif n == 9:\n        return 19\n    elif n == 10:\n        return 21\n    elif n == 11:\n        return 23\n    elif n == 12:\n        return 25\n    elif n == 13:\n        return 27\n    elif n == 14:\n        return 29\n    elif n == 15:\n        return 31\n    elif n == 16:\n        return 33\n    elif n == 17:\n        return 35\n    elif n == 18:\n        return 37\n    elif n == 19:\n        return 39\n    elif n == 20:\n        return 41\n    elif n == 21:\n        return 43\n    elif n == 22:\n        return 45\n    elif n == 23:\n        return 47\n    elif n == 24:\n        return 49\n    elif n == 25:\n        return 51\n    elif n == 26:\n        return 53\n    elif n == 27:\n        return 55\n    elif n == 28:\n        return 57\n    elif n == 29:\n        return 59\n    elif n == 30:\n        return 61\n    elif n == 31:\n        return 63\n    elif n == 32:\n        return 65\n    elif n == 33:\n        return 67\n    elif n == 34:\n        return 69\n    elif n == 35:\n        return 71\n    elif n == 36:\n        return 73\n    elif n == 37:\n        return 75\n    elif n == 38:\n        return 77\n    elif n == 39:\n        return 79\n    elif n == 40:\n        return 81\n    elif n == 41:\n        return 83\n    elif n == 42:\n        return 85\n    elif n == 43:\n        return 87\n    elif n == 44:\n        return 89\n    elif n == 45:\n        return 91\n    elif n == 46:\n        return 93\n    elif n == 47:\n        return 95\n    elif n == 48:\n        return 97\n    elif n == 49:\n        return 99\n    else:\n        return math.factorial(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize the counter variable\n    counter = 0\n    \n    # Iterate from 2 to n-1\n    for i in range(2, n):\n        # Check if i is a polite number\n        if is_prime(i) and i % 2 == 1:\n            # Increment the counter\n            counter += 1\n            # If the counter reaches n, return True\n            if counter == n:\n                return True\n            \n    # If we reach this point, n is not a polite number\n    return False\n\ndef is_prime(num):\n    \"\"\"\n    Check if a given number is prime or not.\n    \"\"\"\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # Iterate from 2 to num-1\n    for i in range(2, int(math.sqrt(num))+1):\n        # If the number is divisible by i, return False\n        if num % i == 0:\n            return False\n    \n    # If we reach this point, the number is prime\n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    \"\"\"\n    # Initialize variables\n    count = 0\n    num = 1\n    polite_num = 0\n    \n    # Calculate first 10 polite numbers\n    for i in range(1, 11):\n        num *= 2\n        count += 1\n        polite_num = num * 2\n        if count == n:\n            break\n        \n    return polite_num\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    else:\n        return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    \n    pairs = []\n    for i in range(len(l1)):\n        pairs.append((l1[i], l1[i+1]))\n    \n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        if i == n-1:\n            pairs.append([l1[i], None])\n        elif i == 0:\n            pairs.append([None, l1[i+1]])\n        else:\n            pairs.append([l1[i], l1[i+1]])\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    n = len(l1)\n    pairs = []\n    \n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n        \n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n - 1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input, and returns a new list with all the elements that are present only in the first list.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns their difference.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns a list containing the elements that are present in the first list but not the second list.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    # Initializing an empty list to store the difference\n    diff_list = []\n    # Looping through each element of the two lists\n    for i in range(len(li1)):\n        # If the current element of list1 is not in list2, add it to the diff_list\n        if li1[i] not in li2:\n            diff_list.append(li1[i])\n    # Returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing all elements in li1 that are not also in li2.\n\n    Example usage:\n    >>> Diff([1,2,3],[2,3,4])\n    [1]\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**4\n        i += 2\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize a variable to store the sum of fourth power of odd numbers\n    odd_sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the fourth power of the current odd number and add it to the sum\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += i ** 4\n    return sum_of_fourth_power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i*i*i\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num_sum = 0\n    i = 1\n    while i <= n:\n        num_sum += i ** 4\n        i += 2\n    return num_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i**4\n    return total_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += (i**4) * (2*i-1)\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            if i == ')' and stack[-1] == '(':\n                stack.pop()\n            elif i == ']' and stack[-1] == '[':\n                stack.pop()\n            elif i == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        elif char in [')', ']', '}']:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if (char == ')' and top_char!= '(') or (char == '}' and top_char!= '{') or (char == ']' and top_char!= '['):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == 0:\n                return False\n            if top!= i:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            last_char = stack.pop()\n            if char!= last_char:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. \n    '''\n    stack = deque()\n    opening_parenthesis = {'(', '{', '['}\n    closing_parenthesis = {'}', ']', '}'}\n\n    for char in exp:\n        if char in opening_parenthesis:\n            stack.append(char)\n        elif char in closing_parenthesis:\n            if not stack:\n                return False\n            elif closing_parenthesis[char]!= stack.pop():\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    open_brackets = {'{', '[', '('}\n    close_brackets = {'}', ']', ')'}\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return \"Not balanced\"\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n\n    return 'Balanced' if not stack else \"Not balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            elif stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isalnum() or char in ['+', '-', '*', '/', '%']:\n            stack.append(char)\n        elif char in ['(', ')']:\n            if len(stack) == 0 or (len(stack) > 0 and stack[-1]!= '('):\n                return False\n            if char == '(':\n                stack.append(char)\n            else:\n                stack.pop()\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert the input string to a list of words\n    words = test_str.split()\n\n    # Loop through the words and remove words with k length\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n            i -= 1\n\n    # Join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return \" \".join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split() # Split the string into a list of words\n    result = [] # Initialize an empty list to store the words with k length removed\n    \n    for word in words:\n        if len(word)!= K: # Check if the length of the word is not equal to K\n            result.append(word) # If not, add it to the result list\n    \n    return \" \".join(result) # Join the words in the result list back into a string with spaces between them"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    \n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n            \n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    matches = re.findall(pattern, text)\n\n    if len(matches) == 0:\n        return None\n    else:\n        for match in matches:\n            position = text.find(match)\n            print(f\"{match}: {position}\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Match {matchNum}: {match.group()}\")\n            print(f\"Match start: {match.start()}\")\n            print(f\"Match end: {match.end()}\")\n            print()\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if not matches:\n        return None\n    for matchNum, match in enumerate(matches, start=1):\n        start = match.start()\n        end = match.end()\n        print(f\"Match {matchNum}: {text[start:end]}\")\n        print(f\"Start index: {start}\")\n        print(f\"End index: {end}\")\n        print(\"=\"*50)\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\ntext = \"This is a sample string. It contains several substrings.\"\npattern = r\"\\bsub\\w*\\b\"\nresult = occurance_substring(text, pattern)\nprint(result)  # Output: ('substring', 26, 35)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    matches = re.finditer(pattern, text)\n\n    if matches:\n        return [(m.start(), m.end(), m.group()) for m in matches]\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # If there are no matches, return None\n    if len(matches) == 0:\n        return None\n    \n    # Loop through each match and return the position and occurrence\n    for match in matches:\n        return match[0], matches.index(match)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Check if pattern is a regex pattern or a string\n    if isinstance(pattern, str):\n        pattern = re.compile(pattern)\n    else:\n        assert callable(pattern), \"pattern should be either a string or a regex pattern\"\n\n    # Find all the substrings of pattern in the text and return them as a list of tuples\n    matches = [match.start() for match in pattern.finditer(text)]\n\n    # Check if there is any match\n    if not matches:\n        return None\n    \n    # Find the position of the first match and return it\n    return matches[0]"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    # initialize a boolean variable to true\n    even_found = True\n\n    # loop through each index of the list\n    for i in range(len(nums)):\n\n        # if the index is odd\n        if i % 2!= 0:\n\n            # check if the element at the current index is odd\n            if nums[i] % 2!= 0:\n\n                # if it is, set even_found to false\n                even_found = False\n                break\n\n    # if even_found is still true, all the odd indices contain odd numbers\n    return even_found"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # Create an empty list to store the odd indices\n    odd_indices = []\n\n    # Loop through each number in the list\n    for i in range(len(nums)):\n        # Check if the index is odd\n        if i % 2!= 0:\n            # Check if the number at the index is odd\n            if nums[i] % 2!= 0:\n                # Add the index to the odd indices list\n                odd_indices.append(i)\n\n    # Check if the odd indices list is empty\n    if len(odd_indices) == 0:\n        # Return True if there are no odd indices in the list\n        return True\n    else:\n        # Return False if there are odd indices in the list\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            odd_count += 1\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n    - nums: a list of integers\n\n    Returns:\n    - a boolean value indicating whether all odd indices contain odd numbers or not\n    \"\"\"\n    odd_indices = [i for i, x in enumerate(nums) if i % 2!= 0]\n    for i in odd_indices:\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[j] for j in range(0, len(nums), 2) if nums[j] % 2 == 1]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set([nums[i], nums[i+1]]))!= 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)-1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i] in vowels and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0:\n            if test_str[i] in vowels:\n                count += 1\n        elif i == len(test_str) - 1:\n            if test_str[i] in vowels:\n                count += 1\n        else:\n            if (test_str[i] in vowels) and (test_str[i-1] in vowels) and (test_str[i+1] in vowels):\n                count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes in a list `arr` and returns the sum of all the unique elements in the list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Convert the set to a list to get all the elements in the list\n    unique_list = list(unique_set)\n    # Calculate the sum of all elements in the list\n    sum_unique = sum(unique_list)\n    # Return the sum of unique elements\n    return sum_unique\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Creating a set to store unique elements of the list\n    unique_set = set(arr)\n    # Finding the sum of unique elements\n    sum_unique = sum(unique_set)\n    # Returning the sum of unique and duplicate elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    '''\n    \n    # Create a dictionary to store the elements and their frequency\n    freq_dict = {}\n    \n    # Traverse through the list and update the frequency of each element in the dictionary\n    for element in arr:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    \n    # Traverse through the dictionary and calculate the sum of all non-repeated elements\n    sum_non_repeated = 0\n    for element in arr:\n        if freq_dict[element] == 1:\n            sum_non_repeated += element\n    \n    return sum_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function finds the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Iterate through the unique set and add its values to the sum\n    for num in unique_set:\n        sum += num\n        \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # loop through the list and update the count in the dictionary for each element\n    for i in arr:\n        if i in count_dict:\n            count_dict[i] += 1\n        else:\n            count_dict[i] = 1\n\n    # create a new list to store the non-repeated elements\n    result_list = []\n\n    # loop through the dictionary and add the elements with count 1 to the result list\n    for i, j in count_dict.items():\n        if j == 1:\n            result_list.append(i)\n\n    # find the sum of the non-repeated elements in the result list\n    sum_result = sum(result_list)\n\n    return sum_result"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store the elements in the list\n    unique_set = set(arr)\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    # initialize the sum to 0\n    sum_sum = 0\n    # iterate through the sorted list\n    for num in sorted_list:\n        # add the current number to the sum\n        sum_sum += num\n    # return the sum of non-repeated elements\n    return sum_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # calculate the sum of unique elements\n    unique_sum = sum(unique_set)\n\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    This function takes a list of integers as input and returns the sum of non-repeated elements.\n    '''\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Convert the set to a list and return the sum\n    return sum(unique_elements)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Initialize a set to store the unique elements\n    unique_set = set()\n\n    # Iterate through the list and add each element to the set\n    for element in arr:\n        unique_set.add(element)\n\n    # Convert the set back to a list and find the sum of its elements\n    sum_list = list(unique_set)\n    return sum(sum_list)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements in the list\n    unique_set = set(arr)\n    # find the sum of the unique elements\n    sum_unique = sum(unique_set)\n    return sum_unique\n"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list and returns a new list where consecutive duplicates are grouped into sublists.\n\n    :param lst: A list of any type.\n    :return: A list where consecutive duplicates of the list elements are grouped into sublists.\n    \"\"\"\n\n    return [list(group) for key, group in groupby(lst)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [''.join(list(group)) for key, group in groupby(list1) if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group by consecutive duplicates\n    grouped = groupby(list1, lambda x: x)\n    # pack consecutive duplicates into sublists\n    packed = []\n    for key, group in grouped:\n        if key is None:\n            continue\n        packed.extend(list(group))\n    return packed"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    grouped_lst = groupby(lst)\n\n    return [list(group) for key, group in grouped_lst if len(list(group)) > 1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # groupby() function returns a generator object where each item is a tuple of consecutive elements from the original list\n    group_obj = groupby(list1)\n\n    # packing the consecutive duplicates into sublists using list comprehension\n    pack_list = [list(group) for group in group_obj]\n\n    return pack_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            pack.append(list(group))\n        else:\n            if len(list(group)) > 1:\n                pack.append(list(group))\n    return pack"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if tuple(item) not in count:\n            count[tuple(item)] = 1\n        else:\n            count[tuple(item)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list.\n    The function should return a dictionary, where every list is turned to a tuple,\n    and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_sublists = {}\n    for sublist in list1:\n        unique_sublist = tuple(sorted(sublist))\n        if unique_sublist in unique_sublists:\n            unique_sublists[unique_sublist] += 1\n        else:\n            unique_sublists[unique_sublist] = 1\n    return unique_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Create a dictionary to store the count of each unique sublist\n    count_dict = {}\n\n    # Loop through each element in the input list\n    for i in list1:\n        # Convert the list to a tuple and check if it is already in the dictionary\n        if tuple(i) in count_dict:\n            # Increment the count of the tuple in the dictionary\n            count_dict[tuple(i)] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with a count of 1\n            count_dict[tuple(i)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    counts = {}\n    for sublist in list1:\n        if sublist not in counts:\n            counts[sublist] = 1\n        else:\n            counts[sublist] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if isinstance(item, list):\n            key = tuple(item)\n            if key not in count:\n                count[key] = 1\n            else:\n                count[key] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist = tuple(sublist)\n            if sublist in count:\n                count[sublist] += 1\n            else:\n                count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        if sublist not in sublists:\n            sublists[tuple(sublist)] = 1\n        else:\n            sublists[tuple(sublist)] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        count[tuple(i)] = count.get(tuple(i), 0) + 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    list1_tuples = [(tuple(x),) for x in list1]\n    sublist_counts = {}\n    for tup in list1_tuples:\n        if tup in sublist_counts:\n            sublist_counts[tup] += 1\n        else:\n            sublist_counts[tup] = 1\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    for i in range(1, len(test_list) + 1):\n        for combination in combinations(test_list, i):\n            combinations_list.append(tuple(combination))\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            combo = combinations(test_list[i:j+1], len(test_list[i:j+1]))\n            for comb in combo:\n                if sum(comb) == 0:\n                    print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    # Sort the given tuple list in ascending order\n    test_list.sort()\n\n    # Create a set of tuples to store the combinations\n    combinations_set = set()\n\n    # Iterate through all possible subsets of the sorted list\n    for subset in combinations(range(len(test_list)), len(test_list)):\n        # Calculate the sum of the tuples in the subset\n        subset_sum = sum(test_list[i] for i in subset)\n\n        # Add the subset and its sum to the set of combinations\n        combinations_set.add((subset, subset_sum))\n\n    # Convert the set to a list of tuples and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def sum_tuples(tuples_list):\n        '''\n        This function takes a list of tuples as input and returns a dictionary that maps each tuple to its sum.\n        '''\n        sum_dict = {}\n        for tuple1 in tuples_list:\n            sum_dict[tuple1] = tuple1[0] + tuple1[1]\n        return sum_dict\n\n    def combinations_with_sum(tuples_list, target_sum):\n        '''\n        This function takes a list of tuples as input and a target sum as input and returns a list of all the combinations of tuples that add up to the target sum.\n        '''\n        sum_dict = sum_tuples(tuples_list)\n        target_dict = {target_sum: None}\n        return list(combinations_helper(sum_dict, target_dict, target_sum))\n\n    def combinations_helper(sum_dict, target_dict, target_sum):\n        '''\n        This is a helper function that is called by the main function. It takes a sum_dict and a target_dict as input and returns a list of all the combinations of tuples that add up to the target sum.\n        '''\n        if target_sum in sum_dict:\n            yield sum_dict[target_sum]\n        for key in sum_dict:\n            if key > target_sum:\n                break\n            if key + target_sum in target_dict:\n                yield from combinations_helper(sum_dict, target_dict, target_sum - key)\n\n    tuples_list = [(1, 2), (3, 4), (5, 6)]\n    target_sum = 7\n\n    combinations_list = combinations_with_sum(tuples_list, target_sum)\n    print(\"Combinations of tuples that add up to\", target_sum, \"are:\")\n    for combination in combinations_list:\n        print(combination)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sum(test_list[i]) + sum(test_list[j]) + sum(test_list[k]) == 0:\n                    print(test_list[i], test_list[j], test_list[k])"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    for m in range(l+1, len(test_list)):\n                        print(tuple(test_list[i]), tuple(test_list[j]), tuple(test_list[k]), tuple(test_list[l]), tuple(test_list[m]))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list in ascending order\n    test_list.sort()\n    # initialize an empty list to store the combinations\n    combinations_list = []\n    # iterate through the list of tuples\n    for i in range(len(test_list)):\n        # generate all possible combinations of sums\n        for j in range(i+1, len(test_list)+1):\n            # append the combination to the list if the sum is equal to the given list\n            if sum(test_list[i:j]) == test_list[-1]:\n                combinations_list.append(tuple(test_list[i:j]))\n    # return the sorted list of combinations\n    return sorted(combinations_list)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, r=2))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            if sum(test_list[i:j]) == 0:\n                comb = tuple(sorted(test_list[i:j]))\n                result.append(comb)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    # Find all possible combinations of sums\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the combination contains tuples\n            if all(isinstance(item, tuple) for item in test_list[i:j]):\n                print(test_list[i:j])"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_divisors(n):\n    '''\n    This function takes an integer as input and returns True if the number of divisors is even, otherwise returns False.\n    '''\n    def count_divisors_helper(n):\n        '''\n        This helper function takes an integer as input and returns the count of its divisors.\n        '''\n        count = 0\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                count += 2\n        if n > 2 and n % 2 == 0:\n            count += 1\n        return count\n\n    count = count_divisors_helper(n)\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # initialize a variable divisors to 0\n    divisors = 0\n\n    # loop through all the numbers from 1 to n-1\n    for i in range(1, n+1):\n\n        # check if the number is divisible by any number from 1 to the square root of n\n        if i % math.sqrt(n) == 0:\n            divisors += 1\n\n    # return True if the count of divisors is even and False if the count of divisors is odd\n    if divisors % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Using a loop to check divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n//i:\n                divisors.append(n//i)\n\n    # Check if the count of divisors is even\n    count = len(divisors)\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Function to find the count of divisors of a number\n    def count_divisors_helper(n, count): \n        '''\n        Helper function for count_divisors()\n        '''\n        if n <= 1: \n            return count \n        else: \n            if n % 2 == 0: \n                count += 1 \n            return count_divisors_helper(n-1, count) \n\n    # Find the count of divisors of n using the helper function\n    count = count_divisors_helper(n, 0) \n\n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0: \n        print(\"The count of divisors of\", n, \"is even.\") \n    else: \n        print(\"The count of divisors of\", n, \"is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # Calculate the number of divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    # Check if the count of divisors is even\n    if len(divisors) % 2 == 0:\n        return \"The count of divisors is even\"\n    else:\n        return \"The count of divisors is odd\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n        if count > 2000:\n            return True\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n) : \n    '''\n    This function takes an integer n as input and returns True if the count of its divisors is even, else False.\n    A divisor of a positive integer n is a positive integer, less than or equal to n, that divides evenly into n. \n    For example, 15 has four divisors: 1, 3, 5, and 15.\n    '''\n    divisors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors.append(i)\n    if len(divisors) % 2 == 0 : \n        return True\n    else : \n        return False "
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 % 2 == 1:\n                sum += arr[j] - arr[i-1]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if len(arr[i]) % 2 == 1:\n            sum += sum_odd_length_subarray(arr[i])\n    return sum\n\ndef sum_odd_length_subarray(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    count = 0\n    sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            count += 1\n            sum += arr[i]\n        else:\n            count = 1\n            sum = arr[i]\n\n        if count == 1:\n            continue\n\n        if count % 2 == 0:\n            sum -= arr[i-1]\n\n        if count % 2 == 1:\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            odd_sum += arr[j]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    This function takes an array of integers as input and returns the sum of all odd length subarrays.\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all possible subarrays of odd length\n    for i in range(1, n+1):\n        # Check if the subarray is odd-length\n        if i % 2!= 0:\n            # Calculate the sum of the subarray\n            sub_sum = sum_of_subarray(arr, i)\n            # Add the subarray sum to the overall sum\n            sum += sub_sum\n    \n    return sum\n\ndef sum_of_subarray(arr, k):\n    '''\n    This function takes an array of integers and an odd integer k as input and returns the sum of all subarrays of length k.\n    '''\n    n = len(arr)\n    sum = 0\n    \n    # Loop through all possible starting indices\n    for i in range(n-k+1):\n        # Calculate the sum of the subarray\n        sub_sum = sum(arr[i:i+k])\n        # Add the subarray sum to the overall sum\n        sum += sub_sum\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    # initialize the sum variable\n    sum = 0\n    \n    # loop through each array element\n    for i in range(len(arr)):\n        # check if the current element is odd length\n        if i % 2!= 0:\n            # initialize the current subarray sum variable\n            current_sum = 0\n            \n            # loop through each element in the current subarray\n            for j in range(i, len(arr)):\n                # add each element to the current subarray sum\n                current_sum += arr[j]\n            \n            # add the current subarray sum to the overall sum\n            sum += current_sum\n    \n    # return the overall sum\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        temp = 0\n        for j in range(i, n):\n            temp += arr[j]\n            result += temp\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum of all subarray sums\n    subarray_sum = 0\n    # Loop through the array and add up the odd length subarrays\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            subarray_sum += arr[j]\n    # Return the sum of all subarray sums\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Iterate through the array\n    for i in range(len(arr)):\n        # Find the sum of all odd length subarrays\n        for j in range(i, len(arr)):\n            if j-i+1 % 2 == 1:\n                sum += arr[j]\n                \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    subarray_sum = 0\n    for i in range(len(arr)):\n        if i == 0 or i % 2 == 0:\n            subarray_sum += arr[i]\n        else:\n            subarray_sum -= arr[i-1]\n    return subarray_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert the rgb values to the range of 0 to 255\n    r, g, b = r/255, g/255, b/255\n    # Find the maximum and minimum values of r, g, and b\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Find the difference between the maximum and minimum values\n    diff = max_val - min_val\n    # Find the hue, saturation, and value of the color\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        s = diff / max_val\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n        h = h % 6\n        if h < 0:\n            h += 6\n    # Convert the hsv values to the desired range of 0 to 1\n    h, s, v = h/6, s, max_val\n    hsv = (h, s, v)\n    return hsv"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert R, G, and B values to float\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find minimum and maximum values of R, G, and B\n    min_value = min(r, g, b)\n    max_value = max(r, g, b)\n\n    # Calculate difference between max and min values\n    delta = max_value - min_value\n\n    # Calculate saturation and value for HSV color model\n    if max_value == 0.0:\n        h = 0.0\n        s = 0.0\n    else:\n        if delta == 0.0:\n            h = 0.0\n        elif r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2.0 + (b - r) / delta\n        else:\n            h = 4.0 + (r - g) / delta\n\n        h *= 60.0\n        if h < 0.0:\n            h += 360.0\n\n        s = delta / max_value\n\n    # Return HSV color model values in a tuple\n    return (int(h), int(s * 255), int(v * 255))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in the red, green and blue values of an RGB color and returns the HSV values of that color.\n    \n    The Hue (H), Saturation (S) and Value (V) values are calculated based on the given RGB color.\n    \n    The Hue value is calculated by taking the angle in degrees between the red and blue axis of the color,\n    and then adding or subtracting that angle from 360 degrees to obtain the corresponding hue value.\n    \n    The Saturation value is calculated by taking the average of the two largest and two smallest RGB values,\n    and then dividing that average by the maximum value of the RGB values to obtain the saturation value.\n    \n    The Value value is simply the average of the three RGB values.\n    \n    The function returns a tuple containing the Hue value, Saturation value and Value value.\n    '''\n    \n    # Calculate the maximum and minimum RGB values\n    max_rgb = max(r, g, b)\n    min_rgb = min(r, g, b)\n    \n    # Calculate the range of RGB values\n    range_rgb = max_rgb - min_rgb\n    \n    # Calculate the Saturation value\n    if max_rgb == min_rgb:\n        saturation = 0\n    else:\n        saturation = range_rgb / max_rgb\n    \n    # Calculate the Hue value\n    hue = None\n    if max_rgb == r:\n        hue = ((g - b) / range_rgb) % 6\n    elif max_rgb == g:\n        hue = (b - r) / range_rgb + 2\n    else:\n        hue = (r - g) / range_rgb + 4\n    \n    # Convert the Hue value to degrees\n    if hue < 0:\n        hue += 6\n    \n    # Return the HSV values as a tuple\n    return (hue, saturation, (max_rgb + min_rgb) / 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    if max_value!= 0:\n        if max_value == r:\n            h = (g - b) / delta\n        elif max_value == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_value\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: Red component of the color (0 to 255).\n    :param g: Green component of the color (0 to 255).\n    :param b: Blue component of the color (0 to 255).\n    :return: Hue, Saturation, Value components of the color (0 to 360, 0 to 1, 0 to 1).\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    hue = 0\n    saturation = 0\n    value = max_value\n    if delta == 0:\n        hue = 0\n        saturation = 0\n    elif max_value == r:\n        hue = 60 * (((g - b) / delta) % 6)\n    elif max_value == g:\n        hue = 60 * (((b - r) / delta) + 2)\n    elif max_value == b:\n        hue = 60 * (((r - g) / delta) + 4)\n    if delta!= 0:\n        saturation = delta / max_value\n    if value == 0:\n        hue = 0\n        saturation = 0\n    if saturation == 0:\n        value = 0\n    else:\n        value = max_value\n    hue = int(hue)\n    saturation = round(saturation, 2)\n    value = round(value, 2)\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Convert r,g,b values to float values\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n\n    # Find min and max values\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n\n    # Find difference between max and min values\n    diff = max_val - min_val\n\n    # Calculate hue, saturation, value\n    if max_val == min_val:\n        hue = 0.0\n    elif max_val == r:\n        hue = (g - b) / diff\n    elif max_val == g:\n        hue = 2.0 + (b - r) / diff\n    else:\n        hue = 4.0 + (r - g) / diff\n\n    hue = hue % 6.0\n\n    if hue < 0:\n        hue += 6.0\n\n    saturation = 0.0\n    if max_val!= 0.0:\n        saturation = diff / max_val\n\n    value = max_val\n\n    # Return hsv values as a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Converts rgb color to hsv color.\n    \"\"\"\n    # Convert to float values\n    r, g, b = map(float, (r, g, b))\n\n    # Find the maximum and minimum values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Calculate the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the HSV values\n    if max_value == min_value:\n        h = 0\n    elif max_value == r:\n        h = ((g - b) / delta) % 6\n    elif max_value == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = round(h * 60, 2)\n\n    # Calculate the S and V values\n    if max_value == 0:\n        s = 0\n    else:\n        s = delta / max_value\n\n    v = max_value\n\n    # Return the HSV values as a tuple\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Get the maximum and minimum values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Calculate the difference between maximum and minimum values\n    delta = max_val - min_val\n\n    # Calculate the saturation\n    if max_val == min_val:\n        hsv_saturation = 0\n    else:\n        hsv_saturation = delta / max_val\n\n    # Calculate the hue\n    if max_val == r:\n        hsv_hue = (g - b) / delta\n    elif max_val == g:\n        hsv_hue = 2 + (b - r) / delta\n    else:\n        hsv_hue = 4 + (r - g) / delta\n\n    # Convert the hue from degrees to radians\n    hsv_hue *= 60\n\n    # Check if the hue value is greater than 360 degrees\n    if hsv_hue > 360:\n        hsv_hue -= 360\n\n    # Calculate the value\n    hsv_value = max_val\n\n    # Return the hsv values as a tuple\n    return (hsv_hue, hsv_saturation, hsv_value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    diff = max_val - min_val\n    \n    h = 0\n    s = 0\n    v = max_val / 255\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / diff\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n    elif max_val == b:\n        h = 4 + (r - g) / diff\n    \n    if diff == 0:\n        s = 0\n    else:\n        s = diff / (max_val + min_val)\n    \n    if s == 0:\n        h = 0\n        s = 0\n        v = max_val\n        \n    if h < 0:\n        h += 6\n    \n    h *= 60\n    s *= 100\n    v *= 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    This function takes in an RGB color tuple and returns the corresponding HSV color tuple.\n    \n    The HSV color model represents colors in the Hue, Saturation, and Value (HSV) color space. \n    It has three components: Hue (also known as the color wheel), Saturation, and Value (also known as the brightness).\n    \n    Hue is the color's position on the color wheel, from 0 to 360 degrees.\n    Saturation is the amount of color in the color, from 0 to 100%.\n    Value is the brightness of the color, from 0 to 100%.\n    \n    A color in the HSV color space can be represented by the following tuple: (H, S, V).\n    \n    Example usage:\n    >>> rgb_to_hsv(255, 0, 0)\n    (360, 100, 100)\n    '''\n    \n    # Convert RGB color to RGB color space\n    R, G, B = r/255, g/255, b/255\n    \n    # Convert RGB color space to HSV color space\n    max_rgb = max(R, G, B)\n    min_rgb = min(R, G, B)\n    delta_rgb = max_rgb - min_rgb\n    if max_rgb == min_rgb:\n        H = 0\n    elif R == max_rgb:\n        H = (G - B) / delta_rgb\n    elif G == max_rgb:\n        H = 2 + (B - R) / delta_rgb\n    elif B == max_rgb:\n        H = 4 + (R - G) / delta_rgb\n    H *= 60\n    if H < 0:\n        H += 360\n    \n    V = max_rgb * 100\n    \n    if max_rgb == 0:\n        S = 0\n    else:\n        delta_max_min = max_rgb - min_rgb\n        S = (delta_max_min / max_rgb) * 100\n    \n    return (H, S, V)"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            if even_count == 1:\n                product *= num\n        else:\n            odd_count += 1\n            if odd_count == 1:\n                product *= num\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count == 0 or odd_count == 0:\n        return 0\n    return odd_count * even_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            result *= num\n            even_count = 0\n            odd_count = 0\n    \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        \n        if even_count > 0 and odd_count > 0:\n            product *= num\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count > 0 and odd_count > 0:\n            break\n    if even_count > 0 and odd_count > 0:\n        return list1[0] * list1[1]\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count > 0:\n        return even_product\n    elif odd_count > 0:\n        return odd_product\n    else:\n        return None"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even * odd"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if count == 2:\n                product *= num\n                count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number in the list.\n    \"\"\"\n    even = 1\n    odd = 1\n    product = 1\n\n    # Iterate through the list\n    for num in lst:\n        if num % 2 == 0:\n            even = num\n        else:\n            odd = num\n\n    # Calculate the product of even and odd numbers\n    product = even * odd\n\n    # Return the product\n    return product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_list = []\n    for char in test_str:\n        if char.isdigit():\n            str_list.append(int(char))\n        else:\n            str_list.append(str(char))\n    return tuple(str_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def str_to_int(str_num):\n        '''\n        Convert string to integer.\n        '''\n        if str_num.isdigit():\n            return int(str_num)\n        else:\n            return str_num\n    \n    def str_to_tuple(str_num):\n        '''\n        Convert string to tuple.\n        '''\n        return tuple(str_to_int(str) for str in str_num.split(','))\n    \n    try:\n        return str_to_tuple(test_str)\n    except ValueError:\n        print('Invalid input.')"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of strings\n    string_list = test_str.split(',')\n    \n    # Create empty integer list\n    int_list = []\n    \n    # Iterate through string list and convert each string to integer and append to integer list\n    for string in string_list:\n        try:\n            int_list.append(int(string))\n        except ValueError:\n            print(\"Error: Invalid integer value:\", string)\n    \n    # Return integer list as tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n    \"\"\"\n    try:\n        # Check if the input is a string that starts and ends with parentheses\n        if not test_str.startswith('(') or not test_str.endswith(')'):\n            raise ValueError('Input must be a string that starts and ends with parentheses')\n        # Convert the string to a tuple of strings\n        test_tuple = tuple(test_str[1:-1].split(','))\n        # Convert each string in the tuple to an integer\n        test_tuple = tuple(int(s.strip()) for s in test_tuple)\n        return test_tuple\n    except ValueError as e:\n        print(e)\n        return None"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of words\n    words = test_str.split()\n    # Initialize an empty list to store the integer tuples\n    int_tuples = []\n    # Loop through the list of words\n    for word in words:\n        # Try to convert the word to an integer\n        try:\n            # If the conversion is successful, add the integer tuple to the list\n            int_tuples.append((int(word)))\n        except ValueError:\n            # If the conversion is unsuccessful, do nothing\n            pass\n    # Return the integer tuple list\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string by comma and space\n    test_list = test_str.split(',')\n    \n    # Convert each element in the list to integer\n    test_list = [int(x) for x in test_list]\n    \n    # Convert the list to tuple\n    test_tup = tuple(test_list)\n    \n    return test_tup"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty integer tuple\n    int_tuple = ()\n    \n    # Loop through each word\n    for word in words:\n        # Check if the word is a number\n        if word.isdigit():\n            # Convert the word to an integer and append it to the tuple\n            int_tuple += (int(word),)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert the string to a list of strings\n    test_str_list = list(test_str)\n\n    # Initialize a new list to store the integer tuples\n    int_list = []\n\n    # Iterate through the list and convert each string to an integer\n    for item in test_str_list:\n        try:\n            # Convert the string to an integer and append it to the list\n            int_list.append(int(item))\n        except ValueError:\n            # If the string cannot be converted to an integer, ignore it\n            continue\n\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and space\n    parts = test_str.split(',')\n    # Convert each part to an integer\n    return tuple([int(p.strip()) for p in parts])"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] >= x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    elif a[i-1] < x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Use the bisect library to search for the insertion point\n    idx = bisect.bisect_right(a, x)\n    # If the value is already present in the list, return its index\n    if idx < len(a) and a[idx] == x:\n        return idx\n    # Otherwise, return the index where the value should be inserted\n    else:\n        return idx + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_right(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    left = 0\n    right = len(a) - 1\n    result = bisect.bisect_right(a, x)\n    return result if result > 0 and a[result - 1] < x else result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'ab{3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'a(b){3}')\n    matches = pattern.findall(text)\n    if len(matches) > 0:\n        print(\"There are\", len(matches), \"matches in the text.\")\n        for match in matches:\n            print(match)\n    else:\n        print(\"No matches found in the text.\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\bb\\bb\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\w{2}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*?b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return \"Not found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return 'Match found!'\n    else:\n        return 'No match found.'"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a(b{2})'\n    match = re.search(pattern, text)\n    if match:\n        print(f'Match found: {match.group()}')\n    else:\n        print('No match found')"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b.*b.*b.*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a tuple and concatenate it with the string\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for item in test_list:\n        new_list.append(str(item))\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(str(test_str) + str(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # converting list to tuple and adding the string to the tuple\n    new_tuple = tuple(test_list) + (test_str,)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the given list to a tuple\n    test_tuple = tuple(test_list)\n    # Concatenate the given string with the tuple elements\n    new_tuple_str = test_str.join(str(elem) for elem in test_tuple)\n    # Convert the concatenated string to a tuple\n    new_tuple = tuple(new_tuple_str)\n    # Return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the test_list to a tuple\n    new_list = tuple(test_list)\n    # Join the elements of the test_str with the elements of the new_list\n    new_tuple = tuple(test_str.join(str(x) for x in new_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): List of strings to concatenate with the test_str.\n    test_str (str): String to concatenate with the list.\n\n    Returns:\n    tuple: New tuple with the concatenated list and test_str.\n    '''\n    concatenated_list = test_list + [test_str]\n    return tuple(concatenated_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the list to a string and concatenate it with the string\n    concatenated_str = str(test_list) + test_str\n    # Convert the concatenated string back to a tuple\n    new_tuple = tuple(concatenated_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # create a list from the string\n    str_list = list(test_str)\n    # create a new tuple with the string list\n    new_tuple = tuple(str_list)\n    # append the list from the list to the new tuple\n    new_tuple += tuple(test_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(len(nums)):\n                if j == i:\n                    continue\n                if nums[j] % 2 == 0:\n                    count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_count = 0\n            for j in range(i, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    even_count += 1\n                if even_count > 0:\n                    return True\n            if even_count == 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Iterate over the list of numbers and check if the even index is even\n    for i in range(len(nums)):\n        if i % 2 == 0 and i + 1 < len(nums) and nums[i] % 2 == 0 and nums[i+1] % 2 == 0:\n            print(\"Even index {} contains even numbers: {} and {}\".format(i, nums[i], nums[i+1]))\n        else:\n            print(\"Even index {} does not contain even numbers\".format(i))"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 1:\n            return False\n    \n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(x % 2 == 0 for x in nums[i:i+2]):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                count += 1\n    return count == len(nums)//2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_indices = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            even_indices.append(i)\n    for index in even_indices:\n        if nums[index] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested_helper(tup):\n        if isinstance(tup, tuple):\n            return tuple(remove_nested_helper(item) for item in tup)\n        else:\n            return tup\n\n    return remove_nested_helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for item in test_tup if type(item)!= tuple]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    def helper(tup):\n        new_tup = []\n        for item in tup:\n            if type(item) == tuple:\n                new_tup.extend(helper(item))\n            else:\n                new_tup.append(item)\n        return new_tup\n\n    return helper(test_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # create an empty list to store the non-nested tuples\n    non_nested_list = []\n    # loop through each tuple in the test_tup\n    for tup in test_tup:\n        # if the tuple is not a tuple, add it to the non_nested_list\n        if not isinstance(tup, tuple):\n            non_nested_list.append(tup)\n        # if the tuple is a tuple, loop through each item in the tuple\n        else:\n            for item in tup:\n                # if the item is a tuple, recursively call the function on it\n                if isinstance(item, tuple):\n                    remove_nested(item)\n                # if the item is not a tuple, add it to the non_nested_list\n                else:\n                    non_nested_list.append(item)\n    return non_nested_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            flat_list.extend(remove_nested(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flattened_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flattened_tup.append(item)\n        else:\n            flattened_tup.extend(item)\n    return flattened_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if isinstance(test_tup, tuple):\n        return [x for sub_tup in test_tup for x in sub_tup]\n    else:\n        return [test_tup]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            new_tup += remove_nested(elem)\n        else:\n            new_tup.append(elem)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(remove_nested(item))\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_tup.extend(item)\n        else:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list: \n        if type(item) == list: \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for sublist in input_list:\n        if type(sublist) == list:\n            count += 1\n        elif type(sublist) == int or type(sublist) == str or type(sublist) == bool:\n            continue\n        else:\n            print(\"Error: Invalid input type.\")\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initializing the left and right pointers of the array\n    left = 0\n    right = len(arr) - 1\n\n    # while the left pointer is less than the right pointer\n    while left < right:\n        # calculating the mid index\n        mid = (left + right) // 2\n\n        # if the element at mid is greater than x,\n        # then the element is in the left half of the array\n        if arr[mid] > x:\n            right = mid\n        # if the element at mid is less than x,\n        # then the element is in the right half of the array\n        else:\n            left = mid + 1\n\n    # if the element was found in the left half of the array\n    if arr[left] == x:\n        return left\n    # if the element was found in the right half of the array\n    else:\n        return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i] < x:\n        i += 1\n    return i-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element as input and returns the last position of the element in the array.\n    If the element is not present in the array, it returns -1.\n    \"\"\"\n    i = 0\n    j = len(arr) - 1\n\n    while i <= j:\n        mid = (i + j) // 2\n\n        if arr[mid] == x:\n            j = mid - 1\n        elif arr[mid] < x:\n            i = mid + 1\n        else:\n            j = mid - 1\n\n    return j if j >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr,x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    if len(arr) == 0:\n        return -1\n    elif arr[0] == x:\n        return 0\n    else:\n        i = 0\n        while i < len(arr) and arr[i]!= x:\n            i += 1\n        return i-1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in two arguments:\n    arr: the sorted array.\n    x: the element to find the last position of.\n    \"\"\"\n    # Initialize the left and right pointers to the first and last indices in the array, respectively.\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the last position to -1.\n    last_position = -1\n\n    # Loop through the array while the left pointer is less than or equal to the right pointer.\n    while left <= right:\n        # Compute the middle index.\n        middle = (left + right) // 2\n\n        # If the middle element is equal to the target element, update the last position and move the pointers accordingly.\n        if arr[middle] == x:\n            last_position = middle\n            right = middle - 1\n        # If the middle element is less than the target element, move the right pointer to the middle index.\n        elif arr[middle] < x:\n            left = middle + 1\n        # If the middle element is greater than the target element, move the left pointer to the middle index.\n        else:\n            right = middle - 1\n\n    # Return the last position of the target element.\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): sorted array\n        x (int): element to find\n\n    Returns:\n        int: last position of x in arr\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            return mid\n        \n        elif arr[mid] < x:\n            left = mid + 1\n            \n        else:\n            right = mid - 1\n            \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            # mid is the last occurrence of x\n            # search to the left for the first occurrence of x\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid - 1\n\n        elif arr[mid] < x:\n            left = mid + 1\n\n        else:  # arr[mid] > x\n            right = mid - 1\n\n    # x not found in arr\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Initialize two pointers, left and right, to the beginning of the array\n    left = 0\n    right = len(arr) - 1\n\n    # While left pointer is less than or equal to right pointer\n    while left <= right:\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the element at the middle index is equal to x\n        if arr[mid] == x:\n            # Update the last position\n            last_position = mid\n\n            # If the middle element is on the right of x, then update the left pointer\n            if mid < right and arr[mid + 1] == x:\n                left = mid + 1\n            else:\n                break\n        elif arr[mid] < x:\n            # If the element at the middle index is greater than x, then update the left pointer\n            left = mid + 1\n        else:\n            # If the element at the middle index is less than x, then update the right pointer\n            right = mid - 1\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: an array of integers and an integer x.\n    It returns the index of the last occurrence of x in the array.\n\n    If x is not present in the array, the function will return -1.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left if left!= len(arr) else -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)[^\\s]*b(?=\\s|$)'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=[ab])\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?i).*?(a)(.*?)(b).*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\""
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'(?<=a)\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'\\ba.*?b\\b'\n    result = re.findall(pattern, text)\n\n    return result"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # match pattern: an 'a' followed by anything, ending in 'b'\n    pattern = re.compile(r'a[^b]*b')\n    # find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # return the first match if found, or an empty string otherwise\n    return matches[0] if matches else ''"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dictionary):\n    '''\n    This function takes a dictionary as an input and returns the sum of all its values.\n    '''\n    sum_of_values = 0\n    for value in dictionary.values():\n        sum_of_values += value\n    return sum_of_values"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = int(input(\"Enter lower limit: \"))\n    r = int(input(\"Enter upper limit: \"))\n    if l % 2 == 0:\n        l += 1\n    if r % 2 == 0:\n        r -= 1\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    print(\"Sum of odd numbers between\", l, \"and\", r, \"is\", sum)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(n, 0, -2):\n        if i % 2!= 0:\n            s += i\n    return s"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l = 1\n    r = n\n    total = 0\n\n    while l <= r:\n        if l % 2!= 0:\n            total += l\n        l += 1\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Initialize a variable to store the sum of all odd natural numbers\n    total_sum = 0\n\n    # Iterate through the range of natural numbers from l to r\n    for i in range(n):\n        # Check if the current number is odd\n        if i % 2!= 0:\n            # If the current number is odd, add it to the total sum\n            total_sum += i\n\n    # Return the total sum of all odd natural numbers\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes in two parameters:\n    l: the lower limit of the range of natural numbers to sum.\n    r: the upper limit of the range of natural numbers to sum.\n    \"\"\"\n    # initialize a variable to hold the sum of odd natural numbers\n    total = 0\n    \n    # iterate through each natural number between l and r\n    for i in range(l, r+1):\n        # if the number is odd, add it to the total\n        if i % 2!= 0:\n            total += i\n            \n    # return the total sum of odd natural numbers\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    This function takes in an integer n and returns the sum of all odd natural numbers within the range [1, n].\n    '''\n    total_sum = 0\n    for i in range(1, n+1, 2):\n        total_sum += i\n    return total_sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of all odd natural numbers within the range 1 to n.\n    \"\"\"\n    if n < 1:\n        return 0\n    else:\n        return sum_odd(n-2) + n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    This function takes an array as input and returns the sum of its elements.\n    '''\n    sum_arr = 0\n    for num in arr:\n        sum_arr += num\n    return sum_arr"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a Python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert n to binary and get the length of binary string\n    binary_str = bin(n)[2:]\n    length = len(binary_str)\n    \n    # Calculate the number of bits to rotate\n    rotate_bits = (d % length)\n    \n    # Extract the last rotate_bits bits from the binary string\n    rotated_bits = binary_str[-rotate_bits:]\n    \n    # Extract the first (length - rotate_bits) bits from the binary string\n    original_bits = binary_str[:-rotate_bits]\n    \n    # Convert the rotated bits to decimal and concatenate with the original bits\n    rotated_num = int(rotated_bits + original_bits, 2)\n    \n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # convert the given number to binary string\n    binary = bin(n)[2:]\n    # rotate the binary string by d bits\n    rotated = binary[-d:] + binary[:-d]\n    # convert the rotated binary string to decimal number\n    rotated_num = int(rotated, 2)\n    # return the rotated number\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Calculate the number of bits to shift\n    num_bits = 32\n\n    # Calculate the number of bits to rotate\n    num_rotations = d % num_bits\n\n    # Create a mask to shift off the rightmost bits\n    mask = (1 << num_rotations) - 1\n\n    # Shift the bits to the left\n    result = (n << num_rotations) & mask | (n >> (num_bits - num_rotations)) & ((1 << num_bits) - 1)\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # calculate the number of bits to rotate\n    num_bits = len(bin(n)[2:])\n    # rotate the bits\n    n = (n << d) | (n >> (num_bits - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = (1 << d) - 1\n    shifted = (n << d) & mask\n    rotated = n >> (32 - d)\n    return rotated | shifted"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF\n    n = n & mask\n    for i in range(d):\n        n = (n << 1) | ((n & 0x80000000) >> 31)\n    return n & mask"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Reverse the binary representation of the given number\n    n_bits = bin(n).replace(\"0b\", \"\")\n    n_bits_reversed = n_bits[::-1]\n\n    # Calculate the number of bits to rotate left\n    num_bits_to_rotate = d % len(n_bits_reversed)\n\n    # Reverse the first num_bits_to_rotate bits of the reversed binary representation of the number\n    first_num_bits = n_bits_reversed[:num_bits_to_rotate]\n    second_num_bits = n_bits_reversed[num_bits_to_rotate:]\n    n_bits_reversed = second_num_bits + first_num_bits\n\n    # Convert the reversed binary representation back to an integer\n    n_bits_reversed = int(n_bits_reversed, 2)\n\n    return n_bits_reversed"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Convert the given number to binary string\n    bin_str = bin(n)[2:].zfill(32)\n\n    # Calculate the position of the last bit\n    pos = bin_str.index('1')\n\n    # Calculate the number of bits to rotate\n    rot_bits = d % pos\n\n    # Calculate the number of remaining bits to rotate\n    rot_rem = pos - rot_bits\n\n    # Rotate the bits to the left\n    rot_str = bin_str[:rot_bits] + bin_str[rot_bits:pos] + bin_str[pos:]\n\n    # Convert the rotated bits back to decimal\n    rot_dec = int(rot_str, 2)\n\n    # Return the rotated decimal number\n    return rot_dec"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary = bin(n)[2:]\n    \n    # Pad the binary with zeros to d bits\n    padded = '0' * d + binary\n    \n    # Reverse the padded binary string\n    reversed = padded[::-1]\n    \n    # Convert the reversed binary string back to an integer\n    rotated = int(reversed, 2)\n    \n    return rotated"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expression to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n    \"\"\"\n    # Remove all spaces and tabs from the given string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function removes all whitespaces from a given text string.\n\n    Parameters:\n    text (str): A string that contains whitespaces.\n\n    Returns:\n    str: A string with all whitespaces removed.\n    \"\"\"\n    # Replace all whitespaces with an empty string\n    text = re.sub(r'\\s+', '', text)\n    \n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function removes all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    elif x!= y!= z:\n        count += 1\n    else:\n        print(\"Invalid input\")\n        return\n    \n    print(\"There are\", count, \"equal numbers from the given set\")\n"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == j == k:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    # initialize a counter variable to keep track of the number of equal numbers\n    count = 0\n\n    # iterate through each integer from x to z\n    for i in range(x, z + 1):\n        # check if the integer is equal to x, y, or z\n        if i == x or i == y or i == z:\n            # increment the counter if the integer is equal to x, y, or z\n            count += 1\n\n    # return the count of equal numbers\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or x == z or y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n    \n    # Check if all three integers are equal\n    if x == y and y == z:\n        count += 1\n    elif x == y or y == z or x == z:\n        count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(max(x, y, z), min(x, y, z) - 1, -1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        for j in range(y, z+1):\n            if i == j or i == z or j == z:\n                count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z or x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes an array as input and returns the number of rotations required to generate a sorted array.\n\n    Args:\n    arr: list of integers\n\n    Returns:\n    int: number of rotations required to generate a sorted array.\n\n    \"\"\"\n    n = len(arr)\n    # checking if array is already sorted\n    if n == 0 or n == 1:\n        return 0\n\n    # If the array is already sorted, then we don't need to rotate it\n    if arr == sorted(arr):\n        return 0\n\n    # Counting number of inversions in the array\n    left = 0\n    right = n - 1\n    count = 0\n    while left < right:\n        # Counting inversions in the left half of the array\n        i = left\n        j = right\n        while i < j:\n            if arr[i] > arr[j]:\n                count += j - i\n                i += 1\n            else:\n                j -= 1\n        # Shifting the right half of the array to the left\n        left += 1\n        right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # check if array is already sorted\n    if n == 1 or arr[0] <= arr[-1]:\n        return 0\n    \n    # find the smallest and largest elements in the array\n    min_elem = min(arr)\n    max_elem = max(arr)\n    \n    # check if array is already sorted in descending order\n    if max_elem >= min_elem:\n        return 0\n    \n    # count the number of rotations required to sort the array in ascending order\n    count = 0\n    for i in range(n):\n        if arr[i] >= arr[i+1]:\n            count += 1\n        else:\n            break\n    \n    # if the array is not already sorted in ascending order, reverse it\n    if count % 2!= 0:\n        arr = arr[::-1]\n        count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse the array from left to right and check for rotations\n    for i in range(n-1):\n        # If current element is greater than the next element\n        if arr[i] > arr[i+1]:\n            # Initialize a variable to count the number of rotations\n            count = 0\n            # Traverse the array from i+1 to n-1 and check for rotations\n            for j in range(i+1, n):\n                # If current element is greater than the next element\n                if arr[i] > arr[j]:\n                    count += 1\n            return count\n    # If no rotations are found, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize two pointers, i and j, one starting from the end of the array and the other starting from the beginning of the array\n    i = n-1\n    j = 0\n    # Initialize a variable to keep track of the count of rotations\n    count = 0\n    # Loop until the pointers meet in the middle of the array\n    while i >= j:\n        # If the i-th element is greater than the j-th element, then increment i\n        if arr[i] > arr[j]:\n            i -= 1\n            count += 1\n        # If the i-th element is less than the j-th element, then increment j\n        else:\n            j += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] < arr[i+1]:\n            return count\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # check if array is sorted in ascending order\n    if sorted(arr) == arr:\n        return 0\n\n    # if array is not sorted in ascending order, count rotations required\n    count = 0\n    for i in range(n):\n        j = i + 1\n        while j < n and arr[j] < arr[i]:\n            j += 1\n        count += j - i - 1\n        i = j - 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n//2):\n        if arr[i] > arr[n-1-i]:\n            return 1\n        elif arr[i] < arr[n-1-i]:\n            return 2\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    left = 0\n    right = n-1\n    count = 0\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        # If arr[mid] is greater than arr[left], then we need to rotate right\n        if arr[mid] > arr[left]:\n            count += right - mid\n            left = mid + 1\n        else:\n            # If arr[mid] is less than arr[right], then we need to rotate left\n            count += mid - left\n            right = mid\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    i = 0\n    j = n-1\n\n    while i < j:\n        if arr[i] <= arr[j]:\n            i += 1\n        else:\n            j -= 1\n        \n        if i < j:\n            count += 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n\n    # Initialize the count of rotations to zero\n    count = 0\n\n    # Traverse the array from the second element to the last element\n    for i in range(1, len(arr)):\n\n        # Check if the current element is greater than the next element\n        if arr[i] > arr[i - 1]:\n\n            # If it is, check if the current element is greater than the next to the last element\n            if arr[i] > arr[i - 2]:\n\n                # If it is, increment the count of rotations\n                count += 1\n\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Base cases\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n\n    # Find the square root of n using binary search\n    left, right = 0, n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == n:\n            return True\n        elif mid * mid < n:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If we reach here, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    \"\"\"\n    # check if n is a positive integer\n    if type(n)!= int or n < 1:\n        return False\n    # use the square root algorithm to check if n is a perfect square\n    sqrt_n = int(n ** 0.5)\n    if sqrt_n ** 2!= n:\n        return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check for special cases\n    if n < 0:\n        return False\n    elif n == 0 or n == 1:\n        return True\n    else:\n        # use the binary search algorithm to find a root of n\n        left, right = 0, n\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == n:\n                return True\n            elif mid * mid < n:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function checks whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    else:\n        for i in range(int(n**0.5)+1):\n            if n % i**2 == 0:\n                return True\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square, False otherwise.\n    \"\"\"\n    # Calculate the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is an integer\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 0:\n        return False\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid*mid == n:\n            return True\n        elif mid*mid < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n <= 1:\n        return True\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # check if n is a positive integer\n    if n <= 0 or not isinstance(n, int):\n        return False\n    \n    # check if n is a perfect square\n    for i in range(int(n**0.5) + 1):\n        if n - i * i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    \n    # Check if the number is less than or equal to 1\n    if n <= 1:\n        return False\n    \n    # Calculate the square root of the number\n    sqrt_n = math.sqrt(n)\n    \n    # Check if the square root is an integer\n    if sqrt_n == math.floor(sqrt_n):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # Initialize the square root of the number\n    sqrt_n = int(n ** 0.5)\n\n    # Loop until the square root is less than the given number\n    while sqrt_n ** 2!= n:\n        # If the square root is greater than the given number, decrease it\n        if sqrt_n ** 2 > n:\n            sqrt_n -= 1\n        # If the square root is less than the given number, increase it\n        else:\n            sqrt_n += 1\n    \n    # If the square root is equal to the given number, then it is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes a list of integers as input and returns True if the product of numbers in the list is even and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = None\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            for k in range(i+1, len(lists)):\n                if k!= i:\n                    current_sum += lists[k][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        total_sum = sum(lst)\n        if total_sum > max_sum:\n            max_sum = total_sum\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_sum_list = None\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            sub_list = [lists[i][k] for k in range(len(lists[i])) if k!= j]\n            sub_list.append(lists[i][j])\n            sub_sum = sum(sub_list)\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n                max_sum_list = sub_list\n\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # initialize a variable to store the maximum sum\n    max_sum = -10000\n    \n    # loop through each list in the input list of lists\n    for i in range(len(lists)):\n        # initialize a variable to store the current sum of elements\n        current_sum = 0\n        \n        # loop through each element in the current list\n        for j in range(len(lists[i])):\n            # add the current element to the current sum\n            current_sum += lists[i][j]\n            \n            # check if the current sum is greater than the maximum sum so far\n            if current_sum > max_sum:\n                # update the maximum sum\n                max_sum = current_sum\n                \n                # initialize a variable to store the list with the maximum sum\n                max_list = lists[i]\n                \n        # update the lists with the current list with the maximum sum\n        lists[i] = max_list\n        \n    # return the list with the maximum sum\n    return lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lists[i]\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables\n    current_sum = max_sum = 0\n    max_sum_list = []\n\n    # Loop through each list in the list of lists\n    for lst in lists:\n        # Loop through each element in the list\n        for elem in lst:\n            # Add the element to the current sum\n            current_sum += elem\n            # If the current sum is greater than the maximum sum, update the maximum sum and the corresponding list\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_list = lst\n    \n    # Return the list with the highest sum\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = []\n\n    for sublist in lists:\n        sum_sublist = sum(sublist)\n        if sum_sublist > max_sum:\n            max_sum = sum_sublist\n            max_lists = sublist\n\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    # initialize variables\n    current_max = 0\n    max_sum = 0\n    max_lists = []\n    for lst in lists:\n        # calculate sum of lst\n        current_sum = sum(lst)\n        # check if current sum is higher than max sum\n        if current_sum > max_sum:\n            # if so, update max sum and max lists\n            max_sum = current_sum\n            max_lists = [lst]\n        elif current_sum == max_sum:\n            # if sum is equal to max sum, add lst to current max lists\n            max_lists.append(lst)\n    # return max sum and list\n    return max_sum, max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    \n    for list in lists:\n        sum_list = sum(list)\n        if sum_list > max_sum:\n            max_sum = sum_list\n            max_list = list\n    \n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_start = 0\n    run_length = 0\n    max_run = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            run_length += 1\n        else:\n            run_length = 0\n\n        if run_length > max_run:\n            max_run = run_length\n            run_start = i - max_run + 1\n\n    return max_run, run_start"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    curr_run = 0\n    prev_char =''\n\n    for char in test_str:\n        if char.isupper():\n            curr_run += 1\n        else:\n            if curr_run > max_run:\n                max_run = curr_run\n                curr_run = 0\n            prev_char = char\n\n    if curr_run > max_run:\n        max_run = curr_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    run_len = 0\n    max_run_len = 0\n    start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if i == len(test_str) - 1:\n                run_len = i - start + 1\n                if run_len > max_run_len:\n                    max_run_len = run_len\n            else:\n                run_len = i - start + 1\n                if run_len > max_run_len:\n                    max_run_len = run_len\n                    start = i\n        else:\n            run_len = 0\n            start = i\n    \n    if max_run_len == 0:\n        return \"No uppercase characters found\"\n    else:\n        return max_run_len"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    count = 1\n    max_count = 1\n    max_start = 0\n    current_start = 0\n\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 1\n\n        if count > max_count:\n            max_count = count\n            max_start = current_start\n\n        if test_str[i].isupper():\n            current_start = i\n\n    return max_str(test_str[max_start:max_start+max_count])\n\n\ndef max_str(s):\n    \"\"\"\n    Find the maximum run of a given string.\n    \"\"\"\n    max_len = 0\n    max_start = 0\n    for i in range(len(s)):\n        if s[i].isupper():\n            max_len += 1\n        else:\n            max_start += 1\n            max_len = 1\n        if max_len > max_len:\n            max_len = 1\n    return s[max_start:max_start+max_len]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start_pos = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n            start_pos = i - max_run + 1\n\n    return max_run, start_pos"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    start = 0\n    end = 0\n    run_length = 0\n    prev_char = None\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if prev_char is None or not prev_char.isupper():\n                if run_length > max_run:\n                    max_run = run_length\n                    start = i - run_length + 1\n                    end = i\n                run_length = 1\n            else:\n                run_length += 1\n        else:\n            run_length = 0\n            prev_char = None\n            \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase = False\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the character is uppercase and the previous character was not, increase the run count\n        if char.isupper() and not uppercase:\n            current_run += 1\n        # If the character is not uppercase and the previous character was uppercase, reset the run count\n        elif not char.isupper() and uppercase:\n            current_run = 0\n        # If the character is not uppercase and the previous character was not uppercase, increase the run count\n        elif not char.isupper() and not uppercase:\n            current_run += 1\n        # If the character is uppercase and the previous character was uppercase, reset the run count and update the max run count\n        elif char.isupper() and uppercase:\n            current_run = 0\n            max_run = max(max_run, current_run)\n        # Update the uppercase flag\n        uppercase = char.isupper()\n        \n    # Return the maximum run count\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    start_index = 0\n    max_run = 0\n\n    # Loop through the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase and the previous character was not uppercase, set the start index and increment max_run\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            start_index = i\n            max_run += 1\n        # If the current character is not uppercase, reset start_index and max_run\n        elif not test_str[i].isupper():\n            start_index = i\n            max_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    run_start = 0\n    prev_char = None\n\n    for i, char in enumerate(test_str):\n        if char.isupper() and prev_char and prev_char.isupper():\n            run_start = i\n            prev_char = char\n            continue\n\n        if char.isupper() and prev_char and not prev_char.isupper():\n            max_run = max(max_run, i - run_start + 1)\n            prev_char = char\n\n    max_run = max(max_run, len(test_str) - run_start)\n    return max_run\n"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    If there are no odd numbers in the list, it returns None.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # iterate through the list of numbers and check if each number is odd or even\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    # if the loop completes without finding an odd number, return None\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    k_count = 0\n    for i in test_tup:\n        if i == K:\n            k_count += 1\n    if k_count == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) >= K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(set(test_tup)) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    for tup in test_tup:\n        if len(tup) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K or test_tup[1] in K or test_tup[2] in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if len(tup) == K:\n            count += 1\n    return count == len(test_tup)"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple as input and the value of k as input. \n    It checks if the given tuple contains the k value or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if K == test_tup[i]:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] in K:\n        return True\n    elif test_tup[1] in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns True if all the elements in the second tuple are smaller than their corresponding elements in the first tuple, and False otherwise.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples have different lengths\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{i}: {test_tup1[i]} > {test_tup2[i]}\")\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the length of both tuples is the same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # Compare each element of the first tuple with its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n            \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same number of elements.\")\n        return\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    }
]