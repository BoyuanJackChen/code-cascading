[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    shared_elements = set1.intersection(set2)\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2 and elem not in shared_elements:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples of the same length and returns a new tuple containing the shared elements.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return tuple(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize empty set to store shared elements\n    shared_set = set()\n\n    # Iterate through both lists\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            # Check if current elements are equal\n            if test_tup1[i] == test_tup2[j]:\n                # Add current element to shared_set\n                shared_set.add(test_tup1[i])\n\n    # Convert set to list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # First, find the common elements in both lists\n    common_elements = set(test_tup1) & set(test_tup2)\n\n    # Then, find the unique elements in both lists\n    all_elements = set(test_tup1 + test_tup2)\n\n    # Finally, find the shared elements between the two lists\n    shared_elements = common_elements.intersection(all_elements)\n\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # create sets for the first and second tuple\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared = set1.intersection(set2)\n    # return the shared elements as a list\n    return list(shared)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    shared_list = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_list.append(elem)\n    return shared_list"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function identifies non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n    # Check if the number is equal to 2\n    elif n == 2:\n        return False\n    # Check if the number is divisible by 2\n    elif n % 2 == 0:\n        return True\n    # Check odd numbers greater than 3\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    elif n <= 3:\n        return False\n    elif n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # check if n is less than 2\n    if n < 2:\n        return True\n\n    # check if n is divisible by any number from 2 to n-1\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # n is not prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n == 2 or n == 3:\n        return False\n    elif n <= 1 or n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap with n elements from the given list of numbers\n    hq.heapify(nums[:n])\n    # remove the smallest element from the heap and add the next smallest element to it\n    while n < len(nums):\n        hq.heappush(nums, hq.heappop(nums[:n]))\n        n += 1\n    # return the heap sorted in descending order\n    return nums"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    max_heap = [-float('inf')] * n\n    for num in nums:\n        # if the heap is full, replace the smallest element with the new element\n        if len(max_heap) == n:\n            hq.heappop(max_heap)\n        # if the heap is not full, add the new element to the heap\n        hq.heappush(max_heap, num)\n    # create a list of the n largest integers from the heap\n    return hq.nlargest(n, max_heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    largest = [hq.heappop(nums) for _ in range(n)]\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap to store the n largest integers\n    min_heap = []\n    for num in nums:\n        if len(min_heap) < n:\n            heapq.heappush(min_heap, num)\n        else:\n            if num > min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    return min_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # Create a min heap of size n and populate it with the first n elements of the input list\n    max_heap = hq.nsmallest(n, nums)\n\n    # Iterate through the remaining elements of the input list, remove the largest element from the heap and append it to the result list\n    result = []\n    for num in nums[n:]:\n        if len(max_heap) < n:\n            hq.heappush(max_heap, num)\n        else:\n            hq.heappop(max_heap)\n        result.append(max_heap[0])\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    heap = []\n    for num in nums:\n        hq.heappush(heap, num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers into a min heap\n    heap = hq.nlargest(n, nums)\n    # extract the largest integers from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    # Convert the list of numbers to a heap\n    for num in nums:\n        heapq.heappush(heap, -num)\n    # Pop the n largest elements from the heap and return them\n    return [-heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max heap from the input list\n    max_heap = nums\n    \n    # remove the first element from the heap and append it to the output list\n    for i in range(n):\n        max_heap.pop()\n        hq.heappush(max_heap, max(max_heap))\n    \n    # return the output list\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    hq.heapify(nums)\n    for _ in range(n):\n        hq.heappop(nums)\n    return nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return bin(x).count('1') == 1 and bin(x).count('0') == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x!= 1:\n        if x & (x-1)!= 0:\n            return False\n        x >>= 1\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    x &= (x - 1) # Remove all bits except the rightmost one\n    return x == 0 # Check if all bits are set to 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x): \n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Convert the input integer to binary string\n    binary_str = bin(x)[2:]\n\n    # Count the number of set bits in the binary string\n    count = sum(1 for bit in binary_str if bit == '1')\n\n    # If the count is 1, it means the two numbers differ at one bit position only\n    if count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n\n    # Initialize the result variable\n    result = False\n\n    # Iterate through all the bits in the binary representation of x\n    for i in range(32):\n        # Check if the current bit is different in x1 and x2\n        if (x & (1 << i))!= (x1 & (1 << i))!= (x2 & (1 << i)):\n            # If the current bit is different, set the result variable to True and break out of the loop\n            result = True\n            break\n\n    return result"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    power_of_two = 1\n    while power_of_two < x:\n        power_of_two <<= 1\n    return power_of_two == x\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Finding the bit position of the number with the first bit set to 1\n    power = 0\n    while x & (1 << power) == 0:\n        power += 1\n    # If the number has only one bit set to 1, then the two numbers differ at one bit position only\n    if power == 1:\n        return True\n    # If the number has more than one bit set to 1, then the two numbers are not equal\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Find the position of the bit that differs\n    bit_position = x.bit_length() - 1 - x.bit_length().bit_count(x & -(x < 0))\n    \n    # Check if the bit position is odd or even\n    return (x & (1 << bit_position))!= 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number is a power of 2 or not.\n    \"\"\"\n    # Convert n to binary and then check if there is only one bit that is different from 0\n    binary = bin(n)[2:]\n    if len(binary)!= 1:\n        return False\n    for i in range(len(binary)):\n        if binary[i]!= binary[0]:\n            return True\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the binary representation of x to a list\n    x_binary = bin(x)[2:]\n    \n    # Iterate over the length of the binary representation of x\n    for i in range(len(x_binary)):\n        # Check if the i-th bit is different from the (i-1)-th bit\n        if x_binary[i]!= x_binary[i-1]:\n            # If there is a bit difference, return False\n            return False\n    \n    # If no bit difference was found, return True\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall('\\b\\w+\\b', text)\n    \n    # Filter the words based on their length\n    long_words = [word for word in words if len(word) >= 4]\n    \n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    # Filter out words less than 4 characters long\n    filtered_words = [word for word in words if len(word) >= 4]\n    # Return the filtered words\n    return filtered_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expression to match words with at least 4 characters\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    # Define a regular expression pattern to find all words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use the pattern to find all the matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Return the matches as a list\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes in a string as input and returns a list of all words that are at least 4 characters long.\n    '''\n    # Define a regular expression pattern to match words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    \n    # Use re.findall() to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = [word for word in words if len(word) >= 4]\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')  # \\b matches word boundaries\n    words = pattern.findall(text)\n    long_words = [word for word in words if len(word) >= 4]\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words\n\ntext = \"The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str):\n    # Sort the string in ascending order\n    sorted_str = sorted(str)\n\n    # Initialize count of rotations\n    count = 0\n\n    # Initialize minimum number of rotations found so far\n    min_rotations = len(str)\n\n    # Iterate through the sorted string\n    for i in range(1, len(sorted_str)):\n        # If current character matches with the previous character, we have found a rotation\n        if sorted_str[i] == sorted_str[i-1]:\n            count += 1\n            # If we have found a rotation, update the minimum number of rotations found so far\n            min_rotations = min(min_rotations, count)\n        # If we have not found a rotation, increment the count of rotations by 1 and move to the next character\n        else:\n            count = 0\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # convert the string to a list of characters\n    s = list(str)\n    n = len(s)\n    \n    # loop through each character in the string\n    for i in range(n):\n        # find the first character that is not equal to the current character\n        j = i\n        while j < n and s[j] == s[i]:\n            j += 1\n        # if there are no more characters that are not equal to the current character, the string is not a valid rotation\n        if j == n:\n            return -1\n        \n        # find the last character that is not equal to the current character\n        k = i\n        while k >= 0 and s[k] == s[i]:\n            k -= 1\n        # if the last character that is not equal to the current character is not at the same index as the first character that is not equal to the current character, the string is not a valid rotation\n        if k + 1!= j:\n            return -1\n        \n        # if the string is valid, then swap the first and last characters of the string\n        s[i], s[j] = s[j], s[i]\n        # if the string is equal to its original form, the number of rotations required is the number of characters that were swapped\n        if ''.join(s) == str:\n            return n - j - 1\n    \n    # if the loop completes without finding a valid rotation, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # initialize variables\n    n = len(str)\n    min_rotations = float('inf')\n\n    # iterate over all possible rotations\n    for i in range(n):\n        # initialize current string\n        current_str = str[i:] + str[:i]\n\n        # check if current string is the same as the given string\n        if current_str == str:\n            min_rotations = min(min_rotations, i+1)\n\n    # return minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    This function takes a string as input and returns the minimum number of rotations required to get the same string.\n    '''\n    if len(str) < 2: \n        return 0\n    if str[0] == str[-1]: \n        return 1\n    min_rotations = float('inf')\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            if str[i:j+1] == str[j:i+1][::-1]:\n                min_rotations = min(min_rotations, j - i + 1)\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize variables\n    n = len(str)\n    rotations = 0\n\n    # Iterate through all possible rotations\n    for i in range(n):\n        # If the characters at i and n-i are not equal, it means the strings are not equal\n        if str[i]!= str[n-i-1]:\n            rotations += 1\n\n            # If the strings are equal after rotation, return the number of rotations\n            if str == str[::-1]:\n                return rotations + 1\n\n    # If the strings are not equal after all rotations, return the number of rotations\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    while True:\n        new_str = str[-1] + str[:-1]\n        if new_str == str:\n            break\n        rotations += 1\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Convert the string to a list of characters\n    str_list = list(str)\n\n    # Get the length of the string\n    n = len(str_list)\n\n    # Traverse the string to find the minimum number of rotations\n    min_rot = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if str_list[i]!= str_list[j]:\n                # Swap the characters at indices i and j\n                str_list[i], str_list[j] = str_list[j], str_list[i]\n                # Find the length of the rotated string\n                new_str_list = str_list[:i] + str_list[i+1:]\n                rot_len = len(new_str_list)\n                # Update the minimum number of rotations\n                min_rot = min(min_rot, rot_len)\n                # Reverse the swapped characters back to their original positions\n                str_list[i], str_list[j] = str_list[j], str_list[i]\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    # Create a dictionary to store the frequency of each character in the given string\n    char_freq = {}\n    for char in str:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # Sort the characters based on their frequency in descending order\n    sorted_chars = sorted(char_freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Calculate the minimum number of rotations required to get the same string\n    min_rotations = 0\n    for char, freq in sorted_chars:\n        if char == str[0]:\n            min_rotations += freq - 1\n        else:\n            min_rotations += freq\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j] == str[j:i][::-1]:\n                return n-i\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i] == str[j]:\n                # swap characters at indices i and j\n                str = str[:i] + str[j] + str[i] + str[j+1:]\n                # increment the number of rotations\n                rotations += 1\n                # check if the string is the same after the rotation\n                if str == str[::-1]:\n                    return rotations\n    return rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # remove first occurrence\n    s = s.replace(ch, '', 1)\n    # remove last occurrence\n    s = s.replace(ch, '', -1)\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1:\n        return s[:s.find(ch)] + s[s.find(ch)+1:]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    # check if the string contains the character to be removed\n    if ch in s:\n        # split the string into parts using the separator ch\n        parts = s.split(ch)\n        # remove the first and last parts using the index 0 and -1 respectively\n        return parts[0] + parts[-1]\n    else:\n        # if the character is not present, return the original string\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Split the string into list of characters\n    s = list(s)\n    # Initialize index variables for first and last occurrence of the character\n    i = 0\n    j = len(s) - 1\n\n    # Traverse through the list and find the first and last occurrence of the character\n    while i < j:\n        if s[i] == ch:\n            i += 1\n        else:\n            j -= 1\n\n    # Remove the first and last occurrences of the character from the list\n    while i <= j:\n        if s[i] == ch:\n            s.pop(i)\n        else:\n            i += 1\n\n    # Convert the list of characters back to string and return it\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence\n    if s.startswith(ch):\n        s = s[1:]\n    # Removing last occurrence\n    if s.endswith(ch):\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Removing first occurrence of character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Removing last occurrence of character\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n    \n    # Remove last occurrence\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n        \n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Remove the first occurrence of the character\n    if s.find(ch) == 0:\n        s = s[1:]\n    # Remove the last occurrence of the character\n    if s.rfind(ch) == len(s) - 1:\n        s = s[:len(s)-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Remove first occurrence\n    if s.find(ch) == 0:\n        s = s[1:]\n\n    # Remove last occurrence\n    if s.rfind(ch) == len(s)-1:\n        s = s[:len(s)-1]\n\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize an empty list to hold the sorted matrix\n    sorted_matrix = []\n\n    # Loop through each row in the matrix\n    for row in M:\n        # Initialize a variable to hold the sum of the current row\n        row_sum = 0\n\n        # Loop through each element in the current row\n        for element in row:\n            # Add the element to the row sum\n            row_sum += element\n\n        # Add the row sum to the sorted matrix\n        sorted_matrix.append(row_sum)\n\n    # Sort the sorted matrix in ascending order\n    sorted_matrix.sort()\n\n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Create a list of tuples containing the sum of each row of the matrix and its index\n    sums = []\n    for i in range(len(M)):\n        row_sum = sum(M[i])\n        sums.append((row_sum, i))\n    \n    # Sort the list of tuples based on the first element (sum of rows)\n    sums.sort()\n    \n    # Create a new matrix with the sorted rows\n    sorted_matrix = []\n    for i in range(len(M)):\n        sorted_matrix.append(M[sums[i][1]])\n    \n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # create a matrix that has all elements set to 0\n    sorted_matrix = [[0]*n for _ in range(n)]\n    # loop through each row of the matrix\n    for i in range(n):\n        # loop through each column of the matrix\n        for j in range(n):\n            # find the maximum sum among all elements in the current row and column\n            max_sum = M[i][j]\n            for k in range(n):\n                max_sum = max(max_sum, M[i][k] + M[k][j])\n            # add the maximum sum to the corresponding element in the sorted_matrix\n            sorted_matrix[i][j] = max_sum\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n\n    # Initialize the result matrix with the same dimensions as the input matrix\n    result = [[0 for j in range(len(M))] for i in range(len(M[0]))]\n\n    # Calculate the sum of each row of the input matrix\n    for i in range(len(M)):\n        row_sum = 0\n        for j in range(len(M[0])):\n            row_sum += M[i][j]\n        result[i] = row_sum\n\n    # Sort the result matrix in ascending order of row sums\n    for i in range(len(result)):\n        for j in range(len(result[0])-1):\n            if result[i][j] > result[i][j+1]:\n                result[i][j], result[i][j+1] = result[i][j+1], result[i][j]\n\n    return result"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # create a list of sums of each row\n    row_sums = [sum(row) for row in M]\n    # sort the row_sums list in ascending order\n    row_sums.sort()\n    # create a new list to store the sorted matrix\n    sorted_M = []\n    # iterate over each row in the original matrix\n    for row in M:\n        # create a list of row sums for the current row\n        row_sum = sum(row)\n        # iterate over the sorted row_sums list to find the index of the row_sum\n        i = bisect.bisect_left(row_sums, row_sum)\n        # add the current row to the sorted_M list at the index found\n        sorted_M.append(row)\n        # shift the row_sums list to the right of the index found\n        row_sums = row_sums[:i] + row_sums[i+1:]\n    # return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    # Find the sum of each row\n    sums = [sum(row) for row in M]\n    \n    # Sort the matrix by row sums in ascending order\n    sorted_M = sorted(M, key=lambda x: sums.index(sum(x)))\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if M[i][j] < M[i][i] + M[j][i]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    for i in range(len(M)):\n        for j in range(i+1, len(M[i])):\n            if M[i][j] < M[i][i] + M[j][j]:\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize the sum of each row and the sorted matrix\n    row_sums = [sum(row) for row in M]\n    sorted_matrix = [sorted(row) for row in M]\n\n    # Loop through the sorted matrix and assign the row with the smallest sum\n    for i in range(len(sorted_matrix)):\n        row_sum = row_sums[i]\n        for j in range(len(sorted_matrix[i])):\n            if sorted_matrix[i][j] == row_sum:\n                sorted_matrix[i][j] = row_sums.index(row_sum)\n                break\n\n    return sorted_matrix"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3) * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculating the volume of the prism\n    volume = (l * b * h) / 3\n    \n    # Returning the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    This function takes the length, width, and height of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Formula for Volume of a triangular prism\n    V = (l*b*h)/3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (1/3)*l*b*h"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n\n    # Calculate the volume of the prism\n    volume = area * h\n\n    # Return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*b*h\n    print(\"The volume of the triangular prism is:\", Volume)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments - l (length of prism), b (width of prism) and h (height of prism)\n    and returns the volume of the prism.\n    '''\n    volume = l * b * h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n\n    # calculate the volume of the prism using Heron's formula\n    volume = (1/3) * l * b * h\n\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z][a-z0-9_]*[a-z]'\n\n    # Use the re.search() function to search for a match in the input text\n    match = re.search(pattern, text)\n\n    # If a match is found, return True, otherwise return False\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+[_a-z]+\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'\\b[a-z]+_[a-z]+\\b'\n    matches = re.findall(pattern, text)\n    return True if matches else False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = re.compile(r'[a-z_]+')\n    return bool(pattern.search(text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'\\b[a-z][a-z0-9]*\\b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=\\b)([a-z]{1,})_+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<=([a-z])|^)_+(?=[a-z])'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n\n    underscore_pattern = r'([a-z])_([a-z])'\n    underscore_pattern_re = re.compile(underscore_pattern)\n\n    matches = underscore_pattern_re.findall(text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = re.compile(r'(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])')\n    return regex.match(text) is not None"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Split the string into a list of characters\n    char_list = list(string)\n    # Convert the string to a set so that we can easily check for duplicates\n    char_set = set(char_list)\n    # Iterate over the characters of the first string\n    for char in char_list:\n        # Check if the character is present in the second string\n        if char in char_set:\n            # If it is, remove it from the list of characters\n            char_list.remove(char)\n    # Convert the list of characters back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    string_list = list(string)\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the characters of the string\n    for char in string_list:\n        # If the character is not present in the second string, add it to the result list\n        if char not in string:\n            result.append(char)\n    # Convert the result list to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    NO_OF_CHARS = 256\n    freq = [0] * NO_OF_CHARS\n\n    # Count the frequency of each character in the first string\n    for char in string:\n        freq[ord(char)] += 1\n\n    # Remove the characters from the first string that are present in the second string\n    for i in range(len(string)):\n        if freq[ord(string[i])] > 0:\n            string = string[:i] + string[i+1:]\n            freq[ord(string[i])] -= 1\n\n    # Print the modified string\n    print(string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    # Convert strings to lists of characters\n    list1 = list(string1)\n    list2 = list(string2)\n    \n    # Create a list to store the result\n    result = []\n    \n    # Loop through each character in the first list\n    for char in list1:\n        # If the character is not present in the second list, add it to the result\n        if char not in list2:\n            result.append(char)\n    \n    # Convert the result list back to a string\n    result_str = ''.join(result)\n    \n    return result_str"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    for i in range(len(string)):\n        if string[i] in string[i+1:]:\n            string = string[:i] + string[i+1:]\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of all characters in the string\n    chars = list(string)\n    # create a list of all characters in the second string\n    list_of_chars = list(string)\n    # create a set of all characters in the second string\n    set_of_chars = set(list_of_chars)\n    # loop through all characters in the first string\n    for char in chars:\n        # check if the character is present in the set of characters in the second string\n        if char in set_of_chars:\n            # if the character is present, remove it from the list of characters\n            chars.remove(char)\n\n    # convert the list of characters to a string\n    result = ''.join(chars)\n\n    return result"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # convert the string into a list of characters\n    chars = list(string)\n    \n    # create a set of characters to remove\n    remove_chars = set(string)\n    \n    # create a new list without the characters to remove\n    new_chars = [char for char in chars if char not in remove_chars]\n    \n    # convert the new list back into a string\n    new_string = ''.join(new_chars)\n    \n    return new_string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the given string into a list of characters\n    list_of_chars = [char for char in string]\n    # Remove the characters present in the second string from the list of characters\n    for char in string:\n        if char in string:\n            list_of_chars.remove(char)\n    # Convert the list of characters back into a string and return it\n    return ''.join(list_of_chars)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    no_of_chars = 256\n    string_list = list(string)\n    removed_list = []\n    for char in string_list:\n        if char not in string.upper():\n            removed_list.append(char)\n    removed_string = ''.join(removed_list)\n    print(\"Original string: \" + string)\n    print(\"Removed string: \" + removed_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string1, string2): \n    NO_OF_CHARS = 256\n    string1 = string1.upper()\n    string2 = string2.upper()\n    result = []\n    for char in string1: \n        if char not in string2: \n            result.append(char) \n    return ''.join(result) "
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # Create a dictionary to store the count of each element in the array\n    counts = {}\n\n    # Iterate through the array\n    for num in arraynums:\n        # If the number is already in the dictionary, increment its count\n        if num in counts:\n            counts[num] += 1\n        # If the number is not in the dictionary, add it with a count of 1\n        else:\n            counts[num] = 1\n\n    # Iterate through the dictionary and check if there are any elements with a count of 2 or more\n    for num in counts:\n        if counts[num] >= 2:\n            return True\n\n    # If no duplicate elements were found, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the occurrence of each element\n    count = {}\n\n    for num in arraynums:\n        # check if the number exists in the dictionary\n        if num in count:\n            # if it does, increment its count\n            count[num] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            count[num] = 1\n\n    # check if any count is greater than 1\n    for count in count.values():\n        if count > 1:\n            # if it is, return True\n            return True\n\n    # if no count is greater than 1, return False\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Check if the array is empty or has only one element\n    if len(arraynums) < 2:\n        return False\n    \n    # Check if all the elements in the array are unique\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    \n    # If no duplicates were found, the function returns False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = {}\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen[num] = True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the numbers and their frequency\n    freq_dict = {}\n    \n    # loop through the array and update the frequency of each number in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # loop through the dictionary and check if there are any duplicate numbers\n    for num, freq in freq_dict.items():\n        if freq > 1:\n            return True\n    \n    # if no duplicate numbers are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n\n    # create a dictionary to store unique elements\n    unique_dict = {}\n\n    # iterate through each element in the array\n    for num in arraynums:\n        # if the element is already in the dictionary, return True\n        if num in unique_dict:\n            return True\n        # otherwise, add the element to the dictionary\n        unique_dict[num] = True\n\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_elements = set()\n    # loop through each element in the array\n    for num in arraynums:\n        # if the element is already in the set, return True\n        if num in unique_elements:\n            return True\n        # otherwise, add the element to the set\n        unique_elements.add(num)\n    # if all elements are unique, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set()\n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_set.add(num)\n    # check if the set has more than one element\n    if len(unique_set)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0 and x % 7 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # define the possible outcomes\n    outcomes = ['woodball', 'not woodball']\n    # check if the number is divisible by 3 or not\n    if x % 3 == 0:\n        return outcomes[1]\n    else:\n        return outcomes[0]"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Check for special cases\n    if x == 0:\n        return \"Woodball\"\n    if x == 1:\n        return \"Woodball\"\n    if x == 2:\n        return \"Woodball\"\n    if x == 3:\n        return \"Woodball\"\n    if x == 4:\n        return \"Woodball\"\n    if x == 5:\n        return \"Woodball\"\n    if x == 6:\n        return \"Woodball\"\n    if x == 7:\n        return \"Woodball\"\n    if x == 8:\n        return \"Woodball\"\n    if x == 9:\n        return \"Woodball\"\n\n    # Check for numbers with same digits\n    for i in range(2, 10):\n        if x // i == x % i:\n            return \"Woodball\"\n\n    # Check for numbers with different digits\n    for i in range(1, 10):\n        if x // i == x % i:\n            return \"Not a Woodball\"\n\n    # If none of the above conditions are met, it is a Woodball\n    return \"Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    # Define the list of possible outputs\n    woodball = [1, 2, 3, 5, 10, 20, 50, 100, 500, 1000]\n\n    # Loop through the list of possible outputs and check if the input is in it\n    for num in woodball:\n        if num == x:\n            return True\n\n    # If the input is not in the list, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True \n    elif x % 2 == 0: \n        return False \n    else: \n        return is_woodall(x - 1) "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 4 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x % 3 == 0 and x % 5 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    if x < 0 or x % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # create a list of odd numbers between 1 and 100\n    odd_list = [i for i in range(1, 101, 2)]\n    # check if the input number is in the list of odd numbers\n    return x in odd_list"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    if num < 10:\n        return False\n\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n\n    return reverse > (num - 1) * 2\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num + 1) % (num + 2) == 0"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the given number to a string\n    num_str = str(num)\n    # Reverse the string and convert it back to an integer\n    reversed_num = int(num_str[::-1])\n    # Check if the reversed number is one less than twice the original number\n    if num < 2*reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num*10 + num%10\n        num //= 10\n    return (num+rev_num) == 2*rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    num = str(num)\n    for i in num:\n        reverse = reverse*10 + int(i)\n    reverse = reverse/10\n    if num[0] == '0' and num[1]!= '0':\n        reverse = reverse + 1\n    if num[-1] == '0' and num[-2]!= '0':\n        reverse = reverse + 1\n    if reverse < (2*num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    rev_num = 0\n    num_str = str(num)\n    for i in range(len(num_str)-1, -1, -1):\n        rev_num += int(num_str[i])\n\n    if rev_num == num - 1:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n\n    if rev_num % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if num == reverse and reverse + 1 < num:\n        print(num, \"is one less than twice its reverse\")\n    else:\n        print(num, \"is not one less than twice its reverse\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(num)\n    # reverse the string\n    rev_str = num_str[::-1]\n    # convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # check if the original number is one less than twice its reverse\n    if num - rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    if reverse < num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    digits = []\n    for num in arr:\n        digits.append(int(num))\n    max_num = max(digits)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the digits in descending order\n    arr.sort(reverse=True)\n    # Initialize variables\n    max_num = 0\n    curr_num = 0\n    # Iterate through the sorted digits and form numbers\n    for i in range(len(arr)):\n        curr_num = curr_num * 10 + arr[i]\n        if curr_num > max_num:\n            max_num = curr_num\n    # Return the largest number that can be formed\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if int(arr[i])*int(arr[j]) > max_num:\n                max_num = int(arr[i])*int(arr[j])\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr): \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Create a dictionary to store the count of each digit in the number\n    count = {}\n    for digit in arr:\n        if digit in count:\n            count[digit] += 1\n        else:\n            count[digit] = 1\n\n    # Calculate the largest number that can be formed with the given digits\n    largest = 0\n    for i in range(10):\n        largest += (10**i) * count[str(i)]\n\n    return largest"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Initialize max_num to the first element of arr\n    max_num = arr[0]\n\n    # Loop through all the elements of arr\n    for i in range(1, len(arr)):\n        # Calculate the sum of the current element and all the previous elements of arr\n        curr_sum = arr[i] + sum(arr[:i])\n\n        # Update max_num if curr_sum is greater than max_num\n        if curr_sum > max_num:\n            max_num = curr_sum\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with the given list of digits.\n\n    Args:\n    arr (list of int): A list of digits\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Initialize the variable max_num with the first element of the list\n    max_num = arr[0]\n    \n    # Loop through the remaining elements of the list\n    for num in arr[1:]:\n        # If the current number is greater than max_num, update max_num with the current number\n        if num > max_num:\n            max_num = num\n    \n    # Return the maximum number found\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    # convert the given list of digits to a string\n    arr_str = \"\".join(str(x) for x in arr)\n\n    # calculate the length of the given list of digits\n    length = len(arr_str)\n\n    # initialize the maximum number as 0\n    max_num = 0\n\n    # loop through all possible numbers from 1 to 10^length\n    for i in range(1, 10**length):\n        # convert the current number to a string and check if it is divisible by all the digits in the given list\n        num_str = str(i)\n        if all(num_str[j] == arr_str[j] for j in range(length)):\n            # if the current number is divisible by all the digits in the given list, then it is a valid number\n            # update the maximum number if the current number is greater than the maximum number\n            if int(num_str) > max_num:\n                max_num = int(num_str)\n\n    # return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    n = len(arr)\n    max_num = 0\n    \n    for i in range(1, 10**n):\n        temp = i\n        for j in range(n):\n            temp = temp*10 + arr[j]\n            if temp > max_num:\n                max_num = temp\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr.sort(reverse=True)\n    max_num = 0\n    for digit in arr:\n        max_num += digit * (9**len(arr)-9)**(len(arr)-digit-1)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                max_num = max(max_num, int(''.join(sorted(str(arr[i])+str(arr[j])+str(arr[k])))))\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function checks whether the given two integers have opposite sign or not.\n    '''\n    if x>0 and y>0:\n        return True\n    elif x<0 and y<0:\n        return True\n    elif x==0 and y==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x, y):\n    # Check if both numbers have opposite signs\n    if (x >= 0 and y >= 0) or (x < 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function checks whether two given integers have opposite signs or not.\n    '''\n    if x == y:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # Check if the two integers have the same sign\n    if x * y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n\n    # first, check if both numbers are integers\n    if not x.is_integer() or not y.is_integer():\n        return \"Both numbers must be integers.\"\n\n    # then, check if the signs of the two numbers are opposite\n    if (x.is_positive() and y.is_negative()) or (x.is_negative() and y.is_positive()):\n        return \"The signs of the two numbers are opposite.\"\n    else:\n        return \"The signs of the two numbers are not opposite.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, otherwise False.\n    '''\n    if (x >= 0 and y < 0) or (x < 0 and y >= 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    This function takes two integer inputs and checks if they have opposite signs or not.\n    '''\n    if x >= 0 and y >= 0:\n        return \"Both positive numbers\"\n    elif x < 0 and y < 0:\n        return \"Both negative numbers\"\n    elif x >= 0 and y < 0:\n        return \"First number is positive and second number is negative\"\n    elif x < 0 and y >= 0:\n        return \"First number is negative and second number is positive\"\n    else:\n        return \"Both numbers are zero\""
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Find the square root of n\n    root = int(n**0.5)\n    \n    # Use formula for octagonal numbers (n^2 + 8*root^2 = 25)\n    octagonals = [root**2 + 8*root**2 + 1 for root in range(root+1)]\n    \n    # Return the nth octagonal number\n    return octagonals[n-1]"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 0\n    b = 1\n    count = 0\n    \n    while count < n:\n        if a**2 + b**2 == count**2:\n            count += 1\n            print(a)\n        a += 1\n        b += 1\n        \n    return count"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_list = []\n    for i in range(1, n+1):\n        if i*(i-1)*(i-2)*(i-3) == 0:\n            oct_list.append(i*(i-1)*(i-2)*(i-3))\n    return oct_list"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    # Check if n is a positive integer\n    if n <= 0 or not isinstance(n, int):\n        return False\n\n    # Calculate the square root of n\n    sqrt_n = int(n ** 0.5) + 1\n\n    # Check if sqrt_n is an octagonal number\n    return (sqrt_n * sqrt_n == n) and (sqrt_n * sqrt_n + sqrt_n == 2 * n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    a = 1\n    b = 8\n    for i in range(n):\n        a = (a * 3) + 1\n        b = a * 2\n    return b"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n * n) - (n * (n + 1) // 2)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return 'Invalid input. Please enter a positive integer.'\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Initialize the counter variable\n    counter = 1\n\n    # Iterate until the counter variable is equal to n\n    while counter <= n:\n        # Calculate the current octagonal number\n        octagonal = (counter ** 3) // 2\n\n        # Add the octagonal number to the sum\n        sum += octagonal\n\n        # Increment the counter variable\n        counter += 1\n\n    # Return the sum of the first n octagonal numbers\n    return sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Initialize the sum to 0\n    oct_sum = 0\n\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the sum of the cube of the current number and the number of steps from 1 to i\n        oct_sum += i**3\n\n    # Return the octagonal number\n    return oct_sum"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    This function takes an integer n as input and returns True if n is an octagonal number, else False.\n    An octagonal number is a positive integer n such that the sum of the cubes of its digits is equal to n.\n    For example, 153 is an octagonal number because 1^3 + 5^3 + 3^3 = 153.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    total = sum(digit ** 3 for digit in digits)\n    return total == n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        return \"The input must be an integer.\"\n\n    # Find the sum of squares of the odd integers from 1 to n\n    odd_sum = sum(int(x**2) for x in range(1, n+1, 2))\n\n    # Return the result\n    return odd_sum"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    # Initialize a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n    \n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            \n            # Extract the substring and convert it to a list of digits\n            substring = s[i:j]\n            digits_list = [int(digit) for digit in substring]\n            \n            # Calculate the sum of digits in the substring\n            digit_sum = sum(digits_list)\n            \n            # Check if the digit sum is equal to the length of the substring\n            if digit_sum == len(substring):\n                # Increment the count of substrings with digit sum equal to length of substring\n                count_dict[digit_sum] += 1\n    \n    # Return the count of substrings with sum of digits equal to their length\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    This function counts the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    count = 0\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == '0' or s[j] == '0':\n                continue\n            sub_str = s[i:j+1]\n            if sum(int(d) for d in sub_str) == len(sub_str):\n                count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if sum(int(c) for c in s[i:j+1]) == j-i+1:\n                count += 1\n            dp[i][j] = count\n    return dp[0][n-1]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with the given sum\n    substring_count = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Initialize a variable to store the sum of digits in the substring\n        substring_sum = 0\n\n        # Loop through each character after the current one in the string\n        for j in range(i+1, len(s)+1):\n            # Add the digit to the sum of digits in the substring\n            substring_sum += int(s[j-1])\n\n            # If the sum of digits is equal to the length of the substring, increment the count in the dictionary\n            if substring_sum == len(s):\n                substring_count[substring_sum] += 1\n\n    # Return the count of substrings with the given sum\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Create a defaultdict to store the count of substrings with the given sum\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring and convert it to list of digits\n            substring = ''.join(str(x) for x in s[i:j])\n            # Calculate the sum of digits in the substring\n            substring_sum = sum(int(digit) for digit in substring)\n            # If the sum of digits is equal to the length of the substring, increment the count in the defaultdict\n            if substring_sum == len(substring):\n                count_dict[substring_sum] += 1\n\n    # Return the count of substrings with the given sum\n    return sum(count for count in count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n\n    # Initialize a dictionary to store the counts of substrings\n    counts = defaultdict(int)\n\n    # Loop through each character in the string\n    for i in range(len(s)):\n        # Create a substring by taking the i-th character and the rest of the string\n        substring = s[i:]+s[:i]\n\n        # Calculate the sum of digits in the substring\n        digit_sum = sum(int(digit) for digit in substring)\n\n        # Add 1 to the count of the substring if its sum of digits is equal to its length\n        if digit_sum == len(substring):\n            counts[substring] += 1\n\n    return counts"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    dp = defaultdict(int)\n    for i in range(len(s)):\n        dp[i] = sum(int(d) for d in str(i+1))\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            count += dp[j] - dp[i]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings of each length\n    count = defaultdict(int)\n    \n    # Iterate through each character in the string\n    for i in range(len(s)):\n        # Iterate through all possible substrings of length i\n        for j in range(i, len(s)+1):\n            # Convert the substring to an integer and check if it has a sum of digits equal to its length\n            substring = int(s[i:j])\n            if sum(int(digit) for digit in str(substring)) == len(str(substring)):\n                # Increment the count of substrings of length i\n                count[i] += 1\n    \n    # Return the count of substrings of each length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize the dictionary to store the number of substrings\n    count = defaultdict(int)\n    # Loop through all the substrings of the input string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits is equal to the length of the substring\n            if sum([int(x) for x in s[i:j]]) == len(s[i:j]):\n                # Add 1 to the count of the substring\n                count[s[i:j]] += 1\n    # Return the dictionary containing the number of substrings\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a defaultdict to store the count of substrings with a given sum of digits\n    digit_sum_count = defaultdict(int)\n    \n    # Loop through all possible substrings of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            # Compute the sum of digits in the substring\n            substring_digits = sum(int(digit) for digit in s[i:j+1])\n            \n            # If the sum of digits is equal to the substring length, increment the count in the defaultdict\n            if substring_digits == len(s[i:j+1]):\n                digit_sum_count[substring_digits] += 1\n    \n    # Return the count of substrings with a given sum of digits\n    return digit_sum_count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list of numbers and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    # loop through the rest of the list and compare each element to the smallest\n    for x in xs[1:]:\n        if x < smallest:\n            smallest = x\n    # return the smallest number found in the list\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a list of tuples as input and returns the maximum difference between\n    available pairs in the list.\n    '''\n    # Initialize variables to store the minimum and maximum values in the list\n    min_val = test_list[0][1]\n    max_val = test_list[0][1]\n\n    # Loop through the list and update the minimum and maximum values\n    for tup in test_list:\n        if tup[1] < min_val:\n            min_val = tup[1]\n        elif tup[1] > max_val:\n            max_val = tup[1]\n\n    # Calculate the maximum difference between available pairs\n    diff = max_val - min_val\n\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    prev_num = test_list[0][0]\n    \n    for i in range(1, len(test_list)):\n        curr_num = test_list[i][0]\n        diff = curr_num - prev_num\n        max_diff = max(max_diff, diff)\n        prev_num = curr_num\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list in ascending order\n    sorted_list = sorted(test_list)\n    \n    # initialize variables to keep track of the maximum and minimum differences\n    max_diff = sorted_list[1] - sorted_list[0]\n    min_diff = sorted_list[1] - sorted_list[0]\n    \n    # loop through the list starting from the second element\n    for i in range(1, len(sorted_list)-1):\n        # calculate the current difference\n        diff = sorted_list[i+1] - sorted_list[i]\n        \n        # update the maximum and minimum differences if necessary\n        if diff > max_diff:\n            max_diff = diff\n        elif diff < min_diff:\n            min_diff = diff\n            \n    # return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Create an empty list to store the maximum difference\n    max_diff = []\n\n    # Loop through the tuple list and find the maximum difference\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0])\n            max_diff.append(diff)\n\n    # Find the maximum difference in the list\n    max_diff = max(max_diff)\n\n    # Return the maximum difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Find the maximum difference between available pairs in a list of tuples.\n    \"\"\"\n    # Sort the list of tuples by their second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize variables to store the maximum difference found so far and the index of the first and second elements\n    max_diff = 0\n    first_index = -1\n    second_index = -1\n\n    # Loop through the sorted list and check for the maximum difference\n    for index, pair in enumerate(sorted_list):\n        if first_index == -1:\n            # First element of the pair\n            first_index = index\n        elif pair[0] > sorted_list[first_index][1]:\n            # Found a larger first element, update the maximum difference and indices\n            max_diff = sorted_list[first_index][0] - sorted_list[index][0]\n            first_index = index\n            second_index = index + 1\n        elif pair[0] < sorted_list[first_index][1]:\n            # Found a smaller first element, update the second index\n            second_index = index + 1\n\n    # If no maximum difference was found, return None\n    if max_diff == 0:\n        return None\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # initialize max_diff as 0\n    max_diff = 0\n    \n    # iterate through the tuple list\n    for i in range(len(test_list)):\n        # iterate through the remaining elements of the tuple list\n        for j in range(i+1, len(test_list)):\n            # calculate the difference between the i-th and j-th elements in the tuple list\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            # update the max_diff if the calculated difference is greater than max_diff\n            if diff > max_diff:\n                max_diff = diff\n    \n    # return the max_diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    # Return the sorted list of tuples\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: empty list\n    if not data_list:\n        return 0\n    # Recursive case: add first element and sum the rest\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list, depth=0):\n        result = []\n        for item in data_list:\n            if isinstance(item, list):\n                result.extend(flatten_list(item, depth + 1))\n            else:\n                result.append((depth, item))\n        return result\n    \n    flattened_list = flatten_list(data_list)\n    total = 0\n    for depth, item in flattened_list:\n        total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Helper function to flatten a list recursively\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if type(item) == list:\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    # Flatten the input list\n    flat_list = flatten(data_list)\n\n    # Sum all the elements in the flattened list\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            recursive_list_sum(item)\n    else:\n        total += data_list\n\ndef flatten_and_sum(data_list):\n    '''\n    Flatten a list and sum all of its elements.\n    '''\n    if isinstance(data_list, list):\n        for item in data_list:\n            flatten_and_sum(item)\n    else:\n        total += data_list\n\ndata_list = [1, [2, [3, [4, [5, 6]]]], 7, 8, 9]\ntotal = 0\nrecursive_list_sum(data_list)\nprint(\"The sum of the flattened list is:\", total)\n\nflatten_and_sum(data_list)\nprint(\"The sum of the original list is:\", total)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # Recursive case: add the first element to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    \n    if isinstance(data_list[0], list):\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list of numbers and returns the count of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the count of positive numbers in it.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = sum(1 for num in list if num > 0)\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    # Initialize variables to store count and last element\n    count = 0\n    last_element = 0\n\n    # Loop through each number in the sequence\n    for i in range(1, n+1):\n\n        # If the number is not equal to the last element, increment the count\n        if i!= last_element:\n            count += 1\n\n        # Update the last element\n        last_element = i\n\n    # Return the final count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        count += bin(i).count('1')\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    \"\"\"\n    This function finds the number of ways to partition a set of Bell numbers.\n\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The value of n (the number of partitions).\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n    \"\"\"\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        bell = [1, 1]\n        for i in range(2, n):\n            bell.append(bell[i-1] + bell[i-2])\n        return bell[-1]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \n    Args:\n    n: int\n        The number of Bell numbers to partition.\n        \n    Returns:\n    int\n        The number of ways to partition the given set of Bell numbers.\n    \"\"\"\n    # Initialize the number of ways to partition the set of Bell numbers\n    ways = 0\n\n    # Loop through each number from 1 to n\n    for i in range(1, n+1):\n        # For each number, loop through each possible value of k such that (k+1)*i <= n and k <= i*i\n        for k in range(1, int(n/i)+1):\n            # Calculate the value of j such that (k+1)*i <= n and k <= j*j\n            j = int((k+1)*i**0.5)\n            # If j is not equal to 0 and k is less than or equal to j, increment the number of ways to partition\n            if j!= 0 and k <= j:\n                ways += 1\n\n    # Return the number of ways to partition the set of Bell numbers\n    return ways"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def fact(n):\n        if n == 0:\n            return 1\n        else:\n            return n * fact(n-1)\n    def binomial(n, r):\n        return fact(n) // (fact(r) * fact(n-r))\n    def partition(k, n):\n        if k == 0:\n            return 1\n        else:\n            return (partition(k-1, n-1) * binomial(n, k-1)) % (10**9 + 7)\n    return partition(n, 1000000)"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    This function takes an array A and returns True if it is monotonic and False otherwise.\n    A monotonic array is an array where the elements are either all increasing or all decreasing.\n    '''\n    n = len(A)\n    if n < 2:\n        return True\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    # Check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # Initialize variables to store the previous and next elements\n    prev = A[0]\n    next = A[1]\n\n    # Check if all elements are the same\n    if prev == next:\n        return True\n\n    # Loop through the array and check if the current element is smaller than the previous element\n    for i in range(2, len(A)):\n        if A[i] < prev:\n            return False\n        prev = A[i]\n\n    # If we have gone through the array without finding any violations, then the array is monotonic\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    # Check if the array is empty or has only one element\n    if len(A) <= 1: \n        return True\n    \n    # Initialize variables to store the previous and current elements of the array\n    prev = A[0]\n    curr = A[1]\n    \n    # Loop through the array and check if each element is either monotonic or not\n    for i in range(2, len(A)): \n        if curr < prev: # Current element is less than the previous element\n            if i == len(A) - 1: # If it's the last element, it's a monotonic increasing sequence\n                return True\n            else: # If it's not the last element, it's not a monotonic increasing sequence\n                return False\n        elif curr > prev: # Current element is greater than the previous element\n            if i == len(A) - 1: # If it's the last element, it's a monotonic decreasing sequence\n                return True\n            else: # If it's not the last element, it's not a monotonic decreasing sequence\n                return False\n            \n        # Update the previous and current elements\n        prev = curr\n        curr = A[i]\n    \n    # If the loop completes, it means the array is a monotonic sequence\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or has only one element\n    if len(A) < 2:\n        return True\n    \n    # check if all elements are the same\n    if all(A[0] == x for x in A):\n        return True\n    \n    # check if the array is monotonic\n    if A[0] < A[1] and all(A[i] <= A[i+1] for i in range(len(A)-1)):\n        return True\n    elif A[0] > A[1] and all(A[i] >= A[i+1] for i in range(len(A)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]: \n            continue\n        else: \n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n\n    for i in range(1, n):\n        if A[i] > A[i-1]:\n            return False\n        elif A[i] < A[i-1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n\n    for i in range(1, len(A)): \n        if A[i] <= A[i-1]: \n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    for i in range(1, len(A)):\n        if A[i] <= A[i-1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    \n    for i in range(1, len(A)): \n        if A[i-1] > A[i]: \n            return False\n        elif A[i-1] < A[i]: \n            if i == len(A)-1: \n                return True\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif l[0] in s:\n        return is_sublist(l[1:], s)\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # if the list is empty, then the sublist must be empty too\n    if not l:\n        return not s\n    \n    # check if the first element of the list is present in the sublist\n    if l[0] in s:\n        # check if the rest of the list is a sublist of the sublist starting from the next element\n        return is_sublist(l[1:], s[1:])\n    \n    # if the first element of the list is not present in the sublist, then the sublist must be empty\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    elif s[0] in l:\n        return is_sublist(l, s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    This function takes two lists l and s and checks whether s is a sublist of l.\n\n    Args:\n    l (list): The main list.\n    s (list): The sublist to be checked.\n\n    Returns:\n    bool: True if s is a sublist of l, False otherwise.\n    \"\"\"\n    # Check if s is empty\n    if not s:\n        return True\n    # Check if the first element of s is equal to the first element of l\n    if s[0] == l[0]:\n        # If yes, check if s is a sublist of l by recursively checking whether\n        # the rest of the elements of s are sublists of l.\n        return is_sublist(l[1:], s[1:])\n    # If no, return False\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    # Check if s is a sublist of l\n    if l in s:\n        return True\n    # Check if any element of s is a sublist of l\n    for i in range(len(s)):\n        if s[:i+1] in l:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    return s[0] in l and is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(s)):\n        if s[i] in l:\n            if len(l) > len(s):\n                l.remove(s[i])\n    return l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # check if sublist is empty\n    if not s:\n        return True\n    \n    # check if the first element of sublist is in the list\n    if l[0] == s[0]:\n        # recursively check if the remaining elements of the list and sublist are equal\n        return is_sublist(l[1:], s[1:])\n    else:\n        return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in Input:\n        if len(i) == 0:\n            count += 1\n        else:\n            count += 0\n    \n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Iterate through all tuples in the list\n    for tup in Input:\n        # Check if the length of the tuple is equal to all the other tuples in the list\n        if len(tup)!= len(Input):\n            # If any tuple is not equal in length, return False\n            return False\n    # If all tuples have equal length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input[0]) == len(Input[1]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    for i in Input:\n        if len(i)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Function to check if two tuples have equal length\n    def check_equal_length(t1, t2):\n        if len(t1) == len(t2):\n            return True\n        else:\n            return False\n\n    # Loop through each tuple in the input list\n    for t in Input:\n        # Check if the tuple has equal length\n        if not check_equal_length(t, t):\n            return False\n\n    # If we reach this point, all tuples have equal length\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Find the length of the first tuple in the list\n    first_length = len(Input[0])\n\n    # Loop through each tuple in the list\n    for tup in Input:\n        # If the length of the current tuple is not equal to the first tuple's length, return False\n        if len(tup)!= first_length:\n            return False\n\n    # If no tuple in the list has a different length than the first tuple, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    for tup in Input:\n        if len(tup)!= len(set(tup)):\n            return False\n    return True"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    n = len(nums)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j-gap] > nums[j]:\n                nums[j-gap], nums[j] = nums[j], nums[j-gap]\n                j -= gap\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n        gap //= 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    # loop until no swaps are made\n    while swapped:\n        # initialize swapped to false\n        swapped = False\n\n        # loop through each index in the list\n        for i in range(gap, n):\n            # if the current element is greater than the next element, swap them\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        # decrease the gap size by half\n        gap = int(gap / 1.3)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    '''\n    \n    # initialize the swapped flag and the gap\n    swapped = True\n    gap = len(nums) // 2\n    \n    # repeat until the swapped flag is False\n    while swapped:\n        swapped = False\n        # iterate over the array using a for loop\n        for i in range(gap):\n            # compare the current element with the next element\n            if nums[i] > nums[i+gap]:\n                # swap them if they're not in the correct order\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                # set the swapped flag to True\n                swapped = True\n        # shrink the gap by half\n        gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n\n    Parameters:\n    nums (list): A list of integers to sort.\n\n    Returns:\n    None: The list is sorted in-place using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n\n    while swapped:\n        swapped = False\n        gap = n // 2\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n        n = gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        swapped = False\n        gap = 1\n        for i in range(1, n):\n            if nums[i] < nums[i-1]:\n                nums[i], nums[i-1] = nums[i-1], nums[i]\n                swapped = True\n        n = n - 1\n        gap = int(gap/1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    This function implements the Comb Sort algorithm to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n        gap = min(gap, n)\n\n        for j in range(0, n-gap):\n            if nums[j] > nums[j+gap]:\n                nums[j], nums[j+gap] = nums[j+gap], nums[j]\n                swapped = True\n\n        n -= gap\n        gap = (gap * 10) // 13"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    i = 1\n    while swapped:\n        swapped = False\n        for j in range(0, n-i):\n            if nums[j] > nums[j+i]:\n                nums[j], nums[j+i] = nums[j+i], nums[j]\n                swapped = True\n        i += 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n\n    The Comb sort algorithm is an efficient in-place variation of the bubble sort algorithm. It works by repeatedly swapping adjacent elements if they are in the wrong order. The algorithm has a time complexity of O(n^2), but it can be improved to O(n log n) by using a randomized pivot selection.\n\n    Parameters:\n    nums (list): A list of elements to be sorted.\n\n    Returns:\n    A sorted list of elements.\n    '''\n\n    # Initialize variables\n    n = len(nums)\n    gap = n\n\n    # Main loop\n    while gap > 1:\n        # Calculate new gap\n        gap = int(gap / 1.3)\n\n        # Bubble sort with gap\n        for i in range(gap, n):\n            # Check if elements are in the wrong order\n            if nums[i] < nums[i - gap]:\n                # Swap elements\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n\n    # Return sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    gap = n\n    min_index = 0\n\n    while gap > 1 or gap < n:\n        if gap > n:\n            gap = gap // 1.3\n        else:\n            gap = 2 * gap + 1\n\n        min_index = 0\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                min_index = i + gap\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0 and n % (i**2) == 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # check if n is a positive integer\n    if not isinstance(n, int) or n < 0:\n        return \"Please enter a positive integer.\"\n    \n    # check if n can be expressed as the difference of two squares\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(1, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    if n == 1:\n        return True\n\n    for i in range(1, int(n**0.5)+1):\n        if n == i**2 + i:\n            return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Calculate the square of the number\n    square = n ** 2\n    \n    # Check if the square is a perfect square\n    is_perfect = True\n    for i in range(2, int(square ** 0.5) + 1):\n        if square % i!= 0:\n            is_perfect = False\n            break\n    \n    # Check if the square is divisible by 2\n    if square % 2 == 0 or is_perfect == False:\n        return False\n    \n    # Check if the difference between the square and the number is a perfect square\n    diff_square = square - n\n    for i in range(2, int(diff_square ** 0.5) + 1):\n        if diff_square % i!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, n//2 + 1):\n        if n - i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Loop through all the integers from 1 to n and check if they can be represented as the difference of two squares\n    for i in range(1, n+1):\n        # Calculate the square of the current integer\n        sqr = i*i\n        \n        # Check if the square is within the range of the number itself\n        if n - sqr >= 0 and n - sqr <= n:\n            # If it's within the range, check if it can be represented as the difference of two squares\n            # by checking if the square of the difference is also within the range of the number\n            diff = n - i*i\n            if diff*diff <= n:\n                print(f\"{n} can be represented as the difference of two squares, which are {i}^2 and {diff}^2.\")\n                return\n    \n    # If the loop completes without finding any valid combinations, it means that there is no way to represent n as the difference of two squares\n    print(f\"{n} cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    for i in range(int(n**0.5)):\n        for j in range(int(n**0.5)):\n            if i**2 + j**2 == n:\n                return True\n\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Convert the input number into a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Calculate the difference between squares of the digits\n    diff = sum([(digit ** 2) * (digit ** 2) for digit in digits])\n    # Check if the difference is a perfect square\n    if diff ** 0.5 == int(diff ** 0.5):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 1\n    while i*i <= n:\n        if n - i*i == i*i:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Loop through all possible values of a and b in the range [0, n)\n    for a in range(n):\n        # Check if a^2 + b^2 = n\n        if (a**2 + n - a - b)**2 == n:\n            # a^2 + b^2 = n^2\n            # b = sqrt(n^2 - a^2)\n            b = ((n**2 - a**2)**0.5)\n            # Check if a and b are both integers\n            if a == int(a) and b == int(b):\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_index = 0\n    for i in range(len(colors)):\n        if colors[i] == patterns[pattern_index]:\n            pattern_index += 1\n            if pattern_index == len(patterns):\n                return True\n        else:\n            pattern_index = 0\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # Check if the length of colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n    \n    # Create a dictionary to store the count of each color in colors array\n    color_count = {}\n    for color in colors:\n        if color in color_count:\n            color_count[color] += 1\n        else:\n            color_count[color] = 1\n    \n    # Check if the count of each color in patterns array matches the count in colors array\n    for pattern in patterns:\n        if pattern not in color_count:\n            return False\n        else:\n            color_count[pattern] -= 1\n            if color_count[pattern] == 0:\n                del color_count[pattern]\n    \n    # Check if there are any colors left in color_count dictionary\n    for count in color_count.values():\n        if count > 0:\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    # Create a dictionary to store the frequency of each color\n    freq = {}\n    for color in colors:\n        if color in freq:\n            freq[color] += 1\n        else:\n            freq[color] = 1\n\n    # Compare the frequency of each pattern with the frequency of each color\n    for pattern in patterns:\n        if freq[pattern[0]] == pattern[1]:\n            freq[pattern[2]] -= 1\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    # Check that the lengths of the colors and patterns arrays are equal\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a set of colors seen so far\n    seen_colors = set()\n\n    # Iterate through the patterns array\n    for pattern in patterns:\n        # Check if the pattern is a valid sequence of colors\n        if not all(color in seen_colors for color in pattern):\n            return False\n\n        # Add the colors in the pattern to the seen_colors set\n        seen_colors.update(pattern)\n\n    # If we reach this point, it means all colors were seen at least once in the patterns\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    for i in range(len(colors) - len(patterns) + 1):\n        for j in range(len(patterns)):\n            if colors[i+j]!= patterns[j]:\n                return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Checks whether it follows the sequence given in the patterns array.\n\n    Parameters:\n    colors (list): a list of colors\n    patterns (list): a list of patterns (sequences of colors)\n\n    Returns:\n    bool: whether it follows the sequence given in the patterns array\n    \"\"\"\n    for pattern in patterns:\n        if pattern!= colors:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    This function takes two lists of colors and patterns and checks whether the colors follow the given patterns.\n    '''\n    # Get the lengths of the two lists\n    n = len(colors)\n    m = len(patterns)\n\n    # Check if the number of patterns is same as number of colors\n    if m!= n:\n        return False\n\n    # Check if the patterns are all valid\n    for pattern in patterns:\n        if len(pattern)!= m:\n            return False\n\n    # Check if the colors follow the patterns\n    for i in range(n):\n        if colors[i] not in patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors_list = list(colors)\n    patterns_list = list(patterns)\n    patterns_list.append(patterns_list[0])\n    for i in range(1, len(colors_list)):\n        if colors_list[i] == colors_list[i-1]:\n            patterns_list[i] = patterns_list[i-1]\n        else:\n            break\n    return patterns_list == patterns_list[1:]"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Create a dictionary to store the color count for each pattern\n    pattern_colors = {}\n\n    # Loop through each pattern in the patterns array\n    for pattern in patterns:\n\n        # Check if the pattern is already in the dictionary\n        if pattern in pattern_colors:\n\n            # Increment the count for the pattern in the dictionary\n            pattern_colors[pattern] += 1\n\n        else:\n\n            # Add the pattern to the dictionary with a count of 1\n            pattern_colors[pattern] = 1\n\n    # Create a list to store the color count for each color\n    color_counts = [0] * len(colors)\n\n    # Loop through each color in the colors array\n    for color in colors:\n\n        # Check if the color is in the dictionary of colors and its count in the dictionary matches the color count in the color_counts list\n        if color in pattern_colors and pattern_colors[color] == color_counts[color]:\n\n            # Increment the count for the color in the color_counts list\n            color_counts[color] += 1\n\n        # If the color is not in the dictionary or its count does not match the color count in the color_counts list, return False\n        else:\n\n            return False\n\n    # If all colors are matched and the color_counts list is not all 0, return False\n    if color_counts!= [0] * len(colors):\n\n        return False\n\n    # If the color counts are all 0, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Check whether the colors in the given sequence are the same as the patterns in the patterns array.\n    '''\n    for pattern in patterns:\n        if colors[:len(pattern)]!= pattern:\n            return False\n        colors = colors[len(pattern):]\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i] + test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if all(x % K == 0 for x in test_list[i]) and all(x % K == 0 for x in test_list[j]):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    # initialize an empty list to store the result\n    result = []\n\n    # loop through each tuple in the given list\n    for t in test_list:\n        # initialize a boolean variable to keep track of if all elements are divisible by K\n        is_divisible = True\n\n        # loop through each element in the tuple\n        for e in t:\n            # check if the element is not divisible by K\n            if e % K!= 0:\n                # if any element is not divisible, set is_divisible to False and break out of the loop\n                is_divisible = False\n                break\n\n        # if all elements are divisible by K, append the tuple to the result list\n        if is_divisible:\n            result.append(t)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Initialize an empty list to store the tuples which have all elements divisible by K\n    divisible_tuples = []\n    # Iterate through each tuple in the input list\n    for tup in test_list:\n        # Check if the elements of the tuple are all divisible by K\n        if all(x % K == 0 for x in tup):\n            # If the tuple is divisible, add it to the divisible_tuples list\n            divisible_tuples.append(tup)\n    # Return the list of divisible tuples\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        if all(num % K == 0 for num in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    # Filter the list of tuples to only include tuples with all elements divisible by K\n    filtered_list = list(filter(lambda x: all(elem % K == 0 for elem in x), test_list))\n\n    # Return the filtered list of tuples\n    return filtered_list"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    result = []\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns a boolean value indicating whether it is divisible by 11 or not.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(word, \"is an even length word\")\n        else:\n            print(word, \"is an odd length word\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s.split()[0]) % 2 == 1:\n        return 'The length of the word is odd'\n    else:\n        return 'The length of the word is even'"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split()[0]\n    if len(word) % 2 == 0:\n        return \"The length of the word is even.\"\n    else:\n        return \"The length of the word is odd.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            return\n    print(\"The length of the word is even.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() #split the string into words\n    for word in words:\n        if len(word)%2!=0: #check if length of word is odd\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n    return \"The length of all words are even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    \n    for word in s.split():\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n        else:\n            return \"The length of the word is even.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #split the string into words\n    words = s.split()\n    #loop through each word and check its length\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"Even length word\"\n        else:\n            return \"Odd length word\"\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Find the number of 2-digit numbers in the range [100, 999]\n    num_2_digits = 0\n    for i in range(100, 1000):\n        num_digits = 0\n        while i > 0:\n            num_digits += 1\n            i //= 10\n        if num_digits == 2:\n            num_2_digits += 1\n            if num_2_digits == n:\n                return i"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        return n * (4 * n - 1)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return 4 * (3 * n ** 2 - 1) / 2"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * (n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 1\n    c = 0\n    d = 0\n    # Loop through the numbers up to n\n    for i in range(1, n+1):\n        # Calculate the next tetrahedral number\n        tetrahedral = 6*a**2 + 12*b**2 + 8*c**2 - 12*d**2\n        # Update variables\n        a += 1\n        b += 1\n        c += 2\n        d = tetrahedral - (a*b*c)\n    return tetrahedral"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def tetrahedron_sum(n):\n        '''\n        Write a function to calculate the sum of the n-th tetrahedron.\n        '''\n        def tri_sum(n):\n            '''\n            Write a function to calculate the sum of the n-th triangle.\n            '''\n            return n*(n+1)\n\n        def tetrahedron(n):\n            '''\n            Write a function to create the n-th tetrahedron.\n            '''\n            return '({},{},{},{})'.format(n, n*(n+1), tri_sum(n), tri_sum(n+1))\n\n        return tetrahedron(n)\n\n    return tetrahedron_sum(n)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    # Define the first tetrahedral number\n    first_tetrahedral = 0\n    \n    # Loop through all values of n starting from 1\n    for i in range(1, n+1):\n        # Calculate the value of the i-th tetrahedral number\n        tetrahedral = 4*i**3 - 2*i**2 + 1\n        \n        # Print the value of the i-th tetrahedral number\n        print(tetrahedral)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Convert n to float for decimal points\n    n = float(n)\n    \n    # First term of the series\n    a = 1\n    \n    # Second term of the series\n    b = -1\n    \n    # Third term of the series\n    c = n\n    \n    # Fifth term of the series\n    d = 0\n    \n    # Find the nth term of the series\n    nth_term = a + b + c + d\n    \n    # Print the nth term of the series\n    print(nth_term)"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * i * i\n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return \"Invalid input.\"\n    \n    a = 1\n    b = 1\n    c = 4\n    d = 6\n    \n    for i in range(n):\n        a, b, c, d = b, c, a+b+c+d\n        \n    return d"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius r and returns the volume of a sphere with that radius.\n    '''\n    # Calculate the volume of a sphere using the formula V = (4/3) * pi * r^3\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = (4/3) * math.pi * r**3\n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function takes a radius of a sphere as input and returns the volume of the sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    volume = (4/3)*pi*r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    return (4/3)*pi*(r**3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr((ascii_value % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through each character of the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_val = ord(char)\n        # Add the ASCII value to the sum variable\n        sum += ascii_val\n    # Convert the sum variable to its character value\n    char_val = chr((sum % 26) + 65)\n    # Return the character value\n    return char_val"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for char in strr:\n        char = ord(char)\n        char = char % 26\n        char = chr(char)\n        char = chr(ord(char.upper()) + 64)\n        if char.isalpha():\n            return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    # Initialize a variable to store the result\n    char = 0\n    \n    # Iterate through the string and add the ASCII value of each character modulo 26 to the result\n    for i in range(len(strr)):\n        char += ord(strr[i]) % 26\n    \n    # Return the result as a character\n    return chr(char)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for char in strr:\n        sum += ord(char)\n    return chr((sum % 26) + ord('a'))\n"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    char_ascii = sum_ascii % 26\n    char = chr(char_ascii + 97)\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    char_val = ascii_sum % 26\n    char_val = chr(65 + char_val)\n    return char_val"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # Initialize a variable to store the sum of ASCII values of characters in the string\n    sum_ascii = 0\n    \n    # Loop through each character in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value of the character to the sum\n        sum_ascii += ascii_value\n        \n    # Calculate the final character by taking the remainder of the sum_ascii divided by 26\n    char_value = sum_ascii % 26\n    \n    # Return the character in the final position by converting its ASCII value to its character representation\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n    char_ascii = (char_value % 26) + ord('A')\n    return chr(char_ascii)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr(ascii_value % 26 + ord('a'))"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]  # initialize the sequence with the first two numbers\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])  # calculate the next number in the sequence\n    return sequence[n]  # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # initialize the sequence with the first two numbers\n    sequence = [1, 1]\n\n    # calculate the nth number in the sequence\n    for i in range(2, n+1):\n        # calculate the next number in the sequence using the formula: next_num = (1/8) * (current_num^3)\n        next_num = (1/8) * (sequence[i-1]**3)\n        # add the next number to the sequence\n        sequence.append(next_num)\n\n    # return the nth number in the sequence\n    return sequence[n]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize the first two numbers of the sequence\n    a, b = 1, 1\n\n    # Loop n-1 times and calculate the nth number in the sequence\n    for i in range(1, n):\n        # Calculate the next number in the sequence using the formula:\n        # nth number = (a + b) % 2\n        c = (a + b) % 2\n        \n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth number in the sequence\n    return b"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1, 1]\n    for i in range(2, n):\n        if (i % 2) == 0:\n            sequence.append(sequence[i-2] * 2)\n        else:\n            sequence.append(sequence[i-2] + sequence[i-1])\n    return sequence[-1]\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes in a radius of a sphere and returns the surface area of the sphere.\n    '''\n    area = (4/3)*math.pi*(r**3)\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3) * math.pi * (r ** 3)\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function finds the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function takes a radius r and returns the surface area of a sphere.\n    '''\n    pi = math.pi\n    return 4*pi*(r**2)"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = (4 * math.pi * r ** 2)\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # first centered hexagonal number is 1\n    if n == 1:\n        return 1\n    \n    # centered hexagonal number is (n/2) + 1\n    centered_hex = (n/2) + 1\n    \n    # return centered hexagonal number\n    return centered_hex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n    \"\"\"\n    # Base case: the first centered hexagonal number is 1\n    if n == 0:\n        return 1\n\n    # Base case: the second centered hexagonal number is 6\n    elif n == 1:\n        return 6\n\n    # Base case: the third centered hexagonal number is 12\n    elif n == 2:\n        return 12\n\n    # Base case: the nth centered hexagonal number is (3*n^2) - 1\n    else:\n        return (3*n**2) - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Define the function to calculate centered hexagonal number\n    def centered_hexagonal(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 7\n        else:\n            return centered_hexagonal(n-1) + centered_hexagonal(n-2)\n\n    # Call the centered hexagonal function and return the result\n    return centered_hexagonal(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the first centered hexagonal number\n    first_centered_hexagonal = 1\n\n    # Initialize the result variable\n    result = 0\n\n    # Loop through the number of iterations\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number\n        centered_hexagonal = 2 * first_centered_hexagonal + 1\n\n        # Add the centered hexagonal number to the result\n        result += centered_hexagonal\n\n        # Update the first centered hexagonal number\n        first_centered_hexagonal = centered_hexagonal\n\n    # Return the result\n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize variables\n    hexagonal_number = 1\n    centered_hexagonal_number = 0\n\n    # Loop through n iterations to find centered hexagonal number\n    for i in range(n):\n\n        # Check if centered hexagonal number is odd or even\n        if i % 2 == 0:\n            centered_hexagonal_number += hexagonal_number\n\n        # Increment hexagonal number\n        hexagonal_number += 2\n\n    return centered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. n must be a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        # Find the sum of the centered hexagonal numbers from 1 to n-1\n        sum_of_centered_hexagonal_numbers = 1 + 1.5 * n - 0.5 * (n * (n - 1))\n        return int(sum_of_centered_hexagonal_numbers)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n    # Calculate n^2 + 1 for centered hexagonal numbers\n    hexagon_num = n**2 + 1\n    # Calculate the number of extra terms to add to get centered hexagonal number\n    extra_terms = (n*n + 1) // 2\n    # Calculate the sum of the centered hexagonal number and the extra terms\n    centered_hexagonal_sum = hexagon_num + extra_terms\n    # Return the centered hexagonal number\n    return centered_hexagonal_sum"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Args:\n        n (int): The index of the centered hexagonal number.\n\n    Returns:\n        int: The nth centered hexagonal number.\n    \"\"\"\n    # Calculate the distance from the center of the grid\n    distance = 2*n - 1\n\n    # Calculate the distance from the center of the central hexagon\n    central_hexagon_distance = 2*n + 1\n\n    # Calculate the hexagonal number of the center\n    center_hexagon_number = distance // 6\n\n    # Calculate the hexagonal number of the nth hexagon\n    hexagon_number = center_hexagon_number + n\n\n    # Calculate the value of the nth centered hexagonal number\n    hexagonal_number = (central_hexagon_distance * 2**hexagon_number) // (2*distance + 1)\n\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Initialize the variables\n    first = 1\n    second = 6\n    third = 12\n\n    # Calculate the centered hexagonal number\n    for i in range(1, n+1):\n        # Update the first and third variables\n        first = second - first\n        third = third + first\n\n        # Update the second variable\n        second = 6 * first + 6 * second\n\n    # Return the centered hexagonal number\n    return second"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize the first and second centered hexagonal numbers\n    a = 1\n    b = 1\n    \n    # Loop through each term\n    for i in range(2, n+1):\n        # Calculate the next centered hexagonal number\n        c = (a + b) // 2\n        \n        # Print the centered hexagonal number\n        print(c)\n        \n        # Update the values of a and b for the next iteration\n        a = b\n        b = c"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merges three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary\n    that contains all the keys and values from all three dictionaries.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key in merged_dict:\n            merged_dict[key].update(dict2[key])\n        else:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key in merged_dict:\n            merged_dict[key].update(dict3[key])\n        else:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    :param dict1: First dictionary to be merged.\n    :param dict2: Second dictionary to be merged.\n    :param dict3: Third dictionary to be merged.\n    :return: A single dictionary containing all the key-value pairs from the three dictionaries.\n    \"\"\"\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    return dict(merged_dict)"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for key in dict1.keys():\n        merged_dict[key] = dict1[key]\n    for key in dict2.keys():\n        merged_dict[key] = dict2[key]\n    for key in dict3.keys():\n        merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    for key,value in dict2.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    for key,value in dict3.items():\n        if key not in merged_dict:\n            merged_dict[key] = value\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Parameters:\n    dict1 (dict): first dictionary to merge\n    dict2 (dict): second dictionary to merge\n    dict3 (dict): third dictionary to merge\n\n    Returns:\n    dict: merged dictionary\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in list1:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # create an empty dictionary to store the frequency count\n    freq_dict = {}\n    # loop through each element in the list\n    for element in list1:\n        # if the element is already in the dictionary, increment its frequency count by 1\n        if element in freq_dict:\n            freq_dict[element] += 1\n        # if the element is not in the dictionary, add it with a frequency count of 1\n        else:\n            freq_dict[element] = 1\n    # return the dictionary of frequency counts\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the list and update the frequency of each element in the dictionary\n    for element in list1:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n_list = list(range(N))\n    n_list.remove(N)\n    min_diff = float('inf')\n    min_num = None\n    for num in n_list:\n        diff = abs(N - num)\n        if diff < min_diff:\n            min_diff = diff\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize variables\n    smallest = float('inf')\n    closest = float('inf')\n    # Loop through all numbers between 1 and N\n    for i in range(1, N+1):\n        # Check if the current number is smaller than the smallest number seen so far\n        if i < smallest:\n            # If it is, update the smallest number and closest number\n            smallest = i\n            closest = smallest\n        # Check if the current number is equal to the smallest number seen so far\n        elif i == smallest:\n            # If it is, update the closest number\n            closest = smallest\n    # Return the closest number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    smallest = N\n    smallest_diff = abs(N - smallest)\n    closest = smallest\n\n    # Loop through all numbers from N-1 to 0\n    for i in range(N-1, -1, -1):\n        # Calculate the difference between the current number and the smallest number\n        diff = abs(i - smallest)\n\n        # If the current number is smaller and closer to the smallest number than the current closest number, update the closest number\n        if diff < smallest_diff and i < closest:\n            smallest_diff = diff\n            closest = i\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower_bound = 1\n    upper_bound = N\n    while upper_bound - lower_bound > 1:\n        mid_num = (upper_bound + lower_bound) // 2\n        if N - mid_num < mid_num - N:\n            lower_bound = mid_num\n        else:\n            upper_bound = mid_num\n    return upper_bound"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [int(x) for x in input(\"Enter the numbers separated by space: \").split()]\n    num_set = set(nums)\n    closest_num = float('inf')\n    \n    for num in num_set:\n        if num > N:\n            if abs(num - N) < abs(closest_num - N):\n                closest_num = num\n    \n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    min_num = float('inf')\n    for num in range(1, N):\n        if abs(N-num) < abs(min_num-num):\n            min_num = num\n    return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    lower = 1\n    upper = N\n    while lower <= upper:\n        mid = (lower + upper) // 2\n        if mid < N:\n            lower = mid + 1\n        elif mid > N:\n            upper = mid - 1\n        else:\n            return mid\n    return N"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    # Initialize the smallest and largest numbers to n\n    smallest = N\n    largest = N\n    \n    # Iterate through all the numbers from n-1 to 0\n    for i in range(N-1, -1, -1):\n        # If the current number is smaller than the smallest number\n        if i < smallest:\n            smallest = i\n        # If the current number is larger than the largest number\n        elif i > largest:\n            largest = i\n            \n    # Find the absolute difference between the smallest and largest numbers\n    diff = abs(smallest - largest)\n    \n    # Return the smaller number if it's closer to n than the largest number\n    if smallest < N:\n        return smallest\n    # Return the largest number if it's closer to n than the smallest number\n    else:\n        return largest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = []\n    min_diff = float('inf')\n    closest = None\n\n    for num in range(1, N):\n        diff = abs(num - N)\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize the variable closest to the smallest number in the list\n    closest = min(N)\n\n    # Loop through the list and find the smallest number greater than or equal to the closest number\n    for num in N:\n        if num >= closest:\n            closest = num\n\n    # Return the closest smaller number than n\n    return closest"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list of words.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = \"\"\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            word = i\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a given list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word in a list.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = []\n    for word in list1:\n        words.append(word.strip().lower())\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if string in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, list) and isinstance(sub_str, str):\n        for item in str1:\n            if item in sub_str:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Convert the list of string values into a set to remove duplicates\n    str1 = list(set(str1))\n    # Convert the substring to a set to remove duplicates\n    sub_str = list(set(sub_str))\n    # Loop through the list of string values and check if any of them contain the substring\n    for string in str1:\n        if sub_str in string:\n            return True\n    # If no substring is found, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            print(\"Substring found in string:\", string)\n            return True\n    print(\"Substring not found in any string.\")\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for s in str1:\n        if s in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        if sub_str in str1:\n            return True\n        else:\n            return False\n    else:\n        return \"Both arguments must be strings.\""
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        print(\"Substring found\")\n    else:\n        print(\"Substring not found\")"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"The number is not undulating.\"\n    else:\n        return \"The number is undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0 or n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return is_undulating((n - 1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1 or n == 2:\n        return True\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # To check whether a number is undulating or not, we need to check if it is divisible by 2, 3 or 5.\n    if n % 2 == 0 or n % 3 == 0 or n % 5 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    # Check if the number is less than or equal to 0\n    if n <= 0:\n        return False\n    \n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n    \n    # Check if the number is an odd multiple of 3\n    if n % 3 == 0 and n % 2 == 1:\n        return True\n    \n    # Check if the number is an even multiple of 5\n    if n % 5 == 0 and n % 2 == 0:\n        return True\n    \n    # If none of the above conditions are met, then the number is not undulating\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    \"\"\"\n    This function checks whether a given number is undulating or not.\n\n    Parameters:\n    n (int): A positive integer to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n\n    \"\"\"\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return is_undulating(n-1)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return \"Even numbers are undulating.\"\n    else:\n        return \"Odd numbers are undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # Define the first and last even numbers in the sequence\n    first_even = 2\n    last_even = 2*n\n\n    # Check if the first even number is divisible by 2 or not\n    if first_even % 2 == 0:\n        # If it is divisible by 2, then it is an odd number, so it cannot be undulating\n        return False\n    else:\n        # If it is not divisible by 2, then it is an even number, so it can be undulating\n        return True\n\n    # If it reaches here, then the first even number is odd, so it cannot be undulating\n    return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    This function takes two arguments: a and b. It calculates the value of a to the power of b and returns the result.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b % 2 == 0:\n        return power(a*a, b//2)\n    else:\n        return a*power(a*a, b-1)"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: itemgetter(1, 0)(test_list[i]))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    \"\"\"\n    return min(range(len(test_list)), key=lambda i: test_list[i][1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Return the first value of the smallest tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return min_index"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for index, element in enumerate(test_list):\n        if element[1] < test_list[min_index][1]:\n            min_index = index\n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')  # initialize the minimum length to infinity\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Initialize the smallest length to the length of the first list in the list of lists\n    smallest_length = len(lst[0])\n    # Iterate through the list of lists\n    for i in range(len(lst)):\n        # Check if the length of the current list is smaller than the smallest length\n        if len(lst[i]) < smallest_length:\n            smallest_length = len(lst[i])\n    # Return the smallest length\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lengths = []\n    for sublist in lst:\n        lengths.append(len(sublist))\n    min_len = min(lengths)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n\n    min_length = float('inf')  \n    for sublist in lst:  \n        if len(sublist) < min_length:  \n            min_length = len(sublist)  \n\n    return min_length  "
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    smallest_length = len(lst[0])  # Initialize smallest length as length of first list\n    for lst_in_list in lst:  # Loop through all lists in input list\n        if len(lst_in_list) < smallest_length:  # If list in input list has smaller length\n            smallest_length = len(lst_in_list)  # Update smallest length to that of current list\n    return smallest_length  # Return the smallest length\n"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # initialize variable to store the minimum length\n    min_len = float('inf')\n    \n    # iterate over each sublist in the list\n    for sublist in lst:\n        # check if the length of the sublist is less than the current minimum length\n        if len(sublist) < min_len:\n            # update the minimum length\n            min_len = len(sublist)\n            \n    # return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    This function takes a list of lists as an input and returns the length of the smallest list in the list.\n    '''\n    min_len = float('inf')  # initializing the minimum length variable to infinity\n    for i in range(len(lst)):  \n        if len(lst[i]) < min_len:  # checking if the length of the list at index i is less than the current minimum length\n            min_len = len(lst[i])  # updating the minimum length variable to the length of the list at index i\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    This function returns the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize count to 0\n    count = 0\n    # loop from 1 to square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # if n is divisible by i, increment count\n        if n % i == 0:\n            count += 1\n    # return count\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i = 1\n    count = 0\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            count += 1\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    div_count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n    return div_count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    \n    # Iterate through each list in the list of lists\n    for lst in list1:\n        # Iterate through each element in the current list\n        for elem in lst:\n            # If the element is already in the dictionary, increment its count by 1\n            if elem in freq_dict:\n                freq_dict[elem] += 1\n            # If the element is not in the dictionary, add it with a count of 1\n            else:\n                freq_dict[elem] = 1\n    \n    # Return the final dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(item)\n        else:\n            flattened_list.append(item)\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    \"\"\"\n    # Use a dictionary to store frequency of each element in the flattened list of lists\n    frequency = {}\n    for item in list1:\n        if isinstance(item, list):\n            for inner_item in item:\n                if inner_item not in frequency:\n                    frequency[inner_item] = 1\n                else:\n                    frequency[inner_item] += 1\n        else:\n            if item not in frequency:\n                frequency[item] = 1\n            else:\n                frequency[item] += 1\n    return frequency"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # create a dictionary to store the frequency of each element\n    freq_dict = {}\n    # loop through each element in the list\n    for item in list1:\n        # if the item is already in the dictionary, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # if the item is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequencies\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for sub_item in item:\n                freq_dict[sub_item] = freq_dict.get(sub_item, 0) + 1\n        else:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary\n    freq_dict = {}\n    # Loop through each element in the list\n    for elem in list1:\n        # If the element is not already a key in the dictionary, add it with a value of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # If the element is already a key in the dictionary, increment its value by 1\n        else:\n            freq_dict[elem] += 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result //= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    # initialize an empty string to store the binary equivalent\n    binary_string = ''\n    \n    # loop through the decimal number from right to left\n    while n > 0: \n        # take the last digit of the decimal number and convert it to binary\n        last_digit = n % 2 \n        # append the binary digit to the string\n        binary_string = str(last_digit) + binary_string \n        # remove the last digit from the decimal number\n        n = n // 2 \n    \n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    if n == 0:\n        return \"0\"\n    elif n % 2 == 0:\n        return decimal_to_binary(n // 2) + \"0\"\n    else:\n        return decimal_to_binary(n // 2) + \"1\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # Base case for the recursion\n    if n == 0: \n        return \"0\"\n\n    # Recursive case\n    else: \n        # Convert the last digit to binary\n        remainder = n % 2\n        binary_digit = decimal_to_binary(n//2)\n\n        # Add the last digit to the binary string\n        return str(remainder) + binary_digit"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # check if input is an integer\n    if not isinstance(n, int): \n        raise TypeError('Input must be an integer')\n    \n    # initialize an empty string to store binary equivalent\n    binary = ''\n    \n    # loop through each bit of the decimal number and convert it to a binary digit\n    while n > 0: \n        # get the remainder of dividing n by 2 and convert it to an integer\n        digit = n % 2\n        \n        # add the binary digit to the beginning of the binary string\n        binary = str(digit) + binary\n        \n        # divide n by 2 to remove the last digit\n        n = n // 2\n    \n    # check if the binary string has any leading zeros and remove them if necessary\n    if binary[0] == '0': \n        binary = binary[1:]\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    # initialize empty binary string\n    binary_string = ''\n    # loop through each digit of the decimal number\n    for i in range(10):\n        # extract the current digit and multiply by 2 raised to the power of the loop index\n        current_digit = n // (2 ** i)\n        # add the current digit to the binary string\n        binary_string += str(current_digit)\n        # remove the leftmost bit of the decimal number, effectively shifting it to the right by 1\n        n = (n - current_digit * (2 ** i)) % (2 ** i)\n    # return the binary string\n    return binary_string"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # create a list of digits for the given number\n    digits = [int(d) for d in str(num)]\n    # create a list of digits for the next smallest palindrome number\n    palindrome_digits = []\n    # for each digit in the given number\n    for digit in digits:\n        # if the digit is odd, add it to the palindrome\n        if digit % 2!= 0:\n            palindrome_digits.append(digit)\n        # if the digit is even, check if it is part of the next smallest palindrome number\n        else:\n            # initialize a variable to keep track of the largest even digit in the current palindrome\n            largest_even_digit = -1\n            # for each digit in the current palindrome\n            for d in palindrome_digits:\n                # if the digit is even and larger than the largest even digit found so far, update the largest even digit\n                if d % 2 == 0 and d > largest_even_digit:\n                    largest_even_digit = d\n            # add the current digit to the palindrome if it is the largest even digit\n            if digit > largest_even_digit:\n                palindrome_digits.append(digit)\n    # convert the palindrome digits list to an integer and return it\n    return int(''.join(str(d) for d in palindrome_digits))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a given number is palindrome or not.\n    '''\n    temp = num\n    reverse = 0\n    while temp > 0:\n        remainder = temp % 10\n        reverse = reverse * 10 + remainder\n        temp //= 10\n    return num == reverse\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    min_num = 10**(num-1)\n    max_num = 10**num - 1\n    if is_palindrome(min_num):\n        min_num += 1\n    if is_palindrome(max_num):\n        max_num -= 1\n    \n    for i in range(min_num, max_num+1):\n        if is_palindrome(i) and (i - min_num) < (max_num - i):\n            return i\n    \n    return -1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the input is a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    \n    # Remove the last digit from the input and check if the result is a palindrome\n    new_num = num // 10\n    if new_num == int(str(new_num)[::-1]):\n        return new_num * 10\n    \n    # Remove the last digit from the input and check if the result is a palindrome\n    new_num = num // 100\n    if new_num == int(str(new_num)[::-1]):\n        return new_num * 100\n    \n    # Remove the last digit from the input and check if the result is a palindrome\n    new_num = num // 1000\n    if new_num == int(str(new_num)[::-1]):\n        return new_num * 1000\n    \n    # If the input is greater than 9999, raise an error\n    if num > 9999:\n        raise ValueError(\"Input cannot be greater than 9999\")\n    \n    # Find the last digit of the input\n    last_digit = num % 10\n    \n    # Find the next smallest palindrome by incrementing the last digit and multiplying it by 10\n    while True:\n        new_num = num // 10 + last_digit + 1\n        if new_num < 10:\n            break\n        num = new_num\n    \n    return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # convert the input integer to string\n    num_str = str(num)\n    # reverse the string\n    reverse_num_str = num_str[::-1]\n    # convert the reversed string to integer\n    reverse_num = int(reverse_num_str)\n    # add 1 to the original integer\n    next_num = num + 1\n    # convert the next integer to string\n    next_num_str = str(next_num)\n    # reverse the string\n    reverse_next_num_str = next_num_str[::-1]\n    # convert the reversed string to integer\n    reverse_next_num = int(reverse_next_num_str)\n    # compare the two numbers\n    if reverse_num > reverse_next_num:\n        # return the next number\n        return reverse_next_num\n    else:\n        # return the original number\n        return num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the number is less than or equal to 1\n    if num <= 1:\n        return num\n    \n    # create a list of digits in the number\n    digits = [int(d) for d in str(num)]\n    \n    # loop through all possible permutations of digits\n    for i in range(1, len(digits)):\n        # swap the i-th digit with the last digit\n        digits[i], digits[-1] = digits[-1], digits[i]\n        \n        # reverse the first i-1 digits\n        digits[:i] = digits[:i][::-1]\n        \n        # convert the reversed digits back to a number and check if it's a palindrome\n        num = int(''.join(map(str, digits)))\n        if num < 10**9 and is_palindrome(num):\n            return num\n    \n    # if no palindrome is found, return the smallest possible palindrome greater than num\n    return max(num+1, 10**(len(str(num))+1)-1)\n\n\ndef is_palindrome(num):\n    '''\n    Check if a number is a palindrome.\n    '''\n    # create a string from the number and reverse it\n    reversed_str = ''.join(map(str, num))[::-1]\n    \n    # convert the reversed string back to an integer and check if it's equal to the original number\n    return int(reversed_str) == num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(num):\n    # Convert the integer to a string and reverse it\n    reverse_num = int(str(num)[::-1])\n    # Check if the original number is equal to its reverse\n    return num == reverse_num\n\ndef next_smallest_palindrome(num):\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        # If it is, find the next smallest palindrome\n        for i in range(num-1, -1, -1):\n            if is_palindrome(i):\n                return i\n        # If there are no more palindromes, return None\n        return None\n    # Check if the number is odd\n    if num % 2 == 1:\n        # If it is, find the next even number greater than the number\n        for i in range(num+1, 2*num+1, 2):\n            if is_palindrome(i):\n                return i\n        # If there are no more even numbers, return None\n        return None\n    # If the number is even, find the next odd number greater than the number\n    for i in range(num+1, 2*num+1, 2):\n        if is_palindrome(i):\n            return i\n    # If there are no more odd numbers, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Reverse the string\n    reversed_str = num_str[::-1]\n    # Check if the reversed string is a palindrome\n    if reversed_str == reversed_str[::-1]:\n        # If it is, find the next smallest palindrome\n        next_num = int(num_str) + 1\n    else:\n        # If it's not, find the next largest palindrome that's smaller than the original number\n        next_num = int(reversed_str) - 1\n    return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome.\n    \"\"\"\n    # Initialize a variable to store the palindrome of the given number\n    palindrome = str(num)\n\n    # Reverse the palindrome string\n    reversed_palindrome = palindrome[::-1]\n\n    # Convert the reversed palindrome string to an integer\n    reversed_num = int(reversed_palindrome)\n\n    # Add one to the reversed integer to get the next smallest palindrome\n    next_smallest_num = reversed_num + 1\n\n    # Check if the next smallest palindrome is greater than the given number\n    if next_smallest_num > num:\n        return next_smallest_num\n    else:\n        # If the next smallest palindrome is not greater than the given number,\n        # call the function recursively with the next number as the input\n        return next_smallest_palindrome(next_smallest_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(num)\n    # Convert the string to a list of characters\n    char_list = list(num_str)\n    # Reverse the list of characters\n    char_list.reverse()\n    # Convert the reversed list back to a string\n    num_str = ''.join(char_list)\n    # Convert the string back to an integer\n    num_str = int(num_str)\n    # Find the next smallest palindrome\n    while num_str > 0 and num_str % 10 == 0:\n        num_str *= 10\n    return num_str"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the given number is already a palindrome\n    if num == int(str(num)[::-1]):\n        return num + 1\n    else:\n        # Find the largest palindrome less than or equal to the given number\n        while True:\n            num += 1\n            if int(str(num)[::-1]) > num:\n                return num"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid index\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    left, right = 1, n\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid - 1] < arr[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return arr[left - 1]\n"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        raise ValueError('The array is empty')\n    # Check if the k is valid\n    if k <= 0 or k > len(arr):\n        raise ValueError('The k is invalid')\n\n    # Find the pivot index\n    pivot_index = len(arr) // 2\n\n    # Find the pivot element\n    pivot = arr[pivot_index]\n\n    # Create two pointers to traverse the array\n    left = 0\n    right = len(arr) - 1\n\n    # Traverse the array until the pointers meet\n    while left <= right:\n        # Increment the left pointer until the element to the left of the pivot is greater\n        while arr[left] < pivot:\n            left += 1\n        # Decrement the right pointer until the element to the right of the pivot is less\n        while arr[right] > pivot:\n            right -= 1\n        # If the pointers meet, the pivot element is at the kth position\n        if left <= right:\n            # Swap the elements at the left and right pointers\n            arr[left], arr[right] = arr[right], arr[left]\n            # Increment the left and decrement the right pointers\n            left += 1\n            right -= 1\n            # If the kth position is found, return the pivot element\n            if k == 1:\n                return pivot\n            # Decrement the k\n            k -= 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = 0\n        right = len(arr) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if mid == k - 1:\n                return arr[mid]\n            elif mid < k - 1:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return arr[right]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if k > n:\n        print(\"Invalid input. k is greater than the length of the array.\")\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and the 1-based index of the kth element to find.\n    The function then uses binary search to find and return the kth element in the array.\n    '''\n\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left = kth_element(arr[:len(arr)//2], k)\n        right = kth_element(arr[len(arr)//2:], k-len(arr)//2)\n        return left if left is not None else right"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    This function finds the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    else:\n        for i in range(1, len(arr) + 1):\n            if i == k:\n                return arr[i-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Calculate the length of the array\n    n = len(arr)\n\n    # If the k is greater than or equal to the length of the array, return None\n    if k >= n:\n        return None\n\n    # If the k is less than or equal to 1, return the first element of the array\n    if k <= 1:\n        return arr[0]\n\n    # Use binary search to find the kth element\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    # If kth element is not found, return None\n    return None"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return words[0] + ''.join([word.capitalize() for word in words[1:]])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join([word[0].upper(), word[1:].lower()])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_word += word[i].lower()\n        elif i == len(word) - 1 and word[i].isupper():\n            camel_word += word[i].lower()\n        else:\n            camel_word += word[i].upper()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    # convert the snake case string to a list of words\n    words = word.split('_')\n    # initialize an empty camel case string\n    camel_case = ''\n    # loop through each word in the list\n    for i in range(len(words)):\n        # if the current word is the first word, capitalize it and append it to the camel case string\n        if i == 0:\n            camel_case += words[i].capitalize()\n        # if the current word is not the first word, append it to the camel case string without capitalization\n        else:\n            camel_case += words[i]\n    # return the camel case string\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if word[i].isupper():\n            camel_case += word[i].upper()\n        else:\n            camel_case += word[i].lower()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in range(len(word)):\n        if i == 0:\n            camel_case += word[i].lower()\n        elif i > 0 and word[i-1]!= \"_\":\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Convert the snake case to camel case\n    camel_case = ''.join([word[0].lower(), word[1:]])\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case = \"\"\n    words = word.split(\"_\")\n    for i, w in enumerate(words):\n        if i == 0:\n            camel_case += w.lower()\n        else:\n            camel_case += w.capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into words\n    words = word.split('_')\n\n    # Capitalize the first letter of each word except for the first one\n    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]\n\n    # Join the camel case words back into a string\n    camel_case_word = ''.join(camel_case_words)\n\n    return camel_case_word"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return ((n * (m * (m + 1)) // 2) - ((n - 1) * (m * (m + 1) // 2))) // (m * (m + 1) // 2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m == 0:\n        return 0\n    else:\n        return (2 * n) - 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 0:\n        return 1\n    \n    # recursive case\n    return (m * eulerian_num(n-1, m)) + (n * eulerian_num(n-1, n-m))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Calculate the number of edges of a triangle\n    num_edges = n * (n - 1) // 2\n    \n    # Calculate the number of edges of a square\n    num_squares = (m * m - m // 2) * (m * m - m // 2 + 1) // 2 // 2\n    \n    # Calculate the number of edges of a pentagon\n    num_pentagons = 5 * (5 * n - 3 * n ** 2 + n ** 3) // 6\n    \n    # Calculate the number of edges of a hexagon\n    num_hexagons = 6 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a heptagon\n    num_heptagons = 10 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a octagon\n    num_octagons = 12 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a nonagon\n    num_nonagons = 8 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a decagon\n    num_decagons = 15 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of an icosagon\n    num_icosagons = 20 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a dodecagon\n    num_dodecagons = 35 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a trichagon\n    num_trichagons = 40 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a tetragon\n    num_tetragons = 50 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of an eicosagon\n    num_eicosagons = 60 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a dodecagon\n    num_dodecagons = 75 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a trichagon\n    num_trichagons = 80 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a tetragon\n    num_tetragons = 100 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a pentagonal pyramid\n    num_pentagonal_pyramids = 5 * (5 * n - 3 * n ** 2 + n ** 3) // 6\n    \n    # Calculate the number of edges of a hexagonal pyramid\n    num_hexagonal_pyramids = 6 * (6 * n - 3 * n ** 2 + n ** 3) // 6\n    \n    # Calculate the number of edges of a cubic pyramid\n    num_cubic_pyramids = 2 * (2 * n - 1) * (2 * n - 1) // 2\n    \n    # Calculate the number of edges of a tetradic pyramid\n    num_tetradic_pyramids = 4 * (4 * n - 1) * (4 * n - 1) // 2\n    \n    # Calculate the number of edges of a square pyramid\n    num_square_pyramids = (2 * m * m - m // 2) * (2 * m * m - m // 2 + 1) // 2 // 2\n    \n    # Calculate the number of edges of a right triangle\n    num_right_triangles = n * (n - 1)\n    \n    # Calculate the number of edges of a right pentagon\n    num_right_pentagons = 5 * (5 * n - 3 * n ** 2 + n ** 3) // 6\n    \n    # Calculate the number of edges of a right hexagon\n    num_right_hexagons = 6 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a right heptagon\n    num_right_heptagons = 10 * n * (n - 1) // 2\n    \n    # Calculate the number of edges of a right octagon\n    num_right_"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # base case\n    if n == 0: \n        return 0\n    # if n is even, then a(n, m) = a(n//2, m) + a(n//2, m-1)\n    if n % 2 == 0: \n        return eulerian_num(n//2, m) + eulerian_num(n//2, m-1)\n    # if n is odd, then a(n, m) = a(n//2, m) + a(n//2, m-1) + 1\n    else: \n        return eulerian_num(n//2, m) + eulerian_num(n//2, m-1) + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the first row and the first column with 1\n    first_row = [1] * m\n    first_col = [1] * n\n\n    # Initialize the rest of the matrix with 0\n    matrix = [[0] * m for _ in range(n)]\n\n    # Fill the matrix using the Eulerian path algorithm\n    for i in range(1, n):\n        for j in range(1, m):\n            if first_row[j-1] == 1:\n                matrix[i][j] = matrix[i-1][j]\n            elif first_col[i-1] == 1:\n                matrix[i][j] = matrix[i][j-1]\n\n    # Find the maximum number in the matrix\n    max_num = max(max(row) for row in matrix)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    # Initialize the first row of the matrix\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    \n    # Fill the rest of the matrix using dynamic programming\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0]*(n+1) for i in range(m+1)]\n    for i in range(1, m+1):\n        a[i][0] = a[i-1][0] + a[i-1][1]\n    for j in range(1, n+1):\n        a[0][j] = a[0][j-1] + a[1][j-1]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            a[i][j] = a[i-1][j] + a[i][j-1] - a[i-1][j-1]\n    return a[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Function to calculate the sum of cubes of numbers from 1 to n\n    def sum_cubes(n):\n        return (n * (n + 1) * (2 * n + 1)) // 6\n    \n    # Function to calculate the sum of cubes of numbers from 1 to m\n    def sum_cubes_m(m):\n        return (m * (m + 1) * (2 * m + 1)) // 6\n    \n    # Function to calculate the sum of a(n, m)\n    def sum_a(n, m):\n        return sum_cubes(n) - sum_cubes_m(m)\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 10\n    def sum_a_10():\n        a = 0\n        for i in range(1, 11):\n            a += sum_cubes(i) - sum_cubes_m(10 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 20\n    def sum_a_20():\n        a = 0\n        for i in range(1, 21):\n            a += sum_cubes(i) - sum_cubes_m(20 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 50\n    def sum_a_50():\n        a = 0\n        for i in range(1, 51):\n            a += sum_cubes(i) - sum_cubes_m(50 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 100\n    def sum_a_100():\n        a = 0\n        for i in range(1, 101):\n            a += sum_cubes(i) - sum_cubes_m(100 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 1000\n    def sum_a_1000():\n        a = 0\n        for i in range(1, 1001):\n            a += sum_cubes(i) - sum_cubes_m(1000 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 10000\n    def sum_a_10000():\n        a = 0\n        for i in range(1, 10001):\n            a += sum_cubes(i) - sum_cubes_m(10000 - i)\n        return a\n    \n    # Function to calculate the sum of a(n, m) for n = 1 to 100000\n    def sum_a_100000():\n        a = 0\n        for i in range(1, 100001):\n            a += sum_cubes(i) - sum_cubes_m(100000 - i)\n        return a\n    \n    # Call the function to calculate the sum of a(n, m) for n = 1 to 100000\n    return sum_a_100000()"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the sum of all numbers up to n\n    sum_n = n * (n+1) // 2\n    \n    # Calculate the sum of all numbers up to m\n    sum_m = m * (m+1) // 2\n    \n    # Calculate the sum of all numbers up to the greater of n and m\n    sum_max = max(n, m) * (max(n, m) + 1) // 2\n    \n    # Find the difference between the sum of all numbers up to n and the sum of all numbers up to m\n    eulerian_num = sum_n - sum_m\n    \n    # If the difference is greater than 0, then we have a Eulerian number\n    if eulerian_num > 0:\n        return eulerian_num\n    \n    # Otherwise, we have a Lychrel number\n    else:\n        return 0"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    This function sorts each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate over each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Assign the sorted sublist back to the same sublist in the input list\n        input_list[input_list.index(sublist)] = sorted_sublist\n    # Return the modified input list\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist using the `sorted` function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sublist.sort()\n        # Print the sorted sublist\n        print(sublist)"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):   \n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new list with the elements of both lists\n    new_list = test_list + test_tup\n\n    # Convert the new list to a tuple and return it\n    return tuple(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Get the length of the tuple and the length of the list\n    list_length = len(test_list)\n    tuple_length = len(test_tup)\n\n    # Check if the lists can be concatenated\n    if list_length + tuple_length <= 1000:\n        # Concatenate the lists and tuples\n        concatenated_list = test_list + test_tup\n\n        # Print the result\n        print(\"The concatenated list is:\", concatenated_list)\n    else:\n        print(\"Error: Lists can't be concatenated. Length of lists + length of tuples > 1000\")"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the tuple to the list\n    test_list.append(test_tup)\n    # Return the updated list\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # concatenate the given list with the given tuple\n    test_list_tup = tuple(test_list) + test_tup\n    return test_list_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Create a new empty list to store the appended tuples\n    new_list = []\n    # Iterate through the given tuples and append the list to them\n    for tup in test_tup:\n        new_list.append(tup)\n    # Iterate through the given list and append it to the last tuple in the list\n    for item in test_list:\n        new_list[-1].append(item)\n    # Return the new list of appended tuples\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Get the length of the list and the length of the tuple\n    list_len = len(test_list)\n    tuple_len = len(test_tup)\n    \n    # If the list is longer than the tuple, add the extra elements to the tuple\n    if list_len > tuple_len:\n        # Create a new tuple with the elements of the list and the tuple\n        new_tup = tuple(test_list) + test_tup\n        \n        # Return the new tuple\n        return new_tup\n    # If the list is shorter than the tuple, add the missing elements to the list\n    else:\n        # Create a new list with the elements of the list and the tuple\n        new_list = test_list + list(test_tup)\n        \n        # Return the new list\n        return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert tuples to lists\n    test_list = list(test_list)\n    test_tup = list(test_tup)\n\n    # Append the lists\n    test_list.append(test_tup)\n\n    # Convert lists back to tuples\n    test_list = tuple(test_list)\n\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_list + test_tup\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n\n    while len(num1) > 0:\n        merged_list.append(heapq.heappop(num1))\n    while len(num2) > 0:\n        merged_list.append(heapq.heappop(num2))\n    while len(num3) > 0:\n        merged_list.append(heapq.heappop(num3))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # concatenate the three lists into one list\n    merged_list = num1 + num2 + num3\n    \n    # convert the list into a min-heap\n    min_heap = []\n    for i in range(len(merged_list)):\n        heapq.heappush(min_heap, merged_list[i])\n    \n    # convert the min-heap back into a list\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the first two lists\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    merged = []\n    while num1 and num2:\n        if num1[0] <= num2[0]:\n            merged.append(heapq.heappop(num1))\n        else:\n            merged.append(heapq.heappop(num2))\n    # Add any remaining elements to the merged list\n    merged.extend(num1 + num2)\n    # Merge the third list into the merged list\n    heapq.heapify(num3)\n    while num3:\n        merged.append(heapq.heappop(num3))\n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # create a min heap and insert each element of the merged list into it\n    min_heap = []\n    for num in merged_list:\n        heapq.heappush(min_heap, num)\n    \n    # convert the min heap into a sorted list and return it\n    return sorted(min_heap)"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Combine the three lists into one large list\n    merged_list = num1 + num2 + num3\n    \n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n    \n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Create an empty list to store the merged sorted list\n    merged_list = []\n    \n    # Merge the three lists using heapq.merge()\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            heapq.heappush(merged_list, heapq.heappop(num1))\n        elif heapq.heappop(num2) < heapq.heappop(num3):\n            heapq.heappush(merged_list, heapq.heappop(num2))\n        else:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    # Append any remaining elements of the lists to the merged list\n    if num1:\n        while num1:\n            heapq.heappush(merged_list, heapq.heappop(num1))\n    if num2:\n        while num2:\n            heapq.heappush(merged_list, heapq.heappop(num2))\n    if num3:\n        while num3:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a new list to hold the merged sorted list\n    merged = []\n    \n    # create a min heap to hold the elements from num1, num2, and num3\n    min_heap = []\n    heapq.heapify(min_heap)\n    heapq.heappush(min_heap, -num1)\n    heapq.heappush(min_heap, -num2)\n    heapq.heappush(min_heap, -num3)\n    \n    # iterate through the min heap until it is empty\n    while min_heap:\n        # pop the smallest element from the min heap\n        current_num = -heapq.heappop(min_heap)\n        \n        # add the current element to the merged list\n        merged.append(current_num)\n        \n        # add the current element to the min heap\n        if len(min_heap) < 3:\n            heapq.heappush(min_heap, -current_num)\n    \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Define an empty list to store the merged list\n    merged_list = []\n\n    # Use heapq to merge the three lists into a single sorted list\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n\n    # Iterate over the three lists and add the smallest element to the merged list\n    while num1 and num2 and num3:\n        if heapq.heappop(num1) < heapq.heappop(num2):\n            merged_list.append(heapq.heappop(num1))\n        else:\n            merged_list.append(heapq.heappop(num2))\n\n    # If there are still elements left in one of the lists, add them to the merged list\n    if num1:\n        merged_list += num1\n    if num2:\n        merged_list += num2\n    if num3:\n        merged_list += num3\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # create a list to hold the sorted numbers\n    merged_list = []\n    \n    # create a min-heap to store the numbers from each list\n    heap1 = []\n    heapq.heapify(heap1)\n    heap2 = []\n    heapq.heapify(heap2)\n    heap3 = []\n    heapq.heapify(heap3)\n    \n    # insert the first number from each list into the min-heap\n    heapq.heappush(heap1, num1[0])\n    heapq.heappush(heap2, num2[0])\n    heapq.heappush(heap3, num3[0])\n    \n    # while the heap has at least one number, pop the smallest number and add it to the merged list\n    while heap1 and heap2 and heap3:\n        # check if the smallest number from each heap is less than or equal to the smallest number in the merged list\n        if heapq.heappop(heap1) <= heapq.heappop(heap2) and heapq.heappop(heap1) <= heapq.heappop(heap3):\n            merged_list.append(heapq.heappop(heap1))\n        elif heapq.heappop(heap2) <= heapq.heappop(heap1) and heapq.heappop(heap2) <= heapq.heappop(heap3):\n            merged_list.append(heapq.heappop(heap2))\n        else:\n            merged_list.append(heapq.heappop(heap3))\n    \n    # add any remaining numbers from the heaps to the merged list\n    while heap1:\n        merged_list.append(heapq.heappop(heap1))\n    while heap2:\n        merged_list.append(heapq.heappop(heap2))\n    while heap3:\n        merged_list.append(heapq.heappop(heap3))\n        \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge the two sorted lists\n    merged_list = sorted(num1 + num2)\n    # Merge the sorted list with the third list\n    sorted_list = sorted(merged_list + num3)\n    return sorted_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    odd_count = 0\n    s = list(s)\n    s = s[::-1]\n    for i in range(n):\n        s.append(s.pop(0))\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    # Convert the binary string to a list of binary digits\n    binary_list = [int(digit) for digit in s]\n    # Rotate the list n times\n    rotated_list = binary_list[n:] + binary_list[:n]\n    # Count the number of odd numbers in the rotated list\n    for digit in rotated_list:\n        if digit % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n): \n        s = s[-1:] + s[:-1]\n    for i in range(len(s)): \n        if s[i] % 2 == 1: \n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Convert the binary string to an integer\n    s = int(s, 2)\n    \n    # Initialize the count to zero\n    count = 0\n    \n    # Rotate the binary string the given number of times\n    for _ in range(n):\n        s = ((s & 1) << 31) | ((s >> 1) & (~1))\n    \n    # Iterate through the binary string and count the odd values\n    for i in range(32):\n        if (s & (1 << i))!= 0:\n            count += 1\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n\n    # convert the binary string into a list of integers\n    s = [int(bit) for bit in s]\n\n    # initialize the count variable to 0\n    count = 0\n\n    # iterate over the given number of times\n    for _ in range(n):\n        # rotate the binary string by shifting the last bit to the beginning and adding it to the front of the binary string\n        s.append(s.pop(0))\n\n    # iterate over the binary string to count the odd numbers\n    for bit in s:\n        if bit % 2 == 1:\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Define an empty list to store the odd numbers\n    odd_list = []\n    \n    # Loop through the binary string n times\n    for i in range(n):\n        # Create a copy of the binary string\n        s_copy = s\n        \n        # Reverse the binary string\n        s_copy = s_copy[::-1]\n        \n        # Loop through the binary string one character at a time\n        for j in range(len(s_copy)):\n            # If the current character is odd, add it to the odd_list\n            if s_copy[j] == '1':\n                odd_list.append(int(s_copy[j]))\n    \n    # Return the number of odd numbers found\n    return len(odd_list)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    s_list = list(s)\n    count = 0\n    \n    for i in range(n):\n        for j in range(len(s_list)):\n            if s_list[j] % 2 == 1:\n                s_list.insert(j, s_list.pop(j+1))\n        count += len(s_list)\n    \n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # Create a binary string of length n from the input string\n    binary = bin(int(s))[2:].zfill(n) \n    # Initialize the counter variable to 0\n    count = 0\n    # Loop through each character in the binary string\n    for i in binary: \n        # If the character is odd, increment the counter\n        if int(i) % 2 == 1: \n            count += 1\n    # Return the number of odd numbers after rotating the binary string n times\n    return count % 2 == 1"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        # iterate through the binary string\n        for j in range(len(s)):\n            # rotate the binary string by n bits\n            s = s[-1] + s[:-1]\n            # check if the current bit is odd or not\n            if int(s[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    # initialize variables\n    count = 0\n    i = 0\n    # rotate the binary string n times\n    while i < len(s):\n        s = s[i:] + s[:i]\n        i += 1\n    # loop through the rotated binary string and count the odd values\n    for char in s:\n        if int(char) % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    break\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if i == j:\n                continue\n            for k in range(len(nestedlist[j])):\n                if k == i:\n                    continue\n                if nestedlist[i][k] in nestedlist[j][k]:\n                    common_elements.append(nestedlist[i][k])\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Create an empty set to store the common elements\n    common = set()\n\n    # Loop through each element in the nested list\n    for elem in nestedlist:\n        # If the element is a list, recursively call the function\n        if isinstance(elem, list):\n            common |= common_in_nested_lists(elem)\n        else:\n            # Otherwise, add the element to the set if it's in the first list\n            if elem in nestedlist[0]:\n                common.add(elem)\n\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Function to find the common elements in two lists\n    def find_common_elements(list1, list2):\n        common_elements = []\n        for element in list2:\n            if element in list1:\n                common_elements.append(element)\n        return common_elements\n\n    # Find the common elements in all the nested lists\n    common_elements = []\n    for sublist in nestedlist:\n        common_sublist = find_common_elements(sublist, common_elements)\n        common_elements = common_sublist\n\n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    common_elements = []\n    for list1 in nestedlist:\n        for list2 in nestedlist:\n            if list1 is not list2:\n                if set(list1) & set(list2):\n                    common_elements.append(list1)\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function takes a nested list as input and returns the list of common elements.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist)):\n                if i!= k and j!= k and nestedlist[i][j] == nestedlist[k][j]:\n                    common_elements.append(nestedlist[i][j])\n                    break\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Use a set to remove duplicates\n    unique_elements = set([x for sublist in nestedlist for x in sublist])\n\n    # Find the intersection of the two sets\n    common_elements = nestedlist[0] & unique_elements\n\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    if not nestedlist:\n        return []\n    # Flatten the nested list\n    flattened_list = [item for sublist in nestedlist for item in sublist]\n    # Find the unique elements in the flattened list\n    unique_list = list(set(flattened_list))\n    # Filter the list based on the common elements\n    common_list = [item for item in flattened_list if item in unique_list]\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    This function will find the common elements in a nested list.\n    '''\n\n    # initialize an empty set to store the common elements\n    common = set()\n\n    # loop through each nested list and check for common elements\n    for sublist in nestedlist:\n        for element in sublist:\n            if element in common:\n                common.remove(element)\n            else:\n                common.add(element)\n\n    # return the common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through each nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the sublist\n        for element in sublist:\n            # Add the element to the set of common elements if it's not already there\n            if element not in common:\n                common.add(element)\n\n    # Convert the set of common elements to a list and return it\n    return list(common)"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    for d in list1:\n        if len(d) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for item in list1:\n        if not item:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if not all(isinstance(i, dict) for i in list1):\n        return False\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_dict = True\n    \n    for i in list1:\n        if not i:\n            empty_dict = False\n    \n    return empty_dict"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        for d in list1:\n            if not all(v is None or isinstance(v, dict) and all(k in v for k in ['name', 'age']) for v in d.values()):\n                return False\n        return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if len(dic) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if all(len(d) == 0 for d in list1):\n        print(\"All dictionaries are empty.\")\n    else:\n        print(\"One or more dictionaries are not empty.\")"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    empty_flag = True\n    for i in range(len(list1)):\n        if len(list1[i])!= 0:\n            empty_flag = False\n            break\n    return empty_flag"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_sum = 0\n    for num in nums:\n        int_sum += num\n    return int_sum"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if not isinstance(nums, tuple) or not all(isinstance(num, int) and num > 0 for num in nums):\n        raise ValueError(\"The input must be a tuple of positive integers\")\n    \n    result = 0\n    for num in nums:\n        result *= 10\n        result += num\n    \n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple to a list and sum the elements\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Convert the tuple into a list\n    nums_list = list(nums)\n    # Initialize the accumulator variable to 0\n    accumulator = 0\n    # Iterate through the list and add each element to the accumulator\n    for num in nums_list:\n        accumulator += num\n    # Return the final result\n    return accumulator"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # loop through each element in the list\n    for i in range(len(test_list)):\n        # loop through each element in the current sublist\n        for j in range(len(test_list[i])):\n            # check if the current element is a convertible type (int, float, string)\n            if type(test_list[i][j]) in [int, float, str]:\n                # attempt to convert the element to a float and store the result in the current sublist\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n\n    The function recursively iterates through the input list, and if an element is convertible to a float,\n    the function calls the built-in `float()` function on it to convert it.\n\n    The function returns a new list with all elements converted to floats.\n\n    Example usage:\n    >>> list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0]\n    \"\"\"\n    result = []\n    for item in test_list:\n        if isinstance(item, (list, tuple)):\n            result.append(list_to_float(item))\n        else:\n            try:\n                result.append(float(item))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str) and test_list[i][j].replace('.', '', 1).isdigit():\n                test_list[i][j] = float(test_list[i][j])\n\ntest_list = [\n    ['1', '2', '3.0', '4.5'],\n    ['5', '6', '7', '8.0'],\n    ['9', '10', '11', '12']\n]\n\nlist_to_float(test_list)\nprint(test_list)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if type(test_list[i][j]) in [int, float, str]:\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                continue\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    for item in test_list:\n        if isinstance(item, list):\n            list_to_float(item)\n        elif isinstance(item, (str, int, float)):\n            try:\n                test_list[test_list.index(item)] = float(item)\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            if type(test_list[i][j]) == str or type(test_list[i][j]) == int or type(test_list[i][j]) == float:\n                test_list[i][j] = float(test_list[i][j])\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[0])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character and convert each element to a string\n    return list(map(str.strip, string.split()))"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    # split the string on the space character\n    words = string.split()\n    # create a list of the words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    # Initialize a dictionary to keep track of the frequency of each element in the array\n    freq = {}\n    for num in arr:\n        # If the element is not in the dictionary, add it with a frequency of 1\n        if num not in freq:\n            freq[num] = 1\n        # If the element is already in the dictionary, increment its frequency by 1\n        else:\n            freq[num] += 1\n\n    # Find the element that appears only once in the array\n    only_once = None\n    for num in freq:\n        if freq[num] == 1:\n            only_once = num\n            break\n\n    return only_once"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    for element in arr:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n\n    # find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key\n\n    # if no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initialize the count of occurrences of the element\n    count = 0\n    # initialize the element that appears only once to None\n    result = None\n    \n    # iterate through the array\n    for num in arr:\n        # check if the current number is equal to the previous element\n        if num == arr[count]:\n            # increment the count\n            count += 1\n            # if the count reaches 2, update the result to the current number\n            if count == 2:\n                result = num\n                break\n        # if the count reaches 2, update the result to the current number\n        elif count == 2:\n            result = num\n            break\n    \n    # return the result\n    return result"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Find the first occurrence of the element in the array\n    first_occurrence = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == first_occurrence:\n            first_occurrence = None\n            break\n\n    # If the first occurrence has been found, find the element that appears only once\n    if first_occurrence:\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == first_occurrence:\n                return arr[i]\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize the counter variable\n    count = 0\n    # Initialize the element variable\n    element = None\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is already in the counter, increment the count\n        if i in arr[i:]:\n            count += 1\n        # If the count reaches 1, set the element to the current element\n        if count == 1:\n            element = arr[i]\n    # Return the element\n    return element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        if i == n - 1:\n            return arr[i]\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            return arr[i]\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the elements and their indices\n    index_dict = {}\n\n    # Iterate over the array and update the index dictionary\n    for i, num in enumerate(arr):\n        if num not in index_dict:\n            index_dict[num] = [i]\n        else:\n            index_dict[num].append(i)\n\n    # Iterate over the array and check if the element appears only once\n    for num in arr:\n        if len(index_dict[num]) == 1:\n            return num"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n    return arr[arr.index(arr[0])]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize a dictionary to store the count of each element in the array\n    count = {}\n\n    # Traverse the array and count the occurrences of each element\n    for i in range(len(arr)):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n\n    # Traverse the dictionary and find the element that appears only once\n    for i in count:\n        if count[i] == 1:\n            return i\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables to store the maximum product and the maximum absolute product\n    max_product = float('-inf')\n    max_abs_product = float('-inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        # Loop through each tuple in the list\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute difference between the two numbers in the tuple\n            abs_diff = abs(list1[i][1] - list1[j][1])\n\n            # Calculate the product of the two numbers in the tuple\n            product = list1[i][0] * list1[j][0]\n\n            # Check if the current product is greater than the maximum product\n            if product > max_product:\n                # Update the maximum product and maximum absolute product\n                max_product = product\n                max_abs_product = abs_diff\n\n            # Check if the current absolute difference is greater than the maximum absolute product\n            elif abs_diff > max_abs_product:\n                # Update the maximum absolute product\n                max_abs_product = abs_diff\n\n    # Return the maximum absolute product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    max_product = 0\n    absolute_max_product = 0\n    \n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two numbers in each pair\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            \n            # Calculate the absolute value of the product\n            absolute_product = abs(product)\n            \n            # Update the maximum absolute product and maximum product variables if the current product is greater\n            if absolute_product > absolute_max_product:\n                absolute_max_product = absolute_product\n                max_product = product\n    \n    # Return the maximum absolute product and maximum product\n    return absolute_max_product, max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if abs(list1[i][0]*list1[j][1]) > max_product:\n                max_product = abs(list1[i][0]*list1[j][1])\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][0]) * abs(list1[i][1]*list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    max_product_tuple = (-float('inf'), -float('inf'))\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i] * list1[j]\n            if abs(product) > abs(max_product):\n                max_product = product\n                max_product_tuple = (list1[i], list1[j])\n    return max_product_tuple"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize variables to store the maximum product and the pair of numbers that contribute to it\n    max_product = float('-inf')\n    pair_1 = None\n    pair_2 = None\n\n    # Iterate through each tuple in the list\n    for pair in list1:\n        # Calculate the product of the two numbers in the pair\n        product = pair[0] * pair[1]\n\n        # If the product is greater than the current maximum product, update the variables\n        if product > max_product:\n            max_product = product\n            pair_1 = pair[0]\n            pair_2 = pair[1]\n\n    # Return the pair of numbers that contribute to the maximum product\n    return pair_1, pair_2"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    max_pair = []\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            current_pair = (list1[i][0] * list1[j][0], list1[i][1] * list1[j][1])\n            abs_product = abs(current_pair[0]) * abs(current_pair[1])\n\n            if abs_product > max_product:\n                max_product = abs_product\n                max_pair = current_pair\n\n    return max_pair"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_abs_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_abs_product:\n                max_abs_product = pair_product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = -float('inf') # Initialize max_product as -infinity\n    \n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the numbers in the pairs\n            product = abs(list1[i][0] * list1[j][1])\n            \n            # Update the max_product if the absolute product is greater than max_product\n            if product > max_product:\n                max_product = product\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Define a function to find the absolute value of a number\n    def absolute_value(number):\n        if number < 0:\n            return -number\n        return number\n\n    # Initialize the maximum absolute product to zero\n    max_product = 0\n\n    # Loop through each tuple in the list\n    for i in range(len(list1) - 1):\n        # Loop through the remaining tuples starting from the next index\n        for j in range(i + 2, len(list1) + 1):\n            # Calculate the absolute value of the product of the first and second numbers\n            product = absolute_value(list1[i][0] * list1[i][1])\n            # Calculate the absolute value of the product of the second and third numbers\n            product += absolute_value(list1[i][1] * list1[j - 1][1])\n            # Calculate the absolute value of the product of the third and fourth numbers\n            product += absolute_value(list1[j - 1][0] * list1[j - 1][1])\n\n            # Update the maximum absolute product if the new product is greater than the current maximum\n            if product > max_product:\n                max_product = product\n\n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    '''\n    Function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    Function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_prime(i) and is_prime(sum_of_i_and_2(i)):\n            sum += i\n    return sum\n\ndef sum_of_i_and_2(num):\n    '''\n    Function to find the sum of i and 2.\n    '''\n    return num + 2"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num == amicable_number(num):\n            amicable_numbers.append(num)\n        if num == amicable_number(amicable_number(num)):\n            amicable_numbers.append(amicable_number(num))\n    return sum(amicable_numbers)\n\ndef amicable_number(n):\n    \"\"\"\n    Return the amicable number of a given number.\n    \"\"\"\n    a, b = 0, 1\n    while b <= n:\n        if n % b == 0:\n            a = b\n            b += a\n        else:\n            b += 1\n    return a"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def is_amicable(a):\n        b = a\n        while b > 1:\n            if a % b == 0:\n                return False\n            b -= 1\n        return True\n\n    sum_amicable = 0\n    for i in range(1, limit):\n        if is_amicable(i) and is_amicable(limit - i):\n            sum_amicable += i + limit - i\n\n    return sum_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            amicable_numbers.add(i)\n    return sum(amicable_numbers)\n\n\ndef is_amicable(n):\n    '''\n    Check if a number is amicable to any number in the range of 1 to its square root.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    # initialize the sum variable to 0\n    sum_amicable = 0\n\n    # loop through all numbers from 1 to the limit\n    for i in range(1, limit + 1):\n        # check if the number is amicable\n        if is_amicable(i):\n            # add the number to the sum\n            sum_amicable += i\n\n    return sum_amicable\n\ndef is_amicable(num):\n    \"\"\"\n    Check if a number is amicable.\n    \"\"\"\n    # get the sum of the divisors\n    sum_div = sum(range(1, num))\n\n    # check if the number is equal to the sum of its divisors\n    if num == sum_div:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_amicable(n):\n    \"\"\"\n    Returns True if the given number is an amicable number.\n    \"\"\"\n    if n < 2:\n        return False\n    s = sum(i for i in range(1, int(n**0.5) + 1) if n % i == 0)\n    return s == n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    result = 0\n    for i in range(1, limit + 1):\n        if is_amicable(i):\n            result += i\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    Function to sum all the amicable numbers from 1 to a specified limit.\n    \"\"\"\n    # Create a list to store the amicable numbers\n    amicable_numbers = []\n    \n    # Loop through all the numbers from 1 to the limit\n    for num in range(1, limit+1):\n        # Check if the current number is amicable to any number from 1 to the square root of the current number\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0 and num//i!= i:\n                # If the current number is amicable, add it to the list of amicable numbers\n                amicable_numbers.append(num)\n                break\n    \n    # Calculate the sum of the amicable numbers and return the result\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if is_amicable(i, limit):\n            sum += i\n    return sum\n\ndef is_amicable(num, limit):\n    '''\n    Check if a number is amicable to any number between 1 and a specified number.\n    '''\n    for i in range(1, limit):\n        if is_divisible(num, i) and is_divisible(i, num):\n            return True\n    return False\n\ndef is_divisible(num, divisor):\n    '''\n    Check if a number is divisible by a specified divisor.\n    '''\n    return num % divisor == 0"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_amicable_numbers(limit):\n    '''\n    This function takes a limit as input and returns the sum of all amicable numbers from 1 to the limit.\n    '''\n    # Create a list to store amicable numbers\n    amicable_numbers = []\n    # Iterate from 1 to the limit\n    for i in range(1, limit+1):\n        # Check if the number is amicable\n        if is_amicable(i):\n            # Add the number to the list of amicable numbers\n            amicable_numbers.append(i)\n    # Return the sum of the amicable numbers\n    return sum(amicable_numbers)\n\ndef is_amicable(num):\n    '''\n    This function takes a number as input and returns True if it is amicable and False otherwise.\n    '''\n    # Check if the number is divisible by any number in the list of amicable numbers\n    for i in amicable_numbers:\n        if i == num:\n            continue\n        if num % i == 0:\n            return False\n    # The number is amicable if it is not divisible by any number in the list of amicable numbers\n    return True"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for i in range(1, limit):\n        if i not in amicable_numbers(i):\n            sum += i\n    return sum\n\ndef amicable_numbers(n):\n    '''\n    Write a function to find all the amicable numbers from a given number.\n    '''\n    amicable = []\n    for i in range(1, n):\n        if n % i == 0:\n            if i + n == i**2:\n                amicable.append(i)\n            elif n + i == i**2:\n                amicable.append(i)\n    return amicable"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in degrees.\n    \"\"\"\n\n    # Calculate the angle of the complex number using the cmath module\n    angle = cmath.phase(a+b*1j)\n\n    # Convert the angle from radians to degrees\n    angle_deg = angle * 180 / cmath.pi\n\n    # Return the angle in degrees\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Convert the complex number to polar form\n    angle = cmath.phase(a+b*1j)\n    # Return the angle in degrees\n    return angle * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns their angle in radians.\n    \"\"\"\n    # Complex conjugate of b\n    conjugate_b = b.conjugate()\n    # Find the angle of the complex numbers\n    angle_rad = cmath.phase(conjugate_b/a)\n    return angle_rad"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Calculate the angle using the arccosine rule\n    angle_rad = cmath.acos(a.real * b.real + a.imag * b.imag)\n    \n    # Convert the angle to degrees\n    angle_deg = angle_rad * 180 / cmath.pi\n    \n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j) #returns the phase in radians"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    # Define the conjugate of a and b\n    conjugate_a = complex(a.real, -a.imag)\n    conjugate_b = complex(b.real, -b.imag)\n\n    # Calculate the angle between the two complex numbers using the cmath.phase() function\n    angle = cmath.phase(conjugate_b/conjugate_a)\n\n    # Convert the angle from radians to degrees\n    angle_deg = angle*180/cmath.pi\n\n    return angle_deg"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers and returns the angle of the complex number in radians.\n    '''\n    angle = cmath.phase(a+b)\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i + 1, len(string)):\n            sub_string = string[i:j + 1]\n            zero_count = 0\n            one_count = 0\n            for char in sub_string:\n                if char == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n            diff = abs(zero_count - one_count)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    diff += 1\n            for k in range(j, n):\n                if string[k] == '1':\n                    diff += 1\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables to store the number of 0s and 1s in the string\n    zero_count = 0\n    one_count = 0\n    \n    # Initialize a variable to store the maximum difference between the number of 0s and 1s\n    max_diff = 0\n    \n    # Loop over each character in the string\n    for char in string:\n        # If the character is a 0, increment the zero count\n        if char == '0':\n            zero_count += 1\n        # If the character is a 1, increment the one count\n        elif char == '1':\n            one_count += 1\n        \n        # Update the maximum difference if the difference between the number of 0s and 1s is greater than the current maximum\n        if one_count - zero_count > max_diff:\n            max_diff = one_count - zero_count\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    count_0 = count_1 = 0\n    max_diff = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        if count_1 - count_0 > max_diff:\n            max_diff = count_1 - count_0\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count = [0, 0]\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n        diff = abs(count[0] - count[1])\n        max_diff = max(diff, max_diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string): \n    # Initialize variables for count of 0s and 1s\n    zero_count = 0\n    one_count = 0\n\n    # Iterate through the string and update count of 0s and 1s\n    for char in string:\n        if char == '0':\n            zero_count += 1\n        else:\n            one_count += 1\n\n    # Initialize maximum difference found so far\n    max_diff = 0\n\n    # Iterate through all possible substrings of the string\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            # Calculate difference between count of 0s and count of 1s in the substring\n            diff = abs(zero_count - one_count)\n\n            # Update maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of the number of 0s and 1s in each sub-string\n    num_0s = [0] * len(string)\n    num_1s = [0] * len(string)\n    \n    # Iterate through each sub-string of the binary string\n    for i in range(len(string)):\n        # Increment the number of 0s in the current sub-string\n        if string[i] == '0':\n            num_0s[i] += 1\n        # Increment the number of 1s in the current sub-string\n        else:\n            num_1s[i] += 1\n        \n        # Calculate the maximum difference between the number of 0s and 1s in the current sub-string\n        max_diff = max(num_0s[i] - num_1s[i], num_1s[i] - num_0s[i])\n        \n        # Update the maximum difference if it is larger than the current maximum difference\n        if max_diff > max_diff_so_far:\n            max_diff_so_far = max_diff\n    \n    # Return the maximum difference found\n    return max_diff_so_far"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        \n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            \n            diff = abs(count_0 - count_1)\n            \n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        for j in range(i+1, length+1):\n            sub_string = string[i:j]\n            count_0 = sub_string.count('0')\n            count_1 = sub_string.count('1')\n            \n            diff = abs(count_0 - count_1)\n            \n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # initialize sum variable to zero\n    sum_cd = 0\n\n    # loop through numbers from 1 to the smaller number\n    for num in range(1, min(a,b)+1):\n        # check if num is a common divisor of a and b\n        if (a % num == 0) and (b % num == 0):\n            # add num to sum_cd if it is a common divisor\n            sum_cd += num\n\n    # return sum_cd as the result\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def common_divisors(num):\n        \"\"\"\n        This function finds the common divisors of a given number.\n        \"\"\"\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def gcd(a, b):\n        \"\"\"\n        This function finds the greatest common divisor of two given numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # Finding the divisors of the two numbers\n    num_a = a\n    num_b = b\n    divisors_a = common_divisors(num_a)\n    divisors_b = common_divisors(num_b)\n\n    # Finding the GCD of the two numbers\n    gcd_a = gcd(num_a, num_b)\n\n    # Finding the common divisors of the two numbers\n    common_divisors_a = [i for i in divisors_a if i in divisors_b]\n    common_divisors_b = [i for i in divisors_b if i in divisors_a]\n\n    # Finding the sum of common divisors\n    sum_common_divisors = sum(common_divisors_a) + sum(common_divisors_b)\n\n    return sum_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    if a < b:\n        a, b = b, a\n\n    common = 0\n    divisor = 1\n\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            common += divisor\n        divisor += 1\n\n    return common"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def gcd(a, b):\n    \"\"\"\n    This function finds the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n    \"\"\"\n    # Find GCD of two numbers\n    gcd_val = gcd(a, b)\n    # Find the common divisors of a and b using the GCD\n    divisors_a = []\n    divisors_b = []\n    for i in range(1, gcd_val+1):\n        if a % i == 0:\n            divisors_a.append(i)\n        if b % i == 0:\n            divisors_b.append(i)\n    # Find the common divisors of a and b using set operations\n    divisors_ab = set(divisors_a) & set(divisors_b)\n    # Calculate the sum of common divisors of a and b\n    sum_cd = sum(divisors_ab)\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n\n    # Check if the two numbers are positive integers\n    if not (isinstance(a, int) and isinstance(b, int)):\n        return \"Error: Both arguments must be positive integers.\"\n\n    # Check if the two numbers are not equal\n    if a == b:\n        return \"Error: The two numbers must be different.\"\n\n    # Check if the two numbers are greater than 1\n    if a <= 1 or b <= 1:\n        return \"Error: Both arguments must be greater than 1.\"\n\n    # Initialize variables to store the sum of common divisors\n    sum_cd = 0\n    sum_c = 0\n\n    # Iterate over all integers between 2 and the smaller number\n    for i in range(2, min(a, b) + 1):\n        # Check if the smaller number is a divisor of i\n        if a % i == 0 and b % i == 0:\n            # If i is a divisor of both a and b, add it to the sum of common divisors\n            sum_cd += i\n            # Add i to the sum of common multiples of a and b\n            sum_c += i\n\n    # Return the sum of common divisors\n    return sum_cd, sum_c"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the larger number\n    if a > b:\n        num = a\n    else:\n        num = b\n\n    # loop through all numbers between 1 and the larger number\n    for i in range(1, num+1):\n        # check if the number is a common divisor of both numbers\n        if num % i == 0 and a % i == 0 and b % i == 0:\n            # add the common divisors to the sum\n            total = total + i\n\n    # return the sum of the common divisors\n    return total"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_divisors(a, b):\n    \"\"\"\n    Returns a list of the common divisors of a and b.\n    \"\"\"\n    # Calculate the GCD of a and b using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum(a, b):\n    \"\"\"\n    Returns the sum of the common divisors of a and b.\n    \"\"\"\n    # Find the common divisors of a and b\n    divisors = common_divisors(a, b)\n\n    # Calculate the sum of the common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef sum_common_divisors(a, b):\n    divisors = []\n    for i in range(1, min(a, b) + 1):\n        if gcd(i, a) == 1 and gcd(i, b) == 1:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(num1, num2):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisor_list = []\n    for i in range(1, num1 + 1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisor_list.append(i)\n    return sum(divisor_list)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        result = result + remainder\n        x = x // y\n        y = remainder\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    words = str.split() # split the string into words\n    long_words = [] # create an empty list for long words\n    \n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the word to the long_words list\n    \n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    # Initialize an empty list to store the long words\n    long_words = []\n    # Iterate through each word in the list\n    for word in words:\n        # If the length of the word is greater than n, add it to the long_words list\n        if len(word) > n:\n            long_words.append(word)\n    # Return the long_words list\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize a counter for the number of magic squares\n    count = 0\n    \n    # Iterate through each row of the matrix\n    for i in range(len(my_matrix)):\n        # Iterate through each column of the matrix\n        for j in range(len(my_matrix[i])):\n            # Calculate the sum of the current cell and the rest of the matrix\n            current_sum = my_matrix[i][j] + sum(sum(row) for row in my_matrix[0:i] + my_matrix[i+1:j] + my_matrix[j+1:][0:i] if row!= my_matrix[i][j])\n            \n            # Check if the current cell is a magic square\n            if all(current_sum - row[j] in range(len(my_matrix)) for row in my_matrix):\n                count += 1\n                \n    # Return True if there are at least two magic squares, otherwise False\n    return count >= 2"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n\n    # Check if the matrix has the same number of rows and columns\n    if n!= len(set([len(row) for row in my_matrix])):\n        return False\n\n    # Check if each row, column and diagonal sums to the same value\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(my_matrix[i]) for i in range(n)]\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if row_sums!= col_sums or row_sums!= diag_sum1 or row_sums!= diag_sum2:\n        return False\n\n    # Check if each row has all unique elements\n    for i in range(n):\n        if len(set(my_matrix[i]))!= n:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum([my_matrix[j][i] for j in range(n)])\n        if row_sum!= col_sum or row_sum!= n**2 or col_sum!= n**2:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return \"The matrix is not a square.\"\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Check if the sum of each diagonal is equal to the matrix size\n    if row_sums == col_sums == [i*len(my_matrix) for i in range(1, len(my_matrix)+1)]:\n        return \"The matrix is a magic square.\"\n    else:\n        return \"The matrix is not a magic square.\""
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check that the matrix is square\n    if n!= len(my_matrix[0]):\n        return False\n    \n    # Check that all rows and columns have distinct elements\n    for i in range(n):\n        row = set(my_matrix[i])\n        if len(row)!= n:\n            return False\n        col = set(my_matrix[j] for j in range(n) if i!= j)\n        if len(col)!= n:\n            return False\n    \n    # Check that the matrix is a magic square\n    for i in range(n-1):\n        for j in range(n-1):\n            if my_matrix[i][j] + my_matrix[i][j+1] + my_matrix[i+1][j] + my_matrix[i+1][j+1]!= n*(n-1):\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of the sum of the rows, columns, and diagonal\n    row_sum = 0\n    col_sum = 0\n    diag_sum = 0\n    \n    # Calculate the sum of the rows and columns\n    for i in range(len(my_matrix)):\n        row_sum += my_matrix[i][i]\n        col_sum += my_matrix[i][len(my_matrix)-i-1]\n    \n    # Calculate the sum of the diagonal\n    for i in range(len(my_matrix)):\n        diag_sum += my_matrix[i][i]\n    \n    # Check if the sum of the rows, columns, and diagonal is equal to the sum of the matrix elements\n    if row_sum == col_sum == diag_sum == sum(sum(row) for row in my_matrix):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has 9 elements\n    if len(my_matrix)!= 9:\n        return False\n\n    # Check if all elements in the matrix are integers\n    for row in my_matrix:\n        if not all(isinstance(num, int) for num in row):\n            return False\n\n    # Check if the matrix is a magic square\n    # First, check the rows\n    for i in range(3):\n        row1 = my_matrix[i]\n        row2 = my_matrix[i+3]\n        row3 = my_matrix[i+6]\n\n        if row1!= row2 or row1!= row3 or row2!= row3:\n            return False\n\n    # Second, check the columns\n    for j in range(3):\n        col1 = [my_matrix[k][j] for k in range(3)]\n        col2 = [my_matrix[k][j+3] for k in range(3)]\n        col3 = [my_matrix[k][j+6] for k in range(3)]\n\n        if col1!= col2 or col1!= col3 or col2!= col3:\n            return False\n\n    # Third, check the diagonals\n    diag1 = [my_matrix[i][i] for i in range(3)]\n    diag2 = [my_matrix[i][2-i] for i in range(3)]\n\n    if diag1!= diag2:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # Check if each row, column, and sub-matrix are all different\n    for i in range(3):\n        row_set = set(my_matrix[i])\n        col_set = set(row_set)\n        sub_set = set()\n        for j in range(3):\n            if i!= j:\n                sub_set.add(my_matrix[i][j])\n        if not (row_set == col_set == sub_set):\n            return False\n\n    # Check if the sum of the diagonal elements is equal to the product of the sum of the other diagonal elements\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(3):\n        diag1_sum += my_matrix[i][i]\n        diag2_sum += my_matrix[i][2-i]\n    if diag1_sum!= diag2_sum or diag1_sum!= diag1_sum ** 2:\n        return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check for magic squares\n    for i in range(len(my_matrix)):\n        row = sum(my_matrix[i])\n        col = sum(my_matrix[j][i] for j in range(len(my_matrix)))\n        if row == col:\n            return True\n        elif row + col == 25:\n            return True\n    \n    # If no magic squares were found, the matrix is not a magic square\n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # Check if all rows have the same sum\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        if row_sum!= n*n:\n            return False\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = sum(my_matrix[:,j])\n        if col_sum!= n*n:\n            return False\n    # Check if all diagonals have the same sum\n    diag_sum1 = sum(my_matrix[i][i] for i in range(n))\n    diag_sum2 = sum(my_matrix[i][n-i-1] for i in range(n))\n    if diag_sum1!= diag_sum2:\n        return False\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    \"\"\"\n    Given a list of integers, returns the item with the maximum frequency.\n    \"\"\"\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    max_num = max(freq, key=freq.get)\n    max_count = freq[max_num]\n    return max_num, max_count"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    for item, count in freq.items():\n        if count == max_freq:\n            return item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    max_count = 0\n    max_num = None\n    for num in count_dict:\n        if count_dict[num] > max_count:\n            max_count = count_dict[num]\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_count = max(freq.values())\n    max_item = None\n    \n    for num, count in freq.items():\n        if count == max_count:\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n\n    # Count the frequency of each item in the list\n    for num in nums:\n        count_dict[num] += 1\n\n    # Find the item with the maximum frequency\n    max_count = 0\n    max_item = None\n    for item, count in count_dict.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n\n    # create a dictionary to store the frequency of each item\n    frequency_dict = defaultdict(int)\n    for num in nums:\n        frequency_dict[num] += 1\n\n    # find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in frequency_dict.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_item = None\n    max_freq = 0\n    for item, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int) # create a defaultdict to store frequency of each item\n    for num in nums:\n        freq[num] += 1 # update the frequency count for each item in the list\n\n    max_count = 0\n    max_item = None\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char\n    result = result[::-1]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    str1 = str1.lower()\n    str1 = [char for char in str1 if char not in vowels]\n    str1 = ''.join(str1[::-1])\n    return str1"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowels_reversed = []\n    \n    # Loop through each character of the string\n    for i in range(len(str1)):\n        # Check if the character is a vowel\n        if str1[i] in vowels:\n            # If the character is a vowel, append it to the end of the reversed list\n            vowels_reversed.append(str1[i])\n    \n    # Join the reversed list of vowels to form the final result\n    result = ''.join(vowels_reversed)\n    \n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    reversed_str = ''\n    for char in str1:\n        if char.lower() in vowels:\n            reversed_str = char + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    vowel_str = ''\n    for char in str1:\n        if char in vowels:\n            vowel_str += char\n    return vowel_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_index = []\n    \n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_index.append(i)\n    \n    vowel_index.reverse()\n    \n    result = ''\n    for i, char in enumerate(str1):\n        if i in vowel_index:\n            result = char + result\n        else:\n            result = result + char\n            \n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(string):\n    vowels = \"AEIOUaeiou\"\n    new_string = \"\"\n    for char in string:\n        if char in vowels:\n            new_string += char\n    return new_string[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in string:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reverse_str = ''\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] in vowels:\n            reverse_str += str1[i]\n    return reverse_str"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string using the join() method\n    return str(tup1).join()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str_tup = str(tup1)\n    return str_tup"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    # convert the tuple to a string\n    string_version = str(tup1)\n    return string_version"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (n + 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n) + 1) ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n    d = 3\n    e = 4\n    \n    # calculate nth hexagonal number\n    while n > 0:\n        # increment a\n        a = 1 + 3 * b - d\n        # increment b\n        b = 1 - d\n        # increment c\n        c = a + b + 1\n        # increment d\n        d = 2 * c - 1\n        # increment e\n        e = 2 * c - 2\n        # decrement n\n        n -= 1\n    \n    # return the nth hexagonal number\n    return e"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (3 * n - 1) // 2\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n % 2 == 0: \n        return -1\n    return n * (3 * n - 1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    a = 1\n    b = 5\n    for i in range(1, n+1):\n        print(a, end=' ')\n        a += b\n        b += 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n    for i in range(n):\n        hex = (a + b + c + d) // 2\n        a += b\n        b = c\n        c = d\n        d = hex\n    return hex"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    hex_num = n * (2 * n - 1)\n    return hex_num"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums)\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    ratio = non_zero_count / zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def zero_count(nums):\n    # Convert the list to an array for efficiency\n    nums_array = array('i', nums)\n\n    # Count the number of non-zero elements in the array\n    non_zero_count = 0\n    for num in nums_array:\n        if num!= 0:\n            non_zero_count += 1\n\n    # Count the number of zeroes in the array\n    zero_count = len(nums) - non_zero_count\n\n    # Compute the ratio of zeroes to non-zeroes\n    ratio = 1.0 * zero_count / len(nums)\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def zero_count(nums):\n    # create an array to store the count of zeroes and non-zeroes in the array\n    count = array('i', [0]*len(nums))\n\n    # iterate over the array and update the count of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            count[0] += 1\n        else:\n            count[1] += 1\n\n    # calculate the ratio of zeroes to non-zeroes\n    ratio = count[0] / count[1] if count[1]!= 0 else 0\n\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    # Convert the array to a list\n    nums_list = list(nums)\n    # Initialize the count of zeroes and non-zeroes to zero\n    zero_count = non_zero_count = 0\n    # Iterate over the list and count the zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes and return it\n    return zero_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = array('i', [0 for _ in range(len(nums))]) # create an array of size len(nums) initialized with zeros\n\n    for num in nums:\n        count[num] += 1 # increment the count of each element in the array\n\n    non_zero_count = sum(count) # sum up the counts to get the total count of non-zero elements\n\n    if non_zero_count == 0:\n        return 0 # return 0 if there are no non-zero elements in the array\n\n    return sum(count[1:]) / non_zero_count # return the ratio of zeroes to non-zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the input array to a list so we can use array methods\n    nums = list(nums)\n\n    # Initialize two counters to keep track of zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n\n    # Iterate over the array and count the number of zeroes and non-zeroes\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return it as a float\n    if non_zero_count == 0:\n        return 0.0\n    else:\n        return float(zero_count) / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create an empty array to store the zeros and ones\n    arr = array('i')\n\n    # iterate through the input array and count the zeros and ones\n    for num in nums:\n        if num == 0:\n            arr.append(1)\n        else:\n            arr.append(0)\n\n    # find the total number of elements in the array\n    total = len(arr)\n\n    # count the number of zeros and ones\n    zeros = arr.count(0)\n    ones = arr.count(1)\n\n    # calculate the ratio of zeros to ones\n    ratio = zeros / ones\n\n    # return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = array('i', [0 for i in range(len(nums))]) # create an array to store the counts of zeroes\n    non_zeros = array('i', [0 for i in range(len(nums))]) # create another array to store the counts of non-zeroes\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num)] += 1\n        else:\n            non_zeros[non_zeros.index(num)] += 1\n    \n    non_zero_count = sum(non_zeros)\n    zero_count = sum(zeros)\n    \n    zero_ratio = 0\n    \n    if zero_count!= 0:\n        zero_ratio = (sum(zeros) / non_zero_count) * 100\n        \n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = 0\n    if non_zeros == 0:\n        ratio = 0\n    else:\n        ratio = zeros / non_zeros\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is divisible by 2^k, where k is the number of bits in the binary representation of n\n    for k in range(32):\n        if n % 2**k == 0:\n            return True\n        elif n % 2**k!= 0:\n            break\n    \n    # If the number is not divisible by 2^k, then it cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0: \n        return False \n    for i in range(1, n): \n        if i*i == n: \n            return True \n        if n%i == 0: \n            return False \n    return True \n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    # Check if n is even or odd \n    if n % 2 == 0: \n        return False \n\n    # Initialize the count of 2s in n \n    count = 0 \n\n    # Loop through all odd numbers \n    while n % 2!= 0: \n        count += 1 \n        n //= 2 \n\n    # Check if there exists a number of 2s, i.e., count, such that 2^count <= n \n    for i in range(1, count+1): \n        if 2**i > n: \n            break \n\n    # If there exists such a number of 2s, then n can be represented as sum of non-zero powers of 2 \n    if i == count+1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Loop through all possible sums of powers of 2\n    for i in range(1, n+1):\n        # Check if the sum of powers of 2 is equal to n\n        if sum([2**j for j in range(len(bin(i)[2:]))]) == n:\n            return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def helper(n, power):\n        if n == 0:\n            return power\n        elif n % 2 == 0:\n            return helper(n//2, power*2)\n        else:\n            return helper((n-1)//2, power*2)\n\n    def count_bits(n):\n        count = 0\n        while n > 0:\n            count += n & 1\n            n >>= 1\n        return count\n\n    bits = count_bits(n)\n    return (2**bits <= n) and (n % (2**bits) == 0) and (helper(n, 1) == bits)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    def helper(num, power):\n        if num == 0:\n            return 0\n        else:\n            return power + helper(num//2, power+1)\n\n    if n == 0:\n        return True\n\n    # check for power of 2 in the binary representation of n\n    binary = bin(n)[2:]\n    if binary.count(\"1\") % 2!= 0:\n        return False\n\n    # check for the sum of powers of 2 in n\n    power = 1\n    while power <= len(binary):\n        if int(binary[-power:]) == 0:\n            return False\n        power += 1\n\n    # if both checks pass, then n is a valid representation of the sum of powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize variables for sum and power of 2 count\n    sum_of_powers_of_two = 0\n    power_of_2_count = 0\n    \n    # Loop through the number and count the power of 2\n    while n:\n        # Check if the last bit is a power of 2\n        if n % 2 == 0:\n            sum_of_powers_of_two += 1\n            power_of_2_count += 1\n            n //= 2\n        else:\n            n -= 1\n    \n    # Check if the number can be represented as sum of powers of 2\n    if power_of_2_count == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if n is 1\n    if n == 1:\n        return True\n    # Check if n is a power of 2\n    elif n & (n - 1) == 0:\n        return True\n    # Check if n is a power of 2 when n is odd\n    elif n & 1 == 1:\n        return is_Sum_Of_Powers_Of_Two(n ^ 1)\n    # Check if n is a sum of powers of 2\n    else:\n        return is_Sum_Of_Powers_Of_Two((n - 1) ^ (n - 1))\n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1: \n        return True\n    \n    # Check for factors of 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0: \n            return False\n    \n    # Check for non-zero powers of 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n // i!= 0:\n            return False\n    \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Initialize variables\n    count = 0 # count the number of non-zero digits in the number\n    sum_of_powers = 0 # initialize the sum of powers of 2\n\n    # Iterate through each digit of the number\n    while n > 0:\n        digit = n % 10 # get the last digit of the number\n        if digit!= 0: # if the digit is non-zero\n            count += 1 # increment the count of non-zero digits\n            sum_of_powers += 1 # add 1 to the sum of powers of 2\n        n //= 10 # remove the last digit of the number\n\n    if count == 1: # if the number has only one non-zero digit\n        return True # return True if the number can be represented as sum of non-zero powers of 2\n    else:\n        if sum_of_powers % 2 == 0: # if the sum of powers of 2 is even\n            return True # return True if the number can be represented as sum of non-zero powers of 2\n        else:\n            return False # return False if the number cannot be represented as sum of non-zero powers of 2"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # Formula for circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.14\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # convert radius to meters and calculate circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r  # returns the circumference of a circle with radius r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    circumference = 2 * pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159 # defining the value of pi\n    circumference = 2 * pi * r # calculating the circumference using formula for circumference\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    flat_list = []\n    for item in test_list:\n        if type(item) == list:\n            flat_list.extend(extract_singly(item))\n        else:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    singly_flattened_set = set(flattened_list)\n    return singly_flattened_set"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened = []\n    for item in test_list:\n        flattened.extend(item)\n    return set(flattened)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(set([num for sublist in test_list for num in sublist]))"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    def flatten(lst):\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten(test_list)\n    return set(flattened_list)\n"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    \"\"\"\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Perform pancake sort for each iteration\n    while True:\n        # Find the maximum element in the unsorted part of the list\n        max_idx = 0\n        for i in range(1, n):\n            if nums[max_idx] < nums[i]:\n                max_idx = i\n\n        # If max_idx is 0, the entire list is sorted\n        if max_idx == 0:\n            break\n\n        # Swap the maximum element with the first element in the unsorted part of the list\n        nums[0], nums[max_idx] = nums[max_idx], nums[0]\n\n        # Reverse the list up to max_idx\n        for i in range(1, max_idx):\n            nums[i], nums[max_idx - i] = nums[max_idx - i], nums[i]\n\n        # Decrement n to reflect the reversed part of the list\n        n = max_idx - 1\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        # Reverse the unsorted part of the array\n        for j in range(i, n-1, -1):\n            nums[j], nums[i] = nums[i], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # Reverse the list\n    nums.reverse()\n    # Perform pancake sorting\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the unsorted part of the list\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements using the pancake sorting algorithm.\n    '''\n    # Create a copy of the original list to avoid modifying the original\n    nums = list(nums)\n\n    # Apply pancake sort to the list\n    for i in range(len(nums) - 1, 0, -1):\n        # Find the largest index j such that nums[j] < nums[i]\n        max_index = i\n        for j in range(i - 1, 0, -1):\n            if nums[j] < nums[max_index]:\n                max_index = j\n        # Swap nums[i] and nums[max_index]\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Starting from the last element and swapping adjacent elements\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the current sublist\n        max_idx = i\n        for j in range(i):\n            if nums[j] < nums[max_idx]:\n                max_idx = j\n        # Swap the maximum element with the first element of the current sublist\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # function to reverse an array\n    def reverse_array(arr):\n        start = 0\n        end = len(arr) - 1\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n\n    # function to sort an array using the pancake sorting algorithm\n    def sort_array(arr):\n        n = len(arr)\n        reverse_array(arr)\n        for step in range(n - 1):\n            max_index = step\n            for i in range(step + 1, n):\n                if arr[i] > arr[max_index]:\n                    max_index = i\n            arr[step], arr[max_index] = arr[max_index], arr[step]\n            reverse_array(arr[:step + 1])\n            reverse_array(arr[step + 2:])\n        reverse_array(arr)\n\n    # call the sort_array function\n    sort_array(nums)\n\n    # print the sorted array\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1, 0, -1):\n        # Find the largest element in the first i elements\n        max_index = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    This function sorts a list of elements using the pancake sort algorithm.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        # Find the maximum element in the remaining unsorted part\n        max_index = i\n        for j in range(i):\n            if nums[j] < nums[max_index]:\n                max_index = j\n\n        # Swap the maximum element with the element at the current index\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    # Helper function to swap two elements of the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # Function to reverse the list from i to j\n    def reverse(nums, i, j):\n        while i < j:\n            swap(nums, i, j)\n            i += 1\n            j -= 1\n\n    # Main function to sort the list\n    def sort(nums):\n        # Find the maximum element in the list\n        max_element = max(nums)\n\n        # Perform an iterative pancake sort\n        for i in range(max_element + 1):\n            # Find the index of the first element greater than or equal to i\n            index = nums.index(i)\n\n            # Reverse the list from index to the end\n            reverse(nums, index, len(nums) - 1)\n\n    # Call the main function to sort the list\n    sort(nums)\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Find the length of the largest pancake that can be formed.\n    max_pancake_length = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if nums[j] < nums[i]:\n                max_pancake_length = max(max_pancake_length, j-i+1)\n    # Perform the pancake sort.\n    for i in range(n-1, -1, -1):\n        for j in range(max_pancake_length):\n            # Swap adjacent elements.\n            temp = nums[i+j]\n            nums[i+j] = nums[i+j+1]\n            nums[i+j+1] = temp\n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    # Create a dictionary to store the count of identical pairs\n    count_dict = {}\n\n    # Loop through the lists and count the same pairs\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list1[i] == list3[i]:\n                if (list1[i], list2[j]) in count_dict:\n                    count_dict[(list1[i], list2[j])] += 1\n                else:\n                    count_dict[(list1[i], list2[j])] = 1\n\n    # Return the count of identical pairs\n    return count_dict"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num = 0\n    for i in Input: \n        if type(i) == list: \n            num += 1\n    return num"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input: \n        if type(i) == list: \n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(2, len(arr)):\n        diff = arr[i] - arr[i-1]\n        max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables to store the maximum absolute difference and the maximum difference between two elements\n    max_abs_diff = 0\n    max_diff = arr[1] - arr[0]\n    \n    # Iterate through the array and calculate the maximum absolute difference and maximum difference between two elements\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i-1]\n        if diff > max_diff:\n            max_diff = diff\n        abs_diff = abs(diff)\n        if abs_diff > max_abs_diff:\n            max_abs_diff = abs_diff\n            \n    # Return the maximum absolute difference\n    return max_abs_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Initialize the maximum difference to be the difference between the minimum and maximum values\n    max_diff = abs(max_val - min_val)\n\n    # Iterate through the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize variables to store maximum difference and its index\n    max_diff = arr[1] - arr[0]\n    max_index = 0\n\n    # Iterate through the array and calculate the difference between each pair of elements\n    for i in range(1, len(arr)-1):\n        diff = arr[i+1] - arr[i]\n\n        # Update the maximum difference and its index if the difference is greater\n        if diff > max_diff:\n            max_diff = diff\n            max_index = i\n\n    return max_diff, max_index"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array must have at least 2 elements\"\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array must have at least two elements.\"\n    else:\n        max_diff = 0\n        for i in range(len(arr)):\n            for j in range(i+1, len(arr)):\n                diff = abs(arr[i] - arr[j])\n                if diff > max_diff:\n                    max_diff = diff\n        return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n):\n        y = n - x * a // b\n        if y * b == n * a and a!= 0:\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = 0\n    x2 = 0\n\n    while b > 0:\n        d = a * x1 - b * x2 + n\n        if d >= 0:\n            x2 = x1\n            x1 = d // b\n        else:\n            x1 = x1 - d // b\n            x2 = x1\n\n    if x1 == 0 and x2 == 0:\n        return None\n    else:\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the values of x and y that satisfy ax + by = n\n    x = (-b + (n // a)) // b\n    y = (-b - (n // a)) // b\n\n    # Check if there are any solutions and return a tuple of (x, y) if there are\n    if x * a + y * b == n:\n        return (x, y)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize variables\n    x = 0\n    y = 0\n    \n    # Check if the given equation has a solution\n    if a == 0:\n        if b == 0:\n            return None\n        else:\n            return (None, int(-n/b))\n    else:\n        # Calculate the discriminant\n        discriminant = b*b - 4*a*n\n        \n        # Check if the discriminant is negative or zero\n        if discriminant < 0:\n            return None\n        else:\n            # Calculate x1 and x2\n            x1 = (-b + discriminant**0.5)/(2*a)\n            x2 = (-b - discriminant**0.5)/(2*a)\n            \n            # Check if x1 and x2 are integers\n            if x1.is_integer() and x2.is_integer():\n                return (int(x1), int(x2))\n            else:\n                return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Find the discriminant\n    discriminant = b**2 - 4 * a * n\n\n    # Check if there are two solutions\n    if discriminant > 0:\n        x1 = (-b + discriminant**0.5) / (2 * a)\n        x2 = (-b - discriminant**0.5) / (2 * a)\n        return (x1, x2)\n    elif discriminant == 0:\n        x = (-b) / (2 * a)\n        return (x, x)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    for x in range(-1000, 1001):\n        y = (n - a*x) // b\n        if y*b == n and (x < 0 or (x == 0 and y % 2 == 1)):\n            return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # create a list of all possible solutions\n    solutions = [(x, y) for x in range(-1000, 1001) for y in range(-1000, 1001)]\n\n    # filter the solutions that satisfy the given equation\n    filtered_solutions = [sol for sol in solutions if a*x + b*y == n]\n\n    # if there is at least one solution, return the first one\n    if len(filtered_solutions) > 0:\n        return filtered_solutions[0]\n\n    # otherwise, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if the quadratic equation can be solved\n    discriminant = b**2 - 4*a*n\n    \n    if discriminant < 0:\n        return None\n    \n    # Calculate the two solutions\n    x1 = (-b + discriminant**0.5)/(2*a)\n    x2 = (-b - discriminant**0.5)/(2*a)\n    \n    return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Find the quadratic formula coefficients a and b\n    delta = b**2 - 4*a*n\n\n    if delta < 0:\n        return None  # no solution exists\n\n    # Find the two real roots of the quadratic formula\n    x1 = (-b + delta**0.5) / (2*a)\n    x2 = (-b - delta**0.5) / (2*a)\n\n    # Sort the roots in ascending order\n    if x1 > x2:\n        x1, x2 = x2, x1\n\n    return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == 0 and b == 0:\n        return None\n    else:\n        x = (-b + math.sqrt(b**2 - 4*a*n)) / (2*a)\n        y = (-b - math.sqrt(b**2 - 4*a*n)) / (2*a)\n        return (x, y)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    # Using set to remove all the elements present in list2 from list1\n    return list(set(list1) - set(list2))"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Create a set of all elements present in the second list\n    set2 = set(list2)\n    # Create a new list without the elements present in the second list\n    new_list = [x for x in list1 if x not in set2]\n    # Return the new list\n    return new_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list1:\n        if elem in list2:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        while element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a set of elements to be removed from list1\n    to_be_removed = set(list2)\n    # iterate over elements in list1\n    for element in list1:\n        # if the element is in the set of elements to be removed, remove it from list1\n        if element in to_be_removed:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_new = []\n    for elem in list1:\n        if elem not in list2:\n            list1_new.append(elem)\n    return list1_new"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    This function takes in two lists as arguments and removes all elements present in the second list from the first list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [num for num in list1 if num not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n    Args:\n        n (int): the value of n for which we want to calculate the series sum.\n\n    Returns:\n        int: the sum of the series.\n    \"\"\"\n    series_sum = 0\n    for i in range(n // 2):\n        series_sum += n - 2 * i\n    return series_sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    return n*n + n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    for i in range(n//2):\n        total += n - 2*i\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(0, n // 2 + 1):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    i = 0\n    while n - 2*i > 0:\n        result += n - 2*i\n        i += 1\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s*l)/2\n\ndef perimeter_polygon(s, n):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the side and number of sides.\n    '''\n    return s*(n-2)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the perimeter of the polygon\n    perimeter = 2 * s * l\n\n    # Calculate the area using Heron's formula\n    area = (s * l * (s - l)) ** 0.5 / 4\n\n    # Calculate the area of the polygon using the arctangent function\n    area_trig = pi / 180 * tan(pi / 180 * l / 2)\n\n    # Return the value of the area using the larger one\n    return max(area, area_trig)"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the base and height of the polygon\n    base = s * (l - 2)\n    height = s * tan(pi / l)\n\n    # calculate the area of the polygon\n    area = (base * height) / 2\n\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i * 2 * pi / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s**2) * tan((2*pi*i)/(l-1))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the side length and the number of sides\n    side_length = s / l\n    num_sides = l\n    \n    # calculate the area using Heron's formula\n    area = (1 / 2) * side_length * (tan((pi / num_sides) / 2))**2\n    \n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += (s ** 2) * tan((360/l) * i)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of each side\n    area = s * l\n    \n    # calculate the area of the polygon\n    area_polygon = 0.5 * area * tan(pi/l)\n    \n    return area_polygon"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a regular polygon using Heron's formula\n    area = (s * l) / 2\n    # convert the area to a square root in inches using the formula for conversion from square meters to square feet\n    area_sq_ft = area ** 0.5\n    # calculate the perimeter of the polygon using the formula for the perimeter of a polygon with n sides\n    perimeter = s * l\n    # print the area and perimeter of the polygon in inches and square feet\n    print(f\"The area of the polygon is: {area} square feet\")\n    print(f\"The perimeter of the polygon is: {perimeter} inches\")\n    print(f\"The area of the polygon in square feet is: {area_sq_ft} square feet\")"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (s/2) * l * tan(pi/l)\n    return area\n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    This function takes an integer as input and checks if the sum of the divisors of that integer is the same as the original number.\n    '''\n    sum_div = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            sum_div += i\n    if sum_div == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1: \n        return True\n    else: \n        sum1 = sum(range(1, int(math.sqrt(n)) + 1))\n        sum2 = sum(range(1, n + 1))\n        return sum1 == sum2"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    i = 1\n    while i*i <= n:\n        if n % i == 0:\n            div_sum_list = []\n            while n % i == 0:\n                n //= i\n                div_sum_list.append(i)\n            if sum(div_sum_list) == n:\n                return True\n        i += 1\n    if n > 1:\n        return True\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    # Find the sum of the divisors of n\n    div_sum = sum(divisors(n))\n\n    # Check if the sum of divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False\n\n\ndef divisors(n):\n    '''\n    Generate all divisors of a given number.\n    '''\n\n    # Initialize an empty list to store the divisors\n    divs = []\n\n    # Find the square root of n\n    sqrt_n = math.sqrt(n)\n\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(sqrt_n) + 1):\n\n        # Check if n is divisible by i\n        if n % i == 0:\n\n            # If n is divisible by i, add i to the list of divisors\n            divs.append(i)\n\n            # If i is also a factor of n, add both to the list of divisors\n            if i!= n // i:\n                divs.append(n // i)\n\n    # Return the list of divisors\n    return divs"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_set = set() \n    # create a set to store the divisors of n \n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            div_set.add(i) \n            div_set.add(n//i) \n\n    # add the last divisor \n    div_set.add(n) \n\n    # return True if the sum of the divisors is the same, False otherwise \n    return len(div_set) == len(div_set) - 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # iterate over all integers between 1 and n\n    for i in range(1, n+1): \n        # find all the divisors of i\n        divisors = [j for j in range(1, i) if i % j == 0]\n        # add all the divisors to a list\n        divisor_sum = sum(divisors)\n        # if the sum of the divisors is equal to the value of n, then n is a perfect number\n        if divisor_sum == n: \n            return True\n    # if no perfect number was found, n is not a perfect number\n    return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    div_sum = sum(divisors)\n    return div_sum"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    This function takes two integers as input and returns True if the sum of their divisors is the same, False otherwise.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(set(map(int, str(n))))\n\n    # check if the sum of divisors of n and n are the same\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 0:\n        return False\n\n    divisors = []\n\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n <= 0:\n        return \"Invalid input\"\n    \n    divisors = []\n    \n    # Find all the divisors of n\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n // i:\n                divisors.append(n // i)\n    \n    # Calculate the sum of the divisors\n    div_sum = 0\n    for divisor in divisors:\n        div_sum += divisor\n    \n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        for char in 'abcdefghijklmnopqrstuvwxyz':\n            if char.lower() == str1[i].lower() and i == ord(char)-ord('a'):\n                count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet and str1[i].lower() == alphabet[alphabet.index(str1[i].lower())]:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    # Convert the input string to lowercase\n    str1 = str1.lower()\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is an English letter, add 1 to its count in the dictionary\n        if char.isalpha():\n            char_count[char] = char_count.get(char, 0) + 1\n    # Return the dictionary as a list of tuples, where each tuple contains a character and its count\n    return char_count.items()"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(26):\n        if alphabet[i].lower() in str1.lower():\n            count += str1.lower().count(alphabet[i].lower())\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for c in str1:\n        if c.lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    \n    for char in str1:\n        if char.lower() in alphabet.lower():\n            count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    '''\n    This function takes in a string and counts the number of characters in it that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # Convert the string to lowercase to make the comparison case insensitive\n    str1 = str1.lower()\n    \n    # Initialize a dictionary to store the count of characters at each position in the string\n    char_count = {}\n    \n    # Iterate through the string and count the number of characters at each position\n    for i, char in enumerate(str1):\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a count of the number of characters that occur at each position in the English alphabet\n    english_count = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    \n    # Iterate through the dictionary and count the number of characters at each position in the English alphabet\n    for count in char_count.values():\n        english_count[str1[count-1]] += 1\n    \n    # Return the sum of the counts for each character in the English alphabet\n    return sum(english_count.values())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n\n    for i in range(len(str1)):\n        if str1[i].lower() == english_alphabet[i].lower():\n            count += 1\n\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    # Convert string to lowercase\n    str1 = str1.lower()\n\n    # Initialize counters for each English letter\n    counters = [0] * 26\n\n    # Iterate through each character in the string\n    for char in str1:\n        # If the character is a letter, increment its counter\n        if char.isalpha():\n            counters[ord(char) - ord('a')] += 1\n\n    # Count the total number of occurrences of each English letter in the string\n    total = sum(counters)\n\n    # Print the results\n    for i, counter in enumerate(counters):\n        print(chr(i + ord('a')) + \": \" + str(counter))\n    print(\"Total: \" + str(total))"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    \n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    \n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i+1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the next smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Find the highest power of 2 that is less than or equal to n\n    power = 1\n    while power <= n:\n        power <<= 1\n        \n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n & (n - 1) == 0:\n        return n\n    else:\n        return 1 << (32 - int(32 * log2(n)))"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n -= 1 # Convert n to a power of 2\n    n |= n >> 1 # Double n until it becomes a power of 2\n    n |= n >> 2 # Double n until it becomes a power of 2\n    n |= n >> 4 # Double n until it becomes a power of 2\n    n |= n >> 8 # Double n until it becomes a power of 2\n    n |= n >> 16 # Double n until it becomes a power of 2\n    n += 1 # Convert back to an integer\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the result\n    power_of_2 = n\n    \n    # Iterate until we find the smallest power of 2 greater than or equal to n\n    while power_of_2 & (power_of_2 - 1)!= 0:\n        power_of_2 <<= 1\n    \n    # Return the result\n    return power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Start with the smallest power of 2 greater than or equal to 1\n    power = 2\n    \n    # Loop until the next power of 2 is greater than or equal to n\n    while power < n:\n        power <<= 1\n    \n    # Return the power of 2 that is greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # initialize the result to the given number\n    result = n\n\n    # loop until the result is a power of 2\n    while result & (result - 1)!= 0:\n        # increment the result by 1\n        result += 1\n\n    # return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n | (n - 1)\n    return n + 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Use bitwise operations to find the next power of 2\n    power = 1\n    while power < n:\n        power <<= 1\n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Start with 1\n    power = 1\n\n    # While power is less than or equal to n\n    while power <= n:\n        # If power is a power of 2, return power\n        if power == 2**power:\n            return power\n        # Otherwise, increment power by 1\n        else:\n            power += 1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length() + 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a, x):\n    \"\"\"\n    This function takes a list and a number as inputs and returns the number of occurrences of the number in the list.\n    \"\"\"\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    Counts the frequency of a number in a list.\n\n    :param lst: the list to search\n    :type lst: list\n    :param num: the number to search for\n    :type num: int or float\n    :return: the frequency of the number in the list\n    :rtype: int\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(lst, m, n):\n    \"\"\"\n    Calculate the sum of the elements in a list within a given range.\n    \"\"\"\n    return sum(lst[i] for i in range(m, n+1))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Initialize a variable to store the sum\n    total = 0\n    \n    # Loop through the list from index m to index n\n    for i in range(m, n+1):\n        # Check if the number at index i is in the list\n        if i in list1:\n            # Add the number to the total\n            total += list1[i]\n    \n    # Return the total sum\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the list is not empty\n    if not list1:\n        return \"Error: list is empty.\"\n\n    # Check if the indices are valid\n    if m > n:\n        return \"Error: m should be less than or equal to n.\"\n    if m < 0 or n >= len(list1):\n        return \"Error: indices are invalid.\"\n\n    # Find the sum of numbers within the range\n    sum = sum(list1[m:n+1])\n\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j+1] for i, j in zip(range(m, n+1), range(m, n+1)))"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # check if indices are valid\n    if m < 0 or m >= len(list1) or n < 0 or n >= len(list1) or m > n:\n        return \"Invalid indices\"\n    # initialize sum to 0\n    sum = 0\n    # iterate through the range of indices\n    for i in range(m, n+1):\n        # add the current index to the sum\n        sum += list1[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter using Heron's formula\n    p = 5 * a * (a + math.sqrt(3)) / 4\n    \n    # Return the perimeter\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Find the semi-perimeter\n    b = 5*a**0.5\n    # Multiply by 5 to get the correct perimeter\n    perimeter = 5*b\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a\n    perimeter = circumference * math.tan(math.pi / 5)\n    return round(perimeter, 2)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5*a + 5*math.sqrt(3)*a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the perimeter of the pentagon\n    perimeter = 5 * a\n    \n    # Return the calculated perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count\n\nprint(count_occurance('hello world')) # Output: 1"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 3  # incrementing index by 3 for next occurence of'std'\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    while'std' in s:\n        s = s.replace('std', '', 1)\n        count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for word in s.split():\n        if word =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    temp = \"\"\n    for i in s:\n        if i == \"s\" and temp!= \"t\":\n            temp = \"s\"\n            count += 1\n        elif i == \"d\" and temp!= \"t\":\n            temp = \"d\"\n            count += 1\n        else:\n            temp = \"\"\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    if not test_tuple:\n        return True\n\n    # check if all elements have same data type\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for item in test_tuple:\n        data_types.add(type(item))\n    return len(data_types) == 1"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize variables to store data type of first element and the number of elements of same data type\n    first_data_type = type(test_tuple[0])\n    count = 1\n    \n    # iterate through the tuple and check if each element has same data type as the first element\n    for element in test_tuple:\n        if type(element)!= first_data_type:\n            return False\n        count += 1\n    \n    # if all elements have same data type, return True\n    if count == len(test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for element in test_tuple:\n        if isinstance(element, int) or isinstance(element, float) or isinstance(element, str):\n            types.append(type(element))\n        else:\n            return False\n    return all(x == types[0] for x in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if tuple is empty\n    if len(test_tuple) == 0:\n        return True\n\n    # get first element of the tuple\n    first_element = test_tuple[0]\n\n    # loop through rest of the elements of the tuple\n    for element in test_tuple:\n        # if element is not of same data type as first element, return False\n        if not isinstance(element, type(first_element)):\n            return False\n\n    # if all the elements are of same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    data_type = type(test_tuple[0])\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Create a set of data types\n    data_types = set([type(x) for x in test_tuple])\n    # Check if all data types in the set are the same\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # count the number of occurrences of x in the array\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n\n    # check if the count is greater than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Initialize the count and frequency variables\n    count = 0\n    frequency = 0\n    \n    # Traverse the array and update the count and frequency variables\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if arr[i] == x and count > 0:\n            frequency += 1\n            count -= 1\n    \n    # Check if the frequency is more than n/2\n    if frequency > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n//2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n//2:\n                return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    # Initialize count of x and count of majority element to zero\n    count_x = 0\n    count_majority = 0\n    \n    # Traverse through the array and count the occurrence of x and majority element\n    for i in range(n):\n        if arr[i] == x:\n            count_x += 1\n        \n        if arr[i] == arr[0]:\n            count_majority += 1\n            \n    # Check if x is the majority element and return True or False accordingly\n    if count_x > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n\n    while n > 0:\n        count += n & 1\n        n >>= 1\n\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n):\n    '''\n    This function takes an integer as input and returns the number of set bits in the binary representation of the input number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    return ''.join([chr(ord(c)-1) for i, c in enumerate(str) if i % 2 == 1])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(string):\n    # create a new string to hold the result\n    new_string = \"\"\n    \n    # loop through each character in the original string\n    for char in string:\n        # check if the index of the character is odd\n        if len(new_string) % 2 == 0:\n            # add the character to the new string\n            new_string += char\n    \n    # return the new string with odd index characters removed\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove odd values from a string.\n    \"\"\"\n    new_str = \"\"\n    for i, char in enumerate(str):\n        if i % 2 == 1:\n            new_str += char\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(string):\n    '''\n    Remove the characters which have odd index values of a given string.\n    '''\n    result = ''\n    for i in range(len(string)):\n        if i % 2 == 1:\n            result += string[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    # Initialize an empty string to store the modified string\n    modified_str = \"\"\n    # Iterate through each character in the input string\n    for i in range(len(str)):\n        # If the character has an odd index, add it to the modified string\n        if i % 2!= 0:\n            modified_str += str[i]\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # initialize the minimum variable with the first number\n    minimum = a\n    \n    # check if the first number is the minimum\n    if a < b and a < c:\n        minimum = a\n    \n    # check if the second number is the minimum\n    elif b < a and b < c:\n        minimum = b\n    \n    # check if the third number is the minimum\n    elif c < a and c < b:\n        minimum = c\n        \n    # return the minimum value\n    return minimum"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    \"\"\"\n    # Finding minimum of a, b and c using min function\n    min_num = min(a, b, c)\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find the minimum of three numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Initialize a variable to store the result\n    result = True\n\n    # Loop through all bits in the given range\n    for i in range(l, r+1):\n        # If the current bit is set, return False\n        if (n & (1 << i)) == (1 << i):\n            result = False\n            break\n\n    return result"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # initialize a variable to store the sum of unset bits\n    unset_bits = 0\n    # loop through all the bits in the given range\n    for i in range(l, r+1):\n        # if the bit at the current index is set, increment the unset_bits variable\n        if n & (1 << i):\n            unset_bits += 1\n    # check if all the bits in the range are set or not\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if r>l:  \n        return all_Bits_Set_In_The_Given_Range(n,l+1,r)  \n    else:  \n        if n & (1<<l):  \n            return False  \n        else:  \n            return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    This function takes three integers n, l and r as input. n represents the given number, \n    l represents the lower limit of the range and r represents the upper limit of the range.\n    The function returns True if all the bits are unset in the given range, else it returns False.\n    \"\"\"\n    if n & (1 << (r - l + 1)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: n, the integer number, l, the lower bound of the range, and r, the upper bound of the range.\n    It returns a boolean value indicating whether all the bits are set or unset in the range or not.\n    '''\n    for i in range(l, r+1):\n        if bin(i).count('1')!= n.bit_length():\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function checks whether all the bits are set or unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r + 1):\n        count += bin(n & i).count('1')\n    return count == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Convert the given range into binary\n    binary_l = bin(l)[2:]\n    binary_r = bin(r)[2:]\n    \n    # Get the binary representation of the given number n\n    binary_n = bin(n)[2:]\n    \n    # Initialize a variable to store the count of unset bits\n    count = 0\n    \n    # Iterate over the binary representation of the given number\n    for i in range(len(binary_n)):\n        # If the bit at index i is set, increment the count\n        if binary_n[i] == '1':\n            count += 1\n        \n        # If the bit at index i is unset, break out of the loop\n        if i >= len(binary_l) and count > 0:\n            break\n    \n    # Check if the count is equal to the difference between l and r\n    if count == r - l + 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    # initialize the count variable to zero\n    count = 0\n\n    # loop through all the bits from left to right of the given range\n    for i in range(l, r+1):\n        # check if the current bit is set or unset in the given range\n        if n & (1 << i):\n            # if it is set, increment the count variable by one\n            count += 1\n        # if the loop completes, break out of the loop\n        else:\n            break\n\n    # check if the count variable is equal to the total number of bits in the given range\n    if count == (r - l + 1):\n        # if it is, return True\n        return True\n    else:\n        # otherwise, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: n - the number of bits, l - the lower bound of the range, and r - the upper bound of the range.\n    It returns True if all the bits are unset in the given range, else it returns False.\n    '''\n    # If l and r are greater than n, return True\n    if l > n or r > n:\n        return True\n    \n    # If l is greater than r, return False\n    if l > r:\n        return False\n    \n    # Loop through each bit from 0 to n-1 and check if it is set in the given range\n    for i in range(n):\n        if (l & (1 << i))!= 0:\n            if (r & (1 << i)) == 0:\n                # If the bit is set in the given range, check if all the bits before it are also set\n                for j in range(i):\n                    if (l & (1 << j))!= 0 and (l & (1 << j))!= (r & (1 << j)):\n                        return False\n                return True\n    \n    # If all the bits are set in the given range, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Calculate the number of bits in the range\n    num_bits = r - l + 1\n\n    # Initialize the count of set bits to 0\n    count = 0\n\n    # Iterate over each bit in the range\n    for i in range(l, r+1):\n        # Check if the bit is set\n        if n & (1 << i):\n            # Increment the count of set bits\n            count += 1\n\n            # If the count is equal to the number of bits, all the bits are set in the range\n            if count == num_bits:\n                return True\n\n    # If all the bits are not set in the range, return False\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            arr[i], arr[count] = arr[count], arr[i]\n            count += 1\n        if count == n:\n            break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    # initialize the result array\n    result = [0] * len(arr)\n    \n    # iterate over the first n elements of the original array\n    for i in range(n):\n        # if the current element is negative, copy it to the result array\n        if arr[i] < 0:\n            result[i] = arr[i]\n        # otherwise, copy the next positive element to the result array\n        else:\n            j = i+1\n            while j < len(arr) and arr[j] >= 0:\n                j += 1\n            result[i] = arr[j-1]\n    \n    # copy the remaining negative elements to the result array\n    for i in range(n, len(arr)):\n        if arr[i] < 0:\n            result[i] = arr[i]\n        else:\n            result[i] = arr[i-1]\n    \n    # return the result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two lists to store positive and negative elements\n    pos_lst = []\n    neg_lst = []\n\n    # Loop through the array\n    for i in range(n):\n        # If the element is positive, add it to the positive list\n        if arr[i] > 0:\n            pos_lst.append(arr[i])\n        # If the element is negative, add it to the negative list\n        else:\n            neg_lst.append(arr[i])\n\n    # Loop through the array again and add all remaining elements to the end of the negative list\n    for i in range(n, len(arr)):\n        neg_lst.append(arr[i])\n\n    # Reverse the negative list to maintain the relative order\n    neg_lst = neg_lst[::-1]\n\n    # Combine the positive and negative lists into a single list\n    combined_lst = pos_lst + neg_lst\n\n    # Return the combined list\n    return combined_lst"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    # Check if n is a valid value for the array length\n    if n > len(arr):\n        raise ValueError(\"n must be less than or equal to the length of the array\")\n    \n    # Initialize three pointers: pos, neg, and start\n    pos = 0\n    neg = 0\n    start = n\n    \n    # Move the negative elements to the end of the array\n    while neg < len(arr) - n:\n        arr[neg], arr[start] = arr[start], arr[neg]\n        start += 1\n        neg += 1\n    \n    # Move the positive elements to the beginning of the array\n    while pos < len(arr) - n:\n        arr[pos], arr[start] = arr[start], arr[pos]\n        start += 1\n        pos += 1\n    \n    # Finally, move the remaining elements to the end of the array\n    while neg < len(arr) - n:\n        arr[neg], arr[start] = arr[start], arr[neg]\n        start += 1\n        neg += 1"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize three variables to keep track of negative, positive, and zero elements\n    negative_count = 0\n    positive_count = 0\n    zero_count = 0\n\n    # Loop through the array and count the negative, positive, and zero elements\n    for num in arr[:n]:\n        if num < 0:\n            negative_count += 1\n        elif num > 0:\n            positive_count += 1\n        else:\n            zero_count += 1\n\n    # Loop through the array again and re-arrange the elements\n    new_arr = []\n    for i in range(n):\n        if arr[i] < 0:\n            if negative_count > 0:\n                new_arr.append(arr[i])\n                negative_count -= 1\n        elif arr[i] > 0:\n            if positive_count > 0:\n                new_arr.append(arr[i])\n                positive_count -= 1\n        else:\n            new_arr.append(arr[i])\n\n    # Check if there are any remaining negative and positive elements\n    if negative_count > 0:\n        raise ValueError(\"Not enough negative elements\")\n    if positive_count > 0:\n        raise ValueError(\"Not enough positive elements\")\n\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Find the minimum element and the maximum element\n    min_elem = min(arr)\n    max_elem = max(arr)\n    \n    # Initialize two empty arrays to store negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # Iterate through the input array and store the elements in the appropriate array\n    for elem in arr:\n        if elem < 0:\n            neg_arr.append(elem)\n        else:\n            pos_arr.append(elem)\n    \n    # Re-arrange the negative and positive arrays in a new array\n    result = []\n    for i in range(n):\n        if len(neg_arr) == 0:\n            result.extend(pos_arr)\n            break\n        elif len(pos_arr) == 0:\n            result.extend(neg_arr)\n            break\n        else:\n            result.append(neg_arr.pop(0))\n            result.append(pos_arr.pop(0))\n    \n    # Return the result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize variables for counting negative and positive elements\n    neg_count = 0\n    pos_count = 0\n\n    # loop through array and count negative and positive elements\n    for i in range(n):\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n\n    # loop through array again and re-arrange negative elements before positive ones\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i], arr[i+neg_count] = arr[i+neg_count], arr[i]\n        else:\n            arr[i], arr[i+pos_count] = arr[i+pos_count], arr[i]\n\n    # return the re-arranged array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    # create two empty lists to store negative and positive elements\n    neg_list = []\n    pos_list = []\n\n    # loop through the array and add elements to their respective lists\n    for element in arr:\n        if element < 0:\n            neg_list.append(element)\n        else:\n            pos_list.append(element)\n\n    # concatenate the two lists and sort them in ascending order\n    sorted_arr = neg_list + pos_list\n    sorted_arr.sort()\n\n    # loop through the original array and assign elements to their new positions in the sorted array\n    for i in range(n):\n        if arr[i] < 0:\n            arr[i] = sorted_arr.pop(0)\n        else:\n            arr[i] = sorted_arr.pop()"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    # Initialize two pointers to the start and end of the array\n    start = 0\n    end = n - 1\n    \n    # Traverse the array from left to right\n    while start < end:\n        # If the element at start is negative, swap it with the element at end\n        if arr[start] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        # If the element at start is positive, move the start pointer to the right\n        else:\n            start += 1\n    \n    # Traverse the array from right to left\n    while start < end:\n        # If the element at end is negative, swap it with the element at start\n        if arr[end] < 0:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n        # If the element at end is positive, move the end pointer to the left\n        else:\n            end -= 1\n    \n    # Return the final sorted array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Find the first n negative and positive elements, and the first n zeros\n    negative = [i for i, x in enumerate(arr) if x < 0]\n    positive = [i for i, x in enumerate(arr) if x >= 0]\n    zeroes = [i for i, x in enumerate(arr) if x == 0]\n\n    # Re-arrange the elements\n    for i in range(n):\n        # Move the negative elements to the beginning\n        while negative and negative[0] < i:\n            arr[negative[0]], arr[i] = arr[i], arr[negative[0]]\n            negative.pop(0)\n\n        # Move the positive elements to the end\n        while positive and positive[-1] > i:\n            arr[positive[-1]], arr[i] = arr[i], arr[positive[-1]]\n            positive.pop()\n\n        # Move the zeros to the end\n        while zeroes and zeroes[-1] > i:\n            arr[zeroes[-1]], arr[i] = arr[i], arr[zeroes[-1]]\n            zeroes.pop()"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Create a new string with blank spaces replaced with the character\n    new_str = str1.replace(\" \",char)\n    \n    # Return the new string\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ', char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a min heap to store the n largest items\n    heap = []\n    \n    # Add the first n items to the heap\n    for i in range(n):\n        heapq.heappush(heap, list1[i])\n        \n    # Add the remaining items to the heap\n    for i in range(n, len(list1)):\n        if list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n        \n    # Extract the n largest items from the heap and return them as a list\n    return [heapq.heappop(heap) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # create a min heap of size n and fill it with the list\n    max_heap = [0] * n\n    heapq.heapify(max_heap)\n    \n    # add the smallest elements from the list to the heap\n    for num in list1:\n        if len(max_heap) < n:\n            heapq.heappush(max_heap, num)\n        else:\n            if num > max_heap[0]:\n                heapq.heappushpop(max_heap, num)\n    \n    # return the list of n largest elements\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return list(heap)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, -num)  # push negative number to the heap\n        if len(heap) > n:  # if heap size is greater than n, pop the smallest number from the heap\n            heapq.heappop(heap)\n    return [-num for num in heap]  # return the negative numbers in the heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap,i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n\n    # sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n\n    # extract the n largest elements from the sorted list\n    top_n = sorted_lst[:n]\n\n    # return the top_n list\n    return top_n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(lst, n):\n    '''\n    This function takes a list and an integer n as inputs and returns a list containing the n largest items from the list.\n    '''\n    # First, create a max heap of size n\n    max_heap = [max(lst[:i+1]) for i in range(n)]\n\n    # Iterate through the list and add items to the heap as needed\n    for num in lst:\n        if num > max_heap[0]:\n            # If the number is greater than the largest number in the heap, replace the largest number with the new number\n            heapq.heapreplace(max_heap, num)\n        else:\n            # If the number is less than or equal to the largest number in the heap, add it to the heap\n            heapq.heappush(max_heap, num)\n\n    # Finally, return the max heap as a list\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a min heap\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap,num)\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n    # convert the heap back to a list\n    larg_list = []\n    for _ in range(n):\n        larg_list.append(heapq.heappop(min_heap))\n    return larg_list"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r**2 + 2*math.pi*(r+h)**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = 2 * math.pi * r * h\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * 3.14159 * r**2 * h\n    print(\"The lateral surface area of a cylinder with radius\", r, \"and height\", h, \"is\", area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*pi*r*h + 2*pi*r**2\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*h**2"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    v = l ** 3\n    return v\n"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over each bit in the binary representation of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set the corresponding bit in the result variable to 1\n        if int(bit) % 2 == 0:\n            result |= 1 << int(bit)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n % 2 == 0:\n            n = n ^ (n & 1)\n        n = n >> 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate over all bits in the given number\n    for i in range(32):\n        # Get the current bit value\n        bit_value = (n >> i) & 1\n\n        # If the current bit value is even, set the corresponding bit in the result to 1\n        if bit_value == 0:\n            result |= (1 << i)\n\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Check if the input is a positive integer\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Iterate through each bit of the input number\n    for i in range(8):\n        # Check if the bit is even\n        if n & (1 << i):\n            # Set the corresponding bit to 1\n            n |= (1 << i)\n\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the new number \n    new_n = 0\n    # Iterate over each bit of the given number \n    for i in range(32): \n        # If the current bit is even, set the corresponding bit in the new number to 1 \n        if (n >> i) & 1 == 0: \n            new_n |= (1 << i) \n    # Return the new number \n    return new_n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Convert n to binary representation\n    binary_num = bin(n)[2:]\n    # Iterate through the binary representation and set the even bits to 1\n    even_bits = [0] * (len(binary_num) + 1)\n    for i in range(len(binary_num)):\n        if binary_num[i] == '0':\n            even_bits[i+1] = 0\n        else:\n            even_bits[i+1] = 1\n    # Convert the even_bits list back to an integer\n    even_bits_int = int(''.join(str(x) for x in even_bits), 2)\n    # Return the modified integer\n    return even_bits_int"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize the result as 0\n    result = 0\n\n    # iterate over each bit of the input number\n    for bit in bin(n)[2:]:\n        # if the current bit is even, set the corresponding bit in the result to 1\n        if int(bit) % 2 == 0:\n            result += int(bit)\n\n    # return the final result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through each bit of the number and set it to 1 if it's even\n    for i in range(len(bin(n)[2:])):\n        if i % 2 == 0:\n            n |= (1 << i)\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n:\n        if n & 1:\n            n |= n & -n\n        n >>= 1\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = 0\n    for i in range(32):\n        if n & (1 << i):\n            even_bits |= (1 << i)\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter() method to count the number of occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Use Counter to count the occurrences of each unique tuple in the list\n    count_dict = Counter(test_list)\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the count of each unique tuple\n    count_dict = {}\n\n    # loop through each tuple in the list\n    for item in test_list:\n        # check if the tuple is already in the dictionary\n        if item not in count_dict:\n            # if not, add it to the dictionary with a count of 1\n            count_dict[item] = 1\n        else:\n            # if it is, increment its count by 1\n            count_dict[item] += 1\n\n    # return the dictionary of count of each unique tuple\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n\n    # Create a dictionary to store the counts\n    counts = {}\n\n    # Loop through the list of tuples\n    for tup in test_list:\n        # Check if the tuple is already in the dictionary\n        if tup not in counts:\n            # If not, add it with a count of 1\n            counts[tup] = 1\n        else:\n            # If it is, increment its count\n            counts[tup] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    count_dict = {}\n    \n    # Iterate through the list of tuples\n    for tup in test_list:\n        # Check if the tuple already exists in the dictionary\n        if tup in count_dict:\n            # If it does, increment the count\n            count_dict[tup] += 1\n        # If the tuple doesn't exist, add it to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n            \n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Use a Counter object to count the occurrences of each tuple\n    counter = Counter(test_list)\n    # Return the dictionary of counts\n    return dict(counter)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts\n    count_dict = {}\n\n    # Iterate through the list of tuples\n    for tup in test_list:\n        # If the tuple is already in the dictionary, increment its count\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # Otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count_dict[tup] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter()\n    for item in test_list:\n        counter[item] += 1\n    return counter"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    '''\n    This function takes a string as input and returns the number of non-empty substrings of the string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    # Split the string into a list of characters\n    char_list = list(str)\n    \n    # Initialize a count variable to 0\n    count = 0\n    \n    # Loop through each character in the list\n    for i in range(len(char_list)):\n        # Check if the character is a letter\n        if char_list[i].isalpha():\n            # Loop through each possible starting position of a substring\n            for j in range(i, len(char_list)):\n                # Check if the substring is non-empty and not a letter\n                if char_list[j].isalpha() and (j-i+1) > 0:\n                    # Increment the count variable\n                    count += 1\n    \n    # Return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize the count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each possible substring of length 1 to i+1\n        for j in range(i+1):\n            # check if the substring is not empty\n            if str[j:i+1]!= '':\n                # increment the count variable\n                count += 1\n    \n    # return the count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize count variable to 0\n    count = 0\n    \n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each character after i\n        for j in range(i+1, len(str)+1):\n            # check if substring is non-empty\n            if str[i:j]!= '':\n                # increment count by 1\n                count += 1\n    \n    # return count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    prev_sequence = []\n    current_sequence = [2]\n    \n    while current_sequence[0] <= m and len(current_sequence) < n:\n        prev_sequence = current_sequence\n        current_sequence = []\n        \n        for i in range(1, len(prev_sequence)):\n            if prev_sequence[i] < m and prev_sequence[i] + 2 <= m:\n                current_sequence.append(prev_sequence[i] + 2)\n        total_sequences += len(current_sequence)\n    \n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        count = 0\n        for i in range(2, m + 1):\n            if i <= n:\n                count += get_total_number_of_sequences(i, n - 1)\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    total_sequences = 0\n    for i in range(1, m+1):\n        if i >= 2 * total_sequences and i <= m:\n            total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    prev_num = 1\n    for i in range(1, m):\n        if i >= prev_num * 2 and i <= m:\n            total_sequences += 1\n        prev_num = i\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(n, m, current_sequence, count):\n        if n == 0:\n            return count\n        elif n % 2 == 0:\n            for i in range(current_sequence[-1] + 2, min(m, current_sequence[-1] + n)):\n                current_sequence.append(i)\n                count = helper(n - 1, m, current_sequence, count)\n                current_sequence.pop()\n        else:\n            for i in range(current_sequence[-1] + 1, min(m, current_sequence[-1] + n + 1)):\n                current_sequence.append(i)\n                count = helper(n - 1, m, current_sequence, count)\n                current_sequence.pop()\n        return count\n\n    return helper(n, m, [], 0)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # create a list to store the sequences\n    sequences = []\n\n    # loop through all possible starting elements\n    for i in range(1, m + 1):\n\n        # loop through all possible ending elements\n        for j in range(i, m + 1):\n\n            # check if the ending element is within range\n            if j - i >= 2:\n                # check if the ending element is greater than or equal to twice the previous element but less than or equal to m\n                if j - i <= m and (j - i) % 2 == 0:\n                    # create a sequence of length n and add it to the list\n                    sequence = [i] * n + [j]\n                    sequences.append(sequence)\n\n    # return the total number of sequences\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize a counter variable to keep track of the number of sequences\n    count = 0\n    \n    # Loop through each number from 2 to m (inclusive)\n    for i in range(2, m+1):\n        # Check if the current number is less than or equal to twice the previous number\n        if i <= 2 * i:\n            # Increment the counter by 1 if the condition is met\n            count += 1\n    \n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize variables for sum and count\n    total_sum = 0\n    count = 0\n\n    # Check if the base condition is met (m < n)\n    if m < n:\n        return 0\n\n    # Loop through the first n elements of the sequence\n    for i in range(n):\n        # Calculate the next element of the sequence\n        if i == 0:\n            next_element = 2\n        elif i == n-1:\n            next_element = m\n        else:\n            next_element = max(2 * seq[i-1], seq[i-1], seq[i])\n\n        # Check if the next element is less than or equal to m\n        if next_element <= m:\n            # Check if the next element is greater than or equal to 2*previous_element\n            if next_element >= 2 * seq[i-1]:\n                # If the next element is greater than or equal to 2*previous_element, increment the count\n                count += 1\n\n                # Add the next element to the total sum\n                total_sum += next_element\n\n    return count, total_sum"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        prev = 1\n        curr = 1\n        for j in range(2, i+1):\n            if prev < m and prev + prev > m:\n                curr += 1\n            prev = curr\n        total += curr\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # Initialize the number of possible sequences to 1\n    num_sequences = 1\n    \n    # Initialize the two variables prev and curr to be the first two elements of the sequence\n    prev = 2\n    curr = 3\n    \n    # Loop through each element of the sequence\n    while curr <= m:\n        # If curr is greater than the maximum possible value for a sequence, then stop the loop\n        if curr > 2*prev:\n            break\n        \n        # Increment the number of possible sequences by 1\n        num_sequences += 1\n        \n        # Calculate the next element of the sequence\n        prev, curr = curr, 2*curr\n    \n    # Return the total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    # check if the length of list1 is greater than or equal to the length of list2\n    if len(list1) >= len(list2):\n        # find the last element of list1 and store it in a variable\n        last_element = list1[-1]\n        # use list slicing to replace the last element of list1 with the elements of list2\n        list1[-1] = list2[:]\n    else:\n        print(\"Error: The first list must be at least as long as the second list.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) == 0 or len(list2) == 0:\n        return []\n    \n    list1.pop()\n    list1.extend(list2)\n    \n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the first list has at least 1 element\n    if len(list1) < 1:\n        return \"Error: First list has no elements.\"\n    # Check if the second list has at least 1 element\n    elif len(list2) < 1:\n        return \"Error: Second list has no elements.\"\n    # Check if the length of the first list is greater than the length of the second list\n    elif len(list1) > len(list2):\n        return \"Error: Length of first list is greater than length of second list.\"\n    # Replace the last element of the first list with the elements of the second list\n    else:\n        list1[-1] = list2\n        return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1) < len(list2):\n        list1 += [list2.pop()] * (len(list1) - len(list2))\n    else:\n        list2 += [list1.pop()] * (len(list2) - len(list1))\n    return list1 + list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(num):\n        '''\n        Helper function to check if a given number is a perfect square or not.\n        '''\n        root = int(math.sqrt(num))\n        if root*root == num:\n            return True\n        else:\n            return False\n\n    def next_power_of_two(num):\n        '''\n        Helper function to find the next power of two less than or equal to a given number.\n        '''\n        power = 1\n        while power < num:\n            power <<= 1\n        return power\n\n    def next_square(num):\n        '''\n        Helper function to find the next perfect square greater than a given number.\n        '''\n        while num >= 0:\n            if is_perfect_square(num):\n                return num\n            num -= 1\n        return -1\n\n    if N < 0:\n        N = -N\n\n    perfect_square = next_square(N)\n    next_power_of_two_less_than_or_equal_to_N = next_power_of_two(N)\n\n    if next_power_of_two_less_than_or_equal_to_N < perfect_square:\n        return perfect_square\n\n    return next_square(perfect_square - 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N**2 == N:\n        sqrt_N += 1\n    else:\n        sqrt_N += 2\n    return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes an integer N as input and returns the next perfect square greater than N.\n\n    If N is already a perfect square, the function returns N.\n\n    If N is not a perfect square, the function computes the next largest perfect square that is less than N and returns it.\n    '''\n\n    # Check if N is already a perfect square\n    if math.isqrt(N) ** 2 == N:\n        return N\n\n    # Compute the next largest perfect square that is less than N\n    next_sqrt = math.sqrt(N) + 1\n\n    # Return the next largest perfect square\n    return int(next_sqrt ** 2)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x = N\n    while True:\n        x = (x + math.sqrt(x**2 + 4*N)) / 2\n        if x == int(x) and x > N:\n            return int(x)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    left, right = 1, N  # start with the smallest square and move towards the largest\n\n    while left <= right:  # binary search for the largest perfect square less than or equal to N\n        mid = (left + right) // 2\n        if mid * mid == N:\n            right = mid - 1  # we found the largest perfect square\n        elif mid * mid < N:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left + 1  # add 1 to get the next perfect square greater than N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n    if N%2 == 1:\n        N+=1\n    else:\n        N-=1\n\n    while True:\n        if math.sqrt(N) % 1 == 0:\n            break\n        N+=1\n\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    i = 0\n    while True:\n        i += 1\n        square = math.sqrt(i)\n        if square > N:\n            return i\n        elif square == N:\n            return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    # Helper function to find the square root of a number\n    def sqrt(num):\n        return math.sqrt(num)\n\n    # Helper function to check if a number is a perfect square\n    def is_square(num):\n        return sqrt(num) == int(sqrt(num))\n\n    # Helper function to find the next perfect square greater than a given number\n    def next_square(N):\n        if is_square(N):\n            return N + 1\n        else:\n            i = 1\n            while True:\n                if N > 4 * i * i:\n                    return 4 * i * i\n                i += 1\n\n    # Find the next perfect square greater than N\n    next_N = next_square(N)\n\n    return next_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    sqrt_N = math.sqrt(N)\n    while True:\n        sqrt_N += 1\n        if sqrt_N**2 > N:\n            return sqrt_N**2"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N % 4 == 0:\n        # If N is a multiple of 4, then it is already a perfect square\n        return N\n    else:\n        # Otherwise, find the next perfect square greater than N\n        x = int(math.sqrt(N))\n        while True:\n            y = 4*x*x + N\n            if y > N:\n                # If y is greater than N, then x is the next perfect square greater than N\n                return x\n            else:\n                # Otherwise, try the next smaller perfect square\n                x -= 1"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0]*n for _ in range(2)] # two arrays to store the maximum subsequences\n    max_sum = [[0]*n for _ in range(2)] # another array to store the maximum subsequence sums\n    prev = [0]*n # another array to store the previous index for the maximum subsequence\n\n    for i in range(1, n): # iterate through the array\n        if arr[i-1] < arr[i]: # if the current element is less than the previous one\n            if dp[0][i-1] + arr[i] > dp[1][i-1]: # if the maximum subsequence ending at the previous index is increasing\n                dp[0][i] = dp[0][i-1] + arr[i]\n                max_sum[0][i] = max(max_sum[0][i], dp[0][i])\n                prev[i] = i-1\n            else: # otherwise, the maximum subsequence ending at the previous index is decreasing\n                dp[1][i] = dp[1][i-1] + arr[i]\n                max_sum[1][i] = max(max_sum[1][i], dp[1][i])\n                prev[i] = i-1\n\n    return max(max_sum[0][n-1], max_sum[1][n-1]) # return the maximum subsequence sum\n"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        if i % 2 == 0:  # Even indices\n            if arr[i] >= arr[i-1]:  # If the current element is greater than the previous one\n                current_sum += arr[i]  # Add the current element to the current sum\n            else:  # If the current element is less than or equal to the previous one\n                current_sum = arr[i]  # Reset the current sum to the current element\n        else:  # Odd indices\n            if arr[i] <= arr[i-1]:  # If the current element is less than or equal to the previous one\n                current_sum += arr[i]  # Add the current element to the current sum\n            else:  # If the current element is greater than the previous one\n                current_sum = arr[i]  # Reset the current sum to the current element\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    current_sum = 0  # initialize current_sum to 0\n\n    for num in arr:\n        if num < current_sum:  # if the current number is less than the current_sum\n            current_sum += num  # add the current number to the current_sum\n        else:  # if the current number is greater than or equal to the current_sum\n            max_sum = max(max_sum, current_sum)  # update max_sum if the current_sum is greater\n            current_sum = num  # reset the current_sum to the current number\n\n    max_sum = max(max_sum, current_sum)  # update max_sum with the remaining current_sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    elif arr[0] <= arr[1]:\n        return max(arr[0], max_sum(arr[1:]))\n    else:\n        return max(arr[1], max_sum(arr[:-1]))"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array,\n    where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n    # Initialize variables to store the minimum and maximum values seen so far in the subsequence\n    min_val = arr[0]\n    max_val = arr[0]\n    # Initialize variables to store the sum of the subsequence seen so far\n    subseq_sum = arr[0]\n\n    # Loop through the array and update the minimum and maximum values seen so far\n    for i in range(1, len(arr)):\n        if arr[i] <= min_val:\n            min_val = arr[i]\n        elif arr[i] >= max_val:\n            max_val = arr[i]\n        # Update the sum of the subsequence seen so far\n        subseq_sum += arr[i]\n\n    # Initialize variables to store the maximum sum and the index of the maximum value\n    max_sum = subseq_sum\n    max_index = 0\n    # Loop through the array again and find the maximum sum and its index\n    for i in range(1, len(arr)):\n        # If the current value is increasing and the previous value was decreasing, update the maximum sum\n        if arr[i] > arr[i - 1] and arr[i - 1] > min_val:\n            subseq_sum = arr[i] - arr[i - 1]\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n                max_index = i - 1\n        # If the current value is decreasing and the previous value was increasing, update the minimum value\n        elif arr[i] < arr[i - 1] and arr[i - 1] < max_val:\n            subseq_sum = arr[i] - arr[i - 1]\n            if subseq_sum > max_sum:\n                max_sum = subseq_sum\n                max_index = i - 1\n\n    return max_sum, max_index"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # check if the array is already bitonic\n    is_bitonic = True\n    for i in range(1, n):\n        if arr[i - 1] < arr[i]:\n            is_bitonic = False\n            break\n\n    if is_bitonic:\n        return max(arr)\n\n    # sort the array in decreasing order\n    arr = sorted(arr, reverse=True)\n\n    # calculate the sum of the first n/2 elements and the sum of the last n-n/2 elements\n    left_sum = sum(arr[:n // 2])\n    right_sum = sum(arr[n // 2:])\n\n    # find the maximum sum of a bitonic subsequence in the left half of the array\n    left_max = max_sum(arr[:n // 2])\n\n    # find the maximum sum of a bitonic subsequence in the right half of the array\n    right_max = max_sum(arr[n // 2:])\n\n    # return the maximum of the left and right half\n    return max(left_sum + left_max, right_sum + right_max)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Initialize variables to keep track of the current max sum and the maximum sum so far\n    max_sum_so_far = arr[0]\n    max_sum_ending_here = arr[0]\n\n    # Traverse the array\n    for i in range(1, len(arr)):\n        # If the current element is increasing, update the maximum sum ending here\n        if arr[i] > arr[i - 1]:\n            max_sum_ending_here = arr[i]\n        # If the current element is decreasing, update the maximum sum so far\n        else:\n            max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n            max_sum_ending_here = arr[i]\n\n    # Return the maximum sum of a bitonic subsequence\n    return max_sum_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return None\n    \n    # Check if the array is already bitonic\n    is_bitonic = True\n    for i in range(n-2):\n        if arr[i] > arr[i+1]:\n            is_bitonic = False\n            break\n        elif arr[i] < arr[i+1]:\n            is_bitonic = False\n            break\n    if is_bitonic:\n        return sum(arr)\n    \n    # Convert the array to a list of increasing or decreasing subsequences\n    subseq = []\n    for i in range(n-1):\n        if arr[i] <= arr[i+1]:\n            subseq.append([arr[i], arr[i+1]])\n        else:\n            subseq.append([arr[i+1], arr[i]])\n    subseq.append([arr[-1], arr[0]])\n    \n    # Find the maximum sum of any bitonic subsequence\n    max_sum = sum(subseq[0])\n    for i in range(1, n):\n        if is_bitonic:\n            break\n        if subseq[i][1] > subseq[i-1][1]:\n            max_sum += subseq[i][0] - subseq[i-1][0]\n        elif subseq[i][1] < subseq[i-1][1]:\n            max_sum += subseq[i][0] - subseq[i-1][0]\n    \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Check for descending subsequence\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] < arr[i+1]:\n            return max(arr[i], arr[i-1], arr[i+1])\n\n    # Check for ascending subsequence\n    for i in range(1, n-1):\n        if arr[i] < arr[i-1] and arr[i] > arr[i+1]:\n            return max(arr[i], arr[i-1], arr[i+1])\n\n    # No subsequence found\n    return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    max_sum = float('-inf')\n    prev = float('-inf')\n    curr_sum = 0\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            curr_sum += arr[i]\n        elif arr[i] < arr[i+1]:\n            curr_sum -= arr[i]\n        else:\n            curr_sum = arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        elif curr_sum < prev:\n            prev = curr_sum\n    return max_sum"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1\n    x1 = number / x0\n    xn = 1\n    while abs(x1 - xn) > 1e-10:\n        xn = x1\n        x1 = (x1 + number / x1) / 2\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Input must be non-negative\")\n    sqrt_count = 0\n    x = 1\n    y = 1\n    while abs(x**2 - number) >= 1e-6 and sqrt_count < 100:\n        x = x - (number/x)\n        sqrt_count += 1\n    if sqrt_count >= 100:\n        raise ValueError(\"No convergence after 100 iterations\")\n    return sqrt_count, x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"Number must be a non-negative number.\")\n    \n    if number == 0:\n        return 0\n    \n    # calculate the initial guess\n    guess = number / 2\n    \n    # iterate until the guess is sufficiently close to the square root\n    while True:\n        next_guess = (guess + number / guess) / 2\n        \n        if abs(next_guess - guess) < 1e-6:\n            break\n        \n        guess = next_guess\n    \n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize variables\n    guess = number / 2\n    prev_guess = guess\n    tolerance = 0.00001\n\n    while abs(guess * guess - number) >= tolerance:\n        prev_guess = guess\n        guess = (number / guess) + guess / 2\n\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print(\"Error: Please provide a non-negative number\")\n        return None\n    \n    # Initialize variables to store previous guess, current guess, and distance from previous guess\n    previous_guess = 0\n    current_guess = number/2\n    distance = current_guess - previous_guess\n    \n    while distance > 0.0001:\n        # Update previous guess and distance\n        previous_guess = current_guess\n        current_guess = (current_guess + number/current_guess)/2\n        distance = current_guess - previous_guess\n    \n    # Return the final guess as the square root of the input number\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize the upper and lower bounds\n    lower_bound = 0\n    upper_bound = number\n\n    # iterate until we find the square root\n    while True:\n        mid = (lower_bound + upper_bound) / 2\n        guess = mid * mid\n\n        # check if the guess is close enough\n        if abs(guess - number) < 0.0001:\n            return guess\n\n        # if the guess is too small, update the upper bound\n        elif guess < number:\n            upper_bound = mid\n\n        # if the guess is too large, update the lower bound\n        else:\n            lower_bound = mid"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    \n    # initialize variables\n    guess = number / 2\n    epsilon = 1e-10\n    \n    # loop until the difference between the guess and the square of the guess is less than epsilon\n    while abs(guess**2 - number) > epsilon:\n        # update guess\n        guess = (guess + number / guess) / 2\n    \n    # return the final guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # initialize x and y values\n    x = 1\n    y = (number + x/x) / 2\n\n    # iterate until y is within the desired precision\n    while abs(x - y) > 10**-10:\n        x = y\n        y = (number + x/x) / 2\n\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Set the starting and ending points of the interval\n    a = 0.0\n    b = number\n\n    # Initialize variables for the current approximation and the previous approximation\n    c = 0.5 * (a + b)\n    last_c = c\n\n    # Compute the square root using the babylonian method\n    while abs(c - last_c) > 1e-10:\n        last_c = c\n        c = 0.5 * (a + b) + (b - a) / c\n\n    # Return the current approximation\n    return c"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError(\"The number must be non-negative.\")\n    guess = number / 2\n    while True:\n        if guess * guess == number:\n            return guess\n        elif guess * guess > number:\n            guess -= (number / guess)\n        else:\n            guess += (number / guess)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    # Step 1: Initialize the longest_palindrome and max_length variables\n    longest_palindrome = \"\"\n    max_length = 0\n\n    # Step 2: Loop through each character in the string\n    for i in range(len(str)):\n        # Step 3: Calculate the length of the longest palindromic subsequence up to the current character\n        left = 0\n        right = i\n        while left < right:\n            if str[left] == str[right]:\n                left += 1\n                right -= 1\n            else:\n                if left == right:\n                    left += 1\n                else:\n                    left += 1\n                    right -= 1\n\n        # Step 4: Update the longest_palindrome and max_length variables\n        if right - left + 1 > max_length:\n            longest_palindrome = str[left:right+1]\n            max_length = right - left + 1\n\n    # Step 5: Return the length of the longest palindromic subsequence\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the dp table\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the dp table using dynamic programming\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Find the length of the longest palindromic subsequence\n    max_length = dp[0][n - 1]\n    for i in range(n - 2, -1, -1):\n        max_length = max(max_length, dp[i + 1][n - 1])\n\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_palindrome(string):\n    \"\"\"\n    This function checks if a given string is palindrome or not.\n    \"\"\"\n    return string == string[::-1]\n\ndef longest_palindromic_subsequence(string):\n    \"\"\"\n    This function finds the length of the longest palindromic subsequence in a given string.\n    \"\"\"\n    n = len(string)\n    longest = 1\n    \n    # Check for odd length strings\n    for i in range(n):\n        if is_palindrome(string[i:i+2]):\n            longest = 2\n    \n    # Check for even length strings\n    for i in range(n-1):\n        if is_palindrome(string[i:i+3]):\n            longest = 3\n    \n    return longest"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    n = len(str)\n    # create a 2D table to store the lengths of palindromic subsequences\n    table = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # fill in the table using the recurrence relation\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if str[i - 1] == str[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # return the length of the longest palindromic subsequence\n    return table[n][n]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Initialize a 2D array to store the lengths of longest palindromic subsequences ending at each index.\n    # Initialize the first row and column with 1.\n    dp = [[1]*n for i in range(n)]\n\n    # Find the length of the longest palindromic subsequence ending at each index.\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                dp[i][j] = 2 + dp[i+1][j-1]\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    # Find the length of the longest palindromic subsequence in the entire string.\n    length = dp[0][n-1]\n\n    return length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Create a 2D matrix of size (n+1) x (m+1) to store intermediate results\n    dp = [[0] * (len(s) + 1) for _ in range(len(s) + 1)]\n\n    # Initialize the diagonal values for odd length strings\n    for i in range(1, len(s) + 1):\n        dp[i][i] = 1\n\n    # Fill the rest of the matrix\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(s) + 1):\n            if s[i - 1] == s[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[len(s)][len(s)]\n"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    # Initialize two variables: i and j to start with index 0 and length of the string respectively\n    i = 0\n    j = 0\n    \n    # Initialize a variable to store the maximum length of palindromic subsequence found so far\n    max_length = 1\n    \n    # Loop through all possible substrings of the given string\n    for k in range(len(str)):\n        \n        # Check if the substring is palindrome\n        if str[i] == str[k]:\n            \n            # Update the maximum length if the length of the current substring is greater\n            if k - i + 1 > max_length:\n                max_length = k - i + 1\n                \n            # Move the start index of the next substring to the right by 1\n            i += 1\n        \n        # If the substring is not palindrome, move the start index to the right by 1\n        else:\n            j = i\n            \n            # Move the start index of the next substring to the right by 1\n            while j < k and str[j]!= str[k]:\n                j += 1\n            \n            # Check if the substring starting from index j is palindrome\n            if j - i + 1 > max_length:\n                max_length = j - i + 1\n            \n            # Move the start index to the right by 1\n            i = j + 1\n    \n    # Return the maximum length of palindromic subsequence found so far\n    return max_length"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(s):\n    \"\"\"\n    This function takes a string as input and returns the length of the longest palindromic subsequence.\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return n\n\n    # Create a 2D table to store all possible lengths\n    # of the longest palindromic subsequence ending at each position\n    table = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize all rows and columns to 1\n    for i in range(n):\n        table[i][i] = 1\n\n    # Fill the table in bottom-up manner\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                table[i][j] = table[i + 1][j - 1] + 2\n            else:\n                table[i][j] = max(table[i + 1][j], table[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str) \n    n = len(str) \n    dp = [[0 for j in range(n)] for i in range(n)] \n    for i in range(n): \n        dp[i][i] = 1 \n    for l in range(2, n+1): \n        for i in range(n-l+1): \n            j = i+l-1 \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1]) \n    return dp[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(s): \n    n = len(s) \n    # Initialize a 2D table to store the lengths of palindromic subsequences ending at each position \n    table = [[0 for j in range(n)] for i in range(n)] \n    max_len = 1 \n    # Compute the lengths of palindromic subsequences ending at each position and fill the table \n    for i in range(n): \n        table[i][i] = 1 \n        if i > 0 and s[i] == s[i-1]: \n            table[i-1][i] = 2 \n        for j in range(i-1, -1, -1): \n            if s[i] == s[j]: \n                table[j][i] = table[j+1][i-1] + 2 \n                if table[j][i] > max_len: \n                    max_len = table[j][i] \n    return max_len "
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 0\n    for i in range(1, n):\n        harmonic += 1 / i\n    return harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/(n-1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 1\n    for i in range(2, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    total = 0\n    for i in range(n):\n        total += 1/i\n    return total"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(n-1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (1 + harmonic_sum(n-1)) / n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    \"\"\"\n    return (n*(n-1)) // 2"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 2*n*n - 2*n + 1"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create an empty dictionary to store the counts of elements in both arrays\n    intersection_dict = {}\n    # Iterate through each element in array1\n    for num in array_nums1:\n        # Check if the element is already in the dictionary\n        if num in intersection_dict:\n            # Increment the count of the element in both arrays\n            intersection_dict[num] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            intersection_dict[num] = 1\n    # Create an empty set to store the common elements\n    common_elements = set()\n    # Iterate through each element in array2\n    for num in array_nums2:\n        # Check if the element is already in the dictionary\n        if num in intersection_dict:\n            # If the element is in the dictionary, increment its count\n            intersection_dict[num] += 1\n            # If the count of the element is greater than 1, add it to the common elements set\n            if intersection_dict[num] > 1:\n                common_elements.add(num)\n    # Return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the values and their indices in array_nums1\n    dict_nums1 = {}\n    for i,num in enumerate(array_nums1):\n        if num in dict_nums1:\n            dict_nums1[num].append(i)\n        else:\n            dict_nums1[num] = [i]\n\n    # create an empty list to store the common values and their indices in array_nums2\n    intersection = []\n\n    # loop through array_nums2 and check if each value is in dict_nums1\n    for i,num in enumerate(array_nums2):\n        if num in dict_nums1:\n            # loop through the list of indices for the current value in dict_nums1\n            for j in dict_nums1[num]:\n                # if the current index is not already in the intersection list, append it\n                if j not in intersection:\n                    intersection.append(j)\n\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    common = []\n\n    for num in array_nums1:\n        if num in array_nums2 and num not in common:\n            common.append(num)\n\n    return common"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set from array_nums1 to remove duplicates\n    set_nums1 = set(array_nums1)\n    # create an empty set to store the intersection\n    intersection = set()\n    # iterate through array_nums2 and check if each element is in set_nums1\n    for num in array_nums2:\n        if num in set_nums1:\n            # add the element to the intersection set\n            intersection.add(num)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns the intersection of them.\n    \"\"\"\n    # Create a set from the second array and convert it to a list\n    set_nums2 = set(array_nums2)\n    # Find the intersection of the first array and the second array\n    intersection = list(set_nums2.intersection(array_nums1))\n    # Return the intersection\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Create a set of elements in array_nums1\n    set1 = set(array_nums1)\n    # Create a set of elements in array_nums2\n    set2 = set(array_nums2)\n    # Find the intersection of set1 and set2\n    intersection = set1.intersection(set2)\n    # Convert the set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection_set = set1.intersection(set2)\n    return list(intersection_set)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array that contains the intersection of the two arrays.\n    \"\"\"\n    # Using two pointers to find the intersection of the two arrays\n    i = j = 0\n    intersection = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            intersection.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    # Create a dictionary to store the frequency of each number in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Create a list to store the intersection of the two arrays\n    intersection_list = []\n    \n    # Iterate through the second array and check if each number in the first array appears in the dictionary\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection_list.append(num)\n            freq_dict[num] -= 1\n    \n    # Return the intersection of the two arrays\n    return intersection_list"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    This function takes in a tuple and an element and returns the count of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # Create a new list to store the resulting elements\n    result = []\n    # Iterate over each element in the original list\n    for i in range(len(list)):\n        # Insert the element before the current element\n        result.insert(i, element)\n        # Add the current element to the result list\n        result.append(list[i])\n    # Return the resulting list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        list.insert(i, element)\n    return list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(lst, elem):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [elem] + lst[1:]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.insert(i, element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # print polar coordinates\n        print(\"r = \", r, \", theta = \", theta)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        polar = cmath.polar(num)\n        # Append the polar coordinates to the result list\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath  \n  \ndef convert(numbers):  \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''  \n    for num in numbers:  \n        complex_num = complex(num[0], num[1])  \n        magnitude = abs(complex_num)  \n        angle = cmath.phase(complex_num)  \n        print(f\"Polar coordinates for {num}: ({magnitude}, {angle:.2f}\u00b0)\")  "
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # Extract the real and imaginary parts of the complex number\n        real = number.real\n        imag = number.imag\n        \n        # Calculate the magnitude of the complex number\n        magnitude = cmath.sqrt(real**2 + imag**2)\n        \n        # Calculate the phase angle of the complex number\n        phase = cmath.phase(number)\n        \n        # Convert the magnitude and phase to polar coordinates\n        r = magnitude * cmath.cos(phase)\n        theta = cmath.degrees(cmath.phase(number))\n        \n        # Print the polar coordinates in the format \"magnitude + theta rads\"\n        print(f\"{magnitude} + {theta} rads\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for number in numbers:\n        try:\n            complex_numbers.append(complex(number))\n        except ValueError:\n            print(\"Invalid input for complex number:\", number)\n    \n    polar_coordinates = []\n    for complex_number in complex_numbers:\n        try:\n            polar_coordinates.append(cmath.polar(complex_number))\n        except ValueError:\n            print(\"Invalid input for polar coordinates:\", complex_number)\n    \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Loop through each number in the list of numbers\n    for num in numbers:\n        # Check if the number is a complex number\n        if isinstance(num, complex):\n            # If it is, convert it to polar coordinates and append the result to a new list\n            polar = [cmath.sqrt(num.real**2 + num.imag**2), cmath.phase(num)]\n            polar_list.append(polar)\n        # If the number is not a complex number, print an error message\n        else:\n            print(\"Error: {} is not a complex number.\".format(num))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    complex_numbers = []\n    for num in numbers:\n        complex_numbers.append(complex(num))\n    polar_coordinates = []\n    for num in complex_numbers:\n        r = abs(num)\n        theta = cmath.phase(num)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        magnitude = cmath.sqrt(number.real**2 + number.imag**2)\n        angle = cmath.phase(number)\n        polar_coordinates.append((magnitude, angle))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert the complex number to polar coordinates\n        real, imag = cmath.rect(num)\n        \n        # Calculate the magnitude of the complex number\n        mag = cmath.sqrt(real**2 + imag**2)\n        \n        # Calculate the angle of the complex number\n        angle = cmath.phase(num)\n        \n        # Print the polar coordinates\n        print(\"({}, {}) = {} * {} * cos({}) + {} * sin({}) = {} + {} * i\".format(real, imag, mag, cmath.pi, angle, mag, angle))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real, imaginary = cmath.polar(num)\n        print(real, imaginary, abs(num))"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(lst):\n    count = 0\n    for i in lst:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for num in list1:\n        if type(num) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb_list = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[:i] + l[i+1:], n-1):\n            comb_list.append((l[i],) + j)\n    return comb_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # generate all combinations of length n using combinations_with_replacement\n    combinations = combinations_with_replacement(l, n)\n    # convert the combinations to a list of tuples\n    result = list(combinations)\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = combinations_with_replacement(l, n)\n    return list(comb)"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)-n+1):\n        color_combinations.append(tuple(l[i:i+n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Generate all possible combinations with repetition of the list elements\n    combinations = combinations_with_replacement(l, n)\n\n    # Create a list with tuples for each combination\n    combinations_list = list(combinations)\n\n    # Return the list of tuples\n    return combinations_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_combinations = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)+1):\n            color_combinations.append(tuple(sorted([l[i], l[j]])[:n]))\n    return color_combinations"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number n and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    # Loop through numbers from 2 to n-1\n    for num in range(2, n):\n        # Check if number is prime\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        # If number is prime, count it\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n):\n        isPrime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, i)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = []\n    count = 0\n    \n    # Check if n is prime\n    if n < 2:\n        return 0\n    elif n == 2:\n        count += 1\n        primes.append(2)\n    \n    # Check if n is not prime\n    for i in range(3, n+1, 2):\n        if n % i == 0:\n            count += 1\n            primes.append(i)\n    \n    # Return count and primes\n    return count, primes"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    num = 2\n    while num <= n:\n        is_prime = True\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        num += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def isPrime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n + 1):\n        if isPrime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return test_tup2\n    elif test_tup1[1] > test_tup2[1]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1 if test_tup1 > test_tup2 else test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # getting the maximum value of each tuple element\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # comparing the maximum values of each tuple element\n    if max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n\n    # Find the maximum element in each tuple\n    max_elem1 = max(test_tup1)\n    max_elem2 = max(test_tup2)\n\n    # Return the tuple with the maximum element\n    return (max_elem1, max_elem2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns the tuple with the maximum value in each tuple.\n    '''\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    # Find the index of the maximum value in each tuple\n    ind1 = test_tup1.index(max1)\n    ind2 = test_tup2.index(max2)\n    # Create a new tuple with the maximum value in each tuple\n    result_tuple = (max1, max2)\n    # Remove the maximum value from the original tuple\n    test_tup1[ind1] = None\n    test_tup2[ind2] = None\n    # Return the new tuple\n    return result_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Get the length of both tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n    \n    # Compare the length of the two tuples\n    if len1 >= len2:\n        return max(test_tup1)\n    else:\n        return max(test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    # Find the length of the tuples\n    len1 = len(test_tup1)\n    len2 = len(test_tup2)\n\n    # If the first tuple is longer, swap them\n    if len1 > len2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n\n    # Loop through the tuples and compare the elements\n    for i in range(min(len1, len2)):\n        if test_tup1[i] < test_tup2[i]:\n            test_tup1[i], test_tup2[i] = test_tup2[i], test_tup1[i]\n\n    # If the tuples are still not equal after swapping, return None\n    if test_tup1!= test_tup2:\n        return None\n\n    # If one tuple is empty, return the other\n    if len1 == 0:\n        return test_tup2\n    elif len2 == 0:\n        return test_tup1\n\n    # If the tuples are equal after swapping, return the maximum value\n    max_val = max(test_tup1[0], test_tup2[0])\n    if len1 > 1:\n        max_val = max(max_val, maximize_elements(test_tup1[1:], test_tup2[1:]))\n    if len2 > 1:\n        max_val = max(max_val, maximize_elements(test_tup1, test_tup2[1:]))\n    return max_val"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    prime = 2\n    while i <= n:\n        prime += 1\n        count = 0\n        for j in range(2, prime):\n            if prime % j == 0:\n                count += 1\n                break\n        if count == 2:\n            i += 1\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize variables\n    count = 0\n    prime_num = 1\n\n    # Loop through all numbers starting from 2\n    while count < n:\n\n        # Check if the current number is a prime number\n        for i in range(2, prime_num):\n            if prime_num % i == 0:\n                break\n        else:\n            count += 1\n            prime_num += 1\n\n    return prime_num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Initialize variables\n    is_prime = [True] * (n+1)\n    is_prime[0] = False\n    is_prime[1] = False\n    is_prime[2] = False\n    prime = 3\n    \n    # Iterate over primes up to n\n    while prime*prime <= n:\n        if is_prime[prime]:\n            for i in range(prime*prime, n+1, prime):\n                is_prime[i] = False\n        prime += 2\n    \n    # Find nth prime\n    for i in range(n+1):\n        if is_prime[i]:\n            return i"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 2\n    else:\n        i = 2\n        while True:\n            if i * i > n:\n                return i\n            else:\n                i += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    x = 1\n    while count < n:\n        is_prime = True\n        for i in range(2, x):\n            if x % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        x += 1\n    return x - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        i += 1\n        if is_prime(i) and is_prime(i+1) and is_prime(i-1) and is_prime(i+2):\n            count += 1\n    return i-2\n\ndef is_prime(num):\n    '''\n    Checks if a given number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    is_prime = True\n    num = 2\n    count = 0\n\n    # Check if the number is prime or not\n    while is_prime:\n        if num < 2:\n            is_prime = False\n        elif num % 2 == 0:\n            is_prime = False\n        else:\n            for i in range(3, num, 2):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                count += 1\n            if count == n:\n                return num\n        num += 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def find_nth_prime(n, is_prime_function):\n        if n == 1:\n            return 2\n        count = 0\n        num = 3\n        while True:\n            if is_prime_function(num):\n                count += 1\n                if count == n:\n                    return num\n            num += 2\n\n    return find_nth_prime(n, is_prime)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Check if n is a positive integer\n    if type(n)!= int or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize variables\n    count = 0\n    prime = 2\n\n    # Check if the first prime number is n\n    if prime**n > 1:\n        return prime\n\n    # Iterate until we find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n\n        # Check if the current prime is composite\n        is_prime = True\n        for i in range(2, int(prime**0.5) + 1):\n            if prime % i == 0:\n                is_prime = False\n                break\n\n        # If it is composite, increment count and start over\n        if is_prime:\n            count += 1\n            prime += 1\n        else:\n            prime += 2\n\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    prime = 2\n    count = 0\n    \n    # Check if 2 is a prime number\n    if is_prime(2):\n        count += 1\n        \n    # Loop to find the nth newman\u2013shanks\u2013williams prime number\n    while count < n:\n        # Check if the current prime number is a newman\u2013shanks\u2013williams prime number\n        if is_newman_shanks_williams_prime(prime):\n            count += 1\n            \n        # Increment the prime number\n        prime += 1\n        \n    return prime"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Loop through each element in the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division between corresponding elements in the two input tuples\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples must have the same length\")\n        return\n    \n    # Initialize an empty result list\n    result_list = []\n    \n    # Iterate over each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Perform element-wise division and append the result to the result list\n        result_list.append(test_tup1[i] / test_tup2[i])\n    \n    # Return the result list as the result of the function\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    else:\n        print(\"Both tuples must have the same length.\")\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            if test_tup2[i] == 0:\n                result_tup += (float('inf'),)\n            else:\n                result_tup += (float('nan'),)\n        else:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the tuples should be equal\")\n\n    # check if all the elements in the tuples are numbers\n    for elem in test_tup1 + test_tup2:\n        if not isinstance(elem, (int, float)):\n            raise ValueError(\"All elements in the tuples should be numbers\")\n\n    # perform element-wise division operation\n    result_tup = tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x / y for x, y in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup2[i]!= 0:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into chunks of length L\n    split_list = [list1[i:i+L] for i in range(0, len(list1), L)]\n    \n    # Return the two parts\n    return split_list[0], split_list[1]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Using slicing to split the list into two parts of length L\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return first_part, second_part"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    # check if L is greater than the length of the list\n    if L > len(lst):\n        return \"Error: L is greater than the length of the list\"\n    # check if L is a positive integer\n    elif type(L)!= int or L <= 0:\n        return \"Error: L must be a positive integer\"\n    # check if the list is not empty\n    elif not lst:\n        return \"Error: The list is empty\"\n    # split the list into two parts of length L\n    first_part = lst[:L]\n    second_part = lst[L:]\n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list should be greater than or equal to the length of the first part of the second part.\")\n    mid = len(list1) // 2\n    part1 = list1[:mid]\n    part2 = list1[mid:]\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_length = len(list1)\n    if L <= 0 or L > list_length:\n        return \"Invalid input\"\n    else:\n        mid = L // 2\n        first_part = list1[:mid]\n        second_part = list1[mid:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n\n    # check if L is valid\n    if L > len(list1):\n        raise ValueError(\"L is greater than the length of the list.\")\n\n    # split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n\n    # return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(lst, L):\n    if len(lst) < L:\n        raise ValueError(\"List cannot be split into two parts of length L\")\n    mid = len(lst) // 2\n    return lst[:mid], lst[mid:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # calculate the length of the first part\n    length = len(list1) // 2\n    \n    # split the list into two parts using slicing\n    first_part = list1[:length]\n    second_part = list1[length:]\n    \n    # return the resulting lists in a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) <= L:\n        return (list1, [])\n    else:\n        first_part = list1[:L]\n        second_part = list1[L:]\n        return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if n < 2*L:\n        raise ValueError(\"List must have at least 2L elements\")\n    mid = n // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the number of years since the breeding dogs were born\n    years = h_age // 7\n    \n    # Calculate the remainder (i.e., the number of days since the breeding dogs were born)\n    days = h_age % 7\n    \n    # Calculate the age in dog's years, rounded to the nearest integer\n    dog_age_years = int(years) + 0.5 * (1 if (days >= 3) else 0)\n    \n    # Calculate the age in dog's months\n    dog_age_months = dog_age_years * 12\n    \n    return dog_age_months"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    Args:\n    h_age (int): The height of the dog in centimeters.\n\n    Returns:\n    int: The age of the dog in dog's years.\n    \"\"\"\n    # Convert height from centimeters to inches\n    height_inches = h_age / 2.54\n    \n    # Calculate age in dog's years\n    age_dog_years = height_inches / 2.0\n    \n    return age_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 2:\n        return h_age * 7\n    elif h_age <= 5:\n        return h_age * 6\n    elif h_age <= 12:\n        return h_age * 5\n    else:\n        return h_age * 4"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Function to calculate dog's age in dog's years based on height in inches\n    def age_in_dog_years(height_in_inches):\n        age_in_dog_years = (height_in_inches * 7) / 2.54\n        return age_in_dog_years\n\n    # Calculate dog's age in dog's years based on height in inches\n    age_in_dog_years = age_in_dog_years(h_age)\n\n    # Return the dog's age in dog's years\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = int(input(\"Enter your height in inches: \"))\n    feet = years // 12\n    inches = years % 12\n    dog_age = (inches / 12) * 7\n    return dog_age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate dog's age in years\n    dog_age = h_age * 7\n\n    # Print the result\n    print(\"Dog's age in years is\", dog_age)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \n    Parameters:\n    h_age (int): The height of the dog in inches.\n    \n    Returns:\n    int: The age of the dog in dog years.\n    \"\"\"\n    # Convert the height to centimeters\n    cm_age = h_age * 2.54\n    \n    # Calculate the dog's age in dog years\n    dog_years = cm_age / 70\n    \n    # Round the result to the nearest integer\n    return int(round(dog_years))"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dob = input(\"Enter your date of birth (YYYY-MM-DD): \")\n    dob_date = datetime.datetime.strptime(dob, \"%Y-%m-%d\")\n    today = datetime.datetime.now()\n    age = today.year - dob_date.year - ((today.month, today.day) < (dob_date.month, dob_date.day))\n    return age"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if step == 1:\n        return [S]\n    else:\n        result = []\n        for i in range(0, len(S), step):\n            result.append(S[i:i+step])\n        return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    n = len(S)\n    if step < 1 or step > n:\n        raise ValueError(\"Step size must be between 1 and the length of the list.\")\n    result = []\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if not isinstance(S, list):\n        raise TypeError('S must be a list.')\n    if not isinstance(step, int) or step <= 0:\n        raise ValueError('Step must be a positive integer.')\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Create an empty list to store the split lists\n    split_lists = []\n    \n    # Loop through the list\n    for i in range(0, len(S), step):\n        # Create a new list with the current element and the remaining elements\n        new_list = S[i:i+step]\n        \n        # Add the new list to the list of split lists\n        split_lists.append(new_list)\n    \n    return split_lists"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = len(S)\n    result = []\n    i = 0\n    while i < n:\n        j = i + step\n        result.append(S[i:j])\n        i = j\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the lateral surface area\n    area = (6 * l ** 2) / 4\n\n    # Return the lateral surface area\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    return area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    surface_area = 6 * l * l  # Cube surface area\n    lateral_surface_area = surface_area - 6 * l * l  # Lateral surface area\n\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the surface area of a cube by multiplying the base area by the length of the side\n    surface_area = l * l * l\n    \n    # Calculate the lateral surface area by dividing the surface area by the length of the cube\n    lateral_surface_area = surface_area / 6\n    \n    # Return the lateral surface area\n    return lateral_surface_area"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    count = 0\n    sum = 0\n    while count < n:\n        sum += count ** 2\n        count += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"n must be a positive integer\"\n    elif n == 1:\n        return 0\n    else:\n        return sum(x**2 for x in range(1, n+1, 2))"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):  \n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initializing the sum variable to zero\n    sum = 0\n    # initializing the counter variable to 1\n    counter = 1\n    # looping from 1 to n\n    while counter <= n:\n        # adding the square of the current counter to the sum variable\n        sum += counter*counter\n        # incrementing the counter variable by 2\n        counter += 2\n    # returning the sum of the squares of the first n odd natural numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize sum to 0\n    sum = 0\n\n    # Loop through the first n odd numbers\n    for i in range(2, n+1, 2):\n        # Add the square of the current odd number to the sum\n        sum += i**2\n\n    # Return the sum of the squares of the first n odd numbers\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i**2  \n    return sum  "
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize sum to 0\n    sum_of_squares = 0\n    # initialize counter to 1\n    counter = 1\n    # loop through first n odd natural numbers\n    while counter <= n:\n        # add the square of the current natural number to the sum\n        sum_of_squares += counter**2\n        # increment the counter\n        counter += 2\n    # return the final sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_squares = 0\n    for i in range(1, n+1, 2):\n        sum_squares += i**2\n    return sum_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum of squares to 0\n    square_sum = 0\n\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of i to the sum of squares\n        square_sum += i**2\n\n    # Return the sum of squares\n    return square_sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the star number to 1\n    star_num = 1\n\n    # loop through the number of stars requested\n    for i in range(1, n+1):\n        # print a star for each iteration\n        print(\"*\" * (i * 2 - 1))\n\n        # increment the star number for the next iteration\n        star_num += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    else:\n        return find_star_num(n-1) + \"*\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize a counter to keep track of the number of stars\n    counter = 0\n    \n    # loop through each number from 1 to n\n    for i in range(1, n+1): \n        # check if the current number is a multiple of 3\n        if i % 3 == 0: \n            # if it is, add it to the counter\n            counter += 1\n    \n    # return the value of the counter\n    return counter"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    if n < 1:\n        return \"Invalid input. n should be greater than or equal to 1.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        result = \"\"\n        for i in range(1, n+1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize variables\n    num = 1\n    count = 1\n\n    # Calculate then'th star number\n    while count < n:\n        num *= 2\n        count += 1\n\n    return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"1\"\n    else:\n        return str(n) + find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize variables\n    prev_num = 1\n    current_num = 1\n\n    # Calculate the nth star number\n    for i in range(1, n):\n        prev_num, current_num = current_num, prev_num + current_num\n\n    return current_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    i = 1\n    while i <= n:\n        print('*' * i)\n        i += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n <= 0:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"*\"\n    else:\n        for i in range(1, n):\n            print(\"*\", end=\" \")\n        return \"\\n\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*****\"\n    elif n == 2:\n        return \"****\"\n    elif n == 3:\n        return \"***\"\n    elif n == 4:\n        return \"**\"\n    elif n == 5:\n        return \"*\"\n    elif n % 2 == 0:\n        return \"*\" + find_star_num(n//2)\n    else:\n        return \"*\" + find_star_num(n-1) + \"*\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    This function takes a single character as input and returns its ASCII value.\n    '''\n    if ord(k) >= 65 and ord(k) <= 90:\n        return ord(k) - 64\n    elif ord(k) >= 97 and ord(k) <= 122:\n        return ord(k) - 96\n    else:\n        return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # convert the character to its ascii value\n    ascii_value = ord(k)\n    # return the ascii value\n    return ascii_value"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n            count += 1\n            \n    if count == 0:\n        print(\"No even numbers found at even positions.\")\n    else:\n        print(\"Sum of even numbers at even positions is:\", sum)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i, num in enumerate(arr):\n        if i % 2 == 0 and num % 2 == 0:\n            even_sum += num\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    # initialize variables\n    even_sum = 0\n    even_index = 0\n\n    # loop through the list and add even numbers and their indices to the variables\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += i\n\n    # return the sum and the index\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions of the list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum_even = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n            even_index = i + 1\n\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n    arr (list): a list of integers\n\n    Returns:\n    int: the sum of even numbers at even positions of the input list\n    \"\"\"\n\n    even_sum = 0\n    even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            if i % 2 == 0:\n                even_index = i\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Add the even natural number raised to the fifth power to the sum\n        sum += i**5\n    # Return the sum\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    count = 0\n    i = 2\n    \n    while count < n:\n        if i%2 == 0:\n            sum_of_powers += i**5\n            count += 1\n        i += 1\n    \n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_power = 0\n    \n    for i in range(1, n+1, 2):\n        sum_even_power += i ** 5\n        \n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_of_powers = 0\n    for i in range(n):\n        sum_of_powers += i**5\n    return sum_of_powers"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i ** 5\n    return total"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for item in test_list:\n        rear_list.append(item[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        result.append(test_list[i][-1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_list)):\n        rear_elements.append(test_list[i][1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[-1] for x in test_list]"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in range(len(test_list)-1, -1, -1):\n        result.append(test_list[i][1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: The two input tuples must have the same length.\"\n    # create an empty tuple to store the result\n    result_tup = ()\n    # loop through the two input tuples\n    for i in range(len(test_tup1)):\n        # subtract the elements of the first tuple by the elements of the second tuple with the same index\n        result = test_tup1[i] - test_tup2[i]\n        # add the result to the result_tup\n        result_tup += (result,)\n    # return the result_tup\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for index in range(len(test_tup1)):\n        if index < len(test_tup2):\n            test_tup1[index] -= test_tup2[index]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of both tuples must be equal.\")\n        return\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i])!= type(test_tup2[i]):\n            print(\"Error: All elements of the two tuples must be of the same type.\")\n            return\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: Elements of the first tuple cannot be greater than those of the second tuple.\")\n            return\n    sub_tup = ()\n    for i in range(len(test_tup1)):\n        sub_tup += (test_tup1[i] - test_tup2[i],)\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must be of equal length.\")\n        return None\n    \n    # Create a new tuple with the difference of elements\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        try:\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        except TypeError:\n            print(\"Error: The two tuples must contain only numeric elements.\")\n            return None\n    \n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    # Create a new tuple that contains the result of subtracting the corresponding elements in the two tuples\n    result_tup = tuple(i - j for i, j in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    \"\"\"\n    for i in range(len(test_tup1)):\n        if i >= len(test_tup2):\n            print(\"Error: The length of the second tuple is less than the length of the first tuple.\")\n            return\n        if test_tup1[i] == test_tup2[i]:\n            print(f\"The element at index {i} of the first tuple is equal to the element at index {i} of the second tuple. Therefore, their difference is {test_tup1[i]} - {test_tup2[i]} = 0.\")\n        else:\n            print(f\"The element at index {i} of the first tuple is {test_tup1[i]} and the element at index {i} of the second tuple is {test_tup2[i]}. Therefore, their difference is {test_tup1[i]} - {test_tup2[i]} = {test_tup1[i] - test_tup2[i]}.\")"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same number of elements.\")\n        return None\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function calculates the sum of even index binomial coefficients of n.\n\n    Args:\n        n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n        int: The sum of even index binomial coefficients of n.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    coeffs = [1] * (n+1)\n    for i in range(2, n+1):\n        coeffs[i] = coeffs[i-1] * (2*i-1)\n\n    even_sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            even_sum += coeffs[i]\n\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum variable\n    sum_even_binomial = 0\n    \n    # Loop through each index of the binomial coefficients\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient\n        binomial_coeff = math.comb(n, i)\n        \n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even binomial coefficient to the sum\n            sum_even_binomial += binomial_coeff\n    \n    # Return the sum of even binomial coefficients\n    return sum_even_binomial"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # initialize variables\n    sum = 0\n    k = 0\n\n    # iterate over the even indices of n\n    for i in range(2, n+1, 2):\n\n        # calculate the binomial coefficient\n        coeff = math.factorial(n) // (math.factorial(i-1) * math.factorial(n-i))\n\n        # add the even index binomial coefficient to the sum\n        sum += coeff * (2**k)\n\n        # increment k\n        k += 1\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\ndef even_binomial_Coeff_Sum(n):\n    # Initialize the sum of even index binomial coefficients to 0\n    sum = 0\n    # Use a nested loop to iterate over the even indices\n    for i in range(0, n+1, 2):\n        # Compute the binomial coefficient of i and n-i\n        binomial_coeff = math.comb(n, i)\n        # Check if the coefficient is even and add it to the sum if it is\n        if (binomial_coeff % 2 == 0):\n            sum += binomial_coeff\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1, 2):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 0:\n        return None\n    else:\n        sum = 0\n        for i in range(1, n+1):\n            if i % 2 == 0:\n                sum += math.comb(n, i)\n        return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of the even index binomial coefficients.\n\n    :param n: The positive integer n.\n    :return: The sum of the even index binomial coefficients.\n    \"\"\"\n    # Initialize sum to 0\n    sum = 0\n\n    # Iterate from 0 to n\n    for i in range(n+1):\n        # Calculate the binomial coefficient of i and n-i\n        coeff = math.comb(n, i) * math.comb(n-1, n-i)\n\n        # If the index i is even, add the coefficient to the sum\n        if i % 2 == 0:\n            sum += coeff\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the sum of even index binomial coefficients.\n    \"\"\"\n\n    # Initialize the sum of even index binomial coefficients to 0\n    sum_even = 0\n    \n    # Loop through the range of n+1 (since binomial coefficients only go up to n)\n    for i in range(n+1):\n        # Find the even index binomial coefficient of i\n        coeff = math.comb(n, i, exact=True)\n        \n        # Check if the coefficient is even\n        if i % 2 == 0:\n            # If the coefficient is even, add it to the sum\n            sum_even += coeff\n    \n    # Return the sum of even index binomial coefficients\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_binomial_Coeff_Sum(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(1, n+1):\n        coeff = math.comb(n, i)\n        if i % 2 == 0:\n            coeff_sum += coeff\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_coeffs = 0\n    for i in range(n+1):\n        even_coeff = math.comb(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs += even_coeff\n    return sum_even_coeffs"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/5)*pi*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * (r ** 2) * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14*(r**2)*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14159 * r**2 * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (1/3) * 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    This function takes in the radius and height of a cylinder and returns the volume of the cylinder.\n    '''\n    vol = (1/3) * 3.14 * (r**2) * h\n    return vol\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3)*pi*r**2*h)\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3/5) * pi * r**2 * h\n    return volume\n\nradius = float(input(\"Enter the radius of the cylinder: \"))\nheight = float(input(\"Enter the height of the cylinder: \"))\n\nvolume = volume_cylinder(radius, height)\nprint(\"The volume of the cylinder is\", volume)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Calculate the volume\n    v = (3/2) * pi * (r**2) * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159 * (r**2) * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Create an empty list to store the filtered entries\n    filtered_entries = []\n    \n    # Iterate through the dictionary and add the entries with values greater than or equal to n to the filtered_entries list\n    for key, value in dict.items():\n        if value >= n:\n            filtered_entries.append((key, value))\n    \n    # Return the filtered_entries list\n    return filtered_entries"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    result = {}\n    for key, value in dict.items():\n        if value >= n:\n            result[key] = value\n    return result"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer n and returns a new dictionary that only contains entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # create an empty dictionary to store the filtered values\n    filtered_dict = {}\n    # loop through each key-value pair in the original dictionary\n    for key, value in dict.items():\n        # if the value is greater than or equal to n, add it to the filtered dictionary\n        if value >= n:\n            filtered_dict[key] = value\n    # return the filtered dictionary\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    # Filter the dictionary to only include entries with values greater than or equal to n\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[0]:\n            count += 1\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i, val in enumerate(test_tup):\n        if i == 0:\n            break\n        if val!= test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for element in test_tup[:-1]:\n        if element < test_tup[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[0]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            count += 1\n        else:\n            if test_tup[i-1] == test_tup[i]:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize variables\n    decagonal_num = 1\n    count = 1\n\n    # Loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if number is decagonal\n        if (i + 1) ** 2 == (count * (count+1))//2:\n            return True\n        # Increase count by 1\n        count += 1\n\n    # If no decagonal number found\n    return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Define the base of the sequence\n    base = 1\n    \n    # Initialize a counter for the number of times we have incremented the base\n    count = 0\n    \n    # Initialize the decagonal number we are searching for\n    decagonal = 0\n    \n    # Loop until we have found the nth decagonal number\n    while count < n:\n        # Increment the count and add the base to the decagonal\n        count += 1\n        decagonal += base\n        \n        # If the count is even, we have found the nth decagonal number\n        if count % 2 == 0:\n            break\n        \n        # If the count is odd, we need to increment the base\n        base += 1\n    \n    # If the count is odd, we have found the nth decagonal number\n    if count == n:\n        return decagonal\n    \n    # If we have not found the nth decagonal number, return None\n    return None"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 0:\n        return None\n    else:\n        decagonal = 1\n        count = 1\n        for i in range(1, n+1):\n            count += 1\n            decagonal += count\n            if count == i:\n                decagonal += 1\n                count = 1\n        return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 1:\n        return False\n    \n    # Initialize the sum of the first n numbers as 0\n    sum_of_first_n_numbers = 0\n    \n    # Initialize the value of the decagonal number as 1\n    decagonal_number = 1\n    \n    # Loop until we reach the nth number\n    for i in range(n):\n        # Update the sum_of_first_n_numbers\n        sum_of_first_n_numbers += decagonal_number\n        \n        # Update the decagonal number\n        decagonal_number += 2*i + 1\n    \n    # If the sum of the first n numbers is equal to the nth decagonal number, then return True\n    if sum_of_first_n_numbers == n*(n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return ((n*(3*n-1))//2)*4 // 3"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal_num = 0\n    for i in range(n+1):\n        decagonal_num += i*(i+1)//2\n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return None\n    else:\n        a = 1\n        for i in range(1, n//2+1):\n            a = a * (i*2+1)\n        return a"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # initialize variables for decagonal numbers\n    a = 1\n    b = 1\n    # check if n is a positive integer\n    if n < 1:\n        return False\n    # calculate the nth decagonal number\n    for i in range(1, n+1):\n        # add the previous two numbers to get the nth decagonal number\n        c = a + b\n        # update the values of a and b for the next iteration\n        a = b\n        b = c\n    return c"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Initialize the first decagonal number\n    decagonal_num = 1\n    # Iterate until nth decagonal number is found\n    while decagonal_num <= n:\n        # Check if the decagonal number is divisible by 5\n        if decagonal_num % 5 == 0:\n            # Return True if it is\n            return True\n        # Increment the decagonal number\n        decagonal_num += 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function takes an integer n as input and returns True if the number is a decagonal number, False otherwise.\n    A decagonal number is a positive integer that is equal to the sum of two decagonal numbers in a row.\n    For example, 15 is a decagonal number because 1 + 15 = 16 and 16 + 15 = 31. \n    '''\n    \n    # Initialize the first two decagonal numbers\n    decagonal_num1 = 1\n    decagonal_num2 = 1\n    \n    # Loop through the remaining decagonal numbers\n    for i in range(3, n+1):\n        \n        # Calculate the next decagonal number\n        next_decagonal_num = decagonal_num1 + decagonal_num2\n        \n        # Check if the next number is equal to n\n        if next_decagonal_num == n:\n            return True\n        \n        # Update the values for the next iteration\n        decagonal_num1 = decagonal_num2\n        decagonal_num2 = next_decagonal_num\n    \n    # If the loop completes without finding a match, return False\n    return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # loop through the list and compare the items\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    # item not found in the list\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as an input and returns True if all its elements are unique, otherwise False.\n    '''\n    seen = set()\n    for elem in test_list:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all the elements of the list are unique and False otherwise.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list)!= len(set(test_list)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns a new list containing the difference between the two lists.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if both lists are of equal length\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n\n    # subtract the corresponding elements from both lists\n    result = [a-b for a, b in zip(nums1, nums2)]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # Check if both lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Both lists must have the same length.\")\n        return\n    \n    # Initialize the result list with zeros\n    result = [0] * len(nums1)\n    \n    # Subtract each element of nums1 from nums2 and store the result in result\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length')\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Lists are not of the same length\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Subtract two lists element-wise.\n\n    Args:\n        nums1 (list): The first list of numbers to subtract from.\n        nums2 (list): The second list of numbers to subtract from.\n\n    Returns:\n        list: A new list with the element-wise subtraction of nums1 and nums2.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function subtracts two lists element-wise.\n    '''\n    # Check if the lists have equal lengths\n    if len(nums1)!= len(nums2):\n        return \"Lists have different lengths.\"\n\n    # Subtract the elements of each list element-wise\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = [0]*10\n    for i in str(n):\n        count[int(i)] += 1\n    for i in range(1,10):\n        if count[i] > 1 and count[i] > i:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Convert the integer to a string\n    str_n = str(n)\n\n    # Create an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Loop through each character in the string\n    for char in str_n:\n        # If the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # If the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n\n    # Loop through each digit in the string\n    for digit in freq:\n        # Check if the frequency of the digit is less than or equal to the digit itself\n        if freq[digit] > digit:\n            return False\n\n    # If the loop completes without finding a failure, the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num_str = str(n)\n    freq = {}\n    for digit in num_str:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # initialize frequency dictionary\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        \n        # check if digit is already in frequency dictionary\n        if digit in freq:\n            \n            # increment frequency by 1\n            freq[digit] += 1\n            \n        # if digit is not in dictionary, add it with frequency 1\n        else:\n            freq[digit] = 1\n    \n    # loop through frequency dictionary and check if frequency of digit is greater than the digit itself\n    for digit in freq:\n        \n        # check if frequency is greater than digit itself\n        if freq[digit] > int(digit):\n            \n            # return False if frequency is greater than digit itself\n            return False\n    \n    # return True if all digits have frequency less than or equal to themselves\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    frequency = [0] * 10 # initialize frequency list with 0 for each digit 0-9\n    \n    # count frequency of each digit in the integer\n    for digit in str(n):\n        frequency[int(digit)] += 1\n    \n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in str(n):\n        if frequency[int(digit)] > 1 and digit!= str(int(digit)):\n            return False # if frequency of digit is greater than 1, it's not a valid digit\n    \n    return True # if all digits are valid, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10\n    for digit in str(n):\n        freq[int(digit)] += 1\n        if freq[int(digit)] > n:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    # initialize a list to store the frequency of each digit\n    freq = [] \n    # loop through the digits of the input integer\n    for digit in str(n): \n        # if the digit is already in the list, increment its frequency\n        if digit in freq: \n            freq[freq.index(digit)] += 1 \n        # if the digit is not in the list, append it with its frequency set to 1\n        else: \n            freq.append(1) \n    # loop through the digits of the input integer again to check the frequency of each digit\n    for digit in str(n): \n        # if the digit frequency is greater than or equal to the digit itself, return False\n        if freq[freq.index(digit)] >= int(digit): \n            return False \n    # if all digits have a frequency less than or equal to the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq_dict = {}\n    for digit in str(n):\n        if digit in freq_dict:\n            freq_dict[digit] += 1\n        else:\n            freq_dict[digit] = 1\n    \n    for digit, count in freq_dict.items():\n        if count > digit:\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10 # initialize an array of size 10 with all elements as 0\n    \n    # loop through each digit in the integer and update the frequency count in the array\n    for digit in str(n):\n        freq[int(digit)] += 1\n        \n    # loop through the array and check if the frequency count of any digit is greater than the digit itself\n    for i in range(10):\n        if freq[i] > i:\n            return False\n            \n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, elem):\n    '''\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in lst:\n        if i!= elem:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if the list is empty\n    if not list:\n        return True\n    # check if the first item in the list is equal to the given element\n    if list[0] == element:\n        # check if all the remaining items in the list are equal to the given element\n        for item in list[1:]:\n            if item!= element:\n                return False\n        # all items in the list are equal to the given element\n        return True\n    else:\n        # the first item is not equal to the given element\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        for i in range(1, len(list)):\n            if list[i]!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n\n    pattern = r'a(?:b{2,3})'\n\n    # Compile the regular expression pattern\n    pattern_obj = re.compile(pattern)\n\n    # Check if the pattern matches the text\n    if pattern_obj.search(text):\n        print(\"The text contains the 'a' character followed by two or three 'b' characters.\")\n    else:\n        print(\"The text does not contain the 'a' character followed by two or three 'b' characters.\")"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(?=b){2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b(2|3)')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    matches = re.findall(pattern, text)\n    return any(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)(b){2,3}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?<=a)(?=(b){2,3})b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*b[23].*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[bB]{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    max_sum = float('-inf')\n    temp_sum = 0\n    for i in range(n):\n        if i < k:\n            temp_sum += a[i]\n        else:\n            temp_sum = a[i]\n        max_sum = max(max_sum, temp_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the sum of the first n elements as the maximum sum\n    max_sum = sum(a[:n])\n    # Initialize the maximum sum of the repeated elements as 0\n    repeated_max = 0\n    # Initialize a dictionary to store the sum of repeated elements and their indices\n    repeated_sum_dict = {}\n    # Iterate through the array from the second element to n-1\n    for i in range(n, len(a)):\n        # Calculate the sum of repeated elements and their indices from the previous element to the current element\n        repeated_sum = a[i] + a[i-1] + a[i-2] + a[i-3]\n        repeated_index = i-3\n        # Check if the sum of repeated elements is already in the dictionary\n        if repeated_sum in repeated_sum_dict:\n            # If it is, update the maximum sum of the repeated elements and the index of the repeated element\n            if repeated_sum > repeated_max:\n                repeated_max = repeated_sum\n                repeated_index = repeated_sum_dict[repeated_sum]\n            # If it is not, update the index of the repeated element\n            else:\n                repeated_index = repeated_sum_dict[repeated_sum]\n        # If the sum of repeated elements is not in the dictionary, add it to the dictionary and its index\n        else:\n            repeated_sum_dict[repeated_sum] = i-3\n        # Calculate the sum of the current element and the repeated elements\n        current_sum = a[i] + repeated_sum + a[i-1] + repeated_sum_dict[repeated_sum]\n        # Update the maximum sum of the contiguous array\n        if current_sum > max_sum:\n            max_sum = current_sum\n    # Return the maximum sum of the contiguous array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(k):\n        current_sum += a[i]\n        if i < n-1:\n            current_sum += a[n-i-1]\n\n    if current_sum > max_sum:\n        max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Define the max sum and initialize the sum to zero\n    max_sum = 0\n    sum_array = [0] * (k+1)\n\n    # Initialize the first element of the array\n    sum_array[0] = a[0]\n    max_sum = sum_array[0]\n\n    # Initialize the sum of the first k elements of the array\n    for i in range(1, k+1):\n        sum_array[i] = a[i-1] + sum_array[i-1]\n\n    # Iterate through the array and update the max sum and the sum_array\n    for i in range(k, n):\n        sum_array[i%k+1] += a[i]\n        if sum_array[i%k+1] > max_sum:\n            max_sum = sum_array[i%k+1]\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Create the modified array\n    modified_array = [0] * n\n    modified_array[0] = a[0]\n    for i in range(1, n):\n        modified_array[i] = a[i] * k\n\n    # Initialize variables for maximum sum and current sum\n    max_sum = a[0] * k\n    current_sum = a[0] * k\n\n    # Find the maximum sum of the modified array using dynamic programming\n    for i in range(1, n):\n        current_sum = max(modified_array[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    if n < k:\n        return -1\n\n    # Initialize the max sum of the subarray to be the first element\n    max_sum = a[0]\n\n    # Iterate through the array\n    for i in range(n):\n        # Find the current sum of the subarray\n        current_sum = a[i]\n        for j in range(i+1, i+k):\n            current_sum += a[j]\n\n        # Update the max sum if the current sum is greater\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_index = -1\n    curr_sum = 0\n    \n    for i in range(k):\n        curr_sum += a[n - 1] * (k - i - 1)\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_index = n - 1\n    \n    return max_sum, max_index"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Compute the sum of the original array\n    original_sum = sum(a)\n\n    # Initialize a dictionary to store the sums of subarrays\n    subarray_sum_dict = {}\n\n    # Compute the sum of the first k elements of the modified array\n    first_k_sum = sum(a[:k])\n\n    # Store the sum of the first k elements in the dictionary\n    subarray_sum_dict[first_k_sum] = (0, 0)\n\n    # Loop over the remaining elements of the modified array\n    for i in range(k, n):\n        # Compute the sum of the current element and the first k-1 elements of the modified array\n        current_sum = a[i] + first_k_sum - a[i-k]\n\n        # Update the sum of the first k-1 elements in the dictionary\n        subarray_sum_dict[current_sum] = (subarray_sum_dict[first_k_sum][0] + a[i], i)\n\n        # Update the first k-1 elements of the modified array\n        first_k_sum = current_sum\n\n    # Find the maximum sum of a contiguous array in the modified array which is formed by repeating the given array k times\n    max_sum = -1\n    for key in subarray_sum_dict:\n        if subarray_sum_dict[key][0] > max_sum:\n            max_sum = subarray_sum_dict[key][0]\n\n    return original_sum - max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    mod_arr = [0] * n\n    for i in range(n):\n        mod_arr[i] = a[i] + (i + 1) * k\n\n    max_sum = float('-inf')\n    for i in range(n - k):\n        current_sum = 0\n        for j in range(i, i + k):\n            current_sum += mod_arr[j]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # find the maximum sum of a non-repeating subarray\n    max_sum_non_repeating = max(a)\n\n    # initialize the maximum sum of a repeating subarray\n    max_sum_repeating = float('-inf')\n\n    # loop through each index i in the array\n    for i in range(n - k + 1):\n        # find the sum of the k smallest elements in the array\n        subarray_sum = sum(a[i:i+k])\n\n        # update the maximum sum of a repeating subarray\n        max_sum_repeating = max(max_sum_repeating, subarray_sum)\n\n    # return the maximum sum of a repeating subarray\n    return max_sum_repeating"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n\n    # iterate over the first n even natural numbers\n    for i in range(1, n+1, 2):\n        # calculate the square of i\n        square = i**2\n        # add the square to the sum of squares\n        sum_of_squares += square\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_num = 2\n    while current_num <= n:\n        sum_of_squares += current_num ** 2\n        current_num += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 1\n    while count <= n:\n        sum_of_squares += count ** 2\n        count += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    total = 0  \n    for i in range(2, n+1, 2):  \n        total += i**2  \n    return total  "
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(n):\n        sum_of_squares += i * i\n    return sum_of_squares"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    This function takes a list of lists as input and returns the list of maximum length in the list.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n\n    Args:\n        list1 (list): A list of lists containing numbers.\n\n    Returns:\n        list: A list of the maximum length in the input list of lists.\n    \"\"\"\n    max_lengths = []\n    for item in list1:\n        if len(max_lengths) == 0:\n            max_lengths.append(len(item))\n        elif len(item) > max_lengths[-1]:\n            max_lengths[-1] = len(item)\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for item in list1:\n        if len(item) > len(max_lengths) or max_lengths == []:\n            max_lengths = item\n        elif len(item) > len(max_lengths):\n            max_lengths = [item]\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(len(list1[i]))\n    return max(max_lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > len(max_lengths) or (len(sublist) == len(max_lengths) and len(sublist) > max_lengths):\n            max_lengths = sublist\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for lst in list1:\n        max_lengths.append(max(len(lst), len(max_lengths) and max_lengths[-1]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize a dictionary to store the length of each list\n    length_dict = {}\n    \n    # Loop through each list in the original list\n    for sublist in list1:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # If the length of the sublist has not been seen before, add it to the dictionary\n            if element not in length_dict:\n                length_dict[element] = 1\n            # If the length of the sublist has been seen before, update the length of the sublist\n            else:\n                length_dict[element] += 1\n    \n    # Find the maximum length of the original list\n    max_length = max(length_dict, key=length_dict.get)\n    \n    # Return the list of maximum length\n    return [sublist for sublist in list1 if len(sublist) == max_length]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n\n    Args:\n        list1 (list of lists): A list of lists.\n\n    Returns:\n        list: A list containing the maximum length(s) of the lists in `list1`.\n    \"\"\"\n    max_lengths = []\n    for sublist in list1:\n        max_length = max(sublist)\n        max_lengths.append(max_length)\n    return max_lengths"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a dictionary to store the number of ways to paint the fence\n    ways = {}\n\n    # Add the base case of 0 ways to paint the fence\n    ways[0] = 1\n\n    # Add the base case of 1 way to paint the fence\n    ways[1] = 1\n\n    # Loop through all possible values of the first post\n    for i in range(2, n+1):\n        # For each value of the first post, loop through all possible values of the second post\n        for j in range(1, k+1):\n            # If the current post is less than the first post, decrement it by 1\n            if i < j:\n                # If the current post is less than the second post, decrement it by 1\n                if i < k:\n                    # If the current post is less than the second post and the second post is less than or equal to k, then increment the number of ways to paint the fence by ways[i-j] * ways[i-k]\n                    ways[i] = ways.get(i, 0) + ways.get(i-j, 0) * ways.get(i-k, 0)\n\n    return ways[n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Helper function to count number of ways to paint the fence\n    def count_ways(n, k, color_count, current_color, adjacent_color, current_post, adjacent_post):\n        # Base case - if current post is at the end of the fence\n        if current_post == n - 1:\n            # If all colors have been used, return 1\n            if color_count == k:\n                return 1\n            else:\n                return 0\n        \n        # Recursive case - try painting the current post with all colors except current color\n        ways = count_ways(n, k, color_count, current_color, adjacent_color, current_post + 1, adjacent_post)\n        \n        # If adjacent post has the same color as the current post, try to paint both the current and adjacent post with the current color\n        if adjacent_color == current_color:\n            ways += count_ways(n, k, color_count + 1, current_color, adjacent_color, current_post + 1, adjacent_post + 1)\n        \n        # If current post has the same color as adjacent post, try to paint the adjacent post with the current color and the current post\n        if current_color == adjacent_color:\n            ways += count_ways(n, k, color_count + 1, current_color, adjacent_color, current_post + 1, adjacent_post)\n        \n        return ways\n    \n    # Initialize variables for current post, adjacent post, and current and adjacent colors\n    current_post = 0\n    adjacent_post = 1\n    current_color = 0\n    adjacent_color = 1\n    \n    # Call the helper function to count number of ways to paint the fence\n    return count_ways(n, k, 0, current_color, adjacent_color, current_post, adjacent_post)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    if n == 1:\n        return 1\n\n    ways = [0] * k\n\n    for i in range(1, k + 1):\n        ways[i - 1] = ways[i - 1] + ways[i - 2]\n\n    if n <= 2:\n        return ways[k - 1]\n\n    for i in range(1, k + 1):\n        ways[i - 1] = ways[i - 1] + ways[i - 2]\n\n    for i in range(1, n):\n        ways[i - 1] = ways[i - 1] + ways[i - 2]\n\n    return ways[k - 1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    # If k is less than or equal to 0, return 0\n    if k <= 0:\n        return 0\n\n    # Base case: if k is equal to 1, there is only one way to paint the fence\n    if k == 1:\n        return n\n\n    # Initialize a 2D array to store the count of ways to paint the fence with k colors\n    fence_count = [[0] * (k+1) for _ in range(n+1)]\n\n    # Base case: if n is equal to 0, there is only one way to paint the fence\n    for i in range(k+1):\n        fence_count[0][i] = 1\n\n    # Fill in the remaining values of the 2D array\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1 or fence_count[i-1][j-1] == 1:\n                fence_count[i][j] = fence_count[i-1][j]\n            else:\n                fence_count[i][j] = fence_count[i-1][j] + fence_count[i-1][j-1]\n\n    return fence_count[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(n, k, count=0, current_color=None, adjacent_colors=set()):\n        if n == 0:\n            return 1\n        elif n < 0:\n            return 0\n\n        if current_color is not None:\n            if current_color in adjacent_colors:\n                return count_ways(n - 1, k, count, None, adjacent_colors)\n\n        if current_color is None or len(adjacent_colors) < k:\n            count += count_ways(n - 1, k, count, None, adjacent_colors | {current_color})\n\n        if current_color is None or len(adjacent_colors) == k:\n            count += count_ways(n - 1, k, count, None, adjacent_colors)\n\n        return count\n\n    return count_ways(n, k)\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    fence = [0]*k\n    visited = [False]*n\n    result = 0\n    \n    # Base case\n    if k == 1:\n        result = n\n        \n    # Recursive case\n    else:\n        for i in range(n):\n            if fence[i] == 0:\n                fence[i] = 1\n                visited[i] = True\n                result += count_no_of_ways(n-1, k-1)\n                visited[i] = False\n                fence[i] = 0\n                \n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a matrix to store the count of ways for each pair of colors\n    count_matrix = [[0 for i in range(k)] for j in range(n)]\n\n    # Fill the first row and first column with 1, since there is only one way to paint the fence\n    for i in range(k):\n        count_matrix[0][i] = 1\n        count_matrix[i][0] = 1\n\n    # Fill the remaining elements of the matrix using the recurrence relation\n    for i in range(1, n):\n        for j in range(1, k):\n            if count_matrix[i-1][j] == 0:\n                count_matrix[i][j] = count_matrix[i-1][j]\n            else:\n                count_matrix[i][j] = count_matrix[i-1][j] + count_matrix[i][j-1]\n\n    # Return the final element of the matrix, which is the count of ways of painting the fence\n    return count_matrix[n-1][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    # Initialize a 2D list to store the number of ways of painting each fence\n    fence_ways = [[0 for i in range(k+1)] for j in range(n+1)]\n\n    # Base cases: \n    # When fence is empty, there is only one way of painting it with at most 2 adjacent posts having the same color.\n    for i in range(1, n+1):\n        fence_ways[i][1] = 1\n\n    # When there are no colors, there is only one way of painting the fence.\n    for i in range(1, n+1):\n        fence_ways[i][0] = 1\n\n    # Fill in the rest of the table\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            fence_ways[i][j] = fence_ways[i-1][j] + fence_ways[i][j-1]\n\n    # Return the final answer\n    return fence_ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Create an array of size k to store the frequency of each color\n    freq = [0] * k\n    # Initialize the count variable to zero\n    count = 0\n    # Initialize the left and right pointers to zero\n    left = 0\n    right = 0\n    # Loop through the fence from left to right\n    while right < n:\n        # If the frequency of the current color is zero, increment the count\n        if freq[right] == 0:\n            count += 1\n            # If the frequency of the current color is one, increment the frequency of the current color by one\n            freq[right] += 1\n            # Increment the right pointer\n            right += 1\n        # If the frequency of the current color is greater than zero, decrement the frequency of the current color by one\n        else:\n            freq[right] -= 1\n            # If the frequency of the current color becomes zero after decrementing, decrement the right pointer\n            if freq[right] == 0:\n                right -= 1\n    # Return the count of the number of ways to paint the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    elif n == 1 or k == n:\n        return 1\n    else:\n        return count_no_of_ways(n-1, k-1) + count_no_of_ways(n-1, k)"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two integer numbers as input and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    if quotient * m!= n:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m  # floor division\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # If the first number is greater than or equal to the second number, return -1.\n    if n >= m:\n        return -1\n    \n    # Initialize variables for the quotient and remainder.\n    quotient = 0\n    remainder = n\n    \n    # Calculate the quotient and remainder until the remainder is less than or equal to the second number.\n    while remainder <= m:\n        # Add the remainder to the quotient.\n        quotient += remainder\n        \n        # Update the remainder to be the difference between the first number and the quotient.\n        remainder = n - quotient\n        \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n    n (int): The first number to be divided.\n    m (int): The second number to be divided.\n\n    Returns:\n    int: The quotient of n/m rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    # Check if m is zero\n    if m == 0:\n        print(\"Cannot divide by zero!\")\n        return\n\n    # Calculate the quotient using integer division\n    quotient = n // m\n\n    # Round down the quotient to the nearest integer using integer division\n    quotient = quotient // 10 * 10\n\n    # Return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m  \n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n/m\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h)**0.5\n    c = (w + s)**0.5\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(s**2 - h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the third side of the triangle using the law of cosines\n    c = math.sqrt(s * (s - w) * (s - h))\n    \n    # Return the value of the third side\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # use the Pythagorean theorem to calculate the length of the third side\n    c = math.sqrt((w ** 2) + (h ** 2) - (s ** 2))\n    \n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w + h) / 2\n    return math.sqrt(w * w + h * h - s * s)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    c = (w**2 + h**2)**0.5\n    s = 2*w*h / c\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = (w ** 2 + h ** 2) ** 0.5\n    return math.sqrt(w ** 2 + (h/2) ** 2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt((w*w)+(h*h))\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of one side\n    s = math.sqrt(w*w + h*h)\n    # Calculate the length of the other side\n    o = math.sqrt(2*w*h)\n    # Calculate the length of the third side\n    t = math.sqrt(w*w + 2*h*h)\n    # Calculate the angle of the triangle\n    alpha = math.degrees(math.acos((w*w + h*h - t*t) / (2*w*h)))\n    # Calculate the area of the triangle\n    area = 0.5 * w * h * math.sin(math.radians(alpha))\n    # Calculate the third side of the triangle\n    third_side = s * math.sin(math.radians(alpha/2))\n    return third_side"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    max_val = None\n    for item in listval:\n        if max_val is None:\n            max_val = item\n        else:\n            if item > max_val:\n                max_val = item\n\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = None\n    for element in listval:\n        if max_value is None or element > max_value:\n            max_value = element\n    return max_value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval: # if list is empty\n        return None # return None\n    max_val = listval[0] # initialize max_val to first element of list\n    for i in range(1, len(listval)): # loop over rest of list\n        if listval[i] > max_val: # if current element is greater than max_val\n            max_val = listval[i] # update max_val\n    return max_val # return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    max_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_num:\n            max_num = listval[i]\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0] # assuming the first value is the maximum\n    for val in listval:\n        if val > max_val: # check if current value is greater than maximum\n            max_val = val # update maximum\n    return max_val # return maximum value"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list of mixed data types as an input and returns the maximum value in the list.\n    '''\n    max_val = float('-inf')\n    for i in listval:\n        if type(i) == int:\n            if i > max_val:\n                max_val = i\n        elif type(i) == float:\n            if i > max_val:\n                max_val = i\n        elif type(i) == str:\n            if len(i) > len(str(max_val)):\n                max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    # Initialize a variable to store the maximum value\n    max_val = None\n\n    # Iterate through the list\n    for val in listval:\n        # If the value is greater than the current maximum, update the max_val variable\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if isinstance(val, (int, float)):\n            if val > max_val:\n                max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n\n    Args:\n    listval (list): a list of heterogeneous values.\n\n    Returns:\n    int: the maximum value in the list.\n    \"\"\"\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_list = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_list.append(i)\n    return sum(div_list)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors_sum += i\n    return divisors_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n\n    # Create two subarrays for left and right partitioning\n    left = [0] * n\n    right = [0] * n\n\n    # Divide the array into two parts\n    for i in range(n):\n        if arr[i] < arr[n // 2]:\n            left[i] = arr[i]\n        else:\n            right[i] = arr[i]\n\n    # Recursively count inversions in left and right partitions\n    left_count = get_Inv_Count(left)\n    right_count = get_Inv_Count(right)\n\n    # Count inversions in the current partition\n    inv_count = 0\n    i, j = 0, 0\n    while i < n and j < n:\n        if left[i] <= right[j]:\n            i += 1\n        else:\n            j += 1\n            inv_count += n - i\n\n    # Combine the counts of left and right partitions and return the final result\n    return left_count + right_count + inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    # initialize count variable to 0\n    count = 0\n\n    # loop through each element in the array\n    for i in range(len(arr)):\n        # loop through each element in the array to the left of the current element\n        for j in range(i):\n            # if the current element is greater than the element to its left, increment the count variable\n            if arr[i] > arr[j]:\n                count += 1\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize variables\n    inv_count = 0\n    i = 1\n    while i < len(arr):\n        if arr[i] < arr[i-1]:\n            inv_count += len(arr) - i\n            i = 0\n        else:\n            i += 1\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    This function takes an array as input and returns the number of inversions in the array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    inv_max = n*(n-1)//2\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Count inversions\n    for i in range(n-1):\n        inv_count += i*(n-i-1)\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n                if inv_count > inv_max:\n                    return -1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    n = len(arr) \n    inv_count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] > arr[j]: \n                inv_count += (j - i) \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n\n    # Counting inversions using merge sort\n    def merge(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n            k += 1\n\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n\n    def merge_sort(arr, temp, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(arr, temp, left, mid)\n            merge_sort(arr, temp, mid + 1, right)\n            merge(arr, temp, left, mid, right)\n\n    temp = [0] * n\n    merge_sort(arr, temp, 0, n - 1)\n\n    # Counting inversions by comparing each element with adjacent elements\n    for i in range(n):\n        for j in range(0, n - 1 - i):\n            if arr[j] > arr[j + 1]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n\n    # Sort the array\n    for i in range(n):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n\n    # Count inversions\n    left, right = 0, n-1\n    inv_count = 0\n    while left < right:\n        if arr[left] > arr[right]:\n            inv_count += right - left\n            left += 1\n        else:\n            right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions in the array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            if arr[left] > arr[right]:\n                inv_count += right - left + 1\n                left += 1\n            else:\n                right -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n            elif arr[i] < arr[j]:\n                inv_count += j - i\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as input and returns the count of inversions \n    in the array. Inversion count is the number of pairs of elements that are \n    swapped in the array.\n    \"\"\"\n    # Calculate the length of the array\n    n = len(arr)\n\n    # Create an empty stack\n    stack = []\n\n    # Initialize two pointers, left and right\n    left = 0\n    right = n - 1\n\n    # Loop while the stack is not empty or the left pointer is less than or equal to the right pointer\n    while stack or left <= right:\n        # If the stack is empty and the left pointer is less than or equal to the right pointer, \n        # push the elements in the array to the stack in reverse order\n        while left <= right and not stack:\n            stack.append(arr[left])\n            left += 1\n        # If the stack is not empty and the value at the top of the stack is greater than or equal to the element at the right pointer, \n        # pop the top element from the stack and compare it with the element at the right pointer. \n        # If the value at the top of the stack is smaller, swap them and push the smaller element to the stack. \n        # If the value at the top of the stack is equal to the element at the right pointer, \n        # pop the top element from the stack and continue to the next iteration. \n        if stack and arr[stack[-1]] >= arr[right]:\n            stack.pop()\n        else:\n            arr[stack[-1]], arr[right] = arr[right], arr[stack[-1]]\n            stack.pop()\n        # Move the left pointer to the right to find the next smaller element\n        left += 1\n        right -= 1\n\n    # Return the count of inversions\n    return n // 2"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes a nested list as input and returns a flattened list.\n    \"\"\"\n    flattened_list = []\n    for item in lst:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for element in list1:\n        if type(element) == list:\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flattens a given list of lists recursively.\n    \"\"\"\n    result = []\n    for element in lst:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    result = []\n    for item in lst:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    This function takes in a nested list and returns a flattened version of that list.\n    \"\"\"\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    # function to flatten a nested list\n    def flatten(lst):\n        \"\"\"\n        Helper function to flatten a list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    # flatten the list\n    flattened_list = flatten(list1)\n\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    - stdata (list of tuples): a list of tuples (item_id, price) representing a transaction.\n\n    Returns:\n    - int: the maximum aggregate value across all transactions in the list.\n    '''\n\n    # use a defaultdict to store the price count for each item_id\n    item_count = defaultdict(int)\n\n    # iterate over the transactions and update the item count\n    for item_id, price in stdata:\n        item_count[item_id] += 1\n\n    # calculate the maximum aggregate value across all transactions\n    max_value = max(price * count for item_id, price, count in stdata)\n\n    return max_value"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the count of each item in the set\n    item_counts = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count of each item in the set\n    for item, price in stdata:\n        item_counts[item] += 1\n\n    # Calculate the maximum aggregate by iterating through the counts and finding the maximum count\n    max_agg = 0\n    for count in item_counts.values():\n        if count > max_agg:\n            max_agg = count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_sum = 0\n    max_indices = []\n\n    for i, data in enumerate(stdata):\n        if len(max_indices) == 0 or data[1] > stdata[max_indices[-1]][1]:\n            max_indices.append(i)\n            max_sum += data[1]\n        else:\n            continue\n\n    return max_sum, max_indices"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    max_sum = 0\n    max_key = ''\n\n    for key, val in stdata:\n        if val > max_dict[key]:\n            max_dict[key] = val\n            max_sum = val\n            max_key = key\n\n    return max_sum, max_key"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each date\n    max_aggs = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for date, value in stdata:\n        # Update the max aggregate for the current date\n        max_aggs[date] = max(max_aggs[date], value)\n\n    # Calculate the maximum aggregate for each date\n    max_aggs = {key: max(value) for key, value in max_aggs.items()}\n\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggr = defaultdict(int)\n    for item in stdata:\n        for i, val in enumerate(item):\n            max_aggr[i] = max(max_aggr[i], val)\n    return max(max_aggr.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each state\n    max_agg = defaultdict(int)\n    \n    # Iterate through the list of tuples\n    for state, amount in stdata:\n        # Calculate the maximum aggregate for the state\n        max_agg[state] = max(max_agg[state], amount)\n    \n    # Calculate the maximum aggregate for all states\n    max_state_agg = max(max_agg.values())\n    \n    # Return the maximum aggregate for all states\n    return max_state_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        stdata (list of tuples): List of tuples with the customer data.\n\n    Returns:\n        float: Maximum aggregate value for the given customer data.\n    \"\"\"\n    max_agg = 0\n    # create a dictionary to store the customer name as key and its total aggregate as value\n    cust_agg = defaultdict(int)\n\n    for item in stdata:\n        # add the item's total aggregate to the dictionary\n        cust_agg[item[0]] += item[1]\n        # update the maximum aggregate if the item's total aggregate is greater\n        max_agg = max(max_agg, item[1])\n\n    # calculate the maximum aggregate across all customers\n    max_agg_total = sum(max_agg.values())\n\n    return max_agg_total / len(max_agg)"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n    # Iterate through the list of tuples\n    for customer, amount in stdata:\n        # Update the max aggregate for the customer\n        max_agg[customer] = max(max_agg[customer], amount)\n    # Find the maximum value of the max aggregates and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the count of each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, price in stdata:\n        # Increment the count of the item in the defaultdict\n        item_count[item] += 1\n\n    # Create a list of tuples with the item and its count\n    item_count_list = sorted(item_count.items(), key=lambda x: (-x[1], x[0]))\n\n    # Calculate the maximum aggregate\n    max_agg = sum([price * count for item, price, count in item_count_list])\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        first_n_bits = bin(i)[2:].zfill(n)\n        last_n_bits = bin(2**n - i - 1)[2:].zfill(n)\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**n+1):\n        first_half = int(bin(i)[2:].zfill(n))\n        last_half = int(bin(i)[-n:].zfill(n))\n        if first_half == last_half:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1):\n        first_half = bin(i)[2:].zfill(n)\n        second_half = bin(i+2**n-1)[2:].zfill(n)\n        if first_half == second_half:\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n, 2**2*n+1):\n        binary_str = bin(i)[2:]\n        first_n = binary_str[:n]\n        last_n = binary_str[-n:]\n        if first_n == last_n:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    count = 0\n    for i in range(2**n-1, -1, -1):\n        first_n = bin(i)[2:].zfill(n)\n        last_n = bin(i+2**n-1)[2:].zfill(n)\n        if int(first_n) == int(last_n):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    # Function to find the count of binary sequences of length 2n \n    # such that sum of first n bits is same as sum of last n bits \n    count = 0\n    for i in range(1,2**n): \n        if i == sum(int(j) for j in format(i, 'b')): \n            count += 1 \n    return count "
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        if sum(i>>j&1 for j in range(n)) == sum(i>>j&1 for j in range(n, 2*n)):\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of binary sequences of length 2*n with the given sum is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    # loop through all binary numbers of length 2n (i.e., the full binary sequence)\n    for i in range(2**n, 2**n+2**n):\n        # split the binary number into two halves and sum the bits in each half\n        half1 = i // 2**n\n        half2 = i % 2**n\n        if half1 == half2:\n            # if the sum of the first half is equal to the sum of the second half, increment the count\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    \"\"\"\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(int(bit) for bit in binary[n:]) == sum(int(bit) for bit in binary[:n]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    This function finds the count of all binary sequences of length 2n such that the sum of the first n bits is same as the sum of the last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        binary = format(i, 'b')\n        first_bits = binary[:n]\n        last_bits = binary[-n:]\n        if int(first_bits) == int(last_bits):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(dict_depth(v) for v in d.values())\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n            current_depth -= 1\n        elif isinstance(d[key], list):\n            for item in d[key]:\n                if isinstance(item, dict):\n                    current_depth += 1\n                    max_depth = max(max_depth, current_depth)\n                    current_depth -= 1\n\n    return max_depth + 1"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    current_depth = 0\n    \n    for key, value in d.items():\n        if isinstance(value, dict):\n            new_depth = dict_depth(value) + 1\n        else:\n            new_depth = 1\n        current_depth = new_depth\n        if new_depth > max_depth:\n            max_depth = new_depth\n            \n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1 + dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    max_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            nested_depth = dict_depth(value) + 1\n            if nested_depth > max_depth:\n                max_depth = nested_depth\n    return max_depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a variable to keep track of the depth\n    depth = 0\n    \n    # Recursively traverse the dictionary to count the depth\n    def traverse(dictionary):\n        for key, value in dictionary.items():\n            # If the value is a dictionary, recursively traverse it\n            if isinstance(value, dict):\n                depth = max(depth, traverse(value))\n            \n            # Increment the depth counter for each key-value pair\n            depth += 1\n        \n        return depth\n    \n    # Call the traverse function with the original dictionary\n    return traverse(d)"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max([dict_depth(v) for v in d.values()])\n    elif isinstance(d, list):\n        depth = max([dict_depth(v) for v in d])\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize depth counter\n    depth = 0\n    # Check if input is a dictionary\n    if isinstance(d, dict):\n        # Recursively call the function on all values in the dictionary\n        for value in d.values():\n            if isinstance(value, dict):\n                depth = max(depth, dict_depth(value) + 1)\n            else:\n                depth += 1\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize the number of rotations\n    curr_rotations = 0\n    \n    # Initialize the current index\n    curr_index = index\n    \n    # Iterate over all the rotations\n    while curr_rotations < rotations:\n        # Find the range of the current element\n        curr_range = ranges[curr_index]\n        \n        # Increment the current index\n        curr_index = (curr_index + curr_range - 1) % len(arr)\n        \n        # Increment the number of rotations\n        curr_rotations += 1\n    \n    # Return the element at the final index\n    return arr[curr_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Initialize the last element as the target element\n    last_element = arr[-1]\n\n    # Perform rotations on the array to reach the desired index\n    for _ in range(rotations):\n        last_element = arr[-1]\n        arr = [arr[-1]] + arr[:-1]\n\n    # Calculate the starting index for the binary search\n    start = 0\n    end = len(arr) - 1\n    mid = 0\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if arr[mid] == last_element:\n            # Binary search has found the target element\n            return arr[mid]\n\n        elif arr[mid] > last_element:\n            # Binary search has narrowed down the range to the left\n            end = mid - 1\n\n        else:\n            # Binary search has narrowed down the range to the right\n            start = mid + 1\n\n    # If the target element is not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n\n    # Calculate the distance between index and the end of the array\n    distance = index - total_elements\n\n    # Calculate the element at the new index after rotations\n    new_index = (distance * rotations) % total_elements\n\n    # Check if the new index is within range of the array\n    if new_index < 0:\n        new_index += total_elements\n\n    # Return the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges and a number of rotations, and returns the element at the given index after rotating the array.\n    \"\"\"\n\n    # Calculate the total number of elements in the array\n    total_elements = len(arr)\n\n    # Calculate the total number of rotations to perform\n    total_rotations = total_elements * rotations\n\n    # Calculate the index after rotating the array\n    new_index = (index + total_rotations) % total_elements\n\n    # Find the element at the new index\n    element = arr[new_index]\n\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Given an array of integers arr, a list of tuples ranges and a number of rotations rotations,\n    and an integer index, this function returns the element at the given index after rotations.\n    \n    Args:\n        arr (list): list of integers\n        ranges (list of tuples): a list of tuples, each tuple containing a starting and ending index\n        rotations (int): number of rotations\n        index (int): index to find after rotations\n    \n    Returns:\n        int: the element at the given index after rotations\n    \"\"\"\n    # Initialize a variable to store the current index\n    current_index = index\n    \n    # Iterate over the list of ranges\n    for start, end in ranges:\n        # If the current index is within the range, return the element at the current index\n        if current_index >= start and current_index < end:\n            return arr[current_index]\n        \n        # If the current index is outside the range, update the current index by rotating\n        current_index = (current_index - start + rotations) % (end - start) + start\n        \n    # If the current index is not in any of the ranges, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    #calculate the number of rotations and modulo value\n    modulo = rotations % len(ranges)\n    if modulo == 0:\n        modulo = len(ranges)\n    \n    #get the range of elements that will be included in the rotation\n    range_to_rotate = ranges[0:modulo]\n    \n    #get the index of the element after rotation\n    index_after_rotation = (index - rotations) % len(arr)\n    \n    #calculate the range of elements after rotation\n    ranges_after_rotation = []\n    for i in range(len(arr)):\n        if i >= index_after_rotation:\n            ranges_after_rotation.append(arr[i])\n    \n    #find the element at the given index after rotation\n    for i in range(len(range_to_rotate)):\n        element = range_to_rotate[i]\n        if element in ranges_after_rotation:\n            return element\n    \n    #if the element was not found after rotation, return None\n    return None\n    "
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # initialize variables\n    element = 0\n    i = 0\n    \n    # loop through the ranges and rotations\n    while i < len(ranges) and rotations > 0:\n        # find the index of the current range and rotation\n        current_range = ranges[i]\n        current_rotation = rotations % current_range\n        \n        # rotate the element by the current rotation\n        element = arr[index - current_rotation]\n        \n        # update the index and rotations\n        index = index - current_rotation + current_range\n        rotations = rotations // current_range\n        \n        # increment the range index\n        i = i + 1\n        \n    # return the final element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if count == index:\n            return arr[i]\n        if count < index:\n            count += 1\n        else:\n            count -= ranges[arr[i]-1]\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the number of elements to rotate by\n    num_elements = len(arr) // rotations\n\n    # Find the starting element for the rotation\n    start_element = index % rotations\n\n    # Initialize the index of the next element to find\n    next_index = index + rotations\n\n    # Initialize the current index\n    current_index = 0\n\n    # Initialize the current element\n    current_element = None\n\n    # Find the current element\n    while current_index < num_elements:\n        # Calculate the next index to find\n        next_index += rotations\n\n        # Check if the next index is within the range of the array\n        if next_index >= len(arr):\n            next_index -= len(arr)\n\n        # Find the current element\n        current_element = arr[current_index]\n\n        # Check if the current element is within the range of the array\n        if current_element < ranges[0]:\n            current_index += 1\n        elif current_element > ranges[1]:\n            current_index += 1\n        else:\n            # Check if the current element is within the range of the next element to find\n            if arr[next_index] < ranges[0]:\n                current_index += 1\n            elif arr[next_index] > ranges[1]:\n                current_index += 1\n            else:\n                # If both conditions are true, return the current element\n                break\n\n    return current_element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes in an array, a list of ranges, and the number of rotations to make, and returns the element\n    at the given index after rotating the array by the specified number of rotations.\n    \"\"\"\n    # Calculate the total number of elements in the rotated array\n    total_elements = len(arr) * rotations\n    \n    # Calculate the starting index for the rotated array\n    start_index = (index - 1) * rotations\n    \n    # Calculate the ending index for the rotated array\n    end_index = min(start_index + total_elements - 1, len(arr) - 1)\n    \n    # Create a new array to hold the rotated elements\n    rotated_arr = arr[start_index:end_index+1]\n    \n    # Iterate through the rotated array and find the element at the given index\n    for i in range(rotated_arr.count(0)):\n        rotated_arr.remove(0)\n    \n    # Return the element at the given index after rotating the array by the specified number of rotations\n    return rotated_arr[index - 1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Define regular expression pattern to match words starting with 'p'\n    pattern = r'\\b(p)\\w*'\n    \n    # Find all words that match the pattern in the input list of words\n    match_words = re.findall(pattern,''.join(words))\n    \n    # If there are no matches, return None\n    if len(match_words) == 0:\n        return None\n    \n    # If there are two matches, return them as a tuple\n    elif len(match_words) == 2:\n        return tuple(match_words)\n    \n    # If there are more than two matches, raise an error\n    else:\n        raise ValueError('Too many matches for the pattern')"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    words = [word for word in words if re.match(pattern, word)]\n    return words[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word.startswith('p'):\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    result = re.findall(pattern, words)\n    if len(result) == 2:\n        return result\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word[0] +'' + word[1:]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    for i in range(len(words)):\n        if re.match(r\"p[a-z]*\", words[i]):\n            return words[i], words[i+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+$')\n    for word in words:\n        if pattern.match(word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Find all words starting with letter 'p'\n    result = re.findall(r'p\\w+', words)\n    # Return only two words starting with letter 'p'\n    return result[:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(\"^p\")\n    for word in words:\n        if pattern.match(word):\n            return word, word[2:]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    \n    dp = [0] * n\n    dp[0] = a[0]\n    \n    for i in range(1, n):\n        if a[i] > a[index]:\n            dp[i] = dp[index] + a[i]\n        else:\n            max_sum = dp[index]\n            for j in range(index, i):\n                if a[j] < a[i] and dp[j] + a[i] > max_sum:\n                    max_sum = dp[j] + a[i]\n            dp[i] = max_sum\n            \n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == 0:\n        return a[0], k - 1, index\n\n    if index == n:\n        return a[n - 1], k, n - 1\n\n    if k > index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    if k == index:\n        return max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # prefix_sum = max(a[i], prefix_sum)\n    prefix_sum = max(a[index], prefix_sum)\n    result = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    if prefix_sum + a[k] > result[0]:\n        return prefix_sum + a[k], k, index + 1\n\n    return result"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Base case: if index is equal to k, return 0\n    if index == k:\n        return 0\n\n    # Initialize variables\n    current_sum = 0\n    max_sum = 0\n\n    # Iterate through the array from index to n-1\n    for i in range(index, n):\n        # Add a[i] to the current sum\n        current_sum += a[i]\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Check if the kth element is included in the current increasing subsequence\n        if i == k - 1:\n            return max_sum\n\n        # If the current sum is less than the kth element,\n        # then reset the current sum to 0\n        elif current_sum < a[k - 1]:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize max_sum and max_ending_here to zero\n    max_sum = 0\n    max_ending_here = 0\n\n    # Initialize prefix array\n    prefix = [0] * n\n\n    # Initialize a boolean array \"increasing\" to keep track of which elements are part of the increasing subsequence\n    increasing = [True] * n\n\n    # Initialize two pointers, i and j, to the starting index of the current subsequence\n    i = 0\n    j = index\n\n    # Traverse the array from the starting index to the ending index (inclusive)\n    while i < j:\n        # If the current element is greater than or equal to the kth element, and it is also an increasing element\n        if a[i] >= a[k] and increasing[i]:\n            # Update max_ending_here to include the current element\n            max_ending_here = max(max_ending_here + a[i], a[i])\n\n            # If max_ending_here is greater than max_sum so far, update max_sum to max_ending_here\n            if max_ending_here > max_sum:\n                max_sum = max_ending_here\n\n            # Update prefix[i] to be max_ending_here\n            prefix[i] = max_ending_here\n\n        # If the current element is greater than or equal to the kth element, but it is not an increasing element\n        elif a[i] >= a[k] and not increasing[i]:\n            # Update max_ending_here to include the current element\n            max_ending_here += a[i]\n\n            # Update max_sum to max_ending_here\n            max_sum = max(max_sum, max_ending_here)\n\n            # Update prefix[i] to be max_ending_here\n            prefix[i] = max_ending_here\n\n        # If the current element is less than the kth element or it is not an increasing element\n        else:\n            # If max_ending_here is greater than max_sum so far, update max_sum to max_ending_here\n            if max_ending_here > max_sum:\n                max_sum = max_ending_here\n\n            # Update prefix[i] to be max_ending_here\n            prefix[i] = max_ending_here\n\n            # Update max_ending_here to be 0\n            max_ending_here = 0\n\n            # Mark the current element as an increasing element\n            increasing[i] = True\n\n        # Increment i and decrement j to traverse the array in the next subsequence\n        i += 1\n        j -= 1\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * (n+1)\n    dp[index] = a[index]\n    max_sum = a[index]\n    for i in range(index+1, n+1):\n        if i == k:\n            continue\n        if i < k:\n            dp[i] = max(a[i], dp[i-1])\n        else:\n            dp[i] = max(a[i], dp[i-1]) + a[i]\n        max_sum = max(max_sum, dp[i])\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if index == n:\n        return 0, 0\n\n    if a[index] >= a[k]:\n        left_sum, left_idx = max_sum_increasing_subseq(a, n, index+1, k)\n        right_sum, right_idx = max_sum_increasing_subseq(a, n, index+1, index)\n        return max(left_sum + a[index], right_sum), index\n    else:\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix\n    until ith index and also including a given kth element which\n    is after i, i.e., k > i.\n\n    Returns:\n        max_sum: maximum sum of increasing subsequence\n        index: index of the kth element\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k should be less than or equal to n\")\n\n    max_sum = 0\n    max_sum_ending_at_i = 0\n    max_sum_ending_at_k = 0\n    for i in range(index, n):\n        if a[i] > a[index]:\n            max_sum_ending_at_i += a[i]\n            if i + 1 < k:\n                max_sum_ending_at_k += a[i]\n        else:\n            max_sum_ending_at_i = 0\n\n        max_sum_ending_at_k = max(max_sum_ending_at_k, max_sum_ending_at_i)\n        max_sum = max(max_sum, max_sum_ending_at_k)\n\n    return max_sum, k"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    \n    if index == n:\n        return float('-inf')\n    \n    if k > index:\n        return float('-inf')\n    \n    if index == 0:\n        if k == 0:\n            return 0\n        else:\n            return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    if k == 0:\n        return max_sum_increasing_subseq(a, n, index+1, k)\n    \n    if k < a[index-1]:\n        return max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index, k-1))\n    \n    return max(max_sum_increasing_subseq(a, n, index+1, k-a[index-1]), max_sum_increasing_subseq(a, n, index, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    if index == 0:\n        return 0\n\n    if index == k:\n        if a[k] < a[index-1]:\n            return a[index-1]\n        else:\n            return 0\n\n    if index > k:\n        if a[k] < a[index-1]:\n            return a[index-1] + max_sum_increasing_subseq(a, n, index-1, k)\n        else:\n            return max_sum_increasing_subseq(a, n, index-1, k)\n\n    if a[k] < a[index-1]:\n        return a[index-1] + max_sum_increasing_subseq(a, n, index-1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index-1, k)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > n:\n        return 0\n    \n    dp = [0] * n\n    dp[index] = a[index]\n    max_sum = dp[index]\n    \n    for i in range(index+1, k+1):\n        dp[i] = max(a[i], dp[i-1]+a[i])\n        max_sum = max(max_sum, dp[i])\n        \n    return max_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # loop over the range of column numbers from n to m-1\n    for i in range(n, m-1):\n        # append the value of the tuple at each index\n        new_tuplex.append(new_tuplex[i])\n\n    # join the colon values with a colon character and return the colon string\n    return \":\".join(str(x) for x in new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Define the length of the colon\n    if m < n:\n        length = m\n    else:\n        length = n\n    \n    # Copy the tuple to avoid modifying the original\n    colontuple = deepcopy(tuplex)\n    \n    # Split the tuple into a list\n    colonlist = list(colontuple)\n    \n    # Create the colon by slicing the list\n    colonlist = colonlist[::length]\n    \n    # Convert the colon list back to a tuple and return it\n    colon = tuple(colonlist)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col_list = []\n    for i in range(m):\n        col_list.append(deepcopy(tuplex[i*n:(i+1)*n]))\n    return col_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    This function takes a tuple-like object and returns a colon separated string representation of its elements.\n    '''\n    # Create a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Reverse the order of the elements in the copy\n    tuplex_copy = tuplex_copy[::-1]\n    # Join the elements of the copy with a colon\n    colon_sep_str = \":\".join(str(tuplex_copy[i]) for i in range(m*n))\n    return colon_sep_str"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(new_tuplex)\n\n    # initialize variables for the colon\n    start = 0\n    end = m - 1\n\n    # loop through the tuple and add m elements to the colon\n    while start < end:\n        for i in range(start, end + 1):\n            if i >= length:\n                break\n            new_tuplex[i] = new_tuplex[i] + (end - start + 1)\n        start += 1\n        end -= 1\n\n    # return the colon\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n\n    Args:\n        tuplex: tuple to get a colon from\n        m: number of rows to copy\n        n: number of columns to copy\n\n    Returns:\n        a new tuple containing the elements of the input tuple,\n        copied m times in each direction\n    '''\n    # Create a copy of the input tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Get the number of elements in the input tuple\n    n = len(tuplex_copy)\n\n    # Compute the size of the colon to return\n    colon_size = n * (m+n-1)\n\n    # Create a new tuple to hold the colon\n    colon = ()\n\n    # Fill the new tuple with copies of the input tuple\n    for i in range(colon_size):\n        # Compute the row and column indices for this element\n        row = i // n\n        col = i % n\n        # If this element is in the top row\n        if row < m:\n            # If this element is in the first column\n            if col < n:\n                # Copy the top row of the input tuple\n                colon += (tuplex_copy[0],)\n            # If this element is in the last column\n            else:\n                # Copy the last row of the input tuple\n                colon += (tuplex_copy[-1],)\n        # If this element is in the bottom row\n        else:\n            # If this element is in the first column\n            if col < n:\n                # Copy the first row of the input tuple\n                colon += (tuplex_copy[-1],)\n            # If this element is in the last column\n            else:\n                # Copy the bottom row of the input tuple\n                colon += (tuplex_copy[0],)\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Return a copy of the tuple with a colon between each element\n    return deepcopy(tuplex)[:m] + (':',) + deepcopy(tuplex)[m:n] + (':',) + deepcopy(tuplex)[n:]"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = []\n    for i in range(m):\n        col.append(deepcopy(tuplex[i*n:i*n+n]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Get a colon of a tuple.\n\n    Args:\n    tuplex (tuple): A tuple with multiple elements.\n    m (int): The index of the first element of the colon to be returned.\n    n (int): The index of the last element of the colon to be returned.\n\n    Returns:\n    tuple: A tuple containing the elements in the specified colon.\n\n    Raises:\n    TypeError: If `tuplex` is not a tuple.\n    ValueError: If `m` or `n` is not a valid index for the tuple.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if not (0 <= m < len(tuplex)) or not (0 <= n < len(tuplex)):\n        raise ValueError(\"Invalid index for the tuple\")\n\n    # Get a copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n\n    # Slice the tuple\n    colon = tuplex_copy[m:n + 1]\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the input tuple\n    tuplex = deepcopy(tuplex)\n\n    # Iterate through the input tuple\n    for i in range(m):\n        # Get the tuple index\n        index = tuplex.index(i)\n\n        # Get the tuple element at the index\n        element = tuplex[index]\n\n        # Add the element to the colon\n        tuplex[index] = n\n\n        # Get the index of the new element in the input tuple\n        index = tuplex.index(n)\n\n        # Add the new element to the input tuple\n        tuplex.insert(index, element)\n\n        # Reset the index of the last element in the colon to the index of the new last element in the input tuple\n        tuplex.insert(index, m)\n        index = tuplex.index(m)\n        tuplex.insert(index, n)\n\n        # Set the index of the last element in the input tuple to the index of the new last element in the colon\n        tuplex.insert(index, index + 1)\n\n    return tuplex"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_products = []\n    for i in range(N):\n        product1 = 1\n        product2 = 1\n        for j in range(len(nums1)):\n            product1 *= nums1[j]\n            product2 *= nums2[j]\n        largest_products.append(max(product1, product2))\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # initialize the result list with zeros\n    result = [0] * N\n\n    # iterate over the first list, selecting the first N elements as factors\n    for i in range(N):\n        # initialize the current product to be the product of the first element of the first list and the i-th element of the second list\n        current_product = nums1[0] * nums2[i]\n\n        # iterate over the second list, selecting the remaining N-i elements as factors\n        for j in range(i+1, N):\n            # update the current product with the product of the current element of the first list and the remaining elements of the second list\n            current_product *= nums1[j]\n\n            # update the result with the maximum of the current product and the current element of the result list\n            result[i] = max(result[i], current_product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Sort the lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list with zeros\n    result = [0] * N\n    \n    # Iterate through each combination of two elements in the two lists\n    for i in range(len(nums1)-1):\n        for j in range(i+1, len(nums1)):\n            # Calculate the product of the two elements\n            product = nums1[i] * nums2[j]\n            \n            # Check if the product is the largest so far\n            if product > result[0]:\n                # Update the result list with the new product\n                result[0] = product\n                # Copy the current product to the remaining elements of the result list\n                for k in range(1, N):\n                    result[k] = result[0]\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        raise ValueError('N must be <= min(len(nums1), len(nums2))')\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    result = []\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        result.append(product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a set to store the products of the largest factors found so far\n    largest_products = set()\n\n    # Sort the two lists of numbers\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Iterate through the first N elements of each list\n    for i in range(N):\n        # Calculate the product of the largest factors found so far and the current largest factor from the first list\n        product = max(nums1[:i+1]) * max(nums2[:i+1])\n\n        # If the product is not already in the set, add it and remove the two largest factors from the second list\n        if product not in largest_products:\n            largest_products.add(product)\n            nums2 = nums2[i+1:]\n\n    # Return the largest products found\n    return list(largest_products)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        nums1 (list): a list of numbers\n        nums2 (list): a list of numbers\n        N (int): the number of largest products to find\n\n    Returns:\n        list: the indices of the largest products found\n    \"\"\"\n    # Find the maximum number in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n\n    # Create a list of all possible combinations of indices of maximum numbers\n    indices = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            indices.append((i, j))\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate over all combinations of indices and compute the largest product for each combination\n    for i, j in indices:\n        product1 = nums1[i] * nums1[j]\n        product2 = nums2[i] * nums2[j]\n        product = max(product1, product2)\n        if product > max1 * max2:\n            largest_products.append((i, j))\n\n    # Sort the largest products by the product and return the indices\n    largest_products.sort(key=lambda x: nums1[x[0]] * nums2[x[1]], reverse=True)\n    return [x[0] for x in largest_products][:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    # find the maximum product of any two numbers in nums1\n    max1 = max(nums1)\n\n    # find the minimum product of any two numbers in nums2\n    min2 = min(nums2)\n\n    # calculate the product of the numbers that add up to max1\n    prod1 = max1\n\n    # calculate the product of the numbers that add up to min2\n    prod2 = min2\n\n    # iterate over all pairs of numbers and keep track of the largest products found so far\n    largest_products = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the product of the i-th number from nums1 and the j-th number from nums2\n            product = nums1[i] * nums2[j]\n\n            # if this is the largest product found so far, add it to the list\n            if product > max(largest_products + [product]):\n                largest_products = [product]\n            # if this is not the largest product found so far, check if it is in the list of largest products found so far\n            elif product in largest_products:\n                # if it is, remove it from the list and continue iterating\n                largest_products.remove(product)\n                continue\n\n    # keep track of the number of largest products found so far\n    count = len(largest_products)\n\n    # if we have found the desired number of products, return them\n    if count == N:\n        return largest_products\n\n    # otherwise, return None (indicating that we did not find the desired number of products)\n    return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = float('-inf')\n    max_products = []\n\n    for i in range(N):\n        product1 = max(nums1[i], nums1[i + 1]) * max(nums1[i], nums1[i + 2])\n        product2 = max(nums2[i], nums2[i + 1]) * max(nums2[i], nums2[i + 2])\n\n        if product1 > max_product:\n            max_product = product1\n            max_products = [product1]\n        elif product1 == max_product:\n            max_products.append(product1)\n\n        if product2 > max_product:\n            max_product = product2\n            max_products = [product2]\n        elif product2 == max_product:\n            max_products.append(product2)\n\n    return max_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # initialize variables\n    max_product1 = float('-inf')\n    max_product2 = float('-inf')\n    max_product3 = float('-inf')\n    max_product4 = float('-inf')\n\n    # loop through each factor\n    for i in range(N):\n        # find the largest product for each factor\n        product1 = max(nums1[i], nums2[i]) * nums1[i]\n        product2 = max(nums1[i], nums2[i]) * nums2[i]\n        product3 = max(nums1[i], nums2[i]) * nums1[i] + max(nums1[i], nums2[i]) * nums2[i]\n        product4 = max(nums1[i], nums2[i]) * nums1[i] + max(nums1[i], nums2[i]) * nums2[i] + max(nums1[i], nums2[i]) * nums1[i]\n\n        # update the maximum product for each factor\n        max_product1 = max(max_product1, product1)\n        max_product2 = max(max_product2, product2)\n        max_product3 = max(max_product3, product3)\n        max_product4 = max(max_product4, product4)\n\n    # return the maximum number of largest products\n    return max_product1, max_product2, max_product3, max_product4"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Loop through each pair of elements in the two lists\n    for i in range(len(nums1)):\n        for j in range(i+1, len(nums1)+1):\n            # Calculate the product of the two elements\n            product = nums1[i] * nums2[j-1]\n\n            # Check if the product is already in the result list\n            if product not in result and len(result) < N:\n                result.append(product)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:  \n        return a  \n    else:  \n        return b  "
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    # Convert integer to binary representation\n    binary_repr = bin(n)[2:]\n\n    # Loop through the binary representation and set the leftmost unset bit to 1\n    for i in range(len(binary_repr)):\n        if binary_repr[i] == '0':\n            binary_repr = binary_repr[:i] + '1' + binary_repr[i+1:]\n            break\n\n    # Convert binary representation back to integer\n    n = int(binary_repr, 2)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in an integer `n` by shifting the binary representation of `n` to the left by one bit.\n    \"\"\"\n    binary_representation = bin(n)[2:]  # Remove the \"0b\" prefix and convert to binary\n    unset_bits = binary_representation.count('0')  # Count the number of unset bits in the binary representation\n    n_without_unset_bits = n & ((1 << unset_bits) - 1)  # Clear the unset bits by ANDing with a mask with the unset bits set to 1\n    n_with_unset_bit = n_without_unset_bits | (1 << unset_bits)  # Set the left most unset bit by ORing with a mask with the unset bits set to 1\n    return n_with_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & (n - 1)!= 0:\n        n &= (n - 1)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function takes an integer 'n' as input and sets the leftmost unset bit in 'n'.\n    \"\"\"\n    # Convert the binary representation of n to a list of bits\n    binary_representation = bin(n)[2:]\n    # Use the leftmost unset bit to determine the position of the next unset bit\n    for i in range(len(binary_representation)):\n        if binary_representation[i] == '0':\n            next_unset_bit = i\n            break\n    # Create a list of all unset bits before the next unset bit\n    unset_bits_before_next_unset_bit = [1 << j for j in range(next_unset_bit)]\n    # Combine the list of unset bits before the next unset bit with the binary representation of n\n    n_with_unset_bits_before_next_unset_bit = n ^ sum(unset_bits_before_next_unset_bit)\n    # Set the leftmost unset bit to 1\n    n_with_leftmost_unset_bit_set = n_with_unset_bits_before_next_unset_bit | 1 << next_unset_bit\n    return n_with_leftmost_unset_bit_set"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of set bits to 0\n    count = 0\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(32):\n        # If the i-th bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n        \n        # If the count of set bits is equal to the number of bits in the binary representation of n,\n        # then we have found the left most unset bit and can set it to 1\n        if count == 32:\n            n |= (1 << i)\n            count = 0\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function takes an integer n as input and returns the integer value of the left most unset bit in the binary representation of n.\n\n    Example:\n    set_left_most_unset_bit(13) -> 1\n\n    If the input integer n has only one set bit, then the function should return n.\n\n    If the input integer n has no unset bits, then the function should return -1.\n\n    If the input integer n has more than one unset bit, then the function should return -2.\n\n    If the input integer n has leading zeros, then the function should return -3.\n    '''\n\n    # Helper function to check if a bit is set in the binary representation of n\n    def is_bit_set(n, bit):\n        return (n & (1 << bit))!= 0\n\n    # Helper function to count the number of unset bits in the binary representation of n\n    def count_unset_bits(n):\n        count = 0\n        for i in range(32):\n            if not is_bit_set(n, i):\n                count += 1\n        return count\n\n    # Helper function to find the index of the leftmost unset bit in the binary representation of n\n    def find_left_most_unset_bit(n):\n        for i in range(31, -1, -1):\n            if not is_bit_set(n, i):\n                return i\n        return -1\n\n    # Check if the input integer n has leading zeros\n    if n == 0:\n        return -3\n\n    # Check if the input integer n has only one set bit\n    if count_unset_bits(n) == 1:\n        return n\n\n    # Check if the input integer n has no unset bits\n    if count_unset_bits(n) == 32:\n        return -1\n\n    # Check if the input integer n has more than one unset bit\n    if count_unset_bits(n) > 1:\n        return -2\n\n    # Check if the input integer n is a power of 2\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the index of the leftmost unset bit in the binary representation of n\n    left_most_unset_bit_index = find_left_most_unset_bit(n)\n\n    # Set the bit at the left most unset bit index to 1\n    n |= (1 << left_most_unset_bit_index)\n\n    # Return the modified integer value\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Write a python function to set the left most unset bit.\n    \"\"\"\n    mask = 1\n    while mask & n:\n        mask <<= 1\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Set the left most unset bit in the given integer n.\n    \"\"\"\n    # Find the rightmost set bit\n    i = 0\n    while n & (1 << i) == 0:\n        i += 1\n    # Set the leftmost unset bit\n    n |= 1 << i\n    # Return the modified integer\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Set the left most unset bit to 1\n    n |= 1 << 31\n\n    # Return the number with the left most unset bit set to 1\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    for i in range(32): # iterate through all possible binary representations of n\n        binary = bin(n)[2:].zfill(i+1) # convert n to binary representation with i+1 bits\n        if binary == '0'*i: # if the binary representation is all 0's\n            for j in range(i): # iterate through all binary representations of n\n                if bin(n)[2:].zfill(j+1) == '0'*i: # if the binary representation is all 0's\n                    if j == 0: # if this is the first binary representation of n that is all 0's\n                        return i # return the value of i (which is the leftmost unset bit)\n            if j == i: # if all binary representations of n are all 0's\n                return 32 # return 32 (which is the maximum value for i)\n    return 0 # if we get to this point, there is no leftmost unset bit"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    return math.pi * r * r * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi*(r**2)*h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n\n    # Use Heron's formula to find the volume of the cone\n    volume = (1/3) * r * r * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v = (1/3) * math.pi * r**2 * h\n    return v"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Calculate the volume of a cone.\n    '''\n    # Convert radius and height from meters to centimeters\n    r_cm = r * 100\n    h_cm = h * 100\n\n    # Calculate the volume of the cone using Heron's formula\n    volume = math.sqrt(3) / 12 * r_cm * h_cm\n\n    # Return the volume in cubic centimeters\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Calculate the volume of a cone with the given radius and height.\n    \"\"\"\n    vol = math.pi * r ** 2 * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters: radius and height of the cone.\n    It calculates the volume of the cone using the formula:\n    V = \u03c0r\u00b2h.\n    '''\n    V = math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters, r and h, and returns the volume of a cone with base radius r and height h.\n    '''\n    V = (1/3) * math.pi * r * r * r * h\n    return V"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 0:\n        if n & 1 == 1:\n            return 1 << (n.bit_length() - 1)\n        n >>= 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize variables\n    power = 0\n\n    # Check if n is 0\n    if n == 0:\n        return power\n\n    # Check if n is already a power of 2\n    while n > 1:\n        power += 1\n        n >>= 1\n\n    # Return highest power of 2 less than or equal to n\n    return power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        highest = highest_Power_of_2(n//2)\n        return 2*highest\n\nprint(highest_Power_of_2(16))"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Calculate the logarithm base 2 of n\n    log2_n = 0\n    while n > 1:\n        n = n >> 1\n        log2_n += 1\n\n    return 1 << log2_n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n //= 2\n    return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n    \n    return highest >> 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # loop through all numbers from 1 to n\n    for i in range(1, n+1): \n        # check if this number is a power of 2\n        if i & (i-1) == 0: \n            return i "
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize a variable to keep track of the highest power of 2\n    highest_power = 1\n\n    # Check if the number is already a power of 2\n    while highest_power < n:\n        highest_power <<= 1\n\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(int(n**0.5)+1): \n        if n % (2**i) == 0: \n            return 2**i\n    return 2**(i-1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(n, 0, -1):\n        if i == 1:\n            return i\n        elif i > 1 and i & (i - 1) == 0:\n            return i"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    # base cases\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        # find the nth lucas number recursively\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n\n    Args:\n    n: an integer\n\n    Returns:\n    Then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n <= 1:\n        return n\n    \n    lucas = [0, 1]\n    for i in range(2, n):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    \n    return lucas[n-1]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n\n    # base case\n    if n == 0:\n        return 2\n\n    # recursive case\n    else:\n        if n == 1:\n            return 2\n\n        # compute the previous two lucas numbers\n        prev1, prev2 = 2, 1\n\n        # iterate for n-1 times\n        for i in range(2, n+1):\n            # compute the next lucas number\n            next_num = prev1 + prev2\n\n            # update the previous two lucas numbers\n            prev1, prev2 = prev2, next_num\n\n        # return the last computed lucas number\n        return prev1"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i, item in enumerate(list_):\n        list_[i] = string.format(item)\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = [string.format(elem) for elem in list_]\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [format(x, string) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for item in list_:\n        new_list.append(string.format(item))\n    return new_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function takes multiple lists and converts them to nested dictionary.\n    \"\"\"\n    result = {}\n    for i, l in enumerate(lists):\n        for j, item in enumerate(l):\n            if j not in result:\n                result[j] = {}\n            if i not in result[j]:\n                result[j][i] = []\n            result[j][i].append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]][l3[i]] = l2[i]\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            d[l1[i]] = {}\n            for k in range(len(l3)):\n                d[l1[i]][l2[j]] = l3[k]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {\n            'list2': l2[i],\n            'list3': l3[i]\n        }\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # initialize empty dictionary\n    result = {}\n\n    # iterate over all input lists\n    for i in range(len(lists)):\n        # check if the current list is empty\n        if not lists[i]:\n            continue\n\n        # iterate over the elements in the list\n        for j in range(len(lists[i])):\n            # check if the current element is a dictionary\n            if isinstance(lists[i][j], dict):\n                # update the result dictionary with the nested dictionary\n                result.update(lists[i][j])\n            else:\n                # add the key-value pair to the result dictionary\n                result[j] = lists[i][j]\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    This function takes one or more lists as arguments and returns a nested dictionary.\n    The function takes the first list in the list and converts it to a nested dictionary\n    where the keys are the values of the list and the values are the corresponding values of the list.\n    The second list is used as the keys for the nested dictionary.\n    The third list is used as the values for the nested dictionary.\n    '''\n    d = {}\n    for i in range(len(lists[0])):\n        d[lists[1][i]] = lists[2][i]\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict_list = []\n    for i in range(len(l1)):\n        sub_dict = {}\n        sub_dict['key1'] = l1[i]\n        sub_dict['key2'] = l2[i]\n        sub_dict['key3'] = l3[i]\n        dict_list.append(sub_dict)\n    return dict_list"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Loop through each list and add items to the result dictionary\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # Create a key for the nested dictionary\n                nested_key = f\"{l1[i]}{l2[j]}{l3[k]}\"\n                # Create a value for the nested dictionary\n                nested_value = f\"{l1[i]}{l2[j]}{l3[k]}\"\n                # Add the nested dictionary to the result dictionary\n                result_dict[nested_key] = nested_value\n    # Return the final result dictionary\n    return result_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    result = {}\n    for i, item in enumerate(l1):\n        subdict = {}\n        for j, subitem in enumerate(item):\n            subdict[l2[j]] = subitem\n        result[l3[i]] = subdict\n    return result"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        half = get_max_sum(n//2)\n        three_fourth = get_max_sum(n//3)\n        four_fifth = get_max_sum(n//4)\n        five_sixth = get_max_sum(n//5)\n        return max(half + three_fourth + four_fifth + five_sixth, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    if n <= 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n):\n        if n == 1:\n            return n\n        return max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n\n    return helper(n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    \n    max_sum = n\n    half_sum = n//2\n    third_sum = n//3\n    fourth_sum = n//4\n    fifth_sum = n//5\n    \n    if half_sum <= 1:\n        half_sum = 1\n        \n    if third_sum <= 1:\n        third_sum = 1\n        \n    if fourth_sum <= 1:\n        fourth_sum = 1\n        \n    if fifth_sum <= 1:\n        fifth_sum = 1\n        \n    if half_sum * 2 + third_sum * 3 + fourth_sum * 4 + fifth_sum * 5 > n:\n        max_sum = half_sum * 2 + third_sum * 3 + fourth_sum * 4 + fifth_sum * 5\n        \n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    max_sum = 0\n    for i in range(1, n):\n        max_sum = max(max_sum, get_max_sum(i) + i)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n    \n    # Recursive case\n    else:\n        # Compute the maximum sum of f(n/2), f(n/3), f(n/4), and f(n/5) using the given equation\n        a = (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5))\n        \n        # Compute the maximum sum of f(n) and f(n/2) using the given equation\n        b = max(n, get_max_sum(n//2))\n        \n        # Return the maximum of the two sums\n        return max(a, b)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    This function takes an integer n and returns the maximum sum that can be achieved using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return 1\n\n    # Recursive case\n    else:\n        # Calculate the maximum sum using the given equation\n        first_sum = (get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5))\n        second_sum = n\n\n        # Return the maximum sum\n        return max(first_sum, second_sum)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        # Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n        left_sum = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n        # Return the maximum sum possible\n        return max(left_sum, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5) + n, get_max_sum(n-1))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    result = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            result = [item]\n        elif len(item) == max_len:\n            result.append(item)\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_list = None\n    max_length = 0\n\n    for item in input_list:\n        length = len(item)\n        if length > max_length:\n            max_length = length\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = len(input_list[0])\n    max_index = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    lengths = []\n    for item in input_list:\n        lengths.append(len(item))\n    return input_list[lengths.index(max(lengths))]"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to check for duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the length of the set is equal to the length of the original tuple\n    return len(test_set) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    set_tup = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(set_tup) == len(test_tup):\n        # If both conditions are true, it means there are no duplicates in the tuple\n        return True\n    else:\n        # If not, there are duplicates in the tuple\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the tuple\n    if len(test_set) == len(test_tup):\n        # If yes, return True\n        return True\n    else:\n        # If not, return False\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            char_set.remove(char)\n        else:\n            char_set.add(char)\n    for char in str1:\n        if char not in char_set:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    \n    # iterate over each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency by 1\n        if char in freq_dict:\n            freq_dict[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq_dict[char] = 1\n    \n    # iterate over the characters in the string again and find the first non-repeated character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # creating a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # finding the first non-repeated character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes in a string as input and returns the first non-repeated character in the string.\n    '''\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # iterate through the dictionary and find the first character with a frequency of 1\n    for char, freq in char_freq.items():\n        if freq == 1:\n            return char\n    \n    # if all characters have frequency of 1, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the characters and their frequencies\n    char_freq = {}\n    # Loop through the string and count the frequencies of characters in the dictionary\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    # Find the first non-repeated character\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate through the string and count the frequency of each character\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the string again and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(string):\n    char_dict = {}\n    for char in string:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    for char in string:\n        if not char in char_dict:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n\n    # create a dictionary to store unique characters and their frequency\n    char_freq = {}\n\n    # iterate over each character in the string\n    for char in str1:\n        # if the character is not already in the dictionary, add it with a frequency of 1\n        if char not in char_freq:\n            char_freq[char] = 1\n        # if the character is already in the dictionary, increment its frequency by 1\n        else:\n            char_freq[char] += 1\n\n    # iterate over each character in the string again and return the first one that appears only once\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    return match is not None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_char(string):\n    regex = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    a_b = a + b\n    c_ab = c + a_b\n    a_b_c_ab = a_b + c_ab\n\n    median = (a_b_c_ab - (min(a, b, c) + max(a, b, c))) / 2\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    length = len(numbers)\n    if length % 2 == 0:\n        median = (numbers[length // 2 - 1] + numbers[length // 2]) / 2\n    else:\n        median = numbers[length // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # sort the numbers\n    sorted_numbers = sorted([a, b, c])\n\n    # find the length of the sorted array\n    n = len(sorted_numbers)\n\n    # check if the length is odd or even\n    if n % 2 == 0:\n        # if the length is even, then the median is the average of the middle two numbers\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        # if the length is odd, then the median is the middle number\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Find the sum of the three numbers\n    sum_of_nums = a + b + c\n\n    # Find the average of the three numbers\n    average_of_nums = sum_of_nums / 3\n\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Check if the average is an integer or a float\n    if int(average_of_nums) == average_of_nums:\n        # If it is an integer, return the middle number\n        return sorted_nums[1]\n    else:\n        # If it is a float, return the middle two numbers\n        return sorted_nums[1] + sorted_nums[2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        median = (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        median = numbers[mid]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    This function takes three numbers as input and returns the median of them.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    nums = sorted([a,b,c])\n    \n    # Find the median based on the length of the sorted array\n    if len(nums) % 2 == 0:\n        # If the length of the array is even, take the average of the middle two numbers\n        median = (nums[len(nums)//2-1] + nums[len(nums)//2])/2\n    else:\n        # If the length of the array is odd, take the middle number\n        median = nums[len(nums)//2]\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    This function takes three numbers as input and returns their median.\n    The function first sorts the three numbers in ascending order and then returns the middle number.\n    '''\n    numbers = sorted([a, b, c])\n    middle = len(numbers) // 2\n    return numbers[middle]\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the three numbers in ascending order\n    a = sorted([a, b, c])[1]\n    b = sorted([a, b, c])[2]\n    c = sorted([a, b, c])[1]\n    # calculate the median\n    median = (a + b + c) / 3\n    # return the median\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a,b,c])\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers)//2] + sorted_numbers[len(sorted_numbers)//2-1])/2\n    else:\n        median = sorted_numbers[len(sorted_numbers)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import random\n\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = random.choice(arr)\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\ndef find_median(arr):\n    if len(arr) % 2 == 0:\n        mid = len(arr) // 2\n        return (arr[mid-1] + arr[mid]) / 2\n    else:\n        return arr[len(arr) // 2]\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    arr = quicksort(arr)\n    median = find_median(arr)\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digit_sum += sum(int(digit) for digit in num_str)\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    # initialize an empty list to store the sum of digits\n    sum_of_digits_list = []\n\n    # iterate over the numbers in the list\n    for num in nums:\n        # convert the number to a string and split it into individual digits\n        digits = list(str(num))\n        # initialize a variable to store the sum of digits\n        sum_of_digits = 0\n        # iterate over the digits and add them to the sum_of_digits variable\n        for digit in digits:\n            sum_of_digits += int(digit)\n        # append the sum of digits to the sum_of_digits_list\n        sum_of_digits_list.append(sum_of_digits)\n\n    # return the sum_of_digits_list\n    return sum_of_digits_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(int(d) for d in str(num))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        # convert the number to a string and split it into digits\n        digits = [int(digit) for digit in str(num)]\n        # sum up the digits and store the result in the `result` variable\n        result += sum(digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number in a list.\n    \"\"\"\n    total_sum = 0\n\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total_sum += digits_sum\n\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(digit) for num in nums for digit in str(num)])"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # initialize sum to zero\n    total_sum = 0\n    # loop through each number in the list\n    for num in nums:\n        # convert the number to a string and convert each character to an integer\n        num_digits = [int(digit) for digit in str(num)]\n        # sum up the digits and add the result to the total sum\n        total_sum += sum(num_digits)\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Concatenate the tuples to form a single tuple\n    combined_tup = test_tup1 + test_tup2\n    # Iterate over each element in the combined tuple and perform the bitwise xor operation\n    for i in range(len(combined_tup)):\n        combined_tup[i] = combined_tup[i] ^ combined_tup[i+1]\n    # Split the combined tuple back into two tuples\n    xor_tup1 = combined_tup[:len(test_tup1)]\n    xor_tup2 = combined_tup[len(test_tup1):]\n    # Return the two resulting tuples\n    return xor_tup1, xor_tup2"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0],\n              test_tup1[1] ^ test_tup2[1],\n              test_tup1[2] ^ test_tup2[2])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # get the length of the tuples\n    length = len(test_tup1)\n    # initialize the result tuple with all zeros\n    result_tup = tuple([0] * length)\n    # perform the bitwise xor operation on each pair of elements of the tuples\n    for i in range(length):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the variables\n    result = []\n    num1 = 0\n    num2 = 0\n\n    # Convert the tuples to integers\n    for i in range(len(test_tup1)):\n        num1 += test_tup1[i] << i\n        num2 += test_tup2[i] << i\n\n    # Perform the bitwise xor operation\n    while num2!= 0:\n        if num1 & num2!= 0:\n            result.append(1)\n        else:\n            result.append(0)\n        num1 = num1 ^ num2\n        num2 = num2 & (num2-1)\n\n    # Convert the result to a tuple\n    result_tup = tuple(result)\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    for i in range(len(test_tup1)):\n        xor_result |= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(bin(int(i) ^ int(j))[2:].zfill(32) for i, j in zip(test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple(map(lambda x, y: x ^ y, test_tup1, test_tup2))\n    return result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq = {}\n    for item in test_list:\n        if (item,) in freq:\n            freq[(item,)] += 1\n        else:\n            freq[(item,)] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n    # Iterate over each element in the list\n    for element in test_list:\n        # If the element is a tuple, add it to the set of unique tuples\n        if isinstance(element, tuple):\n            unique_tuples.add(element)\n    # Return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate through the list and add each unique tuple to the set\n    for item in test_list:\n        unique_tuples.add(tuple(item))\n\n    # Return the length of the set (i.e., the number of unique tuples)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    \n    # Loop through each element in the list\n    for element in test_list:\n        # Convert each element to a tuple and add it to the dictionary\n        if tuple(element) in freq_dict:\n            freq_dict[tuple(element)] += 1\n        else:\n            freq_dict[tuple(element)] = 1\n    \n    # Return the number of unique tuples\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create a dictionary to store the frequency of tuples\n    freq_dict = {}\n    # loop through the list and add each unique tuple to the dictionary\n    for tup in test_list:\n        if tup not in freq_dict:\n            freq_dict[tup] = 1\n        else:\n            freq_dict[tup] += 1\n    # return the number of unique tuples in the dictionary\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a set to store unique tuples\n    unique_tuples = set()\n\n    # Iterate through each tuple in the list\n    for tup in test_list:\n        # Add the tuple to the set if it's not already there\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n\n    # Return the size of the set, which is the number of unique tuples\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty list to store the resultant tuple\n    result = []\n    \n    # loop through both tuples and add their elements at each index\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n        \n    # return the resultant tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # Use zip() function to iterate over the two tuples and add the elements\n    # using index as the key\n    result_tup = tuple(zip(test_tup1, test_tup2, range(len(test_tup1))))\n\n    # Use a list comprehension to add the elements with the index as the key\n    # and return the resultant tuple\n    return tuple(sum(x) for i, x in enumerate(result_tup))"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    new_tup = []\n    for i in range(len(test_tup1)):\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        if isinstance(tup1_elem, tuple) and isinstance(tup2_elem, tuple):\n            # recursively call the function for nested tuples\n            new_tup.append(add_nested_tuples(tup1_elem, tup2_elem))\n        else:\n            new_tup.append(tup1_elem + tup2_elem)\n    return tuple(new_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # initialize empty list to store the resultant tuples\n    result_list = []\n    # check if the lengths of both tuples are equal\n    if len(test_tup1) == len(test_tup2):\n        # iterate through both tuples using list slicing and indexing\n        for i in range(len(test_tup1)):\n            # add the corresponding elements of the tuples and append it to the resultant list\n            result_list.append(test_tup1[i] + test_tup2[i])\n    else:\n        print(\"The two tuples should have equal lengths\")\n    # return the resultant list of tuples\n    return result_list"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initializing an empty list to store the result\n    result = []\n    # iterating through the first tuple\n    for i in range(len(test_tup1)):\n        # iterating through the second tuple\n        for j in range(len(test_tup2[0])):\n            # adding the elements at the corresponding index\n            result.append(test_tup1[i] + test_tup2[j][i])\n    # returning the final result as a tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            test_tup1[i] = tuple(map(lambda x, y: x + y, test_tup1[i], test_tup2[i][j]))\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        tup = (test_tup1[i][0] + test_tup2[i][0], test_tup1[i][1] + test_tup2[i][1])\n        result.append(tup)\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        sub_result = []\n        for j in range(len(test_tup1[i])):\n            sub_result.append(test_tup1[i][j] + test_tup2[i][j])\n        result.append(sub_result)\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a,b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    \"\"\"\n    This function takes two numbers as inputs and returns the minimum of those two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1: \n        if element in tuplex: \n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        print(\"Element found\")\n    else: \n        print(\"Element not found\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    for tup in tuple1:\n        if tup in tuplex:\n            print(\"Element found\")\n            break\n    else:\n        print(\"Element not found\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2!= 0"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"The parity of the given number is even.\"\n    else:\n        return \"The parity of the given number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    \n    # Get the binary representation of x\n    bin_rep = bin(x)[2:]\n\n    # Calculate the parity of the binary representation\n    parity = 0\n    for i in range(len(bin_rep)):\n        if bin_rep[i] == '0':\n            parity += 0\n        else:\n            parity += 1\n\n    # Check if the parity is odd or even and return the result\n    if parity % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    \"\"\"\n    This function takes an integer as input and returns True if it is odd, False otherwise.\n    \"\"\"\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    This function takes in an integer x and returns True if x is odd and False otherwise.\n    '''\n\n    if x % 2 == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # Check if the number is odd or even\n    if x % 2 == 0:\n        # The number is even\n        return \"Even\"\n    else:\n        # The number is odd\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # initialize the parity variable to 0\n    parity = 0\n    \n    # loop through the digits of the number\n    for i in range(len(str(x))):\n        # calculate the parity of the current digit\n        digit_parity = (int(str(x)[i]) % 2)\n        \n        # add the parity of the current digit to the parity variable\n        parity += digit_parity\n        \n        # if the parity becomes odd, break out of the loop\n        if parity % 2!= 0:\n            break\n    \n    # return True if the parity is odd, else False\n    return parity % 2!= 0"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the input number to a string\n    num_str = str(n)\n    \n    # iterate through the digits of the number\n    for i in range(len(num_str)-1):\n        # compare the current digit with the next digit\n        if int(num_str[i]) > int(num_str[i+1]):\n            # swap the digits\n            num_str[i], num_str[i+1] = num_str[i+1], num_str[i]\n            # break the loop\n            break\n    \n    # convert the string back to an integer\n    next_bigger = int(num_str)\n    \n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    # Initialize result string\n    result = \"\"\n    \n    # Loop through each digit in the input number\n    for digit in str(n):\n        # Add the original digit to the result string\n        result += digit\n        \n        # Check if the result is already a palindrome\n        if result == result[::-1]:\n            # If it is, break out of the loop\n            break\n        \n        # Otherwise, increment the digit by 1\n        digit += 1\n        \n        # Add the incremented digit to the result string\n        result += str(digit)\n    \n    # Return the result\n    return int(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    def next_bigger(num):\n        digits = [int(d) for d in str(num)]\n        max_digit = max(digits)\n        min_digit = min(digits)\n        if max_digit == min_digit:\n            return None\n        if max_digit < min_digit:\n            digits.remove(max_digit)\n            digits.append(min_digit)\n        elif min_digit < max_digit:\n            digits.remove(min_digit)\n            digits.append(max_digit)\n        return int(''.join(str(d) for d in digits))\n\n    if n == 1:\n        return 9\n    else:\n        return next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    new_num = ''\n    for digit in num:\n        new_num += str(int(digit) + 1)\n    return int(new_num)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    # Convert the number to a string\n    s = str(n)\n    # Initialize a string to store the next bigger number\n    next_bigger = ''\n    # Loop through each digit in the number\n    for digit in s:\n        # Calculate the position of the digit in the list of digits of the next bigger number\n        position = int(digit)\n        # If the digit is 9, we need to decrement the position by 1\n        if digit == '9':\n            position -= 1\n        # If the position is negative, we need to add the number of digits to the position to get a positive position\n        if position < 0:\n            position += len(s)\n        # Convert the position to a string and append it to the next_bigger string\n        next_bigger += str(position)\n    # Convert the next_bigger string to an integer and return it\n    return int(next_bigger)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    num = n\n    while True:\n        new_num = \"\"\n        for digit in str(num):\n            new_num = digit + new_num\n            if int(new_num) > n:\n                break\n        if new_num == \"\":\n            break\n        num = int(new_num)\n    return num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    def is_palindrome(num):\n        '''\n        Check if a given number is a palindrome.\n        '''\n        return str(num) == str(num)[::-1]\n\n    def is_next_bigger(num):\n        '''\n        Check if a given number is the next bigger number.\n        '''\n        digits = [int(digit) for digit in str(num)]\n        for i in range(len(digits)):\n            for j in range(i+1, len(digits)):\n                if digits[i] > digits[j]:\n                    return False\n        return True\n\n    def is_next_bigger_palindrome(num):\n        '''\n        Check if a given number is the next bigger palindrome.\n        '''\n        return is_next_bigger(num) and is_palindrome(num)\n\n    # Check if the given number is the next bigger palindrome.\n    if is_next_bigger_palindrome(n):\n        return n + 1\n\n    # Find the largest possible number with digits that are all smaller than the given number.\n    max_num = 10**(len(str(n))+1) - 1\n    for num in range(max_num, 0, -1):\n        if is_palindrome(num) and is_next_bigger(num):\n            return num\n\n    # If no such number exists, return the largest possible number.\n    return max_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the input number to a string\n    num_str = str(n)\n    # create an empty list to store the digits of the number\n    num_digits = []\n    # loop through each digit of the number and append it to the list\n    for digit in num_str:\n        num_digits.append(int(digit))\n    # reverse the order of the digits in the list\n    num_digits.reverse()\n    # convert the list of digits back to a string and add a '0' if the original number had a 1 digit number\n    if len(num_str) == 1:\n        num_str = '0' + str(num_str)\n    else:\n        num_str = str(num_digits[0])\n    # loop through the list of digits and append them to the new string in reverse order\n    for digit in num_digits:\n        num_str += str(digit)\n    # convert the new string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize an empty list to store the digits of the number\n    digits = []\n\n    # Convert the number to a string and split it into a list of digits\n    for digit in str(n):\n        digits.append(digit)\n\n    # Create a dictionary to store the mapping of digits to their position in the original number\n    mapping = {digit: i for i, digit in enumerate(digits)}\n\n    # Loop through the digits of the number from left to right\n    for i in range(len(digits) - 1, -1, -1):\n        # If the current digit has already been mapped to a position greater than its position in the original number,\n        # then we have found the next bigger number\n        if mapping[digits[i]] > mapping[digits[i + 1]]:\n            # Convert the original number to a string with the next bigger digits\n            new_num = \"\".join(sorted(str(n)))\n\n            # Convert the new string to an integer and return it\n            return int(new_num)\n\n    # If no next bigger number was found, return the original number\n    return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # check if the input number is 0 or 1\n    if n == 0 or n == 1:\n        return 1\n\n    # initialize variables to store the digits and the length of the number\n    digits = []\n    length = len(str(n))\n\n    # convert the number to a list of digits\n    for i in range(length):\n        digits.append(int(str(n)[i]))\n\n    # reverse the list of digits\n    digits.reverse()\n\n    # add 1 to the first digit of the reversed list\n    digits[0] += 1\n\n    # convert the list of digits back to a number and check if it is still a valid number\n    num = int(''.join(str(digit) for digit in digits))\n    if num > 0 and num <= 9 * (10 ** (length - 1)):\n        return num\n    else:\n        return rearrange_bigger(num)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n\n    # Iterate through the first array and update the frequency dictionary\n    for num in nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Iterate through the second array and add each element to the min heap if its frequency is less than k\n    for num in nums2:\n        if freq_dict[num] < k:\n            heapq.heappush(min_heap, (num, freq_dict[num]))\n\n    # Initialize the count variable to 0\n    count = 0\n\n    # Iterate through the min heap until k number of smallest pairs are found\n    while count < k:\n        # Get the smallest pair from the heap\n        pair = heapq.heappop(min_heap)\n\n        # If the second element of the pair is already in the min heap, remove it from the heap\n        if pair[1] < k:\n            heapq.heappush(min_heap, pair)\n\n        # Increment the count\n        count += 1\n\n    # Return the count of smallest pairs found\n    return count"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # sort the given array\n    nums1.sort()\n    nums2.sort()\n\n    # create a min heap of size k\n    min_heap = []\n\n    # initialize i and j as 0\n    i = j = 0\n\n    # loop till i < len(nums1) and j < len(nums2)\n    while i < len(nums1) and j < len(nums2):\n        # compare the first element of nums1 and second element of nums2\n        diff = nums1[i] - nums2[j]\n\n        # if the difference is less than or equal to the minimum difference found so far, add the pair to the min heap and increment i and j\n        if diff <= min_heap[0] or not min_heap:\n            heapq.heappush(min_heap, diff)\n            i += 1\n            j += 1\n\n        # else, if the difference is greater than the minimum difference found so far, remove the minimum difference from the heap and increment j only\n        else:\n            heapq.heappop(min_heap)\n            j += 1\n\n    # return the top k smallest differences from the heap\n    return [heapq.heappop(min_heap) for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the given arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize a min heap to store the pairs\n    pairs = []\n    heapq.heapify(pairs)\n\n    # Iterate over the arrays and find the pairs\n    i = j = 0\n    while len(pairs) < k:\n        # If nums1[i] is smaller, add a pair to the heap and increment i\n        if i < len(nums1) and (j == 0 or nums2[j-1] > nums1[i]):\n            heapq.heappush(pairs, (nums1[i], nums2[j]))\n            i += 1\n        # Otherwise, increment j\n        else:\n            j += 1\n\n    # Extract the k smallest pairs from the heap\n    result = []\n    while pairs:\n        pair = heapq.heappop(pairs)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    min_heap = []\n    \n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            diff = nums1[i] + nums2[j]\n            if diff == 0:\n                heapq.heappush(heap, (nums1[i], nums2[j]))\n                if len(heap) == k:\n                    break\n            elif diff < 0:\n                heapq.heappush(min_heap, (-diff, (i, j)))\n                if len(min_heap) == k:\n                    break\n                \n    result = []\n    while heap and min_heap:\n        diff, (i, j) = heapq.heappop(heap)\n        diff2, (m, n) = heapq.heappop(min_heap)\n        if diff + diff2 < 0:\n            heapq.heappush(heap, (-diff, (i, j)))\n        else:\n            result.append((nums1[i], nums2[j]))\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the smallest pairs\n    min_heap = []\n    \n    # Iterate through the first array and for each element, iterate through the second array\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the size of the min heap is less than k, then add the pair to the heap\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            # If the size of the min heap is equal to k, then check if the sum of the smallest elements in the heap is greater than the sum of the current pair\n            elif num1 + num2 > min_heap[0][0]:\n                # If the sum is greater, then pop the smallest element from the heap and push the current pair onto the heap\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n                \n    # Sort the min heap in ascending order\n    min_heap = sorted(min_heap, key=lambda x: x[0])\n    \n    # Return the k smallest pairs\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort the array\n    nums1.sort()\n    nums2.sort()\n\n    # Create a min heap for the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, -num)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the second array\n    for num in nums2:\n        # If the min heap is not empty and the current element is greater than the top element of the heap, add the current element to the result and remove the top element from the min heap\n        if min_heap and num > -heapq.heappop(min_heap):\n            result.append((num, -heapq.heappop(min_heap)))\n\n        # If the result list has k elements, stop iterating\n        if len(result) == k:\n            break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(heap) < k:\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            elif (num1 + num2) > heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (num1 + num2, (num1, num2)))\n    return [x[1] for x in heap]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    for num in nums2:\n        if num!= min_heap[0]:\n            heapq.heappush(min_heap, num)\n        if len(min_heap) > k:\n            heapq.heappop(min_heap)\n    return min_heap[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k\n    min_heap = []\n    \n    # Iterate through the first array\n    for num in nums1:\n        # Check if the size of the min heap is less than k\n        if len(min_heap) < k:\n            # Add the current number to the min heap\n            heapq.heappush(min_heap, num)\n        # If the size of the min heap is equal to k, compare the current number with the smallest number in the heap\n        else:\n            # If the current number is smaller than the smallest number in the heap, remove the smallest number and add the current number to the heap\n            if num < min_heap[0]:\n                heapq.heappop(min_heap)\n                heapq.heappush(min_heap, num)\n    \n    # Iterate through the second array\n    for num in nums2:\n        # Compare the current number with the smallest number in the heap\n        if num < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, num)\n    \n    # Return the k smallest pairs\n    return min_heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    # Combine the two arrays into one list\n    nums = nums1 + nums2\n    # Sort the combined list\n    nums.sort()\n    # Create a heap to store the smallest k numbers\n    for i in range(k):\n        heapq.heappush(heap, nums[i])\n    # Create a set to store the pairs of numbers\n    pairs = set()\n    # Iterate through the sorted list and add the smallest k numbers to the heap\n    for num in nums[k:]:\n        if heapq.heappushpop(heap) == num:\n            pairs.add((num, heapq.heappop(heap)))\n    # Return the pairs as a list\n    return list(pairs)"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum product and the minimum pair\n    min_product = float('inf')\n    min_pair = None\n    \n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples and check if it is smaller than the current minimum\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n                min_pair = (list1[i], list1[j])\n    \n    # Return the minimum pair and the minimum product\n    return min_pair, min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product as 1\n    min_product = 1\n\n    # iterate through each pair of tuples in the list\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the pairs of elements in the tuple and store it in a variable\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n\n            # check if the current product is less than the current minimum product\n            if product < min_product:\n                # if it is, update the minimum product\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product and the maximum product\n    min_product = float('inf')\n    max_product = float('-inf')\n\n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            # Calculate the product of the tuple elements\n            product = list1[i][0] * list1[j][1]\n\n            # Update the minimum product and maximum product if necessary\n            if product < min_product:\n                min_product = product\n            if product > max_product:\n                max_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    This function finds the minimum product of pairs of tuples within a given list.\n    '''\n    min_prod = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            prod = list1[i][0] * list1[j][1]\n            if prod < min_prod:\n                min_prod = prod\n    return min_prod"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of a pair of tuples from a given list of tuples.\n\n    Args:\n    list1 (list): List of tuples\n\n    Returns:\n    float: The minimum product of pairs of tuples from the given list\n    \"\"\"\n\n    # Initialize variables to store the minimum and maximum values of each tuple\n    min_tuple = [1e10] * len(list1[0])\n    max_tuple = [0] * len(list1[0])\n\n    # Loop through the list of tuples\n    for tup in list1:\n        # Loop through each element of the tuple and update the minimum and maximum values\n        for i in range(len(tup)):\n            if tup[i] < min_tuple[i]:\n                min_tuple[i] = tup[i]\n            if tup[i] > max_tuple[i]:\n                max_tuple[i] = tup[i]\n\n    # Calculate the minimum and maximum products of the tuples\n    min_product = float('inf')\n    for i in range(len(min_tuple)):\n        min_product = min(min_product, min_tuple[i] * max_tuple[i])\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = float('inf')\n    current_product = 1\n    \n    # Loop through each tuple in the list\n    for tup in list1:\n        # Calculate the product of the tuple elements\n        product = tup[0] * tup[1]\n        \n        # Check if the product is smaller than the current minimum\n        if product < min_product:\n            min_product = product\n            current_product = product\n        \n        # Update the current product\n        else:\n            current_product *= product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    min_product = 1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Sort the list of tuples in ascending order based on the first element of the tuple\n    sorted_list = sorted(list1, key=lambda x: x[0])\n    # Initialize variables to store the minimum and maximum values\n    minimum = sorted_list[0][1]\n    maximum = sorted_list[-1][1]\n    # Loop through the sorted list and calculate the product of the minimum and maximum values\n    for i in range(len(sorted_list)):\n        product = sorted_list[i][1] * sorted_list[i+1][1]\n        if product < minimum:\n            minimum = product\n        if product > maximum:\n            maximum = product\n    # Return the minimum product\n    return minimum"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first value in the list\n    min_val = listval[0]\n    # loop through the rest of the list\n    for val in listval[1:]:\n        # check if the current value is less than the minimum value\n        if val < min_val:\n            # update the minimum value to the current value\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        min_val = min_val(listval[1:])\n        return min(listval[0], min_val)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        return min(listval)\n    elif isinstance(listval[0], float):\n        return min(listval)\n    elif isinstance(listval[0], str):\n        return min(listval)\n    else:\n        raise ValueError(\"Invalid data type\")"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize the minimum value to the first element of the list\n    min_val = listval[0]\n    # iterate over the remaining elements of the list\n    for i in range(1, len(listval)):\n        # if the current element is less than the minimum value, update the minimum value\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list as input and returns the minimum value in the list.\n    \"\"\"\n    # Initialize a variable to store the minimum value\n    min_val = listval[0]\n    # Iterate over the list and compare each element with the current minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    # Return the minimum value\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    # Check if list is empty\n    if not listval:\n        return None\n    \n    # Initialize minimum value to the first element of the list\n    min_val = listval[0]\n    \n    # Loop through the list and compare each element to the minimum value\n    for val in listval:\n        if val < min_val:\n            min_val = val\n    \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    else:\n        min_val = listval[0]\n        for i in listval[1:]:\n            if i < min_val:\n                min_val = i\n        return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into individual words\n    words = word.split('_')\n    # Convert each word to camel case\n    camel_case = [word.capitalize() for word in words]\n    # Join the camel case words back together\n    return ''.join(camel_case)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    camel_case = re.sub(r'([A-Z])', r'_\\1', word)\n    return camel_case.lstrip('_')"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the given word to snake case\n    snake_case_word = re.sub('([A-Z])', r'_\\1', word).lower()\n    # Split the snake case word into a list of words\n    words = snake_case_word.split('_')\n    # Convert the first word to lowercase\n    words[0] = words[0].lower()\n    # Join the words back into a camel case string\n    camel_case_word = ''.join(words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words based on underscores\n    words = re.findall(r'_\\w', word)\n    # Capitalize the first letter of each word and join them with an underscore\n    camel_case_word = ''.join([w.capitalize() for w in words])\n    # Add an initial underscore to the first letter of the camel case word\n    return '_' + camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # split the word into words based on underscores\n    words = word.split('_')\n    # capitalize the first letter of each word except the first word\n    camel_word = ''.join([word.capitalize() for word in words[1:]])\n    # append the first letter of the first word to the camel word\n    camel_word = words[0] + camel_word\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?!^)[A-Z]+(?=[A-Z][a-z]+$)|(?<=^)[a-z]+(?=[A-Z])'\n    return re.sub(pattern, lambda x: '_' + x.group(0).lower(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert snake case to camel case by converting the first letter to lower case and the rest to upper case\n    return re.sub('([A-Z]+)([A-Z][a-z]+)', r'\\1_\\2', word).lower()"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using underscores as delimiter\n    words = re.findall(r'[A-Za-z]+', word)\n    # Convert the first letter of each word to upper case and the rest to lower case\n    camel_case = ''.join(w.capitalize() for w in words)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert snake case to camel case\n    words = re.findall(r'(\\w+)', word)\n    camel_case_word = ''.join(word.capitalize() for word in words)\n    return camel_case_word"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = []\n    for num in l:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    if n >= 1 and n <= len(list1):\n        return list1[n-1]\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # if the list is empty, return an empty list\n    if not list1:\n        return []\n    # get the length of the list\n    length = len(list1)\n    # if n is greater than or equal to the length of the list, return an empty list\n    if n >= length:\n        return []\n    # if n is negative, return an empty list\n    elif n < 0:\n        return []\n    # if n is zero, return the first element of the list\n    elif n == 0:\n        return list1[0]\n    # if n is greater than zero, iterate through the list and return the nth element\n    else:\n        for i in range(n):\n            list1 = list1[1:]\n        return list1[0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Convert the list of tuples into a list of lists\n    list2 = [list(i) for i in list1]\n\n    # Extract the nth element from the list of lists\n    return list2[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function extracts the nth element from a given list of tuples.\n    \"\"\"\n    if not isinstance(lst, list) or not isinstance(n, int):\n        return \"Invalid input. Please provide a list of tuples and a valid integer as the second argument.\"\n    else:\n        try:\n            return lst[n-1]\n        except IndexError:\n            return \"Invalid index. Please provide an index between 1 and the length of the list.\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n == 1:\n        return list1[0][1]\n    else:\n        return extract_nth_element(list1[1:], n-1)"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the given list is empty or not\n    if len(list1) == 0:\n        return \"List is empty\"\n    # Extract the nth element from the list\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the list is empty\n    if len(list1) == 0:\n        return None\n    # check if n is valid\n    if n < 1 or n > len(list1):\n        return None\n    # loop through the list and extract the nth element\n    for i, tup in enumerate(list1):\n        if i == n - 1:\n            return tup[0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the given list is not empty\n    if not list1:\n        return None\n    # check if the given list of tuples is empty\n    elif not list1[0]:\n        return None\n    else:\n        # check if the nth element is out of range\n        if n > len(list1) or n < 1:\n            return None\n        # return the nth element from the list of tuples\n        else:\n            return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Set a set to store the values of list1\n    set1 = set(list1)\n\n    # Check if any value of list2 exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no value in list2 exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        return False\n\n    # Create a set to store the values of list1\n    set1 = set(list1)\n\n    # Iterate through list2 and check if each value exists in set1\n    for value in list2:\n        if value in set1:\n            return True\n\n    # If no value exists in set1, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    for i in list1:\n        if i in list2:\n            return True\n\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input, and returns True if there is any value in list1 that exists in list2, and False otherwise.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function checks whether any value in the first sequence exists in the second sequence or not.\n    '''\n\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    # Sort the given array in ascending order\n    arr.sort()\n    n = len(arr)\n    \n    # Initialize the maximum product and the maximum pair\n    max_product = arr[n-1] * arr[n-2]\n    max_pair = [arr[n-1], arr[n-2]]\n    \n    # Loop through the array starting from the second element\n    for i in range(1, n-1):\n        # Update the maximum product and the maximum pair if the current product is greater\n        current_product = arr[i] * arr[n-1]\n        if current_product > max_product:\n            max_product = current_product\n            max_pair = [arr[i], arr[n-1]]\n    \n    # Return the maximum pair\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n    max1 = max2 = arr[0]\n    for i in range(1, len(arr)):\n        temp1 = max1\n        max1 = max(max1*arr[i], max2*arr[i])\n        max2 = max(temp1*arr[i], max2*arr[i])\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        elif arr[i] < min1:\n            min2 = min1\n            min1 = arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1 * max2, min1 * min2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with the highest product.\n    \"\"\"\n    max_product = 0\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    max_pair = arr[0]*arr[n-1]\n    min_pair = arr[n-1]*arr[0]\n    max_so_far = arr[n-1]\n    min_so_far = arr[0]\n\n    for i in range(n-2):\n        if arr[i] * arr[i+1] > max_so_far * min_so_far:\n            max_pair = max_so_far * min_so_far\n            min_pair = arr[i+1] * arr[i]\n            max_so_far = arr[i+1]\n        elif arr[i] * arr[i+1] < max_so_far * min_so_far:\n            max_pair = arr[i+1] * arr[i]\n            min_pair = max_so_far * min_so_far\n            max_so_far = arr[i]\n        else:\n            continue\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = float('-inf')\n    max_pair = None\n    min_product = float('inf')\n    min_pair = None\n    \n    # iterate over all pairs of integers in the array\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            # calculate the product of the pair\n            pair_product = arr[i]*arr[j]\n            # update the maximum product seen so far\n            if pair_product > max_product:\n                max_product = pair_product\n                max_pair = (arr[i], arr[j])\n            # update the minimum product seen so far\n            elif pair_product < min_product:\n                min_product = pair_product\n                min_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    max_product = -1\n    max_pair = [-1, -1]\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = [arr[i], arr[j]]\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1, max2, min1, min2 = arr[0], arr[0], arr[0], arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max1:\n            max2, max1 = max1, arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n        if arr[i] < min1:\n            min2, min1 = min1, arr[i]\n        elif arr[i] < min2:\n            min2 = arr[i]\n    return max(max1*max2, min1*min2)\n"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    max1 = max2 = float('-inf')\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max1*max2"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_element is None:\n                    common_element = Input[i]\n                elif len(Input[i]) > len(Input[j]):\n                    common_element = Input[i]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    # Initialize empty list to store common elements\n    common_elements = []\n    \n    # Iterate through each tuple in the list\n    for tup in Input:\n        # Check if the first element of the tuple is already in the list\n        if tup[0] not in common_elements:\n            # If it's not, add it to the list\n            common_elements.append(tup[0])\n    \n    # Return the list of common elements\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create an empty dictionary to store the count of each element\n    count = {}\n    # iterate over the input list of tuples\n    for tup in Input:\n        # get the first element of the tuple\n        element = tup[0]\n        # if the element is in the dictionary, increment its count\n        if element in count:\n            count[element] += 1\n        # otherwise, add the element to the dictionary with a count of 1\n        else:\n            count[element] = 1\n    # create a new list to store the common elements\n    common = []\n    # iterate over the dictionary and add elements with a count of 2 or more to the new list\n    for key, value in count.items():\n        if value >= 2:\n            common.append(key)\n    # return the list of common elements\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # iterate over all tuples in input list\n    for tup in Input:\n        # if first element of the tuple is common in all tuples, return that first element\n        if tup[0] in [t[0] for t in Input]:\n            return tup[0]"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    '''\n    This function takes a list of tuples as input and returns a list containing tuples with common first elements.\n    '''\n    result = []\n    common_elements = []\n    \n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            common = True\n            for k in Input[i]:\n                if k not in Input[j]:\n                    common = False\n                    break\n            if common:\n                common_elements.append(tuple(Input[i]))\n                result.append(tuple(Input[j]))\n    \n    return result, common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common_elements.append(i[0])\n    return common_elements\n"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    common_first = []\n    for item in Input:\n        first = item[0]\n        if first not in common_first:\n            common_first.append(first)\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first_element = []\n    for item in Input:\n        if item[0] not in first_element:\n            first_element.append(item[0])\n    return first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    result = []\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                result.append(Input[i])\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for i in Input:\n        for j in Input:\n            if i[0] == j[0]:\n                common_elements.append(i[0])\n    return common_elements\n\nInput = [(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]\nprint(group_tuples(Input))"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        return None\n    else:\n        max_length = 0\n        max_elem = None\n        for elem in lst:\n            if len(elem) > max_length:\n                max_length = len(elem)\n                max_elem = elem\n        return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n\n    max_length = 0\n    max_element = \"\"\n\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    This function takes a list as input and returns the element of the list having the maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    for i in lst:\n        length = len(i)\n        if length > max_length:\n            max_length = length\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst):\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize max_length to 0\n    max_length = 0\n    # initialize max_element to None\n    max_element = None\n    # loop through the list\n    for i in lst:\n        # if current element length is greater than max_length, update max_length and max_element\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    # return max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    \n    for elem in lst: \n        if len(str(elem)) > max_len: \n            max_len = len(str(elem)) \n            max_elem = elem\n            \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the element of a list having maximum length.\n    \"\"\"\n    max_len = 0\n    max_element = None\n    \n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_element = i\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = None\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    \n    # Iterate through the list and update the maximum length and element\n    for i in lst:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    \n    # Return the maximum element\n    return max_element"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(lst):\n    total_sum = 0\n    for num in lst:\n        total_sum += round(num)\n    print(total_sum * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = sum([round(x) for x in list1])\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        rounded_num = round(num)\n        total_sum += rounded_num\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    \"\"\"\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded = round(num)\n        total += rounded\n        print(rounded)\n    print(\"The total sum is:\", total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    \n    # loop from 1 to n\n    for i in range(1, n+1):\n        # check if the number is even\n        if i % 2 == 0:\n            # calculate the cube of the number\n            cube = i ** 3\n            # add the cube to the sum of cubes\n            cube_sum += cube\n    \n    # return the sum of cubes of even natural numbers\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(2, n+1, 2):\n        sum_cubes += i**3\n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i ** 3\n    return even_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize the cube sum variable\n    cube_sum = 0\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # cube the even natural number and add it to the cube sum variable\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 2\n    while i <= n:\n        sum += i**3\n        i += 2\n    return sum\n\nprint(cube_Sum(10)) # Output: 18980"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize a variable to store the sum of cubes\n    sum_of_cubes = 0\n\n    # Loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n\n        # Calculate the cube of the even number\n        cube_of_i = i*i*i\n\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube_of_i\n\n    # Return the sum of cubes\n    return sum_of_cubes"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = ''\n    for item in test_tup:\n        result += str(item) + delimiter\n    result = result[:-1]  # Removing the last delimiter\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # initialize an empty string\n    result = \"\"\n    # loop through each element of the tuple\n    for i in test_tup:\n        # if the element is a string, add it to the result string\n        if isinstance(i, str):\n            result += i\n        # if the element is not a string, convert it to a string and add it to the result string\n        else:\n            result += str(i)\n    # return the concatenated string\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '_'.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \",\"\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" - \"\n    concatenated_tuple = delimiter.join(str(elem) for elem in test_tup)\n    return concatenated_tuple"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_cubes = sum_cubes/n\n    return average_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    \n    average = total/n\n    \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_of_cubes = 0  \n    for i in range(1, n+1):  \n        sum_of_cubes += i**3  \n    average = sum_of_cubes/n  \n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    sum_cubes = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        count += 1\n\n    average_cube = sum_cubes/count\n\n    return average_cube"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0  \n    for i in range(n):  \n        sum += i**3  \n    return sum / n  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    sum_of_cubes = 0\n    count = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        count += 1\n    return sum_of_cubes / count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple[0]) - 1 # get the last index of the first string\n    extracted_rear = []\n    for string in test_tuple:\n        extracted_rear.append(string[rear_index])\n    return extracted_rear"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index_tuple = []\n    for string in test_tuple:\n        rear_index_tuple.append(string[-1])\n    return rear_index_tuple"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    return [x[-1] for x in test_tuple]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_element = string[-1]\n        rear_elements.append(rear_element)\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [test_tuple[i][-1] for i in range(len(test_tuple))]"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_tuple = []\n    for string in test_tuple:\n        rear_tuple.append(string[-1])\n    return rear_tuple"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    \n    count = 0\n    \n    for i in list1:\n        if x in i:\n            count += 1\n    \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function counts the number of sublists containing a particular element.\n    '''\n\n    # Initialize the count variable to zero\n    count = 0\n\n    # Iterate through each sublist in the list\n    for sublist in list1:\n        # If the sublist contains the element, increment the count\n        if x in sublist:\n            count += 1\n\n    # Return the final count value\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(lst, x):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Find all occurrences of the pattern in the input date string\n    matches = re.findall(pattern, dt)\n\n    # If there are no matches, return the input date string as-is\n    if not matches:\n        return dt\n\n    # Extract the year, month, and day from the matched groups\n    year, month, day = matches[0]\n\n    # Reformat the date string using the desired format\n    new_dt = day + '-' + month + '-' + year\n\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression pattern to match yyyy-mm-dd format date\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Match the pattern in the date string and extract the values\n    year, month, day = re.match(pattern, dt).groups()\n    # Convert the date format from yyyy-mm-dd to dd-mm-yyyy\n    return f'{day}-{month}-{year}'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    match = pattern.search(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    # define a regular expression pattern to match yyyy-mm-dd format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # use re.sub() to replace the first capture group with the second capture group,\n    # which represents the new date format\n    return re.sub(pattern, r'\\2-\\1-\\3', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Convert yyyy-mm-dd format to dd-mm-yyyy format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    result = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(?<!\\d)-(?<!\\d)'\n    result = re.sub(pattern, '-', dt)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # replace - with / to convert from yyyy-mm-dd format to dd-mm-yyyy format\n    dt = re.sub('-', '/', dt)\n    # split the date string into year, month, and day\n    year, month, day = dt.split('/')\n    # convert the year, month, and day to the desired format\n    formatted_date = day + '-' + month + '-' + year\n    return formatted_date"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'([0-9]{4})-([0-9]{2})-([0-9]{2})')\n    match = pattern.match(dt)\n    if match:\n        year, month, day = match.groups()\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for matching the date format\n    pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n\n    # Match the pattern in the given date string\n    matches = pattern.match(dt)\n\n    # If the pattern is matched, extract the groups and convert them to the desired format\n    if matches:\n        year, month, day = int(matches.group(1)), int(matches.group(2)), int(matches.group(3))\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    # Regular expression to match date format (yyyy-mm-dd)\n    date_pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Pattern to replace with date in the desired format (dd-mm-yyyy)\n    replacement_pattern = r'\\3-\\2-\\1'\n    # Replace the date format with the desired format\n    new_date = re.sub(date_pattern, replacement_pattern, dt)\n    return new_date"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # Get the length of the array\n    n = len(my_list)\n\n    # Set the increment value\n    inc = n // 2\n\n    while inc > 0:\n        # Iterate through the array with the current increment value\n        for i in range(inc, n):\n            # Compare the current element with the previous elements in the array\n            j = i\n            while j >= inc and my_list[j] < my_list[j - inc]:\n                # Swap the elements if they are in the wrong order\n                my_list[j], my_list[j - inc] = my_list[j - inc], my_list[j]\n                j -= inc\n            # If the element is already in its correct position, increment the index\n            if j == i:\n                j += inc\n\n        # Decrease the increment value\n        inc //= 2\n\n    # Return the sorted array\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the size of the array\n    n = len(my_list)\n\n    # Define the increment value for each sub-array\n    inc = n // 2\n\n    # Perform the insertion sort on the sub-array\n    while inc > 0:\n        for i in range(inc, n):\n            temp = my_list[i]\n            j = i\n            while j >= inc and my_list[j - inc] > temp:\n                my_list[j] = my_list[j - inc]\n                j -= inc\n            my_list[j] = temp\n        inc //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # calculate gap for each increment of size\n    gap = n // 2\n    # start of the array\n    start = 0\n    while gap > 0:\n        # move the start pointer to the correct position\n        for i in range(start, n):\n            j = i\n            # check if element is in the correct position\n            while j >= start and my_list[j] < my_list[j - gap]:\n                # swap elements\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # decrease gap by half\n        gap //= 2\n        # update start pointer\n        start += gap"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n\n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = key\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same length.')\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have the same length!\")\n        return\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize a new empty list to store the elementwise and tuples\n    result_list = []\n\n    # Loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # Extract the corresponding element from both tuples\n        tup1_elem = test_tup1[i]\n        tup2_elem = test_tup2[i]\n        # Calculate the elementwise and of the corresponding elements\n        and_elem = tup1_elem & tup2_elem\n        # Append the elementwise and to the result list\n        result_list.append(and_elem)\n\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    \"\"\"\n    # Check if the two input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    \n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = (0,) * len(test_tup1)\n    \n    # Extract the elementwise and tuples from the input tuples and store them in the result tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = (test_tup1[i] & test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # check if the input tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two input tuples must have the same length!\")\n        return\n    # extract the elementwise and tuples\n    and_tup = tuple(map(lambda x, y: x & y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result_list = []\n\n    for i in range(len(test_tup1)):\n        result_list.append((test_tup1[i] & test_tup2[i]))\n\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples do not have the same length.\")\n        return None\n    else:\n        and_tup = tuple(x & y for x, y in zip(test_tup1, test_tup2))\n        return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Check if the input tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The input tuples must have equal lengths.\")\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_list = []\n\n    # Iterate through each element in the input tuples\n    for i in range(len(test_tup1)):\n        # Extract the corresponding elements from the input tuples and store in separate variables\n        x = test_tup1[i]\n        y = test_tup2[i]\n\n        # Perform the elementwise and operation on the extracted elements and store the result in a new variable\n        and_value = x & y\n\n        # Add the new variable to the and_list\n        and_list.append(and_value)\n\n    # Return the and_list as a tuple\n    return tuple(and_list)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes in three parameters a, b, and c, and returns the value of the directrix of a parabola.\n    \"\"\"\n    disc = b**2 - 4*a*c\n    if disc < 0:\n        print(\"The equation of the parabola has no real roots.\")\n        return None\n    else:\n        root1 = (-b + disc**0.5)/(2*a)\n        root2 = (-b - disc**0.5)/(2*a)\n        print(\"The directrix of the parabola is:\", root1, \"and\", root2)\n        return root1 if root1**2 < root2**2 else root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is real and non-zero\n    if disc > 0:\n        \n        # Calculate the roots of the discriminant\n        root1 = (-b + math.sqrt(disc)) / (2*a)\n        root2 = (-b - math.sqrt(disc)) / (2*a)\n        \n        # Sort the roots in ascending order\n        roots = sorted([root1, root2])\n        \n        # Return the directrix\n        return roots[0]\n    \n    # If the discriminant is zero, return the point where y = 0\n    elif disc == 0:\n        return -b / (2*a)\n    \n    # If the discriminant is negative, there is no real root and the directrix is imaginary\n    else:\n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return \"There is no directrix for this parabola.\"\n    elif b == 0:\n        if c < 0:\n            return \"The directrix is equal to x.\"\n        else:\n            return \"The directrix is negative infinity.\"\n    else:\n        if c**2 - 4*a*b < 0:\n            return \"There is no real root for this parabola.\"\n        else:\n            x1 = (-b + (c**2 - 4*a*b)**0.5)/(2*a)\n            x2 = (-b - (c**2 - 4*a*b)**0.5)/(2*a)\n            return \"The directrix(es) are x1 = %.2f and x2 = %.2f.\" % (x1, x2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n\n    :param a: First coefficient of the polynomial equation.\n    :type a: float\n    :param b: Second coefficient of the polynomial equation.\n    :type b: float\n    :param c: Constant term of the polynomial equation.\n    :type c: float\n    :return: The directrix of the parabola.\n    :rtype: float\n    \"\"\"\n    discriminant = b ** 2 - 4 * a * c\n    if discriminant < 0:\n        raise ValueError(\"The parabola has no real roots.\")\n    else:\n        root1 = (-b + discriminant ** 0.5) / (2 * a)\n        root2 = (-b - discriminant ** 0.5) / (2 * a)\n        return root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of the first order term\n    b (float): Coefficient of the second order term\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola.\n    \"\"\"\n\n    # Calculate the discriminant\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is positive\n    if discriminant > 0:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Return the root closest to the origin\n        return root1 if root1**2 < root2**2 else root2\n\n    # If the discriminant is negative, the parabola has two real roots\n    elif discriminant < 0:\n        # Calculate the two roots\n        root1 = (-b + discriminant**0.5) / (2*a)\n        root2 = (-b - discriminant**0.5) / (2*a)\n\n        # Return the two roots\n        return root1, root2\n\n    # If the discriminant is zero, the parabola has only one real root\n    else:\n        # Calculate the root\n        root = -b / (2*a)\n\n        # Return the root\n        return root"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        return root1, root2\n    else:\n        print(\"The parabola does not have a root.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # calculate the discriminant\n    discriminant = b**2 - 4*a*c\n    \n    # check if the discriminant is positive or negative\n    if discriminant > 0: \n        # calculate the directrix\n        directrix = (-b + (discriminant**0.5))/(2*a)\n        \n    elif discriminant == 0: \n        # calculate the directrix\n        directrix = -b/(2*a)\n        \n    else: \n        # the discriminant is negative\n        print(\"The discriminant is negative. The directrix cannot be found.\")\n        directrix = None\n        \n    return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    # Finding the determinant of the 2x2 matrix\n    det = b**2 - 4*a*c\n    \n    # If the determinant is positive, then the directrix lies on the line y = x^2\n    if det > 0:\n        x = (-b + det**(1/2))/(2*a)\n        y = x**2\n    # If the determinant is negative, then the directrix lies on the line y = -x^2\n    elif det < 0:\n        x = (-b - det**(1/2))/(2*a)\n        y = -x**2\n    # If the determinant is zero, then the directrix lies on two lines (y = -x^2 or y = x^2)\n    else:\n        x1 = (-b)/(2*a)\n        y1 = -x1**2\n        x2 = (b)/(2*a)\n        y2 = x2**2\n        return x1, y1, x2, y2\n    \n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        root1 = (-b + discriminant**0.5)/(2*a)\n        root2 = (-b - discriminant**0.5)/(2*a)\n        print('The directrix of the parabola is between {} and {}'.format(root1, root2))\n    elif discriminant == 0:\n        root = -b/(2*a)\n        print('The directrix of the parabola is {}'.format(root))\n    else:\n        print('The parabola has no real roots.')"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return None\n    else:\n        return (-b + delta ** 0.5) / (2 * a)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Check if both lists are empty\n    if not list1 and not list2:\n        return False\n\n    # Check if at least one of the lists is empty\n    if not list1 or not list2:\n        return True\n\n    # Convert the lists to sets to remove duplicates\n    set1 = set(list1)\n    set2 = set(list2)\n\n    # Check if the intersection of the sets is not empty\n    return bool(set1.intersection(set2))"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if not list1 or not list2:\n        return False\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists as input and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    \n    # Calculate the length of the trapezium base1 and base2\n    trap_base = base1 + base2\n    \n    # Calculate the area of the trapezium using Heron's formula\n    trap_area = (trap_base * height) / 2\n    \n    # Calculate the length of the base and the length of the side opposite the median\n    side_opposite_median = height - half_height\n    side_opposite_median_length = trap_base / 2\n    \n    # Calculate the length of the median using the formula for the length of a trapezium\n    trap_median_length = (side_opposite_median + side_opposite_median_length) / 2\n    \n    # Return the length of the median\n    return trap_median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of the trapezium using Heron's formula\n    a = base1 + base2\n    b = height / 2\n    c = a + b\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Calculate the length of the smaller trapezium to get the median length\n    smaller_trapezium_length = a - b\n\n    # Calculate the median length of the trapezium\n    median_length = (smaller_trapezium_length + area) / 2\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    # find the two shorter edges\n    shorter_edge = 0.5 * (base1 + base2)\n    \n    # find the longer edge\n    longer_edge = base1 + base2 - shorter_edge\n    \n    # find the median length of the trapezium\n    median = 0.5 * (shorter_edge + longer_edge)\n    \n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the lengths of the trapezium sides\n    side1 = 0.5 * base1\n    side2 = 0.5 * base2\n    # Calculate the base of the trapezium\n    base = side1 + side2\n    # Calculate the area of the trapezium\n    area = 0.5 * base * height\n    # Calculate the height of the base\n    base_height = area ** 0.5\n    # Calculate the length of the base\n    base_length = 0.5 * side1 + 0.5 * side2\n    # Calculate the length of the trapezium\n    trapezium_length = base_length + 0.5 * base_height\n    # Calculate the area of the trapezium\n    trapezium_area = trapezium_length * base_height\n    # Calculate the median length of the trapezium\n    median = trapezium_area / (trapezium_length + 0.5 * base_height)\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the length of each half of the trapezium\n    half_height = height / 2\n\n    # Calculate the lengths of the two halves of the trapezium\n    h1 = base1 + base2\n    h2 = height - h1\n\n    # Sort the lengths of the two halves of the trapezium\n    h1_sorted = sorted([h1, h2])\n\n    # Calculate the lengths of the three halves of the trapezium\n    h3 = h1_sorted[0]\n    h4 = h1_sorted[1]\n\n    # Calculate the length of the trapezium\n    trapezium = (h1 + h3 + h2 + h4) / 2\n\n    # Return the median length of the trapezium\n    return trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the areas of the trapezium\n    area1 = 0.5 * base1 * height\n    area2 = 0.5 * base2 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = 0.5 * (base1 + base2) * height\n    \n    # Calculate the area of the trapezium's base\n    area_base = perimeter * (height / 2)\n    \n    # Calculate the height of the trapezium's base\n    height_base = 2 * area_base / perimeter\n    \n    # Calculate the area of the trapezium's peak\n    area_peak = area1 + area2\n    \n    # Calculate the height of the trapezium's peak\n    height_peak = height - height_base\n    \n    # Calculate the area of the trapezium's underside\n    area_under = 0.5 * perimeter * (height_base ** 2)\n    \n    # Calculate the height of the trapezium's underside\n    height_under = (2 * area_under) / perimeter\n    \n    # Determine the area of the trapezium\n    total_area = area_peak - area_under\n    \n    # Determine the height of the trapezium\n    total_height = height_peak - height_under\n    \n    # Calculate the length of the trapezium's base\n    length_base = base1 + base2\n    \n    # Calculate the length of the trapezium's peak\n    length_peak = length_base + 2 * height_base\n    \n    # Calculate the length of the trapezium's underside\n    length_under = length_peak - 2 * height_under\n    \n    # Calculate the length of the trapezium's base and underside\n    length_base_and_under = length_base + length_under\n    \n    # Calculate the length of the trapezium's height\n    length_height = length_base_and_under - length_peak\n    \n    # Calculate the length of the trapezium's median\n    length_median = 0.5 * (length_base_and_under + length_peak + length_under)\n    \n    # Calculate the median length of the trapezium\n    median_length = length_median\n    \n    # Return the median length of the trapezium\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Find the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    area = round(area, 2)  # round to two decimal places\n\n    # Calculate the length of each half of the trapezium\n    half1 = area / height\n    half2 = area / (2 * height)\n\n    # Find the median of the two halves and return it\n    return (half1 + half2) / 2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the base of the trapezium\n    if area == 0:\n        return 0\n    elif area == base1:\n        return base1\n    elif area == base2:\n        return base2\n    else:\n        # Calculate the length of the hypotenuse of the trapezium\n        hypo = 0.5 * (base1**2 + base2**2 + height**2)\n        # Calculate the length of the base of the base of the trapezium\n        base_base = 0.5 * (base1**2 + height**2)\n        # Calculate the length of the base of the base of the base of the trapezium\n        base_base_base = 0.5 * (height**2)\n        # Find the length of the base of the middle part of the trapezium\n        base_middle = (base1 + base2) * (height - base_base_base) / (base_base_base + height)\n        # Calculate the length of the middle part of the trapezium\n        middle = 0.5 * (base_middle + hypo)\n        # Calculate the length of the top part of the trapezium\n        top = 0.5 * (base_base - base_middle + hypo)\n        # Calculate the length of the bottom part of the trapezium\n        bottom = 0.5 * (base_base - base_middle - hypo)\n\n        # Calculate the length of the trapezium using the formulas\n        trapezium_length = 0.5 * (middle + top + bottom)\n\n        # Calculate the median length of the trapezium\n        median = 0.5 * (trapezium_length + base_middle)\n\n        return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the length of each half of the trapezium\n    half1 = (base1 + base2) / 2\n    half2 = height - (base1 + base2) / 2\n    \n    # Find the median length of each half\n    median1 = sorted([half1, half2])[1]\n    median2 = sorted([half1, half2])[2] / 2\n    \n    # Find the total length of the trapezium\n    total = base1 + half1 + half2 + base2 + height\n    \n    # Find the median length of the trapezium\n    median = total / 2\n    \n    # Return the median length of the trapezium\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5*(base1+base2)*(height)\n    \n    # Calculate the height of the lower half of the trapezium\n    lower_height = height/2\n    \n    # Calculate the area of the lower half of the trapezium\n    lower_area = 0.5*(base1+base2)*lower_height\n    \n    # Calculate the height of the upper half of the trapezium\n    upper_height = height - lower_height\n    \n    # Calculate the area of the upper half of the trapezium\n    upper_area = 0.5*(base1+base2)*upper_height\n    \n    # Calculate the total area of the trapezium\n    total_area = area + lower_area + upper_area\n    \n    # Calculate the length of the trapezium\n    trapezium_length = 0.5*total_area\n    \n    # Calculate the median length of the trapezium\n    median = trapezium_length\n    \n    return median"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in arr:\n        if i > number:\n            print(f\"{number} is greater than {i}\")\n            return True\n    print(f\"{number} is not greater than any element in the array.\")\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(f'{number} is greater than {element}')\n            return True\n    print(f'{number} is not greater than any element in the array')\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if type(arr)!= list:\n        raise TypeError(\"The input must be a list.\")\n    \n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements of the array must be integers.\")\n    \n    if number < min(arr):\n        return True\n    elif number > max(arr):\n        return False\n    else:\n        return any(number > x for x in arr)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > number:\n            count += 1\n    if count > 0:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = []\n    for i in arr:\n        if i > number:\n            greater.append(i)\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for num in arr:\n        if number > num:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(?=[b]+)'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'\\ba(?:b)*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\b\\w*[a]\\w*[b]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*?b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b){1,}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # Converting the number to a string and splitting it into a list\n    num_str = str(n)\n    num_list = list(num_str)\n    \n    # Returning the last digit of the list\n    return num_list[-1]"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns its last digit.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as input and returns the last digit of the number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns the negative numbers in that list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    negative_numbers = []\n    for num in list1:\n        if num < 0:\n            negative_numbers.append(num)\n    return negative_numbers"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for num in list1:\n        if num < 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(lst):\n    '''\n    This function takes a list as input and returns a new list with negative numbers.\n    '''\n    # create an empty list to store negative numbers\n    neg_lst = []\n    # loop through the list\n    for num in lst:\n        # check if the number is negative\n        if num < 0:\n            # if the number is negative, append it to the neg_lst list\n            neg_lst.append(num)\n    # return the neg_lst list\n    return neg_lst"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or int(char) % 2 == 0])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Remove odd characters from a string.\n    \"\"\"\n    result = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(lambda x: x.isalnum(), str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(filter(str.isalpha, str1))"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char.isalnum() and ord(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in string:\n        if ord(char) % 2!= 0:\n            odd_chars.append(char)\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join(char for char in str1 if ord(char) % 2!= 0)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and (test_list[i] + test_list[j]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                if (test_list[i][0], test_list[j][1]) in test_list[j][0:i] or (test_list[j][0], test_list[i][1]) in test_list[j][0:i]:\n                    count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1] == test_list[j][0]) and (test_list[j][1] == test_list[i][0]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[i][1] == test_list[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for n in L:\n        result *= n\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for x in L:\n        result = result * x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    multiple = 1\n    result = 0\n    for num in L:\n        result += multiple * num\n        multiple *= 10\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            num = abs(num)\n        if num > 0:\n            if num % 10 == 0:\n                result += num // 10\n            else:\n                result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # convert the list to a string\n    s = str(L)\n    \n    # find all the indices where the string contains multiple digits\n    indices = [i for i, l in enumerate(s) if l.isdigit()]\n    \n    # join the digits at those indices\n    result = ''.join([s[i] for i in indices])\n    \n    # return the result as an integer\n    return int(result)"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for num in L:\n        total += num\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define the regular expression pattern for identifying adverbs\n    pattern = r'\\b\\w+(ed|ing|edly|ingly)\\b'\n\n    # use the regular expression pattern to find all occurrences of adverbs\n    matches = re.findall(pattern, text)\n\n    # sort the matches by their positions in the sentence\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n\n    # return a dictionary with the adverbs and their positions\n    return {match: text.find(match) for match in sorted_matches}"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove all punctuations from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split the text into words\n    words = text.split()\n    # Initialize an empty list to store the adverbs\n    adverbs = []\n    # Loop through each word in the sentence\n    for i in range(len(words)):\n        # If the word is an adverb, add it to the list of adverbs\n        if words[i] in ['very', 'hardly', 'never', 'rarely','seldom','sometimes', 'often', 'usually','very', 'well']:\n            adverbs.append((i, words[i]))\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: x[0])\n    # Return the list of adverbs\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # define the pattern to match adverbs\n    pattern = r'\\b(?:[A-Z][a-z]*[A-Z]|[-\\s]+[A-Z][a-z]*[A-Z])\\b'\n    \n    # search for adverbs in the text\n    matches = re.findall(pattern, text)\n    \n    # iterate over the matches and print their positions\n    for i, match in enumerate(matches):\n        print(f\"Adverb {match} found at position {i}.\")"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    This function will take in a sentence as a parameter and return a list of tuples.\n    Each tuple will contain the adverb and its position in the sentence.\n    '''\n    adverbs = []\n    # Splitting the sentence into words\n    words = text.split()\n    # Looping through each word in the sentence\n    for word in words:\n        # Checking if the word is an adverb\n        if re.search(r'^[A-Z]+$', word) and re.search(r'[A-Z]+$', word):\n            # Appending the adverb to the adverbs list\n            adverbs.append(word)\n    # Sorting the adverbs list by their positions in the sentence\n    adverbs.sort(key=lambda x: words.index(x))\n    # Creating a dictionary to store the adverb positions\n    positions = {}\n    # Looping through each adverb in the adverbs list\n    for i, adverb in enumerate(adverbs):\n        # Adding the adverb and its position to the dictionary\n        positions[adverb] = i\n    # Returning the adverb positions dictionary\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for finding adverbs\n    pattern = r'\\b\\w*adv\\w*\\b'\n\n    # Find all the matches in the text\n    matches = re.findall(pattern, text)\n\n    # Sort the matches by their position in the sentence\n    matches.sort(key=lambda x: text.find(x))\n\n    # If there are no adverbs in the sentence, return an empty list\n    if not matches:\n        return []\n\n    # Find the first adverb and its position in the sentence\n    first_adverb = matches[0]\n    first_position = text.find(first_adverb)\n\n    # Return a list containing the first adverb and its position\n    return [(first_adverb, first_position)]"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regex pattern to match the adverb\n    adverb_pattern = r'\\b[A-Za-z]+\\b'\n    \n    # Use the re.findall() method to find all the matches in the text\n    matches = re.findall(adverb_pattern, text)\n    \n    # Iterate through the matches and print the adverb and its position in the sentence\n    for i, match in enumerate(matches):\n        print(f'{match} found at position {i+1}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regex pattern to find the first adverb\n    pattern = r\"(?<=\\s)([a-z]+)([^\\w]*?)(?=([.!?]|$))\"\n    # Use the regex pattern to find the first adverb and its positions\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Using regular expression to extract the adverb from the sentence\n    pattern = re.compile(r'\\b[a-zA-Z][a-zA-Z]*\\b', re.IGNORECASE)\n    matches = pattern.findall(text)\n    \n    # Extracting adverb and its position from the matches list\n    adverbs = []\n    for match in matches:\n        # Checking if the first letter of the match is a vowel\n        if match[0] in 'aeiouAEIOU':\n            adverbs.append((match, matches.index(match)))\n    \n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b[A-Za-z]+\\b(?<![a-z])\\b(s|ed|ing|ly|est|ly|er)\\b'\n\n    # Search for adverbs in the given sentence\n    match = re.search(pattern, text)\n\n    # If adverbs are found, return their positions\n    if match:\n        return match.span()\n    # Otherwise, return None\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define regular expressions to find the first adverb and their positions\n    adverb_pattern = re.compile(r'\\b\\w+[a-z]*\\b')\n    sentence_pattern = re.compile(r'\\b\\w+\\b')\n\n    # Find all sentences in the text and their positions\n    sentences = sentence_pattern.findall(text)\n    sentence_positions = [match.start() for match in sentence_pattern.finditer(text)]\n\n    # Find the first adverb and its position in each sentence\n    adverbs = []\n    for i, sentence in enumerate(sentences):\n        match = adverb_pattern.search(sentence)\n        if match:\n            adverbs.append((sentence, match.group(), sentence_positions[i]+match.start()))\n\n    # Sort the adverbs by their positions in the sentence\n    adverbs.sort(key=lambda x: x[2])\n\n    return adverbs"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * math.pi * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*l*l\n    return area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l + 2 * l * 2 + 2 * l * 2 + 6 * l * l + 2 * l * 2 + 2 * l * 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2 * math.pi"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    positive_arr = array('i')\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n    return len(positive_arr) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = array('i')\n    negatives = array('i')\n    for num in nums:\n        if num > 0:\n            positives.append(num)\n        else:\n            negatives.append(num)\n    positive_count = len(positives) / len(negatives)\n    return positive_count"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert array to list\n    nums = list(nums)\n    # Count positive numbers\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    # Calculate ration\n    if len(nums) == 0:\n        return 0\n    else:\n        return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Create an array to store positive numbers\n    positive_arr = array('i')\n\n    # Iterate through the array and add positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n\n    # Calculate the ration of positive numbers\n    positive_count = len(positive_arr) / len(nums)\n\n    # Print the result\n    print(\"The ration of positive numbers in the array is:\", positive_count)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in arr:\n        if i > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n            \n    ratio = float(positive_count) / (positive_count + negative_count + zero_count)\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = [i for i in nums]\n    \n    # Find the number of positive numbers in the list\n    positive_count = sum([1 for i in nums_list if i > 0])\n    \n    # Find the number of negative numbers in the list\n    negative_count = sum([1 for i in nums_list if i < 0])\n    \n    # Calculate the ration of positive numbers\n    ratio = positive_count / (positive_count + negative_count)\n    \n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            count += 1\n    return count / len(arr)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to a list of integers\n    nums_list = list(nums)\n\n    # Initialize the count of positive and negative numbers to 0\n    positive_count = 0\n    negative_count = 0\n\n    # Iterate through the list of integers\n    for num in nums_list:\n        # If the number is positive, increment the count\n        if num > 0:\n            positive_count += 1\n        # If the number is negative, increment the count\n        elif num < 0:\n            negative_count += 1\n\n    # Calculate the ration of positive numbers and store it in a variable\n    ration = positive_count / (positive_count + negative_count)\n\n    # Return the ration as a floating point number\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    neg_count = 0\n    \n    for num in nums:\n        if num > 0:\n            pos_count += 1\n        else:\n            neg_count += 1\n    \n    if pos_count == 0:\n        return 0\n    \n    return pos_count / (pos_count + neg_count)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the largest negative integer in the list.\n    \"\"\"\n    largest = float('-inf')\n    for num in lst:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    # Initialize a variable to store the largest negative number\n    largest_num = float('-inf')\n\n    # Iterate through each element in the list\n    for num in list1:\n        # If the element is negative, update the largest_num variable\n        if num < 0:\n            largest_num = max(largest_num, num)\n\n    # Return the largest negative number found\n    return largest_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')  # initialize max_neg to negative infinity\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')  # initialize largest negative number to negative infinity\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    max_neg = list1[0]\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(lst):\n    # initialize largest negative number to negative infinity\n    largest = float('-inf')\n    \n    # iterate through the list\n    for num in lst:\n        # check if the number is negative\n        if num < 0:\n            # if it is, check if it is greater than the current largest negative number\n            if num > largest:\n                # if it is, update largest to the new number\n                largest = num\n    \n    # return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest_neg_num = -float('inf')  # Initialize a variable to store the largest negative number\n    for num in list1:\n        if num < 0 and num > largest_neg_num:\n            largest_neg_num = num\n    return largest_neg_num"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input.\n    It returns a new list of trimmed tuples.\n    \n    Each tuple in the input list is trimmed by k elements from the beginning and end.\n    If the length of the trimmed tuple is less than K, it is padded with None values.\n    \n    Example:\n    test_list = [(1, 2, 3), (4, 5, 6, 7), (8, 9)]\n    K = 2\n    Output: [(2, 3), (5,), (None, 6, 7), (9,)]\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        if len(tup) <= K:\n            trimmed_list.append(tup)\n        else:\n            trimmed_list.append(tup[K:-K])\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_list.append((tup[0], tup[1][:K]))\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # loop through each tuple in the list\n    for i in range(len(test_list)):\n        # loop through each element in the tuple\n        for j in range(len(test_list[i])):\n            # check if the element is greater than k\n            if test_list[i][j] > K:\n                # if it is, remove it from the tuple\n                del test_list[i][j]\n                # decrement the length of the tuple\n                len(test_list[i]) -= 1"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tuple = (tup[0], tup[1][:K])\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = max(0, test_list[i][j]-K)\n        test_list[i] = tuple(test_list[i])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][:K] + test_list[i][-K:])\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    This function takes in a list of tuples and an integer K as arguments.\n    It then trims each tuple in the list by K elements and returns a new list with the trimmed tuples.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        new_list.append(new_tup)\n    return new_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    \"\"\"\n    for i, tup in enumerate(test_list):\n        test_list[i] = tup[:K] + (tup[K:],)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize an empty list to hold the trimmed tuples\n    trimmed_list = []\n    \n    # Loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # Get the tuple\n        tup = test_list[i]\n        # Trim each tuple by k elements\n        tup = tup[:K]\n        # Add the trimmed tuple to the list of trimmed tuples\n        trimmed_list.append(tup)\n    \n    # Return the trimmed list of tuples\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = []\n    for i in range(len(test_tup1)):\n        multiplication_result.append(test_tup1[i] * test_tup2[i])\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples do not have the same length.\")\n        return None\n    \n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = [None] * len(test_tup1)\n    \n    # Perform index wise multiplication of the tuple elements\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the two tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same number of elements!\")\n    \n    # Initialize the result tuple with the same number of elements as the first tuple\n    result_tup = (0,) * len(test_tup1)\n    \n    # Perform the index wise multiplication of the elements in the two tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # initialize a new tuple with the same length as test_tup1\n    result = tuple(test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    multiplication_result = ()\n    for i in range(len(test_tup1)):\n        multiplication_result += (test_tup1[i] * test_tup2[i],)\n    return multiplication_result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert the list to a set to remove duplicates\n    set_lst = set(lst)\n\n    # count the occurrence of each element in the set in the tuple\n    count_dict = Counter(tup)\n\n    # create an empty dictionary to store the result\n    result_dict = {}\n\n    # loop through the set and count the occurrence of each element in the tuple\n    for elem in set_lst:\n        count = count_dict[elem]\n        if elem in result_dict:\n            result_dict[elem] += count\n        else:\n            result_dict[elem] = count\n\n    return result_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Create a dictionary to store the count of each element in the list \n    count_dict = Counter(lst) \n    \n    # Create a new list to store the count of each element in the tuple \n    new_list = [] \n    \n    # Iterate over each element in the tuple and find the count in the dictionary \n    for elem in tup: \n        if elem in count_dict: \n            new_list.append(count_dict[elem]) \n            \n    return new_list"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    \"\"\"\n    count_dict = Counter(tup)\n    count_dict.update({x: count_dict[x] + 1 for x in lst})\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    \"\"\"\n    # convert tuple to a set to remove duplicates\n    tup = set(tup)\n    # count the occurrences of each element of list in tuple\n    count = Counter(tup)\n    # return the count of each element in the list\n    return {elem: count[elem] for elem in lst}"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurrence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    result = {}\n    for item in tup:\n        if item in count_dict:\n            result[item] = count_dict[item]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    #create a dictionary to store the count of each element in the tuple\n    counts = Counter(tup)\n    \n    #loop through the list and count the occurence of each element in the tuple\n    for elem in lst:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    return counts"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    result = []\n    for i in lst:\n        if i in count:\n            result.append(count[i])\n        else:\n            result.append(0)\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # convert tuple to list to count occurrence\n    lst = list(tup)\n\n    # use Counter to count occurrence of each element in list\n    count = Counter(lst)\n\n    # return count\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        count[i] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # Use Counter to count the frequency of each element in the tuple\n    freq = Counter(tup)\n    \n    # Initialize an empty dictionary to store the result\n    result = {}\n    \n    # Iterate over the elements of the list\n    for elem in lst:\n        # If the element is in the tuple, add 1 to its frequency\n        if elem in freq:\n            result[elem] = freq[elem]\n    \n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i * i * i * i * i) // (i * i * i)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef perrin_sum(n):\n    p_sum = 0\n    p = 1\n    while p <= n:\n        if is_prime(p):\n            p_sum += p\n        p += 1\n    return p_sum\n\ndef cal_sum(n):\n    return perrin_sum(n * (n+1)) // 2"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_of_perrin_numbers = 0\n    for perrin_number in perrin_numbers:\n        if perrin_number % n == 0:\n            sum_of_perrin_numbers += perrin_number\n    return sum_of_perrin_numbers\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    sum = 0\n    for i in range(1, n+1):\n        p = (1/i) * (1 - (1/(i-2)))\n        sum += p\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 2\n    sum = 0\n    while p <= n:\n        if p % 2 == 0:\n            sum += p\n        p += 1\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initialize sum to 0 \n    total = 0\n    # Loop through numbers from 1 to n \n    for i in range(1, n+1): \n        # Check if the number is a perrin number \n        if i == 1 or i == 2 or i == 4 or i == 6 or i == 8 or i == 10 or i == 12 or i == 14 or i == 16: \n            # If the number is a perrin number, add it to the sum \n            total += i \n    # Return the sum \n    return total "
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        total += i * (3*i - 1) / 2\n    return total"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if i == len(str_list)-1 or len(str_list[i]) <= size:\n            result.append(str_list[i])\n        else:\n            result.append(str_list[i][:size])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in l:\n        if len(string) >= l:\n            extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_list = []\n    for string in str_list:\n        if len(string) >= size:\n            extracted_list.append(string)\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and a specified size as input and returns a new list of the specified size containing the extracted strings.\n    '''\n    # Initialize an empty list to store the extracted strings\n    result = []\n\n    # Loop through the list of string values\n    for i in range(len(str_list)):\n        # Check if the current string is greater than or equal to the specified size\n        if len(str_list[i]) >= l:\n            # If it is, append it to the result list\n            result.append(str_list[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for item in l:\n        if len(item) >= l:\n            result.append(item)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and an integer size as input,\n    and returns a new list containing the specified number of strings from the input list.\n    '''\n\n    # Initialize an empty list to store the extracted strings\n    extracted_list = []\n\n    # Loop through the input list and append the size specified number of strings to the extracted list\n    for i in range(size):\n        extracted_list.append(str_list[i])\n\n    # Return the extracted list\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    string_list = []\n    for i in range(len(l)):\n        if len(l[i]) >= l[i]:\n            string_list.append(l[i][:l[i]])\n    return string_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a given list of string values.\n    \"\"\"\n    extracted_list = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) < l:\n            extracted_list.append(str_list[i])\n    return extracted_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, length):\n    '''\n    This function takes a list of strings and a desired length for each string.\n    It returns a list of strings that have the desired length.\n    '''\n    result = []\n    for string in str_list:\n        if len(string) == length:\n            result.append(string)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, l):\n    '''\n    This function takes a list of string values and the required size of the extracted string as input.\n    It extracts the specified size of strings from the list and returns a list of extracted strings.\n    '''\n    extracted_list = []\n    for i in range(len(str_list)):\n        extracted_list.append(str_list[i][:l])\n    return extracted_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # using regular expression to remove whitespaces\n    text1 = re.sub(r'\\s+','', text1).strip()\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern for whitespace\n    pattern = re.compile(r'\\s+')\n    # Replace all occurrences of whitespace with a single space\n    text = pattern.sub(' ', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(' +','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Define a regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() function to replace all occurrences of whitespaces with an empty string\n    text2 = re.sub(pattern, '', text1)\n    # Return the modified string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the given string using regular expressions\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Remove all whitespaces from the given string.\n    \"\"\"\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expressions to remove all whitespace characters from the string\n    text2 = re.sub(r'\\s+','', text1)\n    return text2"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    if sale_amount > actual_cost: \n        return sale_amount - actual_cost \n    else: \n        return 0 "
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost - sale_amount < 0:\n        return actual_cost - sale_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if sale_amount >= actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_percentage = sale_amount / actual_cost * 100\n    if loss_percentage > 0:\n        return round((sale_amount / actual_cost) * actual_cost, 2)\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return 0 \n    else: \n        return actual_cost - sale_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    evenFactors = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0 and i % 2 == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumOfFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of its even factors.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes an integer n as input and returns the sum of the even factors of n.\n    '''\n    even_factors = []\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_factors.append(i)\n\n    return sum(even_factors)"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum += i\n            if n // i!= i:\n                sum += n // i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n\n    # loop through each factor of the number and check if it's even\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if n % (i*2) == 0:\n                total += i\n            else:\n                total += n % i\n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    This function takes a number as input and returns the sum of even factors of the number.\n    '''\n    even_sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            even_sum += i\n    return even_sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    total = 0\n\n    # iterate through numbers from 2 up to n\n    for i in range(2, int(math.sqrt(n))+1):\n        # check if i is a factor of n\n        if n % i == 0:\n            # if it is, check if it is even\n            if i % 2 == 0:\n                # add i to total if it is even\n                total += i\n\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Initialize sum variable to 0\n    total = 0\n    # Loop through all integers from 2 to the square root of n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        # If n is divisible by i, add it to the total\n        if n % i == 0:\n            if i % 2 == 0:\n                total += i\n    # Return the total\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # Initialize variables\n    even_sum = 0\n    count = 0\n\n    # Iterate through the numbers from 2 to n (inclusive)\n    for i in range(2, n+1):\n        # Check if i is even\n        if i % 2 == 0:\n            # If it is even, add it to the sum and increment the count\n            even_sum += i\n            count += 1\n\n    # Return the sum of even factors of n\n    return even_sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w*z\\w*'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z)\\w*\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define regex pattern for matching 'z' in words\n    pattern = re.compile(r'\\b[a-z]+z\\b', re.IGNORECASE)\n\n    # Find all occurrences of 'z' in the text and return a list of them\n    result = pattern.findall(text)\n\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\s[a-zA-Z]+\\b\\s[a-zA-Z]+\\b')\n    match = pattern.search(text)\n    if match:\n        print(\"The word containing 'z' is:\", match.group())\n    else:\n        print(\"The word containing 'z' is not found.\")"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b\\w+\\b'\n    z_pattern = r'\\bz\\b'\n    regex_pattern = re.compile(r'\\b\\w+\\b z\\b')\n    matches = regex_pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(word_pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\w+z'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    monthnum2 = int(monthnum2)\n    if 1 <= monthnum2 <= 12:\n        if monthnum2 == 2:\n            if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and (year % 100 == 0 and year % 400!= 0)):\n                days = 29\n            else:\n                days = 28\n        else:\n            days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][monthnum2 - 1]\n    else:\n        return \"Invalid month number\"\n    return days"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    months = {1:31, 3:31, 5:31, 7:31, 8:30, 10:31, 12:31}\n    return months.get(monthnum2, \"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # checking for the length of the month number\n    if len(monthnum2) == 2:\n        # converting the month number to integer\n        monthnum = int(monthnum2)\n        # checking for 31 days in each month\n        if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n            return True\n        elif monthnum == 2:\n            return False\n        else:\n            # checking for 30 days in each month\n            if monthnum in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    elif monthnum2 % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as an argument and returns True if it contains 31 days, and False otherwise.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0:\n            if monthnum2 % 4 == 0:\n                if monthnum2 % 100 == 0:\n                    if monthnum2 % 400 == 0:\n                        if monthnum2 == 2:\n                            return \"It's a leap year and has 28 days.\"\n                        elif monthnum2 in [4, 6, 9, 11]:\n                            return \"It's a leap year and has 30 days.\"\n                        else:\n                            return \"It's a leap year and has 31 days.\"\n                    else:\n                        return \"It's not a leap year and has 28 days.\"\n                else:\n                    return \"It's not a leap year and has 30 days.\"\n            else:\n                return \"It's not a leap year and has 31 days.\"\n        else:\n            if monthnum2 % 4 == 0:\n                if monthnum2 % 100 == 0:\n                    if monthnum2 % 400 == 0:\n                        if monthnum2 == 2:\n                            return \"It's a leap year and has 29 days.\"\n                        elif monthnum2 in [4, 6, 9, 11]:\n                            return \"It's a leap year and has 30 days.\"\n                        else:\n                            return \"It's a leap year and has 31 days.\"\n                    else:\n                        return \"It's not a leap year and has 29 days.\"\n                else:\n                    return \"It's not a leap year and has 30 days.\"\n            else:\n                return \"It's not a leap year and has 31 days.\"\n    else:\n        return \"Invalid month number. Please enter a valid month number between 1 and 12.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum == 4 or monthnum == 6 or monthnum == 9 or monthnum == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the month number is within range of 1 to 12\n    if monthnum2 < 1 or monthnum2 > 12:\n        return \"Invalid month number.\"\n    else:\n        # Get the number of days in a given month\n        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if monthnum2 == 2:\n            # If the month is February, check if it is a leap year or not\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                # If the year is a leap year, then there are 29 days in February\n                month_days[1] = 29\n            else:\n                # Otherwise, there are 28 days in February\n                month_days[1] = 28\n        # Check if the month number contains 31 days\n        if monthnum2 in month_days:\n            return \"The month number contains 31 days.\"\n        else:\n            return \"The month number does not contain 31 days.\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the current string\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # using slicing to reverse the string\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_list.append(string[::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return [s[::-1] for s in stringlist]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = lst[0]\n    for sublist in lst[1:]:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_list = None\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_list = sublist\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf') # initializing minimum length as infinity\n    min_sublist = [] # initializing empty list to store minimum sublist\n\n    for sublist in lst: \n        if len(sublist) < min_length: \n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # Initialize min_len to the length of lst\n    min_len = len(lst)\n    # Initialize min_sublist to None\n    min_sublist = None\n    \n    # Loop through the list\n    for sublist in lst:\n        # Check if the length of the sublist is less than the current minimum\n        if len(sublist) < min_len:\n            # If it is, update the minimum length and the new minimum sublist\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist with minimum length.\n    '''\n    min_length = float('inf')\n    sublist = []\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            sublist = i\n    return sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list as input and returns the sublist \n    with the minimum length.\n    '''\n    min_length = float('inf') # initialize minimum length to infinity\n    min_list = [] # initialize minimum sublist to empty list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sub_list = lst[i:j]\n            if len(sub_list) < min_length:\n                min_length = len(sub_list)\n                min_list = sub_list\n    return min_list"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = 1000000000\n    min_sublist = []\n\n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)+1): \n            sublist = lst[i:j]\n            if len(sublist) < min_len: \n                min_len = len(sublist)\n                min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z][a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'\\b[A-Z][a-z]+\\b')\n    return uppercase_pattern.sub('', string)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'([A-Z][a-z]*[A-Z])')\n\n    # Use the pattern to find all uppercase substrings in the string\n    uppercase_substrings = pattern.findall(str1)\n\n    # Use a loop to remove each uppercase substring from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # Use the re.sub() function to replace all occurrences of uppercase substrings with an empty string\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase substrings\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Remove all uppercase substrings from the input string\n    str1 = re.sub(r'\\b[A-Z]\\w+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    # Define a regular expression pattern for uppercase substrings\n    pattern = r'(?i)[A-Z]+'\n    \n    # Use the re.sub() function to replace uppercase substrings with empty strings\n    result = re.sub(pattern, '', str1)\n    \n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'[A-Z]+'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]+', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase characters\n    pattern = r'[A-Z]+'\n    # use re.sub() method to replace uppercase substrings with an empty string\n    result = re.sub(pattern, '', str1)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            res.append(sublist[0])\n        else:\n            res.append(sublist)\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list\n"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if isinstance(sublist, list):\n            if len(sublist) > 0:\n                result.append(sublist[0])\n        else:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]] + Extract(lst[1:])"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    This function takes a list as input and extracts the first element of each sublist.\n    '''\n    result = []\n    for i in lst:\n        result.append(i[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    extracted_lst = []\n    for sublist in lst:\n        extracted_lst.append(sublist[0])\n    return extracted_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n\n    upper_count = 0\n\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # convert the string to uppercase\n    str = str.upper()\n    \n    # count the number of upper case characters in the string\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n            \n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(string):\n    '''\n    This function takes a string as input and returns the count of upper case characters in the string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(1, n-i+1):\n            print(list1[j-1], end=' ')"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Returns all possible combinations of the elements of a given list.\n\n    Parameters:\n    - lst: a list of elements\n\n    Returns:\n    - a list of tuples, where each tuple contains one element from the input list\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    import itertools\n\n    # Define a function to generate all combinations\n    def generate_combinations(lst):\n        for i in range(1, len(lst) + 1):\n            for j in itertools.combinations(lst, i):\n                yield j\n\n    # Generate all combinations of the input list\n    combinations = list(generate_combinations(list1))\n\n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    \n    result = []\n    for i in range(len(list1)):\n        sublist = list1[:i] + list1[i+1:]\n        result.append(sublist)\n    \n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    This function takes a list and returns a list of all possible combinations of its elements.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create a list of tuples containing the indices of the elements in the given list\n    indices = [(i, j) for i in range(len(list1)) for j in range(i + 1, len(list1) + 1)]\n\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each pair of indices and generate the combinations\n    for i, j in indices:\n        # use slicing to extract the elements from the given list\n        combination = list1[i:j]\n        # add the combination to the list of combinations\n        combinations.append(combination)\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the list to store the combinations\n    combinations = []\n\n    # Sort the list in ascending order\n    list1.sort()\n\n    # Loop through each element of the list\n    for i in range(len(list1)):\n\n        # Loop through each element of the list starting from the next element\n        for j in range(i+1, len(list1)+1):\n\n            # Add the current combination to the list of combinations\n            combinations.append(list1[i:j])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n\n    result = []\n    for i in range(1, len(list1) + 1):\n        sublist = list1[:i]\n        rest = list1[i:]\n        combinations = combinations_list(rest)\n        for combination in combinations:\n            result.append(sublist + [combination])\n\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(len(arr)):\n        curr_product = max(arr[i], curr_product * arr[i])\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    # Initialize the maximum product subarray\n    max_product = float('-inf')\n\n    # Initialize two variables to keep track of the minimum and maximum of the current subarray\n    curr_min = float('inf')\n    curr_max = float('-inf')\n\n    # Iterate through the array\n    for num in arr:\n        # Update the minimum and maximum of the current subarray\n        curr_min = min(curr_min, num)\n        curr_max = max(curr_max, num)\n        # Update the maximum product subarray\n        max_product = max(max_product, curr_max * curr_min)\n\n    # Return the maximum product subarray\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = max_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum product subarray of the array.\n    \"\"\"\n    max_product = arr[0]\n    current_product = 1\n    \n    for i in range(1, len(arr)):\n        current_product = max(arr[i], current_product * arr[i])\n        max_product = max(max_product, current_product)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n    \n    for num in arr:\n        max_ending_here = max(num, max_ending_here * num)\n        min_ending_here = min(num, min_ending_here * num)\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            current_product *= arr[i]\n        else:\n            current_product = 1\n\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    curr_product = 1\n    result = []\n    \n    for num in arr:\n        curr_product = max(num, curr_product*num)\n        max_product = max(max_product, curr_product)\n        \n        if max_product < 0:\n            curr_product = 1\n            max_product = 1\n    \n    if max_product < 0:\n        return []\n    \n    for num in arr:\n        if num*curr_product > max_product:\n            result.append(num)\n    \n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    :param arr: list of integers\n    :return: integer\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        if i == 0:\n            current_product = arr[i]\n            continue\n        if current_product < 0:\n            current_product = arr[i]\n        else:\n            current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    start_index = 0\n    end_index = 0\n\n    for i in range(len(arr)):\n        if current_product > 0:\n            current_product *= arr[i]\n        else:\n            current_product = arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n            start_index = i - len(arr) + 1\n            end_index = i\n\n    return max_product, arr[start_index:end_index+1]"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    if len(values) == 1:\n        return True\n    elif all(value == values[0] for value in values[1:]):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 0:\n        return True\n    \n    # get the first value of the dictionary\n    value = dict.values()[0]\n    \n    # check if all values are equal to the first value\n    for v in dict.values():\n        if v!= value:\n            return False\n    \n    # if all values are same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    This function checks if all values are same in a dictionary.\n    \"\"\"\n    # Convert the dictionary to a set to remove duplicates\n    set_dict = set(dict.values())\n    # Check if the length of the set is equal to 1\n    if len(set_dict) == 1:\n        # If so, return True, as all values are same\n        return True\n    # If the length is greater than 1, return False, as there are different values\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    if len(dict)!= n:\n        return False\n    else:\n        for i in range(len(dict)):\n            if dict[i]!= dict[i+1]:\n                return False\n        return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_set = set()\n    for value in dict.values():\n        value_set.add(value)\n    if len(value_set) == 1:\n        return True\n    return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Get all the values from the dictionary\n    values = set(dict.values())\n\n    # Check if the number of unique values is equal to the number of keys\n    if len(values) == len(dict):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key, value in dict.items():\n        if value!= dict[key]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value_list = []\n    for i in dict.values():\n        value_list.append(i)\n    if len(set(value_list)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Check if all values are of the same type\n    if not all(isinstance(v, type(dict[k])) for k, v in dict.items()):\n        return False\n    \n    # Check if all values are same\n    for v in dict.values():\n        if v!= dict[v]:\n            return False\n    \n    # If all values are same, return True\n    return True"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n\n    # create a new dictionary to store the non-empty items\n    result = {}\n\n    # iterate over the items in the dictionary\n    for key, value in dict1.items():\n        # check if the value is not empty or None\n        if value!= '' and value is not None:\n            # add the item to the new dictionary\n            result[key] = value\n\n    return result"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    for key in list(dict1):\n        if isinstance(dict1[key], list) and len(dict1[key]) == 0:\n            del dict1[key]\n        elif isinstance(dict1[key], dict) and drop_empty(dict1[key]):\n            del dict1[key]\n        elif isinstance(dict1[key], str) and dict1[key] == \"\":\n            del dict1[key]\n    return len(dict1)"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    if len(arr) < 2:\n        return 0\n    \n    # Initialize variables\n    max_product = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    # Iterate through the array\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = min(min_ending_here, arr[i])\n        elif arr[i] < min_ending_here:\n            min_ending_here = arr[i]\n            max_ending_here = max(max_ending_here, arr[i])\n        else:\n            max_ending_here = max(max_ending_here, arr[i])\n            min_ending_here = min(min_ending_here, arr[i])\n        \n        # Update max_product if necessary\n        if max_product < max_ending_here:\n            max_product = max_ending_here\n            \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n    # Create an array dp of size (n+1) to store the maximum product ending at each index\n    dp = [0] * (n+1)\n    \n    # Initialize the maximum product ending at index 0 to the first element of the array\n    dp[0] = arr[0]\n    \n    # Initialize the maximum product ending at index 1 to the product of the first two elements\n    dp[1] = arr[0] * arr[1]\n    \n    # Iterate over the remaining elements in the array\n    for i in range(2, n+1):\n        # Initialize the maximum product ending at index i to the minimum of the current element multiplied by the maximum product ending at index i-1 and the maximum product ending at index i-2\n        dp[i] = min(arr[i] * dp[i-1], arr[i-1] * dp[i-2])\n        \n    # Return the maximum product ending at the last index in the array\n    return dp[n]"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_product_so_far = arr[0]\n    max_product_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n        \n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return 0\n    n = len(arr)\n    # Initialize maximum subsequence product and maximum product\n    max_prod = arr[0]\n    max_so_far = arr[0]\n    # Initialize the product and the sum of products\n    prod = arr[0]\n    sum_prod = arr[0]\n    # Initialize the indices of the current subsequence\n    left = 0\n    right = 0\n    # Traverse the array and update the maximum subsequence product and maximum product\n    while right < n:\n        while sum_prod >= 0 and right < n:\n            sum_prod += arr[right]\n            right += 1\n        while sum_prod <= 0 and left > 0:\n            sum_prod += arr[left]\n            left -= 1\n        # Update the maximum product and maximum subsequence product\n        max_so_far = max(max_so_far, prod)\n        max_prod = max(max_prod, max_so_far)\n        # Update the product and sum of products\n        prod = arr[left] * arr[right]\n        sum_prod = prod\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    \n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(n):\n        if i > 0 and arr[i] <= arr[i-1]:\n            continue\n\n        temp_product = arr[i]\n        if i > 0:\n            temp_product *= arr[i-1]\n\n        if temp_product > max_product:\n            max_product = temp_product\n        \n        if temp_product < min_product:\n            min_product = temp_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    min_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            temp_max = max(max_product, min_product * arr[i])\n            temp_min = min(min_product, max_product * arr[i])\n            max_product = temp_max\n            min_product = temp_min\n        else:\n            temp_max = max(max_product, min_product * arr[i])\n            temp_min = min(min_product, max_product * arr[i])\n            max_product = temp_max\n            min_product = temp_min\n    \n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    max_profit = 0\n    current_profit = 0\n    highest = arr[0]\n    second_highest = arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > highest:\n            second_highest = highest\n            highest = arr[i]\n        elif arr[i] > second_highest:\n            second_highest = arr[i]\n        else:\n            current_profit = arr[i] - second_highest\n            max_profit = max(max_profit, current_profit)\n\n    return max_profit"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        max_product1 = max_product(arr[1:])\n        max_product2 = max_product(arr[1:n-1])\n        return max(max_product1, max_product2, arr[0] * arr[n-1])"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    n = len(arr)\n    max_product = float('-inf')\n    curr_product = 1\n    for i in range(n):\n        if i == 0 or arr[i] > arr[i-1]:\n            curr_product *= arr[i]\n            max_product = max(max_product, curr_product)\n        else:\n            curr_product = arr[i]\n    return max_product"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    This function takes a tuple as input and returns the pairwise addition of its neighboring elements.\n    \"\"\"\n    if len(test_tup) < 2:\n        return \"Invalid input tuple. It must have at least 2 elements.\"\n    \n    sum_of_neighboring_elements = sum(test_tup[1:-1])\n    \n    return sum_of_neighboring_elements"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    length = len(test_tup)\n    pairwise_sum = 0\n    for i in range(length - 1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n\n    # Check if the input tuple is of length 2\n    if len(test_tup)!= 2:\n        print(\"Error: The input tuple must have exactly 2 elements.\")\n        return\n\n    # Get the two adjacent elements of the input tuple\n    a, b = test_tup\n\n    # Find the pairwise sum of the adjacent elements\n    pairwise_sum = a + b\n\n    # Print the result\n    print(\"The pairwise addition of the neighboring elements is:\", pairwise_sum)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    for i in range(len(test_tup) - 1):\n        test_tup[i] += test_tup[i+1]\n    \n    return test_tup"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n\n    total = 0\n    for i in range(len(test_tup) - 1):\n        total += test_tup[i] + test_tup[i + 1]\n\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Convert the given tuple to a list\n    test_lst = list(test_tup)\n    # Initialize the result list\n    result_lst = []\n    # Loop through the list and find the pairwise addition of each adjacent pair of elements\n    for i in range(len(test_lst)-1):\n        result_lst.append(test_lst[i] + test_lst[i+1])\n    # Return the resulting tuple of the pairwise additions\n    return tuple(result_lst)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    total = 0\n    for i in range(len(test_tup)-1):\n        total += test_tup[i] + test_tup[i+1]\n    return total"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize a variable to store the sum of neighboring elements\n    pair_sum = 0\n\n    # Loop through each element in the tuple\n    for i in range(len(test_tup) - 1):\n        # Add the neighboring elements together and store the result in the pair_sum variable\n        pair_sum += test_tup[i] + test_tup[i+1]\n\n    # Return the pair_sum variable as the result of the function\n    return pair_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize the sum to zero\n    total = 0\n    \n    # iterate over the elements of the tuple\n    for i in range(len(test_tup)-1):\n        # add the current element and the next element together and store the result in the total variable\n        total += test_tup[i] + test_tup[i+1]\n    \n    # return the total sum\n    return total"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n\n    # initialize the result to 1\n    result = 1\n\n    # iterate over the elements of the array\n    for element in arr:\n        # multiply the current element by the result modulo n\n        result = (result * element) % n\n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        left_result = find_remainder(arr[:mid], n)\n        right_result = find_remainder(arr[mid:], n)\n        return ((left_result * right_result) % n)"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Find the product of array multiplication\n    product = 1\n    for i in arr:\n        product *= i\n    \n    # Calculate the remainder\n    remainder = product % n\n    \n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Initialize variables\n    product = 1\n    result = []\n    # Loop through array and multiply each element with product modulo n\n    for i in arr:\n        product = (product * i) % n\n        result.append(product)\n    # Return result as a list\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            print(\"Consecutive number found at index:\", i)\n        else:\n            i += 1\n    else:\n        print(\"No consecutive numbers found.\")"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, else False.\n    A number is considered consecutive if it is the same as the next one.\n    '''\n    count = 1\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count > 1:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    This function checks whether a list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers,\n    else it returns False.\n    \"\"\"\n    if len(l) < 3:\n        return False\n    \n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n\n    # Check if the length of the list is 0 or 1\n    if len(l) == 0 or len(l) == 1:\n        return False\n\n    # Initialize variables\n    prev = l[0]\n    curr = l[1]\n\n    # Loop through the list and check if consecutive numbers are present\n    for i in range(2, len(l)):\n        if l[i] == curr + 1:\n            curr += 1\n        else:\n            return False\n\n        # Check if the current number exceeds the maximum number in the list\n        if curr > max(l):\n            return False\n\n    # If no consecutive numbers are present, return True\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    elif l[0] == l[1]:\n        return False\n    else:\n        for i in range(len(l)-1):\n            if l[i] + 1 == l[i+1]:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1!= l[i+1]: \n            return False\n    return True"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    intersection = set(test_list1) & set(test_list2)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    return tuple(set1.intersection(set2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set from each list to find the unique elements\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Using set() to remove duplicates from both lists\n    unique_list1 = set(test_list1)\n    unique_list2 = set(test_list2)\n\n    # Checking if there are any common elements in both lists\n    common_elements = unique_list1.intersection(unique_list2)\n\n    # Converting set to tuple and returning it\n    return tuple(common_elements)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    This function takes two tuple lists as input and returns the tuple intersection of their elements,\n    irrespective of their order.\n    \"\"\"\n    common_elements = set(test_list1) & set(test_list2)\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # convert both lists to sets to remove duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # convert the intersection to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Creating a set of unique elements in the first list\n    unique_elements1 = set(test_list1)\n\n    # Creating a set of unique elements in the second list\n    unique_elements2 = set(test_list2)\n\n    # Finding the intersection of the two sets\n    intersection = unique_elements1.intersection(unique_elements2)\n\n    # Converting the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for element in test_list1:\n        if element in test_list2 and element not in intersection:\n            intersection.append(element)\n    return tuple(intersection)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    This function takes in two tuple lists as input and returns the tuple intersection of their elements.\n    The tuple intersection is the set of elements that are present in both the tuple lists irrespective of their order.\n    '''\n    # Create a dictionary to store the elements of the tuple list 1\n    dict1 = {}\n    for element in test_list1:\n        if element not in dict1:\n            dict1[element] = 1\n    \n    # Create a dictionary to store the elements of the tuple list 2\n    dict2 = {}\n    for element in test_list2:\n        if element not in dict2:\n            dict2[element] = 1\n    \n    # Find the common elements between the two dictionaries\n    common_elements = set(dict1.keys()) & set(dict2.keys())\n    \n    # Convert the set of common elements to a list and return it\n    return list(common_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    \n    # Create a set from each tuple list\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    \n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    \n    # Return the intersection as a list of tuples\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Args:\n        str1 (str): The input string.\n        ch (str): The character to replace.\n        newch (str): The character to replace all occurrences of ch with.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes a string, a character to be replaced, and a new character as input.\n    It replaces all occurrences of the old character with the new character in the string and returns the modified string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with a new character.\n\n    Parameters\n    ----------\n    str1: str\n        The original string.\n    ch: str\n        The character to be replaced.\n    newch: str\n        The new character to replace the old character with.\n\n    Returns\n    -------\n    str1: str\n        The modified string.\n    \"\"\"\n    # Use the replace() method to replace all occurrences of ch with newch\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    sorted_dict = dict(sorted_counter)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a Counter object from the dictionary\n    count = Counter(dict1)\n    # sort the Counter object by value\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    # create a new dictionary from the sorted Counter object\n    sorted_dict = {k: v for k, v in sorted_count}\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1).most_common()\n    sorted_dict.sort(key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest value in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Calculate the sum of the largest and smallest value\n    total = largest + smallest\n    # Return the sum of the largest and smallest value\n    return total"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Initialize the smallest and largest values\n    smallest = float('inf')\n    largest = float('-inf')\n\n    # Loop through the array and find the smallest and largest values\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n\n    # Return the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    This function finds the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest value in the array\n    max_num = max(nums)\n\n    # Find the smallest value in the array\n    min_num = min(nums)\n\n    # Return the sum of the largest and smallest value\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return 0\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n\n    if not nums:\n        return 0\n\n    largest = nums[0]\n    smallest = nums[0]\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    # Find the largest and smallest values in the array\n    largest = max(nums)\n    smallest = min(nums)\n    # Return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables\n    min_val = float('inf')\n    max_val = float('-inf')\n    # loop through the array and update the min and max values\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n    # calculate the sum of the max and min values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    if string.lower() == string:\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile('[a-z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = r'[a-z]'\n    return re.sub(lowercase_pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = re.sub('[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Use regular expressions to find all lowercase substrings\n    lower_substrings = re.findall(r'[a-z]+', str1)\n    \n    # Iterate over the list of lowercase substrings and remove them from the original string\n    for substr in lower_substrings:\n        str1 = re.sub(r'\\b'+substr+r'\\b', '', str1)\n        \n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b\\w+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[a-z]+', re.IGNORECASE)\n    return pattern.sub('', string)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    This function removes lowercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    pattern = re.compile(r'\\b[a-z]+\\b', re.IGNORECASE)\n    return pattern.sub('', string)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Removing any leading zeros from the number\n    n = str(n)\n    while n[0] == '0':\n        n = n[1:]\n\n    # Converting the number to a list of digits\n    digits = [int(digit) for digit in n]\n\n    # Finding the first digit\n    first_digit = digits[0]\n\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n >= 10:\n        return int(n/10)\n    else:\n        return n"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0:\n        return '0'\n    else:\n        while n >= 10:\n            n = n // 10\n        return str(n)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n\n    # Get the first character of the string\n    first_char = num_str[0]\n\n    # Convert the first character to an integer and return it\n    return int(first_char)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a number as input and returns the first digit of the number.\n    '''\n    # if the number is less than 10, then return the number itself\n    if n < 10:\n        return n\n    # if the number is greater than or equal to 10, then divide it by 10 and recursively call the function on the quotient\n    else:\n        return first_Digit(n//10)"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to string\n    num = str(n)\n    \n    # find the index of the first digit\n    first_digit_index = 0\n    while first_digit_index < len(num) and num[first_digit_index].isdigit():\n        first_digit_index += 1\n    \n    # return the first digit\n    return num[first_digit_index]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list: \n        if num % 2!= 0: # check if the number is odd\n            odd_list.append(num) # add the odd number to the list\n    return odd_list # return the odd number list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    '''\n    This function takes a list of integers as input and returns only the odd numbers in the list.\n    '''\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_of_natural_numbers = sum(range(1,n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)\n\nprint(difference(10))"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1, n+1))\n\n    # Calculate the difference between the two sums\n    difference = abs(sum_of_cubes - sum_of_numbers)\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum([i**3 for i in range(n+1)])\n    sum_of_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    This function finds the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n        sum_of_natural_numbers += i\n    \n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [i**3 for i in range(n+1)]\n    sums = [sum(cubes[:i+1]) for i in range(n+1)]\n    return sums[-1] - sums[0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    This function takes a positive integer as an input and returns the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of first n natural numbers\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculate the sum of first n natural numbers\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_numbers += i\n    \n    # Calculate the difference between the sums\n    difference = sum_cubes - sum_numbers\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    # sum of cubes of the first n natural numbers\n    sum_cubes = sum(i**3 for i in range(1,n+1))\n    # sum of the first n natural numbers\n    sum_numbers = sum(range(1,n+1))\n    # return the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    cubes = [x**3 for x in range(1,n+1)]\n    sum_of_cubes = sum(cubes)\n    first_n_numbers = list(range(1,n+1))\n    sum_of_first_n_numbers = sum(first_n_numbers)\n    difference = sum_of_cubes - sum_of_first_n_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_natural += i\n    \n    difference = sum_cubes - sum_natural\n    return difference"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    \"\"\"\n    This function takes an array A of size N and returns the number of pairs whose xor value is odd.\n    \n    Args:\n    A (list): A list of size N containing integers.\n    N (int): The size of the array A.\n    \n    Returns:\n    int: The number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes two lists A and N and returns the number of pairs whose xor value is odd.\n\n    Parameters:\n        A: A list of integers.\n        N: A list of integers.\n\n    Returns:\n        An integer.\n    \"\"\"\n    xor = [0] * (N + 1)\n    count = 0\n\n    # Calculate xor values\n    for i in range(N):\n        xor[A[i]] ^= 1\n\n    # Iterate through xor values and count odd ones\n    for i in range(len(xor)):\n        if xor[i] % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_sum = sum(A)\n    count = 0\n    \n    # Iterate through all possible pairs of indices\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            \n            # Check if xor is odd\n            if xor % 2 == 1:\n                count += 1\n                \n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+2,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes a list A and an integer N and returns the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if ((A[i] ^ A[j]) % 2!= 0):\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists, A and N, where A contains the list of integers and N contains the list of integers.\n    It returns the number of pairs whose xor value is odd.\n    '''\n    # Initialize a counter variable to keep track of the number of pairs with odd xor value\n    count = 0\n    # Iterate through each integer in A\n    for i in A:\n        # Iterate through each integer in N\n        for j in N:\n            # Check if the xor value of i and j is odd\n            if ((i ^ j) & 1) == 1:\n                # Increment the counter variable by 1\n                count += 1\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2!= 0 and A[j] ^ A[i] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # Convert the string to lowercase\n    lowercase_string = string.lower()\n    \n    # Iterate over each character in the lowercase string\n    for i in range(len(lowercase_string)):\n        # Convert the current character to uppercase\n        uppercase_char = chr(ord(lowercase_string[i]) - 32)\n        \n        # Replace the current character with its uppercase version\n        lowercase_string = lowercase_string[:i] + uppercase_char + lowercase_string[i+1:]\n    \n    # Convert the lowercase string back to uppercase\n    uppercase_string = lowercase_string.upper()\n    \n    return uppercase_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to lowercase\n    string = string.lower()\n    # Create a new string with all characters toggled\n    result = ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n    # Return the result as a string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char.lower()\n        elif char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([chr(ord(char) ^ 32) if char.isalpha() else char for char in string])"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Get the length of the smaller integer\n    n = min(len(str(n1)), len(str(n2)))\n\n    # Initialize the sum of per-digit differences\n    diff_sum = 0\n\n    # Loop through each digit\n    for i in range(n):\n        # Get the digits of the two numbers\n        d1 = int(str(n1)[i])\n        d2 = int(str(n2)[i])\n\n        # Calculate the per-digit difference and add to the sum\n        diff_sum += abs(d1 - d2)\n\n    # Return the sum of per-digit differences\n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the numbers to strings so we can use the built-in string methods\n    s1 = str(n1)\n    s2 = str(n2)\n    # initialize the sum variable to 0\n    sum_diff = 0\n    # loop through each digit in both strings and compare them\n    for i in range(len(s1)):\n        # convert the digit to integers and subtract the corresponding digit in the other string\n        diff = int(s1[i]) - int(s2[i])\n        # add the difference to the sum variable\n        sum_diff += diff\n    # return the sum of the per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Initialize a variable to store the sum of the per-digit differences\n    sum_diff = 0\n\n    # Loop through each digit of the first number\n    for digit in str(n1):\n        # Subtract the corresponding digit of the second number from the first number\n        diff = int(digit) - int(n2 // 10**len(str(n1)) % 10)\n        # Add the difference to the sum\n        sum_diff += diff\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert integers to lists of digits\n    digits1 = [int(d) for d in str(n1)]\n    digits2 = [int(d) for d in str(n2)]\n    # find the length of the shortest integer\n    min_len = min(len(digits1), len(digits2))\n    # create a dictionary to store the difference between the corresponding digits\n    diff_dict = {}\n    # loop through the digits of the two numbers\n    for i in range(min_len):\n        diff = digits1[i] - digits2[i]\n        if diff in diff_dict:\n            diff_dict[diff] += 1\n        else:\n            diff_dict[diff] = 1\n    # find the sum of the values in the dictionary\n    sum_diff = sum(diff_dict.values())\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # convert both numbers to strings and loop through them\n    digit_sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        digit1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        digit2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        # calculate the per-digit difference and add it to the total sum\n        digit_sum += abs(digit1 - digit2)\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # function to calculate the per-digit difference\n    def digit_diff(num1, num2):\n        diff = 0\n        while num1!= 0 or num2!= 0:\n            diff += abs(num1 % 10 - num2 % 10)\n            num1 //= 10\n            num2 //= 10\n        return diff\n    \n    # calculate the sum of the per-digit differences\n    diff_sum = digit_diff(n1, n2)\n    \n    # calculate the sum of the absolute differences\n    abs_sum = abs(n1 - n2)\n    \n    # return the sum of the absolute differences and the sum of the per-digit differences\n    return diff_sum + abs_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to lists of digits\n    digits1 = [int(digit) for digit in str(n1)]\n    digits2 = [int(digit) for digit in str(n2)]\n\n    # Calculate the per-digit difference between the two lists\n    diff_list = [abs(digit1 - digit2) for digit1, digit2 in zip(digits1, digits2)]\n\n    # Calculate the sum of the per-digit differences\n    total_diff = sum(diff_list)\n\n    # Return the sum of the per-digit differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Get the lengths of the integers\n    n1_length = len(str(n1))\n    n2_length = len(str(n2))\n\n    # If the lengths are different, return 0\n    if n1_length!= n2_length:\n        return 0\n\n    # Initialize the sum variable\n    total_sum = 0\n\n    # Iterate over each digit of the integers\n    for i in range(n1_length):\n        # Get the corresponding digits of the integers\n        digit1 = int(str(n1)[i])\n        digit2 = int(str(n2)[i])\n\n        # Calculate the per-digit difference\n        difference = abs(digit1 - digit2)\n\n        # Add the difference to the total sum\n        total_sum += difference\n\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digits_list1 = [int(d) for d in str(n1)]\n    digits_list2 = [int(d) for d in str(n2)]\n    \n    # Calculate the sum of the per-digit difference between the two lists of digits\n    diff_sum = 0\n    for i in range(max(len(digits_list1), len(digits_list2))):\n        diff_sum += abs(digits_list1[i] - digits_list2[i])\n    \n    return diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    total_sum = 0\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        num1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        num2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        total_sum += abs(num1 - num2)\n    return total_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    This function takes an array a and its size as input and returns the sum of the largest contiguous sublist in the array.\n    \"\"\"\n    # Initialize max_sum and max_ending_here to negative infinity\n    max_sum = float('-inf')\n    max_ending_here = 0\n    \n    # Traverse the array from the second element to the size-th element\n    for i in range(1, size):\n        \n        # Update max_ending_here with the maximum of the current element and the sum of the previous max_ending_here and the current element\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        \n        # Update max_sum with the maximum of the current max_sum and the current max_ending_here\n        max_sum = max(max_sum, max_ending_here)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    This function takes in a list of integers and an integer representing the size of the sublist to find the maximum sum of.\n    It then finds the maximum sum of any sublist of the specified size and returns that sum.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(len(arr) - size + 1):\n        current_sum = sum(arr[i:i+size])\n        max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    start_index = 0\n\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start_index = i - size + 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the maximum subarray sum in a list.\n\n    Parameters:\n    a (list): List of integers to find the maximum subarray sum for.\n    size (int): Length of the subarray to check for the maximum sum.\n\n    Returns:\n    int: The maximum subarray sum found.\n    \"\"\"\n    if size > len(a):\n        return -1\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    for i in range(len(a) - size + 1):\n        current_sum = a[i]\n        for j in range(size):\n            current_sum += a[i+j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): The list of integers.\n    size (int): The size of the sublist to be considered.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n\n    # Initialize a variable to store the sum of the largest contiguous sublist\n    max_sum = float('-inf')\n\n    # Initialize two pointers, one at the beginning and one at the end of the list\n    left = 0\n    right = size - 1\n\n    # Loop through the list from left to right\n    while right < len(a):\n        # Calculate the sum of the current sublist\n        current_sum = sum(a[left:right + 1])\n\n        # If the current sum is greater than the max sum so far, update the max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # Move the left pointer to the right\n        left += 1\n\n        # Move the right pointer to the next position\n        right += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    max_sum = float('-inf')\n    current_sum = 0\n    window_start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if i >= size - 1:\n            break\n\n        if current_sum < 0:\n            current_sum = 0\n            window_start += 1\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Combine the two tuples\n    combined_tup = test_tup1 + test_tup2\n    \n    # Remove duplicates using set() and sorted()\n    unique_tup = sorted(list(set(combined_tup)))\n    \n    # Print the unique tuple\n    print(unique_tup)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Initialize an empty list to store the union\n    union_list = []\n\n    # Loop through both tuples\n    for element in test_tup1:\n        # Check if the element is not in the second tuple\n        if element not in test_tup2:\n            # If not, add it to the union list\n            union_list.append(element)\n\n    # Loop through the second tuple and add any elements that are not in the first tuple\n    for element in test_tup2:\n        if element not in test_tup1:\n            union_list.append(element)\n\n    # Sort the union list in ascending order\n    union_list.sort()\n\n    # Print the sorted union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to store the union of the two input tuples\n    union_set = set(test_tup1) | set(test_tup2)\n\n    # Convert the set back to a tuple and sort it in ascending order\n    sorted_union = tuple(sorted(union_set))\n\n    # Print the sorted union\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize an empty set to store the union\n    union_set = set()\n    # Iterate over the first tuple\n    for elem in test_tup1:\n        # Add each element to the union set\n        union_set.add(elem)\n    # Iterate over the second tuple\n    for elem in test_tup2:\n        # Add each element to the union set if it doesn't already exist\n        if elem not in union_set:\n            union_set.add(elem)\n    # Convert the set to a list and sort it\n    union_list = sorted(list(union_set))\n    # Output the union list\n    print(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Initialize the empty set to store the union of the two tuples\n    union_set = set()\n    # Add all the elements of the first tuple to the union set\n    union_set.update(test_tup1)\n    # Add all the elements of the second tuple to the union set\n    union_set.update(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union_list = sorted(list(union_set))\n    # Print the union of the two tuples\n    print(sorted_union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set to store the unique elements of the two tuples\n    unique_elements = set(test_tup1 + test_tup2)\n    # Convert the set back to a tuple\n    unique_elements = tuple(unique_elements)\n    # Sort the tuple in ascending order\n    unique_elements = sorted(unique_elements)\n    # Print the sorted tuple\n    print(unique_elements)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Convert tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Combine the lists and sort them\n    combined_list = list1 + list2\n    combined_list.sort()\n    # Convert the sorted list back to a tuple\n    result_tuple = tuple(combined_list)\n    # Output the sorted tuple\n    print(\"The union of the elements of\", test_tup1, \"and\", test_tup2, \"is:\", result_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # concatenate the two tuples\n    combined_tup = test_tup1 + test_tup2\n\n    # convert the combined tuple to a set to remove duplicates and then back to a list\n    unique_list = list(set(combined_tup))\n\n    # sort the list in ascending order and print it\n    print(sorted(unique_list))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Create a set of elements from both tuples\n    union_set = set(test_tup1 + test_tup2)\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Concatenate the two tuples into a new tuple\n    merged_tup = test_tup1 + test_tup2\n\n    # Sort the merged tuple in ascending order\n    sorted_tup = sorted(merged_tup)\n\n    # Return the sorted tuple\n    return sorted_tup"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(i, len(lst)):\n            sublist.append(lst[j])\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n\n    # Initialize variables to keep track of the current and longest sublists\n    current_sublist = []\n    longest_sublist = []\n\n    # Iterate over the list and add elements to the current sublist as long as they are longer than the longest sublist\n    for element in lst:\n        if len(current_sublist) == 0 or len(current_sublist) + 1 < len(longest_sublist):\n            current_sublist.append(element)\n        else:\n            longest_sublist = current_sublist\n            current_sublist = [element]\n\n    # If the current sublist is longer than the longest sublist, add it to the longest sublist\n    if len(current_sublist) > len(longest_sublist):\n        longest_sublist = current_sublist\n\n    # Return the length of the longest sublist\n    return len(longest_sublist)"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  # initialize max_length to 0\n    for i in range(len(lst)):  # loop through the list\n        for j in range(i, len(lst)):  # loop through the list starting from i\n            sublist = lst[i:j+1]  # get the sublist between i and j\n            length = len(sublist)  # calculate the length of the sublist\n            if length > max_length:  # if the length of the sublist is greater than max_length\n                max_length = length  # update max_length\n    return max_length  # return the max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n\n    # Iterate through the list\n    for item in lst:\n        # Update the current length of the sublist\n        current_length += 1\n\n        # Check if the current length is greater than the maximum length\n        if current_length > max_length:\n            max_length = current_length\n\n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as input and returns the maximum length of any sublists in the list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sub_list = lst[i:j]\n            if len(sub_list) > max_length:\n                max_length = len(sub_list)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    # initialize a variable to keep track of the length of the longest sublist\n    max_length = 0\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # initialize a variable to keep track of the length of the current sublist\n        length = 1\n\n        # loop through the remaining elements of the list\n        for j in range(i+1, len(lst)):\n            # add the length of the current element to the length of the sublist\n            length += 1\n\n            # if the length of the sublist is greater than the maximum length, update the maximum length\n            if length > max_length:\n                max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    '''\n    This function takes a list as an input and returns the length of the longest sublist in the list.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j - i <= max_length:\n                break\n            max_length = max(max_length, j - i)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    for i in range(len(lst)):\n        sub_lst = lst[i:]\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maxLength = 0\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(i+1, len(lst)+1):\n            sublist.append(lst[j-1])\n        maxLength = max(maxLength, len(sublist))\n    return maxLength"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"([^\\\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?[^\\\\]\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"Hello, I'm John, I live in 'New York'\"\nvalues = extract_values(text)\nprint(values) # Output: ['New York']"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*?)(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'(\"(?:\\\\.|[^\"])*\")'\n    # Use the re.findall() function to find all matches in the text\n    values = re.findall(pattern, text)\n    # Remove the quotation marks from the values\n    return [value.strip('\"') for value in values]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n    list: A list of extracted values.\n\n    Example:\n    >>> extract_values(\"He said, 'Hello, world!'\")\n    ['Hello, world!']\n\n    >>> extract_values(\"I have a cat named 'Max'\")\n    ['Max']\n\n    >>> extract_values(\"The price of the car is $10000\")\n    ['10000']\n\n    >>> extract_values(\"The price of the car is $10,000\")\n    ['10000']\n\n    >>> extract_values(\"The price of the car is $10.000\")\n    ['10000']\n\n    >>> extract_values(\"The price of the car is $10.000,00\")\n    ['10000']\n    \"\"\"\n\n    # Find all occurrences of double-quoted strings in the input text\n    matches = re.findall(r\"'([^']*)'\", text)\n\n    # Extract the values between quotation marks\n    values = [match.strip(\"'\") for match in matches]\n\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"((?:[^\"\\\\]|\\\\.)*?)\"')\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'\"(?:[^\"\\\\]|\\\\.)*\"'\n    # Use the regular expression search function to find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n    # Remove any enclosing double quotes from each value found by the regular expression search\n    values = [match[1:-1] for match in matches]\n    # Return the list of values found\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    # Define the regular expression pattern to match values between quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]*)\"'\n    \n    # Use the pattern to find all matches in the text\n    matches = re.findall(pattern, text)\n    \n    # Extract the values and return them as a list\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\b(\".*?\"|\\'[^\\']*\\')\\b'\n    values = re.findall(pattern, text)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    # initialize count to 0\n    count = 0\n    # iterate through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # check if the elements are not equal\n            if arr[i]!= arr[j]:\n                # increment count\n                count += 1\n    # return the count\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # sort the array in ascending order\n    arr.sort()\n\n    # initialize two pointers\n    i = 0\n    j = n - 1\n\n    # initialize a counter\n    count = 0\n\n    # loop through the array until i > j\n    while i <= j:\n        # if the current element is equal to the next element, increment the counter and move both pointers\n        if arr[i] == arr[j]:\n            count += 1\n            i += 1\n            j -= 1\n        # if the current element is less than the next element, move the right pointer to the next element\n        elif arr[i] < arr[j]:\n            i += 1\n        # if the current element is greater than the next element, move the left pointer to the next element\n        else:\n            j -= 1\n\n    # return the count of pairs\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n):\n    # Count the number of pairs in the list\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n\n    # Create an empty list to store the characters\n    characters = []\n\n    # Loop through each character in the string\n    for char in word: \n        # Add the character to the list\n        characters.append(char)\n\n    # Return the list of characters\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    This function takes a word as input and returns a list of its characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string to get a list of its digits\n    digits = list(str(n))\n    # Initialize the sum to 0\n    total = 0\n    # Iterate over the digits and add each digit to the sum\n    for digit in digits:\n        total += int(digit)\n    # Return the sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # initialize a variable to hold the sum of the digits\n    total = 0\n    \n    # loop through each digit of the number\n    while n > 0:\n        # add the current digit to the total\n        total += n % 10\n        \n        # remove the current digit from the number\n        n //= 10\n    \n    # return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each digit of the number\n    while n > 0:\n        # Get the rightmost digit of the number\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the rightmost digit from the number\n        n //= 10\n        \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Loop through each character in the string\n    for digit in s:\n        # Convert the character to an integer and add it to the sum\n        sum_digits += int(digit)\n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Initialize the sum variable to zero\n    sum = 0\n    \n    # Loop through each character in the string\n    for char in num_str:\n        # Convert the character to an integer and add it to the sum\n        sum += int(char)\n    \n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # convert the integer to a string and iterate over its characters\n    total = 0\n    for digit in str(n):\n        total += int(digit)\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function checks whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if all(list1[i] <= list1[i+1] for i in range(len(list1)-1)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as an argument and returns True if the list is sorted in ascending order and False otherwise.\n    \"\"\"\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    This function checks whether a specified list is sorted or not.\n    '''\n\n    if len(list1) == 0 or len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in list1\n    for sublist in list1:\n        # sort the sublist\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # loop through each sublist in the list of lists\n    for sublist in list1:\n        # convert the sublist to a list of strings\n        sublist_strings = [str(x) for x in sublist]\n        # sort the sublist of strings\n        sublist_strings.sort()\n        # convert the sorted sublist of strings back to a list of integers\n        sublist = [int(x) for x in sublist_strings]\n        # update the sublist in the original list of lists\n        list1[list1.index(sublist)] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of numbers and returns a list of unique numbers.\n    '''\n\n    # Convert the list to a set to remove duplicates\n    unique_nums = set(nums)\n\n    # Convert the set back to a list\n    result = list(unique_nums)\n\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list with all the duplicate numbers removed.\n    '''\n\n    # Initialize an empty list to store the unique numbers\n    unique_nums = []\n\n    # Iterate over each list in the input list of lists\n    for num_list in nums:\n\n        # Iterate over each number in the list\n        for num in num_list:\n\n            # If the number is not already in the unique_nums list, add it to the list\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    # Return the unique_nums list as the output\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    :param nums: A list of lists, where each sublist contains unique numbers.\n    :return: A list of lists, where each sublist contains unique and non-duplicate numbers.\n    \"\"\"\n    # Combine all the numbers in the list\n    combined_list = []\n    for sublist in nums:\n        combined_list.extend(sublist)\n\n    # Remove duplicates from the combined list\n    unique_list = list(set(combined_list))\n\n    # Split the unique list into two sublists\n    unique_list1 = unique_list[:len(unique_list)//2]\n    unique_list2 = unique_list[len(unique_list)//2:]\n\n    return [unique_list1, unique_list2]"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    This function takes a list of lists as input and returns a new list that contains all the unique \n    numbers from each input list.\n    '''\n    # Initialize an empty set to store unique numbers\n    unique_nums = set()\n    # Loop through each input list and add its unique numbers to the set\n    for lst in nums:\n        for num in lst:\n            unique_nums.add(num)\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Set to store unique numbers\n    unique_nums = []\n    # Iterate through each list in the input list\n    for num_list in nums:\n        # Iterate through each number in the current list\n        for num in num_list:\n            # If the number is not already in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicates from each list\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    # remove duplicates from the entire list\n    unique_nums = list(set(unique_nums))\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create a set to store the unique numbers\n    unique_nums = set()\n\n    # Loop through each list in the input list and add all the unique numbers to the set\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n\n    # Convert the set to a list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n\n    # Create a set from the input list to remove duplicates\n    unique_nums = set(list_data)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers as input and returns their product.\n    It first removes duplicates from the input list and then multiplies them together.\n    \"\"\"\n    unique_numbers = sorted(list(set(list_data)))\n    return 1 if len(unique_numbers) == 0 else unique_numbers[0] * unique_product(unique_numbers[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    This function takes a list of integers as input and calculates the product of its unique numbers.\n    '''\n    unique_numbers = set(list_data) # create a set of unique numbers in the list\n    product = 1 # initialize the product as 1\n    \n    # iterate through the unique numbers and multiply them with the product\n    for number in unique_numbers:\n        product *= number\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1 if len(unique_numbers) == 1 else reduce(lambda x, y: x * y, unique_numbers)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    # Initialize variables to store unique numbers and their multiplications\n    unique_nums = []\n    products = []\n\n    # Loop through the list of data and add unique numbers to unique_nums and their multiplications to products\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n            products.append(num)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    # Return the product of the unique numbers\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for num in list_data:\n        if num not in unique_list:\n            unique_list.append(num)\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_nums = []\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return 1 if len(unique_nums) == 0 else unique_nums[0] * unique_product(unique_nums[1:])"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Get the unique numbers in the list\n    unique_numbers = list(set(list_data))\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers\n    unique_set = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n    \n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h\n    print(\"The surface area of a cylinder is:\", area)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Compute the surface area of the cylinder using the formula:\n    #   A = 2 * pi * r * h\n    # where A is the surface area, pi is the mathematical constant pi, r is the radius of the cylinder,\n    # and h is its height.\n    A = 2 * math.pi * r * h\n    return A"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Formula to find surface area of a cylinder\n    surface_area = 2 * pi * r * h\n    \n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    s = 2 * math.pi * r * h\n    return s"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder using the formula:\n    # surface area = pi * r * r + 2 * pi * r * h + pi * h * h\n    surface_area = math.pi * r * r + 2 * math.pi * r * h + math.pi * h * h\n    \n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #Calculate the surface area of the cylinder using the formula:\n    #Surface area = 2*pi*r*h\n    surface_area = 2*3.14*r*h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * r * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function calculates the surface area of a cylinder.\n    '''\n    # calculate the surface area of the cylinder\n    surface_area = 2 * pi * r * h\n\n    # return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * h * h"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B): \n        return False \n    for i in range(len(A)-len(B)+1): \n        if A[i:i+len(B)] == B: \n            return True \n    return False "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B):\n    \"\"\"\n    This function takes two lists A and B as input.\n    It checks whether A is a sublist of B or not.\n    \"\"\"\n    if not A:\n        return True\n\n    for i in range(len(B)):\n        if A[0] == B[i]:\n            A = A[1:]\n            if not A:\n                return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B):\n    if len(A) > len(B):\n        return False\n    elif len(A) == len(B):\n        if A == B:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n        return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    for i in range(len(B)):\n        if A[0:len(B)][i]!= B[i]:\n            return False\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) >= len(B):\n        for i in range(len(A)):\n            if A[i] == B[i]:\n                return True\n        return False\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if both lists are empty\n    if not A or not B:\n        return False\n\n    # Check if the first element of the first list is present in the second list\n    if B[0] in A:\n        return is_Sub_Array(A[1:],B)\n\n    # If element not found in the second list, it cannot be a sublist of the first list\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # Check if B is a sublist of A\n    if all(B[i] in A for i in range(len(B))): \n        return True \n    else: \n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return A in B"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B):\n    # check if the length of B is greater than or equal to A\n    if len(B) >= len(A):\n        # iterate over the list A\n        for i in range(len(A)):\n            # check if the i-th element of B is present in A[i:]\n            if B[i] in A[i:]:\n                return True\n        # if all the elements of B are not present in A, return False\n        return False\n    else:\n        return \"Error: Length of B should be greater than or equal to length of A\""
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A: \n        return False\n    if not B: \n        return True\n    i,j = 0,0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i+=1\n            j+=1\n        elif A[i] < B[j]:\n            i+=1\n        else:\n            j+=1\n    if i==len(A) and j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize a variable to store the factorial of n\n    factorial = 1\n\n    # Loop through the digits of n and calculate the factorial\n    for digit in str(n):\n        factorial *= int(digit)\n\n    # Find the last digit of the factorial and return it\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n    # compute factorial\n    for i in range(1, n+1):\n        factorial *= i\n    # find last digit\n    while factorial > 0:\n        last_digit = factorial % 10\n        factorial //= 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # Initialize result variable\n    result = 0\n    \n    # Calculate factorial of n\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # Find last digit of factorial\n    last_digit = int(factorial/10)\n    \n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Finding the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Finding the last digit in the factorial\n    last_digit = int(factorial % 10)\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert n to string\n    s = str(n)\n    # get the last digit of the string\n    last_digit = int(s[-1])\n    # calculate the factorial of the first n-1 digits\n    factorial = 1\n    for i in range(1, n):\n        factorial *= i\n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    # Convert the number to a string to extract its last digit\n    last_digit = str(n)[-1]\n    return int(last_digit)\n"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of the factorial\n    last_digit = 0\n    \n    # calculate the factorial of the given number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    \n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    \n    # return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n!= 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    while n > 0:\n        factorial *= n\n        n -= 1\n    return factorial % 10"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Loop through each list and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n        \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    while i < len(list2):\n        result.append(list2[i])\n        i += 1\n    while i < len(list3):\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): list to be interleaved with list2 and list3\n        list2 (list): list to be interleaved with list1 and list3\n        list3 (list): list to be interleaved with list1 and list2\n\n    Returns:\n        list: a single flat list containing all elements of list1, list2, and list3\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n\n    # Loop through each element of the lists\n    for i in range(len(list1)):\n        # Append the element at index i from list1 to the result list\n        result.append(list1[i])\n\n        # Append the element at index i from list2 to the result list\n        result.append(list2[i])\n\n        # Append the element at index i from list3 to the result list\n        result.append(list3[i])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through the lists\n    for i in range(len(list1)):\n        # Append the elements of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n        # Append the element of the second list to the interleaved list\n        interleaved_list.append(list2[i])\n        # Append the element of the third list to the interleaved list\n        interleaved_list.append(list3[i])\n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    while i < len(list1):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Get the length of the input lists\n    length1 = len(list1)\n    length2 = len(list2)\n    length3 = len(list3)\n    # Calculate the total length of the output list\n    total_length = length1 + length2 + length3\n    # Initialize an empty list to store the output\n    output_list = []\n    # Initialize a variable to keep track of the current index in the output list\n    index = 0\n    # Loop through each input list and append its elements to the output list in order\n    while index < total_length:\n        output_list.append(list1[index % length1])\n        output_list.append(list2[index % length2])\n        output_list.append(list3[index % length3])\n        index += 1\n    # Return the output list\n    return output_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    return list(set(test_tup1) - set(test_tup2)) + list(set(test_tup2) - set(test_tup1))"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create two empty lists to store the dissimilar elements\n    dissimilar_list1 = []\n    dissimilar_list2 = []\n\n    # Loop through each element in the first tuple\n    for element1 in test_tup1:\n        # Check if the element is present in the second tuple\n        if element1 not in test_tup2:\n            # If it's not, append it to the dissimilar list for tuple 1\n            dissimilar_list1.append(element1)\n\n    # Loop through each element in the second tuple\n    for element2 in test_tup2:\n        # Check if the element is present in the first tuple\n        if element2 not in test_tup1:\n            # If it's not, append it to the dissimilar list for tuple 2\n            dissimilar_list2.append(element2)\n\n    # Return both lists of dissimilar elements\n    return dissimilar_list1, dissimilar_list2"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_list.append(element)\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # create a set of all elements in the first tuple\n    set1 = set(test_tup1)\n    # create a set of all elements in the second tuple\n    set2 = set(test_tup2)\n    # find the elements in set1 that are not in set2\n    dissimilar_set = set1.symmetric_difference(set2)\n    # convert the dissimilar set to a list and return it\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # iterate through both tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n\n    # return the list of dissimilar elements\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns the elements that are present in the first tuple but not in the second tuple.\n    \"\"\"\n    dissimilar = []\n    for elem in test_tup1:\n        if elem not in test_tup2:\n            dissimilar.append(elem)\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    \n    return dissimilar_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    def remove_uneven(item):\n        if isinstance(item, tuple):\n            return tuple(remove_uneven(sub_item) for sub_item in item)\n        elif isinstance(item, list):\n            return [remove_uneven(sub_item) for sub_item in item]\n        elif isinstance(item, set):\n            return set(remove_uneven(sub_item) for sub_item in item)\n        elif isinstance(item, str):\n            return ''.join(remove_uneven(char) for char in item)\n        else:\n            return even_fnc(item)\n    \n    return remove_uneven(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    # loop through each element in the nested tuple\n    for tup in test_tuple:\n        # if the element is a tuple, call the even_fnc function recursively\n        if isinstance(tup, tuple):\n            test_tuple.remove(tup)\n            even_ele(tup, even_fnc)\n        # if the element is a list, call the even_fnc function recursively on each sublist\n        elif isinstance(tup, list):\n            for sublist in tup:\n                if isinstance(sublist, tuple):\n                    test_tuple.remove(sublist)\n                    even_ele(sublist, even_fnc)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            item = even_ele(item, even_fnc)\n        elif isinstance(item, list):\n            item = even_ele(item, even_fnc)\n        elif isinstance(item, int):\n            if even_fnc(item):\n                new_tuple.append(item)\n        else:\n            pass\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # initialize a list to hold the even elements \n    even_list = []\n\n    # iterate through each element in the nested tuple \n    for item in test_tuple: \n        # if the item is an even number, append it to the even_list \n        if even_fnc(item): \n            even_list.append(item) \n\n    # return the even list \n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            even_list.extend(even_fnc(i))\n        else:\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_tuple.append(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_tuple.append(item)\n        else:\n            pass\n    return even_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize a variable to keep track of the even elements\n    even_elements = []\n\n    # loop through each element in the tuple\n    for element in test_tuple:\n        # check if the element is even\n        if even_fnc(element):\n            # add even elements to a new list\n            even_elements.append(element)\n        else:\n            # if the element is odd, do nothing\n            pass\n\n    # return the even elements in a tuple\n    return tuple(even_elements)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        if len(test_tuple) > 0:\n            if isinstance(test_tuple[0], tuple):\n                return tuple(filter(lambda x: even_fnc(x), test_tuple[0])) + (even_ele(test_tuple[1:], even_fnc),)\n            else:\n                return tuple(filter(lambda x: even_fnc(x), test_tuple)) + (even_ele(test_tuple[1:], even_fnc),)\n        else:\n            return ()\n    else:\n        return test_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # initialize a new empty list to hold the even elements\n    even_list = []\n\n    # iterate through each element in the nested mixed tuple\n    for item in test_tuple:\n        # if the item is a tuple, recursively call the function\n        if isinstance(item, tuple):\n            even_list += even_ele(item, even_fnc)\n        # if the item is an odd number, add it to the even_list\n        elif even_fnc(item):\n            even_list.append(item)\n\n    # return the even_list\n    return even_list\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if type(i) == tuple:\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # calculate the surface area of the pyramid using Heron's formula\n    h = s/2 # height is half of the base edge\n    return 6*b*h + 6*s*b - 3*(b**2 + s**2) # subtracting the area of the base from the other sides"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5*b*s*s\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b**2 + s**2)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b*s)+(s*s)+(b*s)+(b*s)+(b*s)+(b*s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b**2) + 4 * b * s + 2 * s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # Calculate the surface area of a single side of the pyramid\n    area_of_single_side = 2 * b * s\n    \n    # Calculate the total surface area of the pyramid\n    surface_area = area_of_single_side * 4\n    \n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (base**2)*(3*height**2)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 6*b*s + 2*b*b + 6*s*s"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + ((b * s) * 4) / 3\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a Python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    # Calculate the height of the pyramid using the given base edge and height\n    h = s/b\n\n    # Calculate the surface area of each triangle using Heron's formula\n    area = (s*b**2 + b*h**2 + h*s**2) / 2\n\n    # Return the surface area of the pyramid\n    return area"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n\n    :param dict1: A dictionary to check if it's empty\n    :type dict1: dict\n\n    :return: True if the dictionary is empty, False otherwise\n    :rtype: bool\n    \"\"\"\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not any(dict1.values()):\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num % 2 == 0:\n        return catalan_number(num//2) + catalan_number(num//2)\n    else:\n        return catalan_number((num-1)//2) + catalan_number((num-1)//2) + catalan_number((num-1)//2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    '''\n    Write a function which returns the nth catalan number.\n    '''\n    catalan_numbers = [0] * (n+1)\n    catalan_numbers[0] = 1\n    catalan_numbers[1] = 1\n    for i in range(2, n+1):\n        catalan_numbers[i] = i * catalan_numbers[i-1] * (2*i-1) // (i)\n    return catalan_numbers[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        catalan_list = [0] * (n + 1)\n        catalan_list[0] = 1\n        for i in range(2, n + 1):\n            catalan_list[i] = (i * catalan_list[i - 1]) / (i - 1)\n        return catalan_list[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    This function calculates the nth catalan number using the formula:\n    C(n,k) = (n+1)! / (k!*(n-k)!)\n    \n    Where n is the number of items in the set, and k is the number of selected items.\n    \"\"\"\n    return (num + 1) * binomial(num, 2) / (num * binomial(num - 1, 2))\n\ndef binomial(n, k):\n    \"\"\"\n    This function calculates the binomial coefficient using the formula:\n    C(n,k) = (n+1)! / (k!*(n-k)!)\n    \n    Where n is the number of items in the set, and k is the number of selected items.\n    \"\"\"\n    return math.factorial(n) // math.factorial(k) // math.factorial(n - k)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 * (n - 1)) * catalan_number(n - 1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the n-th Catalan number using the formula:\n\n    C(n) = (2n)! / (n! (n-1)!).\n\n    The n-th Catalan number is defined as the number of ways of arranging n objects\n    into n different combinations, with the order of the objects not being important.\n    \"\"\"\n    return int(2 * n * (2 * n - 1) * (2 * n - 2) // (4 * (n - 1)))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns nth Catalan number.\n\n    Parameters:\n    n (int): The nth term of the Catalan series to be calculated.\n\n    Returns:\n    int: The nth term of the Catalan series.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return (2 * catalan_number(num-1)) / (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using math.comb().\n    \"\"\"\n    from math import comb\n\n    return comb(2*n, n)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    for i, adverb in enumerate(adverbs):\n        print(f'The position of \"{adverb}\" is at index {i}.')\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\bly\\b'\n    \n    # Use the `re.findall()` function to find all non-overlapping matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n    \n    # Print the positions and lengths of the matches\n    for i in range(len(matches)):\n        print('Match %d: %d characters long' % (i+1, len(matches[i])))\n        print('Positions: %s' % matches[i])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use re.findall() function to find all occurrences of the pattern in the given text\n    matches = re.findall(pattern, text)\n\n    # Initialize a list to store the positions of the matches\n    positions = []\n\n    # Loop through the matches and append their positions to the positions list\n    for match in matches:\n        positions.append(text.index(match))\n\n    # Return a list of tuples containing the positions and the matches\n    return [(position, match) for position, match in zip(positions, matches)]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(ly)\\b\\w*[-.]\\w*\\s*$'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b(?:(?:re|ly|might|should|could|would|must|will|shall|may|can|may|should|shall|can|must|would|could|should|might|may|must|will|shall|can|can\\'t|shouldn\\'t|wouldn\\'t|shouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|willn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn\\'t|wouldn\\'t|mustn\\'t|wouldn\\'t|mustn\\'t|couldn\\'t|should\\'ve|might\\'ve|shouldn"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b([aeiou].*[aeiou])\\s*ly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(text.find(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with \"ly\" and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    \"\"\"\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    \"\"\"\n    adverbs = re.findall(r'(\\bly\\b)', text)\n    positions = []\n    for i, adv in enumerate(adverbs):\n        positions.append((i, len(adv) - 2))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to find adverbs ending with ly\n    pattern = r'\\bly\\b'\n\n    # Use the re.findall() method to find all the positions of adverbs ending with ly in the text\n    positions = re.findall(pattern, text)\n\n    # Iterate over the positions and print the adverbs ending with ly and their positions\n    for position in positions:\n        print(text[position-2:position+2])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # use regular expression to find adverbs ending with ly\n    pattern = r'\\b(ly)$'\n    adverbs = re.findall(pattern, text)\n\n    # create a list of adverb positions\n    positions = []\n    for i, adverb in enumerate(adverbs):\n        positions.append((i, text.index(adverb)))\n\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min-heap of the first n items\n    min_heap = heapq.nsmallest(n, items)\n    \n    # Iterate over the remaining items and update the min-heap\n    for item in items[n:]:\n        heapq.heappushpop(min_heap, item)\n    \n    # Return the min-heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Sort the items by price in ascending order\n    sorted_items = sorted(items, key=lambda x: x['price'])\n\n    # Create a min heap of size n to store the n most expensive items\n    heap = []\n\n    # Add the first n items to the heap\n    for item in sorted_items[:n]:\n        heapq.heappush(heap, item)\n\n    # Iterate over the remaining items in the dataset and add them to the heap\n    for item in sorted_items[n:]:\n        if item['price'] < heap[0]['price']:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min heap of size n to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n    # Iterate over the remaining items in the dataset and update the min heap accordingly\n    for i in range(n, len(items)):\n        if items[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, items[i])\n    # Extract the n most expensive items from the min heap\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(min_heap))\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items: list of tuples containing the (price, item) of each item in the dataset.\n    n: the number of items to return.\n\n    Returns:\n    A list of tuples containing the (price, item) of the n most expensive items in the dataset.\n    \"\"\"\n\n    # Create a min heap of size n to store the n most expensive items\n    max_heap = []\n    for i in range(n):\n        max_heapq.heappush(max_heap, items[i][0])\n\n    # Iterate through the remaining items and update the max heap if necessary\n    for i in range(n, len(items)):\n        if items[i][0] > max_heap[0]:\n            max_heapq.heappop(max_heap)\n            max_heapq.heappush(max_heap, items[i][0])\n\n    # Return the max heap as a list of tuples\n    return [max_heapq.heappop(max_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n\n    Args:\n    items: A list of tuples, where each tuple contains an item and its cost.\n    n: The number of most expensive items to be found.\n\n    Returns:\n    A list containing the n most expensive items from the given dataset.\n    \"\"\"\n    # Sort the items by cost in ascending order\n    items.sort(key=lambda x: x[1])\n\n    # Extract the n most expensive items from the sorted list\n    result = [x[0] for x in items[:n]]\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of size n\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop())\n\n    # Add all remaining items to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items in the heap\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Initialize an empty heap to store the n most expensive items\n    heap = []\n\n    # Insert the first n items into the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n\n    # Remove the smallest item from the heap and add the next smallest item to it\n    # Repeat until the heap has only n items\n    for i in range(n, len(items)):\n        # Remove the smallest item from the heap\n        item = heapq.heappop(heap)\n        # Add the next smallest item to the heap\n        heapq.heappush(heap, items[i])\n\n    # Return the n most expensive items in the heap\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Write a function to find the n most expensive items in a given dataset.\n    \"\"\"\n    # Create a min heap of n items\n    min_heap = []\n    for i in range(n):\n        min_heap.append((items[i], i))\n\n    # Build the min heap of size n-1\n    for i in range(n-1, 0, -1):\n        if items[i] < min_heap[0][0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, (items[i], i))\n\n    # Return the n most expensive items\n    result = []\n    for i in range(n):\n        result.append(min_heap[0][1])\n\n    return result"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    :param items: a list of (price, item) tuples\n    :param n: the number of items to find\n    :return: a list of the n most expensive items\n    \"\"\"\n\n    # Use a max heap to keep track of the top n most expensive items\n    heap = []\n    for price, item in items:\n        heapq.heappush(heap, (price, item))\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Extract the n most expensive items from the heap\n    result = [heapq.heappop(heap)[1] for _ in range(n)]\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list.\"\n    else:\n        return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return None\n    else:\n        first_part = l[:n]\n        second_part = l[n:]\n        return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list at the nth element\n    a, b = l[:n], l[n:]\n    # Concatenate the two parts and return the result\n    return a + b"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Error: n is greater than the length of the list\"\n\n    if n == 0:\n        return [l[0]]\n\n    result = []\n    for i in range(n):\n        result.append(l[i])\n\n    first = l[n:]\n    result += first\n\n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        return None\n    \n    # Split the list at the nth element\n    split_point = n\n    new_list = l[:split_point] + l[split_point:]\n    \n    # Add the first part of the list to the end\n    result = l[:split_point] + [new_list[0]] + new_list[1:]\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l) or n <= 0:\n        print(\"Error: The second argument must be a positive integer less than or equal to the length of the list.\")\n        return\n    else:\n        l.extend(l[:n])\n        return l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if n > len(l):\n        print(\"Error: index out of range\")\n        return l\n    if n < 1:\n        print(\"Error: index out of range\")\n        return l\n    return [l[n-1]] + l[:n-1]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0 or n > len(l):\n        return None\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # create an empty list to store the first part of the list\n    first_part = []\n    \n    # loop through the list from the beginning to the nth element\n    for i in range(n):\n        # append the current element to the first_part list\n        first_part.append(l[i])\n        \n    # add the remaining elements from the nth element to the end of the list\n    last_part = l[n:]\n    \n    # concatenate the two parts of the list and return the result\n    return first_part + last_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    mid = n - 1 # find middle element of list\n    first_part = l[:mid] # first part of list is from 0 to mid-1\n    second_part = l[mid+1:] # second part of list is from mid+1 to end\n    return first_part + second_part"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Find the difference between largest and smallest value in the sorted list\n    diff = nums[-1] - nums[0]\n    \n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the largest and smallest values in the list\n    max_num = max(nums)\n    min_num = min(nums)\n\n    # Calculate the difference between the two values\n    diff = max_num - min_num\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return abs(largest - smallest)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    max_num = max(nums)\n    min_num = min(nums)\n    diff = max_num - min_num\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Find the maximum value in the list\n    max_val = max(nums)\n    # Find the minimum value in the list\n    min_val = min(nums)\n    # Find the difference between the two values\n    diff = max_val - min_val\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    return max(nums) - min(nums)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # loop through all the numbers between a and b\n    for num in range(a, b+1):\n        # check if num is a perfect square\n        if num == int(num**0.5)**2:\n            print(num)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store the perfect squares\n    squares = []\n\n    # Loop through the range of numbers between a and b\n    for i in range(a, b+1):\n        # Check if the square of i is equal to i\n        if i * i == i:\n            # If it is, add it to the list of perfect squares\n            squares.append(i)\n\n    # Return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize two variables to store the first and last perfect squares\n    first_square = 0\n    last_square = 0\n    # Loop through all numbers from a to b\n    for num in range(a, b+1):\n        # Calculate the square of the current number\n        square = num * num\n        # Check if the square is a perfect square by checking if the sum of the squares of its digits is a perfect square\n        if is_perfect_square(square):\n            # If the square is a perfect square, check if it is greater than the current first perfect square\n            if square > first_square:\n                first_square = square\n            # Check if the square is less than or equal to the current last perfect square\n            if square <= last_square:\n                # If the square is less than or equal to the current last perfect square, update the last perfect square to be the square of the current number\n                last_square = square\n    # Print the first and last perfect squares\n    print(\"First Perfect Square:\", first_square)\n    print(\"Last Perfect Square:\", last_square)\n\n\ndef is_perfect_square(num):\n    '''\n    Check if a given number is a perfect square by checking if the sum of the squares of its digits is a perfect square.\n    '''\n    # Convert the number to a string and split it into a list of digits\n    digits = [int(digit) for digit in str(num)]\n    # Initialize the sum of the squares of the digits to 0\n    sum_squares = 0\n    # Loop through all digits in the list\n    for digit in digits:\n        # Calculate the square of the current digit\n        digit_square = digit * digit\n        # Add the square of the digit to the sum of the squares of the digits\n        sum_squares += digit_square\n    # Check if the sum of the squares of the digits is a perfect square\n    return is_perfect_square(sum_squares)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a list of perfect squares between a and b\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            squares.append(i)\n    # return the list of perfect squares\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Initialize a list to store the perfect squares\n    squares = []\n\n    # Loop through all numbers between a and b, including a and b\n    for i in range(a, b+1):\n        # Check if i is a perfect square\n        if i*i == i:\n            # If it is, add it to the list of perfect squares\n            squares.append(i)\n\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i**2\n        if square == i:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = i * i\n        if square == i:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a), int(b)+1):\n        square = i**2\n        if i == int(i**0.5)**2:\n            print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i**2 == a:\n            return i\n        elif i**2 == b:\n            return i\n        elif i**2 > a and i**2 < b:\n            return i"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    This function takes two numbers a and b as input and returns the count of perfect squares between them.\n    \"\"\"\n    # create an empty list to store the count of perfect squares\n    count = []\n    # iterate through the range of numbers between a and b\n    for num in range(a, b+1):\n        # check if the number is a perfect square\n        square = num**0.5\n        if square == int(square):\n            # if it is, add 1 to the count list\n            count.append(1)\n        else:\n            # otherwise, divide the number by the square root and round down to the nearest integer\n            count.append(int(num/square))\n    # return the count list\n    return count"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n\n    # Convert polar coordinates to cartesian coordinates\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    \n    # Convert cartesian coordinates to rectangular coordinates\n    x_rect = r * cmath.cos(theta)\n    y_rect = r * cmath.sin(theta)\n    \n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    \"\"\"\n    Convert polar coordinates (r,theta) to rectangular coordinates.\n\n    Args:\n    r (float): Polar radius.\n    theta (float): Polar angle in radians.\n\n    Returns:\n    tuple: (x,y) in rectangular coordinates.\n    \"\"\"\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return (x,y)\n"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    \n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # Convert r and theta to radians\n    r_rad = cmath.radians(r)\n    theta_rad = cmath.radians(theta)\n\n    # Calculate the x and y components of the rectangular coordinates\n    x = r * cmath.cos(theta_rad)\n    y = r * cmath.sin(theta_rad)\n\n    # Return the rectangular coordinates\n    return (x.real, y.real)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle of the polar coordinate (in radians).\n\n    Returns:\n    x (float): The x-coordinate of the rectangular coordinate.\n    y (float): The y-coordinate of the rectangular coordinate.\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    This function converts polar coordinates (radius, angle) to rectangular coordinates.\n    '''\n    # Calculate the rectangular coordinates using the formula:\n    # x = r*cos(theta)\n    # y = r*sin(theta)\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.phase(x + y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return (x_rect.real, x_rect.imag, y_rect.real, y_rect.imag)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    # Checking if the list has at least two elements\n    if len(newList) < 2:\n        return \"List must have at least two elements\"\n    \n    # Swapping the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    if len(newList) < 2: \n        print(\"The list should have at least two elements\")\n    else: \n        # swapping the first and last element of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n\n        # printing the modified list\n        print(\"Modified List:\", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    This function takes a list as input and swaps the first and last elements in the list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Get the length of the list\n    length = len(newList)\n\n    # If the list has only one element, return the list\n    if length == 1:\n        return newList\n\n    # If the list has two or more elements, swap the first and last elements\n    else:\n        # Swap the first and last elements\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n\n        # Return the modified list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Find the length of the list\n    length = len(newList)\n    \n    # If the length of the list is less than 2, it cannot be swapped\n    if length < 2:\n        return \"The length of the list must be greater than 1.\"\n    \n    # Otherwise, interchange the first and last elements of the list\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    \n    # Return the modified list\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    # Check if the list is not empty and has at least two elements\n    if len(newList) <= 1:\n        return newList\n    \n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Create a new list with the first and last elements interchanged\n    newList = [last] + newList[:-1]\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"List should have at least two elements\")\n        return\n    \n    # get the last element of the list\n    lastElement = newList[-1]\n    \n    # remove the last element from the list\n    newList = newList[:-1]\n    \n    # add the last element to the beginning of the list\n    newList = [lastElement] + newList\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n, k):\n    if n == 0 or k == 0:\n        return 1\n    if k > n:\n        return 0\n\n    count = 0\n    for i in range(k, n + 1):\n        count += i\n\n    return count"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    \"\"\"\n    Computes the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < k or n < 0 or k < 0:\n        raise ValueError(\"Invalid input: n and k must be non-negative integers.\")\n\n    if n == k:\n        return 1\n\n    if k == 0 or n == k-1:\n        return 1\n\n    if n-k > 0:\n        return binomial_Coeff(n-k,k)\n\n    if n-k == 0:\n        return 1\n\n    a = binomial_Coeff(n-k-1,k-1)\n    b = binomial_Coeff(n-k,k)\n\n    return a + b"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k):\n        result *= (n-i)\n        result //= i+1\n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # find the sum of the consecutive binomial coefficients\n    sum_binomial_coeffs = 0\n    for i in range(1,k+1):\n        for j in range(1,i+1):\n            sum_binomial_coeffs += (n-j+1)*binomial_Coeff(n-i+1,j-1)\n\n    # return the sum of the consecutive binomial coefficients\n    return sum_binomial_coeffs"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > n or k < 0:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    if k == 1 or k == n-1:\n        return n\n\n    binomial_coeff = 1\n    for i in range(k):\n        binomial_coeff *= (n-i)\n        binomial_coeff //= i+1\n\n    return binomial_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through all possible values of k\n    for i in range(k,n+1):\n        # Calculate the binomial coefficient of i and k\n        coeff = binomial(n,i)\n        # Multiply the binomial coefficient by (i-k+1) and add to the sum\n        sum += coeff*(i-k+1)\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k:\n        return 0\n    else:\n        return binomial_Coeff(n-1, k-1) + n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0: \n        return 0\n    elif k == 0 or k == n: \n        return 1\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n < k or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n\n    # Use regular expressions to match leading zeroes and remove them\n    ip = re.sub(r'^(0)+', '', ip)\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        for i in range(len(ip_list)):\n            if ip_list[i].startswith('0'):\n                ip_list[i] = ip_list[i][1:]\n        ip_string = '.'.join(ip_list)\n        return ip_string\n    else:\n        return 'Invalid IP Address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$'\n    if re.match(pattern, ip):\n        parts = ip.split('.')\n        new_ip = []\n        for part in parts:\n            if not part.startswith('0'):\n                new_ip.append(part)\n        return '.'.join(new_ip)\n    else:\n        return 'Invalid IP address format'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub(r'^0+(\\d)', r'\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^(0\\.)+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^\\s*0+', '', ip) # remove leading zeroes from the ip address\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # regex pattern to match leading zeros\n    pattern = r'^\\0+'\n    # replace leading zeros with empty string\n    ip = re.sub(pattern, '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+(?=\\d)', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+\\.0\\.0\\.0|\\d+\\.0\\.0\\.0$', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\D+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = odd_num = float('inf')\n\n    for num in list1:\n        if num % 2 == 0:\n            if num < even_num:\n                even_num = num\n        elif num > odd_num:\n            odd_num = num\n\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for num in list1:\n        if num % 2 == 0:\n            count += 1\n            if count == 1:\n                return num - list1[0]\n    return -1"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    This function takes a list as input and returns the difference of the first even and first odd numbers in the list.\n    '''\n    even_num = None\n    odd_num = None\n    \n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n    \n    if even_num is None:\n        return None\n    elif odd_num is None:\n        return None\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(lst):\n    even_num = lst[0]\n    odd_num = lst[1]\n    diff = even_num - odd_num\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(lst):\n    even = lst[0]\n    odd = lst[1]\n    return abs(even - odd)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    if even % 2 == 0:\n        diff = even - odd\n    else:\n        diff = odd - even\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    # Find the first even number\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            first_even = list1[i]\n            break\n\n    # Find the first odd number\n    for j in range(len(list1)):\n        if list1[j] % 2!= 0:\n            first_odd = list1[j]\n            break\n\n    # Find the difference between first even and first odd numbers\n    diff = first_even - first_odd\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = list1[0]\n    odd_num = list1[1]\n    \n    if even_num % 2 == 0:\n        return odd_num - even_num\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    diff = even - odd\n    return diff"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # converting the strings to binary numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # find the number of bits required for each number\n    bit_length1 = 0\n    while num1:\n        num1 = num1 >> 1\n        bit_length1 += 1\n\n    bit_length2 = 0\n    while num2:\n        num2 = num2 >> 1\n        bit_length2 += 1\n\n    # calculate the minimum number of swaps required\n    if bit_length1 < bit_length2:\n        num1, num2 = num2, num1\n        bit_length1, bit_length2 = bit_length2, bit_length1\n\n    swaps = 0\n    while num1!= num2:\n        num1, num2 = num1 >> 1, num2 >> 1\n        swaps += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings into lists of integers\n    lst1 = [int(i) for i in str1]\n    lst2 = [int(i) for i in str2]\n\n    # Initialize the minimum number of swaps required\n    min_swaps = 0\n\n    # Create a list to store the positions of bits that need to be swapped\n    swap_positions = []\n\n    # Iterate through each pair of bits in the binary strings\n    for i in range(len(lst1)):\n        # If the bits are not equal, add the position of the current bit to the swap_positions list\n        if lst1[i]!= lst2[i]:\n            swap_positions.append(i)\n\n    # Sort the swap_positions list in ascending order\n    swap_positions.sort()\n\n    # Iterate through the sorted list and swap the bits until the strings are equal\n    for i in range(len(swap_positions)):\n        # Swap the bits at the current position with the bits at the next position in the swap_positions list\n        lst1[swap_positions[i]], lst1[swap_positions[i] + 1] = lst1[swap_positions[i] + 1], lst1[swap_positions[i]]\n        lst2[swap_positions[i]], lst2[swap_positions[i] + 1] = lst2[swap_positions[i] + 1], lst2[swap_positions[i]]\n        # Increment the minimum number of swaps required\n        min_swaps += 1\n\n    # Return the minimum number of swaps required\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    #convert both binary strings to int\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    #initialize variables for swaps and count\n    swaps = 0\n    count = 0\n\n    #while num1 is not equal to num2\n    while num1!= num2:\n        #if num1 is greater than num2\n        if num1 > num2:\n            #count the number of times num2 needs to be shifted to bring num1 to the right\n            count = num2 - num1\n            #add the count to the swaps variable\n            swaps += count\n            #update num1 to be equal to num2\n            num1 = num2\n            #update num2 to be equal to num1\n            num2 = num1 + count\n        #if num1 is less than num2\n        else:\n            #count the number of times num1 needs to be shifted to bring num2 to the right\n            count = num1 - num2\n            #add the count to the swaps variable\n            swaps += count\n            #update num2 to be equal to num1\n            num2 = num1\n            #update num1 to be equal to num2\n            num1 = num2 + count\n\n    #return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n\n    # Convert strings to lists of binary digits\n    num1 = [int(i) for i in str1]\n    num2 = [int(i) for i in str2]\n\n    # Find the length of the smaller number\n    len1 = len(num1)\n    len2 = len(num2)\n    if len1 < len2:\n        smaller = num1\n        larger = num2\n    else:\n        smaller = num2\n        larger = num1\n\n    # Calculate the number of swaps required\n    swaps = 0\n    for i in range(len(smaller)):\n        if smaller[i]!= larger[i]:\n            swaps += 1\n\n    # Return the minimum number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2):\n    len1,len2 = len(str1),len(str2)\n    min_swap = 0\n    for i in range(len1):\n        if str1[i] == '1' and str2[i] == '0':\n            min_swap += 1\n        elif str1[i] == '0' and str2[i] == '1':\n            min_swap += 1\n    \n    return min_swap"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # converting the strings to binary\n    bin1 = bin(int(str1, 2))[2:]\n    bin2 = bin(int(str2, 2))[2:]\n    \n    # creating a dictionary to store the count of swaps for each digit\n    swap_count = {}\n    for i in range(len(bin1)):\n        if bin1[i]!= bin2[i]:\n            if bin1[i] in swap_count:\n                swap_count[bin1[i]] += 1\n            else:\n                swap_count[bin1[i]] = 1\n    \n    # finding the minimum number of swaps required\n    min_swaps = len(bin1)\n    for i in swap_count:\n        if swap_count[i] < min_swaps:\n            min_swaps = swap_count[i]\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # convert both binary numbers to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # check if num1 is greater than num2\n    if num1 > num2:\n        # swap num1 and num2\n        temp = num1\n        num1 = num2\n        num2 = temp\n\n    # set a flag to keep track of the number of swaps required\n    count = 0\n\n    # while num1 is not equal to 0, do the following:\n    while num1!= 0:\n        # find the least significant set bit in num1\n        bit = num1 & -num1\n\n        # divide num1 by 2 and count the number of swaps required\n        num1 -= bit\n        count += bit\n\n    # if num2 is greater than num1, add the difference between num2 and num1 to the count\n    if num2 > num1:\n        count += num2 - num1\n\n    # return the count of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of binary digits\n    binary_str1 = [str(int(x)) for x in str1]\n    binary_str2 = [str(int(x)) for x in str2]\n\n    # Find the length of the binary strings\n    n = len(binary_str1)\n\n    # Initialize the minimum number of swaps\n    min_swaps = float('inf')\n\n    # Loop through all possible combinations of the digits and check if they are the same\n    for i in range(2**n):\n        # Convert the binary digits back to binary strings\n        binary_str1_curr = [str(int(x)) for x in bin(i)[2:]]\n        binary_str1_curr = binary_str1_curr[:n]\n        binary_str2_curr = [str(int(x)) for x in bin(i)[2:]]\n        binary_str2_curr = binary_str2_curr[:n]\n\n        # Find the number of swaps required to convert binary_str1_curr to binary_str2_curr\n        count = 0\n        for j in range(n):\n            if binary_str1_curr[j]!= binary_str2_curr[j]:\n                count += 1\n\n        # Update the minimum number of swaps found so far\n        min_swaps = min(min_swaps, count)\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to lists of bits\n    bits1 = [int(bit) for bit in str1]\n    bits2 = [int(bit) for bit in str2]\n\n    # Find the length of the binary strings\n    m = len(bits1)\n    n = len(bits2)\n\n    # Initialize the minimum number of swaps to infinity\n    min_swaps = float('inf')\n\n    # Iterate through all possible swaps\n    for i in range(m):\n        for j in range(n):\n            # Swap bits i and j in the binary strings\n            temp = bits1[i]\n            bits1[i] = bits2[j]\n            bits2[j] = temp\n\n            # Check if the resulting binary string is equal to str2\n            if bits1 == bits2:\n                # If it is, count the number of swaps required\n                swaps = m + n - 2 * i - 2 * j\n                min_swaps = min(min_swaps, swaps)\n                break\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    n = len(str1)\n    swaps = 0\n    \n    for i in range(n):\n        if str1[i]!= str2[i]:\n            swaps += 1\n    \n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Get the size of the tuple using sys.getsizeof() function\n    size_of_tuple = sys.getsizeof(tuple_list)\n    # Return the size of the tuple in bytes\n    return size_of_tuple"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        # Calculate the size of each element in the tuple\n        size = sys.getsizeof(tuple_list[i])\n        # Add up the size of all elements in the tuple\n        total_size += size\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(tuple_list, tuple):\n        print(\"Error: Input is not a tuple!\")\n        sys.exit(1)\n    \n    # Find the size of each tuple element in bytes\n    size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        size += sys.getsizeof(item)\n    \n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # Define a function to calculate the size of a tuple in bytes\n    def tuple_size(t):\n        size = sys.getsizeof(t)\n        return size\n\n    # Calculate the size of the given tuple using the tuple_size function\n    size = tuple_size(tuple_list[0])\n\n    # Iterate through the remaining tuples and add their sizes to the total size\n    for t in tuple_list[1:]:\n        size += tuple_size(t)\n\n    # Return the total size of the tuple\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    import sys\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for item in tuple_list:\n        total_size += sys.getsizeof(item)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in tuple_list:\n        total_size += sys.getsizeof(i)\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 0:\n        return 0\n\n    size = sys.getsizeof(tuple_list[0])\n    for item in tuple_list[1:]:\n        size += sys.getsizeof(item)\n\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = 0\n    for i in range(len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes two sorted arrays and a value k as input and returns the kth smallest element.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i, j = 0, 0\n    for _ in range(k):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three arguments - an array of integers arr1, an array of integers arr2, and an integer k.\n    It returns the kth smallest element in the given arrays arr1 and arr2.\n    If the length of arr1 is greater than arr2, the function will return the kth smallest element in arr1.\n    If the length of arr2 is greater than arr1, the function will return the kth smallest element in arr2.\n    \"\"\"\n    # Find the length of the arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # If the length of arr1 is greater than arr2, swap the two arrays\n    if n1 > n2:\n        arr1, arr2 = arr2, arr1\n        n1, n2 = n2, n1\n\n    # Calculate the length of the larger array\n    n = n1 + n2\n\n    # Create two pointers to traverse the arrays\n    i = 0\n    j = 0\n\n    # Traverse the arrays using two pointers\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                k -= 1\n                i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                k -= 1\n                j += 1\n\n    # If one of the arrays is fully traversed, return the remaining elements\n    if i < n1:\n        return arr1[i:]\n    else:\n        return arr2[j:]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            else:\n                i += 1\n                k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            else:\n                j += 1\n                k -= 1\n    return \"Kth element not found\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n\n    # Find the length of the shorter array\n    length1 = len(arr1)\n    length2 = len(arr2)\n\n    # Initialize the index of the left subarray\n    left1, left2 = 0, 0\n\n    # Initialize the index of the right subarray\n    right = k - 1\n\n    # Find the length of the common subarray\n    while left1 < length1 and left2 < length2:\n        if arr1[left1] < arr2[left2]:\n            left1 += 1\n        elif arr1[left1] > arr2[left2]:\n            left2 += 1\n        else:\n            right -= 1\n            left1 += 1\n\n    # If the common subarray is longer than the kth element, find it recursively\n    if right < 0:\n        return find_kth(arr1, arr2, k)\n\n    # Otherwise, return the kth element\n    else:\n        return arr1[right+1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    # Initialize two pointers to the start of the arrays\n    i = 0\n    j = 0\n    # Initialize a variable to keep track of the count of elements in the merged array\n    count = 0\n    # Initialize the result array with empty list\n    result = []\n    # Loop until the count of elements in the merged array is equal to k\n    while count < k:\n        # Check if the element at index i of arr1 is smaller than or equal to the element at index j of arr2\n        if i < len(arr1) and j < len(arr2) and arr1[i] <= arr2[j]:\n            # If yes, add the element to the result array and increment the count\n            result.append(arr1[i])\n            count += 1\n            # Increment i\n            i += 1\n        elif i < len(arr1) and j >= len(arr2):\n            # If no, add the element at index i of arr1 to the result array and increment the count\n            result.append(arr1[i])\n            count += 1\n            # Increment i\n            i += 1\n        else:\n            # If no, add the element at index j of arr2 to the result array and increment the count\n            result.append(arr2[j])\n            count += 1\n            # Increment j\n            j += 1\n    # Return the result array\n    return result"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes three parameters - two sorted arrays and an integer k.\n    It returns the kth element from the given two sorted arrays.\n    \"\"\"\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n\n    i = 0\n    j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n        if i == k:\n            return arr1[i-1]\n        elif j == k:\n            return arr2[j-1]\n\n    if i == len(arr1):\n        return arr2[j-1]\n    else:\n        return arr1[i-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    kth_element = []\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            kth_element.append(arr1[i])\n            i += 1\n        elif arr1[i] > arr2[j]:\n            kth_element.append(arr2[j])\n            j += 1\n        else:\n            if i == len(arr1) - 1:\n                kth_element.append(arr2[j])\n            else:\n                kth_element.append(arr1[i])\n            i += 1\n            j += 1\n\n    while i < len(arr1):\n        kth_element.append(arr1[i])\n        i += 1\n\n    while j < len(arr2):\n        kth_element.append(arr2[j])\n        j += 1\n\n    kth_element.sort()\n    return kth_element[k - 1]\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three parameters - two sorted arrays (arr1 and arr2) and an integer (k).\n    It returns the kth smallest element from the two sorted arrays.\n\n    Time Complexity: O(n + m)\n    Space Complexity: O(1)\n    '''\n\n    # Find the length of both arrays\n    n = len(arr1)\n    m = len(arr2)\n\n    # Initialize two pointers i and j to 0\n    i = j = 0\n\n    # Initialize a variable kth_smallest to None\n    kth_smallest = None\n\n    # Iterate through both arrays until we reach the end of one of them\n    while i < n and j < m:\n        # If arr1[i] is smaller than arr2[j], then arr1[i] is the kth smallest element\n        if arr1[i] < arr2[j]:\n            # If kth_smallest is None, or arr1[i] is smaller than kth_smallest, update kth_smallest\n            if kth_smallest is None or arr1[i] < kth_smallest:\n                kth_smallest = arr1[i]\n                # If k has been found, return kth_smallest\n                if k == 1:\n                    return kth_smallest\n                k -= 1\n            # Increment i to find the next smallest element in arr1\n            i += 1\n        # If arr1[i] is greater than arr2[j], then arr2[j] is the kth smallest element\n        else:\n            # If kth_smallest is None, or arr2[j] is smaller than kth_smallest, update kth_smallest\n            if kth_smallest is None or arr2[j] < kth_smallest:\n                kth_smallest = arr2[j]\n                # If k has been found, return kth_smallest\n                if k == 1:\n                    return kth_smallest\n                k -= 1\n            # Increment j to find the next smallest element in arr2\n            j += 1\n\n    # If k has not been found in either of the arrays, return None\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            if k == 1:\n                return arr1[i]\n            elif k == len(arr1) + j:\n                return arr2[j]\n            k -= 1\n            i += 1\n        else:\n            if k == 1:\n                return arr2[j]\n            elif k == len(arr1) + j:\n                return arr1[i]\n            k -= 1\n            j += 1\n            \n    return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong_number(number):\n    num = int(number)\n    sum = 0\n    temp = num\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num_str = str(number)\n    num_len = len(num_str)\n    sum_of_squares = 0\n\n    for digit in num_str:\n        digit = int(digit)\n        sum_of_squares += digit ** num_len\n\n    return number == sum_of_squares"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    else:\n        sum = 0\n        temp = number\n        while temp > 0:\n            digit = temp % 10\n            sum += digit ** 3\n            temp //= 10\n        return number == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    def sum_of_digits(n):\n        \"\"\"\n        Return the sum of the digits of the given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(n))\n\n    for i in range(1, number + 1):\n        if sum_of_digits(i) == i:\n            return True\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(number):\n    \"\"\"\n    This function checks whether a given number is an armstrong number or not.\n    \"\"\"\n    # convert the number to a string\n    num_str = str(number)\n    # initialize the sum of the cubes of the digits\n    sum_of_cubes = 0\n    # loop through the digits of the number\n    for digit in num_str:\n        # calculate the cube of the digit\n        cube = int(digit) ** 3\n        # add the cube to the sum\n        sum_of_cubes += cube\n    # compare the sum with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    This function will check whether the given number is an Armstrong number or not.\n    '''\n    num = number\n    # find the sum of the cube of each digit in the number\n    while num > 0:\n        digit = num % 10\n        cube_of_digit = digit ** 3\n        sum_of_cubes += cube_of_digit\n        num //= 10\n    # check if the sum of the cube of each digit is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    temp = number\n    \n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** len(temp)\n        temp //= 10\n        \n    return number == str(sum)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize variable to store the sum of digits of the number\n    digit_sum = 0\n    # extract digits of the number\n    digits = [int(digit) for digit in str(number)]\n    # calculate the sum of digits of the number\n    for digit in digits:\n        digit_sum += digit ** len(digits)\n    # check whether the sum of digits of the number is equal to the original number\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Helper function to check if a number is an Armstrong number or not.\n    \"\"\"\n    sum = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return n == sum\n\ndef armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        digits = len(str(number))\n        result = True\n        for i in range(1, digits + 1):\n            temp = number // (10 ** (digits - i))\n            result = result and is_armstrong(temp)\n            if not result:\n                break\n        return result"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Initialize the sum of the cubes of the digits\n    sum_of_cubes = 0\n\n    # Loop through each digit in the number and add its cube to the sum\n    for digit in number_str:\n        digit_int = int(digit)\n        sum_of_cubes += digit_int ** 3\n\n    # Return True if the sum of the cubes of the digits is equal to the original number\n    return sum_of_cubes == number"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum and average of the first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    \n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        \n    average = sum / count\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        sum += i\n    \n    average = sum / number\n    \n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n\n    Parameters:\n    number (int): the number of natural numbers to compute the sum and average of\n\n    Returns:\n    A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n\n    # calculate the sum of the first n natural numbers\n    sum = sum(range(1, number+1))\n\n    # calculate the average of the first n natural numbers\n    average = sum / number\n\n    # return the tuple of (sum, average)\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(n):\n    \"\"\"\n    Given a positive integer n, return a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total / count\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # initialize variables\n    sum = 0\n    count = 0\n    total = 0\n\n    # loop through the first n natural numbers\n    for i in range(1, n+1):\n        sum += i\n        count += 1\n        total += i\n\n    # calculate the sum and average\n    average = sum / count\n\n    # print the result\n    print(f\"The sum is: {sum}\")\n    print(f\"The average is: {average}\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1):\n        total += i\n    average = total / n\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function calculates the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i\n        count += 1\n    average = total/count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    average = sum / n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(n):\n    sum = 0\n    count = 0\n    while count < n:\n        num = int(input(\"Enter a natural number: \"))\n        sum += num\n        count += 1\n    average = sum / n\n    return sum, average\n\nn = int(input(\"Enter the number of natural numbers to sum: \"))\nsum, average = sum_average(n)\nprint(\"Sum of the first\", n, \"natural numbers is:\", sum)\nprint(\"Average of the first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(f\"{n} is even.\")\n    else:\n        print(f\"{n} is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    If there are no repeated characters in the string, it returns None.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first character that appears more than once\n    for char in freq:\n        if freq[char] > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    This function finds the first repeated character in a given string.\n    '''\n\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate over each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the first character that appears twice\n        if char in freq and freq[char] > 1:\n            return char\n\n        # Otherwise, increment the frequency of the character in the dictionary\n        else:\n            freq[char] = freq.get(char, 0) + 1\n\n    # If no character appears twice, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first character that has a count greater than 1\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # Find the first repeated character\n    for char in freq:\n        if freq[char] == 2:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Returns the first repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = True"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n\n    :param str1: The given string.\n    :return: The first repeated character in the given string.\n    \"\"\"\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character\n    char_count = {}\n    \n    # loop through each character in the string\n    for char in str1:\n        # if the character already exists in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # if the character does not exist in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary to find the first repeated character\n    for char, count in char_count.items():\n        if count == 1:\n            print(\"The first repeated character is:\", char)\n            return\n            \n    # if no repeated character was found, print an error message\n    print(\"No repeated character was found.\")"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    for i in range(1, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lucid_nums.append(i)\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            ludic_list.append(2 * i)\n        else:\n            ludic_list.append(2 * i - 1)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    i = 1\n    while True:\n        if i <= n:\n            lucid_numbers.append(i)\n        else:\n            break\n        i += 1\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize an empty list to store the lucid numbers\n    lucid_list = []\n    # Iterate from 1 to n\n    for i in range(1, n+1):\n        # Check if the current number is a lucid number\n        is_lucid = True\n        for j in range(2, i):\n            # Check if the number is divisible by any number from 2 to i-1\n            if i % j == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, append it to the list\n        if is_lucid:\n            lucid_list.append(i)\n    # Return the list of lucid numbers\n    return lucid_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    i = 1\n    while i <= n:\n        if i % 2 == 0:\n            if i == 2:\n                ludic.append(i)\n            elif i == 4:\n                ludic.append(i)\n            else:\n                j = 3\n                while i * j <= n:\n                    if i * j % 2!= 0:\n                        ludic.append(i * j)\n                    j += 2\n        else:\n            j = 5\n            while i * j <= n:\n                if i * j % 2 == 0:\n                    ludic.append(i * j)\n                j += 2\n        i += 1\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0 and i % 5 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_nums = []\n    num = 1\n    while num <= n:\n        is_lucid = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_nums.append(num)\n        num += 1\n    return lucid_nums"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # Initialize the set of lucid numbers to empty set\n    lucid_set = set()\n    # Initialize a variable to keep track of the current number\n    num = 1\n    # Loop until the number is greater than n\n    while num <= n:\n        # Check if the number is a lucid number\n        is_lucid = True\n        # Loop from the current number to 1\n        for i in range(1, num+1):\n            # Check if the current number is a factor of num\n            if num % i == 0:\n                is_lucid = False\n                break\n        # If the number is a lucid number, add it to the set\n        if is_lucid:\n            lucid_set.add(num)\n        # Increment the current number\n        num += 1\n    # Return the set of lucid numbers\n    return lucid_set"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_set = set()\n    i = 1\n    while i <= n:\n        if i * i > n:\n            break\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                break\n        else:\n            lucid_set.add(i)\n        i += 1\n    return sorted(list(lucid_set))"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = []\n    for word in words:\n        reversed_words.append(word[::-1])\n    return \" \".join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # iterate over the words in reverse order\n    for i in range(len(words)-1, -1, -1):\n        # reverse the current word\n        words[i] = words[i][::-1]\n    # join the words back into a string with spaces\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Reverse the order of the words\n    reversed_words = words[::-1]\n\n    # Join the reversed words back into a string\n    result =''.join(reversed_words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    # Split the string into a list of words\n    words = s.split()\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back together into a string\n    reversed_s = \" \".join(reversed_words)\n    # Return the reversed string\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the words back into a string\n    s = \" \".join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    # Join the reversed words back into a string\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the number is less than or equal to 1\n    if num <= 1:\n        return False\n\n    # Check if the number is divisible by any number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n\n    # If none of the above conditions are met, then the number is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    '''\n    This function checks if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # check if the number is divisible by 2\n    if num % 2 == 0:\n        return False\n    \n    # check if the number is greater than 2 and less than or equal to the square root of the number\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_prime(num):\n    \"\"\"\n    A helper function that returns True if the given integer is a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprint(is_prime(7)) # Output: True\nprint(is_prime(9)) # Output: False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n\nprint(radian_degree(90))"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    if result:\n        return result.group(), result.start(), result.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        match = matches[0]\n        start_index = text.find(match)\n        end_index = start_index + len(match)\n        return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.findall(pattern, text)\n    if len(result) > 0:\n        literal = result[0]\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        return literal, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for match in matches:\n            return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            start_index = text.index(match)\n            end_index = start_index + len(match)\n            return match, start_index, end_index\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use regex.finditer to search for all matches of the pattern\n    matches = re.finditer(pattern, text)\n    \n    # Iterate over the matches and append each match to a list\n    literals = []\n    for match in matches:\n        literals.append(match.group(0))\n    \n    # Return the list of literals and their start and end indices\n    return literals, [match.start() for match in matches], [match.end() for match in matches]"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # First, let's find the value of n, which is the number of rows we need to print\n    n = int(n)\n    # Initialize a list to store the rows\n    rows = []\n    # Initialize a variable to store the current row\n    row = 0\n    # Initialize a variable to store the current number to print\n    current_num = 0\n    # Initialize a variable to store the sum of the previous row\n    prev_sum = 0\n    # Initialize a variable to store the sum of the current row\n    current_sum = 0\n    # Initialize a variable to store the current position in the row\n    current_position = 0\n    # Initialize a variable to store the number of digits in the number of rows\n    num_digits = 0\n    # While there are still more rows to print\n    while current_position < n:\n        # Check if the current number is greater than the previous row's sum\n        if current_num > prev_sum:\n            # If it is, print the current number and add it to the current row's sum\n            print(current_num, end=\" \")\n            current_sum += current_num\n            # Increment the current position and move on to the next number\n            current_position += 1\n        else:\n            # If it's not, print the current number and subtract it from the sum of the previous row\n            print(current_num, end=\" \")\n            current_sum -= prev_sum\n            # Move on to the next number\n            current_position += 1\n        # Check if the current number needs to be printed on a new row\n        if current_position == 10:\n            # If it does, print the current row's sum and initialize a new row\n            print(current_sum)\n            rows.append(current_sum)\n            prev_sum = current_sum\n            row += 1\n            # Reset the current position to 0 and the current number to 0\n            current_position = 0\n            current_num = 0\n            # Check if the current row has 9 digits\n            while len(str(row)) < 9:\n                # If it doesn't, add a zero to the beginning of the row\n                row = \"0\" + str(row)\n            # Check if the row is within the range of bell numbers\n            if row >= 1 and row <= 50:\n                # If it is, increment the number of digits in the row\n                num_digits += 1\n    # Print the number of digits in the bell numbers\n    print(\"Number of digits in the bell numbers:\", num_digits)\n    # Return the list of rows generated\n    return rows"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number using the recurrence relation:\n    B(n+1) = 2B(n) + n\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * bell_Number(n-1) + n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n\n    # Base case: If n=0, return 1\n    if n == 0:\n        return 1\n\n    # Initialize variable to store result\n    result = 1\n\n    # Iterate through the sequence of Bell numbers\n    for i in range(1, n+1):\n        result *= (2*i)/(i+1)\n\n    return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n * bell_Number(n-1) "
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function finds the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (bell_Number(n-1) + bell_Number(n-2))\n"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert list to a list of lists for each sublist\n    list2 = [[list1[i] for i in range(L)] for j in range(len(list1)//L)]\n    # Reverse each sublist\n    list2 = [list(reversed(sublist)) for sublist in list2]\n    # Merge all the sublists into one list\n    merged_list = [sublist[k-1] for sublist in list2 for k in range(1, L+1)]\n    # Convert the merged list back to a list\n    merged_list = [list(merged_list)]\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Initialize variables to keep track of the index of the last element and the count of remaining elements\n    last_index = L - 1\n    count = 0\n\n    # Iterate over the list and update the variables as needed\n    for i in range(len(list1)):\n        if count == L - 1:\n            last_index -= 1\n            count -= 1\n        if i == last_index:\n            count -= 1\n        if count == 0:\n            list1.pop(i)\n            break\n\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # check if L is an integer\n    if type(L)!= int:\n        return \"Error: L must be an integer\"\n    \n    # check if L is valid (L >= 1)\n    if L < 1:\n        return \"Error: L must be a positive integer\"\n    \n    # check if the length of list1 is valid (L <= len(list1))\n    if L > len(list1):\n        return \"Error: L must be less than or equal to the length of the list\"\n    \n    # create a new list with the same elements as list1\n    new_list = list1\n    \n    # remove the kth element from the new list\n    del new_list[L-1]\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    n = len(list1)\n    k = L-1\n\n    if k < 0 or k >= n:\n        return \"Invalid value of L\"\n\n    list2 = list1[:k] + list1[k+1:]\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L > len(list1):\n        return None\n    elif L == 1:\n        return list1[0:]\n    else:\n        return [i for i in list1[0:L-1] if i!= list1[L-1]]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # get the length of the list\n    n = len(list1)\n    # initialize an empty list to store the elements of the new list\n    new_list = []\n    # loop through the elements of the original list and add them to the new list\n    for i in range(n):\n        if i!= L-1:\n            new_list.append(list1[i])\n    # return the new list\n    return new_list"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1 = list1[:L-1] + list1[L-1:] # Removing the kth element\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and removes the k'th element from it.\n\n    Args:\n    lst (list): A list of elements.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: A list with the same elements as the input list, except the k'th element.\n    \"\"\"\n\n    if k > len(lst):\n        return lst\n\n    lst = lst[:k] + lst[k+1:]\n\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Check if k is a valid integer\n    if not isinstance(k, int):\n        raise ValueError(\"k must be an integer.\")\n    \n    # Check if k is within the range of the list\n    if k < 0 or k >= len(list1):\n        raise ValueError(\"k must be within the range of the list.\")\n    \n    # Create a new list to store the elements without the k'th element\n    new_list = list1[:k] + list1[k+1:]\n    \n    return new_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the maximum value in then'th column\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n        else:\n            max_val = max(max_val, test_list[i][N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # Get the length of the first row in the matrix\n    num_rows = len(test_list)\n    # Get the length of the matrix\n    num_cols = len(test_list[0])\n    # Check if the value of N is valid\n    if N >= num_cols:\n        print(\"N must be less than the number of columns in the matrix.\")\n        return None\n    # Create an empty list to store the maximum values\n    max_vals = []\n    # Loop through the rows of the matrix\n    for i in range(num_rows):\n        # Get the value of then'th column in the row i\n        nth_col = test_list[i][N-1]\n        # Check if this value is greater than the current maximum value\n        if nth_col > max_vals[-1] if max_vals else nth_col:\n            # If so, append it to the max_vals list\n            max_vals.append(nth_col)\n    # Return the maximum value\n    return max(max_vals)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_val = 0\n    \n    # loop through all the rows of the matrix\n    for row in test_list:\n        # find the value of then'th column\n        nth_col = row[N-1]\n        # check if the value is greater than the current max value\n        if nth_col > max_val:\n            max_val = nth_col\n    \n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    col = [row[N-1] for row in test_list]\n    return max(col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(matrix)):\n        if matrix[i][N-1] > max_val:\n            max_val = matrix[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N:\n            max_value = max(max_value, max(test_list[i]))\n        else:\n            max_value = max(max_value, max(test_list[i][N-1]))\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize a list to store the max values of the nth column\n    max_values = []\n    # loop through each row in the matrix\n    for row in test_list:\n        # get the nth column from the row\n        col = row[N-1]\n        # add the column value to the max_values list\n        max_values.append(col)\n    # return the maximum value in the max_values list\n    return max(max_values)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_value = 0\n    for i in range(len(test_list)):\n        if i == N:\n            break\n        if max_value < test_list[i][N]:\n            max_value = test_list[i][N]\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # initialize max variable to the first element of the first row\n    max_val = test_list[0][0]\n    # loop through the rows\n    for i in range(len(test_list)):\n        # if the current row has then'th element greater than max, update max\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        sublist = lst[i]\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for i in lst:\n        merged.append([i[0], i[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in range(len(lst)):\n        merged_list.append([lst[i][0], lst[i][1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for i in lst:\n        merged_list.append([i[0], i[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        result.append([lst[i][0], lst[i][1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum variable\n    cum_sum = 0\n    # Loop through each element in the test_list\n    for element in test_list:\n        # Add the element to the cumulative sum\n        cum_sum += element\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for item in test_list:\n        if isinstance(item, tuple):\n            cumsum += sum(item)\n        else:\n            cumsum += item\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i][1]\n    return total"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)+1):\n            cum_sum += test_list[i][j]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # Add the value in the tuple to the cumulative sum\n        cum_sum += test_list[i]\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a list to store the cumulative sum\n    cumulative_sum = []\n\n    # Traverse through the tuple list\n    for num in test_list:\n        # If the current number is not zero, append the previous cumulative sum plus the current number to the cumulative sum list\n        if num!= 0:\n            cumulative_sum.append(cumulative_sum[-1] + num)\n\n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize cumulative sum to 0\n    cumsum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Loop through each value in the tuple\n        for val in tup:\n            # Add the value to the cumulative sum\n            cumsum += val\n    # Return the cumulative sum\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize the cumulative sum\n    cum_sum = 0\n\n    # Iterate over the tuple list and add each value to the cumulative sum\n    for tup in test_list:\n        cum_sum += tup[1]\n\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for num in test_list:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num in nums:\n        avg = sum(num) / len(num)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        # Calculate the sum of values in each tuple\n        total = sum(num)\n        # Divide the sum by the number of values in each tuple to get the average value\n        average = total / len(num)\n        # Append the average value to the result list\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for tup in nums:\n        total = sum(tup)\n        avg = total / len(tup)\n        average_list.append(avg)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for tup in nums:\n        avg = sum(tup) / len(tup)\n        result.append(avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize a list to store the averages\n    avg_list = []\n    # Loop over each tuple in the input tuple of tuples\n    for tup in nums:\n        # Calculate the average of the values in the tuple and append it to the list\n        avg = sum(tup)/len(tup)\n        avg_list.append(avg)\n    # Return the list of averages\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        avg = sum(t) / len(t)\n        averages.append(avg)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        average = sum(nums[i]) / len(nums[i])\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num in nums:\n        total = sum(num)\n        count = len(num)\n        average = total / count\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    This function takes a tuple of tuples as input and returns a list containing the average value of each tuple in the input.\n    '''\n    # initialize an empty list to store the averages\n    averages = []\n    # iterate through each tuple in the input\n    for tup in nums:\n        # initialize a variable to store the sum of the elements in the tuple\n        total = 0\n        # iterate through each element in the tuple\n        for num in tup:\n            # add the element to the total\n            total += num\n        # calculate the average by dividing the total by the length of the tuple\n        avg = total / len(tup)\n        # append the average to the averages list\n        averages.append(avg)\n    # return the averages list\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_values = []\n    for tup in nums:\n        total = sum(tup)\n        average = total / len(tup)\n        total_values.append(average)\n    return total_values"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Initialize an empty list to store the result\n    result_lst = []\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Perform the element-wise modulo operation\n        result = test_tup1[i] % test_tup2[i]\n        # Append the result to the result list\n        result_lst.append(result)\n        \n    # Return the result list\n    return result_lst"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        return None\n    \n    # Perform the element wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    This function takes two tuples of the same length and performs the element wise modulo operation.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples must have the same length.')\n\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] % test_tup2[i]\n\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] % test_tup2[i])\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the input tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples should be of the same length.')\n    \n    # Perform element-wise modulo\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables for calculating the minimum jumps\n    prev_y = 0\n    curr_y = 0\n    count = 0\n\n    # Loop through each step of the path\n    for i in range(steps):\n        # Update the current position\n        curr_y = curr_y + 1\n\n        # Check if we have reached the destination\n        if curr_y == d:\n            return count\n\n        # Check if we can jump upwards\n        if curr_y > prev_y:\n            count += 1\n\n        # Update the previous position\n        prev_y = curr_y\n\n    # Return the final count of jumps\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Create a 2D array to store the distance from starting point to each point\n    dp = [[float('inf')] * (d+1) for _ in range(steps+1)]\n    # Initialize the base cases\n    for i in range(steps+1):\n        dp[i][0] = 0\n    for j in range(d+1):\n        dp[0][j] = 0\n    # Fill the DP table\n    for i in range(1, steps+1):\n        for j in range(1, d+1):\n            dp[i][j] = dp[i-1][j]\n            if i > j:\n                dp[i][j] = min(dp[i][j], dp[i-1][j-1] + 1)\n    return dp[-1][-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    step = 0\n    while step < steps:\n        if step + d >= steps:\n            jumps += 1\n            step = steps\n        else:\n            step += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    # Initialize the distance of each point to the origin as infinity\n    distance = [float('inf')] * (steps+1)\n    distance[0] = 0\n\n    # Bellman-Ford algorithm to find the shortest path to the point (0, 0)\n    for i in range(steps):\n        for j in range(1, steps+1):\n            # Calculate the minimum distance from the current point to all other points\n            for k in range(1, steps+1):\n                # If the current point is reachable from the kth point, update the minimum distance\n                if distance[j]!= float('inf') and distance[j] + steps[j][k-1] < distance[k]:\n                    distance[k] = distance[j] + steps[j][k-1]\n\n    # If the distance of the point (0, 0) is greater than d, there is no valid path to the point\n    if distance[-1] > d:\n        return -1\n\n    # Calculate the number of jumps required to reach the point (0, 0) from origin\n    jumps = 0\n    for i in range(steps):\n        jumps += distance[i+1] // d\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            if (d, 0) == (i, j):\n                count += 1\n                break\n            elif (d-1, 0) == (i, j) and 1 <= i <= steps and 1 <= j <= steps:\n                count += 1\n                d -= 1\n                break\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n        steps: An integer indicating the number of steps required to reach the point of form (d, 0) from origin.\n        d: An integer indicating the vertical distance from the origin point.\n\n    Returns:\n        An integer indicating the minimum number of jumps required to reach the point of form (d, 0) from origin.\n\n    \"\"\"\n\n    jumps = 0\n    pos = 0\n    current_pos = 0\n    max_height = 0\n    while pos < steps:\n        if current_pos >= steps:\n            break\n        current_pos += 1\n        if current_pos >= d:\n            max_height = max(max_height, current_pos)\n        else:\n            if pos + 1 <= steps:\n                pos += 1\n        jumps += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables\n    min_jumps = float('inf')\n    end_position = d\n\n    # Iterate through the given steps\n    for i in range(1, steps+1):\n        # Check if the end position is reached\n        if end_position == 0:\n            # Update minimum jumps count\n            min_jumps = min(min_jumps, i)\n            # Update end position\n            end_position = -d\n\n        # Update end position\n        end_position -= 1\n\n    # Return minimum jumps count\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # create a 2D array of size (steps, steps) to store the steps to reach the origin from each position on the grid\n    grid = [[0 for j in range(steps)] for i in range(steps)]\n\n    # initialize the grid with the maximum value (steps)\n    for i in range(steps):\n        grid[0][i] = steps\n\n    # fill the grid with the minimum number of jumps\n    for i in range(1, steps):\n        for j in range(steps):\n            if grid[i-1][j] == 0:\n                grid[i][j] = min(grid[i-1][j]+1, grid[i][j])\n            elif grid[i-1][j] + 1 == d:\n                grid[i][j] = min(grid[i-1][j]+1, grid[i][j])\n            else:\n                grid[i][j] = min(grid[i-1][j]+1, grid[i][j])\n\n    # return the minimum number of jumps to reach the origin\n    return grid[steps-1][steps-1]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    # Base case\n    if steps == 0: \n        return 0\n    \n    # Find the minimum jumps required to reach (d, 0)\n    jumps = 1\n    while (d > 0): \n        d -= 1\n        jumps += 1\n    \n    # Check for the minimum jumps required to reach (0, 0) from origin\n    return min(min_Jumps(steps-1, d), jumps)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Initialize variables\n    jumps = 0\n    # Calculate the number of jumps required to reach d from origin\n    while d > 0:\n        jumps += 1\n        d -= 1\n    # Check for the number of jumps required to reach 0 from origin\n    while d < 0:\n        jumps += 1\n        d += 1\n    # Return the number of jumps required\n    return jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are of different lengths!\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Divides two lists element-wise.\n    '''\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        result.append(num1 / num2)\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i]!= 0:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists should have same length\")\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    \"\"\"\n    Write a function to divide two lists element wise.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result = []\n    \n    # Check if the length of the two lists is the same\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    # Loop through the two lists and divide each element\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    # Return the list of results\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Initialize an empty string to store the numbered words\n    num_str = ''\n\n    # Loop through each word in the input string\n    for word in test_str.split():\n        # If the word is a number, add it to the numbered string\n        if word.isdigit():\n            num_str += word +''\n\n        # Otherwise, add the word to the original string\n        else:\n            num_str += word +''\n\n    # Return the numbered string\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create an empty list to store numbers\n    num_list = []\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a digit, append it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n    # sort the num_list in ascending order\n    num_list.sort()\n    # join the characters in the num_list to form a string\n    moved_str = ''.join(num_list)\n    return moved_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # create a list to store all the numbers\n    num_list = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the list\n            num_list.append(char)\n\n    # reverse the list to move all the numbers to the end\n    num_list.reverse()\n\n    # join the list into a string and return it\n    return \"\".join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # creating an empty list to store numbers\n    nums = []\n    \n    # iterating through each character of the string\n    for char in test_str:\n        \n        # if the character is a number\n        if char.isdigit():\n            \n            # adding the number to the nums list\n            nums.append(char)\n            \n    # iterating through the nums list and moving each number to the end of the string\n    for i in range(len(nums)-1, -1, -1):\n        test_str = test_str[:i] + nums[i] + test_str[i+1:]\n        \n    # returning the final string with all numbers moved to the end\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = [char for char in test_str if char.isdigit()]\n    numbers.sort(reverse=True)\n    for num in numbers:\n        test_str = test_str.replace(num, '', 1)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing an empty string to store the numbers\n    num_str = ''\n    # iterating over each character in the given string\n    for char in test_str:\n        # checking if the character is a number\n        if char.isdigit():\n            # appending the number to the num_str\n            num_str += char\n        # if the character is not a number, appending it to the original string\n        else:\n            test_str += char\n    # returning the original string with all the numbers moved to the end\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_str = ''.join(num_list)\n    num_str += test_str.replace(num_str, '')\n    return num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    num_str = ''.join(num_list)\n    non_num_list = [char for char in test_str if not char.isdigit()]\n    result = num_str + ''.join(non_num_list)\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initializing variables for storing numbers and characters\n    num_list = []\n    char_list = []\n\n    # iterating through the given string\n    for char in test_str:\n        # if the character is a number, appending it to the num_list\n        if char.isdigit():\n            num_list.append(char)\n        # if the character is a letter, appending it to the char_list\n        else:\n            char_list.append(char)\n\n    # joining the lists and returning the final string\n    final_str = ''.join(char_list) + ''.join(num_list)\n    return final_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_found = False\n    num_list = []\n    str_list = []\n\n    # loop through the string\n    for i in range(len(test_str)):\n        # if the character is a number, append it to the number list\n        if test_str[i].isdigit():\n            num_found = True\n            num_list.append(test_str[i])\n        else:\n            # if the number list is not empty, move the numbers to the end of the string\n            if num_found:\n                str_list.append(num_list.pop(0))\n                num_found = False\n\n    # join the string list to form the final string\n    final_str = ''.join(str_list)\n\n    return final_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    count = 0\n    max_count = 0\n    prev = 0\n    max_len = 0\n    for i in range(n):\n        if a[i] % prev == 0:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n            max_len = i - prev + 1\n        prev = a[i]\n    return max_len"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # Step 1: Initialize the variables\n    max_length = 0\n    max_subsets = []\n    # Step 2: Traverse through all possible subsets\n    for i in range(1, n+1):\n        subset = []\n        # Step 3: Generate all possible subsets of length i\n        for j in range(i):\n            subset.append(a[j])\n        # Step 4: Check if the subset is divisible\n        is_divisible = True\n        for k in range(i):\n            if subset[k] % a[i-k-1]!= 0:\n                is_divisible = False\n                break\n        # Step 5: Update max_length and max_subsets\n        if is_divisible and len(subset) > max_length:\n            max_length = len(subset)\n            max_subsets = [subset]\n        elif is_divisible and len(subset) == max_length:\n            max_subsets.append(subset)\n    # Step 6: Return max_length and max_subsets\n    return max_length, max_subsets"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    arr = sorted(a)\n    max_size = 1\n    current_size = 1\n\n    for i in range(1, n):\n        if arr[i] % arr[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n\n    max_size = max(max_size, current_size)\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    m = 0\n    for i in range(n):\n        if i > 0 and a[i] % a[i-1]!= 0:\n            m = max(m, i-1)\n        while i+m < n and a[i+m] % a[i]!= 0:\n            m -= 1\n    return m+1"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    a.sort()\n    n = len(a)\n    count = 1\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            count += 1\n        else:\n            count = 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif a[0] % a[1] == 0:\n        return 1\n    else:\n        res = 2\n        for i in range(2, n):\n            if a[i] % a[res-1] == 0:\n                res += 1\n            elif a[i] % a[res] == 0:\n                res -= 1\n        return res"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize the result variable\n    result = 1\n\n    # Initialize the current subset size\n    current = 1\n\n    # Iterate over the list of numbers\n    for num in a:\n        # If the current number is not divisible by the current subset size, add the current subset size to the result\n        if num % current!= 0:\n            result += current\n            # Reset the current subset size to 1\n            current = 1\n        # If the current number is divisible by the current subset size, increment the current subset size\n        else:\n            current += 1\n\n    # Add the last subset size to the result\n    result += current\n\n    return result"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # sort the list of numbers in descending order\n    a.sort(reverse=True)\n    \n    # initialize the largest subset size\n    largest = 1\n    \n    # iterate through the list and check if each pair is divisible\n    for i in range(len(a)):\n        for j in range(i+2, len(a)+1):\n            if a[i] % a[j-1] == 0 and a[i] % a[j-2] == 0:\n                largest = max(largest, j-i-1)\n                \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 1\n    current_size = 1\n    for i in range(1, len(a)):\n        if a[i] % a[i-1] == 0:\n            current_size += 1\n        else:\n            max_size = max(max_size, current_size)\n            current_size = 1\n    max_size = max(max_size, current_size)\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    a.sort()\n    size = 0\n    n = len(a)\n\n    for i in range(n-1):\n        if a[i] % a[i+1] == 0:\n            size += 1\n        else:\n            break\n\n    return size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two input arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Find the middle index\n    mid = n // 2\n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    # If the length of the array is even, return the average of the middle two elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists into a single list\n    merged_list = arr1 + arr2\n    \n    # Find the median index\n    median_index = n // 2\n    \n    # If the length of the merged list is odd, then the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[median_index]\n    # If the length of the merged list is even, then the median is the average of the middle two elements\n    else:\n        median = (merged_list[median_index] + merged_list[median_index - 1]) / 2\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Sort both arrays\n    arr1.sort()\n    arr2.sort()\n\n    # Calculate the middle element of both arrays\n    median1 = arr1[n//2]\n    median2 = arr2[n//2]\n\n    # If the length of both arrays is odd, return the median of the middle two elements\n    if n % 2 == 1:\n        return (median1 + median2) / 2\n\n    # If the length of both arrays is even, return the average of the middle two elements\n    else:\n        return (median1 + median2) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two arrays\n    merged_arr = arr1 + arr2\n\n    # Find the middle index\n    mid = n // 2\n\n    # Sort the merged array\n    merged_arr.sort()\n\n    # Check if the mid index is even or odd\n    if n % 2 == 0:\n        # If even, take the average of the two middle values\n        return (merged_arr[mid-1] + merged_arr[mid]) / 2\n    else:\n        # If odd, take the middle value\n        return merged_arr[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Combine the two sorted lists into a single list\n    combined_list = arr1 + arr2\n\n    # Sort the combined list in ascending order\n    combined_list.sort()\n\n    # Find the median based on the size of the list\n    if n % 2 == 0:\n        # If the list size is even, the median is the average of the two middle elements\n        median = (combined_list[n//2-1] + combined_list[n//2]) / 2\n    else:\n        # If the list size is odd, the median is the middle element\n        median = combined_list[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Sort the merged list in ascending order\n    sorted_list = sorted(merged_list)\n\n    # Find the middle element of the sorted list\n    median_index = n // 2\n    median = sorted_list[median_index]\n\n    # Return the median\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n\n    mid1 = n // 2\n    mid2 = n - mid1\n\n    if n % 2 == 0:\n        # If n is even, take the average of the middle two elements\n        median1 = (arr1[mid1 - 1] + arr1[mid1]) / 2\n        median2 = (arr2[mid2 - 1] + arr2[mid2]) / 2\n    else:\n        # If n is odd, take the middle element\n        median1 = arr1[mid1]\n        median2 = arr2[mid2]\n\n    return median1, median2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n\n    # Concatenate the two sorted lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the list is odd, return the middle element\n    if n % 2 == 1:\n        return arr[median_index]\n\n    # If the length of the list is even, return the average of the two middle elements\n    else:\n        return (arr[median_index - 1] + arr[median_index]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function takes two sorted arrays of equal size and returns the median value.\n    '''\n\n    # Sort both arrays in ascending order\n    arr1.sort()\n    arr2.sort()\n\n    # Get the length of the arrays\n    length = len(arr1)\n\n    # Calculate the middle index\n    mid = length // 2\n\n    # Calculate the median value\n    if length % 2 == 0:\n        # If the length of the arrays is even, return the average of the middle two elements\n        return (arr1[mid-1] + arr1[mid]) / 2\n    else:\n        # If the length of the arrays is odd, return the middle element\n        return arr1[mid]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n\n    Args:\n        arr1 (list): list of integers\n        arr2 (list): list of integers\n        n (int): length of the two lists\n\n    Returns:\n        int: median of the two lists\n    \"\"\"\n\n    # Concatenate the two lists\n    arr = arr1 + arr2\n\n    # Sort the concatenated list\n    arr.sort()\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the array is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[median_index]\n\n    # If the length of the array is even, the median is the average of the two middle elements\n    else:\n        return (arr[median_index - 1] + arr[median_index]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_list = []\n    for num in nums:\n        power = num ** n\n        power_list.append(power)\n    return power_list"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the nth power of each number in a list.\n\n    Args:\n        nums: list of numbers to compute the nth power of\n        n: integer representing the exponent\n\n    Returns:\n        A list of the nth powers of the numbers in nums\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string contains only uppercase characters.\n    '''\n    for char in string:\n        if not char.isupper():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string contains only uppercase letters.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string = string.upper()\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    \"\"\"\n    Write a python function to convert a given string to uppercase.\n    \"\"\"\n    # convert the given string to uppercase\n    string = string.upper()\n    # return the result\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # converting the string to uppercase\n    string = string.upper()\n    # returning the uppercase string\n    return string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    This function takes a string as input and returns the uppercase version of the string.\n    '''\n    uppercase = \"\"\n    for char in string:\n        if char.isupper():\n            uppercase += char\n        else:\n            uppercase += char.upper()\n    return uppercase"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check if a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return True\n    else:\n        return False"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Check if the list is empty or has only one element\n    if len(newList) <= 1:\n        return newList\n    \n    # Get the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    \n    # Remove the last element from the list\n    newList = newList[:-1]\n    \n    # Add the first and last elements back in the list\n    newList.append(first)\n    newList.append(last)\n    \n    # Return the updated list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the length of the list is less than 2, then return the list\n    if len(newList) < 2: \n        return newList \n    else: \n        # store the first element in a temporary variable\n        temp = newList[0] \n        # replace the first element with the last element\n        newList[0] = newList[-1] \n        # replace the last element with the temporary element\n        newList[-1] = temp \n        # return the modified list\n        return newList "
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # checking if the list is empty or not\n    if len(newList) == 0: \n        print(\"Error: List is empty\")\n        return \n    else: \n        # swapping the first and last elements of the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n    else:\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Define the first and last element of the list\n    first = newList[0]\n    last = newList[-1]\n\n    # Interchange the first and last element\n    newList[0] = last\n    newList[-1] = first\n\n    # Return the modified list\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # define a variable to store the last element in the list\n    lastElement = newList[-1]\n    \n    # remove the last element from the list\n    newList.pop()\n    \n    # insert the last element at the beginning of the list\n    newList.insert(0, lastElement)\n    \n    # return the modified list\n    return newList"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the radius of the circle\n    circle_radius = r * (1 + math.sqrt(5)) / 2\n    \n    # calculate the areas of the largest two triangles\n    a = circle_radius * (math.sqrt(5) - 1) / 2\n    b = circle_radius * (math.sqrt(5) + 1) / 2\n    \n    # find the largest triangle area\n    largest_area = max(a, b)\n    \n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with that radius.\n    \n    The formula for the area of a triangle is given as:\n    A = 1/2 * base * height\n    \n    where base is the length of the longest side of the triangle, and height is the length of the shorter side.\n    \n    In the case of a semicircle, the longest side of the triangle is given by the radius, and the shorter side is the distance from the center of the circle to the center of the triangle.\n    \n    The area of the triangle can be calculated as:\n    A = 1/2 * r * (r^2 - (x^2 + y^2))\n    \n    where x and y are the coordinates of the point on the circle that is closest to the center of the triangle.\n    \n    We can simplify the formula using the fact that the length of the semi-perimeter of a circle is pi times the radius:\n    r * (r^2 - (x^2 + y^2)) = pi * (r^2 - (x^2 + y^2))\n    \n    So, we can substitute r into the expression for the distance from the center of the circle to the center of the triangle:\n    (r^2 - (x^2 + y^2)) = pi * (r^2 - (r^2 - (x^2 + y^2)))\n    \n    Then, we can factor out the common denominator:\n    (x^2 + y^2) = pi * (r^2 - (r^2 - (x^2 + y^2)))\n    \n    Finally, we can substitute x and y for their respective values on the circle:\n    x^2 + y^2 = pi * (r^2 - (r^2 - (x^2 + y^2)))\n    \n    Solving for x and y, we find that the point on the circle that is closest to the center of the triangle is at the origin (0, 0) with distance sqrt(r^2 - (x^2 + y^2)) from the center of the circle.\n    \n    Therefore, the area of the largest triangle that can be inscribed in a semicircle with a given radius can be found by taking the area of the largest triangle that can be inscribed in a circle with radius r, and then multiplying it by 4:\n    A = 4 * pi * r^2\n    \n    This is the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    r = abs(r)\n    a = r\n    b = r * r\n    c = 2 * r\n    return 4 * pi * r**2"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the semi-perimeter of the semicircle\n    s = 2*math.pi*r\n    \n    # Calculate the area of the triangle with sides of length s/2\n    area = math.sqrt(3)*s/2\n    \n    # Calculate the area of the largest triangle\n    largest_area = s/3\n    \n    # Return the area of the largest triangle\n    return largest_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n    \n    # calculate the area of a triangle with side length 2r\n    area = 0.5 * r * r\n    \n    # calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = max(area, semi_perimeter**2 / (2*area))\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Calculate the semi-perimeter of a semicircle with radius r\n    semi_perimeter = 2 * math.pi * r\n    \n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * semi_perimeter ** 2) / (4 * math.tan(math.pi / 3))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = 3.14159\n    area = pi * r**2\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    This function takes a radius as input and returns the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n    '''\n    # calculate the circumference of the semicircle\n    circumference = 2 * math.pi * r\n    \n    # calculate the area of a triangle with sides of length 2*r\n    area1 = 2 * r**2\n    \n    # calculate the area of a triangle with sides of length r\n    area2 = r**2\n    \n    # find the maximum of the two areas and multiply by the circumference\n    area = max(area1, area2) * circumference\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef triangle_area(r):\n    \"\"\"\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    \"\"\"\n    # find the semi-perimeter of the largest triangle\n    a = 3 * r\n    b = 4 * r\n    c = math.sqrt(a**2 + b**2)\n    # find the area of the largest triangle\n    area = math.sqrt(c**2 / 2)\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the semi-perimeter\n    perimeter = 2*r\n\n    # Calculating the area of a triangle with base r and height sqrt(3)/2\n    area = (3*r**2)/(4*math.sqrt(3))\n\n    # Calculating the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area_largest = area*(perimeter/2)\n\n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # calculate the semi-perimeter of the semicircle\n    semi_perimeter = 2 * r\n\n    # calculate the area of a right triangle with sides of length r and semi-perimeter\n    area = (semi_perimeter ** 2) / 4\n\n    return area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if not end:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of integers and returns the smallest missing number from the array.\n    The array is sorted in ascending order.\n    The function starts from the index given by the start parameter (default 0) and ends at the index given by the end parameter (default None)\n    \"\"\"\n    if not array:\n        return None\n\n    # Find the minimum value in the array\n    min_val = array[0]\n    for num in array:\n        if num < min_val:\n            min_val = num\n\n    # Find the difference between the maximum value and the minimum value\n    diff = max_val - min_val\n\n    # Loop through the array and check if each number is present in the range [min_val, max_val]\n    for i in range(len(array)):\n        if array[i] - min_val!= i:\n            # If the number is missing, return it\n            return array[i] - min_val + min_val\n        elif array[i] - min_val == i:\n            # If the number is present, check if the next number is missing\n            if i + 1 < len(array) and array[i + 1] - min_val!= i + 1:\n                # If the next number is missing, return it\n                return array[i + 1] - min_val + min_val\n\n    # If the loop completes without finding the missing number, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # If end is None, find the maximum number in the array\n    if end is None:\n        end = max(array)\n\n    # Iterate from start to end\n    for num in range(start, end + 1):\n        # If the current number is missing, return it\n        if num not in array:\n            return num\n\n    # If no missing number is found, return None\n    return None"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n\n    # If end is None, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Loop through the array until the end condition is met\n    for i in range(start, end):\n        # If the current element is equal to its index, the next missing number is the one after it\n        if array[i] == i:\n            return i + 1\n\n    # If the loop completes without finding a missing number, the array is sorted in ascending order\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end+1):\n        if i+1 not in array:\n            return i+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a Python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    # Check if array is sorted\n    if not all(array[i] < array[i+1] for i in range(len(array)-1)):\n        raise ValueError(\"Array is not sorted\")\n\n    # Find the last missing number\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end+1):\n        if array[i]!= i+1:\n            return i+1\n\n    # If all numbers are missing, return the size of the array + 1\n    return len(array) + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    while start <= end:\n        mid = (start + end) // 2\n\n        if mid == 0 or array[mid - 1] < mid:\n            return mid\n        else:\n            end = mid - 1\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start,end):\n        if array[i]!= i:\n            return i\n\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # If start is not provided, start from the beginning of the array\n    if start is None:\n        start = 0\n    # If end is not provided, end at the end of the array\n    if end is None:\n        end = len(array) - 1\n    # Initialize the missing number to be the first index of the array\n    missing = start\n    # Loop through the array and check if each element is present in the sorted list\n    for i in range(start, end):\n        # If the current element is not in the sorted list, update the missing number\n        if array[i]!= i + start:\n            missing = i + start\n            break\n    # Return the missing number\n    return missing"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n\nprint(replace_spaces(\"hello world\")) # Output: hello%20world"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function to find even numbers from a list of numbers.\n    \"\"\"\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    result = []\n    for num in list:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    i, j = ele\n    adjacent = []\n\n    if i > 0:\n        adjacent.append((i-1, j))\n    if i < n-1:\n        adjacent.append((i+1, j))\n    if j > 0:\n        adjacent.append((i, j-1))\n    if j < m-1:\n        adjacent.append((i, j+1))\n\n    sub.append(adjacent)\n    if adjacent:\n        adjac(adjacent[-1], sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # Extract the row and column indices of the element\n    row = ele[0]\n    col = ele[1]\n\n    # Define the possible directions for adjacent elements\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Iterate over all the directions and extract the adjacent coordinates\n    for dir in directions:\n        # Extract the row and column indices of the adjacent element\n        adj_row = row + dir[0]\n        adj_col = col + dir[1]\n\n        # If the adjacent element is within the bounds of the grid and not already in the list of sub-elements,\n        # add it to the list of sub-elements and the recursive call to extract all adjacent sub-elements\n        if adj_row >= 0 and adj_row < n and adj_col >= 0 and adj_col < m and (adj_row, adj_col) not in sub:\n            sub.append((adj_row, adj_col))\n            adjac((adj_row, adj_col), sub)\n\n    # Return the list of sub-elements as the adjacent elements of the original element\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub=None):\n    if sub is None:\n        sub = []\n    if isinstance(ele, tuple):\n        for i in range(len(ele)):\n            sub.extend(adjac(ele[i], sub))\n    elif isinstance(ele, list):\n        for i in range(len(ele)):\n            sub.extend(adjac(ele[i], sub))\n    else:\n        if ele == 0:\n            return [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        elif ele == 1:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1)]\n        elif ele == 2:\n            return [(0, 1), (1, 0), (1, -1), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1)]\n        elif ele == 3:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1)]\n        elif ele == 4:\n            return [(0, 1), (1, 0), (1, -1), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (-1, 1)]\n        elif ele == 5:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (0, -1)]\n        elif ele == 6:\n            return [(0, 1), (1, 0), (1, -1), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1)]\n        elif ele == 7:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n        elif ele == 8:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1), (1, 0), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1)]\n        elif ele == 9:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1), (1, 0), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (0, -1)]\n        elif ele == 10:\n            return [(0, 1), (1, 0), (1, 1), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1), (1, 0), (1, 1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (-1, -1), (0, 1), (1, -1), (1, 0), (1,"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for i in range(y-1, y+2):\n        for j in range(x-1, x+2):\n            if (i, j)!= (x, y) and 0 <= i < 10 and 0 <= j < 10:\n                result.append((i, j))\n    return result\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if not isinstance(ele, tuple) or len(ele)!= 2: \n        return sub\n    x, y = ele\n    sub.append((x, y+1)) # up\n    sub.append((x-1, y)) # left\n    sub.append((x, y-1)) # down\n    sub.append((x+1, y)) # right\n    return adjac((x, y), sub)"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # extract x and y coordinates from the given tuple\n    x, y = ele\n\n    # define a list to store the adjacent coordinates\n    adj_coords = []\n\n    # iterate over all possible coordinates for x and y\n    for i in range(max(0, x-1), min(x+2, 8)): \n        for j in range(max(0, y-1), min(y+2, 8)): \n\n            # check if the adjacent coordinate is not already in the list\n            if (i, j) not in adj_coords:\n\n                # append the adjacent coordinate to the list\n                adj_coords.append((i, j))\n\n    # return the list of adjacent coordinates\n    return adj_coords\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    # unpacking the tuple\n    x, y = ele\n\n    # creating a list of adjacent coordinates\n    adj_coords = [(x+dx, y+dy) for dx in [-1, 0, 1] for dy in [-1, 0, 1] if (dx!=0 or dy!=0)]\n\n    # checking if the adjacent coordinates are within the boundaries of the matrix\n    adj_coords = [adj_coord for adj_coord in adj_coords if 0<=adj_coord[0]<len(sub) and 0<=adj_coord[1]<len(sub[0])]\n\n    # adding the adjacent coordinates to the list of sublists\n    for coord in adj_coords:\n        sub.append(coord)\n\n    # returning the updated sublist of adjacent coordinates\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    if x == 0:\n        for i in range(y, y+4):\n            sub.append((x, i))\n        sub.append((x, y+4))\n    elif x == 3:\n        for i in range(y-3, y+1):\n            sub.append((x, i))\n        sub.append((x, y-3))\n    elif y == 0:\n        for i in range(x, x+4):\n            sub.append((i, y))\n        sub.append((x+4, y))\n    elif y == 3:\n        for i in range(x-3, x+1):\n            sub.append((i, y))\n        sub.append((x-3, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adjacent = []\n    # Check top left, top, top right, left, right, bottom left, bottom, bottom right\n    if x > 0 and y > 0:\n        adjacent.append((x-1, y-1))\n    if x > 0:\n        adjacent.append((x-1, y))\n    if x > 0 and y < len(sub)-1:\n        adjacent.append((x-1, y+1))\n    if x < len(sub)-1:\n        adjacent.append((x+1, y))\n    if x < len(sub)-1 and y < len(sub)-1:\n        adjacent.append((x+1, y+1))\n    if x < len(sub)-1 and y > 0:\n        adjacent.append((x+1, y-1))\n    if y > 0:\n        adjacent.append((x, y-1))\n    if y < len(sub)-1:\n        adjacent.append((x, y+1))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 2:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 2:\n        adj.append((x, y+1))\n    return adj"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Split the string into words\n    words = text.split()\n    \n    # Iterate over the words\n    for i, word in enumerate(words):\n        # Replace whitespaces with underscores\n        if'' in word:\n            words[i] = word.replace(' ', '_')\n        # Replace underscores with whitespaces\n        elif '_' in word:\n            words[i] = word.replace('_','')\n    \n    # Join the words back into a string\n    new_text =''.join(words)\n    \n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    # Split the string into words\n    words = text.split()\n    \n    # Iterate over the words and replace spaces with underscores\n    for i, word in enumerate(words):\n        words[i] = word.replace(\" \", \"_\")\n        \n    # Join the words back into a string and return it\n    return \" \".join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    This function takes a string as input and returns a new string with all whitespaces replaced with underscores and vice versa.\n    '''\n\n    new_text = ''\n    for char in text:\n        if char.isspace():\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # initialize an empty string to store the modified text\n    modified_text = \"\"\n    \n    # loop through each character in the input string\n    for char in text:\n        # if the character is a whitespace character, replace it with an underscore\n        if char == \" \":\n            modified_text += \"_\"\n        # if the character is an underscore, replace it with a whitespace\n        elif char == \"_\":\n            modified_text += \" \"\n        # if the character is neither a whitespace nor an underscore, append it to the modified text\n        else:\n            modified_text += char\n    \n    # return the modified text\n    return modified_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # Remove any non-alphanumeric characters from the string\n    text = ''.join(e for e in text if e.isalnum())\n\n    # Split the string into words\n    words = text.split()\n\n    # Loop through the words\n    for i, word in enumerate(words):\n        # Check if the word contains only whitespaces\n        if word.isspace():\n            # Replace the whitespace with an underscore\n            words[i] = '_'\n        # Check if the word contains only underscores\n        elif '_' in word:\n            # Replace the underscore with a whitespace\n            words[i] =''\n\n    # Join the words back into a string\n    new_text =''.join(words)\n\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = ''\n    for char in text:\n        if char =='':\n            new_text += '_'\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for num in num_list:\n        if num == 0:\n            num_list.pop(num_list.index(num))\n            zero_count += 1\n    for i in range(zero_count):\n        num_list.append(0)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Check if the list is empty\n    if not num_list:\n        return []\n    # Initialize two pointers - one for the current index and another for the first index of the zeroes\n    i = 0\n    j = 0\n    # Traverse the list\n    while i < len(num_list):\n        # If the current index is not equal to zero, increment the j pointer\n        if num_list[i]!= 0:\n            j += 1\n        # Move the zeroes to the end of the list\n        if num_list[i] == 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n        # Increment the i pointer\n        i += 1\n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    return [num for num in num_list if num!= 0] + [0] * (len(num_list) - len([num for num in num_list if num!= 0]))"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    i = 0\n    j = 0\n\n    while j < len(num_list):\n        if num_list[j]!= 0:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n        j += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n    \"\"\"\n    zero_indices = [i for i, x in enumerate(num_list) if x == 0]\n    for i in zero_indices[::-1]:\n        num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    index = 0\n    while index < len(num_list):\n        if num_list[index] == 0:\n            num_list.pop(index)\n            num_list.append(0)\n        else:\n            index += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i]!= 0:\n            # move the non-zero element to the end of the list\n            num_list[len(num_list)-1], num_list[i] = num_list[i], num_list[len(num_list)-1]\n            break\n        else:\n            # increment the index\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Traverse through the list and swap the elements that are not zero with the elements that are zero\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            j = i\n            while j < len(num_list) and num_list[j] == 0:\n                j += 1\n            if j < len(num_list):\n                num_list[i], num_list[j] = num_list[j], num_list[i]\n    \n    # Remove all zeroes from the list\n    num_list = [x for x in num_list if x!= 0]\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n            return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes two lists as input: arr[] and n. It returns the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i] ^ arr[i+n]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    This function takes a list and its length as input and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum = xor_sum ^ arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    xor_sum = 0\n    for i in range(n):\n        xor_sum ^= arr[i]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n):\n    xor_sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 1:\n        return sum(x ^ arr[0] for x in arr)\n    else:\n        return pair_xor_Sum(arr, n-1) ^ (arr[n-1] ^ arr[n-2])"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes in a list of integers and an integer n.\n    The function calculates the XOR of all pairs of integers in the list and returns their sum.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        xor_sum += arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    This function takes in a list of integers and an integer n,\n    and returns the sum of the xor of all pairs of integers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts a given list using a min heap.\n    '''\n\n    # Create a max heap from the input list\n    heap = hq.nlargest(len(iterable), iterable)\n\n    # Sort the list in descending order and remove the max heap element\n    result = []\n    while heap:\n        result.append(heap.pop())\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    n = len(iterable)\n    # Build a max heap\n    for i in range(n//2, -1, -1):\n        sift_down(iterable, n, i)\n    # Extract elements from heap\n    for i in range(n-1, 0, -1):\n        iterable[0], iterable[i] = iterable[i], iterable[0]\n        sift_down(iterable, i, 0)\n\ndef sift_down(heap, n, i):\n    '''\n    Helper function to sift down the element at index i of the heap.\n    '''\n    largest = i\n    l = 2*i + 1\n    r = 2*i + 2\n    if l < n and heap[l] > heap[largest]:\n        largest = l\n    if r < n and heap[r] > heap[largest]:\n        largest = r\n    if largest!= i:\n        heap[i], heap[largest] = heap[largest], heap[i]\n        sift_down(heap, n, largest)"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and returns a sorted list.\n    It uses the heapq module in Python.\n    '''\n    # Create a max-heap from the input iterable\n    max_heap = []\n    for num in iterable:\n        hq.heappush(max_heap, num)\n\n    # Extract and return the max element from the max-heap\n    return [hq.heappop(max_heap) for _ in range(len(max_heap))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list\n    lst = list(iterable)\n    # Build a min heap from the list\n    hq.heapify(lst)\n    # Convert the heap to a list again\n    sorted_lst = [heapq.heappop(lst) for i in range(len(lst))]\n    # Return the sorted list\n    return sorted_lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable into a list\n    list_to_sort = list(iterable)\n\n    # heapify the list\n    hq.heapify(list_to_sort)\n\n    # sort the list using heap sort\n    while len(list_to_sort) > 1:\n        # remove the root element and replace it with the last element of the heap\n        root = list_to_sort[0]\n        last_element = list_to_sort.pop()\n        # replace the root with the last element and heapify the heap\n        list_to_sort[0] = last_element\n        hq.heapify(list_to_sort)\n\n    # return the sorted list\n    return list_to_sort"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    n = len(iterable)\n    for i in range(n//2 - 1, -1, -1):\n        hq.heappop(iterable)\n    for i in range(n-1, 0, -1):\n        hq.heappop(iterable)\n        hq.heappush(iterable, iterable[0])"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # convert the iterable to a list\n    arr = list(iterable)\n    # sort the list using heap sort\n    hq.heapify(arr)\n    for i in range(len(arr)-1, 0, -1):\n        hq.heappop(arr)\n    return arr"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    heap = hq.nlargest(len(iterable), iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort.\n    '''\n\n    # Convert the list to a min heap\n    heap = hq.heapify(iterable)\n\n    # Sort the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    profit = actual_cost - sale_amount\n    loss = sale_amount - actual_cost\n\n    if profit == 0 and loss == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return \"Neither profit nor loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # Check if there is any profit or loss\n    if profit == 0 and loss == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        print(\"No profit and no loss!\")\n    else:\n        print(\"Profitable!\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # Check if the actual cost is greater than the sale amount\n    if actual_cost > sale_amount:\n        print(\"There is no profit and no loss.\")\n    else:\n        # Check if the sale amount is greater than the actual cost\n        if sale_amount > actual_cost:\n            print(\"There is no profit and no loss.\")\n        else:\n            # Check if the sale amount is equal to the actual cost\n            if sale_amount == actual_cost:\n                print(\"There is no profit and no loss.\")\n            else:\n                # Check if the sale amount is less than the actual cost\n                if sale_amount < actual_cost:\n                    print(\"There is a loss.\")\n                else:\n                    print(\"There is a profit.\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n\n    Args:\n        actual_cost: the actual cost of the sale\n        sale_amount: the amount sold\n\n    Returns:\n        True if the sale has no profit and no loss, False otherwise\n    \"\"\"\n\n    if actual_cost <= sale_amount:\n        return True\n    elif sale_amount - actual_cost == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    # Check if the profit and loss are zero\n    if profit == 0 and loss == 0:\n        return \"Yes, the amount has no profit and no loss\"\n    else:\n        return \"No, the amount has a profit of \" + str(profit) + \" and a loss of \" + str(loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function takes two parameters: actual_cost and sale_amount.\n    It checks whether the given amount has no profit and no loss.\n    If the amount has no profit and no loss, it returns True, else it returns False.\n    \"\"\"\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost > sale_amount:\n        return 'No profit and no loss'\n    elif actual_cost == sale_amount:\n        return 'No profit, but not no loss'\n    else:\n        return 'No loss'"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    This function checks whether the given amount has no profit and no loss.\n    \n    Input:\n    actual_cost (float): The actual cost of the sale.\n    sale_amount (float): The amount that was sold.\n    \n    Output:\n    (bool): True if the given amount has no profit and no loss, else False.\n    \n    '''\n    \n    if sale_amount <= actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Calculate the wind chill temperature\n    wc = 24 - 273.15 + (13.12 + 0.6215*t - 11.37*math.log(v) + 0.3965*math.pow(v, 2) - 5.88*math.pow(t, 2) + 0.14*math.pow(t, 3))\n    # Round the wind chill temperature to the nearest integer\n    wc = int(round(wc))\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the nearest integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = (v * 1.609344) / 1000\n    return round(t * math.exp(17.27 * t / (t + 237.3) - 459.67 * math.pow(t, 2) / (math.pow(t + 237.3, 2) * math.pow(c, 2))))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculates the wind chill index rounded to the nearest integer using the formula:\n    wind chill index = round(237.7 + 0.6215 * temperature - 35.75 * ln(humidity) - 0.1461 * wind speed + 0.0548 * wind speed^2)\n\n    :param v: wind velocity in km/h\n    :param t: temperature in celsius\n    :return: wind chill index rounded to the nearest integer\n    \"\"\"\n\n    # convert temperature to kelvin\n    t_k = t + 273.15\n\n    # calculate humidity using the relative humidity formula\n    humidity = (100 * (0.6215 * t_k - 35.75)) / (0.6215 * t_k + 35.75)\n\n    # calculate the wind chill index\n    wc_index = round(237.7 + 0.6215 * t_k - 35.75 * math.log(humidity) - 0.1461 * v + 0.0548 * v ** 2)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters\n    ----------\n    v : float\n        Wind velocity in km/h.\n    t : float\n        Temperature in celsius.\n\n    Returns\n    -------\n    float\n        Wind chill index rounded to the nearest integer.\n    \"\"\"\n    # Convert temperature to Kelvin\n    k = t + 273.15\n\n    # Calculate the wind chill temperature\n    wc = 35.74 + 0.6215 * v - 35.757 * math.log(k) + 0.4275 * (v ** 0.16) + 0.578 * (t - 80) + 441.37 * (t - 80) ** 2\n\n    # Calculate the wind chill index\n    wind_chill_index = math.ceil(wc)\n\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_m_per_s = v * 1.60934 # convert from km/h to m/s\n    wind_speed_m_per_s_square = wind_speed_m_per_s ** 2\n    celsius_to_kelvin = 273.15\n    kelvin_to_celsius = 1.8\n\n    # calculate the temperature in kelvin\n    temperature_k = (t + celsius_to_kelvin) * kelvin_to_celsius\n    \n    # calculate the wind chill index\n    wind_chill_index = math.sqrt(wind_speed_m_per_s_square * (1 + 0.14 * (temperature_k - 273.15)) / (0.037 * temperature_k + 11.34))\n    \n    # round the result to the nearest integer\n    wind_chill_index = round(wind_chill_index)\n    \n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # calculate the wind chill index\n    c = 13.12 + 0.6215 * (t - 273.15) + 11.37 * math.log(v * 3.6)\n    # round the wind chill index to the nearest integer\n    ic = int(round(c))\n    # return the wind chill index\n    return ic"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculates the wind chill index rounded to the next integer for a given wind velocity and temperature in celsius.\n    '''\n    if v > 10:\n        index = math.floor(0.0065 * (v - 10) + 32)\n    elif v < -10:\n        index = math.floor(0.0065 * (v + 10) + 32)\n    else:\n        index = math.floor(0.0065 * v + 32)\n    return index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    # Calculate the absolute v wind speed\n    abs_v = abs(v)\n    # Calculate the dew point temperature\n    d = 0.5 * (k + 273.15)\n    # Calculate the dew point dew point temperature\n    dp = 0.5 * (d + 273.15)\n    # Calculate the relative v wind speed\n    rel_v = v / abs_v\n    # Calculate the skin temperature\n    s = 13.12 + 0.6215 * d - 11.37 * dp\n    # Calculate the skin temperature (rounded)\n    s = round(s)\n    # Calculate the wind chill index\n    wci = 243.04 * (abs_v / 1.602) * math.log(rel_v) - 35.75\n    # Return the wind chill index rounded to the nearest integer\n    return round(wci)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    This function calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \n    Parameters:\n    v (float): The wind velocity in km/h.\n    t (float): The temperature in celsius.\n    \n    Returns:\n    float: The wind chill index rounded to the next integer.\n    \"\"\"\n    c = 20  # reference temperature in celsius\n    R = 10  # constant for conversion between celsius and fahrenheit\n    T = (v * c) / 1.6  # temperature in fahrenheit\n    # calculation of wind chill index\n    wc = 13.12 + 0.6215 * T + 11.37 * math.log(T) - 0.3965 * math.log(v)\n    # rounding to the nearest integer\n    wc = round(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed_celsius = t - 273.15 # convert temperature from Celsius to Kelvin\n    wind_speed_kelvin = math.pow(wind_speed_celsius,2) + 438.1  # calculate wind speed in Kelvin\n    wind_speed_kph = math.sqrt(wind_speed_kelvin) * 1.60934  # convert wind speed in Kelvin to m/s\n    wind_speed_mph = wind_speed_kph * 0.621371  # convert wind speed in m/s to mph\n\n    # calculate wind chill index using the formula:\n    # W = 1.312 + 0.0925 * (v - 10) + 0.0146 * (v - 10) * (v - 10)\n    # v = wind speed in kph\n    # W = wind chill index in degrees F\n    wind_chill_temp = 1.312 + 0.0925 * (wind_speed_mph - 10) + 0.0146 * (wind_speed_mph - 10) * (wind_speed_mph - 10)\n    wind_chill_fahrenheit = math.floor(wind_chill_temp * 1.8 + 32)\n    wind_chill_index = math.ceil(wind_chill_fahrenheit / 10) * 10\n\n    return wind_chill_index"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n\n    def remove_lowercase(name):\n        '''\n        Helper function to remove names that start with a lowercase letter.\n        '''\n        if name[0].islower():\n            return False\n        else:\n            return name\n\n    # Create a new list with names that don't start with a lowercase letter\n    clean_names = [name for name in sample_names if not remove_lowercase(name)]\n\n    # Calculate the sum of the lengths of the names in the clean list\n    total_length = sum(len(name) for name in clean_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    \"\"\"\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def remove_lowercase_names(names):\n        '''\n        Remove names that start with a lowercase letter.\n        '''\n        return [name for name in names if not name.isupper()]\n    \n    def sum_lengths(names):\n        '''\n        Sum the lengths of the names in the list.\n        '''\n        total_length = 0\n        for name in names:\n            total_length += len(name)\n        return total_length\n    \n    # Remove names that start with a lowercase letter\n    names = remove_lowercase_names(sample_names)\n    \n    # Sum the lengths of the remaining names\n    total_length = sum_lengths(names)\n    \n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        sum_length += len(name)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for name in sample_names:\n        if name[0].isupper():\n            count += len(name)\n    return count"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize the sum of the lengths of the names to zero\n    name_sum = 0\n    \n    # Iterate over the names in the list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # If it doesn't, add its length to the sum\n        else:\n            name_sum += len(name)\n            \n    # Return the sum of the lengths of the names after removing those starting with a lowercase letter\n    return name_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the filtered names\n    filtered_names = []\n\n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it and continue to the next name in the list\n            continue\n        # If the name doesn't start with a lowercase letter, add it to the filtered_names list\n        filtered_names.append(name)\n\n    # Sum the lengths of the filtered names\n    total_length = sum([len(name) for name in filtered_names])\n\n    # Return the total length of the filtered names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if not name[0].islower()]\n    total_length = sum(len(name) for name in names)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.sub(r'\\([^()]*\\)', '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Replace all occurrences of parenthesis with an empty string\n    items = re.sub(r'\\(', '', items)\n    items = re.sub(r'\\)', '', items)\n\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    return re.sub(pattern, r'\\1', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Remove the parenthesis from a string, keeping the contents inbetween them.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define the pattern to match parenthesis\n    pattern = r'\\((.*)\\)'\n\n    # Use the re.sub() method to replace all occurrences of the pattern with an empty string\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis\n    items = items.replace('(', '').replace(')', '')\n    # Find the items inside the parenthesis\n    items_inside_parenthesis = re.findall(r'\\((.*?)\\)', items)\n    # Flatten the list of lists of items\n    items = [item for sublist in items_inside_parenthesis for item in sublist]\n    # Remove duplicates and return the final list\n    return sorted(set(items))"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^)]+\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            if i*i > n:\n                return i\n        return None"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 1\n    c = a + b\n\n    while c <= n:\n        print(c)\n        a = b\n        b = c\n        c = a + b"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    i = 1\n    while True:\n        i += 2\n        if i*i > n:\n            return i"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n % 2 == 0:\n        return \"Invalid input\"\n    else:\n        return (2*n-1)**2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_nonagonal(n):\n        \"\"\"\n        A helper function to count the number of nonagonal numbers from 1 to n.\n        \"\"\"\n        count = 0\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i**2 + j**2 == n**2:\n                    count += 1\n        return count\n\n    def generate_nonagonal(n):\n        \"\"\"\n        A helper function to generate the nth nonagonal number.\n        \"\"\"\n        count = count_nonagonal(n)\n        nonagonal = count - 1\n        return nonagonal\n\n    if not is_prime(n):\n        return \"The number is not prime.\"\n    else:\n        return generate_nonagonal(n)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return 2 * n - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return \"Please enter a positive integer.\"\n\n    # Calculate the value of nth nonagonal number\n    value = (n * (n + 1)) / 2\n\n    return value"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    This function takes an integer n and returns True if n is a nonagonal number, and False otherwise.\n    A nonagonal number is defined as a number that is neither a square nor an equilateral triangle.\n    '''\n    # Define the list of nonagonal numbers\n    nonagonal_numbers = [i * (i + 1) for i in range(1, n + 1)]\n\n    # Check if all numbers in the list are squares or equilateral triangles\n    for num in nonagonal_numbers:\n        if num * num == 2 * num or num * (num + 1) * (num + 1) == num * num + num * num:\n            return False\n\n    return True"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Calculate the sum of the first n squares and the sum of the first n Catalan numbers\n    sum_squares = sum([i*i for i in range(1, n+1)])\n    sum_catalan = sum([binom(i, 2) for i in range(1, n+1)])\n    # Calculate the difference between the two sums and return the result\n    return abs(sum_squares - sum_catalan)\n\ndef binom(n, k):\n    '''\n    Calculate the binomial coefficient n choose k.\n    '''\n    # Initialize the binomial coefficient to 1\n    coeff = 1\n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k+1):\n        factorial_k *= i\n    # Calculate the factorial of n-k\n    factorial_n_k = 1\n    for i in range(1, n-k+1):\n        factorial_n_k *= i\n    # Calculate the binomial coefficient using the formula: coeff = factorial_n_k // factorial_k\n    coeff = factorial_n_k // factorial_k\n    return coeff"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r'\\s+','', text)\n    words = text.split()\n    for i in range(len(words)):\n        if words[i][0] == 'z':\n            if i == len(words) - 1 or words[i+1][0] == 'z':\n                return False\n    return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'\n    result = re.search(pattern, text)\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Iterate over the words and check if there is a 'z' in the middle\n    for i, word in enumerate(words):\n        if 'z' in word and (i == 0 or i == len(words) - 1):\n            # If there is, return True\n            return True\n    \n    # If no 'z' is found in the middle, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<![a-zA-Z])z(?![a-zA-Z])'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ][^a-zA-Z]*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w+\\b'  # Match any word starting with 'z' or 'Z' followed by zero or more letters\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'(?<!\\w)z(?!\\w)'\n    result = re.findall(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'\\b(z)[^z]*\\b', re.IGNORECASE)\n    return pattern.search(text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Use regular expressions to find all instances of 'z' that are not at the start or end of a word\n    pattern = r'[^a-zA-Z]*z[^a-zA-Z]*'\n    matches = re.findall(pattern, text)\n    \n    # Check if there are any matches\n    if len(matches) > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1] \n    # reverse the remaining elements of the array\n    input[k:] = input[k:][::-1] \n    # print the modified array\n    print(\"Modified array: \", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    # Reverse the array from 0 to k-1\n    for i in range(k): \n        input[0], input[i] = input[i], input[0] \n        \n    # Reverse the array from k to len(input)-1\n    for i in range(k, len(input)): \n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i] \n        \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    Write a python function to reverse an array upto a given position.\n    \"\"\"\n    # check if k is in range\n    if k < 0 or k >= len(input):\n        return \"Invalid position\"\n    \n    # reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n    \n    # reverse the rest of the array\n    input[k:] = input[k:][::-1]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    # reverse the input array from the start to k-1\n    for i in range(k-1, len(input)-1, -1):\n        input[i], input[0] = input[0], input[i]\n    \n    # reverse the input array from k to the end\n    for i in range(k, len(input)-1):\n        input[i], input[0] = input[0], input[i]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n        k += 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < 1 or k > len(input):\n        return input\n    \n    # Divide the array into two halves\n    left_half = input[:k]\n    right_half = input[k:]\n    \n    # Reverse the left half recursively\n    left_half = reverse_Array_Upto_K(left_half, k//2)\n    \n    # Reverse the right half recursively\n    right_half = reverse_Array_Upto_K(right_half, len(right_half)//2)\n    \n    # Merge the reversed halves\n    output = left_half[::-1] + right_half\n    \n    return output"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k):\n    n = len(input)\n    k = k % n\n    \n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    \n    return input[:k] + input[k:] + input[k:] + input[k:] + input[k:]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the array from 0 to k-1\n    for i in range(k):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Reverse the array from k to n-1\n    for i in range(k, len(input)-1):\n        input[i], input[len(input)-1-i] = input[len(input)-1-i], input[i]\n\n    # Reverse the array from 0 to n-1\n    for i in range(len(input)-1, 0, -1):\n        input[i], input[0] = input[0], input[i]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Calculate the size of the array\n    size = len(input)\n    # Initialize two pointers, one for the start of the array and another for the end of the array\n    start = 0\n    end = size-1\n    # Swap the elements at the start and end positions until the start pointer reaches the given k-th position\n    while start < k-1:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    # Reverse the remaining part of the array\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array from 0 to k-1\n    input[:k] = input[:k][::-1]\n    # reverse the array from k to end\n    input[k:] = input[k:][::-1]\n    # return the reversed array\n    return input"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + (test_dict,))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = {}\n    for key, value in test_dict.items():\n        new_dict[key] = value\n    return (test_tup, new_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the key-value pairs from the input dictionary\n    new_dict = {k: v for k, v in test_dict.items()}\n    # add the new dictionary to the input tuple\n    result = (test_tup + (new_dict,),)\n    # return the result\n    return result"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple\n    updated_tup = test_tup + (test_dict,)\n    # Return the updated tuple\n    return updated_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    # Concatenate the tuple and dictionary to create a new tuple\n    new_tup = tuple(test_tup + test_dict.items())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary to store the merged values\n    merged_dict = {}\n    # iterate through the tuple and add the values to the new dictionary\n    for value in test_tup:\n        # check if the value is a dictionary\n        if isinstance(value, dict):\n            # merge the dictionary with the existing dictionary\n            merged_dict = {**merged_dict, **value}\n        else:\n            # add the value to the new dictionary as a key-value pair\n            merged_dict[value] = value\n    # create a new tuple with the merged dictionary\n    new_tup = tuple(merged_dict.values())\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Creating a new tuple with the test_tup and the new dictionary\n    new_tuple = tuple(test_tup) + tuple(test_dict.items())\n    # Returning the new tuple\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict.copy()\n    new_dict.update(test_tup)\n    return tuple(new_dict.items())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Initialize a new empty dictionary\n    new_dict = {}\n    # Loop through the tuple\n    for item in test_tup:\n        # If the item is a dictionary, add it to the new dictionary\n        if isinstance(item, dict):\n            new_dict.update(item)\n        else:\n            new_dict.update({'value': item})\n    # Add the new dictionary to the tuple\n    test_tup = (test_tup, new_dict)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict.update(test_tup)\n    return tuple(test_dict.values())"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    for i in range(N):\n        dp[i][0] = cost[i][0]\n        dp[0][i] = cost[0][i]\n    for k in range(1, N):\n        for i in range(N):\n            for j in range(N):\n                if i > 0:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j] + cost[i][j])\n                if j > 0:\n                    dp[i][j] = max(dp[i][j], dp[i][j-1] + cost[i][j])\n    max_sum = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if j == N-1:\n                    max_sum = max(max_sum, dp[i][j])\n            elif j == 0:\n                if i == N-1:\n                    max_sum = max(max_sum, dp[i][j])\n    return max_sum / (N*N - 1)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * (N) for _ in range(N)]\n    max_avg = float('-inf')\n    \n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        \n    for j in range(N):\n        dp[j][0] = cost[j][0]\n        \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            \n    for i in range(N):\n        for j in range(N):\n            avg = (dp[i][j] - dp[i-1][j-1] - dp[i-1][j] + dp[i][j-1]) / 4\n            max_avg = max(max_avg, avg)\n            \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Helper function to calculate the number of cells visited in a path\n    def countCellsVisited(cost, i, j, visited):\n        if (i, j) in visited:\n            return visited[(i, j)]\n        \n        # Update the visited set\n        visited[(i, j)] = True\n        \n        # Base case: if we reach the bottom-right cell, return 1\n        if i == len(cost) - 1 and j == len(cost[0]) - 1:\n            return 1\n        \n        # Recursive case: move right and down\n        left = countCellsVisited(cost, i+1, j, visited)\n        up = countCellsVisited(cost, i, j+1, visited)\n        \n        # Return the maximum of left and up, since we can only move right or down\n        return max(left, up) + 1\n    \n    # Find the maximum number of cells visited in all paths\n    maxCellsVisited = max(countCellsVisited(cost, 0, 0, {}) for _ in range(len(cost)))\n    \n    # Find the maximum average of all paths\n    maxAverage = sum(cost[i][j] for i in range(len(cost)) for j in range(len(cost[0]))) / maxCellsVisited\n    \n    return maxAverage"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for j in range(N)] for i in range(N)]\n    \n    # Initialize first row and first column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n        \n    for j in range(N):\n        dp[j][0] = cost[j][0]\n        \n    # Fill the rest of the matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Calculate average of the four possible paths (top, right, bottom, left)\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] + dp[i][j]) / 4\n    \n    # Maximum average over all existing paths\n    max_avg = max(dp[i][j] for i in range(N) for j in range(N))\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the size of the matrix\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum average and the maximum path\n    max_avg = float('-inf')\n    max_path = []\n\n    # Iterate over all paths\n    for i in range(N):\n        for j in range(N):\n            # If the current cell is not visited, continue to the next cell\n            if cost[i][j] == 0:\n                continue\n\n            # Initialize variables to keep track of the visited cells and the total cost\n            visited = set()\n            total_cost = 0\n\n            # Start at the current cell and move right or down\n            while i < N-1 and j < N-1:\n                visited.add((i,j))\n                total_cost += cost[i][j]\n                i += 1\n                j += 1\n\n            # If the current path has a higher average, update max_avg and max_path\n            if i == N-1 and j == N-1:\n                avg = total_cost / len(visited)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = list(visited)\n\n            # Move up and left to continue the path\n            while i > 0 and j > 0 and (i,j) in visited:\n                i -= 1\n                j -= 1\n                total_cost += cost[i][j]\n                visited.remove((i,j))\n\n            # If the current path has a higher average, update max_avg and max_path\n            if i == 0 and j == 0:\n                avg = total_cost / len(visited)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = list(visited)\n\n    # Return the maximum average and the path with maximum average\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    max_avg = 0\n    \n    # Traverse the matrix and find the maximum average of any path\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                # Top-left cell is the start and has zero cost\n                continue\n            \n            if i == N-1 and j == N-1:\n                # Bottom-right cell is the end and has zero cost\n                continue\n            \n            # Check if the current cell is part of the path or not\n            if (i > 0 and cost[i-1][j] > cost[i][j]) or (j > 0 and cost[i][j-1] > cost[i][j]):\n                # If current cell is part of the path, check if we can extend the path to the next cell\n                avg = (cost[i][j] + cost[i][j-1] + cost[i-1][j-1]) / 3\n                if avg > max_avg:\n                    max_avg = avg\n    \n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Find the maximum value in the matrix\n    max_val = max(cost[i][j] for i in range(len(cost)) for j in range(len(cost[0])))\n\n    # Initialize variables for storing the maximum average and the maximum path\n    max_avg = 0\n    max_path = []\n\n    # Iterate through all possible paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if (i, j) == (len(cost) - 1, len(cost[0]) - 1):\n                # Base case: if we reach the bottom right cell, we have found the maximum path\n                break\n\n            # Check if this path satisfies the constraints of the problem\n            if i + 1 < len(cost) and cost[i + 1][j] == 0:\n                # If the next cell in the path is blocked, we can skip this path\n                continue\n            elif j + 1 < len(cost[0]) and cost[i][j + 1] == 0:\n                # If the next cell in the path is blocked, we can skip this path\n                continue\n            else:\n                # If we have not blocked the next cell, we can extend the path\n                new_path = cost[i][j] + maxAverageOfPath(cost[i + 1:j] + cost[j + 1:])\n\n                # Update the maximum average if necessary\n                if new_path > max_avg:\n                    max_avg = new_path\n                    max_path = [cost[i][j]]\n\n                # Check if the new path is better than the current maximum path\n                if new_path > max_avg:\n                    max_avg = new_path\n                    max_path = [cost[i][j]] + max_path\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Initialize variables\n    N = len(cost)\n    visited = [[False]*N for i in range(N)]\n    total_cost = 0\n    total_cells = 0\n    max_avg = 0\n    max_path = []\n\n    # Recursive function to find the maximum average path\n    def helper(i, j, path):\n        nonlocal visited, total_cost, total_cells, max_avg, max_path\n        visited[i][j] = True\n        total_cost += cost[i][j]\n        total_cells += 1\n\n        # Base case: If we reach bottom right cell\n        if i == N-1 and j == N-1:\n            path.append((i, j))\n            avg = total_cost/total_cells\n            if avg > max_avg:\n                max_avg = avg\n                max_path = path.copy()\n            path.pop()\n            return\n\n        # Move down and right if we haven't already visited that cell\n        if not visited[i+1][j]:\n            helper(i+1, j, path)\n        if not visited[i][j+1]:\n            helper(i, j+1, path)\n\n    # Call the recursive function to find the maximum average path\n    helper(0, 0, [])\n\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    max_sum = float('-inf')\n    curr_sum = 0\n    visited = [[0] * N for _ in range(N)]\n    # Fill visited with 0s\n    for i in range(N):\n        visited[0][i] = visited[i][0] = 1\n    # Iterate through each cell in the matrix\n    for i in range(N):\n        for j in range(N):\n            # If this cell is not visited and has a valid neighbor, add the cost of the path to the current sum\n            if visited[i][j] == 0 and (i < N-1 or j < N-1):\n                curr_sum += cost[i][j]\n                visited[i][j] = 1\n                # Recursively call the function for the neighbor and update max_sum and visited if necessary\n                max_sum = max(max_sum, maxAverageOfPath(cost))\n                visited[i][j] = 0\n                curr_sum -= cost[i][j]\n    # Return the maximum average of all paths\n    return max_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize variables\n    max_avg = 0\n    max_path = None\n    current_avg = 0\n    current_path = []\n    visited = [[0]*N for i in range(N)]\n    # Calculate the average of the first path\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                current_avg += cost[i][j]\n                current_path.append([i, j])\n                visited[i][j] = 1\n            else:\n                if i > 0:\n                    if not visited[i-1][j]:\n                        current_avg += cost[i][j]\n                        current_path.append([i, j])\n                        visited[i][j] = 1\n                if j > 0:\n                    if not visited[i][j-1]:\n                        current_avg += cost[i][j]\n                        current_path.append([i, j])\n                        visited[i][j] = 1\n    # Check if the current path has the maximum average\n    if current_avg > max_avg:\n        max_avg = current_avg\n        max_path = current_path\n    # Recursively calculate the maximum average of all paths\n    for i in range(N):\n        for j in range(N):\n            # Check if the cell is unvisited and has adjacent unvisited cells\n            if not visited[i][j] and (i > 0 or j > 0):\n                # Recursively calculate the average of the adjacent paths\n                if i > 0:\n                    temp_avg, temp_path = maxAverageOfPath(cost)\n                    current_avg += temp_avg\n                    current_path.extend(temp_path)\n                    for k in range(len(temp_path)-1):\n                        visited[temp_path[k][0]][temp_path[k][1]] = 1\n                if j > 0:\n                    temp_avg, temp_path = maxAverageOfPath(cost)\n                    current_avg += temp_avg\n                    current_path.extend(temp_path)\n                    for k in range(len(temp_path)-1):\n                        visited[temp_path[k][0]][temp_path[k][1]] = 1\n    # Return the maximum average path\n    return max_avg, max_path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height >= h and weight >= w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # initialize an empty list to store the filtered students\n    filtered_students = []\n    # iterate over the students in the dictionary\n    for name, (height, weight) in students.items():\n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # if they are, add the student to the list\n            filtered_students.append(name)\n    # return the list of filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    # Create an empty list to store the filtered students\n    filtered_students = []\n\n    # Iterate over the dictionary of students\n    for name, (height, weight) in students.items():\n        # Check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # If yes, add the student to the filtered list\n            filtered_students.append((name, height, weight))\n\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store filtered students\n    filtered_students = []\n    \n    # iterate over all students in the input dictionary\n    for name, data in students.items():\n        # unpack the data tuple\n        height, weight = data\n        \n        # check if the height and weight are above the minimum\n        if height > h and weight > w:\n            # add the name to the filtered list\n            filtered_students.append(name)\n    \n    # return the filtered list\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Using the 'eq' operator to check if two values are equal.\n    result = [i for i in range(len(nums1)) if nums1[i] == nums2[i] and nums1[i]!= None]\n    return len(result)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    result = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            result += 1\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    sum = 0\n    base_str = str(base)\n    for digit in base_str:\n        sum += int(digit) ** power\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and remove any non-digit characters\n    base = ''.join(c for c in str(base) if c.isdigit())\n\n    # Convert the power to a string and remove any non-digit characters\n    power = ''.join(c for c in str(power) if c.isdigit())\n\n    # Calculate the sum of all digits of the base raised to the power\n    result = 0\n    for digit in base:\n        result += int(digit) ** int(power)\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        base //= 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    for i in range(1, power + 1):\n        digit = base // (10 ** (i - 1)) % 10\n        total += digit\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # convert base to a string\n    base_str = str(base)\n    # initialize a variable to keep track of the sum of digits\n    sum_digits = 0\n    # iterate over each character in the base string\n    for char in base_str:\n        # convert each character to an integer\n        digit = int(char)\n        # add the integer to the sum of digits\n        sum_digits += digit**power\n    # return the sum of digits to the power\n    return sum_digits**power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    digits = [int(digit) for digit in str(base)]\n    result = 0\n    for digit in digits:\n        result += digit ** power\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    sum = 0\n    base_str = str(base)\n\n    for digit in base_str:\n        sum += int(digit)**power\n\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # calculate the sum of all digits of the base to the specified power\n    base_sum = 0\n    while power > 0:\n        base_sum += base % 10\n        base = base // 10\n        power -= 1\n    return base_sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    This function extracts values between quotation marks \" \" of the given string.\n    '''\n    # Define a regular expression pattern to match quotation marks\n    pattern = r'\"([^\"]*)\"'\n\n    # Use the re.findall() function to find all matches of the pattern in the given string\n    matches = re.findall(pattern, text)\n\n    # Return a list of all matched values\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Removing any extra whitespaces from the string\n    text1 = re.sub(' +','', text1)\n    \n    # Splitting the string into words\n    words = text1.split()\n    \n    # Initializing empty list to store values between quotation marks\n    quotation_values = []\n    \n    # Looping through the words\n    for word in words:\n        # Checking if the word is between quotation marks\n        if word.startswith('\"') and word.endswith('\"'):\n            # Removing the quotation marks from the word\n            value = word[1:-1]\n            # Adding the value to the list\n            quotation_values.append(value)\n    \n    return quotation_values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to find all occurrences of a quotation mark \" \" in the string\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n\n    # Loop through all matches and extract the content between the quotes\n    output = []\n    for match in matches:\n        output.append(match[1:-1])\n\n    return output"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'\"[^\"]*\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.+?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<!\\w\\.\\w.)(\\'[^\\']*?\\')(?!\\s)(?<=\\w\\.\\w.)(?<!\\')'\n    matches = re.findall(pattern, text1)\n    return matches\n\ntext = \"The quick brown fox 'jumps over' the lazy dog.\"\nresult = extract_quotation(text)\nprint(result)"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)')\n    matches = pattern.findall(text1)\n    extracted_text = []\n    for match in matches:\n        extracted_text.append(match.strip('\"'))\n    return extracted_text"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # defining a regular expression to match quotation marks\n    regex = re.compile(r'\"([^\"]*)\"')\n\n    # using the regular expression to extract the values between the quotation marks\n    result = regex.findall(text1)\n\n    # returning the extracted values as a list\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    t_length = len(test_tup)\n    result = [0] * t_length\n    for i in range(t_length-1):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) // 2\n    result_tup = (test_tup[0] * test_tup[1], test_tup[0] * test_tup[2], test_tup[0] * test_tup[3], test_tup[1] * test_tup[2], test_tup[1] * test_tup[3], test_tup[2] * test_tup[3])\n    return result_tup[:N]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    # get the length of the input tuple\n    N = len(test_tup)\n    \n    # create a new empty tuple of the same length\n    new_tup = ()\n    \n    # iterate through the input tuple and multiply each element with the next element\n    for i in range(N):\n        new_tup += (test_tup[i] * test_tup[i+1],)\n        \n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    result.append(test_tup[-1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    n = len(test_tup) - 1\n    result = []\n    for i in range(n):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    result_tup += (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    new_tup = []\n    for i in range(N):\n        new_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(new_tup)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = ()\n    for i in range(N-1):\n        result_tup = result_tup + (test_tup[i] * test_tup[i+1],)\n    result_tup = result_tup + (test_tup[-1] * test_tup[0],)\n    return result_tup"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i]+lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)!=len(lst2):\n        raise ValueError('The two lists must have the same length.')\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # initialize the sum list to empty list\n    result = []\n    # loop through each element in the first list\n    for i in range(len(lst1)):\n        # add the element of the first list to the sum list\n        result.append(lst1[i])\n    # loop through each element in the second list\n    for j in range(len(lst2)):\n        # add the element of the second list to the sum list\n        result.append(lst2[j])\n    # return the sum list\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(sorted(nums))))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    num_groups = groupby(nums)\n    return [group for group in num_groups if not group[1] or next(group[1])[0]!= group[0][-1]]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    for group in groupby(nums):\n        if len(list(group)) == 1:\n            yield group[0]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n\n    Input:\n    nums: a list of integers\n\n    Output:\n    A new list with consecutive duplicates removed.\n    '''\n    return [list(group)[0] for key, group in groupby(sorted(nums)) if not key]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    nums = sorted(set(nums))\n    i, j = 0, 0\n    while j < len(nums):\n        if nums[j] == nums[i]:\n            nums.pop(j)\n        else:\n            i = j\n            j += 1\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a list of integers.\n    '''\n    # Use itertools.groupby to group the numbers by their common prefix\n    grouped = groupby(enumerate(nums), lambda x: x[1])\n    \n    # Use itertools.chain to concatenate the grouped items without duplicates\n    result = list(chain.from_iterable(group for _, group in grouped))\n    \n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(map(list, groupby(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [num for _, nums_list in groupby(sorted(nums)) if len(list(nums_list)) > 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group) for key, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    return [list(g) for k, g in groupby(sorted(set(nums))) if k > 1]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area = math.pi * r * h / 3\n    return lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*(r**2 + h**2)*h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi * r**2 * h\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n\n    # Formula for lateral surface area of a cone\n    lateral_surface_area = math.pi * r * h\n\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given its radius r and height h.\n    The formula used to calculate the lateral surface area of a cone is:\n\n    lateral surface area = 1/2 * r^2 * h\n\n    where h is the height of the cone.\n\n    Args:\n    r: radius of the cone\n\n    h: height of the cone\n\n    Returns:\n    lateral surface area of the cone\n    '''\n\n    lateral_surface_area = 0.5 * r**2 * h\n    return lateral_surface_area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = math.pi*(r**2 + h**2)\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to find all occurrences of special characters\n    pattern = r'\\s|,'\n    # Use the re.sub() function to replace all occurrences of special characters with a colon\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,\\.]')\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[^\\w\\s]')\n    text = pattern.sub('', text) # remove non-word characters\n    text = re.sub(r'\\s+', ':', text) # replace spaces with colons\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function takes a string as input and returns a string where all occurrences of spaces, commas, or dots are replaced with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s-]', '', text)  # Remove all non-word characters (except spaces, hyphens, and underscores)\n    text = re.sub(r'\\s+', ':', text)  # Replace multiple spaces with a colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n\n    # Use the re.sub() function to replace all matches of the pattern with a colon\n    result = re.sub(pattern, ':', text)\n\n    return result"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    pattern = r'(\\s|,|\\.)+'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # define the regex pattern to replace special characters\n    pattern = re.compile(r'([,.])')\n\n    # replace all occurrences of special characters with colon\n    return pattern.sub(':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^a-zA-Z0-9 ]+', '', text).replace(' ', ':').replace(',', ':').replace('.', ':')"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    \"\"\"\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    \"\"\"\n    # Define a regular expression pattern to match spaces, commas, or dots\n    pattern = r'[\\s,\\.]'\n    # Use the re.sub() function to replace all occurrences of the pattern with a colon\n    result = re.sub(pattern, ':', text)\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        A (list): A sorted array in which the number to be found is present.\n        x (int): The number to be found.\n\n    Returns:\n        int: The index of the first occurrence of x in A, or -1 if x is not present in A.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # initialize the left and right pointers\n    left = 0\n    right = len(A) - 1\n    \n    # loop until the left pointer is greater than or equal to the right pointer\n    while left <= right:\n        # calculate the middle index\n        mid = left + (right - left) // 2\n        \n        # if the middle element is equal to the target element, return the index\n        if A[mid] == x:\n            return mid\n        \n        # if the middle element is less than the target element, search in the right half\n        elif A[mid] < x:\n            left = mid + 1\n        \n        # if the middle element is greater than the target element, search in the left half\n        else:\n            right = mid - 1\n    \n    # if the target element is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Binary search algorithm to find the first occurrence of x in A\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            # If x is found, check if it is the first occurrence or not\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                # If x is not the first occurrence, then search right\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    n = len(A)\n\n    while i < n:\n        if A[i] == x:\n            return i\n        i += 1\n\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i if A[i-1] == x else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1  # If the number is not present in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1 if x not in A else left"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Find the index of the first occurrence of x in A using binary search\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            # If x is found, then check if it is the first occurrence of x\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    count = [0] * n\n    sum_arr = [0] * n\n\n    # Calculate prefix sum and sum of products of all subarrays\n    for i in range(n):\n        count[i] = count[i - 1] + (1 if arr[i] else 0)\n        sum_arr[i] = sum_arr[i - 1] + arr[i] * arr[i] * count[i]\n\n    # Find the sum of products of all sublists\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += sum_arr[j] * count[j - i - 1]\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sublist_len = 1\n    result = 0\n    sublists = []\n\n    for i in range(n):\n        while sublist_len <= n-i-1:\n            sublist = arr[i:i+sublist_len]\n            sublists.append(sublist)\n            sublist_len += 1\n\n    for sublist in sublists:\n        subarray_prod = 1\n        for num in sublist:\n            subarray_prod *= num\n        result += subarray_prod\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n    prod = 1\n    max_sum = 0\n\n    for i in range(n):\n        prod *= arr[i]\n        max_sum = max(max_sum, prod)\n        if i > 0:\n            prod *= arr[i] - arr[i - 1]\n\n    return max_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_prod = [1] * (n+1)\n\n    for i in range(1, n+1):\n        prefix_prod[i] = prefix_prod[i-1] * arr[i-1]\n\n    ans = 0\n\n    for i in range(n):\n        left = 0\n        right = i\n        prod = 1\n\n        while left < right:\n            if left == 0:\n                prod *= prefix_prod[i]\n            else:\n                prod *= prefix_prod[right] - prefix_prod[left-1]\n\n            if right == n-1:\n                ans += prod\n            elif right+1 == n:\n                ans += prod\n                break\n            else:\n                ans += prod\n                left += 1\n                right += 1\n\n    return ans"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Find the length of the array\n    n = len(arr)\n\n    # Initialize an empty list to store the products\n    products = []\n\n    # Initialize an empty list to store the subarray sums\n    subarray_sums = []\n\n    # Initialize an empty list to store the subarray products\n    subarray_products = []\n\n    # Initialize a variable to store the current subarray sum\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(n):\n        # Add the current element to the current subarray sum\n        current_sum += arr[i]\n\n        # If the current subarray sum is greater than or equal to the current element, then\n        # append the current subarray product to the list of subarray products\n        if current_sum >= arr[i]:\n            subarray_products.append(arr[i] * (current_sum - arr[i]))\n\n        # If the current element is greater than or equal to the current subarray sum, then\n        # append the current element to the list of subarray sums\n        if arr[i] >= current_sum:\n            subarray_sums.append(current_sum)\n\n    # Iterate over the list of subarray sums and calculate the sum of their products\n    for i in range(n):\n        products.append(subarray_sums[i] * subarray_products[i])\n\n    # Return the sum of products of all possible sublists of the array\n    return sum(products)"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    # Find the length of the array\n    n = len(arr)\n\n    # Create an empty list to store the products of subarrays\n    subarray_products = []\n\n    # Initialize two pointers, left and right, to the first and last index of the array respectively\n    left = 0\n    right = n - 1\n\n    # Initialize the current subarray product to 1\n    current_subarray_product = 1\n\n    # Loop while left index is less than or equal to right index\n    while left <= right:\n        # Calculate the product of the current subarray\n        current_subarray_product *= arr[left]\n\n        # If the current subarray product is greater than 0, update the sum of subarray products\n        if current_subarray_product > 0:\n            subarray_products.append(current_subarray_product)\n\n        # Move the left pointer to the right\n        left += 1\n\n        # Move the right pointer to the left\n        right -= 1\n\n    # Initialize the sum of subarray products to 0\n    sum_of_subarray_products = 0\n\n    # Loop through the list of subarray products and add each product to the sum of subarray products\n    for product in subarray_products:\n        sum_of_subarray_products += product\n\n    # Return the sum of subarray products\n    return sum_of_subarray_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prod = 1\n    subsum = 0\n    subprod = 1\n    for i in range(n):\n        subsum += arr[i]\n        subprod *= arr[i]\n        if i >= 2:\n            prod *= subprod - subsum\n    return prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Base case\n    for i in range(n):\n        dp[i][i] = arr[i]\n\n    # Fill rest of the DP table\n    for i in range(n):\n        for j in range(i, n):\n            dp[i][j] = arr[i] * arr[j]\n\n    # Sum of products of all sublists\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += dp[i][j]\n\n    return ans\n"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    max_len = 2 * n - 1\n    prefix_sums = [0] * max_len\n    suffix_sums = [0] * max_len\n\n    # Calculate prefix sums and store them in prefix_sums[]\n    prefix_sums[0] = arr[0]\n    for i in range(1, n):\n        prefix_sums[i] = prefix_sums[i-1] + arr[i]\n\n    # Calculate suffix sums and store them in suffix_sums[]\n    suffix_sums[n-1] = arr[n-1]\n    for i in range(n-2, -1, -1):\n        suffix_sums[i] = suffix_sums[i+1] + arr[i]\n\n    # Initialize a 2D array to store the products of all sublists\n    prod_matrix = [[0] * n for i in range(n)]\n\n    # Calculate products of all sublists using dynamic programming\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                prod_matrix[i][j] += prefix_sums[j] * suffix_sums[k]\n\n    # Find the sum of products of all sublists\n    sum_of_products = 0\n    for i in range(n):\n        sum_of_products += prod_matrix[0][i]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    def subarray_product(arr, start, end):\n        product = 1\n        for i in range(start, end):\n            product *= arr[i]\n        return product\n    \n    def subarray_product_sum(arr):\n        n = len(arr)\n        prefix_product = [1] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_product[i] = prefix_product[i - 1] * arr[i - 1]\n        \n        suffix_product = [1] * (n + 1)\n        for i in range(n - 1, -1, -1):\n            suffix_product[i] = suffix_product[i + 1] * arr[i]\n        \n        result = 0\n        for start in range(n):\n            for end in range(start + 1, n + 1):\n                result += prefix_product[end] * suffix_product[start]\n        return result\n    \n    return subarray_product_sum(arr)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(1 << (n.bit_length() - 1)) & ~(1 << 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    first_bit = (n & 1) << 1  # first bit is the LSB\n    last_bit = (n & 2**31) >> 31  # last bit is the MSB\n\n    toggled_bits = first_bit ^ last_bit  # toggle the first and last bits\n\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the number of bits in the number\n    n_bits = bin(n)[2:].count('1')\n    \n    # get the middle bits of the number\n    mid_bits = bin(n)[2:].zfill(n_bits)[::-1]\n    \n    # get the first bit of the middle bits\n    first_bit = mid_bits[0]\n    \n    # get the last bit of the middle bits\n    last_bit = mid_bits[-1]\n    \n    # toggle the first and last bit of the middle bits\n    toggled_mid_bits = first_bit + last_bit\n    \n    # get the number after toggling the middle bits\n    n_after_toggle = bin(int(n, 2) ^ int(toggled_mid_bits, 2))[2:].zfill(n_bits)\n    \n    # return the number after toggling the middle bits\n    return int(n_after_toggle, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize variables\n    first_bit = 0b10000000\n    last_bit = 0b01000000\n    \n    # Check if the first bit is set\n    if n & first_bit == first_bit:\n        # Toggle the first bit\n        n ^= first_bit\n    else:\n        # Set the first bit\n        n |= first_bit\n    \n    # Check if the last bit is set\n    if n & last_bit == last_bit:\n        # Toggle the last bit\n        n ^= last_bit\n    else:\n        # Set the last bit\n        n |= last_bit\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the first and last bit of n\n    first_bit = (n & 1)\n    last_bit = (n & (1 << (n.bit_length()-1))) >> (n.bit_length()-1)\n\n    # Toggle all other bits of n except first_bit and last_bit\n    n ^= (1 << (n.bit_length()-1))\n\n    # Set the first and last bit of n\n    n |= (1 << (n.bit_length()-1)) ^ (1 << (n.bit_length()-2))\n\n    # Combine first_bit, last_bit, and n to get the final result\n    result = first_bit | last_bit | n\n\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        n: An integer number.\n\n    Returns:\n        An integer number with middle bits toggled.\n    \"\"\"\n    # get the number of bits in n\n    num_bits = len(bin(n)[2:])\n\n    # toggle the middle bits except the first and the last bit\n    middle_bits = bin(n)[2:num_bits-2]\n    middle_bits = \"\".join(reversed(middle_bits))\n    middle_bits = int(middle_bits, 2)\n\n    # set the middle bits of n to middle_bits\n    n = n ^ middle_bits\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    # Initialize a variable to store the first and last bits of the number\n    first_bit = (n & 1)\n    last_bit = (n & (1 << (len(bin(n)) - 2))) >> (len(bin(n)) - 2)\n\n    # Extract the middle bits of the number\n    mid_bits = (n & ((1 << (len(bin(n)) - 2)) - 1)) >> 1\n\n    # Toggle the middle bits\n    for i in range(len(bin(mid_bits)) - 1):\n        mid_bits = (mid_bits << 1) | ((mid_bits >> (len(bin(mid_bits)) - 2)) & 1)\n\n    # Combine the first and last bits with the middle bits\n    toggled_bits = (first_bit << (len(bin(mid_bits)) - 2)) | (last_bit << (len(bin(mid_bits)) - 2)) | mid_bits\n\n    # Return the toggled number\n    return toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Toggle the first and last bits\n    n = n ^ 1 << 1  # ^ XOR operation\n    \n    # Toggle bits from index 2 to n-2 (inclusive)\n    for i in range(2, n-2):\n        n = n ^ 1 << i  # ^ XOR operation\n    \n    # Return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n\n    # We start with the middle bit being set to 1\n    bit_value = 1\n    # We start by removing the first and the last bits of the number\n    n = n & ~(1 << 0 | 1 << (n.bit_length() - 1))\n    # We keep adding the middle bit until we reach the middle of the number\n    while n > 0:\n        # We check if the current bit is the middle bit and toggle it\n        if n & 1 == bit_value:\n            n = n ^ (1 << n.bit_length() - 1)\n        # We move to the next bit\n        n = n >> 1\n        bit_value = bit_value ^ 1\n    # We add the first and the last bits back to the number\n    n = n | (1 << 0 | 1 << (n.bit_length() - 1))\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # First, get the binary representation of the number\n    bin_num = bin(n)[2:]\n\n    # Get the number of bits in the binary representation of the number\n    num_bits = len(bin_num)\n\n    # Toggle the middle bit\n    middle_bit = bin_num[num_bits//2]\n    if middle_bit == '0':\n        bin_num = bin_num[:num_bits//2] + '1' + bin_num[num_bits//2+1:]\n    else:\n        bin_num = bin_num[:num_bits//2] + '0' + bin_num[num_bits//2+1:]\n\n    # Convert the binary representation back to an integer\n    toggled_num = int(bin_num, 2)\n\n    return toggled_num"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # initialize left and right indices\n    left, right = 0, len(a) - 1\n\n    # perform binary search for left insertion point\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if a[mid] == x:\n            # if value is found, return the left index\n            return mid\n        elif a[mid] < x:\n            # if value is greater than mid, search in the right half of the list\n            left = mid + 1\n        else:\n            # if value is less than mid, search in the left half of the list\n            right = mid - 1\n\n    # if value is not found, return the left index\n    return left"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index -= 1\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use bisect to find the index where the new element should be inserted\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index + 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list 'a' and a value 'x'. It returns the left insertion point of 'x' in the list.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index if index!= len(a) and a[index] == x else index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return idx\n    elif a[idx] == x:\n        return idx\n    elif a[idx] < x:\n        return left_insertion(a[idx:], x)\n    else:\n        return left_insertion(a[:idx], x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x) - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    # Use the built-in binary search algorithm to find the insertion point\n    index = bisect.bisect_left(a, x)\n    \n    # If the element is already present in the list, return its index\n    if index!= len(a) and a[index] == x:\n        return index\n    \n    # If the element is not present, return the insertion point\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. \n    '''\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return \"True\"\n    else:\n        return \"False\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string): \n    '''\n    This function takes a string as input and checks whether it starts with a vowel or not using a regular expression.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"Valid string\"\n    else:\n        return \"Invalid string\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\ndef check_str(string): \n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return (1 + 1/2 ** n) ** (1/n)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n\n    Args:\n    n: an integer\n\n    Returns:\n    The geometric sum of n-1.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    index = 1\n    while index <= n:\n        triangular_number = int(index * (index + 1) // 2)\n        digits = [int(d) for d in str(triangular_number)]\n        count = 0\n        for digit in digits:\n            count += digit\n        if count == n:\n            return index\n        index += 1\n    return None\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # calculate the number of digits in the number\n    num_of_digits = len(str(n))\n\n    # calculate the number of digits in the triangular number\n    tri_num_of_digits = int(math.log10(n * (n+1)) + 1)\n\n    # calculate the difference between the number of digits and the triangular number digits\n    diff = num_of_digits - tri_num_of_digits\n\n    # calculate the number of digits in the smallest triangular number\n    smallest_tri_num_of_digits = int(math.log10(n*n + n) + 1)\n\n    # calculate the number of digits in the smallest triangular number with n digits\n    smallest_tri_num = 10**(smallest_tri_num_of_digits - diff)\n\n    # find the index of the smallest triangular number with n digits\n    index = (smallest_tri_num - 1) // n\n\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    count = 1\n    triangle_number = 0\n    for i in range(1, n+1):\n        triangle_number = (count * (count + 1)) // 2\n        count += 1\n        if math.log10(triangle_number) == i:\n            return i - 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize variables\n    i = 0\n    triangular_num = 0\n    \n    # Loop until n digits are obtained\n    while triangular_num < n:\n        # Calculate the triangular number\n        triangular_num = (i * (i + 1)) // 2\n        \n        # Increment the index by 1\n        i += 1\n    \n    # Return the index of the smallest triangular number with n digits\n    return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Function to check if a number is triangular or not\n    def is_triangular(num):\n        return all(num % i!= 0 for i in range(2, int(num**0.5) + 1))\n\n    # Function to find the smallest triangular number with n digits\n    def find_smallest_triangular_number(n):\n        num = 1\n        while n > 0:\n            num *= 10\n            n -= 1\n        return num\n\n    # Function to find the index of smallest triangular number with n digits\n    def find_Index(n):\n        triangular_number = find_smallest_triangular_number(n)\n        index = 1\n        while is_triangular(triangular_number):\n            index += 1\n            triangular_number *= 10\n        return index - 1\n\n    # Function to find the smallest triangular number with n digits using brute force method\n    def find_smallest_triangular_number_bf(n):\n        num = 1\n        while n > 0:\n            num *= 10\n            n -= 1\n        return num\n\n    # Function to find the index of smallest triangular number with n digits using brute force method\n    def find_Index_bf(n):\n        triangular_number = find_smallest_triangular_number_bf(n)\n        index = 1\n        while triangular_number > 1:\n            index += 1\n            triangular_number -= 1\n        return index\n\n    return find_Index(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def is_triangular(num):\n        return num == int(num**0.5) * int(num**0.5)\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def triangular(n):\n        num = 1\n        while not is_triangular(num):\n            num += 1\n        return num\n\n    def is_smaller(a, b):\n        for i in range(len(a) - 1):\n            if a[i] > b[i]:\n                return True\n            elif a[i] < b[i]:\n                return False\n        return True\n\n    def find_next_smallest(nums, n):\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                for k in range(j + 1, len(nums)):\n                    for l in range(k + 1, len(nums)):\n                        if nums[i] * nums[j] * nums[k] * nums[l] < nums[i] * nums[j] * nums[l] * nums[n] < nums[i] * nums[k] * nums[l] * nums[n]:\n                            return True\n        return False\n\n    def find_next_smaller(nums, n):\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                for k in range(j + 1, len(nums)):\n                    for l in range(k + 1, len(nums)):\n                        if is_smaller(nums[i], nums[j]) and is_smaller(nums[j], nums[k]) and is_smaller(nums[k], nums[l]) and is_smaller(nums[l], nums[n]):\n                            return True\n        return False\n\n    def smallest_triangular_with_n_digits(n):\n        nums = []\n        num = triangular(n)\n        while True:\n            nums.append(num)\n            num = int(str(num) + str(num)[1])\n            if len(str(num)) == n + 1:\n                break\n        nums.reverse()\n        for i in range(1, len(nums)):\n            if is_prime(nums[i]):\n                return nums[i], nums.index(nums[i])\n        return None, None\n\n    return smallest_triangular_with_n_digits(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Function to check if a number is a triangular number or not \n    def is_triangular(n): \n        return n*(n+1)*(0.5)**(n-1) == n*(n+1)*(0.5)**n\n    \n    # Function to find the smallest triangular number with n digits \n    def smallest_triangular(n): \n        a = math.ceil(math.sqrt(5*n+1)) \n        b = (0.5*(a*a+1)**n - 1)/3 \n\n        # If b is an integer, then we can use the formula to find the triangular number \n        if b.is_integer(): \n            return int(b) \n        else: \n            # If b is a float, then we have to use the formula with an addition step to find the triangular number \n            return int(b) - 1\n    \n    # Finding the index of the smallest triangular number with n digits \n    index = smallest_triangular(n)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    \"\"\"\n    # convert n to base 10\n    n = int(n)\n\n    # Calculate the first n digits of the smallest triangular number\n    triangular_digits = [0] * n\n    triangular_digits[0] = 1\n\n    # Calculate the remaining digits of the smallest triangular number\n    for i in range(1, n):\n        # Calculate the digit based on the previous digit and the next digit\n        triangular_digits[i] = triangular_digits[i-1] + 1\n\n    # Find the smallest triangular number by comparing the first n digits\n    smallest_triangular = 1\n    for i in range(n):\n        if triangular_digits[i] < smallest_triangular:\n            smallest_triangular = triangular_digits[i]\n\n    # Return the index of the smallest triangular number\n    return triangular_digits.index(smallest_triangular)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    # Initialize variables\n    num = 1\n    index = 0\n\n    # Iterate through each digit of n\n    for i in range(1, n + 1):\n        # Calculate the triangular number for the current digit\n        tri = (num * (num + 1)) // 2\n\n        # If the current triangular number is smaller than 10^i, update the variables\n        if tri < 10**i:\n            num = tri\n            index = i\n\n    # Return the index of the smallest triangular number with n digits\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    def sieve(n):\n        primes = [True] * (n+1)\n        primes[0] = primes[1] = False\n        \n        for i in range(2, int(math.sqrt(n))+1):\n            if primes[i]:\n                for j in range(i*i, n+1, i):\n                    primes[j] = False\n        \n        return primes\n    \n    primes = sieve(10**n)\n    smallest = 10**n\n    for i in range(n-1, -1, -1):\n        if primes[smallest]:\n            smallest *= 10\n            smallest -= 1\n        else:\n            smallest = 10**(n-i)\n            break\n    \n    return smallest"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    for i in range(len(test_tup)-1):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        test_dict[key] = value\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initializing an empty dictionary\n    dict_tup = {}\n    # iterating over the tuple using enumerate function\n    for i,j in enumerate(test_tup):\n        # adding the key-value pair to the dictionary\n        dict_tup[i] = j\n    return dict_tup"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    result_dict = {}\n    # iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # add the key-value pair to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    # return the final dictionary\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    if len(test_tup) % 2!= 0:\n        raise ValueError('The given tuple must have an even number of elements.')\n    \n    test_dict = {}\n    for i in range(len(test_tup)):\n        test_dict[test_tup[i]] = test_tup[i+1]\n    \n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # loop through the tuple and add adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return my_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Convert the tuple to a list\n    lst = list(test_tup)\n    # Initialize the dictionary\n    d = {}\n    # Iterate over the list and add pairs of adjacent elements as key-value pairs to the dictionary\n    for i in range(0, len(lst)-1, 2):\n        d[lst[i]] = lst[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Create a dictionary to store the key-value pairs\n    my_dict = {}\n    # Loop through the tuple and add key-value pairs to the dictionary\n    for i in range(0, len(test_tup), 2):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    dict_ = {}\n    for i in range(len(test_tup)):\n        if i % 2 == 0:\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_[key] = value\n    return dict_"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # initialize an empty dictionary\n    dict_tup = {}\n    # loop through the tuple elements\n    for i in range(len(test_tup)):\n        # if the current element is not the last element, add it to the dictionary\n        if i!= len(test_tup)-1:\n            dict_tup[i] = test_tup[i]\n    # return the dictionary\n    return dict_tup"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return s == s[0]\n    else:\n        return all_Characters_Same(s[1:]) and s[0] == s[1]"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # getting the length of the string\n    length = len(s)\n\n    # checking whether all the characters are same or not\n    if length > 1:\n        return False\n\n    # checking if the first character is same as the last character\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Get the first character of the string\n    first_char = s[0]\n    # Loop through the string and check if all characters are same\n    for char in s[1:]:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # converting string to list\n    l = list(s)\n\n    # checking if all the characters are same\n    if len(set(l)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # get the first character of the string\n    first_char = s[0]\n\n    # loop through the string and check if all characters are same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n\n    # if we have gone through the loop without returning False, it means all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return False\n    if s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # Check if the length of the string is equal to 1\n    if len(s) == 1:\n        return True\n\n    # Convert the string to lowercase to compare case-insensitively\n    s = s.lower()\n\n    # Check if the first character and the last character are equal\n    if s[0] == s[-1]:\n        # Check if all the characters except the first and last are same\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return False\n        return True\n\n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n\n    # Check if the length of the string is 1\n    if len(s) == 1:\n        return True\n    \n    # Check if all the characters are the same\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # Convert the string to a list of characters\n    lst = list(s)\n\n    # Check if the length of the list is 1 or not\n    if len(lst) == 1:\n        return True\n    else:\n        # Loop through the list and check if all the characters are same or not\n        for i in range(len(lst)):\n            if lst[i]!= lst[0]:\n                return False\n        return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    This function calculates the area of a tetrahedron based on the given side lengths.\n\n    Args:\n    side (float): The length of each side of the tetrahedron.\n\n    Returns:\n    area (float): The area of the tetrahedron.\n    \"\"\"\n\n    # Calculate the area using Heron's formula\n    s = (side * (1 + math.sqrt(5))) / 5\n    area = (s * (s - side) * (s - 2 * side) * (s - 3 * side)) ** (1/3)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = math.sqrt(3) / 4 * side ** 2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2 * math.sin(math.pi/3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Write a function to calculate the area of a tetrahedron.\n    \"\"\"\n    s = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.5\n    return (1 / 6) * s ** 3"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Formula for area of a tetrahedron\n    area = (1/6)*side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/3 * side * side * side\n    return math.sqrt(s)\n"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side**2\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/3)*(side**2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = 1/2 * side * (1 + math.sqrt(5))\n    return math.sqrt(3) * s**2"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    if m == 0:\n        return list\n    else:\n        for i in range(m):\n            list.append(list.pop(0))\n        return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # check if list is empty or if rotation amount is 0\n    if n == 0 or m == 0:\n        return list\n    \n    # check if rotation amount is greater than list length\n    if m >= n:\n        return list\n    \n    # create a new list to store rotated elements\n    new_list = []\n    \n    # append last m elements of the list\n    for i in range(m):\n        new_list.append(list[n-1-i])\n    \n    # append first n-m elements of the list\n    for i in range(n-m):\n        new_list.append(list[i])\n    \n    # return the new list\n    return new_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst: list to be rotated\n        m: number of items to be rotated\n\n    Returns:\n        rotated list\n\n    \"\"\"\n    n = len(lst)\n    m %= n\n    lst.extend(lst[:m])\n    lst[:m] = []\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Get the length of the list\n    n = len(list)\n    # Calculate the new position to rotate the list to\n    new_pos = (m % n) + n\n    # Create a new list with all the elements of the original list after the specified position\n    new_list = list[new_pos:] + list[:new_pos]\n    return new_list\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(lst, n):\n    '''\n    This function will rotate the given list by n items to the right direction.\n    '''\n    n = n % len(lst)\n    return lst[n:] + lst[:n]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    '''\n    This function rotates a given list by specified number of items to the right direction.\n    '''\n    n = len(lst)\n    m = m % n\n    lst.extend(lst[:m])\n    lst = lst[m:]\n    lst.extend(lst[:m])\n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # length of the list\n    n = len(list)\n\n    # if m is greater than or equal to n, return the original list\n    if m >= n:\n        return list\n\n    # rotate the list by m items\n    for i in range(m):\n        last = list[n-1]\n        for j in range(n-2, i-1, -1):\n            list[j+1] = list[j]\n        list[i] = last\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:m], list[m:n] = list[m:n], list[0:m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Check if the list is empty\n    if not list:\n        return []\n\n    # Get the length of the list\n    n = len(list)\n\n    # Check if the rotation is greater than the length of the list\n    if m >= n:\n        return list\n\n    # Swap the first m items with the last n-m items\n    list[:m], list[m:] = list[m:], list[:m]\n\n    # Reverse the list from m to n-1\n    list[m:n-1] = list[m:n-1][::-1]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    # Calculate the total number of rotations required\n    rotations = m % n\n    # Reverse the list\n    list.reverse()\n    # Reverse the first m items of the list\n    list[:m].reverse()\n    # Reverse the remaining part of the list\n    list[m:].reverse()\n    # Return the reversed list\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        # Convert the number to a string and split it into a list of digits\n        digits = str(num).split()\n        # Filter the list to keep only the digits that are divisible by 1\n        filtered_digits = [digit for digit in digits if int(digit) % 1 == 0]\n        # Check if the length of the filtered digits is equal to the length of the original digits\n        return len(filtered_digits) == len(digits)\n\n    # Filter the numbers within the given range that are divisible by every digit they contain\n    filtered_nums = list(filter(is_divisible, range(startnum, endnum + 1)))\n    return filtered_nums"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(digit % divisor == 0 for divisor in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two arguments, startnum and endnum,\n    which are the starting and ending numbers of the range of numbers to be checked.\n    The function then checks if each number within the range is divisible by every digit it contains.\n    If a number meets this criteria, the function returns the number.\n    If no such number is found, the function returns None.\n    \"\"\"\n    return lambda x: x if all(int(digit) in str(x) for digit in str(x)) else None"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \n    '''\n    digits = [int(digit) for digit in str(startnum)]\n    for num in range(startnum, endnum+1):\n        digit_sum = sum(map(int, str(num)))\n        if digit_sum == 0:\n            continue\n        if digit_sum % 10 in digits:\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible(num):\n        \"\"\"\n        Helper function to check if a number is divisible by every digit.\n        \"\"\"\n        return all(int(digit) % num == 0 for digit in str(num))\n\n    return filter(is_divisible, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if num % digit!= 0:\n                return False\n        return True\n\n    return list(filter(is_divisible_by_digit, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters: startnum and endnum, both of which are integers.\n    It returns a list of all the numbers within the given range that are divisible by every digit within that number.\n    \"\"\"\n    return list(filter(lambda x: all(int(digit) % i == 0 for i in range(1, 11)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    result = lambda x, y: x % y == 0\n    \n    # Define a lambda function to check if a number is divisible by a certain digit\n    is_divisible_by = lambda num, digit: result(num // digit, digit)\n    \n    # Find the smallest multiple of 10 that is greater than or equal to the startnum\n    multiple_of_ten = lambda x: (x // 10) * 10 + x % 10\n    \n    # Loop through each number in the range and check if it is divisible by every digit in the number\n    for num in range(startnum, endnum+1):\n        digits = [int(d) for d in str(num)]\n        for digit in digits:\n            if not is_divisible_by(num, digit):\n                break\n        else:\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digits(num):\n        digits = [int(digit) for digit in str(num)]\n        for digit in digits:\n            if digit % 2 == 0:\n                return False\n        return True\n\n    numbers = [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]\n    return numbers"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r ** 2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r * r\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is greater than 360 degrees\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2 * (1 - math.cos(math.radians(a)))\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return r*r*math.sin(math.radians(a/2))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        print(\"Angle should be less than or equal to 360 degrees\")\n        return None\n    else:\n        return math.pi * r**2 * a / 360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = a * math.pi / 180\n    \n    # calculate area\n    area = r**2 * math.sin(a/2)\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * (r ** 2)\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Initialize the three matrices to store the lengths of the subsequences.\n    M = [[0] * (len(Z) + 1) for i in range(len(X) + 1)]\n    L = [[0] * (len(Z) + 1) for i in range(len(X) + 1)]\n    R = [[0] * (len(Z) + 1) for i in range(len(X) + 1)]\n\n    # Fill the three matrices with the lengths of the subsequences.\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Z) + 1):\n            if X[i - 1] == Z[j - 1]:\n                M[i][j] = M[i - 1][j - 1] + 1\n                L[i][j] = L[i - 1][j]\n                R[i][j] = R[i][j - 1]\n            elif M[i - 1][j] > M[i][j - 1]:\n                M[i][j] = M[i - 1][j]\n                L[i][j] = i - 1\n                R[i][j] = j\n            else:\n                M[i][j] = M[i][j - 1]\n                L[i][j] = i\n                R[i][j] = j - 1\n\n    # Return the lengths of the longest common subsequence.\n    return M[len(X)][len(Z)], L[len(X)][len(Z)], R[len(X)][len(Z)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Helper function to find LCS for two substrings\n    def helper(x, y):\n        # If both are empty, return 0\n        if not x and not y:\n            return 0\n        # If x is empty, return length of y\n        if not x:\n            return len(y)\n        # If y is empty, return length of x\n        if not y:\n            return len(x)\n        # If last characters are same, consider LCS of two substrings of x and y\n        if x[-1] == y[-1]:\n            return 1 + helper(x[:-1], y[:-1])\n        # If last characters are not same, consider LCS of longest of two substrings of x and y\n        else:\n            return max(helper(x[:-1], y), helper(x, y[:-1]))\n\n    # Find the length of LCS of X and Y\n    m, n = len(X), len(Y)\n\n    # Create a table to store LCS lengths for all possible pairs of substrings of X and Y\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Fill the table diagonally\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                table[i][j] = table[i - 1][j - 1] + 1\n            else:\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\n\n    # Return LCS of X and Y using the table\n    return helper(X, Y)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = [[0 for j in range(n+1)] for i in range(m+1)] \n  \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Y[j-1]: \n                p[i][j] = p[i-1][j-1] + 1 \n            else: \n                p[i][j] = max(p[i-1][j], p[i][j-1]) \n  \n    # Backtracking to find the longest common subsequence \n    lcs = '' \n    i = m \n    j = n \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1]: \n            lcs = X[i-1] + lcs \n            i -= 1 \n            j -= 1 \n        elif p[i-1][j] > p[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function returns the length of the longest common subsequence of the three given strings X, Y, and Z using dynamic programming.\n    \"\"\"\n\n    # Initialize a 3D array to store lengths of LCS of substrings of X[0..i], Y[0..j], and Z[0..k]\n    L = [[[0 for j in range(len(Y)+1)] for k in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # Fill the array using dynamic programming\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Return the length of the longest common subsequence\n    return L[len(X)][len(Y)][len(Z)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    def lcs(X, Y): \n        m, n = len(X), len(Y) \n        L = [[0] * (n+1) for i in range(m+1)] \n        for i in range(1, m+1): \n            for j in range(1, n+1): \n                if X[i-1] == Y[j-1]: \n                    L[i][j] = L[i-1][j-1] + 1 \n                else: \n                    L[i][j] = max(L[i-1][j], L[i][j-1]) \n        return L \n\n    def lcs_three(X, Y, Z): \n        L = lcs(X, Y) \n        m, n = len(X), len(Y) \n        T = [[0] * (n+1) for i in range(m+1)] \n\n        for i in range(m, -1, -1): \n            for j in range(n, -1, -1): \n                if L[i][j] > 0: \n                    if X[i-1] == Y[j-1] and X[i-1] == Z[i-m-1]: \n                        T[i][j] = L[i][j] + T[i-1][j-1] \n                    else: \n                        T[i][j] = max(T[i-1][j], T[i][j-1]) \n                else: \n                    T[i][j] = 0 \n\n        i, j = m, n \n        lcs_string = [] \n        while i > 0 and j > 0: \n            if X[i-1] == Y[j-1] and X[i-1] == Z[i-m-1]: \n                lcs_string.append(X[i-1]) \n                i -= 1 \n                j -= 1 \n            elif T[i-1][j] > T[i][j-1]: \n                i -= 1 \n            else: \n                j -= 1 \n\n        return ''.join(reversed(lcs_string)) \n\n    m, n, p = len(X), len(Y), len(Z) \n    L1 = lcs(X, Y) \n    L2 = lcs(X, Z) \n    L3 = lcs(Y, Z) \n\n    T = [[0] * (p+1) for i in range(m+1)] \n\n    for i in range(m, -1, -1): \n        for j in range(n, -1, -1): \n            if L1[i][j] > 0: \n                if X[i-1] == Y[j-1] and X[i-1] == Z[i-m-1]: \n                    T[i][j] = L1[i][j] + T[i-1][j-1] \n                else: \n                    T[i][j] = max(T[i-1][j], T[i][j-1]) \n            else: \n                T[i][j] = 0 \n\n    i, j = m, n \n    lcs_string = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[i-m-1]: \n            lcs_string.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif T[i-1][j] > T[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return ''.join(reversed(lcs_string))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    #creating a 3D table to store the length of the longest common subsequences\n    table = [[[0 for j in range(o+1)] for k in range(n+1)] for i in range(m+1)]\n\n    #filling the table diagonally\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    table[i][j][k] = table[i-1][j-1][k-1] + 1\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1])\n\n    #finding the length of the longest common subsequence\n    lcs = \"\"\n    i = m\n    j = n\n    k = o\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif table[i-1][j][k] == table[i][j][k-1]:\n            i -= 1\n        elif table[i][j-1][k] == table[i-1][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    m, n, p = len(X), len(Y), len(Z)\n\n    # create a table to store lengths of longest common subsequences of three strings\n    L = [[[0] * (p+1) for j in range(p+1)] for i in range(m+1)]\n\n    # fill the table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                elif L[i-1][j][k] > L[i][j-1][k]:\n                    L[i][j][k] = L[i-1][j][k]\n                elif L[i][j-1][k] > L[i][j][k-1]:\n                    L[i][j][k] = L[i][j-1][k]\n                else:\n                    L[i][j][k] = L[i][j][k-1]\n\n    # backtrack to find the longest common subsequence\n    i, j, k = m, n, p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] > L[i][j-1][k]:\n            i -= 1\n        elif L[i][j-1][k] > L[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    lcs = []\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    dp = [[0 for j in range(o+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, o+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    lcs = []\n    i = m\n    j = o\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m+1) for i in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if X[i-1] == Y[j-1]:\n                p[i][j] = p[i-1][j-1] + 1\n            else:\n                p[i][j] = max(p[i-1][j], p[i][j-1])\n\n    i, j = n, m\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            lcs.append(X[i-1])\n            i -= 1\n            j -= 1\n        elif p[i-1][j] > p[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s+(?!\\w\\.\\w.)(?<=\\w)(?=[A-Z])', r' ', str1)\n    return str1"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = re.sub(r'\\b(\\w)(\\w*)\\b', r'\\1 \\2', str1)\n    return str2"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words and find the capital letters\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Find all capitalized words in the string\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n\n    # Capitalize the first letter of each word and join them with spaces\n    return''.join([word.capitalize() for word in words])"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # use regular expressions to match words starting with capital letters and then replace them with spaces\n    words = re.findall(r'\\b[A-Z][a-z]+\\b', str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Join the words with spaces and capitalize the first letter of each word\n    result =''.join([word.capitalize() for word in words])\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Using regular expressions to find all the words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Creating a list to store the capitalized words with spaces between them\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word)\n        else:\n            result.append(word[0] +'' + word[1:])\n    \n    # Joining the list of words with spaces and returning the result\n    return''.join(result)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the words and capitalize the first letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i].capitalize()\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^\\w\\s]', '', str1)\n    # Split the string into words and capitalize the first letter of each word\n    words = [word.capitalize() for word in str1.split()]\n    # Join the words with spaces and return the result\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Use regular expression to split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Loop through the words and capitalize the first letter\n    for i, word in enumerate(words):\n        words[i] = word.capitalize()\n    \n    # Join the words with spaces\n    result =''.join(words)\n    \n    return result"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(float(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    # Splitting the list into numeric and string elements\n    nums = []\n    strs = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n        else:\n            strs.append(num_str)\n    \n    # Sorting the numeric elements\n    nums.sort()\n    \n    # Concatenating the sorted numeric elements and the string elements\n    sorted_nums_str = [str(num) for num in nums] + strs\n    \n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=lambda x: float(x.replace(',', '')))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isdigit():\n            nums.append(int(num_str))\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    return sorted(nums_str, key=lambda x: int(x))"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n\n    # Convert all strings to float values\n    nums_float = [float(num) for num in nums_str]\n\n    # Sort the list of float values in ascending order\n    nums_float.sort()\n\n    # Convert the sorted list back to strings\n    sorted_nums_str = [str(num) for num in nums_float]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n    \"\"\"\n    nums = [int(s) for s in nums_str]  # convert strings to integers\n    nums.sort()  # sort integers in ascending order\n    nums_str = [str(n) for n in nums]  # convert integers back to strings\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Sort a given list of strings of numbers numerically\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(int(num_str))\n        except ValueError:\n            nums.append(num_str)\n    return sorted(nums)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # add the tuple to the list\n    for item in test_list:\n        test_list.append(item)\n    # add the tuple to the list\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Use the extend() method to add the tuple to the list.\n    test_list.extend(test_tup)\n    # Return the modified list.\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(\"The tuple has been added to the list.\")\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for item in test_tup:\n        test_list.append(item)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    if i >= 1:\n        if arr[i] < arr[i // 2]:\n            return False\n        return check_min_heap_helper(arr, i // 2)\n    return True\n\n\ndef check_min_heap(arr):\n    if len(arr) == 0:\n        return True\n    return check_min_heap_helper(arr, len(arr) // 2)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    Args:\n    arr (list): A list of integers.\n    i (int): The index of the current node.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n\n    # If the current node is a leaf node, it is a min heap\n    if i >= len(arr) // 2:\n        return True\n\n    # Check if the left child of the current node is smaller than the current node\n    if arr[i] < arr[2 * i + 1]:\n        return False\n\n    # Recursively check if the left and right children of the current node are smaller than their respective children\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        if arr[i] <= arr[int((i-1)/2)]:\n            return True\n        else:\n            return False\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    \n    # If current node is greater than its children, return False\n    if i > 0 and arr[i] > arr[i//2]:\n        return False\n    \n    # Recursively check if parent node is a min heap\n    if i > 0 and not check_min_heap_helper(arr, i-1):\n        return False\n    \n    # Recursively check if children nodes are min heaps\n    if i*2+1 < len(arr) and not check_min_heap_helper(arr, i*2+1):\n        return False\n    if i*2+2 < len(arr) and not check_min_heap_helper(arr, i*2+2):\n        return False\n    \n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    parent = (i - 1) // 2\n    if arr[i] > arr[parent]:\n        return False\n    return check_min_heap_helper(arr, parent)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) // 2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if i > 0 and arr[i] < arr[i // 2]:\n        return False\n    elif i < len(arr) // 2:\n        for j in range(2 * i, len(arr)):\n            if j < len(arr) - 1 and arr[j] < arr[j + 1]:\n                return False\n    return True\n\n\ndef check_min_heap(arr):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n    \"\"\"\n    if not isinstance(arr, list) or len(arr) == 0:\n        return False\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # Base case\n    if i < 0:\n        return True\n\n    # Check if root is larger than the current node\n    if arr[0] > arr[i]:\n        return False\n\n    # Recursively check the left and right subtree\n    return check_min_heap_helper(arr, i-1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return False\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n\n    if i == 0:\n        return True\n    \n    if arr[i] >= arr[(i-1)//2]:\n        return False\n    \n    return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents a min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[i//2] or (arr[i] == arr[i//2] and i % 2 == 0):\n        return False\n    \n    return check_min_heap_helper(arr, i//2)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n//2, -1, -1):\n        check_min_heap_helper(arr, i)\n\n    # Check if max heap property holds for the entire array\n    for i in range(n-1, 0, -1):\n        if arr[i] < arr[i//2] or (arr[i] == arr[i//2] and i % 2 == 0):\n            return False\n    \n    return True"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2*jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return 2*jacobsthal_num(n-1) + 1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n//2) + jacobsthal_num(n//2) - jacobsthal_num(n//2-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n-1) - jacobsthal_num(n-3)) % 1000000007"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        prev = 0\n        curr = 1\n        for i in range(2, n+1):\n            next = prev + curr\n            prev = curr\n            curr = next\n        return curr"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        j1 = 0\n        j2 = 1\n        for i in range(2, n+1):\n            j3 = j1 + j2\n            j1 = j2\n            j2 = j3\n        return j2"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_numbers = [0, 1]\n    while len(jacobsthal_numbers) < n+1:\n        next_jacobsthal_number = 1\n        for i in range(len(jacobsthal_numbers)):\n            next_jacobsthal_number += jacobsthal_numbers[i]\n        jacobsthal_numbers.append(next_jacobsthal_number)\n    return jacobsthal_numbers[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2**(n-1) - 1) // (n-1)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    jacob_nums = [0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731]\n    return jacob_nums[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2*jacobsthal_num(n-1)) - jacobsthal_num(n-2)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and a value K as input.\n    It returns the minimum K records from the tuple list.\n    '''\n    # Sorting the tuple list based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initializing variables to store the minimum K records and their indices\n    min_k_records = []\n    min_k_indices = []\n    \n    # Looping through the sorted tuple list\n    for i in range(len(test_list)):\n        # If the length of the minimum K records list is equal to K,\n        # append the current record to the list and its index to the list\n        if len(min_k_records) == K:\n            min_k_records.append(test_list[i])\n            min_k_indices.append(i)\n            break\n        \n        # If the length of the minimum K records list is less than K,\n        # append the current record to the list and its index to the list\n        min_k_records.append(test_list[i])\n        min_k_indices.append(i)\n        \n        # If the length of the minimum K records list is equal to K+1,\n        # compare the last record in the list with the current record and remove the \n        # record with smaller index\n        if len(min_k_records) == K+1:\n            if min_k_records[-1][1] > min_k_records[-2][1]:\n                min_k_records.pop()\n                min_k_indices.pop()\n    \n    # Return the minimum K records and their indices\n    return min_k_records, min_k_indices"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            if test_list[i] < min_list[0][1]:\n                min_list.pop(0)\n                min_list.append(test_list[i])\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize variables to store the minimum and current minimum\n    minimum = float('inf')\n    current_minimum = float('inf')\n\n    # sort the list of tuples by value in ascending order\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # iterate through the list of tuples and update the minimum value and current minimum value\n    for i in range(len(sorted_list)):\n        # check if the current minimum value is greater than the minimum value\n        if current_minimum > minimum:\n            # update the minimum value\n            minimum = current_minimum\n\n        # check if the current minimum value is less than or equal to K and greater than the current value\n        if current_minimum <= K and current_minimum < sorted_list[i][1]:\n            # update the current minimum value\n            current_minimum = sorted_list[i][1]\n\n        # check if the minimum value is less than or equal to K and greater than the current value\n        if minimum <= K and minimum < sorted_list[i][1]:\n            # update the minimum value\n            minimum = sorted_list[i][1]\n\n    return minimum"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize two variables to keep track of minimum and maximum values\n    min_val = sorted_list[0][1]\n    max_val = sorted_list[-1][1]\n    # Initialize a variable to keep track of count of minimum values found\n    count = 0\n    # Iterate over the sorted list\n    for i in range(len(sorted_list)):\n        # If the count of minimum values found is equal to K, return the minimum value\n        if count == K:\n            return min_val\n        # If the current value is less than or equal to the minimum value, increment the count\n        elif sorted_list[i][1] <= min_val:\n            count += 1\n        # If the current value is greater than the minimum value, decrement the count and update the minimum value\n        else:\n            count -= 1\n            min_val = sorted_list[i][1]\n    # If the count of minimum values found is less than K, return the minimum value\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a set to store the keys of the first K records\n    key_set = set()\n\n    # Iterate over the first K records\n    for record in test_list[:K]:\n        # Get the key from the record\n        key = record[0]\n\n        # Add the key to the key set if it is not already in it\n        if key not in key_set:\n            key_set.add(key)\n\n    # Create a dictionary to store the remaining records\n    remaining_dict = {}\n\n    # Iterate over the remaining records\n    for record in test_list[K:]:\n        # Get the key from the record\n        key = record[0]\n\n        # Add the key to the key set if it is not already in it\n        if key not in key_set:\n            # If the key is not in the key set, add it to the key set and update the value in the dictionary\n            key_set.add(key)\n            remaining_dict[key] = 1\n        else:\n            # If the key is already in the key set, increment its value in the dictionary\n            remaining_dict[key] += 1\n\n    # Create a list to store the minimum K keys\n    min_keys = []\n\n    # Iterate over the key set and find the minimum K keys\n    for key in key_set:\n        if key in remaining_dict and remaining_dict[key] <= K:\n            # If the key is in the key set and has a value less than or equal to K, add it to the list of minimum K keys\n            min_keys.append(key)\n\n    # Sort the list of minimum K keys and return the first K elements\n    min_keys.sort()\n    return min_keys[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # initialize minimum value to infinity\n    min_value = float('inf')\n\n    # iterate through each tuple in the list\n    for tup in test_list:\n        # calculate the absolute difference between the sum of first K elements and the sum of all elements in the tuple\n        absolute_difference = abs(sum(tup[:K]) - sum(tup))\n\n        # update the minimum value if the absolute difference is smaller than the current minimum\n        if absolute_difference < min_value:\n            min_value = absolute_difference\n\n    return min_value"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    sorted_list = sorted(test_list)\n    min_list = sorted_list[:K]\n    min_val = min(min_list, key=lambda x: x[1])\n    return min_val[0]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    # Initialize a dictionary to store the count of each element in the list\n    counts = {}\n    \n    # Loop through the list and increment the count of each element in the dictionary\n    for elem in test_list:\n        if elem in counts:\n            counts[elem] += 1\n        else:\n            counts[elem] = 1\n    \n    # Initialize an empty list to store the minimum k elements\n    min_k_elems = []\n    \n    # Loop through the dictionary and append the k elements with the minimum count to the min_k_elems list\n    for elem in counts:\n        if counts[elem] >= K:\n            min_k_elems.append((elem, counts[elem]))\n    \n    # Sort the list of tuples by the second element (count) of each tuple\n    min_k_elems.sort(key=lambda x: x[1])\n    \n    # Return the first k elements from the sorted list of tuples\n    return min_k_elems[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples based on the second element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    # Initialize minimum counter to 0\n    min_counter = 0\n    # Initialize minimum tuple to None\n    min_tuple = None\n    # Iterate through the sorted list\n    for i in range(len(sorted_list)):\n        # Increment the minimum counter if we have found K minimum tuples\n        if min_counter == K:\n            break\n        # If we have found a tuple that is smaller than the current minimum tuple,\n        # update the minimum tuple and minimum counter\n        if sorted_list[i][0] < min_tuple[0]:\n            min_counter = min_tuple.count(min_tuple[0])\n            min_tuple = sorted_list[i]\n        # Increment the minimum counter for the current tuple\n        min_counter += 1\n    # Return the minimum tuple if we have found it, otherwise return None\n    if min_counter == K:\n        return min_tuple\n    else:\n        return None"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize minimum count\n    min_count = float('inf')\n\n    # Initialize minimum index\n    min_index = 0\n\n    # Iterate over the sorted list and update minimum count and index\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][0] < sorted_list[min_index][0]:\n            min_count = i - min_index\n            min_index = i\n        elif sorted_list[i][0] == sorted_list[min_index][0]:\n            min_count = min(min_count, i - min_index)\n\n    # Return the minimum count and index\n    return min_count, min_index"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in common_list:\n            continue\n        if l2[i] in l1 and l2[i] in l3 and l2[i] in common_list:\n            continue\n        if l3[i] in l1 and l3[i] in l2 and l3[i] in common_list:\n            continue\n        common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    # Loop through each index in the lists\n    for index in range(max(len(l1), len(l2), len(l3))):\n        # Check if the current index is in all three lists\n        if index in l1 and index in l2 and index in l3:\n            # If it is, check if the element at that index is common for all three lists\n            if l1[index] == l2[index] == l3[index]:\n                # If it is, add it to the common_elements list\n                common_elements.append(l1[index])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through the indices of the first list\n    for i in range(len(l1)):\n        \n        # Check if the element at the current index exists in the second list and third list\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            \n            # If the element is found, add it to the common list\n            common.append(l1[i])\n    \n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Create a dictionary to store the elements and their indices\n    dict_l1 = {}\n    for i, item in enumerate(l1):\n        dict_l1[item] = i\n    \n    # Create another dictionary to store the elements and their indices\n    dict_l2 = {}\n    for i, item in enumerate(l2):\n        dict_l2[item] = i\n    \n    # Create another dictionary to store the elements and their indices\n    dict_l3 = {}\n    for i, item in enumerate(l3):\n        dict_l3[item] = i\n    \n    # Loop through the indices of l1 and check if it exists in all dictionaries\n    common_elements = []\n    for i in range(len(l1)):\n        if i in dict_l1 and i in dict_l2 and i in dict_l3:\n            common_elements.append(l1[i])\n        elif i in dict_l1 and i in dict_l2:\n            common_elements.append(l1[i])\n        elif i in dict_l1 and i in dict_l3:\n            common_elements.append(l1[i])\n    \n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Initialize variables to keep track of the smallest and second smallest numbers\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    # Loop through the list starting from the second number\n    for i in range(1, len(numbers)):\n        # If the current number is smaller than the smallest number, update the smallest and second smallest numbers\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        # If the current number is between the smallest and second smallest numbers, update the second smallest number\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n\n    smallest = second_largest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_largest = smallest\n            smallest = num\n        elif num < second_largest and num!= smallest:\n            second_largest = num\n\n    if second_largest == float('inf'):\n        raise ValueError(\"There is no second smallest number in the list.\")\n\n    return second_largest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    sorted_list = sorted(numbers)\n    \n    # Find the second smallest number\n    if len(sorted_list) < 2:\n        return None\n    else:\n        return sorted_list[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None # no second smallest if there is only one or zero numbers in the list\n    \n    # sort the numbers in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # return the second smallest number (which is the second element in the sorted list)\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # sort the list in ascending order\n    numbers.sort()\n\n    # if there is only one number, it's the second smallest\n    if len(numbers) == 1:\n        return numbers[0]\n\n    # return the second smallest number\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = None\n    second_smallest = None\n    \n    for number in numbers:\n        if smallest is None or number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif second_smallest is None or number < second_smallest:\n            second_smallest = number\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = numbers[0]\n        second_smallest = numbers[1]\n        for number in numbers[2:]:\n            if number < smallest:\n                second_smallest = smallest\n                smallest = number\n            elif number < second_smallest and number!= smallest:\n                second_smallest = number\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    # Return the second element of the sorted list\n    return numbers[1]"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\b.*b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a\\w*b')\n    return pattern.match(text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a\\w*b')\n    matches = pattern.findall(text)\n    return matches\n\ntext = 'hello world'\nmatches = text_match_zero_one(text)\nprint(matches)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n\n    pattern = r'a(b*)'\n\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    match = re.search(pattern, text)\n    if match:\n        print(\"The text '{}' matches the pattern '{}'\".format(text, pattern))\n        print(\"The captured group is '{}'\".format(match.group()))\n    else:\n        print(\"The text '{}' doesn't match the pattern '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'^a[b]*$'\n    result = re.match(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b*)'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    # Create a set to store unique strings\n    unique_strings = set()\n\n    # Loop through the list\n    for string in test_list:\n        # Convert the string to a list of characters\n        char_list = list(string)\n        # Reverse the list of characters\n        reversed_list = char_list[::-1]\n        # Convert the reversed list back to a string and add it to the set\n        unique_strings.add(reversed_list)\n\n    # Count the number of unique strings in the set\n    unique_count = len(unique_strings)\n\n    # Initialize variables for the count of reverse pairs\n    reverse_pair_count = 0\n    pair_count = 0\n\n    # Loop through the set of unique strings\n    for i in range(unique_count):\n        # Check if the first string is a reverse of the second string\n        if unique_strings[i] in unique_strings[i+1:]:\n            reverse_pair_count += 1\n        # Increment the pair count by 1\n        pair_count += 1\n\n    # Return the count of reverse pairs\n    return reverse_pair_count, pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # Define a function to reverse a string\n    def reverse_string(s):\n        return s[::-1]\n\n    # Create a dictionary to store the count of reverse pairs\n    reverse_pair_count = {}\n\n    # Loop through each string in the list\n    for s in test_list:\n        # Reverse the current string and check if it's already in the dictionary\n        reversed_s = reverse_string(s)\n        if reversed_s in reverse_pair_count:\n            # If it is, increment the count of the current string and the reversed string\n            reverse_pair_count[s] += 1\n            reverse_pair_count[reversed_s] += 1\n        else:\n            # If it's not, create a new key in the dictionary and set its value to 1\n            reverse_pair_count[s] = 1\n            reverse_pair_count[reversed_s] = 1\n\n    # Calculate the count of reverse pairs by summing up the values of the dictionary\n    count = sum([reverse_pair_count[key] for key in reverse_pair_count])\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create a dictionary to store the reverse of each string\n    reverse_dict = {}\n\n    # iterate through the list and store the reverse of each string in the dictionary\n    for string in test_list:\n        reverse_dict[string[::-1]] = string\n\n    # initialize a counter for the pairs\n    pair_count = 0\n\n    # iterate through the list again and check if the reverse of each string is present in the dictionary\n    for string1 in test_list:\n        for string2 in test_list:\n            # check if the reverse of string1 is present in the dictionary\n            if string1[::-1] in reverse_dict:\n                # check if the reverse of string2 is present in the dictionary\n                if string2[::-1] in reverse_dict and reverse_dict[string2[::-1]]!= string1:\n                    pair_count += 1\n\n    return pair_count\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the reversed string at index j is in the string list\n            if test_list[j][::-1] in test_list[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    sublists = {}\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = tuple(lst[i:j])\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # initialize an empty dictionary to store the count of each sublist\n    count_dict = {}\n    \n    # loop through the list of lists\n    for sublist in list1:\n        # convert the sublist to a tuple and count its occurrences in the original list\n        count_dict[tuple(sublist)] = list1.count(sublist)\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Initialize an empty dictionary to store unique lists and their counts\n    unique_list_count = {}\n    \n    # Iterate through each element in the list\n    for element in list1:\n        # Check if the element is a list\n        if isinstance(element, list):\n            # Convert the list to a tuple and add it to the dictionary if it is not already present\n            if tuple(element) not in unique_list_count:\n                unique_list_count[tuple(element)] = 1\n            # Increment the count of the list in the dictionary\n            else:\n                unique_list_count[tuple(element)] += 1\n    \n    return unique_list_count\n"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store unique sublists and their counts\n    unique_sublists_dict = {}\n\n    # iterate over each element in the list\n    for element in list1:\n        # if the element is a list, convert it to a tuple and check if it is already in the dictionary\n        if isinstance(element, list):\n            tuple_element = tuple(element)\n            if tuple_element in unique_sublists_dict:\n                # if it is, increment the count of that tuple in the dictionary\n                unique_sublists_dict[tuple_element] += 1\n            else:\n                # if it is not, add it to the dictionary with a count of 1\n                unique_sublists_dict[tuple_element] = 1\n\n    return unique_sublists_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            if tuple(list1[i:j]) not in count:\n                count[tuple(list1[i:j])] = 1\n            else:\n                count[tuple(list1[i:j])] += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the count of each tuple\n    sublist_counts = {}\n\n    # Loop through each list in the original list\n    for sublist in list1:\n        # Convert the list to a tuple and increment its count in the dictionary\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in sublist_counts:\n            sublist_counts[tuple_sublist] += 1\n        else:\n            sublist_counts[tuple_sublist] = 1\n\n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = []\n    for item in list1:\n        if tuple(item) not in list2:\n            list2.append(tuple(item))\n    unique_tuples = {}\n    for i in list2:\n        if i in unique_tuples:\n            unique_tuples[i] += 1\n        else:\n            unique_tuples[i] = 1\n    return unique_tuples"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store the count of each tuple\n    count_dict = {}\n    # Loop through the original list\n    for sublist in list1:\n        # Convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # If the tuple is not already in the dictionary, add it with a count of 1\n        if sublist_tuple not in count_dict:\n            count_dict[sublist_tuple] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            count_dict[sublist_tuple] += 1\n    # Return the dictionary of count\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    sublist_counts = {}\n    \n    # Iterate through each item in the list\n    for item in list1:\n        # Convert the item to a tuple and check if the tuple is already in the dictionary\n        if tuple(item) in sublist_counts:\n            # If the tuple is already in the dictionary, increment its value by 1\n            sublist_counts[tuple(item)] += 1\n        else:\n            # If the tuple is not in the dictionary, add it and set its value to 1\n            sublist_counts[tuple(item)] = 1\n            \n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the counts of unique sublists\n    sublist_counts = {}\n    \n    # loop through each element in the list\n    for element in list1:\n        # convert the element to a tuple and check if it exists in the dictionary\n        if tuple(element) in sublist_counts:\n            # if it does, increment its count by 1\n            sublist_counts[tuple(element)] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            sublist_counts[tuple(element)] = 1\n    \n    # return the dictionary of sublist counts\n    return sublist_counts"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        num_str = str(num)\n        if num_str.split('.')[1].startswith('0') and len(num_str.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num = str(num)\n    if '.' in num and len(num.split('.')[1]) <= 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n        if num.is_integer() == True:\n            return False\n        num_str = str(num)\n        num_str = num_str.split(\".\")\n        if len(num_str) == 2:\n            if len(num_str[1]) == 2:\n                return True\n            else:\n                return False\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal_num = False\n    try:\n        float(num)\n        decimal_num = True\n    except ValueError:\n        pass\n    return decimal_num"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num or len(num.split('.')[1]) > 2:\n        return False\n    else:\n        try:\n            float(num)\n            return True\n        except ValueError:\n            return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    # check if the string is a decimal number\n    if '.' in num and num.count('.') == 1:\n        # check if the number has a precision of 2\n        if '.' in num and num.count('.') == 1:\n            try:\n                # convert the string to float and check if it has a precision of 2\n                float(num)\n                return num.split('.')[-1].count('.') == 1\n            except ValueError:\n                return False\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    try:\n        float_num = float(num)\n        if num.count('.') == 1 and '.' in num:\n            decimal_part, integer_part = num.split('.')\n            if len(integer_part) <= 2 and len(decimal_part) <= 2:\n                return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    \n    decimal_part = num.split('.')[-1]\n    if len(decimal_part) > 2:\n        return False\n    \n    for char in decimal_part:\n        if char not in '0123456789.':\n            return False\n    \n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Remove any non-numeric characters from the input string\n    num = ''.join(filter(str.isdigit, num))\n    # Check if the length of the resulting string is 2\n    if len(num)!= 2:\n        return False\n    # Convert the first character to an integer and the second character to a float\n    int_part = int(num[0])\n    dec_part = float(num[1])\n    # Check if the integer part is within the range of a 16-bit integer\n    if int_part < -32768 or int_part > 32767:\n        return False\n    # Check if the decimal part is within the range of a 16-bit float\n    if abs(dec_part - int_part) > 32767:\n        return False\n    # Check if the decimal part is a multiple of 0.01 (to account for rounding errors)\n    if abs(dec_part - int(dec_part)) > 0.01:\n        return False\n    # If all checks pass, the input string is a valid decimal number with a precision of 2\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for num in arr:\n        if arr.count(num) == 1:\n            count += 1\n        else:\n            return False\n    if count == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set(arr)\n\n    # check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    distinct_elements = set(arr)\n    if len(distinct_elements) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == 0:\n        return True\n\n    count = {}\n    for num in arr:\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n\n    for num in count:\n        if count[num] > 1:\n            return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[0]:\n                return False\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique_num = set(arr)\n    if len(unique_num) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if all numbers in the list are distinct,\n    and False otherwise.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the given month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return \"Invalid month number\"\n    \n    # Check if the given month number contains 30 days\n    if monthnum in [4, 6, 9, 11]:\n        return \"30 days in this month\"\n    else:\n        return \"No 30 days in this month\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum3 in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid month number!\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        if monthnum3 % 2 == 0:\n            print(\"Month\", monthnum3, \"contains 30 days.\")\n        else:\n            print(\"Month\", monthnum3, \"contains 31 days.\")\n    else:\n        print(\"Invalid month number.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n\n    # Check if the given month number is within range\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n\n    # Convert the month number to the corresponding name\n    if monthnum3 == 1:\n        monthname = 'January'\n    elif monthnum3 == 2:\n        monthname = 'February'\n    elif monthnum3 == 3:\n        monthname = 'March'\n    elif monthnum3 == 4:\n        monthname = 'April'\n    elif monthnum3 == 5:\n        monthname = 'May'\n    elif monthnum3 == 6:\n        monthname = 'June'\n    elif monthnum3 == 7:\n        monthname = 'July'\n    elif monthnum3 == 8:\n        monthname = 'August'\n    elif monthnum3 == 9:\n        monthname = 'September'\n    elif monthnum3 == 10:\n        monthname = 'October'\n    elif monthnum3 == 11:\n        monthname = 'November'\n    else:\n        monthname = 'December'\n\n    # Check if the month has 30 days or not\n    if monthname == 'February':\n        return (28 + (datetime.date(2020, 2, 29).day // 7) % 2) % 7!= 0\n    elif monthname in ['April', 'June', 'September', 'November']:\n        return 30\n    else:\n        return 31"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if month number is within range\n    if monthnum3 < 1 or monthnum3 > 12:\n        print(\"Invalid month number!\")\n        return\n    \n    # Check if month number contains 30 days\n    if monthnum3 in [4, 6, 9, 11]:\n        print(\"Month number contains 30 days.\")\n    else:\n        print(\"Month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    \n    # Check if the year is a leap year or not\n    is_leap_year = False\n    if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n        is_leap_year = True\n    \n    # Check if the given month number is valid or not\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid Month\"\n    \n    # Get the number of days in the given month\n    if is_leap_year and monthnum3 == 2:\n        days_in_month[1] = 29\n    \n    # Check if the given month number contains 30 days or not\n    if days_in_month[monthnum3-1] == 30:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return \"30 days\"\n    elif monthnum3 in [4, 6, 9, 11]:\n        return \"31 days\"\n    else:\n        return \"invalid month number\"\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    if monthnum3 in range(1, 13):\n        if monthnum3 == 2:\n            if (datetime.now().year % 4 == 0 and datetime.now().year % 100!= 0) or datetime.now().year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and a length of the array as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    arr.sort()\n    min_diff = arr[-1] - arr[0]\n\n    for i in range(1, n - 1):\n        if arr[i] - arr[i - 1] == arr[i + 1] - arr[i]:\n            min_diff = min(min_diff, arr[i] - arr[i - 1])\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length n as input and returns the minimum difference between any two elements in the array.\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize the minimum difference to be the maximum value of the array size\n    min_diff = float('inf')\n\n    # Iterate through the array and find the minimum difference\n    for i in range(n-1):\n        diff = abs(arr[i] - arr[i+1])\n        min_diff = min(min_diff, diff)\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes an array and its length as input and returns the minimum difference between any two elements in the array.\n    '''\n    if n < 2:\n        return 0\n    \n    # Initialize variables to keep track of the minimum and maximum values in the array\n    min_val = arr[0]\n    max_val = arr[0]\n\n    # Iterate through the array and update the minimum and maximum values as required\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Args:\n    arr (list): A list of integers.\n    n (int): The length of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    \"\"\"\n    arr.sort()\n    min_diff = float('inf')\n\n    for i in range(n):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n < 2:\n        return None\n    if n == 2:\n        return abs(arr[0] - arr[1])\n\n    min_diff = float('inf')\n    min_pair = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n                min_pair = (arr[i], arr[j])\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    # Find the minimum difference between any two elements in the array\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n):\n    min_diff = float('inf')\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to keep track of the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Loop through the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = abs(arr[i] - arr[i+1])\n\n        # Update the minimum and maximum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n        # Update the maximum difference if the current difference is larger\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    This function takes a string as input and returns the number of digits in the string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n\n    # Initialize counter variable\n    count = 0\n\n    # Loop through each character in the string\n    for char in str:\n        # Check if the character is a digit\n        if char.isdigit():\n            # Increment the counter variable\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables for the polite number, the number of digits, and the starting digits\n    polite_num = 0\n    num_digits = 1\n    start_num = 1\n\n    while num_digits < n:\n        # Get the current digits of the polite number\n        current_num = start_num // 10 ** (num_digits - 1)\n        # If the current digit is less than 5, add it to the polite number\n        if current_num < 5:\n            polite_num += current_num\n        # Increment the starting number by 1\n        start_num += 1\n        # Increment the number of digits\n        num_digits += 1\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        A helper function to check if a number is prime.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Initialize the nth polite number to 1\n    nth_polite = 1\n\n    # Iterate until we have found the nth polite number\n    while nth_polite < n:\n        # If the current polite number is prime, increment it\n        if is_prime(nth_polite):\n            nth_polite += 1\n        # Otherwise, increment the polite number by 2\n        else:\n            nth_polite += 2\n\n    return nth_polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 3\n    else:\n        polite = 1\n        for i in range(2, n+1):\n            if math.gcd(polite, i) == 1:\n                polite = i\n        return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def nth_polite_number(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 2\n        elif n % 2 == 0:\n            return 2 * nth_polite_number(n // 2) + 2\n        else:\n            return 3 * nth_polite_number(n // 2) + 1\n\n    return nth_polite_number(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    is_prime = True\n    count = 0\n    polite_num = 0\n\n    # Check for prime factors of n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count > 1:\n                is_prime = False\n                break\n\n    # If n is prime, find the nth polite number\n    if is_prime:\n        count = 0\n        for i in range(2, n+1):\n            if i % 10 == 0:\n                count += 1\n                if count == n:\n                    polite_num = i\n                    break\n\n    return polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_polite(n): \n    if n % 5 == 0 and n % 7 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns the nth polite number, defined as the next prime number greater than or equal to the nth prime number.\n    \"\"\"\n    def nth_prime(n):\n        \"\"\"\n        Returns the nth prime number.\n        \"\"\"\n        primes = [True] * (n + 1)\n        primes[0] = primes[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return [i for i in range(2, n + 1) if primes[i]]\n\n    def next_prime(prime):\n        \"\"\"\n        Returns the next prime number greater than or equal to the given prime number.\n        \"\"\"\n        while True:\n            prime += 1\n            if is_prime(prime):\n                return prime\n\n    def is_prime(n):\n        \"\"\"\n        Returns True if n is a prime number, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    nth_prime_number = nth_prime(n)\n    next_prime_number = next_prime(nth_prime_number[0])\n    return next_prime_number"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # Initialize variables\n    count = 0\n    num = 1\n    \n    # Loop till nth polite number is found\n    while count < n:\n        # If the number is greater than 1, check if it is prime or not\n        if num > 1:\n            if num % 2!= 0 and num % 3!= 0:\n                for i in range(5, int(math.sqrt(num))+1, 6):\n                    if num % i == 0 or num % (i+2) == 0:\n                        break\n                else:\n                    count += 1\n        \n        # Increment the count and number by 1\n        count += 1\n        num += 1\n        \n    # Return the nth polite number\n    return num - 1"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    for i in range(1, n):\n        num *= (i + 1)\n    return num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function returns the n-th polite number.\n\n    Args:\n        n: The index of the polite number to be returned.\n\n    Returns:\n        The nth polite number.\n    \"\"\"\n    if n < 1:\n        return None\n\n    def is_polite_helper(k):\n        if k < 1:\n            return None\n\n        if k == 1:\n            return 1\n        else:\n            return is_polite_helper(k-1) + 1\n\n    return is_polite_helper(n)\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of pairs of consecutive elements in the given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    A list of tuples. Each tuple contains two consecutive elements from the input list.\n\n    Example:\n    >>> pair_wise([1, 2, 3, 4, 5])\n    [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n    \"\"\"\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    # Create an empty list to store the pairs\n    pairs = []\n    # Loop through the list\n    for i in range(len(l1) - 1):\n        # Add the pair to the list\n        pairs.append((l1[i], l1[i+1]))\n    # Return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize an empty list to store the pairs\n    pairs = []\n    # loop through the list\n    for i in range(len(l1)-1):\n        # check if the current item is a valid pair\n        if l1[i]!= l1[i+1]:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [l1[i:i+2] for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    n = len(l1)\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    \"\"\"\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to the given sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs_count += 1\n    return pairs_count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns a new list that contains the elements that are present in li1 but not in li2.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists as input and returns a list of all the elements that are present in li1 but not in li2.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n\n    # create an empty list to store the difference\n    diff_list = []\n\n    # loop through each element in the first list\n    for elem in li1:\n\n        # check if the element exists in the second list\n        if elem not in li2:\n\n            # if the element is not in the second list, append it to the diff_list\n            diff_list.append(elem)\n\n    # return the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = [x for x in li1 if x not in li2]\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    for item in li1:\n        if item not in li2:\n            result.append(item)\n    return result"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num = 1 # initialize the first odd number\n    sum_of_pow_4 = 0 # initialize the sum of fourth power\n    \n    for i in range(n): # loop n times\n        sum_of_pow_4 += odd_num ** 4 # add fourth power of odd number to sum\n        odd_num += 2 # increment odd number by 2\n    \n    return sum_of_pow_4 # return the sum of fourth power"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    num_sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            num_sum += i ** 4\n    return num_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum\n\nn = int(input(\"Enter the number of odd natural numbers: \"))\nprint(\"The sum of fourth power of first {} odd natural numbers is: {}\".format(n, odd_num_sum(n)))"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n <= 0:\n        print(\"Please enter a positive integer.\")\n        return\n    \n    sum_fourth = 0\n    \n    for i in range(1, n+1, 2):\n        fourth = i**4\n        sum_fourth += fourth\n        \n    return sum_fourth"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_numbers = [i for i in range(2, n+1, 2)]\n    sum_of_fourth_powers = sum([i**4 for i in odd_numbers])\n    return sum_of_fourth_powers"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not.\n    \"\"\"\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            if not (i in ['(', '{', '['] and stack.pop() == i):\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for c in exp:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            top = stack.pop()\n            if top!= '(':\n                return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = []\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    open_brackets = {'(', '[', '{'}\n    close_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if open_brackets[char]!= stack.pop():\n                return False\n    \n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', ')']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            if char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == \"(\":\n            stack.append(i)\n        elif i == \")\":\n            if len(stack) == 0:\n                return False\n            elif stack.pop()!= \"(\":\n                return False\n    return len(stack) == 0"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n    # create a list to store the new words\n    new_words = []\n    # loop through the words\n    for word in words:\n        # check if the length of the word is less than K\n        if len(word) < K:\n            # if it is, add it to the new list\n            new_words.append(word)\n    # join the new words back into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    \n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n    \n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is less than K\n        if len(word) < K:\n            # Append the filtered word to the filtered list\n            filtered_words.append(word)\n    \n    # Join the filtered words back into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    words = [word for word in words if len(word)!= K]\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the given string into words\n    words = test_str.split()\n    \n    # Remove the words with length equal to K\n    new_words = [word for word in words if len(word)!= K]\n    \n    # Join the new words back into a string\n    new_str =''.join(new_words)\n    \n    return new_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    Write a function to remove all the words with k length in the given string.\n    \"\"\"\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Convert string to lowercase\n    test_str = test_str.lower()\n\n    # Split string into words\n    words = test_str.split()\n\n    # Initialize an empty list to store the filtered words\n    filtered_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than K\n        if len(word) > K:\n            # Append the filtered word to the filtered_words list\n            filtered_words.append(word)\n\n    # Join the filtered words into a string and return it\n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into a list of words\n    words = test_str.split()\n    # initialize an empty list to store the non-K-length words\n    non_K_words = []\n    # loop through each word in the list\n    for word in words:\n        # if the length of the word is not equal to K, add it to the non-K-length list\n        if len(word)!= K:\n            non_K_words.append(word)\n    # join the non-K-length words back into a string and return it\n    return''.join(non_K_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        for matchNum, match in enumerate(matches, start=1):\n            print(f\"Occurrence {matchNum}: {match.group()}\")\n            print(f\"Position: {match.start()} - {match.end() - 1}\")\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Search for the pattern in the string using re.search()\n    match = re.search(pattern, text)\n\n    # If no match is found, return None\n    if not match:\n        return None\n\n    # Otherwise, return the match object and its position\n    return match, match.start()"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # use regular expression to find all occurrences of pattern in text\n    matches = re.findall(pattern,text)\n\n    # check if there are any matches\n    if len(matches) == 0:\n        return None\n\n    # loop through matches and find position and occurrence of each match\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield start,end,match\n\n    # return the matches\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.finditer(pattern, text)\n    for matchNum, match in enumerate(matches, start=1):\n        start = match.start()\n        end = match.end()\n        substring = text[start:end]\n        print(f'Occurance {matchNum}: substring \"{substring}\" found at position {start}')\n    if not matches:\n        print('No match found')"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use re.findall() to find all occurrences of the pattern in the text\n    matches = re.findall(pattern,text)\n    # Check if there is at least one match\n    if matches:\n        # Loop through all matches and print their position and length\n        for match in matches:\n            # Print the position and length of the match\n            print(match)\n    else:\n        # If there is no match, print a message\n        print(\"No match found\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if not any(x % 2 for x in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0 and i % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n            else:\n                break\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if len(nums[i]) % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0 and (i + 1) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if len(set([nums[i], nums[i+1]])) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    vowels = set(['a', 'e', 'i', 'o', 'u'])  # set of vowels\n    count = 0\n\n    for i in range(len(test_str)):\n        # if current character is a vowel and its neighbor is also a vowel\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1:\n            if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels and i > 0 and test_str[i-1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str) - 1 and test_str[i] in vowels and test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n\n    # create an empty list to store the vowels\n    vowels = []\n\n    # loop through each character in the string\n    for char in test_str:\n        # check if the character is a vowel\n        if char.lower() in 'aeiou':\n            # if the character is a vowel, add it to the list of vowels\n            vowels.append(char)\n\n    # initialize a counter variable to store the count of vowels with neighbors\n    count = 0\n\n    # loop through each vowel and check if it has a neighbor in the list of vowels\n    for vowel in vowels:\n        # if the vowel has a neighbor, increment the counter variable\n        if vowel in vowels and vowel!= test_str[test_str.index(vowel)+1]:\n            count += 1\n\n    # return the count of vowels with neighbors\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for i in range(len(test_str)):\n        for j in range(i+1, len(test_str)+1):\n            if test_str[i:j] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    counts = [0] * len(vowels)\n\n    for i, char in enumerate(test_str):\n        if char.lower() in vowels:\n            if i > 0 and test_str[i-1].lower() in vowels:\n                counts[vowels.index(char.lower())] += 1\n            if i < len(test_str) - 1 and test_str[i+1].lower() in vowels:\n                counts[vowels.index(char.lower())] += 1\n\n    return sum(counts)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the count of each element in the list\n    counts = {}\n    for num in arr:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    \n    # calculate the sum of non-repeated elements in the list\n    non_repeated_sum = 0\n    for num, count in counts.items():\n        if count == 1:\n            non_repeated_sum += num\n    \n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements of the list\n    unique_elements = set(arr)\n    # initialize the sum variable to 0\n    sum = 0\n    # iterate over the unique elements and add their value to the sum\n    for element in unique_elements:\n        sum += element\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    unique_arr.sort()\n    return sum(unique_arr)"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for element in arr:\n        if element in count_dict:\n            count_dict[element] += 1\n        else:\n            count_dict[element] = 1\n\n    # Create a list to store the non-repeated elements\n    non_repeated_elements = []\n    for element in arr:\n        if count_dict[element] == 1:\n            non_repeated_elements.append(element)\n\n    # Find the sum of the non-repeated elements\n    sum_of_non_repeated_elements = sum(non_repeated_elements)\n\n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Remove duplicates from the list\n    unique_list = list(set(arr))\n\n    # Find the sum of the unique elements\n    sum_unique = sum(unique_list)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_set = set(arr)\n    # Initialize sum variable to 0\n    sum_of_non_repeated = 0\n    # Iterate over the unique set and add its elements to the sum variable\n    for element in unique_set:\n        sum_of_non_repeated += element\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_arr = list(set(arr))\n    sum_unique = sum(unique_arr)\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n\n    # Initialize a variable to store the sum of the unique elements\n    sum_unique = 0\n\n    # Loop through the unique set and add its values to the sum_unique variable\n    for element in unique_set:\n        sum_unique += element\n\n    # Return the sum_unique value\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set of the unique elements in the list\n    unique_elements = set(arr)\n    \n    # calculate the sum of the unique elements\n    sum_unique = sum(unique_elements)\n    \n    # return the sum of the unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return sum(unique_elements)"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key:\n            result.append([key])\n        result.extend(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    packs = []\n    for key, group in groupby(list1):\n        if key == None:\n            continue\n        packs.append(list(group))\n    return packs"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(enumerate(list1), lambda x: x[1] == x[0] + 1))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if not key:\n            result.extend(list(group))\n        else:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # group the list by their positions and apply the consecutive duplicates merge operator\n    return list(groupby(enumerate(list1), lambda x: x[0] - x[1]))[1]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, group in groupby(list1):\n        if i > 0:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    # Using itertools.groupby() method to group consecutive duplicates together\n    grouped_list = [list(group) for key, group in groupby(enumerate(list1), lambda x: x[1] == x[0])]\n\n    # Using list comprehension to convert group of consecutive duplicates into sublists\n    packed_list = [sublist[0] for sublist in grouped_list]\n\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for group in groupby(list1):\n        if len(list(group)) > 1:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack = []\n    for key, group in groupby(list1):\n        if len(list(group)) == 1:\n            pack.append(list(group))\n        else:\n            pack.append(list(group))\n            pack.append([next(group)])\n    return pack"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublists:\n            sublists[sublist_tuple] += 1\n        else:\n            sublists[sublist_tuple] = 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) not in count:\n            count[tuple(i)] = 1\n        else:\n            count[tuple(i)] += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create a dictionary to store the count of sublists\n    sublist_count = {}\n    \n    # Loop through each element in the list\n    for sublist in list1:\n        # Check if the sublist is already in the dictionary\n        if sublist in sublist_count:\n            # If it is, increment its count by 1\n            sublist_count[sublist] += 1\n        # If it's not, add it to the dictionary with a count of 1\n        else:\n            sublist_count[sublist] = 1\n            \n    # Convert the dictionary to a list of tuples and return it\n    return list(sublist_count.items())"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the counts of lists\n    counts = {}\n\n    # Iterate through the list of lists\n    for sublist in list1:\n        # Turn the sublist into a tuple and check if it's in the dictionary\n        if tuple(sublist) in counts:\n            # If it's in the dictionary, increment its count by 1\n            counts[tuple(sublist)] += 1\n        else:\n            # If it's not in the dictionary, add it to the dictionary with a count of 1\n            counts[tuple(sublist)] = 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sorted(sublist))\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for i in list1:\n        tuple_i = tuple(i)\n        if tuple_i in count_dict:\n            count_dict[tuple_i] += 1\n        else:\n            count_dict[tuple_i] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # initialize an empty dictionary\n    unique_lists = {}\n    \n    # iterate through each list in the input list\n    for lst in list1:\n        # convert the list to a tuple and check if it already exists in the dictionary\n        if tuple(sorted(lst)) in unique_lists:\n            # if it does, increment its count in the dictionary\n            unique_lists[tuple(sorted(lst))] += 1\n        else:\n            # if it doesn't, add it to the dictionary with a count of 1\n            unique_lists[tuple(sorted(lst))] = 1\n    \n    # return the dictionary\n    return unique_lists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create a dictionary to store the count of unique sublists\n    count_dict = {}\n    \n    # iterate over each item in the list\n    for item in list1:\n        # if the item is a list, turn it into a tuple and check if it's already in the dictionary\n        if isinstance(item, list):\n            if item not in count_dict:\n                # if it's not in the dictionary, add it with a count of 1\n                count_dict[item] = 1\n            else:\n                # if it's already in the dictionary, increment its count by 1\n                count_dict[item] += 1\n    \n    # return the dictionary\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        if sublist in sublist_count:\n            sublist_count[sublist] += 1\n        else:\n            sublist_count[sublist] = 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create a dictionary to store the number of occurrences of each unique sublist\n    sublist_counts = {}\n    # Loop through each item in the list\n    for item in list1:\n        # If the item is a list, turn it into a tuple and count its occurrences in the sublist_counts dictionary\n        if isinstance(item, list):\n            for sublist in item:\n                sublist_counts[tuple(sublist)] = sublist_counts.get(tuple(sublist), 0) + 1\n    # Return the sublist_counts dictionary\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    possible_sums = []\n    \n    # Create all possible combinations of sums\n    for i in range(1, total+1):\n        for j in range(i, total+1):\n            possible_sums.append((i,j))\n    \n    # Filter combinations that have tuples as elements\n    filtered_combinations = []\n    for combination in possible_sums:\n        if all(isinstance(x, tuple) for x in combination):\n            filtered_combinations.append(combination)\n    \n    return filtered_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all possible combinations of sums with tuples in the list.\n    '''\n    all_sums = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            all_sums.append((test_list[i], test_list[j]))\n    return all_sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                for l in range(k+1, len(test_list)):\n                    if (test_list[i][0] + test_list[j][0] + test_list[k][0] + test_list[l][0]) == test_list[i][1]:\n                        print(tuple(sorted((test_list[i], test_list[j], test_list[k], test_list[l]))))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)+1):\n        for j in combinations(test_list, i):\n            if sum(j) == 0:\n                print(j)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    '''\n    n = len(test_list)\n    for i in range(1, n+1):\n        for comb in combinations(test_list, i):\n            subsum = sum(comb)\n            if subsum in test_list:\n                print(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # function to find combinations of sums\n    def combination_sum(nums, target_sum):\n        comb = []\n        nums.sort()\n        start, end = 0, len(nums) - 1\n        while start <= end:\n            current_sum = nums[start] + nums[end]\n            if current_sum == target_sum:\n                comb.append((nums[start], nums[end]))\n                start += 1\n                end -= 1\n            elif current_sum < target_sum:\n                start += 1\n            else:\n                end -= 1\n        return comb\n\n    # creating a list of tuples\n    tuples_list = []\n    for i in range(1, len(test_list)+1):\n        for j in range(len(test_list)-i+1):\n            tuples_list.append(test_list[j:j+i])\n\n    # finding combinations of sums with tuples in the given tuple list\n    result = []\n    for tup in tuples_list:\n        comb = combination_sum(tup, sum(tup))\n        result.extend(comb)\n\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Sort the list of tuples in ascending order of the first element\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize a list to store the combinations\n    combinations_list = []\n\n    # Loop through all possible combinations of tuples in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Calculate the sum of the tuples in the combination\n            combination_sum = sum(test_list[i]) + sum(test_list[j])\n\n            # Check if the combination sum is equal to the sum of the list\n            if combination_sum == sum(test_list):\n                # If it is, add the combination to the list\n                combinations_list.append(tuple(sorted(test_list[i] + test_list[j])))\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(1, len(test_list)):\n        for j in range(i, len(test_list)):\n            for comb in combinations(test_list, i):\n                if sum(comb) == 0:\n                    yield tuple(comb)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    \"\"\"\n    def sum_combinations(lst):\n        \"\"\"\n        Return all possible combinations of sums from the given list.\n        \"\"\"\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)+1):\n                yield lst[i:j]\n\n    def find_pairs(lst):\n        \"\"\"\n        Return all possible pairs of sums from the given list.\n        \"\"\"\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                yield lst[i], lst[j]\n\n    def find_tuples(lst):\n        \"\"\"\n        Return all possible tuples of sums from the given list.\n        \"\"\"\n        for i in range(len(lst)):\n            for j in range(i+1, len(lst)):\n                for k in range(j+1, len(lst)):\n                    yield lst[i], lst[j], lst[k]\n\n    def find_combinations_with_tuples(lst):\n        \"\"\"\n        Return all possible combinations of sums with tuples in the given list.\n        \"\"\"\n        for tup in find_tuples(lst):\n            for comb in find_combinations(tup):\n                yield comb\n\n    def find_sums(lst):\n        \"\"\"\n        Return all possible sums from the given list.\n        \"\"\"\n        return list(set(sum_combinations(lst)))\n\n    def find_pairs_with_tuples(lst):\n        \"\"\"\n        Return all possible pairs of sums with tuples in the given list.\n        \"\"\"\n        for tup in find_tuples(lst):\n            for pair in find_pairs(tup):\n                yield pair\n\n    test_list = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\n    combinations_with_tuples = find_combinations_with_tuples(test_list)\n    print(\"Combinations with tuples:\")\n    print(list(combinations_with_tuples))\n\n    sums = find_sums(test_list)\n    print(\"\\nSums:\")\n    print(sums)\n\n    pairs_with_tuples = find_pairs_with_tuples(test_list)\n    print(\"\\nPairs with tuples:\")\n    print(list(pairs_with_tuples))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    # Initialize an empty list to store the combinations\n    result = []\n\n    # Sort the input list of tuples\n    test_list.sort()\n\n    # Iterate through all possible combinations of tuples\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Check if the sum of the current combination is equal to the target sum\n            if test_list[i][0]+test_list[j][0] == target_sum:\n                # If it is, add the combination to the result list\n                result.append(tuple(sorted(test_list[i]+test_list[j])))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    # Calculate the number of divisors using math.factorial function\n    divisor_count = math.factorial(n)\n\n    # Check if the count of divisors is even\n    if divisor_count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Count the number of divisors of a given number n.\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    # Count the number of divisors\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n\n    # Check if the count of divisors is even\n    if count % 2 == 0:\n        return count\n    else:\n        return count + 1"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even or odd. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n % 2 == 0:\n        count = 0\n        for i in range(3, int(math.sqrt(n))+1, 2):\n            while n % i == 0:\n                count += 1\n                n //= i\n        if n > 2:\n            count += 1\n        return count\n    else:\n        count = 0\n        for i in range(5, int(math.sqrt(n))+1, 6):\n            while n % i == 0:\n                count += 1\n                n //= i\n        if n > 5:\n            count += 1\n        return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef count_divisors(n): \n    \"\"\"\n    This function takes an integer input and checks whether its count of divisors is even or odd.\n    If the count of divisors is even, it returns True. Otherwise, it returns False.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    \n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    This function checks if the count of divisors of a number is even or odd.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count % 2 == 0:\n        print(n, \"has even count of divisors.\")\n    else:\n        print(n, \"has odd count of divisors.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes an integer n as input and returns a boolean value indicating whether the count of divisors of n is even or odd.\n    '''\n    if n == 1:\n        return True\n    divisors = [i for i in range(2, int(math.sqrt(n))+1) if n % i == 0]\n    if len(divisors) == 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to count the number of divisors of a given number.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 2\n            if n // i!= i:\n                count += 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors) % 2 == 0\n\nn = int(input(\"Enter a number: \"))\nprint(\"The count of divisors is even:\", count_divisors(n))"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n    sum = 0\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 0:\n            # If we are not on the first element or the element is even, add the current element to the sum\n            sum += arr[i]\n\n        else:\n            # If we are on the first element or the element is odd, subtract the previous element from the sum\n            sum -= arr[i-1]\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize a variable to store the sum\n    sum_odd = 0\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Find the sum of odd length subarrays\n        for j in range(i, len(arr)):\n            # Check if the length of the subarray is odd\n            if j - i + 1 % 2 == 1:\n                # Calculate the sum of the subarray and add it to the sum variable\n                sum_odd += arr[j] - arr[i]\n    # Return the sum of odd length subarrays\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Calculate the cumulative sum\n    cum_sum = [0] * (n + 1)\n    for i in range(n):\n        cum_sum[i + 1] = cum_sum[i] + arr[i]\n\n    # Calculate the sum of all odd length subarrays\n    count = 0\n    odd_sum = 0\n    for i in range(1, n - 1):\n        if i % 2 == 0:\n            count += 1\n            continue\n\n        if i + 1 in cum_sum and i - 1 in cum_sum:\n            odd_sum += cum_sum[i + 1] - cum_sum[i - 1]\n            count += 2\n        else:\n            count += 1\n\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd = 0\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2!= 0:\n                sum_odd += sum(arr[i:j+1])\n    return sum_odd"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = []\n    for i in range(len(arr)):\n        if i == 0 or i == len(arr) - 1:\n            sum_arr.append(arr[i])\n        elif (i+1) % 2!= 0:\n            sum_arr.append(arr[i] + arr[i+1])\n        else:\n            sum_arr.append(arr[i])\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_len = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n, 2):\n            sum_odd_len += arr[j]\n    return sum_odd_len"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    sum_odd_subarrays = 0\n\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 1:\n            sum_odd_subarrays += arr[i]\n\n    return sum_odd_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sub_sum = 0\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i] % 2 == 1:\n            sub_sum += arr[i]\n        else:\n            sub_sum -= arr[i-1]\n    return sub_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    subarray_sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if count == 0:\n            subarray_sum = arr[i]\n            count += 1\n        elif i == len(arr)-1 or (i+1)%2 == 0:\n            subarray_sum += arr[i]\n            count -= 1\n    return subarray_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    # Initialize variables to store sum and count of odd length subarrays\n    sum_odd = 0\n    count_odd = 0\n\n    # Loop through the array\n    for i in range(len(arr)):\n        # If the current element is odd, add it to the sum and increment the count\n        if i % 2 == 1:\n            sum_odd += arr[i]\n            count_odd += 1\n\n        # If the count of odd length subarrays becomes odd, add the sum and reset the variables\n        if count_odd % 2 == 1:\n            sum_odd += sum_odd\n            count_odd -= 1\n            sum_odd = 0\n            count_odd = 0\n\n    # Return the sum of all odd length subarrays\n    return sum_odd"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h, s, v = 0, 0, max_val\n    delta = max_val - min_val\n    if max_val == min_val:\n        h = 0\n        s = 0\n    else:\n        if max_val == r:\n            h = (g - b) / delta\n        elif max_val == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        h *= 60\n        if h < 0:\n            h += 360\n        s = delta / max_val\n    return int(h*255), int(s*255), int(v*255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Convert R, G, and B to a list\n    rgb_list = [r, g, b]\n\n    # Find the maximum value in the list\n    max_val = max(rgb_list)\n\n    # Find the minimum value in the list\n    min_val = min(rgb_list)\n\n    # Find the difference between maximum and minimum values\n    diff = max_val - min_val\n\n    # If the maximum value is equal to the minimum value,\n    # the color is gray\n    if max_val == min_val:\n        h = s = v = max_val\n    else:\n        # If the maximum value is greater than the minimum value\n        if max_val == r:\n            h = (g - b) / diff\n        elif max_val == g:\n            h = 2 + (b - r) / diff\n        else:\n            h = 4 + (r - g) / diff\n\n        # Convert the hue to an angle between 0 and 360 degrees\n        h = h * 60\n\n        # If the hue is greater than 360 degrees,\n        # wrap it to 0 degrees\n        if h > 360:\n            h = 0\n\n        # Calculate the saturation and value\n        if max_val == 0:\n            s = 0\n        else:\n            s = diff / max_val\n\n        # Calculate the brightness value\n        v = max_val\n\n    # Create a dictionary with hsv values\n    hsv_dict = {'h': h,'s': s, 'v': v}\n\n    return hsv_dict"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert RGB to RBG\n    rgb = (r, g, b)\n    \n    # Normalize RGB values\n    rgb = tuple(map(lambda x: (x / 255) * 100, rgb))\n    \n    # Convert RGB to HSV\n    h, s, v = rgb_to_hsv_color(rgb)\n    \n    return h, s, v\n\ndef rgb_to_hsv_color(rgb):\n    \"\"\"\n    Convert RGB color to HSV color.\n    \"\"\"\n    # Normalize RGB values\n    rgb = tuple(map(lambda x: (x / 255) * 100, rgb))\n    \n    # Convert RGB to HSV\n    r, g, b = rgb\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    h = 0\n    s = 0\n    v = max_val\n    \n    if max_val!= 0:\n        s = (max_val - min_val) / max_val\n    \n    delta = max_val - min_val\n    \n    if delta!= 0:\n        if max_val == r:\n            h = ((g - b) / delta) % 6\n        elif max_val == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n        \n        h = h * 60\n        if h < 0:\n            h += 360\n        \n        if h >= 360:\n            h = h % 360\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    \n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    \n    h = h * 60\n    \n    if h < 0:\n        h += 360\n    \n    s = delta / (1 - abs(2 * cmax - 1))\n    \n    v = cmax\n    \n    return int(h), int(s * 255), int(v * 255)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    delta = max_val - min_val\n\n    h = 0\n    s = 0\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n\n    h = h / 6\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * h - 1))\n\n    return [h, s, max_val]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r_max = max(r, g, b)\n    r_min = min(r, g, b)\n    delta = r_max - r_min\n    \n    if r_max == r_min:\n        h = 0 # achromatic\n    elif r_max == r_min:\n        if r_max == b:\n            h = 60 * ((g - b) / delta)\n        elif r_max == g:\n            h = 60 * ((b - r) / delta) + 120\n        else:\n            h = 60 * ((r - g) / delta) + 240\n    else:\n        h = hsv_to_h(r_max, g_max, b_max)\n    \n    if r_max == 0:\n        s = 0\n    else:\n        s = delta / r_max\n    \n    v = r_max / 255\n    \n    return h, s, v\n\ndef hsv_to_h(r, g, b):\n    if r == g and r == b:\n        h = 0\n    elif r == g:\n        h = 60 * ((g - b) / (r + 1e-10))\n    elif r == b:\n        h = 60 * ((r - g) / (r + 1e-10)) + 120\n    else:\n        h = 60 * ((g - b) / (r + 1e-10)) + 240\n    \n    return h\n\nif __name__ == \"__main__\":\n    r = 255\n    g = 0\n    b = 0\n    h, s, v = rgb_to_hsv(r, g, b)\n    print(\"HSV Color:\", h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert RGB color to HSV color.\n\n    :param r: red value between 0 and 255\n    :param g: green value between 0 and 255\n    :param b: blue value between 0 and 255\n    :return: HSV color values between 0 and 1\n    \"\"\"\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n\n    if max_value == 0:\n        h = 0\n        s = 0\n    else:\n        if max_value == r:\n            h = ((g - b) / delta) % 6\n        elif max_value == g:\n            h = (b - r) / delta + 2\n        else:\n            h = (r - g) / delta + 4\n\n        h = h / 6\n\n        if h < 0:\n            h += 1\n\n        s = delta / max_value\n\n    v = max_value\n\n    return [h, s, v]"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    max_color, min_color = max(r, g, b), min(r, g, b)\n    h, s, v = 0, 0, max_color\n    delta = max_color - min_color\n    if max_color == min_color:\n        h = 0\n    else:\n        if max_color == r:\n            h = (g - b) / delta\n        elif max_color == g:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        if h < 0:\n            h += 6\n        h = h / 6\n    if max_color == 0:\n        s = 0\n    else:\n        s = delta / max_color\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    h, s, v = 0, 0, 0\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if max_value == min_value:\n        h = 0\n    else:\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        elif b == max_value:\n            h = 4 + (r - g) / delta\n        h = h / 6\n        if h < 0:\n            h += 1\n        if h < 1:\n            s = delta / max_value\n        else:\n            s = delta / (2 - max_value)\n        v = max_value\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. \n    https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n\n    # Convert the RGB color values to integers\n    r, g, b = int(r), int(g), int(b)\n\n    # Convert the RGB values to the range 0-255\n    r, g, b = r/255, g/255, b/255\n\n    # Find the maximum value in the RGB color values\n    max_value = max(r, g, b)\n\n    # Find the minimum value in the RGB color values\n    min_value = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    delta = max_value - min_value\n\n    # Calculate the value of the saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = delta/max_value\n\n    # Calculate the value of the hue\n    if delta == 0:\n        hue = 0\n    elif max_value == r:\n        hue = (g - b)/delta\n    elif max_value == g:\n        hue = 2 + (b - r)/delta\n    else:\n        hue = 4 + (r - g)/delta\n\n    # Convert the hue to the range 0-360 degrees\n    hue = round(hue*60)\n\n    # Ensure the hue value is in the range 0-60 degrees\n    if hue < 0:\n        hue += 360\n\n    # Calculate the value of the value (brightness)\n    value = max_value\n\n    # Convert the HSV values to a tuple\n    hsv = (hue, saturation, value)\n\n    # Return the HSV values\n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an argument and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    \"\"\"\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n            \n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        if even_count > 0 and odd_count > 0:\n            break\n            \n    if even_count > 0 and odd_count > 0:\n        product = list1[0] * list1[-1]\n            \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as an input and returns the product of first even and odd number of the list.\n    \"\"\"\n    product = 1\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            product *= lst[i]\n    for i in range(len(lst)):\n        if lst[i] % 2!= 0:\n            product *= lst[i]\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_sum += num\n        else:\n            odd_count += 1\n            odd_sum += num\n\n    product = even_count * odd_count\n    if product == 0:\n        product = 1\n    else:\n        product = even_sum * odd_sum / product\n\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            product *= num\n        else:\n            odd_count += 1\n            product *= num\n            \n    return product, even_count, odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    product = even_count * odd_count\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list and returns the product of the first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        if even_count == odd_count:\n            product *= num\n            even_count = 0\n            odd_count = 0\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    total = 1\n    for i in lst:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        total *= min(i, 2 * i)\n    return total"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n\n    This function converts a tuple string to a tuple of integers.\n    The string should be enclosed in parentheses and separated by commas.\n\n    For example:\n    tuple_str_int((3, '4', 5, '6')) -> (3, 4, 5, 6)\n    '''\n\n    # Split the string by commas and parentheses\n    parts = test_str.replace('(', '').replace(')', '').split(',')\n\n    # Convert each part to an integer\n    result = tuple(int(part) for part in parts)\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Create an empty list to hold the integer tuples\n    int_tuples = []\n\n    # Split the string by commas\n    parts = test_str.split(\",\")\n\n    # Loop through the parts of the string\n    for part in parts:\n        # Check if the part is a valid integer string\n        try:\n            # Convert the part to an integer and add it to the list of tuples\n            int_tuples.append(int(part))\n        except ValueError:\n            # If the part is not a valid integer string, print an error message\n            print(f\"Error: {part} is not a valid integer string.\")\n\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    int_list = []\n    for char in test_str:\n        if char.isdigit():\n            int_list.append(int(char))\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    def convert_str_to_int(str_val):\n        '''\n        Function to convert string to integer.\n        '''\n        try:\n            return int(str_val)\n        except ValueError:\n            return None\n\n    def convert_tuple(lst):\n        '''\n        Function to convert list to tuple.\n        '''\n        return tuple([convert_str_to_int(str_val) for str_val in lst])\n\n    def convert_str_to_int_tuple(test_str):\n        '''\n        Function to convert tuple string to integer tuple.\n        '''\n        lst = test_str.split(',')\n        return convert_tuple(lst)\n\n    return convert_str_to_int_tuple(test_str)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string based on space and convert it to a list\n    lst = test_str.split()\n    # Initialize an empty list to store the integers\n    int_lst = []\n    # Loop through the list and convert each element to an integer\n    for elem in lst:\n        int_lst.append(int(elem))\n    # Return the list of integers\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    def convert_to_int(lst):\n        \"\"\"\n        Convert a list of characters to an integer.\n        \"\"\"\n        total = 0\n        for char in lst:\n            total *= 10\n            total += int(char)\n        return total\n    \n    def str_to_tuple(lst):\n        \"\"\"\n        Convert a list of characters to a tuple of integers.\n        \"\"\"\n        return tuple(map(int, lst))\n    \n    int_list = list(map(lambda x: x.strip(), test_str))\n    int_tuple = str_to_tuple(int_list)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n\n    # split the string into tuple elements\n    elements = test_str.split(',')\n\n    # convert each element to integer\n    int_elements = [int(element.strip()) for element in elements]\n\n    # convert integer elements back to tuple\n    result = tuple(int_elements)\n\n    return result"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert tuple string to list of tuples\n    tup_list = [tuple(map(int, tup)) for tup in test_str.split()]\n    return tup_list"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Split the string into a list of elements\n    elements = [element for element in test_str.split(',') if element!= '']\n    \n    # Convert each element to an integer\n    int_elements = [int(element) for element in elements]\n    \n    # Convert the list of integers into a tuple\n    int_tuple = tuple(int_elements)\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Convert tuple string to integer tuple.\n\n    Parameters:\n        test_str (str): Tuple string in the format \"(1, 2, 3)\"\n\n    Returns:\n        tuple: Tuple of integers\n    \"\"\"\n    # Split the string by the comma separator\n    str_list = test_str.split(',')\n\n    # Initialize an empty list to store the integers\n    int_list = []\n\n    # Loop over the string list and convert each string to an integer\n    for str_elem in str_list:\n        int_elem = int(str_elem)\n        int_list.append(int_elem)\n\n    # Return the integer list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Initialize the left and right indices\n    left = 0\n    right = len(a) - 1\n    \n    # Perform binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n        \n        # If the value is present at the middle position, return the index\n        if a[mid] == x:\n            return mid\n        \n        # If the value is greater, ignore left half\n        elif a[mid] < x:\n            left = mid + 1\n        \n        # Otherwise, ignore right half\n        else:\n            right = mid - 1\n    \n    # If the value is not present in the array, return the index where it would be inserted\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        index -= 1\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n\n    Args:\n    a (list): the sorted list\n    x (int): the value to locate\n\n    Returns:\n    int: the index of the right insertion point for x\n\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i == len(a) or a[i]!= x:\n        i -= 1\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return len(a)\n    elif index == 0:\n        return 0\n    else:\n        return a[index-1]"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[^b]*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(matches[0])\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r\"(?<=a)b{3}\")\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba{3}b\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.+b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a[b]{3}')\n    return pattern.match(text) is not None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Combine the two lists into a single list\n    combined_list = test_list + [test_str]\n    \n    # Convert the combined list to a tuple and return it\n    return tuple(combined_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for i in range(len(test_str)):\n        new_list.append(test_str[i])\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tuple = tuple(test_str.split()) + tuple(test_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    return (test_str, *test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple and concatenate it with the string\n    return (test_str + tuple(test_list))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    tuple_list = tuple(test_list)\n    # concatenate the string and the tuple\n    new_tuple = (test_str, tuple_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        for j in range(2, len(nums[i]), 2):\n            if nums[i][j] % 2 == 0:\n                even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n\n    # Initialize an empty dictionary to store the even count of each index\n    even_counts = {}\n\n    # Iterate through the list\n    for i in range(len(nums)):\n        # Check if the current index is even\n        if i % 2 == 0:\n            # Check if the current number is even\n            if nums[i] % 2 == 0:\n                # If the current index is even and the number is even, increment the count of that index in the dictionary\n                if i in even_counts:\n                    even_counts[i] += 1\n                else:\n                    even_counts[i] = 1\n\n    # Iterate through the even counts dictionary and check if all values are even\n    for key, value in even_counts.items():\n        if value % 2!= 0:\n            return False\n\n    # If all even counts are even, return True\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_found = True\n    for i in range(0, len(nums), 2):\n        if len(nums[i:i+2]) % 2 == 1:\n            even_found = False\n            break\n    return even_found"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and len(nums[i]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums:\n            if num % 2 == 0 and i in num:\n                count += 1\n        if count % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            even_count += 1\n    return even_count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums) // 2"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    This function takes a tuple as an input and removes any tuples it contains.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for sublist in test_tup for item in sublist)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for tup in test_tup for item in tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Create a list of tuples to remove\n    tuples_to_remove = [(), (1,), (1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4, 5, 6, 7, 8), (1, 2, 3, 4, 5, 6, 7, 8, 9), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19), (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)]\n    # Loop through the tuples in the test_tup\n    for tup in test_tup:\n        # Check if the tuple is in the tuples_to_remove list\n        if tup in tuples_to_remove:\n            # If it is, remove the tuple from the list\n            test_tup.remove(tup)\n    # Return the modified test_tup\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for i in test_tup:\n        if type(i)!= tuple:\n            new_tup.append(i)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for subitem in item:\n                flat_list.append(subitem)\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result_tup = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result_tup.extend(remove_nested(item))\n        else:\n            result_tup.append(item)\n    return tuple(result_tup)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for i in item:\n                if isinstance(i, tuple):\n                    for j in i:\n                        new_list.append(j)\n                else:\n                    new_list.append(i)\n        else:\n            new_list.append(item)\n    return tuple(new_list)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    count = 0\n    for item in input_list: \n        if isinstance(item, list): \n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_lists(input_list, count=0):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if not input_list:\n        return count\n    \n    if isinstance(input_list[0], list):\n        count_lists(input_list[0], count=count+1)\n    \n    return count_lists(input_list[1:], count=count)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    \"\"\"\n    This function takes a list of lists and returns the number of lists in the given list.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_pos = -1\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n    # Initialize the mid pointer\n    mid = (left + right) // 2\n    # Loop while left is less than right\n    while left < right:\n        # Check if the current element is equal to x\n        if arr[mid] == x:\n            # If it is, update the last position\n            last_pos = mid\n        # If the current element is less than x, move the left pointer to the right\n        elif arr[mid] < x:\n            left = mid + 1\n        # If the current element is greater than x, move the right pointer to the left\n        else:\n            right = mid - 1\n        # Update the mid pointer\n        mid = (left + right) // 2\n    # If the left pointer reaches the right of the array, update the last position to the length of the array\n    if left == right:\n        last_pos = left\n    # Return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize variables\n    i = len(arr) - 1\n    last_position = -1\n    \n    # iterate through the array\n    while i >= 0:\n        # check if the current element is equal to the target element\n        if arr[i] == x:\n            # if the current element is found, set the last position\n            last_position = i\n        # decrement the index\n        i -= 1\n    \n    # return the last position found\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: an array `arr` and an element `x` to search for. \n    It returns the last position of `x` in the array or -1 if `x` is not present in the array.\n\n    Args:\n        arr (list): The sorted array to search in.\n        x (int): The element to search for in the array.\n\n    Returns:\n        int: The last position of `x` in the array or -1 if `x` is not present in the array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a Python function to find the last position of an element in a sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            # If x is present at the mid position, check the next mid position to see if it is the last occurrence.\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes two arguments: the sorted array and the element to be searched.\n    It returns the last position of the element in the array or -1 if the element is not present in the array.\n    \"\"\"\n    # Initialize two pointers: low and high\n    low, high = 0, len(arr) - 1\n    # While low is less than or equal to high\n    while low <= high:\n        # Calculate the midpoint\n        mid = (low + high) // 2\n        # If the midpoint element is equal to x\n        if arr[mid] == x:\n            # Initialize a variable to keep track of the position of x in the array\n            last_pos = mid\n            # While the left element is smaller than the right element\n            while mid - 1 >= 0 and arr[mid - 1] == x:\n                # Update the last_pos variable to the left of the midpoint\n                last_pos = mid - 1\n                # Move the midpoint to the left\n                mid -= 1\n            # Return the last_pos variable\n            return last_pos\n        # If the midpoint element is greater than x\n        elif arr[mid] > x:\n            # Update the high pointer to mid-1\n            high = mid - 1\n        # If the midpoint element is less than x\n        else:\n            # Update the low pointer to mid+1\n            low = mid + 1\n    # If the element is not present in the array\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    i = len(arr) - 1\n    while arr[i] > x:\n        i -= 1\n    return i if i >= 0 else -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        \n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    return -1 # element not found"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            while mid > 0 and arr[mid - 1] == x:\n                mid -= 1\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        if arr[mid] == x:\n            while mid > 0 and arr[mid-1] == x:\n                mid -= 1\n            \n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if x not in arr:\n        return -1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a[^b]*b$'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*?b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    return re.search(pattern, text)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a\\w*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_dict = 0\n    for key, value in dict.items():\n        sum_of_dict += value\n    return sum_of_dict"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum_of_items = 0\n    for value in dictionary.values():\n        sum_of_items += value\n    return sum_of_items"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter lower limit: \")), int(input(\"Enter upper limit: \"))\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function takes an integer n and returns the sum of all odd natural numbers within the range [1, n].\n    \"\"\"\n    total = 0  # Initialize the sum variable to zero\n    for i in range(1, n+1):  # Loop through all numbers from 1 to n\n        if i % 2!= 0:  # Check if the number is odd\n            total += i  # Add the odd number to the sum\n    return total  # Return the sum of all odd natural numbers within the range [1, n]"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    \"\"\"\n    This function finds the sum of all odd natural numbers within the range [1, n] inclusive.\n    \"\"\"\n    return sum(x for x in range(1, n+1, 2))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(l, r): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0 \n    for num in range(l, r+1): \n        if num % 2!= 0: \n            sum += num \n    return sum "
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    total = 0\n    \n    while l <= r:\n        total += l\n        l += 2\n        \n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_array(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n\n    :param arr: an array of integers\n    :return: the sum of all elements in the array\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for i in arr:\n        total += i\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_array(arr):\n    \"\"\"\n    This function takes in an array of integers and returns the sum of all the elements in the array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n    if d == 0:\n        return n\n    mask = 0xFFFFFFFF if n >= 0 else 0xFFFFFFFF + 1\n    rotated_n = ((n << d) & mask) | ((n >> (32 - d)) & ~mask)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # convert d to binary string\n    d_binary = bin(d)[2:].zfill(32)\n    # left rotate the number by d bits\n    rotated = ((n << d) | (n >> (32 - d))) & 0xffffffff\n    # left shift rotated number by d bits\n    result = (rotated << d_binary.count('1')) & 0xffffffff\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Convert the input to binary format\n    binary = bin(n)[2:]\n    # Get the number of leading zeros in the binary representation\n    n_zeros = len(binary) - binary.lstrip('0').__len__()\n    # Calculate the number of bits to rotate\n    num_bits = d % n_zeros\n    # If the number of bits to rotate is zero, return the original number\n    if num_bits == 0:\n        return n\n    # Calculate the number of bits to rotate left\n    shift = n_zeros - num_bits\n    # Calculate the new value of the rotated bits\n    new_value = int(binary[0:shift] + binary[shift:], 2)\n    # Combine the original number with the rotated bits\n    result = n | new_value\n    # Convert the result to decimal format\n    result_decimal = bin(result)[2:]\n    # Add leading zeros to the result to match the original number's bit length\n    result_decimal = '0'*(n_zeros - len(result_decimal)) + result_decimal\n    # Return the result as an integer\n    return int(result_decimal, 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    mask = 0xffffffff\n    # rotate right bits by d bits\n    n = (n >> d) | (n << (32 - d))\n    # set the last d bits to 0\n    n &= mask\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    n = n & ((1 << 32) - 1)  # make sure the number is 32 bits\n    n = (n << d) | (n >> (32 - d))\n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n\n    # Extract the least significant d bits\n    least_significant_d_bits = n & ((1 << d) - 1)\n\n    # Shift the most significant d bits to the left\n    most_significant_d_bits = n >> d\n\n    # Combine the shifted bits with the least significant d bits\n    new_number = least_significant_d_bits | most_significant_d_bits\n\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate\n    num_bits = 32\n    num_bits_to_rotate = d % num_bits\n\n    # Extract the bits to rotate\n    bits_to_rotate = n & ((1 << num_bits_to_rotate) - 1)\n\n    # Extract the remaining bits\n    remaining_bits = n >> num_bits_to_rotate\n\n    # Shift the remaining bits to the left by d bits\n    rotated_bits = bits_to_rotate << num_bits_to_rotate\n\n    # Combine the rotated bits with the remaining bits\n    result = rotated_bits | remaining_bits\n\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = n & 0xFFFFFFFF  # Ensure that the number is 32 bit\n    d = d % 32  # Ensure that d is between 0 and 31\n    \n    # Perform the rotation\n    rotated = ((n >> d) | (n << (32 - d))) & 0xFFFFFFFF\n    \n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to rotate left bits by d bits a given number.\n    \"\"\"\n    # Convert the number to binary string\n    binary_str = bin(n)[2:]\n    # If the binary string is less than d bits long, pad with zeros on the left\n    if len(binary_str) < d:\n        binary_str = \"0\" * (d - len(binary_str)) + binary_str\n    # Reverse the binary string\n    reversed_binary_str = binary_str[::-1]\n    # Convert the reversed binary string to decimal integer\n    rotated_number = int(reversed_binary_str, 2)\n    # Return the rotated number\n    return rotated_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub('\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regex to remove all whitespaces from the string\n    text = re.sub('\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y or y == z or x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(min(x, y, z), max(x, y, z)+1):\n        if i % x == 0 and i % y == 0 and i % z == 0:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z and x == z:\n        count += 1\n    elif x == y and y!= z and x!= z:\n        count += 1\n    elif x!= y and y == z and x!= z:\n        count += 1\n    elif x!= y and y!= z and x == z:\n        count += 1\n    elif x == y and y == z:\n        count += 1\n    elif x!= y and y == z:\n        count += 1\n    elif x == y and y!= z:\n        count += 1\n    elif x!= y and y!= z:\n        count += 1\n    elif x == z and y == z and x == y:\n        count += 1\n    elif x!= z and y!= z and x!= y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y+1):\n        for j in range(x, y+1):\n            for k in range(x, y+1):\n                if i!= j!= k!= x and i == x and j == x and k == x:\n                    count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z or x!= y == z or x!= y!= z:\n        count += 1\n    elif x!= y == z or x == y!= z or x == y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(3):\n        if x == y:\n            count += 1\n        if x == z:\n            count += 1\n        if y == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            return n-i\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # If the array is already sorted or has only one element, there is no rotation required.\n    if n <= 1 or arr == sorted(arr):\n        return 0\n    \n    # Initialize variables to keep track of the minimum and maximum elements in the array.\n    min_val = arr[0]\n    max_val = arr[0]\n    \n    # Loop through the array and update the minimum and maximum values.\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n        elif arr[i] > max_val:\n            max_val = arr[i]\n    \n    # If all elements in the array are unique values, there is no rotation required.\n    if min_val == max_val:\n        return 0\n    \n    # Count the number of rotations required to generate a sorted array.\n    # We will start by counting the number of rotations required to generate the reverse of the array.\n    rev_arr = arr[::-1]\n    rotations = count_rotation(rev_arr)\n    \n    # If all elements in the reverse of the array are unique values, there is no rotation required.\n    if min(rev_arr) == max(rev_arr):\n        return rotations\n    \n    # Now, we need to count the number of rotations required to generate a sorted array that has unique values.\n    # We will start by counting the number of rotations required to generate the array with the first element removed.\n    new_arr = arr[1:]\n    rotations += count_rotation(new_arr)\n    \n    # If all elements in the new array are unique values, there is no rotation required.\n    if min(new_arr) == max(new_arr):\n        return rotations\n    \n    # Now, we need to count the number of rotations required to generate a sorted array that has unique values.\n    # We will start by counting the number of rotations required to generate the array with the last element removed.\n    new_arr = arr[:-1]\n    rotations += count_rotation(new_arr)\n    \n    # If all elements in the new array are unique values, there is no rotation required.\n    if min(new_arr) == max(new_arr):\n        return rotations\n    \n    # Otherwise, we need to perform a full rotation by rotating the array to the right.\n    rotations += 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Traverse the sorted array\n    for i in range(n - 1):\n        if sorted_arr[i] > sorted_arr[i+1]:\n            count += 1\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Get the length of the array\n    n = len(arr)\n\n    # Initialize the count to zero\n    count = 0\n\n    # Traverse through the array\n    for i in range(n):\n        # Traverse through the remaining elements of the array\n        for j in range(i+1, n):\n            # Check if the current element is smaller than the next element\n            if arr[i] > arr[j]:\n                # Increment the count by 1\n                count += 1\n\n    # Return the count of rotations\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # Find the number of unique elements in the array\n    n = len(arr)\n    unique_elements = set(arr)\n    unique_elements_count = len(unique_elements)\n    \n    # If the array has only one element or if the unique elements are consecutive, there is no rotation required\n    if n <= 1 or unique_elements_count <= 1:\n        return 0\n    \n    # If the array has only two or more elements, the number of rotations is equal to the difference between the total number of elements and the number of unique elements\n    if n >= 2:\n        return n - unique_elements_count\n    \n    # If the array has three or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only two elements\n    if n >= 3:\n        return count_rotation([arr[1], arr[0], arr[2]])\n    \n    # If the array has four or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only one element\n    if n >= 4:\n        return count_rotation([arr[2], arr[3]])\n    \n    # If the array has five or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only three elements\n    if n >= 5:\n        return count_rotation([arr[1], arr[4], arr[0]])\n    \n    # If the array has six or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only two elements and one element\n    if n >= 6:\n        return count_rotation([arr[1], arr[0], arr[2], arr[3]])\n    \n    # If the array has seven or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only three elements and two elements\n    if n >= 7:\n        return count_rotation([arr[4], arr[0], arr[1], arr[2]])\n    \n    # If the array has eight or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only four elements\n    if n >= 8:\n        return count_rotation([arr[3], arr[0], arr[1], arr[2], arr[4]])\n    \n    # If the array has nine or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only five elements\n    if n >= 9:\n        return count_rotation([arr[2], arr[3], arr[0], arr[1], arr[4]])\n    \n    # If the array has ten or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only six elements\n    if n >= 10:\n        return count_rotation([arr[4], arr[3], arr[0], arr[2], arr[1]])\n    \n    # If the array has eleven or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only seven elements\n    if n >= 11:\n        return count_rotation([arr[3], arr[0], arr[1], arr[4], arr[2]])\n    \n    # If the array has twelve or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only eight elements\n    if n >= 12:\n        return count_rotation([arr[1], arr[2], arr[3], arr[4], arr[0]])\n    \n    # If the array has thirteen or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only nine elements\n    if n >= 13:\n        return count_rotation([arr[1], arr[4], arr[3], arr[0], arr[2]])\n    \n    # If the array has fourteen or more elements, the number of rotations is equal to the number of rotations required to generate a sorted array using only ten elements\n    if n >= 14:\n        return count_rotation([arr[4], arr[1], arr[2], arr[3], arr[0]])\n    \n    # If the array has fifteen or more elements, the number of rotations is equal"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    This function takes a sorted array as input and returns the number of rotations required to generate the array.\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[i+1]:\n            count += 1\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse through all possible pairs of subarrays\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the subarrays are sorted, increment count\n            if arr[i] <= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    \n    # sort the array\n    for i in range(n):\n        for j in range(i, n):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                \n    # count the number of rotations required\n    for i in range(n):\n        if i % 2 == 0:\n            count += min(arr[i], arr[n-i-1])\n        else:\n            count += max(arr[i], arr[n-i-1])\n            \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Find the first element in the array which is greater than the first element\n    left = 1\n    right = n - 1\n    while arr[left - 1] >= arr[0]:\n        left += 1\n\n    while arr[right + 1] >= arr[0]:\n        right -= 1\n\n    # If the first element is greater than the last element, it means the array is already sorted\n    if left == right:\n        return 0\n\n    # The array is not yet sorted. Perform the required rotations and count the number of rotations\n    # required to generate the sorted array.\n    count = 0\n    while left < right:\n        temp = arr[left]\n        arr[left] = arr[right]\n        arr[right] = temp\n        count += 1\n        left += 1\n        right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Sort the array\n    arr.sort()\n    # Count the number of rotations required\n    count = 0\n    for i in range(n):\n        if arr[i]!= arr[n-1-i]:\n            count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Check if the given number is negative or zero\n    if n <= 0:\n        return False\n\n    # Initialize the lower and upper bounds for the square root\n    lower = 1\n    upper = int(n ** 0.5) + 1\n\n    # Iterate until the lower bound is less than or equal to the upper bound\n    while lower <= upper:\n        # Calculate the mid point of the current range\n        mid = (lower + upper) // 2\n\n        # If the square of the mid point is equal to the given number, return True\n        if mid * mid == n:\n            return True\n\n        # If the square of the mid point is less than the given number, update the lower bound\n        elif mid * mid < n:\n            lower = mid + 1\n\n        # If the square of the mid point is greater than the given number, update the upper bound\n        else:\n            upper = mid - 1\n\n    # If the code reaches here, it means that the given number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if n is a perfect square,\n    False otherwise.\n\n    The function checks if n is a perfect square by iterating from 1 to n-1 and checking if\n    the square of each number is equal to n. If it is, then n is a perfect square and the\n    function returns True. Otherwise, it returns False.\n\n    Note: This algorithm has a time complexity of O(sqrt(n)) and can be used to check whether a\n    given number is a perfect square or not.\n    \"\"\"\n\n    if n <= 0:\n        return False\n\n    for i in range(1, int(n ** 0.5) + 1):\n        if n == i ** 2:\n            return True\n        elif n > i ** 2:\n            return False\n\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # First check whether the number is negative or zero\n    if n <= 0:\n        return False\n\n    # Square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check whether the square root is an integer or not\n    if sqrt_n * sqrt_n!= n:\n        return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # Initialize the variable to store the square root\n    square_root = 0\n    \n    # Initialize the variable to store the difference between the square root and the given number\n    difference = n\n    \n    # Check whether the square root is an integer or not\n    while difference > 0:\n        # Update the square root\n        square_root = difference\n        \n        # Calculate the difference between the square root and the given number\n        difference = (square_root + n // square_root) - square_root\n        \n    # If the difference is less than or equal to zero, then the given number is a perfect square\n    if difference <= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n**0.5)\n    return root*root == n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    i = 0\n    while i*i <= n:\n        i += 1\n    if i*i == n:\n        return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Convert the number to float, so we can use integer division\n    num = float(n)\n\n    # Iterate through the range of numbers from 1 to the square root of the number\n    for i in range(1, int(num ** 0.5) + 1):\n        # Check if the number is equal to the square root of the number, by taking the square of the number and comparing it to the square of the square root\n        if i ** 2 == num:\n            return True\n\n        # Check if the number is equal to the square root of the number minus 1, by taking the square of the number and subtracting 1 from it\n        if i ** 2 + 1 == num:\n            return True\n\n    # If we have not found a perfect square, return False\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n as input and returns True if it is a perfect square else False.\n    \"\"\"\n    import math\n    sqrt_n = int(math.sqrt(n))\n    if sqrt_n**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    # convert the input number to integer\n    num = int(n)\n    # use the formula to check if the number is a perfect square or not\n    root = num ** 0.5\n    # check if the root is an integer or not\n    if root.is_integer():\n        # if the root is an integer, then the number is a perfect square\n        return True\n    else:\n        # if the root is not an integer, then the number is not a perfect square\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a number is a perfect square or not.\n    \"\"\"\n    # Check if the input number is less than or equal to zero\n    if n <= 0:\n        return False\n    \n    # Check if the input number is a square number\n    i = 1\n    while i * i <= n:\n        if n % i:\n            return False\n        i += 1\n    \n    # If the loop completes, then the number is a perfect square\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr):\n    # initialize variables to store the product and the sum of numbers\n    product = 1\n    sum_of_numbers = 0\n\n    # loop through each number in the list\n    for num in arr:\n        # add the number to the sum of numbers\n        sum_of_numbers += num\n\n        # multiply the product by the current number\n        product *= num\n\n    # check if the product is even\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    \n    # Initialize the product variable and the even flag variable\n    product = 1\n    even_flag = True\n    \n    # Iterate through the list and multiply each element with the product\n    for i in arr:\n        product *= i\n        \n    # Check if the product is even or odd\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    product = 1  # initialize product as 1\n\n    for num in arr:\n        product *= num  # multiply current number with product\n\n    return product % 2 == 0  # return True if product is even, False otherwise"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers in the list is even.\")\n    else:\n        print(\"The product of the numbers in the list is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    def find_max_sum(sublists):\n        '''\n        Helper function to find the maximum sum in a list of sublists.\n        '''\n        if len(sublists) == 1:\n            return sublists[0]\n        else:\n            max_sum = sublists[0]\n            for i in range(1, len(sublists)):\n                max_sum = max(max_sum, sublists[i] + find_max_sum(sublists[:i]))\n            return max_sum\n    \n    # Find the maximum sum in each sublist\n    sublist_sums = []\n    for sublist in lists:\n        sublist_sums.append(find_max_sum(sublist))\n    \n    # Find the sublist with the maximum sum\n    max_sublist_sum = max(sublist_sums)\n    max_sublist_indices = [sublist_sums.index(max_sublist_sum)]\n    for i in range(len(lists)):\n        if sublist_sums[i] == max_sublist_sum:\n            max_sublist_indices.append(i)\n    \n    # Find the sublist with the maximum total sum\n    max_total_sum = max_sublist_sum\n    max_total_sublist = []\n    for index in max_sublist_indices:\n        total_sum = 0\n        for i in range(len(lists[index])):\n            total_sum += lists[index][i]\n        if total_sum > max_total_sum:\n            max_total_sum = total_sum\n            max_total_sublist = []\n        elif total_sum == max_total_sum:\n            max_total_sublist.append(index)\n    \n    return max_total_sublist"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = None\n    for lst in lists:\n        total = sum(lst)\n        if total > max_sum:\n            max_sum = total\n            max_list = lst\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n    \n    for lst in lists:\n        sum_lst = sum(lst)\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = lst\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            current_sum = lists[i][j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i][j]]\n            elif current_sum == max_sum:\n                max_list.append(lists[i][j])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n    # Initialize a variable to store the maximum sum\n    max_sum = float('-inf')\n\n    # Loop through all the lists in the input list\n    for i in range(len(lists)):\n        # Initialize a variable to store the current sum of elements\n        current_sum = 0\n\n        # Loop through all the elements in the current list\n        for j in range(len(lists[i])):\n            # Add the current element to the current sum\n            current_sum += lists[i][j]\n\n        # Check if the current sum is greater than the current maximum sum\n        if current_sum > max_sum:\n            # Update the maximum sum to be the current sum\n            max_sum = current_sum\n\n    # Initialize a variable to store the list with the maximum sum\n    max_list = []\n\n    # Loop through all the lists in the input list\n    for i in range(len(lists)):\n        # Check if the sum of the current list is equal to the maximum sum\n        if sum(lists[i]) == max_sum:\n            # Add the current list to the list of lists with the maximum sum\n            max_list.append(lists[i])\n\n    # Return the list of lists with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    \n    for lst in lists:\n        sum = sum(lst)\n        if sum > max_sum:\n            max_sum = sum\n            result = lst\n    \n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = -float('inf')\n    max_list = []\n\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            for k in range(len(lists[i][j])):\n                if lists[i][j][k] > max_sum:\n                    max_sum = lists[i][j][k]\n                    max_list = [[lists[i][j][k]]]\n                elif lists[i][j][k] == max_sum:\n                    max_list.append(lists[i][j][k])\n\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        temp_sum = 0\n        for j in range(len(lists[i])):\n            temp_sum += lists[i][j]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n            max_list = [lists[i]]\n        elif temp_sum == max_sum:\n            max_list.append(lists[i])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    \"\"\"\n\n    # Initialize variables to store the sum and the list with the maximum sum\n    max_sum = 0\n    max_list = []\n\n    # Iterate through each list in the input list\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n\n        # Check if the sum is greater than the current maximum sum\n        if sum_lst > max_sum:\n            max_sum = sum_lst\n            max_list = lst\n\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    uppercase_start = 0\n    current_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n            if current_run > uppercase_count:\n                uppercase_count = current_run\n                uppercase_start = i - current_run + 1\n        else:\n            current_run = 0\n            \n    return test_str[uppercase_start:uppercase_start+uppercase_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n\n    # Initialize variables to keep track of the start and end of the current run of uppercase characters\n    start = 0\n    end = 0\n\n    # Loop through the string\n    for i in range(1, len(test_str)):\n        # If the current character is uppercase and the previous character was not, update the start and end indices\n        if test_str[i].isupper() and not test_str[i-1].isupper():\n            start = i\n            end = i\n\n        # If the current character is not uppercase and the previous character was uppercase, update the end index\n        elif not test_str[i].isupper() and test_str[i-1].isupper():\n            end = i\n\n    # Return the length of the maximum run of uppercase characters\n    return end - start + 1"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_start = i - count + 1\n        else:\n            count = 0\n\n    return max_start, max_count"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_start = 0\n    run_end = 0\n    max_run_length = 0\n    max_run = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if run_end == 0:\n                run_start = i\n                run_end = i + 1\n            else:\n                run_end += 1\n        else:\n            if run_end!= 0:\n                if run_end - run_start > max_run_length:\n                    max_run_length = run_end - run_start\n                    max_run = test_str[run_start:run_end]\n                run_start = 0\n                run_end = 0\n    if run_end!= 0:\n        if run_end - run_start > max_run_length:\n            max_run_length = run_end - run_start\n            max_run = test_str[run_start:run_end]\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    current_char = None\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the character is uppercase and is the first character in the current run, update current_run and current_char\n        if char.isupper() and (current_char is None or not char.isupper()):\n            current_run += 1\n            current_char = char\n        # If the character is not uppercase or the current character is uppercase and the current run is greater than the maximum run, update max_run\n        elif char.isupper() and char!= current_char:\n            if current_run > max_run:\n                max_run = current_run\n                current_run = 1\n                current_char = char\n            else:\n                current_run = 1\n                current_char = char\n    \n    # If there is still a current run, update max_run with it\n    if current_run > max_run:\n        max_run = current_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    uppercase_count = 0\n    max_uppercase_count = 0\n    max_run = ''\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n            if uppercase_count > max_uppercase_count:\n                max_uppercase_count = uppercase_count\n                max_run = test_str[i]\n        else:\n            uppercase_count = 0\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables for maximum run and current run\n    max_run = 0\n    current_run = 0\n    \n    # Iterate through the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the character is not uppercase, reset the current run and check if it's longer than the maximum run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    # Check if the current run is longer than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables for maximum run and current run\n    max_run = 0\n    curr_run = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # Check if current character is uppercase\n        if char.isupper():\n            # Increment current run\n            curr_run += 1\n            # Check if current run is greater than maximum run\n            if curr_run > max_run:\n                # Update maximum run\n                max_run = curr_run\n        else:\n            # Reset current run if current character is not uppercase\n            curr_run = 0\n\n    # Return maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    uppercase_count = 0\n    current_run_length = 0\n    max_run_length = 0\n    max_run = ''\n\n    for char in test_str:\n        if char.isupper():\n            uppercase_count += 1\n        else:\n            if uppercase_count > 0:\n                if current_run_length > max_run_length:\n                    max_run_length = current_run_length\n                    max_run = current_run_length * char\n                current_run_length = 0\n                uppercase_count = 0\n\n    if uppercase_count > 0:\n        if current_run_length > max_run_length:\n            max_run_length = current_run_length\n            max_run = current_run_length * char\n\n    return max_run_length, max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    run_length = 0\n    current_run_length = 0\n    start_index = 0\n    end_index = 0\n    upper_case_count = 0\n    for index, char in enumerate(test_str):\n        if char.isupper():\n            current_run_length += 1\n        else:\n            current_run_length = 0\n        if current_run_length > run_length:\n            run_length = current_run_length\n            end_index = index\n            start_index = index - current_run_length + 1\n        upper_case_count += 1\n    return start_index, end_index, run_length, upper_case_count"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # loop through the list of numbers and check if each number is odd\n    for num in nums:\n        if num % 2!= 0:\n            # return the first odd number found\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    This function takes a list of numbers as input and returns the first odd number in the list.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # initialize the first odd number to None\n    first_odd_num = None\n    # iterate over each number in the list\n    for num in nums:\n        # if the number is odd and is the first odd number, set it to the number\n        if num % 2 == 1 and first_odd_num is None:\n            first_odd_num = num\n        # if the number is odd and is not the first odd number, return the first odd number\n        elif num % 2 == 1 and first_odd_num is not None:\n            return first_odd_num\n    # if the loop completes without finding any odd numbers, return None\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes a tuple and an integer K as input and returns True if K is present in the tuple,\n    False otherwise.\n    '''\n    if len(test_tup) < K:\n        return False\n    for i in range(len(test_tup)-K+1):\n        if sum(test_tup[i:i+K]) == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes two tuples as input and a value of K as an argument.\n    It returns True if the K is in the first tuple and False otherwise.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple as input and a number K as an argument. \n    It then checks if the given tuple contains the number K or not.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[:K-i-1]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same number of elements.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The first tuple contains an element that is larger than the corresponding element in the second tuple.\")\n            return\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"The element at index\", i, \"of the second tuple is greater than the element at index\", i, \"of the first tuple.\")\n            return False\n    \n    print(\"All elements of the second tuple are smaller than or equal to their corresponding element in the first tuple.\")\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # check if the second tuple is shorter than the first tuple\n    if len(test_tup2) < len(test_tup1):\n        # if so, return False\n        return False\n\n    # loop over the second tuple\n    for i in range(len(test_tup2)):\n        # check if the i-th element of the second tuple is smaller than the i-th element of the first tuple\n        if test_tup2[i] < test_tup1[i]:\n            # if so, return False\n            return False\n    \n    # if all elements of the second tuple are smaller than their corresponding elements in the first tuple, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the lengths of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The lengths of the two tuples are not equal.\")\n        return\n\n    # Loop through the tuples and compare elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Element in second tuple is smaller than element in first tuple.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is not smaller than {test_tup2[i]} in position {i}.\")\n            return\n\n    print(\"All elements in both tuples are smaller.\")\n"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    }
]