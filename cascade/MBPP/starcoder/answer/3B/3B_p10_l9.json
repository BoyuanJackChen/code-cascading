[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == test_tup2[i]:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    # iterate over the tuples and compare the values\n    for tup in test_tup1:\n        if tup in test_tup2:\n            shared_elements.append(tup)\n    # return the shared elements\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup1[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup1[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Creating a set of elements from the first tuple\n    set1 = set(test_tup1)\n    # Creating a set of elements from the second tuple\n    set2 = set(test_tup2)\n    # Intersection of the two sets to find the shared elements\n    shared_elements = set1.intersection(set2)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return set1.intersection(set2)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Initialize variables\n    shared_elements = []\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the shared elements between the two sets\n    shared_elements = list(set1.intersection(set2))\n\n    # Sort the shared elements in ascending order\n    shared_elements.sort()\n\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    if n <= 3:\n        return False\n    if n % 2 == 0 or n % 3 == 0:\n        return True\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return True\n        i += 6\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function returns True if the given number is not prime, otherwise False.\n    '''\n\n    if n < 2:\n        return False\n\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    \"\"\"\n    Write a python function to identify non-prime numbers.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n    \n    # Check if the number is 2 or 3\n    if n == 2 or n == 3:\n        return False\n    \n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if the input is not a prime number, False otherwise.\n    '''\n    if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n    elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Convert the list to a heap\n    heap = nums\n    for i in range(n):\n        hq.heappushpop(heap, -heapq.heappop(heap))\n    return [-x for x in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Create a min heap with the first n elements\n    heap = hq.nsmallest(n, nums)\n    \n    # Add the remaining elements to the heap\n    for num in nums[n:]:\n        hq.heappush(heap, num)\n    \n    # Return the heap\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Create a max heap from the input list\n    heap = hq.nlargest(n, nums)\n    # Return the max heap as a list\n    return list(heap)\n"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a max-heap of size n\n    max_heap = [0] * n\n    for i in range(n):\n        heapq.heappushpop(max_heap, nums[i])\n\n    return max_heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        hq.heappush(heap, -num)\n        if len(heap) > n:\n            hq.heappop(heap)\n    return [-num for num in heap]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    result = []\n    while len(result) < n:\n        result.append(hq.heappop(nums))\n    return result[::-1]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the list of numbers using a max heap\n    heap = hq.nlargest(n,nums)\n    # Extract the n largest elements from the heap and return them as a list\n    return list(heap)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    return heap"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    \"\"\"\n    # Build a max heap of size n to store the largest n elements from the input list\n    hq.heapify(nums, n)\n    # Extract the n largest elements from the heap and store them in a list\n    result = [hq.heappop(nums) for _ in range(n)]\n    # Reverse the list to get the largest n elements in descending order\n    return result[::-1]"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    \"\"\"\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    \"\"\"\n    if x < 0:\n        x = abs(x)\n    while x > 0:\n        if x % 2!= 0:\n            return False\n        x //= 2\n    return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 0:\n        x &= (x - 1)\n        count += 1\n    return count == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: #if x is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 0:\n        return True\n    if x == 1:\n        return False\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n = x\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    return x"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    count = 0\n    while x!= 1:\n        x >>= 1\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x and returns True if it is a power of 2, False otherwise.\n    A power of 2 is a number that has no integer factor other than 1 and itself.\n    '''\n    if x == 0 or x == 1:\n        return True\n    elif x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    count = 0\n    while x > 1:\n        if x % 2 == 1:\n            count += 1\n        x = x >> 1\n    \n    return count"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given number to binary\n    binary = bin(x)[2:]\n    # Initialize the count of differing bits\n    count = 0\n    # Iterate through the binary string\n    for i in range(len(binary)):\n        # If the current bit is different from the next bit, increment the count\n        if binary[i]!= binary[i+1]:\n            count += 1\n        # If the count reaches 1, return True, indicating that the number is a power of two\n        if count == 1:\n            return True\n    # If the loop completes without finding a differing bit, return False, indicating that the number is not a power of two\n    return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if the input is a positive integer\n    if x <= 0:\n        return False\n\n    # Find the difference between x and 1\n    diff = x ^ 1\n\n    # If the difference is 0, then the two numbers differ at one bit position only\n    if diff == 0:\n        return True\n\n    # Check for other bit positions by repeatedly shifting the difference bit by bit and checking if it is 0\n    for i in range(31):\n        if diff & (1 << i):\n            return False\n\n    # If all bit positions are 0, then the two numbers differ at one bit position only\n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Remove special characters and convert the string to lowercase\n    text = re.sub('[^a-zA-Z0-9\\s]', '', text).lower()\n    # Split the string into words and filter out words with less than 4 characters\n    words = filter(lambda x: len(x) >= 4, text.split())\n    # Return the list of filtered words\n    return list(words)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w{4,}\\b', text.lower())\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    This function takes a string as input and returns a list of all words which are at least 4 characters long in the string.\n    '''\n    # Split the text into words using regular expressions\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    # Return the list of words\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if len(word) >= 4]"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = re.compile(r'\\b\\w+\\b')  # regular expression pattern to match words\n    words = pattern.findall(text)  # find all matches using the pattern in the text\n    result = []  # create an empty list to store the words that are at least 4 characters long\n    \n    for word in words:  # loop through the words\n        if len(word) >= 4:  # check if the length of the word is at least 4\n            result.append(word)  # append the word to the result list if it's at least 4 characters long\n    \n    return result  # return the list of words that are at least 4 characters long"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    char_long_words = []\n\n    for word in words:\n        if len(word) >= 4:\n            char_long_words.append(word)\n\n    return char_long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to split the text into words\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num ** 2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # Find the length of the string \n    n = len(str) \n\n    # Sort the string in reverse order \n    str = sorted(str, reverse=True) \n\n    # Initialize the result variable \n    result = 0 \n\n    # Traverse the string and compare each character with the next character \n    for i in range(n-1): \n        if str[i]!= str[i+1]: \n            # If the characters are not equal, increment the result \n            result += 1 \n\n    return result "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    min_rot = n\n    for i in range(n): \n        if str[i] == str[(i+n) % n]: \n            min_rot = min(min_rot, i+1)\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str):\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Initialize a variable to store the minimum number of rotations required\n    min_rotations = 0\n\n    # Loop through all the characters in the string\n    for char in str:\n        # If the frequency of the character is greater than 1, then rotate the character and update the frequency\n        if freq[char] > 1:\n            min_rotations += 1\n            freq[char] -= 2\n            if freq[char] == 1:\n                del freq[char]\n\n    # If the last character is rotated, then update the frequency of that character\n    if freq[str[-1]] > 1:\n        min_rotations += 1\n        freq[str[-1]] -= 2\n        if freq[str[-1]] == 1:\n            del freq[str[-1]]\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    # create a dictionary to store the frequency of characters in the string\n    freq = {}\n    for char in str:\n        freq[char] = freq.get(char, 0) + 1\n    \n    # find the maximum frequency among the characters in the string\n    max_freq = max(freq.values())\n    \n    # if all characters have the same frequency, no rotation is needed\n    if max_freq == len(str):\n        return 0\n    \n    # initialize a dictionary to store the count of characters that can be rotated\n    rotate = {}\n    for char in freq:\n        rotate[char] = len(str) - freq[char]\n    \n    # find the minimum count of characters that can be rotated\n    min_rotate = min(rotate.values())\n    \n    # return the minimum number of rotations needed to get the same string\n    return min_rotate"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if str[i:j] == str[j:i][::-1]:\n                return j - i\n    return n"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    freq = {}\n    max_freq = 0\n    \n    # Count frequency of characters\n    for char in str:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n            \n    # Find maximum frequency\n    for char in freq:\n        if freq[char] > max_freq:\n            max_freq = freq[char]\n            \n    # Sort dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: (-x[1], x[0]))\n    \n    # Initialize count variable\n    count = 0\n    \n    # Compare each character with maximum frequency character and increment count\n    for char, freq in sorted_freq:\n        if freq > max_freq:\n            count += 1\n            \n    return count"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Convert the given string to lowercase to make it case-insensitive\n    str = str.lower()\n    # Check if the length of the string is less than 2\n    if len(str) < 2:\n        return 0\n    \n    # Initialize two variables to store the count of rotations\n    count = 0\n    max_rotations = 0\n    \n    # Loop through the string and find the maximum number of rotations\n    for i in range(len(str)):\n        # Find the first occurrence of the character at index i\n        j = i\n        while j < len(str) and str[j] == str[i]:\n            j += 1\n        \n        # If the character at index i is repeated, find the second occurrence\n        while j < len(str) and str[j]!= str[i]:\n            j += 1\n            \n        # If the character at index j is not the same as the first occurrence, increment the count of rotations\n        if j == len(str):\n            count += 1\n            \n        # If the count of rotations is greater than the current maximum, update the maximum\n        if count > max_rotations:\n            max_rotations = count\n            \n    # If the length of the string is 2, the maximum number of rotations is 0\n    if len(str) == 2:\n        max_rotations = 0\n        \n    # Return the minimum number of rotations required to get the same string\n    return max_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(str):\n    str = list(str)\n    n = len(str)\n    visited = []\n    for i in range(n):\n        if str[i] not in visited:\n            visited.append(str[i])\n            for j in range(i+1, n):\n                if str[j] not in visited:\n                    visited.append(str[j])\n                    for k in range(j+1, n):\n                        if str[k] not in visited:\n                            visited.append(str[k])\n                            for l in range(k+1, n):\n                                if str[l] not in visited:\n                                    visited.append(str[l])\n                                    for m in range(l+1, n):\n                                        if str[m] not in visited:\n                                            visited.append(str[m])\n                                            for n in range(m+1, n):\n                                                if str[n] not in visited:\n                                                    visited.append(str[n])\n                                                    for p in range(n+1, n):\n                                                        if str[p] not in visited:\n                                                            visited.append(str[p])\n                                                            for q in range(p+1, n):\n                                                                if str[q] not in visited:\n                                                                    visited.append(str[q])\n                                                                    for r in range(q+1, n):\n                                                                        if str[r] not in visited:\n                                                                            visited.append(str[r])\n                                                                            for s in range(r+1, n):\n                                                                                if str[s] not in visited:\n                                                                                    visited.append(str[s])\n                                                                                    for t in range(s+1, n):\n                                                                                        if str[t] not in visited:\n                                                                                            visited.append(str[t])\n                                                                                            for u in range(t+1, n):\n                                                                                                if str[u] not in visited:\n                                                                                                    visited.append(str[u])\n                                                                                                    for v in range(u+1, n):\n                                                                                                        if str[v] not in visited:\n                                                                                                            visited.append(str[v])\n                                                                                                            for w in range(v+1, n):\n                                                                                                                if str[w] not in visited:\n                                                                                                                    visited.append(str[w])\n                                                                                                                    for x in range(w+1, n):\n                                                                                                                        if str[x] not in visited:\n                                                                                                                            visited.append(str[x])\n                                                                                                                            for y in range(x+1, n):\n                                                                                                                                if str[y] not in visited:\n                                                                                                                                    visited.append(str[y])\n                                                                                                                                    for z in range(y+1, n):\n                                                                                                                                        if str[z] not in visited:\n                                                                                                                                            visited.append(str[z])\n                                                                                                                                            for aa in range(z+1, n):\n                                                                                                                                                if str[aa] not in visited:\n                                                                                                                                                    visited.append(str[aa])\n                                                                                                                                                    for bb in range(aa+1, n):\n                                                                                                                                                        if str[bb] not in visited:\n                                                                                                                                                            visited.append(str[bb])\n                                                                                                                                                            for cc in range(bb+1, n):\n                                                                                                                                                                if str[cc] not in visited:\n                                                                                                                                                                    visited.append(str[cc])\n                                                                                                                                                                    for dd in range(cc+1, n):\n                                                                                                                                                                        if str[dd] not in visited:\n                                                                                                                                                                            visited.append(str[dd])\n                                                                                                                                                                            for ee in range(dd+1, n):\n                                                                                                                                                                                if str[ee] not in visited:\n                                                                                                                                                                                    visited.append(str[ee])\n                                                                                                                                                                                    for ff in range(ee+1, n):\n                                                                                                                                                                                        if str[ff] not in visited:\n                                                                                                                                                                                            visited.append(str[ff])\n                                                                                                                                                                                            for gg in range(ff+1, n):\n                                                                                                                                                                                                if str[gg] not in visited:\n                                                                                                                                                                                                    visited.append(str[gg])\n                                                                                                                                                                                                    for hh in range(gg+1, n):\n                                                                                                                                                                                                        if str[hh] not in visited:\n                                                                                                                                                                                                            visited.append(str[hh])\n                                                                                                                                                                                                            for ii in range(hh+1, n):\n                                                                                                                                                                                                                if str[ii] not in visited:\n                                                                                                                                                                                                                    visited.append(str[ii])\n                                                                                                                                                                                                                    for jj in range(ii+1, n):\n                                                                                                                                                                                                                        if str[jj] not in visited:\n                                                                                                                                                                                                                            visited.append(str[jj])\n                                                                                                                                                                                                                            for kk in range(jj+1, n):\n                                                                                                                                                                                                                                if str[kk] not in visited:\n                                                                                                                                                                                                                                            visited.append(str[kk])\n                                                                                                                                                                                                                                "
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    min_rotations = n\n    \n    # check for rotation with all characters swapped\n    for i in range(n):\n        if i!= str.index(str[i]):\n            new_str = str[i] + str[str.index(str[i])]\n            min_rotations = min(min_rotations, find_Rotations(new_str))\n    \n    return min_rotations + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    str_len = len(str)\n    min_rotations = str_len\n    \n    for i in range(str_len):\n        for j in range(i+1, str_len+1):\n            if str[i:j] == str[str_len-j:str_len-i-1]:\n                min_rotations = min(min_rotations, j-i)\n                \n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes the first and last occurrence of the given character from the string.\n    '''\n    if not s:\n        return ''\n    else:\n        return s.replace(ch, '', 1).replace(ch, '', -1)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if len(s) <= 1:\n        return s\n    \n    if s[0] == ch:\n        return remove_Occ(s[1:], ch)\n    elif s[-1] == ch:\n        return remove_Occ(s[:-1], ch)\n    else:\n        return s[0] + remove_Occ(s[1:], ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    if ch in s:\n        s = s.replace(ch, \"\", 1)  # remove first occurrence\n        s = s.replace(ch, \"\", -1)  # remove last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    # Define the left and right pointers\n    left = 0\n    right = len(s) - 1\n    \n    # Iterate through the string from left to right\n    while left < right:\n        \n        # If the left character is the given character, increment the left pointer\n        if s[left] == ch:\n            left += 1\n        \n        # If the right character is the given character, decrement the right pointer\n        elif s[right] == ch:\n            right -= 1\n        \n        # If the characters are not the same, move both pointers to the next position\n        else:\n            left += 1\n            right -= 1\n            \n    # Return the string without the first and last occurrence of the given character\n    return s[:left] + s[right+1:]"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    if not s or not ch:\n        return s\n    s = list(s)\n    i = j = 0\n    while i < len(s):\n        if s[i] == ch:\n            i += 1\n            if i == len(s):\n                j = i\n        elif s[i]!= ch:\n            j = i\n        i += 1\n    if j == 0:\n        s = s[1:]\n    elif j == len(s) - 1:\n        s = s[:j]\n    else:\n        s = s[:j] + s[j+1:]\n    return ''.join(s)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # remove first occurrence of character from string\n    s = s.replace(ch, '', 1)\n\n    # remove last occurrence of character from string\n    s = s.replace(ch, '', -1)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    if s.find(ch) == 0:\n        s = s[1:]\n    if s.find(ch) == len(s)-1:\n        s = s[:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function takes a string s and a character ch as input and returns the string with the first and last occurrence of ch removed.\n    \"\"\"\n    if s.find(ch)!= -1:\n        s = s[:s.find(ch)] + s[s.rfind(ch)+1:]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #split the string into list of characters\n    s_list = list(s)\n    #remove the first occurrence of the character\n    if s_list[0] == ch:\n        s_list.pop(0)\n    #remove the last occurrence of the character\n    if s_list[-1] == ch:\n        s_list.pop(-1)\n    #convert list of characters back to string\n    s_new = ''.join(s_list)\n    #return the modified string\n    return s_new"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    This function removes the first and last occurrence of a given character from the string.\n    \"\"\"\n    return s.replace(ch, '', 1)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-i-1):\n            if M[j][i] > M[j+1][i]:\n                M[j], M[j+1] = M[j+1], M[j]"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(i+1, n):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    # Create a temporary list to store the sorted matrix\n    temp = []\n    # Iterate through each row of the matrix\n    for i in range(n):\n        # Initialize the minimum value to be the element at the current row index\n        min_val = M[i][i]\n        # Iterate through the remaining columns of the matrix\n        for j in range(i+1, n):\n            # If the sum of the current row and the current column value is less than the minimum, update the minimum value\n            if M[i][j] + M[j][i] < min_val:\n                min_val = M[i][j] + M[j][i]\n        # Add the minimum value to the temporary list\n        temp.append(min_val)\n    # Iterate through each row of the sorted matrix and add the minimum value to its corresponding position\n    for i in range(n):\n        for j in range(n):\n            if j > i:\n                M[i][j] += temp[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Loop through each row of the matrix\n    for row in M:\n        # Calculate the sum of the row\n        row_sum = sum(row)\n        \n        # Append the row to the sorted matrix if it is not already there\n        if row_sum not in sorted_matrix:\n            sorted_matrix.append(row)\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    for i in range(len(M)):\n        for j in range(len(M[i])):\n            for k in range(j+1, len(M[i])):\n                if M[i][j]+M[i][k] < M[i][j]:\n                    M[i][j], M[i][k] = M[i][k], M[i][j]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    M_sorted = []\n    \n    # Sort each row of the matrix\n    for i in range(n):\n        M[i] = sorted(M[i])\n    \n    # Find the row with the minimum sum\n    min_sum = float('inf')\n    min_row = []\n    for i in range(n):\n        row_sum = sum(M[i])\n        if row_sum < min_sum:\n            min_sum = row_sum\n            min_row = M[i]\n    \n    # Append the minimum row to the sorted matrix\n    M_sorted.append(min_row)\n    \n    # Recursively sort the rest of the matrix\n    for i in range(n):\n        if i not in min_row:\n            M_sorted += sort_matrix(M[:i] + M[i+1:])\n    \n    return M_sorted"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        # find the sum of the current row and its index\n        row_sum = sum(M[i])\n        row_index = i\n        \n        # compare the sum with the sum of all previous rows\n        for j in range(n):\n            if M[j][i] < row_sum:\n                # update the row sum and its index\n                row_sum = M[j][i]\n                row_index = j\n        \n        # if the row sum is greater than the sum of all previous rows, swap the rows\n        if row_sum > M[row_index][i]:\n            M[row_index], M[i] = M[i], M[row_index]\n    \n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Check if the matrix is square\n    if len(M)!= len(M[0]):\n        print(\"The matrix is not square!\")\n        return\n    \n    # Initialize the empty list to store the sorted matrix\n    sorted_matrix = []\n    \n    # Traverse through each row of the matrix\n    for i in range(len(M)):\n        \n        # Initialize the sum of the row to 0\n        row_sum = 0\n        \n        # Traverse through each element of the row\n        for j in range(len(M[0])):\n            \n            # Add the value of the element to the sum\n            row_sum += M[i][j]\n        \n        # Append the row to the sorted matrix if its sum is greater than 0\n        if row_sum > 0:\n            sorted_matrix.append(M[i])\n    \n    # Return the sorted matrix\n    return sorted_matrix"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Sort each row in ascending order\n    for i in range(n):\n        M[i] = sorted(M[i])\n    # Merge the sorted rows into one sorted matrix\n    for i in range(n):\n        M[i] = [M[i][0]] + [M[i][j] for j in range(1, n)] + [M[i][-1]]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Convert the matrix to a list of lists\n    M = [[row[i] for row in M] for i in range(len(M[0]))]\n\n    # Sort the list of lists using the sum() function\n    M = sorted(M, key=sum)\n\n    # Convert the sorted list of lists back to a matrix\n    for i in range(len(M)):\n        for j in range(len(M[0])):\n            M[i][j] = M[i][j][0]\n\n    return M"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 0.5 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h): \n    '''\n    This function takes the dimensions of a triangular prism as input and returns the volume of the prism.\n    '''\n    V = (1/3)*l*b*h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = l * b * h / 6\n    print(\"The volume of the triangular prism is: \", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes three arguments - l, b, and h - and returns the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l, b, h):\n    '''\n    This function takes in the dimensions of a triangular prism and returns its volume.\n    '''\n    # Formula to find the volume of a triangular prism\n    V = 1/2 * l * b * h\n    # Return the volume\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # calculate volume\n    V = 1/3 * l * b * h\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h) / 3\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search(r'[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Regular expression pattern to match lowercase letters followed by underscore\n    pattern = r'[a-z](?=_)'\n    # Check if the input string matches the pattern\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    # define the regular expression pattern for matching sequences of lowercase letters followed by an underscore\n    pattern = r'(?<![a-zA-Z])([a-z]+)(_+)(?![a-zA-Z])'\n\n    # find all matches of the pattern in the input text\n    matches = re.findall(pattern, text)\n\n    # check if any matches were found\n    if matches:\n        # return True if there are matches\n        return True\n    else:\n        # otherwise, return False\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match sequences of lowercase letters joined with an underscore\n    pattern = r'[a-z]+_[a-z]+'\n    \n    # Use the re.findall() function to find all non-overlapping matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n    \n    # If the matches list is not empty, return True, otherwise return False\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<!_)[a-z](?=[a-z])'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"(?<!_)([a-z]+)_\"\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'([a-z][a-z0-9]*)_+'\n    result = re.findall(pattern, text)\n    return bool(result)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'(?<![a-z])[a-z]+(?![a-z])_'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    regex = r'[a-z]+_[a-z]+'\n    return bool(re.search(regex, text))"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a  # multiply side length by 4 to get perimeter\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter\n\nprint(square_perimeter(5)) # Output: 20\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a new list containing the characters that are not present in the second string.\n    '''\n    list_of_chars = list(string)\n    for char in list_of_chars:\n        if char in string:\n            list_of_chars.remove(char)\n    return list_of_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    # Create a list of characters to remove\n    chars_to_remove = set(string)\n    # Create an empty list to store the modified string\n    modified_string = []\n    # Iterate over each character in the input string\n    for char in string:\n        # If the character is not present in the set of characters to remove, append it to the modified string\n        if char not in chars_to_remove:\n            modified_string.append(char)\n    # Join the modified string into a single string and return it\n    return ''.join(modified_string)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string1, string2):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    result = []\n    for char in string1:\n        if char not in string2:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Remove characters from the list which are present in the second string\n    for i in range(len(char_list)):\n        if char_list[i] in string:\n            char_list.pop(i)\n            i -= 1\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Remove characters from the first string which are present in the second string.\n    '''\n    result = []\n    for char in string:\n        if char not in remove_chars:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_set = set(string)\n    str1 = ''\n    for i in range(NO_OF_CHARS):\n        if i not in char_set:\n            str1 += chr(i)\n    return str1"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string):\n    '''\n    This function takes a string as input and returns a list containing all the unique characters present in the string.\n    '''\n    list_of_chars = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            list_of_chars.append(chr(i))\n    return list_of_chars"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string): \n    '''\n    This function takes a string as input and returns a list of characters that are not present in the second string.\n    '''\n    NO_OF_CHARS = 256\n    char_set = set(''.join([chr(i) for i in range(NO_OF_CHARS)]))\n    string_set = set(string)\n    result_list = [char for char in string if char not in char_set]\n    return result_list\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    for char in string:\n        if char in string:\n            string = string.replace(char, \"\")\n        else:\n            continue\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    for char in string:\n        char_list.remove(char)\n    return ''.join(char_list)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    if len(arraynums) <= 1:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) == len(set(arraynums)):\n        print(\"The given array does not contain any duplicate elements.\")\n    else:\n        print(\"The given array contains duplicate elements.\")"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a dictionary to store the values of the array and their frequency\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            # increment the frequency of the number in the dictionary\n            freq_dict[num] += 1\n        else:\n            # add the number to the dictionary with a frequency of 1\n            freq_dict[num] = 1\n    # iterate through the dictionary to check for any duplicates\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            # if a number has a frequency greater than 1, return True\n            return True\n    # if no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) < 2:\n        return False\n\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    frequency_dict = {}\n    # Loop through the array and count the frequency of each element\n    for num in arraynums:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    # Loop through the dictionary and check for any elements with a frequency greater than 1\n    for key, value in frequency_dict.items():\n        if value > 1:\n            return True\n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create an empty dictionary to store the elements of the array as keys\n    duplicate_dict = {}\n\n    # Loop through the array and add each element as a key to the dictionary\n    for num in arraynums:\n        if num in duplicate_dict:\n            return True\n        else:\n            duplicate_dict[num] = True\n\n    # If we make it through the loop without finding any duplicates, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to store unique elements\n    unique_nums = set()\n    # loop through the array of integers\n    for num in arraynums:\n        # if the element is not already in the set, add it\n        if num not in unique_nums:\n            unique_nums.add(num)\n        # if the element is already in the set, return True\n        else:\n            return True\n    # if no duplicates were found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # create a set to store unique numbers\n    unique_nums = set()\n    # loop through the array and add each unique number to the set\n    for num in arraynums:\n        unique_nums.add(num)\n    # check if the set has any elements\n    if len(unique_nums)!= len(arraynums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Initialize a dictionary to store unique elements\n    unique_elements = {}\n    # Loop through the array and add each element to the dictionary\n    for num in arraynums:\n        if num not in unique_elements:\n            unique_elements[num] = True\n        else:\n            return True\n    # If we reach this point, the array is not a duplicate\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    return x in [12, 15, 18, 21, 24, 27, 30, 33, 36]"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        if x % 11 == 0:\n            return True\n        else:\n            return False\n    else:\n        if x % 13 == 0:\n            return True\n        else:\n            return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0 and x % 5 == 0:\n        print(\"Woodball\")\n    else:\n        print(\"Not Woodball\")"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1 or x == 2 or x == 3:\n        return True\n    elif x == 4 or x == 5 or x == 6:\n        return True\n    elif x == 7 or x == 8 or x == 9:\n        return True\n    elif x == 10:\n        return True\n    elif x % 2 == 0:\n        return False\n    elif x % 3 == 0:\n        return True\n    elif x % 5 == 0:\n        return True\n    elif x % 7 == 0:\n        return True\n    elif x % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x < 5:\n        return False\n    elif x == 5:\n        return True\n    elif x > 5:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 13 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # create a list of possible values for the number of wooden bars\n    num_wooden_bars = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # loop through each number in the list of possible values\n    for num in num_wooden_bars:\n        # calculate the number of times the number can be divided by the wooden bar\n        times = num // x\n        # if the number can be divided by the wooden bar, it must be a woodball\n        if times > 0:\n            return True\n    # if no number in the list of possible values can be divided by the wooden bar, it must not be a woodball\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 1 or x == 2 or x == 5 or x == 10 or x == 20:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Initialize variables\n    half_num = int(len(num_str) / 2)\n    reverse = num_str[::-1]\n    # Calculate the reverse of the first half of the number\n    first_half = int(reverse[:half_num])\n    # Check if the first half of the number is one less than twice the reverse of the first half\n    if num_str[:half_num] + str(first_half - 1) == reverse[:half_num] * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reversed_num = str(num)[::-1] # Reverse the number\n    reversed_num_int = int(reversed_num) # Convert the reversed number to integer\n    twice_reversed_num = int(reversed_num_int / 2) # Calculate twice the reversed number\n    if num == twice_reversed_num + 1: # Check if the number is one less than twice its reverse\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse_num = 0\n    while num > 0:\n        reverse_num = reverse_num * 10 + num % 10\n        num //= 10\n    if reverse_num == 2 * num:\n        print(num, \"is one less than twice its reverse.\")\n    else:\n        print(num, \"is not one less than twice its reverse.\")"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    if num*2 == reverse:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    temp = num\n    while temp!= 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    return num == reverse - 2"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    # Find the reverse of the number\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    # Check if the reverse is one less than twice the original number\n    return reverse - num - 1"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num == rev_int + 1:\n        print(f'{num} is one less than twice its reverse.')\n    else:\n        print(f'{num} is not one less than twice its reverse.')"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Convert the number to string\n    num_str = str(num)\n\n    # Convert the reverse of the number to string\n    rev_str = str(int(num_str[::-1]))\n\n    # Compare the original and reverse numbers\n    if int(num_str) - int(rev_str) < 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n\n    # Get the reverse of the number\n    num_reverse = 0\n    temp = num\n    while temp > 0:\n        num_reverse = num_reverse * 10 + temp % 10\n        temp //= 10\n\n    # Check if the given number is one less than twice its reverse\n    if num - 1 == num_reverse * 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    str_num = str(num)\n    # Reverse the string\n    rev_str = str_num[::-1]\n    # Convert the reversed string back to an integer\n    rev_num = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num - 2*rev_num == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    \n    # Sort the list in descending order\n    arr.sort(reverse=True)\n\n    # Initialize the maximum number to zero\n    max_num = 0\n\n    # Iterate through the sorted list\n    for i in range(len(arr)) : \n\n        # Calculate the power of 10 to the current digit and multiply by the current digit\n        power = 10**(i+1)\n        max_num += arr[i]*power\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n\n    # Convert the given list of digits into a string\n    digits = str(arr)\n\n    # Initialize the maximum number to be formed with the digits\n    max_num = 0\n\n    # Loop through each digit in the string and add the value to the maximum number\n    for digit in digits : \n        max_num += int(digit)\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    '''\n    This function takes a list of digits as input and returns the maximum number that can be formed using the digits in the list.\n    '''\n\n    # Finding the maximum number using recursion\n    def find_Max(arr, start):\n        if start == len(arr):\n            return 0\n        elif len(arr) == 1:\n            return arr[start]\n        else:\n            max1 = find_Max(arr, start+1)\n            max2 = find_Max(arr, start+2)\n            max3 = find_Max(arr, start+3)\n            max4 = find_Max(arr, start+4)\n            max5 = find_Max(arr, start+5)\n            max6 = find_Max(arr, start+6)\n            max7 = find_Max(arr, start+7)\n            max8 = find_Max(arr, start+8)\n            max9 = find_Max(arr, start+9)\n            return max(max1, max2, max3, max4, max5, max6, max7, max8, max9)\n\n    # Returning the result\n    return find_Max(arr, 0)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # Create a set of all digits from 0 to 9\n    digits = set(range(10))\n\n    # Create an empty set to store the possible combinations of digits\n    combinations = set()\n\n    # For each digit in the array, create all possible combinations with the remaining digits\n    for digit in arr:\n        temp = set()\n        for i in digits - set([digit]):\n            temp.add(digit * 10 + i)\n        digits = temp\n\n    # Convert the set of combinations to a sorted list of numbers\n    sorted_combinations = sorted(list(combinations))\n\n    # Find the largest number in the list and return it\n    return sorted_combinations[-1]"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    # Initialize a variable to store the largest number formed with digits in the list\n    max_num = 0\n    \n    # Loop through each digit in the list and check if it can be formed with the remaining digits\n    for digit in arr:\n        # Check if the digit can be formed with the remaining digits by subtracting the digit from the sum of remaining digits\n        if max_num - digit >= 0:\n            max_num = max_num - digit\n    \n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr, n=0, max_num=0):\n    '''\n    A recursive function that finds the largest number that can be formed with the given list of digits.\n    '''\n    if n == len(arr):\n        return max_num\n    else:\n        max_num = max(max_num, arr[n] * 10 ** (len(arr) - n - 1) + find_Max_Num(arr, n + 1, max_num))\n        return find_Max_Num(arr, n + 1, max_num)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    def find_max_num(arr, start, end):\n        \"\"\"\n        Helper function to find the maximum number formed from the given subarray.\n        \"\"\"\n        if start == end:\n            return int(arr[start])\n        else:\n            mid = (start + end) // 2\n            left_max = find_max_num(arr, start, mid)\n            right_max = find_max_num(arr, mid + 1, end)\n            return max(left_max, right_max, int(arr[start]) * (mid - start + 1))\n    \n    return find_max_num(arr, 0, len(arr) - 1)"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    arr.sort(reverse=True)\n    max_num = 0\n    for i in range(len(arr)):\n        num = 1\n        for j in range(i+1):\n            num *= arr[j]\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n\n    # sorting the list in ascending order\n    arr.sort()\n\n    # initializing the maximum number\n    max_num = 0\n\n    # checking if the maximum number can be formed by the given list\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] > max_num:\n                max_num = arr[i] + arr[j]\n\n    # printing the maximum number\n    print(\"Maximum number that can be formed with the given list of digits is:\", max_num)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if the two integers have opposite sign, and False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0:\n        return \"Both numbers are positive\"\n    elif x < 0 and y < 0:\n        return \"Both numbers are negative\"\n    elif x < 0 and y > 0:\n        return \"First number is negative and second number is positive\"\n    elif x > 0 and y < 0:\n        return \"First number is positive and second number is negative\"\n    else:\n        return \"Both numbers have the same sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    if x >= 0 and y < 0:\n        return True\n    elif x < 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x, y):\n    '''\n    This function takes two integers as input and returns True if they have opposite signs, False otherwise.\n    '''\n    if (x < 0 and y > 0) or (x > 0 and y < 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x > 0 and y < 0) or (x < 0 and y > 0)"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y > 0 or x < 0 and y < 0: \n        print(\"Both numbers have opposite signs.\")\n    else: \n        print(\"Both numbers have the same signs.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n    # check if the signs of x and y are opposite\n    if ((x > 0 and y < 0) or (x < 0 and y > 0)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return \"The two integers have opposite signs.\"\n    else:\n        return \"The two integers have the same sign.\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # checking if the signs are opposite or not\n    if x*y < 0: \n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return (8 * n * n - 1) // 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    max_num = 10**n - 1\n    for i in range(1, max_num + 1):\n        if i * i == 8 * i + 1:\n            return i\n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Initialize a variable to keep track of the count of octagonal numbers\n    oct_count = 0\n    \n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if the number is a octagonal number\n        if i**2 + i == n**2:\n            # If it is, increment the count of octagonal numbers\n            oct_count += 1\n            \n    # If there are no octagonal numbers, return None\n    if oct_count == 0:\n        return None\n    \n    # Return the nth octagonal number\n    else:\n        return n**2 - (oct_count - 1)**2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct_n = 1\n    for i in range(1, n+1):\n        oct_n = oct_n * 8\n    return oct_n"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 8\n    else:\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                return \"Invalid input. Please enter an odd number.\"\n            i += 1\n        return n - i*i + 1\n\nn = int(input(\"Enter the value of n: \"))\nresult = is_octagonal(n)\nprint(\"The nth octagonal number is:\", result)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (3 * n - 1)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is an integer\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer.\")\n    # Check if n is positive\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize variables for base and counter\n    base = 1\n    counter = 0\n\n    # Check if n is odd\n    if n % 2!= 0:\n        # Set base to 2 to get odd numbers\n        base = 2\n        # Count odd numbers up to n\n        for i in range(3, n+1, 2):\n            counter += 1\n    else:\n        # Set base to 1 to get even numbers\n        base = 1\n        # Count even numbers up to n\n        for i in range(2, n+1, 2):\n            counter += 1\n\n    # Return the counter\n    return counter"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    i = 1\n    octagonal_num = 0\n\n    while i <= n:\n        octagonal_num += i * i\n        i += 1\n\n    return octagonal_num"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i**2 + i**3 == n:\n            return True\n    return False\n\nn = 10\nprint(\"The\", n, \"th octagonal number is:\", is_octagonal(n))"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n\n    # Check if n is an integer\n    if not isinstance(n, int): \n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if n is within the range of valid values\n    if n < 1 or n > 100:\n        raise ValueError(\"Input must be within the range of valid values.\")\n\n    # Calculate the base value and the exponent\n    base = 1\n    exponent = 1\n\n    # Iterate n times\n    for i in range(n):\n\n        # Calculate the nth octagonal number\n        octagonal = base ** exponent\n\n        # Print the nth octagonal number\n        print(octagonal)\n\n        # Update the base value and exponent\n        base += 1\n        exponent += 2\n"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_counts = defaultdict(int)\n    for char in s:\n        digit_counts[int(char)] += 1\n    \n    substrings = 0\n    for substring in digit_counts.keys():\n        if sum(substring) == len(substring):\n            substrings += digit_counts[substring]\n    \n    return substrings"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Initialize a dictionary to store the count of substrings with the sum of digits as their length\n    count = defaultdict(int)\n    # Iterate over all possible substrings of length n\n    for n in range(1, len(s)+1):\n        # Initialize variables to keep track of the current substring and the sum of digits in the substring\n        substring = ''\n        sum_of_digits = 0\n        # Iterate over all possible substrings of length n\n        for i in range(len(s)-n+1):\n            # Append the current character to the substring\n            substring += s[i]\n            # Compute the sum of digits in the substring\n            for digit in substring:\n                sum_of_digits += int(digit)\n            # Update the count of substrings with the current substring and sum of digits as their length\n            count[n] += count[n-1]\n    # Return the count of substrings with the sum of digits as their length\n    return count[len(s)]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    count = 0\n    digits = defaultdict(int)\n    for i in range(n):\n        digits[s[i]] += 1\n\n    for length in range(n, 0, -1):\n        for start in range(n - length + 1):\n            count += digits[s[start + length - 1]] - digits[s[start - 1]]\n\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            if sum_of_digits == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # create a dictionary to store the count of substrings with sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # loop through each substring of the input string\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # check if the substring has sum of digits equal to its length\n            digits_sum = sum(int(digit) for digit in s[i:j])\n            if digits_sum == j-i:\n                count_dict[digits_sum] += 1\n\n    # return the count of substrings with sum of digits equal to their length\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Substrings(s):\n    n = len(s)\n    dp = [[0] * (n+1) for i in range(n+1)]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            if s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1\n            count += dp[i][j]\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            sub_str = s[i:j+1]\n            digit_sum = sum(int(d) for d in sub_str if d.isdigit())\n            if digit_sum == len(sub_str):\n                count[sub_str] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n = len(s)\n    dp = defaultdict(int)\n    for i in range(n):\n        dp[i] = dp[i-1] + 1\n        for j in range(i+1, n+1):\n            if sum(map(int, s[i:j])) == j-i:\n                dp[j] += dp[i]\n    return dp[n]"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # initializing an empty dictionary to store the count of substrings\n    count = defaultdict(int)\n    # iterating through each character in the given string\n    for i in range(len(s)):\n        # checking all possible substrings of length i\n        for j in range(i, len(s)):\n            # checking if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in s[i:j+1]) == i:\n                # incrementing the count of the substring in the dictionary\n                count[s[i:j+1]] += 1\n    # returning the count of substrings with the sum of digits equal to their length\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    n = len(s)\n    dp = defaultdict(int)\n    dp[0] = 1\n\n    for i in range(n):\n        for j in range(i, n):\n            sub_sum = sum(int(digit) for digit in s[i:j+1])\n            count += dp[j-i] * dp[sub_sum - len(s)]\n            dp[j+1] = dp[j]\n\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError(\"List is empty\")\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Initialize the smallest number to be the first element of the list\n    smallest = xs[0]\n    \n    # Loop through the list and compare each element to the current smallest\n    for i in range(1, len(xs)):\n        if xs[i] < smallest:\n            smallest = xs[i]\n    \n    # Return the smallest number found\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # initialize smallest number to the first element in the list\n    smallest = xs[0]\n    # iterate over the rest of the elements in the list\n    for x in xs[1:]:\n        # if current element is smaller than smallest number, update smallest number\n        if x < smallest:\n            smallest = x\n    # return the smallest number\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    xs.sort()\n    # Return the first element of the sorted list\n    return xs[0]"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize the maximum difference as 0\n    max_diff = 0\n    \n    # Iterate through the tuple list\n    for i in range(len(test_list) - 1):\n        # Get the current pair\n        curr_pair = test_list[i]\n        \n        # Iterate through the remaining tuple list\n        for j in range(i+1, len(test_list)):\n            # Get the next pair\n            next_pair = test_list[j]\n            \n            # Calculate the difference between the pairs\n            diff = abs(curr_pair[1] - next_pair[0])\n            \n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n                \n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Sort the list in ascending order\n    test_list.sort()\n\n    # Initialize variables to store the minimum and maximum difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Loop through the list of tuples\n    for i in range(len(test_list) - 1):\n        # Calculate the difference between the current pair and the next pair\n        diff = abs(test_list[i + 1][0] - test_list[i][0])\n\n        # Update the minimum and maximum difference if the current difference is smaller or greater\n        if diff < min_diff:\n            min_diff = diff\n        elif diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    \n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if j == i+1:\n                continue\n            diff = test_list[j][0] - test_list[i][1]\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns the maximum difference between available pairs in the list.\n    \n    Example:\n    max_difference([(1, 5), (2, 6), (3, 7), (4, 8)]) = 3\n    \n    \"\"\"\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][0], test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    if len(test_list) < 2:\n        return None\n    \n    max_diff = 0\n    current_diff = 0\n    \n    for i in range(len(test_list) - 1):\n        current_diff = abs(test_list[i][0] - test_list[i+1][0])\n        if current_diff > max_diff:\n            max_diff = current_diff\n    \n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n\n    # Sort the given list in ascending order\n    test_list.sort()\n\n    # Initialize the maximum difference and variables to store the current maximum and minimum values\n    max_diff = float('-inf')\n    curr_min = test_list[0]\n    curr_max = test_list[0]\n\n    # Iterate through the sorted list\n    for i in range(1, len(test_list)):\n        # If the current value is less than the minimum, update the minimum value\n        if test_list[i] < curr_min:\n            curr_min = test_list[i]\n\n        # If the current value is greater than the maximum, update the maximum value and calculate the difference\n        elif test_list[i] > curr_max:\n            curr_max = test_list[i]\n            max_diff = max(max_diff, curr_max - curr_min)\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple as the sorting criteria\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Convert the list of tuples to a list of tuples of lists\n    marks_list = list(map(list, subjectmarks))\n\n    # Sort the list of lists using the second value of each tuple\n    sorted_list = sorted(marks_list, key=lambda x: x[1])\n\n    # Convert the sorted list of lists back to a list of tuples\n    sorted_marks = list(map(tuple, sorted_list))\n\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples using the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    \n    # Return the sorted list of tuples\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples using the second value of each tuple as the sorting key\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    This function takes a list of tuples representing student marks for a subject, sorts the list based on the second value of each tuple and returns the sorted list.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Create a copy of the list to avoid modifying the original list\n    marks = subjectmarks.copy()\n    # Sort the list of tuples based on the second value of each tuple\n    marks.sort(key=lambda x: x[1])\n    return marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Sort the list of tuples by the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(data_list):\n        '''\n        Helper function to flatten a list.\n        '''\n        if isinstance(data_list, list):\n            for item in data_list:\n                flatten(item)\n        else:\n            result.append(data_list)\n\n    result = []\n    flatten(data_list)\n    return sum(result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(lst):\n        if type(lst) == list:\n            for item in lst:\n                flatten_list(item)\n        else:\n            result.append(lst)\n    \n    result = []\n    flatten_list(data_list)\n    return sum(result)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        '''\n        Flatten a nested list.\n        '''\n        flat_list = []\n        for item in lst:\n            if isinstance(item, list):\n                flat_list.extend(flatten(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n\n    flat_list = flatten(data_list)\n    return sum(flat_list)"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    # Base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    \n    # Recursive case: add the first element of the list to the sum of the rest of the list\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If the list is empty, return 0\n    if len(data_list) == 0:\n        return 0\n    \n    # Recursive case: Add the first element to the result of flattening the rest of the list\n    return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: if the list is empty, return 0\n    if not data_list:\n        return 0\n    # recursive case: sum the first element and the result of the remaining elements\n    return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        if isinstance(data_list, list):\n            flattened_list = []\n            for item in data_list:\n                flattened_list.extend(flatten_list(item))\n            return flattened_list\n        else:\n            return [data_list]\n\n    flattened_list = flatten_list(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    pos_num = 0\n    for num in lst:\n        if num > 0:\n            pos_num += 1\n    return pos_num"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(list):\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(lst):\n    '''\n    This function counts the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_set = [1, 1, 2, 4, 7, 11, 16, 22, 29, 36, 44, 52, 60, 69, 78, 88, 99]\n    count = 0\n    for i in range(1, n+1):\n        for j in range(len(bell_set)):\n            if bell_set[j] >= i:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        result = 0\n        for i in range(2, n + 1):\n            result += bell_number(i - 1)\n        return result"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def partition(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return partition(n-1) + partition(n-2) + partition(n-3) + partition(n-4)\n    \n    return partition(n)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    \n    # initialize a dictionary to store the number of ways to partition a set of Bell numbers\n    ways_to_partition = {}\n    \n    # initialize the number of ways to partition a set of Bell numbers to 1\n    ways_to_partition[0] = 1\n    \n    # loop through all the numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        \n        # initialize the number of ways to partition a set of Bell numbers to 0 for each number\n        ways_to_partition[i] = 0\n        \n        # loop through all the numbers from 1 to i (inclusive)\n        for j in range(1, i+1):\n            \n            # if the sum of the two numbers is equal to the third number, increment the number of ways to partition the set\n            if j + i == n:\n                ways_to_partition[i] += ways_to_partition[j]\n    \n    # return the value of the number of ways to partition a set of Bell numbers\n    return ways_to_partition[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of elements in the set to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a dictionary to store the number of ways to partition the Bell numbers\n    bell_count = {0: 1, 1: 1}\n    \n    # Loop through all the numbers from 2 to n\n    for i in range(2, n+1):\n        # Initialize a variable to store the number of ways to partition the current Bell number\n        ways = 0\n        # Loop through all the numbers from 1 to i-1\n        for j in range(1, i+1):\n            # If the current Bell number is divisible by j, add 1 to the number of ways to partition it\n            if i % j == 0:\n                ways += 1\n        # Add the number of ways to partition the current Bell number to the total count\n        bell_count[i] = ways\n    \n    # Return the total number of ways to partition the Bell numbers\n    return bell_count[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # initialize variables\n    p = 0\n    q = 1\n    r = 1\n\n    # loop through each element in the set of Bell numbers\n    for i in range(n):\n        # calculate the next element in the sequence\n        p, q = q, p + q\n        r = p + r\n\n    # return the final value of r\n    return r"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n\n    if n == 0:\n        return 0\n\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = 1\n\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n\n    return dp[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize a list to store the number of ways to partition a set of Bell numbers\n    ways = [0] * (n+1)\n    ways[0] = 1\n    ways[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, min(i, n-i)+1):\n            ways[i] += ways[i-j] * ways[i-j-1]\n    return ways[n]"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The number of ways to partition a set of Bell numbers with n =\", n, \"is:\", bell_number(n))"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1:\n        return True\n    else:\n        if A[0] >= A[1]:\n            for i in range(1, len(A)-1):\n                if A[i] <= A[i+1]:\n                    return False\n            return True\n        else:\n            for i in range(1, len(A)-1):\n                if A[i] >= A[i+1]:\n                    return False\n            return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the array is empty or contains only one element\n    if len(A) == 1 or len(A) == 0:\n        return True\n    \n    # Check if the array is monotonic in increasing order\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    \n    # Check if the array is monotonic in decreasing order\n    for i in range(len(A)-1):\n        if A[i] < A[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    n = len(A)\n    if n < 2:\n        return True\n    if A[0] <= A[1]:\n        for i in range(1, n):\n            if A[i] < A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, n):\n            if A[i] > A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # Check if the array has only one element\n    if len(A) == 1:\n        return True\n    \n    # Initialize the monotonic flag and the first element\n    monotonic = True\n    first = A[0]\n    \n    # Iterate through the rest of the array\n    for i in range(1, len(A)):\n        # Check if the element is greater than the previous element\n        if A[i] > first:\n            # If the element is greater than the previous element,\n            # make sure the flag is still True\n            if not monotonic:\n                return False\n            \n            # If the element is greater than the previous element,\n            # make sure the flag is True for the next element\n            monotonic = True\n        else:\n            # If the element is less than or equal to the previous element,\n            # make sure the flag is False\n            if monotonic:\n                return False\n            \n            # If the element is less than the previous element,\n            # make sure the flag is False for the next element\n            monotonic = False\n        \n        # Update the first element to the current element\n        first = A[i]\n    \n    # If the array is completely monotonic, the flag should be True\n    return monotonic"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    elif A[0] == A[-1]: \n        return is_Monotonic(A[1:-1])\n    elif A[0] > A[-1]: \n        return is_Monotonic(A[1:])\n    else: \n        return is_Monotonic(A[:-1])"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    if len(A) < 2: \n        return True\n\n    if A[0] < A[1]: \n        return is_Monotonic(A[1:]) \n    elif A[0] > A[1]: \n        return is_Monotonic(A[1:]) \n    else: \n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) < 2:\n        return True\n    \n    if A[0] < A[1]:\n        if all(A[i] >= A[i-1] for i in range(1, len(A))):\n            return True\n    elif A[0] > A[1]:\n        if all(A[i] <= A[i-1] for i in range(1, len(A))):\n            return True\n    else:\n        return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n        elif A[i] < A[i+1]:\n            return True\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] >= A[i+1]:\n                return False\n        return True\n    \n    if A[0] >= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] <= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] >= A[i-1]:\n                return False\n        return True\n    else:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return True\n    if not s:\n        return False\n    if s[0] == l[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sublist in l:\n        if sublist in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    else:\n        return is_sublist(l, s[1:])"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    This function takes in two lists, l and s, and returns True if s is a sublist of l, and False otherwise.\n    '''\n    if not isinstance(l, list) or not isinstance(s, list):\n        return False\n    \n    if len(s) > len(l):\n        return False\n    \n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    \n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in s:\n        if item not in l:\n            return False\n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if not s:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    This function takes a list of tuples and returns True if all the tuples in the list have the same length, False otherwise.\n    \"\"\"\n    if len(set(len(t) for t in Input)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(set(map(len, Input))) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n\n    # initialize a variable to store whether all tuples have equal length or not\n    equal_length = True\n\n    # iterate through each tuple in the input list\n    for i in range(len(Input)):\n        # get the length of the current tuple\n        length = len(Input[i])\n\n        # check if all tuples have equal length\n        if not equal_length:\n            break\n        for j in range(len(Input)):\n            if i!= j:\n                if length!= len(Input[j]):\n                    equal_length = False\n                    break\n\n    # return the value of the variable equal_length\n    return equal_length"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    n = len(Input)\n    for i in range(n):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuples_length = len(Input)\n    if all(len(t) == tuples_length for t in Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check if all tuples have the same number of elements\n    if len(set([len(x) for x in Input])) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb sort algorithm.\n    The algorithm works by repeatedly swapping adjacent elements if they are in the wrong order,\n    until the array is sorted. The time complexity of the algorithm is O(n^2) in the worst case,\n    but it is typically much faster in practice.\n    '''\n\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        gap = (gap * 10) // 13  # Calculate the gap for the next iteration.\n        j = 0\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]  # Swap adjacent elements.\n                j = i  # Update the last element swapped.\n\n        if j == 0:\n            # If no elements were swapped, the array is already sorted.\n            break\n\n        gap = j  # Set the new gap based on the last element swapped.\n\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = n // gap"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n\n    # Find the length of the list\n    n = len(nums)\n\n    # Initialize the minimum gap\n    gap = n // 2\n\n    # Initialize the swapped flag\n    swapped = True\n\n    # While swapped is True, continue the sorting process\n    while swapped:\n        swapped = False\n\n        # For each gap length, iterate through the list\n        for i in range(gap):\n            # If the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # Decrease the gap size by half\n        gap = int(gap / 1.3)\n\n        # If the gap size becomes too small, break out of the loop\n        if gap == 1:\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n\n    The Comb Sort algorithm is a variation of the Bubble Sort algorithm that is more efficient\n    on partially sorted arrays. It works by repeatedly stepping through the list in reverse\n    order, and in each step, swapping adjacent elements if they are in the wrong order. The\n    algorithm keeps repeating this until no more swaps are needed. This makes it an efficient\n    algorithm for partially sorted arrays.\n    '''\n\n    # Check if the list is empty\n    if not nums:\n        return nums\n\n    # Set the minimum gap to 1\n    min_gap = 1\n\n    # Set the maximum gap to the length of the list minus 1\n    max_gap = len(nums) - 1\n\n    # Set the gap to the minimum gap\n    gap = min_gap\n\n    # Set the swapped flag to True\n    swapped = True\n\n    # Loop while swapped is True\n    while swapped:\n\n        # Set the swapped flag to False\n        swapped = False\n\n        # Loop through the list in reverse order\n        for i in range(max_gap, -1, -1):\n\n            # If the element at index i is greater than the element at index i + gap\n            if nums[i] > nums[i + gap]:\n\n                # Swap the elements\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n\n                # Set the swapped flag to True\n                swapped = True\n\n        # If no swaps were made in the inner loop, set the minimum gap to the current gap\n        if not swapped:\n            min_gap = gap\n\n        # If no more swaps were made in the outer loop, set the maximum gap to the minimum gap minus 1\n        if not swapped:\n            max_gap = min_gap - 1\n\n        # Calculate the new gap based on the current gap and the length of the list minus 1\n        gap = int((max_gap - min_gap + 1) // 2) + min_gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # define a function to swap two elements in the list\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a function to check if the list is sorted\n    def is_sorted(nums):\n        for i in range(1, len(nums)):\n            if nums[i] < nums[i-1]:\n                return False\n        return True\n\n    # define a function to partition the list around a pivot element\n    def partition(nums, low, high):\n        pivot = nums[high]\n        i = low - 1\n        for j in range(low, high):\n            if nums[j] <= pivot:\n                i += 1\n                swap(nums, i, j)\n        swap(nums, i+1, high)\n        return i+1\n\n    # define a function to do the actual sorting\n    def sort(nums, low, high):\n        if low < high:\n            pi = partition(nums, low, high)\n            sort(nums, low, pi-1)\n            sort(nums, pi+1, high)\n\n    # call the sort function on the list\n    sort(nums, 0, len(nums)-1)\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n    \n    while swapped:\n        swapped = False\n        \n        # Find the maximum element in the unsorted part of the array\n        for i in range(gap, n):\n            if nums[i] > nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n        \n        # Decrease the gap size\n        gap = int(gap / 1.3)"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    swapped = True\n    i = 0\n\n    while swapped:\n        swapped = False\n\n        # inner loop to find the next gap\n        for j in range(gap):\n            if nums[j] > nums[j + gap]:\n                # swap the elements if they are not in the correct order\n                nums[j], nums[j + gap] = nums[j + gap], nums[j]\n                swapped = True\n\n        # shrink the gap\n        if swapped == False:\n            gap = int(gap / 1.3)\n        else:\n            gap = int(gap * 1.3)\n            i += 1\n\n        if gap == 1:\n            # we have sorted the array\n            break\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements.\n    \"\"\"\n    n = len(nums)\n    gap = n\n\n    while gap > 1:\n        # Move the gap to a smaller value\n        gap = int(gap / 1.3)\n\n        # Perform the sorting for the gap size\n        for i in range(gap, n):\n            # Find the minimum element in the unsorted part of the list\n            j = i\n            while j >= gap and nums[j] > nums[j - gap]:\n                # Swap the elements if they are in the wrong order\n                nums[j], nums[j - gap] = nums[j - gap], nums[j]\n                j -= gap\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    This function sorts a list of elements using the Comb Sort algorithm.\n    '''\n\n    # define a function to swap adjacent elements\n    def swap(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n\n    # define a function to find the median of three numbers\n    def find_median(nums, start, end):\n        if start > end:\n            return None\n        if start == end:\n            return nums[start]\n        if end == len(nums) - 1:\n            return nums[start]\n        if start == 0 and end == len(nums) - 1:\n            return nums[start]\n        mid = (start + end) // 2\n        if nums[mid] > nums[start]:\n            if nums[mid] > nums[end]:\n                return nums[mid]\n            else:\n                return find_median(nums, start, mid - 1)\n        elif nums[mid] < nums[start]:\n            return find_median(nums, mid + 1, end)\n        else:\n            return find_median(nums, start + 1, end - 1)\n\n    # define a function to find the pivot index\n    def find_pivot(nums, start, end):\n        pivot = find_median(nums, start, end)\n        if pivot is None:\n            return None\n        if pivot == nums[start]:\n            return start\n        if pivot == nums[end]:\n            return end\n        if nums[start] <= pivot <= nums[end]:\n            return find_pivot(nums, start, mid)\n        else:\n            return find_pivot(nums, mid + 1, end)\n\n    # define a function to sort the array using the Comb Sort algorithm\n    def comb_sort_helper(nums, start, end):\n        # if the array is already sorted, return\n        if start >= end:\n            return nums\n        # find the pivot index\n        pivot = find_pivot(nums, start, end)\n        # swap the pivot with the first element\n        swap(nums, start, pivot)\n        # sort the left and right subarrays\n        comb_sort_helper(nums, start + 1, end)\n        comb_sort_helper(nums, start, end - 1)\n\n    # call the comb_sort_helper function to sort the array\n    comb_sort_helper(nums, 0, len(nums) - 1)\n\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n < 0:\n        return False\n    for i in range(1, n+1):\n        if n - i*i == i*i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # checking if the given number is even or odd\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")\n\n    # calculating the squares of the numbers\n    square = int(n ** 0.5)\n    square1 = square * square\n\n    # checking if the given number is divisible by the squares of its digits\n    for i in range(len(str(n))):\n        digit = int(str(n)[i])\n        if digit % square1!= 0:\n            print(n, \"can't be represented as the difference of two squares\")\n            return\n    else:\n        print(n, \"is divisible by the squares of its digits\")\n\n    # checking if the given number is a perfect square\n    if square ** 2 == n:\n        print(n, \"is a perfect square\")\n    else:\n        print(n, \"is not a perfect square\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # check if the input is a positive integer\n    if not isinstance(n, int) or n < 1:\n        print(\"Input must be a positive integer.\")\n        return None\n\n    # find the square root of the input number\n    sqrt_n = int(n ** 0.5)\n\n    # check if the square root is an integer\n    if not isinstance(sqrt_n, int):\n        print(\"Square root of input number is not an integer.\")\n        return None\n\n    # check if the difference of the squares is an integer\n    if n - sqrt_n ** 2!= sqrt_n ** 2 - n:\n        print(\"Input number cannot be represented as the difference of two squares.\")\n        return None\n\n    # print a message that the input number can be represented as the difference of two squares\n    print(\"The input number can be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square of the number\n    square = n ** 2\n    \n    # Check whether the square can be represented as the difference of two squares\n    for i in range(1, int(square ** 0.5) + 1):\n        if square - i ** 2 == i ** 2:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1, int(n**0.5)+1):\n        for j in range(1, int(n**0.5)+1):\n            if i**2 + j**2 == n:\n                return \"True\"\n            elif i**2 + j**2 > n:\n                break\n    return \"False\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Calculate the square of the given number\n    num_sq = n*n\n    # Check if the square of the given number is the difference of two squares\n    for i in range(1, n+1):\n        if num_sq - i*i == 0:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # calculate the square of the difference\n    diff = (n * n) - (2 * n * 2)\n\n    # check if the square of the difference is less than or equal to the original number\n    if diff * diff <= n:\n        print(\"The number can be represented as the difference of two squares.\")\n    else:\n        print(\"The number cannot be represented as the difference of two squares.\")"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    #check if the number is negative\n    if n < 0:\n        return False\n    \n    #check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    #check if the number is divisible by 3\n    if n % 3 == 0:\n        return False\n\n    #check if the number is divisible by 4\n    if n % 4 == 0:\n        return False\n\n    #check if the number is divisible by 5\n    if n % 5 == 0:\n        return False\n\n    #check if the number is divisible by 6\n    if n % 6 == 0:\n        return False\n\n    #check if the number is divisible by 7\n    if n % 7 == 0:\n        return False\n\n    #check if the number is divisible by 8\n    if n % 8 == 0:\n        return False\n\n    #check if the number is divisible by 9\n    if n % 9 == 0:\n        return False\n\n    #check if the number is divisible by 10\n    if n % 10 == 0:\n        return False\n\n    #check if the number is divisible by 11\n    if n % 11 == 0:\n        return False\n\n    #check if the number is divisible by 12\n    if n % 12 == 0:\n        return False\n\n    #check if the number is divisible by 13\n    if n % 13 == 0:\n        return False\n\n    #check if the number is divisible by 14\n    if n % 14 == 0:\n        return False\n\n    #check if the number is divisible by 15\n    if n % 15 == 0:\n        return False\n\n    #check if the number is divisible by 16\n    if n % 16 == 0:\n        return False\n\n    #check if the number is divisible by 17\n    if n % 17 == 0:\n        return False\n\n    #check if the number is divisible by 18\n    if n % 18 == 0:\n        return False\n\n    #check if the number is divisible by 19\n    if n % 19 == 0:\n        return False\n\n    #check if the number is divisible by 20\n    if n % 20 == 0:\n        return False\n\n    #check if the number is divisible by 21\n    if n % 21 == 0:\n        return False\n\n    #check if the number is divisible by 22\n    if n % 22 == 0:\n        return False\n\n    #check if the number is divisible by 23\n    if n % 23 == 0:\n        return False\n\n    #check if the number is divisible by 24\n    if n % 24 == 0:\n        return False\n\n    #check if the number is divisible by 25\n    if n % 25 == 0:\n        return False\n\n    #check if the number is divisible by 26\n    if n % 26 == 0:\n        return False\n\n    #check if the number is divisible by 27\n    if n % 27 == 0:\n        return False\n\n    #check if the number is divisible by 28\n    if n % 28 == 0:\n        return False\n\n    #check if the number is divisible by 29\n    if n % 29 == 0:\n        return False\n\n    #check if the number is divisible by 30\n    if n % 30 == 0:\n        return False\n\n    #check if the number is divisible by 31\n    if n % 31 == 0:\n        return False\n\n    #check if the number is divisible by 32\n    if n % 32 == 0:\n        return False\n\n    #check if the number is divisible by 33\n    if n % 33 == 0:\n        return False\n\n    #check if the number is divisible by 34\n    if n % 34"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check for special cases\n    if n < 0:\n        return \"The given number can't be represented as the difference of two squares.\"\n\n    # Check for edge cases\n    if n == 0 or n == 1:\n        return \"The given number can be represented as the difference of two squares.\"\n\n    # Check for common cases\n    square = int(n**(1/2))\n    diff = square**2 - n\n    if diff < 0:\n        return \"The given number can't be represented as the difference of two squares.\"\n\n    # Check for remaining cases\n    if diff == 0:\n        return \"The given number can be represented as the difference of two squares.\"\n    else:\n        return \"The given number can't be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    '''\n    This function checks whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, otherwise False.\n\n    Example:\n    >>> dif_Square(25)\n    True\n\n    >>> dif_Square(37)\n    False\n    '''\n\n    # check if the number is a multiple of 10\n    if n % 10!= 0:\n        return False\n\n    # check if the square of the number is less than or equal to 200\n    if n ** 2 > 200:\n        return False\n\n    # check if the difference of the square of the number and 25 is less than or equal to 200\n    if (n ** 2 - 25) ** 2 > 200:\n        return False\n\n    # if none of the above conditions are met, the number can be represented as the difference of two squares\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    sequence = []\n    for color in colors:\n        sequence.append(color)\n\n    for pattern in patterns:\n        if sequence.count(pattern[0]) == len(pattern):\n            sequence.remove(pattern[0])\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pattern_count = {}\n    # Count the number of times each pattern appears in the colors array\n    for pattern in patterns:\n        for color in colors:\n            if color == pattern:\n                if pattern in pattern_count:\n                    pattern_count[pattern] += 1\n                else:\n                    pattern_count[pattern] = 1\n    # Check if the patterns appear in the same sequence as in the patterns array\n    count = 0\n    for pattern in patterns:\n        if pattern_count[pattern] == 0:\n            count += 1\n        elif pattern_count[pattern] > 0 and pattern_count[pattern] < len(colors):\n            count += 1\n            for i in range(pattern_count[pattern]):\n                if colors[i]!= pattern:\n                    break\n            else:\n                count -= 1\n        else:\n            return False\n    return count == 0"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    if len(colors)!= len(patterns):\n        return False\n\n    colors_count = {}\n    for color in colors:\n        colors_count[color] = colors_count.get(color, 0) + 1\n\n    for pattern in patterns:\n        if len(pattern) == 0:\n            continue\n        pattern_count = {}\n        for c in pattern:\n            pattern_count[c] = pattern_count.get(c, 0) + 1\n\n        if colors_count!= pattern_count:\n            return False\n\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if colors.count(patterns[i])!= len(patterns[i]):\n            return False\n    \n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # initialize a variable to store the index of the first pattern in the patterns array\n    pattern_index = 0\n\n    # loop through each color in the colors array\n    for color in colors:\n\n        # compare the color to the pattern at the current index in the patterns array\n        if color == patterns[pattern_index]:\n\n            # if the color matches, increment the pattern_index\n            pattern_index += 1\n\n            # if the pattern_index has reached the length of the patterns array, return True\n            if pattern_index == len(patterns):\n                return True\n\n        # if the color does not match the pattern at the current index, reset the pattern_index to 0\n        else:\n            pattern_index = 0\n\n    # if the loop completes without returning True, return False\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    \"\"\"\n    for i, color in enumerate(colors):\n        if patterns[i] == color:\n            if i < len(colors) - 1 and patterns[i + 1] == color:\n                if i < len(colors) - 2 and patterns[i + 2] == color:\n                    if i < len(colors) - 3 and patterns[i + 3] == color:\n                        return True\n            else:\n                return True\n    return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Create a list of lists to store the previous patterns for each color\n    prev_patterns = [[], [], []]\n\n    # Loop through each color in the list\n    for color in colors:\n        # Loop through each pattern in the list of patterns for the current color\n        for pattern in patterns:\n            # If the current color has a pattern that is already in the list of previous patterns for the current color, return False\n            if pattern in prev_patterns[colors.index(color)]:\n                return False\n            # Add the pattern to the list of previous patterns for the current color\n            prev_patterns[colors.index(color)].append(pattern)\n\n    # If all patterns are unique and follow the sequence given in the patterns array, return True\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # create a set of patterns\n    patterns = set(patterns)\n    # create a dictionary to store the count of each pattern\n    pattern_count = {}\n    # iterate through the colors\n    for i in range(len(colors)):\n        # get the current color\n        color = colors[i]\n        # if the color is the first color, add it to the dictionary\n        if i == 0:\n            pattern_count[color] = 1\n        # if the color is the same as the previous color, increment the count for that pattern\n        elif color == colors[i-1]:\n            pattern_count[color] += 1\n        # if the color is different than the previous color, increment the count for the previous pattern\n        else:\n            pattern_count[patterns.pop()] += 1\n    # check if all patterns have been used\n    if len(patterns) == 0:\n        return True\n    # otherwise, return False\n    else:\n        return False"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Check if the length of the arrays are the same\n    if len(colors)!= len(patterns):\n        return False\n\n    # Iterate through the arrays and check if each color is present in the corresponding pattern\n    for color in colors:\n        found = False\n        for pattern in patterns:\n            if color in pattern:\n                found = True\n                break\n        if not found:\n            return False\n\n    # If the loop completes without finding any mismatches, then the color sequence is valid\n    return True"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(test_list[i][k] % K == 0 for k in range(len(test_list[i]))) and all(test_list[j][k] % K == 0 for k in range(len(test_list[j]))):\n                result.append(test_list[i] + test_list[j])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # convert the list of tuples into a dictionary to easily check for divisibility\n    dict_test_list = {}\n    for item in test_list:\n        for i in range(len(item)):\n            key = str(i) + '_' + str(item[i])\n            if key in dict_test_list:\n                dict_test_list[key] += 1\n            else:\n                dict_test_list[key] = 1\n    \n    # create a new list to store the tuples that have all elements divisible by k\n    result = []\n    for key, value in dict_test_list.items():\n        if value == K:\n            # convert the key into a list of indices and check if all elements are divisible by k\n            indices = [int(i) for i in key.split('_')]\n            is_divisible = True\n            for i in indices:\n                if i % K!= 0:\n                    is_divisible = False\n                    break\n            if is_divisible:\n                result.append(test_list[int(indices[0])])\n    \n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if sum(x % K for x in test_list[i]) == 0:\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    count = 0\n    for tuple in test_list:\n        if all(x % K == 0 for x in tuple):\n            count += 1\n    return count"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_tuples = []\n    for tup in test_list:\n        count = 0\n        for elem in tup:\n            if elem % K == 0:\n                count += 1\n        if count == len(tup):\n            divisible_tuples.append(tup)\n    return divisible_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    # Create an empty list to store the valid tuples\n    valid_tuples = []\n    \n    # Loop through each tuple in the test list\n    for i in range(len(test_list)):\n        # Check if all elements in the tuple are divisible by K\n        if all(elem % K == 0 for elem in test_list[i]):\n            # If so, add the tuple to the valid list\n            valid_tuples.append(test_list[i])\n    \n    # Return the valid tuples\n    return valid_tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tuple in test_list:\n        divisible_count = 0\n        for element in tuple:\n            if element % K == 0:\n                divisible_count += 1\n        if divisible_count == len(tuple):\n            result.append(tuple)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    tuples = []\n    for i, tuple_ in enumerate(test_list):\n        if all(num % K == 0 for num in tuple_):\n            tuples.append(tuple_)\n    return tuples"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    '''\n    This function takes a number as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    for word in s.split():\n        if len(word) % 2 == 0:\n            print(word + \" has an even length\")\n        else:\n            print(word + \" has an odd length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s): \n    words = s.split() \n    for word in words: \n        if len(word) % 2!= 0: \n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.replace(' ', '')\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            print(word +'is odd')\n        else:\n            print(word +'is even')"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    word_list = s.split()\n    for word in word_list:\n        if len(word) % 2 == 1:\n            print(word, \"has an odd length\")\n        else:\n            print(word, \"has an even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    #split the string into words\n    words = s.split()\n    \n    #initialize a variable to store the total length of words\n    total_length = 0\n    \n    #loop through each word in the list of words\n    for word in words:\n        #append the length of the word to the total_length variable\n        total_length += len(word)\n        \n        #check if the length of the word is odd\n        if total_length % 2!= 0:\n            #if the length is odd, return True\n            return True\n    \n    #if the loop completes without finding an odd length, return False\n    return False\n"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return \"The length of the word is even\"\n        else:\n            return \"The length of the word is odd\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    words = s.split() # split the string into words\n    for word in words:\n        if len(word) % 2!= 0: # check if the length of the word is odd\n            print(word, \"is odd length\")\n        else:\n            print(word, \"is even length\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 0:\n        print(s, \"is an even length.\")\n    else:\n        print(s, \"is an odd length.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n\n    # Split the string into words\n    words = s.split()\n\n    # Loop through each word and check its length\n    for word in words:\n        if len(word) % 2!= 0:\n            return \"The length of the word is odd.\"\n\n    # If no odd length word is found, return the word \"All words have even length.\"\n    return \"All words have even length.\""
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split() # split the string by space to get a list of words\n    for word in words: \n        if len(word) % 2 == 0: # check if the length of the word is even\n            return word + \" is an even word.\"\n        else:\n            return word + \" is an odd word.\""
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = (4*n*(3*n-1)) // 2\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return (n * (n+1)) * (n+2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 0\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    \n    for i in range(1, n+1):\n        num += a + b + c + d\n        \n        a += b + c\n        b += c\n        c += d\n    \n    return num"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    def next_tetrahedral(num):\n        \"\"\"\n        Helper function to find the next tetrahedral number.\n        \"\"\"\n        if num % 15 == 0:\n            return num + 3\n        else:\n            return num + 1\n    \n    # initialize variables\n    num = 1\n    tetrahedral_count = 1\n    total_tetrahedral_count = 1\n    \n    # iterate until we reach the nth tetrahedral number\n    while tetrahedral_count < n:\n        num = next_tetrahedral(num)\n        tetrahedral_count = 1\n        \n        # iterate through the digits of the number\n        for digit in str(num):\n            tetrahedral_count += int(digit)\n        \n        # update total count\n        total_tetrahedral_count += tetrahedral_count\n    \n    return total_tetrahedral_count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # The formula for the nth tetrahedral number is n! * (4n-1) / 3^n\n    # We can simplify the expression by assuming that n is odd and using the fact that 3^n = (3^2)^n\n    # We can also use the fact that 4n-1 = n * (n-1)\n    # So we can write the formula as n * (n-1) * (n-2) * (n-3) / 6\n    # We can then use the fact that n^2 + 3n + 1 = 0 and 2n^2 - 1 = 0 to find the root of the formula\n    # The root will be n\n    return n * (n-1) * (n-2) * (n-3) / 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4 * tetrahedral_number(n - 1) + 1"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Find the square of n\n    n_squared = n**2\n    # Find the cube of n squared\n    n_cubed = n_squared**3\n    # Find the cube of the square root of n squared\n    sqrt_n_squared = n_squared**0.5\n    n_cubed_sqrt = n_cubed / sqrt_n_squared\n    # Find the cube of n\n    n_cubed = n_squared * sqrt_n_squared\n    # Multiply n by the cube of n\n    return n * n_cubed"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n * (n+1) * (2*n+1) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 1:\n        return 6\n    elif n == 2:\n        return 15\n    elif n == 3:\n        return 24\n    elif n == 4:\n        return 33"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 4*n*n + 6*(n-1)*(n-1)*n + 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * r**3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    V = (4/3) * pi * r ** 3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    volume = (4/3) * math.pi * r ** 3\n    \n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi = math.pi\n    \n    # Calculate the volume\n    vol = (4/3)*pi*(r**3)\n    \n    return vol"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = sum(ord(char) for char in strr)\n    char_value = (sum_ascii % 26) + 65\n    return chr(char_value)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_value = 0\n    for char in strr:\n        char_value += ord(char)\n    return chr((char_value % 26) + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr((char_sum % 26) + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = 0\n    for char in strr:\n        ascii_val += ord(char)\n    return chr(((ascii_val % 26) + 65) % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):\n    # Convert the string to lowercase and remove any non-alphanumeric characters\n    strr = ''.join(filter(str.isalnum, str.lower(strr)))\n    # Initialize the sum of ASCII values of characters as 0\n    sum_of_ascii = 0\n    # Iterate through the characters of the string\n    for char in strr:\n        # Add the ASCII value of the character modulo 26 to the sum\n        sum_of_ascii += ord(char) % 26\n    # Convert the sum to a character and return it\n    return chr(sum_of_ascii % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # initialize an empty string to store the encrypted character\n    encrypted_char = ''\n    # iterate through each character in the string\n    for char in strr:\n        # get the ASCII value of the character\n        ascii_value = ord(char)\n        # add the ASCII value to the encrypted character\n        encrypted_char += chr((ascii_value + 65) % 26 + 65)\n    return encrypted_char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n\n    result = chr((ascii_sum % 26) + ord('a'))\n\n    return result"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Convert the string to a list of ASCII values\n    ASCII_list = [ord(char) for char in strr]\n\n    # Calculate the sum of ASCII values modulo 26\n    sum_ASCII = sum(ASCII_list) % 26\n\n    # Convert the sum modulo 26 back to a character and return it\n    return chr(sum_ASCII + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    result = 0\n    for i in range(len(strr)):\n        result += ord(strr[i])\n    return result % 26"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # convert the string to uppercase\n    strr = strr.upper()\n\n    # initialize the character variable\n    char = ''\n\n    # loop through each character in the string\n    for char_num in strr:\n        # add the ASCII value of the character modulo 26\n        char_num = ord(char_num)\n        char_num = (char_num + 13) % 26\n        # convert the ASCII value back to a character and append it to the char variable\n        char += chr(char_num)\n\n    return char"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [2]\n    for i in range(1, n):\n        sequence.append(sequence[-1] * 2)\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    # Initialize the sequence with the first two numbers of the sequence\n    seq = [2, 3]\n    \n    # Loop through the remaining n-2 numbers of the sequence\n    for i in range(1, n-2):\n        # Calculate the next number in the sequence\n        next_num = 2 * seq[i] + seq[i+1]\n        \n        # Add the next number to the sequence\n        seq.append(next_num)\n    \n    # Return the nth number in the sequence\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sequence.append(sequence[-1] + sequence[-2])\n        else:\n            sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    for i in range(1, n):\n        sequence.append(3 * sequence[-1] - sequence[-2])\n    return sequence[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    elif n == 5:\n        return 1\n    elif n == 6:\n        return 1\n    elif n == 7:\n        return 1\n    elif n == 8:\n        return 1\n    elif n == 9:\n        return 1\n    elif n == 10:\n        return 1\n    elif n == 11:\n        return 1\n    elif n == 12:\n        return 1\n    elif n == 13:\n        return 1\n    elif n == 14:\n        return 1\n    elif n == 15:\n        return 1\n    elif n == 16:\n        return 1\n    elif n == 17:\n        return 1\n    elif n == 18:\n        return 1\n    elif n == 19:\n        return 1\n    elif n == 20:\n        return 1\n    elif n == 21:\n        return 1\n    elif n == 22:\n        return 1\n    elif n == 23:\n        return 1\n    elif n == 24:\n        return 1\n    elif n == 25:\n        return 1\n    elif n == 26:\n        return 1\n    elif n == 27:\n        return 1\n    elif n == 28:\n        return 1\n    elif n == 29:\n        return 1\n    elif n == 30:\n        return 1\n    elif n == 31:\n        return 1\n    elif n == 32:\n        return 1\n    elif n == 33:\n        return 1\n    elif n == 34:\n        return 1\n    elif n == 35:\n        return 1\n    elif n == 36:\n        return 1\n    elif n == 37:\n        return 1\n    elif n == 38:\n        return 1\n    elif n == 39:\n        return 1\n    elif n == 40:\n        return 1\n    elif n == 41:\n        return 1\n    elif n == 42:\n        return 1\n    elif n == 43:\n        return 1\n    elif n == 44:\n        return 1\n    elif n == 45:\n        return 1\n    elif n == 46:\n        return 1\n    elif n == 47:\n        return 1\n    elif n == 48:\n        return 1\n    elif n == 49:\n        return 1\n    elif n == 50:\n        return 1\n    elif n == 51:\n        return 1\n    elif n == 52:\n        return 1\n    elif n == 53:\n        return 1\n    elif n == 54:\n        return 1\n    elif n == 55:\n        return 1\n    elif n == 56:\n        return 1\n    elif n == 57:\n        return 1\n    elif n == 58:\n        return 1\n    elif n == 59:\n        return 1\n    elif n == 60:\n        return 1\n    elif n == 61:\n        return 1\n    elif n == 62:\n        return 1\n    elif n == 63:\n        return 1\n    elif n == 64:\n        return 1\n    elif n == 65:\n        return 1\n    elif n == 66:\n        return 1\n    elif n == 67:\n        return 1\n    elif n == 68:\n        return 1\n    elif n == 69:\n        return 1\n    elif n == 70:\n        return 1\n    elif n == 71:\n        return 1\n    elif n == 72:\n        return 1\n    elif n == 73:\n        return 1\n    elif n == 74:\n        return 1\n    elif n == 75:\n        return 1\n    elif n == 76:\n        return 1\n    elif n == 77:\n        return 1\n    elif n == 78:\n        return 1\n    elif n == 79:\n        return 1\n    elif n == 80:\n        return 1\n    elif n == 81:\n        return 1\n    elif n == 82:\n        return 1\n    elif n == 83:"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n-1):\n        if sequence[-1] == 1:\n            sequence.append(1)\n            sequence.append(1)\n        else:\n            sequence.append(0)\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    sequence = [1]  # initialize the sequence with the first number\n\n    for i in range(1, n):\n        new_sequence = [1] * i  # create a new sequence of zeros with the same length as the previous sequence\n\n        # add the previous sequence to the new sequence\n        for j in range(i):\n            new_sequence[j] = sequence[j] + sequence[j+1]\n\n        # append the new sequence to the sequence list\n        sequence.extend(new_sequence)\n\n    return sequence[n-1]  # return the nth number in the sequence"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(1, n):\n        next_num = 0\n        for num in sequence:\n            if num == 0:\n                next_num += 1\n            else:\n                next_num += 1\n        sequence.append(next_num)\n    return sequence[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    for i in range(2, n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [1]\n    i = 1\n    while i < n:\n        next_number = 4 * sequence[i-1] - sequence[i-1]\n        if next_number < 0:\n            next_number = 0\n        sequence.append(next_number)\n        i += 1\n    return sequence[n-1]"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Find the surface area of a sphere using the formula\n    # A = 4 * pi * r^2\n    A = 4 * math.pi * r**2\n    return A"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * (r ** 2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3) * math.pi * r**3"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    \"\"\"\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r ** 2"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n\n    # Define the formula for centered hexagonal numbers\n    chex = 2 * n * n - 1\n\n    # Return the centered hexagonal number\n    return chex"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Starting point of the centered hexagonal number sequence\n    c = 3\n    \n    # Loop to find the nth centered hexagonal number\n    for i in range(n):\n        # Divide the current centered hexagonal number by 2 and round down\n        c = int(c / 2)\n        \n        # If the resulting integer is odd, subtract 1\n        if c % 2 == 1:\n            c -= 1\n            \n    return c"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 0:\n        return None\n    else:\n        return (n + 1) * (n + 2)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 21\n    elif n == 4:\n        return 84\n    elif n == 5:\n        return 289\n    elif n == 6:\n        return 1006\n    elif n == 7:\n        return 3438\n    elif n == 8:\n        return 12247\n    elif n == 9:\n        return 44464\n    elif n == 10:\n        return 159136\n    elif n == 11:\n        return 590497\n    elif n == 12:\n        return 2006360\n    elif n == 13:\n        return 6895281\n    elif n == 14:\n        return 24976168\n    elif n == 15:\n        return 93914209\n    elif n == 16:\n        return 377919360\n    elif n == 17:\n        return 1386425361\n    elif n == 18:\n        return 5247716168\n    elif n == 19:\n        return 19134373037\n    elif n == 20:\n        return 75319339792\n    elif n == 21:\n        return 294476136049\n    elif n == 22:\n        return 1037737979360\n    elif n == 23:\n        return 4072197339041\n    elif n == 24:\n        return 13367962141856\n    elif n == 25:\n        return 53690636884481\n    elif n == 26:\n        return 197081603600960\n    elif n == 27:\n        return 804243249348225\n    elif n == 28:\n        return 3195190427337984\n    elif n == 29:\n        return 11057283710274945\n    elif n == 30:\n        return 46292512771761664\n    elif n == 31:\n        return 150530452846200065\n    elif n == 32:\n        return 621848359892138880\n    else:\n        raise ValueError(\"Invalid input.\")"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the number of rows and columns in the centered hexagonal grid\n    rows = 6\n    cols = 10\n    \n    # Initialize the sum of the centered hexagonal numbers\n    sum_centered = 0\n    \n    # Iterate through each row\n    for i in range(rows):\n        # Iterate through each column in the current row\n        for j in range(i+1):\n            # Add the jth centered hexagonal number to the sum\n            sum_centered += 2*j + 1\n    \n    # Return the sum of the centered hexagonal numbers\n    return sum_centered"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    hex_n = n * 6 - 6\n    if hex_n % 2 == 0:\n        centered_hex_n = hex_n // 2\n    else:\n        centered_hex_n = (hex_n + 1) // 2\n    return centered_hex_n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (2 * n - 1) * (2 * n + 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Centered hexagonal numbers are defined as positive integers equal to 6n^2 - 1\n    return 6 * n * n - 1"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        # Find the number of hexagons in the triangle\n        num_hexagons = n - 1\n        # Calculate the number of sides in each hexagon\n        num_sides = 6 * num_hexagons\n        # Calculate the number of triangles in the hexagon\n        num_triangles = num_sides // 3\n        # Calculate the number of base points for the hexagon\n        base_points = num_triangles - 1\n        # Find the hexagon number of the nth centered hexagon\n        centered_hexagon_num = (num_triangles + base_points) * 3 - 1\n        # Calculate the base point of the nth centered hexagon\n        base_point = (num_triangles + base_points) * 3\n        # Calculate the distance between the center of the hexagon and the center of the triangle\n        dist = (num_triangles - 1) * 2\n        # Return the centered hexagon number\n        return centered_hexagon_num + base_point + dist"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 0\n    else:\n        center = n//2\n        return ((2*center-1)*(2*center-1)*(2*center-2)+center)**0.5"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # combine dictionaries using the `update()` method\n    combined_dict = {**dict1, **dict2, **dict3}\n    return combined_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Combine all the keys from dict1, dict2, and dict3 into a single list\n    all_keys = list(set(dict1.keys()).union(set(dict2.keys())).union(set(dict3.keys())))\n    \n    # Create an empty dictionary to hold the merged dictionaries\n    merged_dict = {}\n    \n    # Loop through each key in the combined list and add it to the merged dictionary if it exists in either of the dictionaries\n    for key in all_keys:\n        if key in dict1:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n            \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    for key in dict1:\n        if key in dict2 and key in dict3:\n            merged_dict[key] = dict1[key]\n        elif key in dict2:\n            merged_dict[key] = dict2[key]\n        elif key in dict3:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary to merge.\n        dict2 (dict): The second dictionary to merge.\n        dict3 (dict): The third dictionary to merge.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # Create a new empty dictionary\n    merged_dict = {}\n\n    # Iterate over each key-value pair in each dictionary\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n\n    :param dict1: A dictionary to be merged with dict2 and dict3.\n    :param dict2: A dictionary to be merged with dict1 and dict3.\n    :param dict3: A dictionary to be merged with dict1 and dict2.\n    :return: A single dictionary containing all the keys and values from dict1, dict2, and dict3.\n    \"\"\"\n    # Combine the three dictionaries into a single dictionary\n    merged_dict = ct.ChainMap(dict1, dict2, dict3)\n    # Convert the merged dictionary to a normal dictionary\n    normal_dict = dict(merged_dict)\n    # Return the normal dictionary\n    return normal_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    This function returns a dictionary where the keys are the elements in the list\n    and the values are their frequency in the list.\n    \"\"\"\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(lst)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n\n    # Create an empty dictionary to store the frequency of each element in the list\n    freq_dict = collections.Counter()\n\n    # Loop through each element in the list\n    for element in list1:\n        # Update the frequency of the current element in the dictionary\n        freq_dict[element] += 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n\n    # Calculate the range of numbers to check\n    start = 0\n    end = N\n\n    # Initialize variables to keep track of the closest smaller number and its distance\n    closest = N\n    closest_diff = abs(N - N)\n\n    # Loop through the range of numbers to check\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Check if the mid number is smaller than n\n        if mid < N:\n            # If it is, update the closest smaller number and its distance\n            if abs(mid - N) < closest_diff:\n                closest = mid\n                closest_diff = abs(mid - N)\n            # If it's not, move the range to the left\n            else:\n                start = mid + 1\n        # If the mid number is greater than n, move the range to the right\n        else:\n            end = mid - 1\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n\n    min_diff = float('inf')\n    closest_num = -1\n\n    for i in range(1, N):\n        diff = abs(N - i)\n        if diff < min_diff:\n            min_diff = diff\n            closest_num = i\n\n    return closest_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N):\n        if abs(N-i) < abs(closest-N):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_diff = float('inf')\n    closest = N\n\n    # Iterate through all possible values of n\n    for num in range(1, N):\n        # Calculate the difference between n and num\n        diff = abs(num - N)\n\n        # If the difference is less than the current min_diff, update min_diff and closest\n        if diff < min_diff:\n            min_diff = diff\n            closest = num\n\n    # Return the closest smaller number\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = abs(N - 1)\n    if diff < 3:\n        return N - 1\n    elif diff < 7:\n        return N - 2\n    else:\n        return N - 3"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    nums = [2, 5, 7, 10, 12, 15, 18, 20, 22, 25, 27, 30]\n    closest = float('inf')\n    for num in nums:\n        diff = abs(num - N)\n        if diff < closest:\n            closest = diff\n    return N - closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    num = 0\n    diff
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    This function takes an integer N as input and returns the closest smaller number.\n    '''\n    if N == 1:\n        return 0\n    else:\n        return 2**int(N-1) - 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for num in range(1, N):\n        if abs(num - N) < abs(closest - N):\n            closest = num\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # Initialize variables\n    min_num = N\n    closest_num = N\n    # Loop through all numbers from 1 to N-1\n    for num in range(1, N):\n        # Check if the current number is smaller than the minimum number\n        if num < min_num:\n            # If it is, update the minimum number and closest number\n            min_num = num\n            closest_num = min_num\n        # Check if the current number is closer to N than the current closest number\n        elif abs(N - num) < abs(N - closest_num):\n            # If it is, update the closest number\n            closest_num = num\n    # Return the closest smaller number\n    return closest_num"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    This function takes a list as an input and returns the length of the longest word in the list.\n\n    Parameters:\n    list1 (list): The list to find the length of the longest word in.\n\n    Returns:\n    int: The length of the longest word in the list.\n\n    Example:\n    >>> len_log(['apple', 'banana', 'cherry', 'date'])\n    5\n\n    >>> len_log(['apple', 'banana', 'cherry', 'date', 'elderberry'])\n    8\n\n    >>> len_log(['apple', 'banana'])\n    5\n\n    >>> len_log(['apple'])\n    5\n    '''\n\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = 0\n    for word in list1:\n        if len(word) > longest:\n            longest = len(word)\n    return longest\n"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word in a list.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # initialize variables\n    word_length = 0\n    longest_word = \"\"\n\n    # loop through list of words\n    for word in list1:\n        # check if word length is greater than current longest word length\n        if len(word) > word_length:\n            # update word length and longest word\n            word_length = len(word)\n            longest_word = word\n\n    # return length of longest word\n    return word_length"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n\n    # loop through each value in the list\n    for value in str1:\n        # check if the substring is present in the value\n        if sub_str in value:\n            return True\n\n    # if the loop completes without finding the substring, return False\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    # convert the list of string values to a set to remove duplicates\n    str1_set = set(str1)\n    \n    # check if the substring is present in the set of string values\n    if sub_str in str1_set:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if isinstance(str1, str) and isinstance(sub_str, str):\n        for item in str1:\n            if item in sub_str:\n                return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    if str1 in sub_str:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 0:\n        return \"Number must be positive\"\n    elif n % 2 == 0:\n        return \"Number is even\"\n    else:\n        for i in range(3, n, 2):\n            if n % i == 0:\n                return \"Number is a composite number\"\n        return \"Number is odd\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0: \n        return False \n    else: \n        for i in range(3, int(n**0.5)+1, 2): \n            if n % i == 0: \n                return False \n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    if n % 2 == 0:\n        return \"Even numbers are not undulating.\"\n    elif n % 2 == 1:\n        return \"Odd numbers are undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    \n    # If the given number is odd, it is undulating.\n    if n % 2!= 0:\n        return True\n    \n    # If the given number is even, it is not undulating.\n    return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    This function checks whether a given number is undulating or not.\n\n    The function takes an integer 'n' as input and returns a boolean value indicating whether 'n' is undulating or not.\n\n    An undulating number is a number where the sum of its positive and negative parts is equal to the original number.\n\n    For example, 15 is an undulating number because 15 = 5 + (-10) = -4 + 15 = 0.\n\n    To solve this problem, we need to check whether the sum of the positive and negative parts of 'n' is equal to 'n'.\n\n    If it is, then 'n' is undulating. Otherwise, 'n' is not undulating.\n\n    The function returns the boolean value of whether 'n' is undulating or not.\n    '''\n\n    # Calculate the sum of the positive and negative parts of 'n'\n    positive_part = sum(range(1, n+1))\n    negative_part = sum(range(-n, -1, -1))\n\n    # Check whether the sum of the positive and negative parts is equal to 'n'\n    if positive_part == n or negative_part == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n > 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Checks whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a,b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    while b > 0:\n        if b % 2 == 1:\n            result *= a\n        a *= a\n        b //= 2\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    \"\"\"\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first value of the smallest tuple\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # Return the first value of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples by the second value in ascending order\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    # return the index of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list based on the second element of the tuple using the itemgetter() function from the operator module\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    \n    # Return the first element of the first tuple in the sorted list\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    for i in range(1, len(test_list)):\n        if test_list[i][1] < test_list[min_index][1]:\n            min_index = i\n    return test_list[min_index][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    # sort the list of tuples by second value\n    test_list.sort(key=itemgetter(1))\n    # return the first value of the smallest tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(range(len(test_list)), key=lambda i: (test_list[i][1], test_list[i][0]))"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value in the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Get the first value of the first tuple\n    first_value = sorted_list[0][0]\n\n    return first_value"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    # Initialize the minimum length to be the length of the first list in the list of lists\n    min_len = len(lst[0])\n\n    # Iterate over all the lists in the list of lists\n    for i in range(len(lst)):\n        # If the length of the current list is less than the current minimum length, update the minimum length\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n\n    # Return the minimum length\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    \n    # Initialize a variable to store the length of the smallest list\n    min_length = float('inf')\n    \n    # Iterate through each list in the list of lists\n    for sublist in lst:\n        \n        # Check if the length of the current sublist is less than the minimum length\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            \n    # Return the minimum length of all sublists\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000000000\n    min_list = lst[0]\n\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n            min_list = i\n\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    smallest_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < smallest_length:\n            smallest_length = len(sublist)\n    return smallest_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = 1000\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = float('inf')\n    for lst in lst:\n        if len(lst) < min_length:\n            min_length = len(lst)\n    return min_length"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    i=2\n    count=0\n    while i*i<=n:\n        if n%i:\n            i+=1\n        else:\n            n=n/i\n            count+=1\n    if n>1:\n        count+=1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            count += 1\n    count += 1\n    return count\n\nn = int(input(\"Enter a number: \"))\nprint(\"The number of divisors of\", n, \"is:\", divisor(n))"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    i = 1\n    while i <= n:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # initialize count variable to 0\n    count = 0\n    # loop through all numbers from 1 to n (inclusive)\n    for i in range(1, n+1):\n        # check if i is a divisor of n\n        if n % i == 0:\n            # if i is a divisor, increment the count variable\n            count += 1\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    This function takes an integer as input and returns the number of divisors of that integer.\n    A divisor is an integer that divides evenly into another integer without leaving a remainder.\n    For example, 6 is a divisor of 12 because 6 can be written as a sum of 2 multiples of 3.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # initialize an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # iterate through each element in the flattened list\n    for item in list1:\n        # if the item is already in the dictionary, increment its frequency by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n        # otherwise, add the item to the dictionary with a frequency of 1\n        else:\n            freq_dict[item] = 1\n    # return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        for sub_item in item:\n            if sub_item not in freq_dict:\n                freq_dict[sub_item] = 0\n            freq_dict[sub_item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its count by 1\n        if elem in freq_dict:\n            freq_dict[elem] += 1\n        # If the element is not in the dictionary, add it with a count of 1\n        else:\n            freq_dict[elem] = 1\n\n    # Return the dictionary with the frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Flatten the list of lists\n    flattened_list = [item for sublist in list1 for item in sublist]\n\n    # Create a dictionary to store the frequency of each element in the flattened list\n    frequency_dict = {}\n\n    # Iterate through each element in the flattened list and update the frequency in the dictionary\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in freq:\n                    freq[subitem] += 1\n                else:\n                    freq[subitem] = 1\n        else:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Initialize an empty dictionary to store the frequency of each element in the flattened list\n    freq_dict = {}\n\n    # Flatten the list of lists and loop through each element in the flattened list\n    for elem in list1:\n        # If the element is not already a key in the frequency dictionary, add it with a frequency count of 1\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        # Otherwise, increment the frequency count of the element in the dictionary\n        else:\n            freq_dict[elem] += 1\n\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for elem in list1:\n        if elem not in freq_dict:\n            freq_dict[elem] = 0\n        freq_dict[elem] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if type(item) == list:\n            for sub_item in item:\n                if sub_item in freq_dict:\n                    freq_dict[sub_item] += 1\n                else:\n                    freq_dict[sub_item] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for i in item:\n                if i in freq_dict:\n                    freq_dict[i] += 1\n                else:\n                    freq_dict[i] = 1\n        else:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1  \n    for num in numbers:  \n        result *= num  \n    return result/len(numbers)  "
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Multiply all the numbers in the list\n    product = 1\n    for num in numbers:\n        product *= num\n    \n    # Divide by the length of the list\n    return product / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    result = []\n    while n > 0:\n        remainder = n % 2\n        n //= 2\n        if remainder == 1:\n            result.append(\"1\")\n        else:\n            result.append(\"0\")\n    return \"\".join(result[::-1])"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    # Convert decimal to binary\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n = n // 2\n\n    # Remove leading zeros\n    while binary.startswith(\"0\") and len(binary) > 1:\n        binary = binary[1:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n\n    # Initialize an empty string to store the binary equivalent\n    binary_string = ''\n\n    # While the decimal number is greater than 0\n    while n > 0:\n        # Get the last digit of the decimal number and convert it to binary\n        last_digit = n % 2\n\n        # Add the binary digit to the beginning of the binary string\n        binary_string = str(last_digit) + binary_string\n\n        # Divide the decimal number by 2 to remove the last digit\n        n = n // 2\n\n    # Return the binary string with no leading zeros\n    return binary_string"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return \"0\" \n    binary_str = \"\" \n    while n > 0: \n        binary_str = str(n % 2) + binary_str \n        n //= 2 \n    return binary_str "
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    # initialize an empty list to store the binary representation of the number\n    binary_list = []\n\n    # loop through each digit of the decimal number and append it to the list\n    while n > 0:\n        binary_list.append(str(n % 2))\n        n //= 2\n\n    # reverse the list to get the binary equivalent of the decimal number\n    binary_list.reverse()\n\n    # join the list into a string and return it\n    return \"\".join(binary_list)"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary_number = \"\"\n    while n > 0:\n        binary_number = str(n % 2) + binary_number\n        n //= 2\n    return binary_number"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n\n    binary = ''\n    while n > 0: \n        remainder = n % 2 \n        binary = str(remainder) + binary \n        n = n // 2 \n\n    return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of that integer.\n    \"\"\"\n    while True:\n        num -= 1\n        if is_palindrome(num):\n            return num\n        num += 1\n\ndef is_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns True if it is a palindrome, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    return num_str == num_str[::-1]"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # convert the number to a string and reverse it\n    num_str = str(num)\n    rev_str = num_str[::-1]\n\n    # initialize the two pointers to the beginning and end of the string\n    i = 0\n    j = len(num_str) - 1\n\n    # loop through the string until we find a palindrome\n    while i < j:\n        # check if the characters at the i and j positions are equal\n        if num_str[i]!= num_str[j]:\n            # if they are not, then we have a palindrome\n            break\n\n        # move the pointers towards the center of the string\n        i += 1\n        j -= 1\n\n    # increment the character at the i position\n    num_str = num_str[:i] + chr(ord(num_str[i]) + 1) + num_str[i+1:]\n\n    # convert the new string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the number and check if it is palindrome\n    reversed_num = int(num_str[::-1])\n    if num < reversed_num:\n        return next_smallest_palindrome(reversed_num)\n    \n    # Find the smallest palindrome greater than the original number\n    for i in range(10**(len(num_str)-1), 10**len(num_str), -1):\n        if i < reversed_num:\n            continue\n        if str(i) == str(i)[::-1]:\n            if int(str(i)[::-1]) > num:\n                return int(str(i)[::-1])\n            else:\n                return next_smallest_palindrome(num)\n            \n    # If no palindromes found, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef is_palindrome(n):\n    \"\"\"\n    Checks if a given number is a palindrome.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n    \"\"\"\n    if is_palindrome(num):\n        return num\n    \n    if num > 10**9:\n        return -1\n    \n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    \n    return num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter an integer: \"))\n    next_num = next_smallest_palindrome(num)\n    print(\"The next smallest palindrome of\", num, \"is\", next_num)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    # Convert the given integer to a string\n    str_num = str(num)\n\n    # Reverse the string\n    reversed_num = str_num[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_num)\n\n    # Calculate the sum of the reversed and original integers\n    sum_num = num + reversed_num\n\n    # Check if the sum is less than or equal to 2^31 - 1, which is the largest 32-bit signed integer\n    if sum_num <= (2**31 - 1):\n        return sum_num\n    else:\n        # If the sum is greater than 2^31 - 1, the next smallest palindrome can't be found\n        return \"Cannot find next smallest palindrome\""
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_palindrome(n):\n    \"\"\"\n    Helper function to check if a number is palindrome or not.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function finds the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    if is_palindrome(num+1):\n        return num+1\n    else:\n        return next_smallest_palindrome(num+1)"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n    \n    def is_palindrome_prime(num):\n        if is_palindrome(num) and is_prime(num):\n            return True\n        return False\n    \n    def is_next_smallest(num):\n        smallest = 0\n        for i in range(10):\n            smallest = num * 10 + i\n            if is_palindrome_prime(smallest):\n                return True\n        return False\n    \n    next_num = num + 1\n    while not is_palindrome_prime(next_num):\n        next_num += 1\n    return next_num - 10\n"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # Check if the number is already a palindrome\n    if is_palindrome(num):\n        return num\n\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Check if the reversed number is already a palindrome\n    if is_palindrome(int(reversed_num)):\n        return int(reversed_num)\n\n    # Start searching for the next smallest palindrome\n    i = 1\n    while True:\n        candidate = int(str(num)[::-1] + str(i))\n        if is_palindrome(candidate):\n            return candidate\n        i += 1\n\n    # This code should never be reached, but just in case, return None\n    return None"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_palindrome(num):\n    '''\n    Check if a number is a palindrome or not.\n    '''\n    num_str = str(num)\n    return num_str == num_str[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num\n    else:\n        next_num = num + 1\n        while not is_palindrome(next_num):\n            next_num += 1\n        return next_num"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # check if the input number is negative\n    if num < 0:\n        return -1\n    \n    # convert the input number to a string and reverse it\n    num_str = str(num)[::-1]\n    \n    # iterate through the digits of the number\n    for i in range(len(num_str)):\n        # convert each digit to an integer\n        digit = int(num_str[i])\n        \n        # check if the digit is odd\n        if digit % 2 == 1:\n            # check if the digit is the last digit in the number\n            if i == len(num_str) - 1:\n                # if it is, add 9 to the previous digit to get the next smallest palindrome\n                digit = digit + 9\n            else:\n                # if it's not, add 1 to the next digit to get the next smallest palindrome\n                digit = digit + 1\n        \n        # convert the digit back to a string and concatenate it to the reversed number string\n        num_str = str(digit) + num_str\n    \n    # convert the reversed number string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if the length of the array is greater than 0\n    if len(arr) <= 0:\n        return None\n    \n    # Calculate the index of the kth element\n    k_index = k - 1\n    \n    # Initialize the left and right indices of the array\n    left = 0\n    right = len(arr) - 1\n    \n    # Check if the kth element is at the end of the array\n    if k_index == right:\n        return arr[k_index]\n    \n    # Check if the kth element is in the first half of the array\n    if k_index > left and k_index <= right:\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            # If the kth element is in the first half, check if it is at the midpoint\n            if arr[mid] == k:\n                return arr[mid]\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            elif arr[mid] < k:\n                left = mid + 1\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            else:\n                right = mid - 1\n    \n    # Check if the kth element is in the second half of the array\n    if k_index < left:\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            # If the kth element is in the second half, check if it is at the midpoint\n            if arr[mid] == k:\n                return arr[mid]\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            elif arr[mid] < k:\n                left = mid + 1\n            \n            # If the kth element is at the midpoint, check if it is in the left or right half\n            else:\n                right = mid - 1\n    \n    # If the kth element is not found, return None\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    left, right = 1, len(arr)\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid-1] < arr[mid] and k >= mid:\n            left = mid + 1\n        elif arr[mid] < arr[mid-1] and k <= mid:\n            right = mid - 1\n        else:\n            return arr[mid-1]\n\n    return None"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within the range of the array\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    \n    # Initialize a variable to keep track of the count of elements less than k\n    count = 0\n    \n    # Iterate through the array and count the number of elements less than k\n    for i in range(1, len(arr)+1):\n        if arr[i-1] < k:\n            count += 1\n    \n    # If k is not found, return \"Invalid input\"\n    if count < k:\n        return \"Invalid input\"\n    \n    # Otherwise, return the kth element in the array\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    This function takes in an array and an integer k, and returns the kth element in the array.\n    '''\n    n = len(arr)\n    if k > n:\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        pivot = partition(arr, 1, n)\n        if k == pivot:\n            return arr[k-1]\n        elif k < pivot:\n            return kth_element(arr[:pivot-1], k)\n        else:\n            return kth_element(arr[pivot:], k-pivot+1)\n\ndef partition(arr, low, high):\n    '''\n    This function takes in an array and the indices of the low and high endpoints of the array, and returns the index of the pivot element.\n    '''\n    pivot = arr[low]\n    i = low\n    j = high\n\n    while True:\n        while arr[i] < pivot:\n            i += 1\n        while arr[j] > pivot:\n            j -= 1\n        if i >= j:\n            return j\n        arr[i], arr[j] = arr[j], arr[i]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check if k is within the range of the array\n    if k > len(arr):\n        return \"Error: k is greater than the length of the array.\"\n    elif k < 1:\n        return \"Error: k is less than 1.\"\n\n    # Initialize variables for counting elements\n    count = 1\n    index = 0\n\n    # Iterate through the array and count the number of elements\n    while count <= k:\n        if arr[index] is None:\n            count += 1\n        else:\n            count += 1\n            index += 1\n\n    # Return the kth element\n    return arr[index-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return None\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        left, right = 0, len(arr) - 1\n        while left < right:\n            pivot_index = left + (right - left) // 2\n            if pivot_index == k - 1:\n                return arr[pivot_index]\n            elif pivot_index < k - 1:\n                left = pivot_index + 1\n            else:\n                right = pivot_index - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        return kth_element(arr[1:], k - 1)"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # check if the input array is empty\n    if len(arr) == 0:\n        return None\n    \n    # find the length of the array\n    n = len(arr)\n\n    # check if k is valid\n    if k < 1 or k > n:\n        return None\n\n    # find the index of the kth element\n    index = k - 1\n\n    # return the kth element\n    return arr[index]"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = True\n    camel_case_word = ''\n    \n    for i, char in enumerate(word):\n        if i == 0 and char.isupper():\n            camel_case_word += char.lower()\n        elif char.isupper():\n            camel_case_word += '_' + char.lower()\n        else:\n            camel_case_word += char\n    \n    return camel_case_word.lstrip('_')"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    prev_char = None\n    for char in word:\n        if char.isupper():\n            if prev_char!= \"_\":\n                camel_case += char.lower()\n            else:\n                camel_case += char\n        else:\n            camel_case += char\n        prev_char = char\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    camel_case_string = ''.join(camel_case_words)\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(word.title().split('_'))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    # Convert the snake case string to a list of words\n    words = word.split('_')\n    # Capitalize the first letter of each word\n    camel_case_words = [word.capitalize() for word in words]\n    # Join the words into a camel case string\n    camel_case_string = ''.join(camel_case_words)\n    # Return the camel case string\n    return camel_case_string"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    # initialize an empty list to store the camel case words\n    camel_case_words = []\n    \n    # loop through each character in the word\n    for i, char in enumerate(word):\n        # check if the character is a letter\n        if char.isalpha():\n            # check if the previous character was a space\n            if i == 0 or (i > 0 and word[i-1]!= '_'):\n                # append the character to the camel case word list\n                camel_case_words.append(char.lower())\n                \n            # check if the current character is uppercase\n            elif char.isupper():\n                # append the character to the camel case word list\n                camel_case_words.append(char)\n                \n    # join the camel case words to form the final camel case string\n    final_camel_case = ''.join(camel_case_words)\n    \n    return final_camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        else:\n            camel_case += char.upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    parts = word.split('_')\n    if len(parts) == 1:\n        return word\n    else:\n        camel_case = parts[0].lower()\n        for i in range(1, len(parts)):\n            camel_case += parts[i].capitalize()\n        return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    camel_words = []\n    for word in words:\n        camel_words.append(word.capitalize())\n    return ''.join(camel_words)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    first_letter = True\n    camel_case = \"\"\n    for letter in word:\n        if letter.isupper():\n            if not first_letter:\n                camel_case += \"_\"\n            first_letter = False\n            camel_case += letter.lower()\n        else:\n            camel_case += letter\n    return camel_case"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix to store the Eulerian numbers\n    a = [[0 for i in range(m+1)] for j in range(n+1)]\n    a[1][1] = 1\n    a[1][2] = 2\n    for i in range(3, n+1):\n        for j in range(i):\n            a[i][j] = max(a[i-1][j], a[i-1][j+1]) + 1\n    return a[n][m]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n**m * m**n"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the triangle as a dictionary\n    triangle = {}\n    for i in range(n):\n        triangle[i] = [0] * m\n    \n    # Fill the triangle with 1's\n    for i in range(1, n):\n        for j in range(1, m):\n            triangle[i][j] = 1\n    \n    # Check for symmetricity\n    for i in range(n):\n        if triangle[i][i]!= 1:\n            print(\"The triangle is not symmetric.\")\n            return\n    \n    # Create the pattern\n    pattern = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if triangle[i][j] == 1:\n                row.append('X')\n            else:\n                row.append(' ')\n        pattern.append(''.join(row))\n    \n    # Print the pattern\n    print(' '.join(pattern))\n    \n    # Calculate the Eulerian number\n    eulerian_num = 0\n    for i in range(n):\n        for j in range(m):\n            if triangle[i][j] == 1:\n                eulerian_num += 1\n    \n    # Print the Eulerian number\n    print(\"Eulerian number:\", eulerian_num)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n\n    Parameters:\n    n - Integer, the number of vertices in the graph.\n    m - Integer, the number of edges in the graph.\n\n    Returns:\n    The Eulerian number a(n, m).\n    '''\n\n    # Initialize the matrix to store the distances between each vertex and itself\n    distances = [[0] * (n+1) for i in range(n+1)]\n\n    # Initialize the diagonal to be 1\n    for i in range(n+1):\n        distances[i][i] = 1\n\n    # Calculate the distances between each vertex using Bellman-Ford algorithm\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if distances[j][k] + distances[k][i] < distances[j][i]:\n                    distances[j][i] = distances[j][k] + distances[k][i]\n\n    # Calculate the Eulerian number using the given formula\n    eulerian_num = 1\n    for i in range(1, n+1):\n        eulerian_num *= (distances[i][i] ** m)\n\n    return eulerian_num"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0:\n        return 1\n    elif n == 0:\n        return (1 + m) ** m\n    elif m == 0:\n        return (1 + n) ** n\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize a list to store the Eulerian numbers\n    a_list = []\n\n    # Check if n and m are even or odd\n    if n % 2 == 0 or m % 2 == 0:\n        print(\"Invalid input: n and m must be odd numbers.\")\n        return None\n    \n    # Iterate through the even numbers from 1 to n and m\n    for i in range(1, n+1, 2):\n        for j in range(1, m+1, 2):\n            # Add the Eulerian number to the list\n            a_list.append(i*j)\n\n    # Return the list of Eulerian numbers\n    return a_list"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 1:\n        return m * m\n    elif n == 2:\n        return m * (m - 1) // 2\n    else:\n        return eulerian_num(n - 1, m - 1) + eulerian_num(n - 1, m)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    # Initialize the variables a and b\n    a = 0\n    b = 1\n    \n    # Iterate for n times\n    for i in range(n-1): \n        # Calculate the new value of a and b\n        a = (a + b) % m\n        b = (a - b + m) % m\n    \n    # Return the final value of a\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    def phi(n):\n        \"\"\"\n        Helper function to calculate the Euler's totient function phi(n).\n        \"\"\"\n        if n <= 1:\n            return n\n        else:\n            return phi(n - 1) * (1 - int(n % 2))\n\n    phi_n = phi(n)\n    phi_m = phi(m)\n\n    if phi_n >= phi_m:\n        a = (phi_n * (n - 1)) // phi_m\n    else:\n        a = (phi_m * (m - 1)) // phi_n\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    '''\n    This function calculates the Eulerian number a(n, m).\n    '''\n    # Initialize the matrix\n    matrix = [[0 for j in range(m+1)] for i in range(n+1)]\n\n    # Fill the matrix with values\n    for i in range(n+1):\n        for j in range(m+1):\n            matrix[i][j] = ((i+j)*(2*i+1)*(2*j+1))//((i+j-1)*(i+j-1))\n\n    # Calculate the maximum value in the matrix\n    max_value = max(matrix[i][m] for i in range(n+1))\n\n    # Return the maximum value\n    return max_value"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, sublist in enumerate(input_list):\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = ''.join(sorted(input_list[i][j]))\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if type(item) == bool:\n            if item:\n                count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for num in lst:\n        if num:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for element in lst:\n        if element is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    '''\n    This function takes a list as input and returns the number of true booleans in the list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item is True:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Convert lists to tuples\n    test_tup = tuple(test_list)\n    \n    # Append the lists to the tuples\n    test_tup = test_tup + test_list\n    \n    # Convert the tuples back to lists\n    test_list = list(test_tup)\n    \n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # convert the given lists into tuples\n    test_list = tuple(test_list)\n    test_tup = tuple(test_tup)\n\n    # append the list to the tuple\n    test_tup += test_list\n\n    # return the modified tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list + test_tup\n    return new_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuples\n    test_list += test_tup\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # convert the list to a tuple\n    test_tup = tuple(test_list)\n    # append the list to the tuple\n    test_tup += test_list\n    # return the updated tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    print(test_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return test_list + test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge the two first lists\n    merged_list = merge(num1, num2)\n    # merge the two merged lists and the last list\n    return merge(merged_list, num3)\n\n\ndef merge(list1, list2):\n    '''\n    Merge two lists into a single sorted list.\n    '''\n    # initialize an empty result list\n    result = []\n    # merge the two lists using heapq.merge() function\n    heapq.merge(list1, list2, result)\n    # return the sorted list\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge num1, num2 and num3 using heapq\n    merged = []\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    \n    while num1 and num2 and num3:\n        if heapq.heappop(num1) <= heapq.heappop(num2):\n            merged.append(heapq.heappop(num1))\n        else:\n            merged.append(heapq.heappop(num2))\n        \n        if heapq.heappop(num1) <= heapq.heappop(num3):\n            merged.append(heapq.heappop(num1))\n        else:\n            merged.append(heapq.heappop(num3))\n    \n    return merged"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Sort the input lists\n    num1.sort()\n    num2.sort()\n    num3.sort()\n\n    # Merge the sorted lists into a single sorted list\n    merged_list = num1 + num2 + num3\n\n    # Return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    # Convert each input list into a heap\n    heap1 = sorted(num1)\n    heap2 = sorted(num2)\n    heap3 = sorted(num3)\n\n    # Merge heaps into a single heap\n    merged_heap = []\n    while heap1 and heap2 and heap3:\n        if heap1[0] <= heap2[0] <= heap3[0]:\n            merged_heap.append(heap1.pop(0))\n            merged_heap.append(heap2.pop(0))\n            merged_heap.append(heap3.pop(0))\n        elif heap1[0] <= heap2[0]:\n            merged_heap.append(heap1.pop(0))\n            merged_heap.append(heap2.pop(0))\n        else:\n            merged_heap.append(heap3.pop(0))\n            merged_heap.append(heap1.pop(0))\n            merged_heap.append(heap2.pop(0))\n\n    # Convert merged heap back into a list\n    merged_list = []\n    while merged_heap:\n        merged_list.append(heapq.heappop(merged_heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Combine the three sorted lists\n    sorted_list = heapq.merge(num1, num2, num3)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Merge three sorted lists into a single sorted list.\n    '''\n    # Concatenate the three lists\n    all_nums = num1 + num2 + num3\n    # Create a min heap of all the numbers\n    heap = list(set(all_nums))\n    heapq.heapify(heap)\n    # Remove the smallest number from the heap and add it to the result list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    :param num1: first sorted list\n    :type num1: list\n    :param num2: second sorted list\n    :type num2: list\n    :param num3: third sorted list\n    :type num3: list\n    :return: merged sorted list\n    :rtype: list\n    \"\"\"\n\n    # Initialize the min heap\n    min_heap = [float('inf')] * (len(num1) + len(num2) + len(num3))\n\n    # Build the min heap\n    index = 0\n    heapq.heapify(min_heap)\n    for num in num1:\n        heapq.heappushpop(min_heap, num)\n    for num in num2:\n        heapq.heappushpop(min_heap, num)\n    for num in num3:\n        heapq.heappushpop(min_heap, num)\n\n    # Extract the elements from the heap and append to a new list\n    merged_list = []\n    while min_heap:\n        merged_list.append(heapq.heappop(min_heap))\n\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Concatenate the three lists into a single list\n    merged_list = num1 + num2 + num3\n    \n    # Create a max heap from the merged list\n    heap = []\n    for num in merged_list:\n        heapq.heappush(heap, num)\n    \n    # Extract the maximum element from the heap\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heap1 = []\n    heap2 = []\n    heap3 = []\n\n    # Convert the lists to heaps\n    for i in num1:\n        heapq.heappush(heap1, i)\n    for i in num2:\n        heapq.heappush(heap2, i)\n    for i in num3:\n        heapq.heappush(heap3, i)\n\n    # Merge the heaps\n    merged_heap = []\n    while heap1 and heap2 and heap3:\n        if heapq.heappop(heap1) <= heapq.heappop(heap2):\n            merged_heap.append(heapq.heappop(heap1))\n        else:\n            merged_heap.append(heapq.heappop(heap2))\n    merged_heap += heap1 + heap2 + heap3\n\n    # Convert the merged heap back to a list\n    return merged_heap"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Combine the three lists into a single list\n    lst = num1 + num2 + num3\n    \n    # Create a min heap to keep track of the smallest elements\n    heap = []\n    for num in lst:\n        heapq.heappush(heap, num)\n        \n    # Combine the elements in the heap into a sorted list\n    result = []\n    while heap:\n        result.append(heapq.heappop(heap))\n        \n    return result"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Check if the input is valid\n    if len(s) % 2 == 0:\n        return \"The binary string is not valid.\"\n\n    # Initialize variables for odd numbers and even numbers\n    odd_count = 0\n    even_count = 0\n\n    # Convert the binary string to a list of digits\n    binary_list = [int(digit) for digit in s]\n\n    # Iterate through the binary list and count odd numbers and even numbers\n    for digit in binary_list:\n        if digit == 0:\n            odd_count += 1\n        else:\n            even_count += 1\n\n    # Calculate the total number of rotations\n    total_rotations = n * (len(binary_list) - 1)\n\n    # Return the number of odd numbers with an odd value after rotating the binary string the given number of times\n    return (odd_count + 1) * 2 * total_rotations"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # convert the binary string to a list of digits\n    binary_list = list(bin(int(s))[2:])\n\n    # rotate the list of digits n times\n    for i in range(n):\n        binary_list.insert(0, binary_list.pop())\n\n    # count the number of odd digits\n    count = 0\n    for i in binary_list:\n        if i == '1':\n            count += 1\n\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    \"\"\"\n    # Initialize variables\n    count = 0\n    temp = 0\n    i = 0\n    \n    # Loop through the binary string s and rotate it n times\n    while i < len(s):\n        temp = s[i]\n        s = s[1:] + temp\n        i += 1\n    \n    # Loop through the rotated binary string s and count odd numbers\n    for i in range(len(s)):\n        if int(s[i]) % 2!= 0:\n            count += 1\n    \n    # Return the count of odd numbers\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return s.count('1')\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '1':\n                count += 1\n                if count > 1:\n                    return odd_Equivalent(s, n-1)\n        return odd_Equivalent(s+s, n-2)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize count variable to 0\n    count = 0\n\n    # Convert binary string to integer\n    binary_num = int(s, 2)\n\n    # Initialize a while loop to iterate n times\n    while n > 0:\n        # Check if binary number is odd\n        if binary_num % 2 == 1:\n            # Increment count variable if odd number is found\n            count += 1\n\n        # Shift binary number to the right by one bit\n        binary_num = binary_num >> 1\n\n        # Decrement n by 1\n        n -= 1\n\n    # Return the count of odd numbers after rotating\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n\n    # Check if the input string is a binary string or not\n    if not s.replace('0','').replace('1',''):\n        return \"Input string should be a binary string\"\n\n    # Find the length of the binary string\n    length = len(s)\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate n times\n    for i in range(n):\n\n        # Initialize the left and right pointers\n        left = 0\n        right = length - 1\n\n        # Swap the characters at the left and right pointers\n        s[left], s[right] = s[right], s[left]\n\n        # Find the odd value count\n        for j in range(left, right):\n            if int(s[j]) % 2!= 0:\n                count += 1\n\n        # Reverse the binary string\n        s = s[::-1]\n\n    # Return the count of odd values in the rotated string\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # initializing the count to 0\n    count = 0\n    # initializing the length of the binary string\n    len_s = len(s)\n    # finding the index of the last set bit in the binary string\n    last_set_bit = len_s - len(s.replace('0', '')).bit_length()\n    # rotating the binary string n times\n    for i in range(n):\n        # if the last set bit is 0, then the binary string is already odd\n        if last_set_bit == 0:\n            count += 1\n        # if the last set bit is 1, then the binary string is odd if and only if the (len_s - i)th character is 0\n        elif s[len_s - i] == '0':\n            count += 1\n        # if the last set bit is 1, then the binary string is odd if and only if the (len_s - i)th character is 1\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for counting odd values\n    count = 0\n    # Loop through each character in the binary string\n    for i in range(len(s)):\n        # If the current character is odd, increment the count\n        if int(s[i]) % 2!= 0:\n            count += 1\n        # If the count is equal to the number of rotations, return the count\n        if count == n:\n            return count\n    # If the count is not equal to the number of rotations, return -1 to indicate that there were not enough odd values to satisfy the condition\n    return -1"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n):\n    s = bin(int(s,2)) #convert the binary string to an integer\n    s = int(s[2:],2) #remove the leading 0b from the string\n    s = s[::-1] #reverse the string\n    s = bin(int(s,2))[2:] #convert the reversed string back to a binary string and remove the leading 0b\n    s = int(s,2) #convert the binary string back to an integer\n    count = 0\n    for i in range(1,n+1):\n        if s%2==1:\n            count+=1\n        s=(s-1)//2\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Initialize variables\n    count = 0\n    temp = ''\n    # Convert the string to a binary string\n    s = bin(int(s))[2:]\n    # Check if the length of the binary string is odd\n    if len(s) % 2!= 0:\n        # Append a 0 to the string\n        s = '0' + s\n    # Iterate through the string for n times\n    for i in range(n):\n        # Append the first character to a temporary string\n        temp = temp + s[0]\n        # Remove the first character from the string\n        s = s[1:]\n    # Iterate through the temporary string and count the odd numbers\n    for i in range(len(temp)):\n        if temp[i] == '1':\n            count += 1\n    return count"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # loop through each list in the nested list\n    for outerlist in nestedlist:\n        # loop through each element in the list\n        for elem in outerlist:\n            # check if the element is in the list of common elements\n            if elem not in common_elements:\n                common_elements.append(elem)\n\n    # return the list of common elements\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # create an empty dictionary to store the common elements\n    common_dict = {}\n\n    # loop through each sublist in the nested list\n    for sublist in nestedlist:\n        # loop through each element in the sublist\n        for element in sublist:\n            # if the element is not already in the dictionary, add it\n            if element not in common_dict:\n                common_dict[element] = 1\n\n    # return the dictionary of common elements\n    return common_dict"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # use set() to remove duplicates from nested list\n    flattened = set([item for sublist in nestedlist for item in sublist])\n    # initialize an empty set for common elements\n    common_elements = set()\n    # loop through flattened list and check if element is in common_elements\n    for item in flattened:\n        if item in common_elements:\n            common_elements.remove(item)\n        else:\n            common_elements.add(item)\n    # return list of common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common_set = set()\n\n    # Iterate through each list in the nested list\n    for sublist in nestedlist:\n        # Iterate through each element in the list\n        for elem in sublist:\n            # Add the element to the common_set if it's not already there\n            if elem not in common_set:\n                common_set.add(elem)\n\n    # Return the common_set as a list\n    return list(common_set)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Initialize an empty set to store common elements\n    common = set()\n\n    # Iterate through each list in the nested list\n    for lst in nestedlist:\n        # Iterate through each element in the current list\n        for element in lst:\n            # Add the element to the set if it's not already in there\n            if element not in common:\n                common.add(element)\n\n    # Return the list of common elements\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Check if nestedlist is a list or not\n    if isinstance(nestedlist, list):\n        # Create an empty list for common elements\n        common = []\n        # Loop through each element in the list\n        for elem in nestedlist:\n            # Check if the element is a list or not\n            if isinstance(elem, list):\n                # Check if the inner list has any elements\n                if elem:\n                    # Check if the inner list has any common elements with the outer list\n                    common.extend(common_in_nested_lists(elem))\n                else:\n                    # If there are no elements in the inner list, add an empty list to common\n                    common.append([])\n            else:\n                # If the element is not a list, check if it is in the common list\n                if elem not in common:\n                    # If it's not in the common list, add it\n                    common.append(elem)\n        # Return the common elements\n        return common\n    else:\n        # If the nestedlist is not a list, return an empty list\n        return []"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Initialize an empty set to store common elements\n    common = set()\n    # Iterate over each nested list in the input list\n    for lst in nestedlist:\n        # Iterate over each element in the nested list\n        for elem in lst:\n            # If the element is already in the set, add it to the result list\n            if elem in common:\n                common.add(elem)\n    # Convert the set to a list and return it\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for i in range(len(nestedlist)):\n        if len(set(nestedlist[i])) > 1:\n            common_list += nestedlist[i]\n    return common_list"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            common = set(nestedlist[i]).intersection(set(nestedlist[j]))\n            if common:\n                common_elements.append(list(common))\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # Remove any non-numeric characters from the string\n    text = ''.join(char for char in text if char.isdigit())\n\n    # Check if the string is an integer\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if not i:\n            return True\n    return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)!= 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    \"\"\"\n    for i in list1:\n        if not i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dictionary in list1:\n        if len(dictionary) > 0:\n            return False\n    return True"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    This function takes a tuple of positive integers as input and returns a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert tuple to list\n    nums_list = list(nums)\n    # initialize variable for sum of integers\n    sum_integers = 0\n    # iterate through list and add each integer to sum\n    for num in nums_list:\n        sum_integers += num\n    # return sum of integers\n    return sum_integers"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # convert the tuple to a list and then sum the integers in the list\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], str):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    test_list[i][j] = None\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (int, float)):\n                test_list[i][j] = float(test_list[i][j])"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for element in row:\n            try:\n                element = float(element)\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                continue\n            else:\n                element = float(element)\n        test_list.remove(sublist)\n        test_list.append(element)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Check if the input is a list of lists\n    if not isinstance(test_list, list):\n        raise TypeError('Input must be a list of lists.')\n    \n    # Iterate through each sublist and check if each element can be converted to a float\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                raise TypeError(f'Cannot convert element {item} to float.')\n    \n    # Iterate through each sublist and convert each element to a float\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                # Check if the item is a string and if it contains a valid float\n                if isinstance(item, str) and item.replace('.', '', 1).isdigit():\n                    float(item.replace('.', '', 1))\n                else:\n                    raise ValueError(f'Cannot convert element {item} to float.')\n    \n    # Return the modified list of lists\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                try:\n                    float(str(item))\n                except ValueError:\n                    continue\n            else:\n                if isinstance(item, float):\n                    continue\n                else:\n                    item = float(item)\n                    if isinstance(item, float):\n                        sublist.remove(item)\n                        sublist.append(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n\n    :param test_list: a list of lists\n    :return: a list of floats\n    \"\"\"\n\n    # create a list to store the converted elements\n    converted_list = []\n\n    # iterate over each element in the list\n    for element in test_list:\n        # check if the element is convertible to a float\n        try:\n            converted_float = float(element)\n            # if the conversion was successful, add the converted float to the list\n            converted_list.append(converted_float)\n        except ValueError:\n            # if the conversion was not successful, leave the element as it is in the list\n            pass\n\n    return converted_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if isinstance(test_list[i][j], (str, int, float)):\n                try:\n                    test_list[i][j] = float(test_list[i][j])\n                except ValueError:\n                    print(f\"Error converting {test_list[i][j]} to float.\")"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Loop through the list of lists\n    for sub_list in test_list:\n        # Loop through the sublist and convert convertible elements to floats\n        for i in range(len(sub_list)):\n            try:\n                sub_list[i] = float(sub_list[i])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the list of resulting strings\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character\n    string_list = string.split()\n    # Return the list of strings\n    return string_list"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # convert string to a list of characters\n    chars = list(string)\n    \n    # initialize empty list to store the substrings\n    substrings = []\n    \n    # iterate over the characters in the string\n    for char in chars:\n        # if the current character is a space, add the previous substring to the list and start a new one\n        if char =='':\n            substrings.append(''.join(chars[:chars.index(char)]))\n            # remove the space and continue iterating over the rest of the characters\n            del chars[:chars.index(char)]\n            continue\n        \n        # add the current character to the substring\n        substrings[-1] += char\n    \n    # add the last substring to the list\n    substrings.append(''.join(chars))\n    \n    return substrings"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = {}\n    for i in arr:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    for key, value in count.items():\n        if value == 1:\n            return key\n\n    return None\n"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    if len(arr) < 2:\n        return \"Array should have at least two elements\"\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Iterate over each element in the array\n    for num in arr:\n        # If the element is already in the dictionary, increment its frequency\n        if num in freq:\n            freq[num] += 1\n        # If the element is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[num] = 1\n\n    # Iterate over each element in the dictionary\n    for key, value in freq.items():\n        # If the frequency of the element is 1, return it\n        if value == 1:\n            return key\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        if i == 0 or arr[i]!= arr[i - 1]:\n            for j in range(i + 1, n):\n                if arr[i] == arr[j]:\n                    return arr[i]\n    return \"Element not found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    # Initialize a variable to store the element that appears only once\n    unique = None\n\n    # Iterate through the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the frequency dictionary to find the element that appears only once\n    for num in freq:\n        if freq[num] == 1:\n            unique = num\n            break\n\n    # Return the unique element\n    return unique"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create an empty dictionary to store the element and its frequency\n    freq_dict = {}\n    # iterate through the array and update the frequency of each element\n    for num in arr:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # iterate through the dictionary and return the key with a frequency of 1\n    for key, value in freq_dict.items():\n        if value == 1:\n            return key"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n    \n    # Iterate through the array and update the frequency of each element in the dictionary\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the dictionary and return the first element that appears only once\n    for num, count in freq.items():\n        if count == 1:\n            return num\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    # Initialize variables\n    unique_element = None\n    count = 0\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        # Check if the current element is equal to the unique element\n        if arr[i] == unique_element:\n            # Increment the count of the unique element\n            count += 1\n        else:\n            # Reset the count of the unique element\n            count = 1\n            # Set the unique element to the current element\n            unique_element = arr[i]\n\n    # Check if the unique element was found only once\n    if count == 1:\n        return unique_element\n    else:\n        return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n\n    # Initialize a dictionary to store the frequency of each element in the array\n    freq = {}\n\n    # Traverse the array and count the frequency of each element\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Traverse the array again to find the element that appears only once\n    for num in arr:\n        if freq[num] == 1:\n            return num\n\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Initialize index of the first occurrence of the element\n    index = 0\n\n    # Initialize the last index\n    last_index = len(arr) - 1\n\n    # Iterate through the array\n    for i in range(last_index):\n        # If the current element is equal to the element at index i, increment count and move the index\n        if arr[i] == arr[i + 1]:\n            count += 1\n            index = i + 1\n\n        # If count reaches 2, return the element at index\n        if count == 2:\n            return arr[index]\n\n        # If the count becomes 1, move the index to the next element\n        elif count == 1:\n            index = i + 1\n\n        # Reset count and index if the element at index is not equal to the element at index i\n        else:\n            count = 0\n            index = i + 1\n\n    # If the loop completes without finding the element, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # create a dictionary to store the count of each element in the array\n    count_dict = {}\n    for i in range(len(arr)):\n        if arr[i] in count_dict:\n            count_dict[arr[i]] += 1\n        else:\n            count_dict[arr[i]] = 1\n\n    # create a list of tuples containing the element and its count in the array\n    count_list = [(k, v) for k, v in count_dict.items()]\n\n    # sort the list of tuples based on the count in descending order\n    count_list.sort(key=lambda x: x[1], reverse=True)\n\n    # find the element that appears only once in the array\n    if len(count_list) == 1:\n        result = count_list[0][0]\n    else:\n        result = None\n\n    return result"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    # Iterate over the list of tuples\n    for i in range(len(list1)):\n        # Iterate over the remaining indices of the current tuple\n        for j in range(i+1, len(list1)):\n            # Calculate the absolute product of the numbers in the current tuple\n            current_product = abs(list1[i][0] * list1[j][0])\n            # Calculate the maximum absolute product so far\n            max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if abs(product) > abs(max_product):\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Initialize variables to store maximum product and current product\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Calculate the absolute difference between the current and next tuple in the list\n        diff = abs(list1[i][0] - list1[i+1][0])\n        \n        # Update the maximum product if the current product is greater than the absolute difference\n        if current_product > diff:\n            max_product = current_product\n        \n        # Update the current product by multiplying the current tuple and the next tuple in the list\n        current_product = list1[i][1] * list1[i+1][1]\n    \n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            pair_product = abs(list1[i][0] * list1[j][1])\n            if pair_product > max_product:\n                max_product = pair_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            temp_product = abs(list1[i][0]*list1[j][1])\n            if temp_product > max_product:\n                max_product = temp_product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i] * list1[j])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    This function takes a list of tuples and returns the maximum absolute product of numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = float('-inf')\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = max(abs(list1[i][0]*list1[j][1]), abs(list1[i][1]*list1[j][0]))\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n\n    max_product = 0\n    max_pair = None\n\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            if product > max_product:\n                max_product = product\n                max_pair = (list1[i][0], list1[j][1])\n\n    return max_pair"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_amicable(num):\n    if num < 2:\n        return False\n    a, b = 0, 0\n    for i in range(1, num):\n        if num % i == 0:\n            a = i\n        elif num // i == i:\n            b = i\n        if a!= 0 and b!= 0:\n            return True\n    return False\n\ndef sum_amicable_numbers(limit):\n    amicable_sum = 0\n    for num in range(1, limit):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    # Create a list of all numbers from 1 to the specified limit\n    nums = list(range(1, limit+1))\n\n    # Create an empty list to store the amicable numbers\n    amicable = []\n\n    # Loop through the list and check if each number is amicable\n    for num in nums:\n        if num == sum(set(nums) - {num}):\n            amicable.append(num)\n\n    # Return the sum of all amicable numbers\n    return sum(amicable)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    '''\n    A function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit-i):\n            total += i + limit-i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(n):\n    \"\"\"\n    Returns True if n is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_amicable_numbers(limit):\n    \"\"\"\n    Returns the sum of all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit - i):\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n\ndef amicable_numbers_sum(limit):\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_amicable(num1, num2):\n    '''\n    Helper function to check if two numbers are amicable.\n    '''\n    return num2 == num1 // num2 and num2!= num1\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        if is_amicable(num, sum(num_set)):\n            amicable_sum += num\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        is_amicable = True\n        for j in range(1, i):\n            if i % j == 0:\n                is_amicable = False\n                break\n        if is_amicable:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    This function takes a number as input and returns the sum of all amicable numbers from 1 to that number.\n    \"\"\"\n    # Create a dictionary to store the sum of each pair of amicable numbers\n    amicable_dict = {}\n    \n    # Check if a number is prime or not\n    def is_prime(num):\n        \"\"\"\n        This function checks if a number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                return False\n        return True\n    \n    # Calculate the sum of each pair of amicable numbers and store them in the dictionary\n    for num in range(1, limit+1):\n        if is_prime(num):\n            for i in range(1, limit+1):\n                if is_prime(i) and (num + i) in amicable_dict:\n                    amicable_dict[(num + i)] += 1\n    \n    # Sum all the values in the dictionary\n    total = 0\n    for key in amicable_dict.keys():\n        total += amicable_dict[key]\n    \n    return total"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a list to store all the amicable numbers\n    amicable_numbers = []\n    \n    # Loop through numbers from 2 to the specified limit\n    for i in range(2, limit + 1):\n        \n        # Check if the number is amicable by checking if it's divisible by any number from 2 to the square root of the number\n        for j in range(2, int(i**0.5) + 1):\n            \n            # If the number is divisible by any of these numbers, it's not amicable\n            if i % j == 0:\n                break\n        else:\n            # If the number is not divisible by any of these numbers, it's amicable and can be added to the list\n            amicable_numbers.append(i)\n            \n    # Return the sum of all amicable numbers\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # initializing two variables to store the sum and the number being checked\n    total = 0\n    num = 2\n    \n    while num <= limit:\n        # checking if the number is amicable or not\n        if is_amicable(num):\n            # adding the amicable number to the total sum\n            total += num\n        # incrementing the number being checked\n        num += 1\n    \n    # returning the total sum\n    return total\n\ndef is_amicable(num):\n    '''\n    Write a function to check if a given number is amicable or not.\n    '''\n    # initializing two variables to store the sum of proper divisors and the number being checked\n    sum_of_proper_divisors = 0\n    checked_num = num\n    \n    # checking if the number is divisible by 2\n    if checked_num % 2 == 0:\n        checked_num /= 2\n    else:\n        checked_num = checked_num - 1\n    \n    while checked_num > 1:\n        # checking if the number is divisible by the current divisor\n        if checked_num % 2 == 0:\n            checked_num /= 2\n        else:\n            checked_num = checked_num - 1\n        sum_of_proper_divisors += checked_num\n    \n    # checking if the sum of proper divisors equals the given number\n    if sum_of_proper_divisors == num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize a dictionary to store the factors of each number\n    factor_dict = {}\n    \n    # Create a function to check if a number is amicable\n    def is_amicable(num):\n        # Check if the number is already in the dictionary\n        if num in factor_dict:\n            # Check if the number of its factors is greater than 2\n            if len(factor_dict[num]) > 2:\n                # Check if the sum of the factors is equal to the number itself\n                if sum(factor_dict[num]) == num:\n                    return True\n        return False\n    \n    # Create a function to calculate the factors of a number\n    def calculate_factors(num):\n        # If the number is already in the dictionary, return the stored values\n        if num in factor_dict:\n            return factor_dict[num]\n        # Otherwise, calculate the factors and store them in the dictionary\n        factors = []\n        i = 1\n        while i * i <= num:\n            if num % i:\n                i += 1\n            else:\n                num //= i\n                factors.append(i)\n                if num == 1:\n                    break\n        factors.append(num)\n        factor_dict[num] = factors\n        return factors\n    \n    # Create a function to sum the amicable numbers\n    def sum_amicable_numbers(limit):\n        amicable_sum = 0\n        for num in range(1, limit+1):\n            if is_amicable(num):\n                amicable_sum += num\n        return amicable_sum\n    \n    # Call the sum_amicable_numbers function and return the result\n    return sum_amicable_numbers(limit)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # calculate the angle of the complex number using the cmath module\n    angle = cmath.phase(a + b * 1j)\n    \n    # convert the angle to degrees and return it\n    return angle.real * 180 / cmath.pi"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a**2 + b**2)\n\n    # Calculate the angle of the complex number\n    angle = cmath.phase(complex(modulus, 0))\n\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    This function takes in two complex numbers a+bi and b+bi as input and returns the angle of the complex number in degrees.\n    '''\n    # Calculate the modulus of the complex number\n    modulus = cmath.sqrt(a*a + b*b)\n\n    # Calculate the angle of the complex number in radians\n    angle = cmath.phase(modulus)\n\n    # Convert the angle from radians to degrees\n    angle_deg = angle*180/cmath.pi\n\n    return round(angle_deg, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return round(angle, 3)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    angle = cmath.phase(a+b*1j) # use the complex conjugate to obtain the angle in radians\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes two complex numbers as input and returns the angle of the complex number in radians.\n    \"\"\"\n    angle = cmath.phase(a + b * 1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    \"\"\"\n    return cmath.phase(complex(a,b))"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a + b * 1j)\n    return round(angle, 2)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    # calculate the complex number\n    c = a + b * 1j\n\n    # get the angle using the cmath module\n    angle = cmath.phase(c)\n\n    # return the angle as a float value\n    return angle.real\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n\n    for char in string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    zeros = 0\n    ones = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        elif string[i] == '1':\n            ones += 1\n        else:\n            if zeros > ones:\n                zeros -= 1\n            else:\n                ones -= 1\n            diff = abs(zeros - ones)\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        count_0 = string[:i].count('0')\n        count_1 = string[:i].count('1')\n        diff = abs(count_0 - count_1)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n\n    # Convert the binary string to a list of characters\n    binary_string = list(string)\n\n    # Initialize the maximum difference and the current sub-string\n    max_diff = 0\n    current_sub_string = []\n\n    # Iterate through the binary string\n    for i in range(len(binary_string)):\n        # If the current character is a 0, add it to the current sub-string\n        if binary_string[i] == '0':\n            current_sub_string.append(0)\n        # If the current character is a 1, check if the difference between the number of 0s and number of 1s in the sub-string is greater than the current maximum difference\n        elif binary_string[i] == '1':\n            if len(current_sub_string) == 0:\n                current_sub_string.append(1)\n            elif len(current_sub_string) == 1:\n                current_sub_string.append(0)\n            else:\n                sub_string_0s = current_sub_string.count(0)\n                sub_string_1s = current_sub_string.count(1)\n                current_sub_string = []\n                if sub_string_0s > sub_string_1s:\n                    current_sub_string.append(0)\n                else:\n                    current_sub_string.append(1)\n            if current_sub_string[-1] == 0:\n                current_sub_string[-1] = 1\n            else:\n                current_sub_string[-1] = 0\n            diff = len(current_sub_string) - len(binary_string)\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    n = len(string)\n    max_diff = 0\n    \n    for i in range(n):\n        count_0s = 0\n        count_1s = 0\n        for j in range(i, n):\n            if string[j] == '0':\n                count_0s += 1\n            else:\n                count_1s += 1\n            diff = abs(count_0s - count_1s)\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    length = len(string)\n    max_diff = 0\n    \n    for i in range(length):\n        count_0 = 0\n        count_1 = 0\n        \n        for j in range(i, length):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n                \n            diff = abs(count_0 - count_1)\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(length):\n        if string[i] == '0':\n            count_0 += 1\n            if count_1 > 0:\n                max_diff = max(max_diff, count_0 - count_1)\n                count_1 = 0\n        else:\n            count_1 += 1\n            if count_0 > 0:\n                max_diff = max(max_diff, count_1 - count_0)\n                count_0 = 0\n    if count_0 > 0:\n        max_diff = max(max_diff, length - count_0)\n    if count_1 > 0:\n        max_diff = max(max_diff, length - count_1)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    count_0 = count_1 = 0\n    max_diff = 0\n    for char in string: \n        if char == '0': \n            count_0 += 1 \n            max_diff = max(max_diff, count_1 - count_0) \n        else: \n            count_1 += 1 \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string):\n    count = 0\n    max_diff = 0\n    \n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count = 0\n        \n        diff = count - i - 1\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string): \n    # Initialize variables\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    # Loop through each character in the string\n    for char in string: \n        # If the character is a 0, increment the count of 0s\n        if char == '0': \n            count_0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1': \n            count_1 += 1\n        # If the count of 0s is greater than the count of 1s, update max_diff\n        if count_0 > count_1: \n            max_diff = max(max_diff, count_0 - count_1)\n        # If the count of 1s is greater than the count of 0s, update max_diff\n        elif count_1 > count_0: \n            max_diff = max(max_diff, count_1 - count_0)\n        # Reset count_0 and count_1 for each loop iteration\n        count_0 = 0\n        count_1 = 0\n\n    # Return the maximum difference between the number of 0s and number of 1s in any sub-string\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = [x for x in range(1, b+1) if b % x == 0]\n    sum_divisors = sum([x for x in divisors if x in range(a, b+1)])\n    return sum_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_divisors(num1, num2):\n    \"\"\"\n    This function finds the common divisors of two given numbers.\n    \"\"\"\n    # Finding the set of factors of the first number\n    factors1 = set([i for i in range(1, num1+1) if num1 % i == 0])\n    # Finding the set of factors of the second number\n    factors2 = set([i for i in range(1, num2+1) if num2 % i == 0])\n    # Finding the intersection of the sets of factors\n    common_factors = factors1.intersection(factors2)\n    # Finding the sum of the common factors\n    return sum(common_factors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_common_divisors(num1, num2):\n    '''\n    This function finds the sum of common divisors of two given numbers.\n    '''\n    divisors1 = find_divisors(num1)\n    divisors2 = find_divisors(num2)\n    common_divisors = [x for x in divisors1 if x in divisors2]\n    return sum(common_divisors)\n\ndef find_divisors(num):\n    '''\n    This function finds all the divisors of a given number.\n    '''\n    divisors = []\n    for i in range(1, num+1):\n        if num % i == 0:\n            divisors.append(i)\n    return divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1,a+1):\n        if a%i == 0 and b%i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Initialize a list to store the common divisors of a and b\n    common_divisors = []\n    # Loop through all possible divisors of a\n    for i in range(1, a+1):\n        # Check if i is a common divisor of a and b\n        if a % i == 0 and b % i == 0:\n            # Add i to the list of common divisors\n            common_divisors.append(i)\n    \n    # Calculate the sum of the common divisors\n    sum_of_common_divisors = sum(common_divisors)\n    \n    # Return the sum of the common divisors\n    return sum_of_common_divisors"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n    \"\"\"\n    # Initialize a set to store the divisors of a and b\n    divisors = set()\n    # Loop through all the numbers from 1 to the smaller number\n    for i in range(1, min(a, b) + 1):\n        # Check if i is a divisor of both a and b\n        if i % a == 0 and i % b == 0:\n            # If it is, add it to the set of divisors\n            divisors.add(i)\n    # Find the sum of the divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_common_divisors(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of their common divisors.\n    \"\"\"\n    # Use a set to store the unique divisors of the two numbers\n    divisors = set()\n    \n    # Find the unique divisors of the two numbers\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.add(i)\n    \n    # Return the sum of the unique divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    while True:\n        if a % i == 0 and b % i == 0:\n            print(i)\n            break\n        i += 1"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def gcd(a, b):\n        \"\"\"\n        Recursive function to find the greatest common divisor of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def is_common_divisor(a, b, d):\n        \"\"\"\n        Function to check if a number is a common divisor of a, b and d.\n        \"\"\"\n        return d % gcd(a, b) == 0\n\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if is_common_divisor(a, b, i):\n            common_divisors.append(i)\n\n    return sum(common_divisors)"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = x * y\n    print(f'{x} x {y} = {result}')"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    while y > 0:\n        if y % 2 == 1:\n            result += x\n        x <<= 1\n        y >>= 1\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    This function takes two integer numbers as input and returns their multiplication as output.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n\n    # Split the string into words and store them in a list\n    words = str.split()\n\n    # Create an empty list to store the words that are longer than n characters\n    long_words_list = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the current word is longer than n\n        if len(word) > n:\n            # Append the current word to the list of long words\n            long_words_list.append(word)\n\n    # Return the list of long words\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into a list of words\n    long_words = [word for word in words if len(word) > n] # filter out words that are shorter than n characters and return the filtered list\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): the maximum length of words to be considered.\n    words (list of str): the list of words to search.\n\n    Returns:\n    list of str: the list of words that are longer than n characters.\n    \"\"\"\n\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    return [word for word in words if len(word) > n]"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    magic_sum = 15\n    \n    for i in range(n):\n        # Check rows\n        for j in range(n):\n            if my_matrix[i][j]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check columns\n        for j in range(n):\n            if my_matrix[j][i]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check the diagonal\n        for i0, j0 in [(0, 0), (0, n-1), (n-1, 0), (n-1, n-1)]:\n            if my_matrix[i0][j0]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n        \n        # Check the reverse diagonal\n        for i0, j0 in [(0, n-1), (0, 0), (n-1, n-1), (n-1, 0)]:\n            if my_matrix[i0][j0]!= magic_sum:\n                return False\n            \n            # Calculate the sum of the magic square\n            magic_sum -= 1\n    \n    # If we make it through the loop without returning False, then the matrix is a magic square\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    # check if the matrix is a square matrix\n    if n!= len(my_matrix[0]):\n        return False\n    # check if the diagonal elements are unique\n    for i in range(n):\n        if my_matrix[i][i]!= my_matrix[i][n-i-1] or my_matrix[i][n-i-1]!= my_matrix[i][i]:\n            return False\n    # check if each row, column, and 3x3 block are unique\n    for i in range(n):\n        row = set([my_matrix[j][i] for j in range(n)])\n        col = set([my_matrix[i][j] for j in range(n)])\n        block = set([my_matrix[k][l] for k in range(i, i+3) for l in range(j, j+3)])\n        if len(row)!= len(col) or len(col)!= len(block) or len(block)!= len(set(row) | set(col) | set(block)):\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    # Check the dimensions of the matrix\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows!= cols:\n        return \"Matrix must be square\"\n    \n    # Check if the matrix is a magic square\n    magic_sum = rows**2 + cols**2\n    if sum(sum(row) for row in my_matrix) == magic_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has 3 rows and 3 columns\n    if len(my_matrix)!= 3:\n        return False\n\n    # Check if the matrix has exactly 9 integers\n    if len(my_matrix[0])!= 3 or len(my_matrix[1])!= 3 or len(my_matrix[2])!= 3:\n        return False\n\n    # Check if the matrix has exactly 9 integers\n    if sum(len(row) for row in my_matrix)!= 9:\n        return False\n\n    # Check if the matrix has all integers\n    for row in my_matrix:\n        if not all(isinstance(num, int) for num in row):\n            return False\n\n    # Check if the matrix contains all 1s and 2s\n    for row in my_matrix:\n        row_sum = sum(row)\n        col_sum = sum(my_matrix[j][i] for j in range(3) for i in range(3))\n        if row_sum!= 15 or col_sum!= 15:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n    n = len(my_matrix)\n    row_sums = [0] * n  # Initialize a list of row sums\n    col_sums = [0] * n  # Initialize a list of column sums\n    box_sums = [0] * n  # Initialize a list of box sums\n    \n    # Calculate row and column sums\n    for i in range(n):\n        row_sums[i] = sum(my_matrix[i])\n        col_sums[i] = sum(row_sums)\n    \n    # Calculate box sums\n    for i in range(n):\n        for j in range(n):\n            box_start_i = i // 3 * 3\n            box_start_j = j // 3 * 3\n            box_sums[i] += sum(my_matrix[box_start_i + k][box_start_j + k] for k in range(3))\n    \n    # Compare row and column sums and box sums to see if they form a magic square\n    for i in range(n):\n        if row_sums[i]!= col_sums[i] or row_sums[i]!= box_sums[i] or col_sums[i]!= box_sums[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    This function takes a matrix as input and returns True if it's a magic square,\n    False otherwise. A magic square is a square matrix where the sum of the diagonal\n    elements is the same as the sum of the off-diagonal elements.\n\n    >>> magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> magic_square_test([[4, 9, 2], [3, 5, 7], [8, 1, 6]])\n    True\n    >>> magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    False\n    >>> magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 0]])\n    False\n    \"\"\"\n    n = len(my_matrix)\n    # Check that the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n    # Calculate the sum of the diagonal elements\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    # Calculate the sum of the off-diagonal elements\n    off_diagonal_sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                off_diagonal_sum += my_matrix[i][j]\n    # Check if the diagonal sum is equal to the off-diagonal sum\n    return diagonal_sum == off_diagonal_sum"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # check if all elements in the matrix are distinct\n    for row in my_matrix:\n        if len(set(row))!= len(row):\n            return False\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j] == i+j+1:\n                return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    total = rows * cols\n    sum_matrix = [0] * total\n    \n    for i in range(rows):\n        for j in range(cols):\n            sum_matrix[i*cols + j] = my_matrix[i][j]\n            \n    for i in range(1, total):\n        if sum_matrix[i]!= i:\n            return False\n            \n    for i in range(rows):\n        for j in range(cols):\n            if my_matrix[i][j]!= sum_matrix[i*cols + j]:\n                return False\n                \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix is a square\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Calculate the sum of all elements in the matrix\n    total_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the sum of all elements is equal to 0\n    if total_sum == 0:\n        return True\n    \n    # Check if the sum of all elements is equal to the product of the matrix dimensions\n    if total_sum == sum(range(1, len(my_matrix)+1)) * len(my_matrix):\n        return True\n    \n    # Check if the sum of the diagonal elements is equal to the product of the matrix dimensions\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum == sum(range(1, len(my_matrix)+1)) * len(my_matrix):\n        return True\n    \n    return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n\n    # create a list of the rows in the matrix\n    rows = [row for row in my_matrix]\n\n    # create a list of the columns in the matrix\n    cols = [row[i] for row in my_matrix for i in range(len(row))]\n\n    # create a list of the sub-matrices in the matrix\n    subs = [[my_matrix[i][j] for i in range(len(my_matrix))] for j in range(len(my_matrix))]\n\n    # check if the rows, columns, and sub-matrices are magic squares\n    for row in rows:\n        if sum(row)!= 0:\n            return False\n    for col in cols:\n        if sum(col)!= 0:\n            return False\n    for sub in subs:\n        if sum(sub)!= 0:\n            return False\n\n    # check if the matrix is a magic square\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix)):\n            if my_matrix[i][j]!= (i+j+1):\n                return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    \n    max_freq = max(freq.values())\n    max_item = None\n    \n    for num in nums:\n        if freq[num] == max_freq:\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a defaultdict to store the count of each item\n    count = defaultdict(int)\n\n    # iterate through the list and update the count for each item\n    for num in nums:\n        count[num] += 1\n\n    # find the item with the maximum count\n    max_num = None\n    max_count = 0\n    for num, count in count.items():\n        if count > max_count:\n            max_num = num\n            max_count = count\n\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    \n    # get the maximum frequency of any item in the list\n    max_freq = max(freq_dict.values())\n    \n    # create a dictionary to store the maximum frequency of each item\n    max_freq_dict = {}\n    for num in freq_dict:\n        if freq_dict[num] == max_freq:\n            max_freq_dict[num] = max_freq\n    \n    # find the item with maximum frequency in the list\n    max_occurrence = None\n    for item in max_freq_dict:\n        if max_occurrence is None or max_freq_dict[item] > max_freq_dict[max_occurrence]:\n            max_occurrence = item\n    \n    return max_occurrence"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # create a dictionary to store the frequency of each item in the list\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n\n    # create a list to store the items with their frequencies\n    items = [(item, freq_dict[item]) for item in freq_dict]\n\n    # sort the items by their frequencies in descending order\n    items.sort(key=lambda x: x[1], reverse=True)\n\n    # return the item with the highest frequency\n    return items[0][0]"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    This function takes a list of integers as input and returns the item with the maximum frequency in the list.\n    '''\n    freq = defaultdict(int)\n    max_num = 0\n    \n    # counting the frequency of each element in the list\n    for num in nums:\n        freq[num] += 1\n    \n    # finding the item with the maximum frequency\n    for num in freq:\n        if freq[num] > max_num:\n            max_num = freq[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    for num in nums:\n        freq_map[num] += 1\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Use a dictionary to store the count of each item in the list\n    item_counts = defaultdict(int)\n    for num in nums:\n        item_counts[num] += 1\n\n    # Find the item with the maximum count\n    max_count = 0\n    max_item = None\n    for item, count in item_counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    # Return the item with the maximum count\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_freq = 0\n    max_item = None\n    \n    for num in nums:\n        count[num] += 1\n        \n        if count[num] > max_freq:\n            max_freq = count[num]\n            max_item = num\n    \n    return max_item"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = []\n    for char in str1:\n        if char in vowels:\n            vowel_list.append(char)\n    vowel_list.reverse()\n    return ''.join(vowel_list)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n        else:\n            reversed_str += char\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result = char + result\n        else:\n            result = result + char\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_string = []\n    for char in string:\n        if char in vowels:\n            new_string.append(char)\n    new_string = ''.join(new_string[::-1])\n    return new_string"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    reversed_string = []\n\n    for char in string:\n        if char not in vowels:\n            reversed_string.append(char)\n\n    return ''.join(reversed_string)\n"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    reversed_str = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] in vowels:\n            reversed_str = str1[i] + reversed_str\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    reversed_str = ''\n    for char in str1:\n        if char in vowels:\n            reversed_str = char + reversed_str\n            vowel_count += 1\n        else:\n            reversed_str += char\n    return reversed_str, vowel_count"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    new_str = \"\"\n    for char in str1:\n        if char not in vowels:\n            new_str += char\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_str = []\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            new_str.append(str1[i])\n    return new_str[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowel_reverse = \"\"\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            vowel_reverse += str1[i]\n    return vowel_reverse"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return '(' + ', '.join(str(elem) for elem in tup) + ')'"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a list\n    lst = list(tup1)\n    # convert the list to a string\n    return ', '.join(str(x) for x in lst)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ','.join(str(i) for i in tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = ''\n    for i in range(len(tup1)):\n        str1 += str(tup1[i]) +''\n    return str1.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Convert a tuple to a string.\n    \"\"\"\n    # Convert the tuple to a string using the built-in str() function\n    return str(tup1)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    \"\"\"\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # Initialize a variable to store the sum of negative numbers\n    sum_neg = 0\n    \n    # Iterate over each number in the list\n    for num in nums:\n        # If the number is negative, add it to the sum\n        if num < 0:\n            sum_neg += num\n    \n    # Return the sum of negative numbers\n    return sum_neg"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n+1) // 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * n * (n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Base case: if n is 0 or 1, the hexagonal number is 1\n    if n == 0 or n == 1:\n        return 1\n    \n    # Initialize the first two hexagonal numbers\n    hexagonal1 = 1\n    hexagonal2 = 6\n    \n    # Calculate the nth hexagonal number by adding the nth triangular number to the previous two\n    for i in range(2, n+1):\n        hexagonal = hexagonal1 + hexagonal2\n        hexagonal1 = hexagonal2\n        hexagonal2 = hexagonal\n        \n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # base cases \n    if n == 1: \n        return 1 \n    elif n == 2: \n        return 6 \n    elif n == 3: \n        return 21 \n    elif n == 4: \n        return 72 \n    elif n == 5: \n        return 243 \n    elif n == 6: \n        return 840\n\n    # recursive case \n    else: \n        return hexagonal_num(n-1) + hexagonal_num(n-2) "
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # The hexagonal number is a triangular number\n    triangular_num = (5 * n * n) // 2\n\n    # The nth hexagonal number is the sum of the triangular number and the square of the triangular number\n    return triangular_num + triangular_num ** 2"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 6\n    elif n == 3:\n        return 21\n    else:\n        return hexagonal_num(n-1) + hexagonal_num(n-2) - hexagonal_num(n-3)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initializing the first two hexagonal numbers\n    hex1 = 1\n    hex2 = 1\n\n    # Looping to find the nth hexagonal number\n    for i in range(2, n + 1):\n        # Calculating the current hexagonal number\n        hex_num = (3 * hex1 ** 2) - (2 * hex2)\n\n        # Updating the first two hexagonal numbers\n        hex1 = hex_num\n        hex2 = (3 * hex1 ** 2) - (2 * hex2)\n\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return ((2 * n * (n + 1)) ** 0.5) + 1"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n - 1) * hexagonal_num(n - 1) + 2 * hexagonal_num(n - 2)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n * (2 * n - 1))"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0])\n    non_zeros = array('i', [0])\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1)\n        else:\n            non_zeros.append(1)\n\n    zero_count = zeros.itemsize / non_zeros.itemsize\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = array('i', [0]*len(nums)) # initialize an array of zeros of length equal to the length of nums\n\n    for num in nums:\n        if num == 0:\n            zeros.append(1) # if a number is zero, increment the corresponding element of the array of zeros\n        else:\n            zeros.append(0) # otherwise, decrement the corresponding element of the array of zeros\n\n    non_zeros_count = len(nums) - sum(zeros) # count the number of non-zero elements in the array\n    zero_ratio = non_zeros_count / len(nums) # calculate the ratio of zeroes to non-zeroes\n\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    num_zeros = 0\n    num_nonzeros = 0\n\n    for num in nums:\n        if num == 0:\n            num_zeros += 1\n        else:\n            num_nonzeros += 1\n\n    return num_zeros / num_nonzeros"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    ratio = zeros / non_zeros\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = sum([1 for num in nums if num!= 0])\n    zero_count = len(nums) - non_zero_count\n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Create a new array of same size as original array to store zero count\n    count_arr = array('i', [0]*len(nums))\n\n    # Iterate over the original array\n    for num in nums:\n        # Increment the corresponding element in count array by 1 if it's not 0\n        if num!= 0:\n            count_arr[num] += 1\n\n    # Calculate the ratio of zeroes to non-zeroes and return the result\n    zeros = sum(count_arr[:])\n    ones = len(nums) - zeros\n    return zeros / ones"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    \"\"\"\n    num_zeroes = 0\n    num_ones = 0\n    for num in nums:\n        if num == 0:\n            num_zeroes += 1\n        else:\n            num_ones += 1\n\n    ratio = 0 if num_zeroes == 0 else num_ones / num_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeros = 0\n    non_zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    zero_ratio = zeros / non_zeros if non_zeros!= 0 else 0\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    nums = list(nums)\n    # Initialize variables for zero and non-zero counts\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the list\n    for num in nums:\n        # Check if the number is zero\n        if num == 0:\n            # Increment the zero count\n            zero_count += 1\n        else:\n            # Increment the non-zero count\n            non_zero_count += 1\n    # Calculate the ratio of zero to non-zero values\n    zero_ratio = (zero_count / non_zero_count) if non_zero_count!= 0 else 0\n    # Return the ratio as a float rounded to 2 decimal places\n    return round(zero_ratio, 2)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list so that we can manipulate it directly\n    nums = list(nums)\n    \n    # Find the total number of elements in the array\n    total = len(nums)\n    \n    # Count the number of zeroes\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zeroes / total\n    \n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return True\n    elif n % 2 == 0:\n        return is_Sum_Of_Powers_Of_Two(n//2)\n    else:\n        if n % 4 == 0:\n            return False\n        elif n % 8 == 0:\n            return False\n        elif n % 16 == 0:\n            return False\n        else:\n            return is_Sum_Of_Powers_Of_Two(n+1)"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    max_sum = 0\n    for i in range(2, int(n**0.5)+1):\n        while n % i == 0:\n            n //= i\n            max_sum += i\n    if n > 1:\n        max_sum += n\n    return max_sum == n"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n\n    power_of_two = 1\n    sum_of_powers = 0\n\n    while n > 0:\n        # calculate the next power of two\n        power_of_two <<= 1\n\n        # check if the number is equal to the sum of powers of 2\n        if n == power_of_two:\n            return True\n\n        # check if the number is greater than the sum of powers of 2\n        if n > power_of_two:\n            sum_of_powers += power_of_two\n            n -= power_of_two\n\n        # update the power_of_two to the next power of two\n        power_of_two <<= 1\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    count = 0 # initialize count to zero\n    while n > 0: # while n is greater than zero\n        if n & 1 == 1: # if the last bit of n is 1\n            return False # return False as the number cannot be represented as sum of non-zero powers of 2\n        n = n >> 1 # shift right to divide by 2\n        count += 1 # increment count by 1\n    return count >= 2 # if count is greater than or equal to 2, then the number can be represented as sum of non-zero powers of 2"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            if n//i == 1:\n                return True\n            else:\n                return False\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 1:\n        return True\n    elif n % 2 == 1:\n        return False\n    else:\n        for i in range(3, int(n**0.5)+1, 2):\n            if n % i == 0:\n                return False\n        return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # Check if the number is a power of 2\n    power_of_two = 1\n    while power_of_two < n:\n        power_of_two <<= 1\n    \n    if power_of_two == n:\n        return True\n    \n    # Check if the number can be represented as sum of powers of 2\n    for i in range(1, n//2 + 1):\n        if n - i*power_of_two == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    elif n & (n-1) == 0:\n        return is_Sum_Of_Powers_Of_Two(n >> 1)\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    if n == 1:\n        return False\n\n    is_power_of_two = True\n    power = 2\n    while power <= n:\n        if n % power == 0:\n            n //= power\n        else:\n            is_power_of_two = False\n            break\n        power <<= 1\n\n    if is_power_of_two:\n        return True\n    else:\n        return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Check if the given number is divisible by 2\n    if n % 2 == 0:\n        return False\n    # Check if the given number is a power of 2\n    power = 0\n    while n > 1:\n        if n % 2 == 0:\n            power += 1\n            n //= 2\n        else:\n            return False\n    return power >= 1"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    print(\"The circumference of a circle with radius\", r, \"is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14159 * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # pi * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula to find circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r  # formula for the circumference of a circle\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # formula for circumference\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*3.14159*(r)\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sublist in test_list:\n        for item in sublist:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # create an empty set to hold the flattened list of numbers\n    flattened_set = set()\n    # loop through each item in the original list of lists\n    for item in test_list:\n        # loop through each item in the current list and add it to the flattened set\n        for subitem in item:\n            flattened_set.add(subitem)\n    # convert the flattened set back to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [item for sublist in test_list for item in sublist]\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if type(item) == list:\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    result = []\n    for sublist in test_list:\n        result.extend(sublist)\n    return set(result)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    return sum(num for sublist in test_list for num in sublist)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            result.append(test_list[i][j])\n    return result"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    unique_list = list(set(flattened_list))\n    return unique_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    \n    # Perform pancake sorting\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n        \n        # Swap the maximum element with the last element of the unsorted part\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    def reverse_pancake_sort(nums):\n        def swap(arr, i, j):\n            arr[i], arr[j] = arr[j], arr[i]\n\n        def reverse(arr, left, right):\n            while left < right:\n                swap(arr, left, right)\n                left += 1\n                right -= 1\n\n        def reverse_nums(arr, start, end):\n            reverse(arr, start, end)\n            reverse(arr, start, end - 1)\n            reverse(arr, start, end)\n\n        def sort_nums(arr, start, end):\n            if start < end:\n                pivot_index = partition(arr, start, end)\n                sort_nums(arr, start, pivot_index)\n                sort_nums(arr, pivot_index + 1, end)\n\n        def partition(arr, start, end):\n            pivot = arr[end]\n            left = start - 1\n\n            for i in range(start, end):\n                if arr[i] < pivot:\n                    left += 1\n                    swap(arr, left, i)\n\n            swap(arr, left + 1, end)\n            return left + 1\n\n        nums = nums[:]\n        reverse_nums(nums, 0, len(nums) - 1)\n        sort_nums(nums, 0, len(nums) - 1)\n        return nums\n\n    sorted_nums = reverse_pancake_sort(nums)\n    return sorted_nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    # create a list of numbers from 1 to n\n    count = [0] * n\n    # iterate over the list and count the number of swaps required to sort the list\n    for i in range(n):\n        # calculate the maximum index k such that nums[i] < nums[k]\n        k = i\n        while k > 0 and nums[k - 1] > nums[k]:\n            count[k - 1] += 1\n            k -= 1\n        # swap nums[i] with nums[k]\n        nums[i], nums[k] = nums[k], nums[i]\n        # repeat the process for the newly sorted portion of the list\n        for j in range(i, k, -1):\n            k = j\n            while k < n and nums[k] < nums[k - 1]:\n                count[k - 1] += 1\n                k += 1\n            nums[i], nums[k] = nums[k], nums[i]\n    # print the count of swaps required to sort the list\n    print(\"Number of swaps required:\", sum(count))"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    def reverse(start, end):\n        while start < end:\n            nums[start], nums[end] = nums[end], nums[start]\n            start += 1\n            end -= 1\n\n    def rotate(start, end):\n        pivot = nums[end]\n        i = start\n        for j in range(start, end):\n            if nums[j] > pivot:\n                nums[i], nums[j] = nums[j], nums[i]\n                i += 1\n\n    def partition(start, end):\n        pivot = nums[end]\n        i = start - 1\n        for j in range(start, end):\n            if nums[j] < pivot:\n                i += 1\n                nums[i], nums[j] = nums[j], nums[i]\n        nums[i + 1], nums[end] = nums[end], nums[i + 1]\n        return i + 1\n\n    def quicksort(start, end):\n        if start < end:\n            pi = partition(start, end)\n            quicksort(start, pi - 1)\n            quicksort(pi + 1, end)\n\n    n = len(nums)\n    for i in range(n):\n        reverse(0, i)\n        reverse(i + 1, n - 1)\n        if i < n - 1:\n            rotate(0, i)\n            quicksort(0, i)\n            rotate(i, n - 1)\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the unsorted part of the array\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the first element of the unsorted part\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the unsorted part of the array from 0 to i-1\n        for j in range(i-1, -1, -1):\n            if j!= max_index:\n                nums[j], nums[max_index] = nums[max_index], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    length = len(nums)\n\n    # Iterate through the list and reverse the order of the elements\n    for i in range(length):\n        # Find the index of the largest element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, length):\n            if nums[j] > nums[max_index]:\n                max_index = j\n\n        # Swap the largest element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n\n    # Return the sorted list\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Determine the length of the list\n    n = len(nums)\n\n    # Traverse the list using a loop and pancakes\n    for i in range(n):\n        # Find the index of the next element to swap with the current one\n        j = i + 1\n\n        # Swap the elements if the next element is smaller than the current one\n        while j < n and nums[j] <= nums[i]:\n            j += 1\n\n        # Swap the elements at i and j\n        nums[i], nums[j] = nums[j], nums[i]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of the indices of the numbers, starting from 0\n    indices = [i for i in range(n)]\n    # bubble sort each sublist, from the largest to the smallest\n    for i in range(n-1, 0, -1):\n        # iterate over each sublist from the largest to the (i-th) smallest\n        for j in range(i):\n            # compare the sublists and swap them if necessary\n            if nums[indices[j]] > nums[indices[j+1]]:\n                nums[indices[j]], nums[indices[j+1]] = nums[indices[j+1]], nums[indices[j]]\n                # swap their indices too\n                indices[j], indices[j+1] = indices[j+1], indices[j]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n\n    # Initialize the indexes of the pancakes\n    pancake_indexes = [n-i-1 for i in range(n)]\n\n    # Start the sorting process\n    for i in range(n-1, 0, -1):\n        # Find the index of the largest element in the current pancake\n        max_index = pancake_indexes[i-1]\n\n        # Swap the elements if necessary\n        if nums[max_index] < nums[i-1]:\n            nums[max_index], nums[i-1] = nums[i-1], nums[max_index]\n\n            # Update the indexes of the pancakes\n            pancake_indexes[i-1], pancake_indexes[max_index] = pancake_indexes[max_index], pancake_indexes[i-1]\n\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Create a copy of the input list\n    nums_copy = nums[:]\n\n    # Bubble sort algorithm\n    for i in range(len(nums)):\n        # Find the largest element in the unsorted part of the list\n        largest = i\n        for j in range(i+1, len(nums)):\n            if nums_copy[j] > nums_copy[largest]:\n                largest = j\n        # Swap the largest element with the last element of the unsorted part\n        nums_copy[i], nums_copy[largest] = nums_copy[largest], nums_copy[i]\n\n    return nums_copy"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) is list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    num_lists = 0\n    for item in Input:\n        if isinstance(item, list):\n            num_lists += 1\n    return num_lists"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input):\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Initialize variables\n    max_diff = 0\n\n    # Loop through each element in the array\n    for i in range(len(arr)):\n        # Loop through the remaining elements in the array\n        for j in range(i+1, len(arr)):\n            # Calculate the absolute difference between the elements\n            diff = abs(arr[i]-arr[j])\n            # Update the maximum difference if the current difference is greater\n            if diff > max_diff:\n                max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return 0\n    \n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n                \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n\n    # Find the maximum element in the array\n    max_num = max(arr)\n\n    # Initialize variables to store the minimum and maximum absolute difference\n    min_diff = float('inf')\n    max_diff = float('-inf')\n\n    # Iterate through the array and calculate the absolute difference between adjacent elements\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i-1])\n\n        # Update the minimum and maximum absolute difference\n        if diff < min_diff:\n            min_diff = diff\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum absolute difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Initialize the maximum difference to be the difference between the first and second elements of the array\n    max_diff = arr[1] - arr[0]\n\n    # Loop through the array starting from the third element\n    for i in range(2, len(arr)):\n        # Calculate the absolute difference between the current element and the previous element\n        diff = abs(arr[i] - arr[i-1])\n        # Update the maximum difference if the current difference is greater than the current maximum\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2: \n        return 0\n    else: \n        max_diff = 0\n        for i in range(len(arr)-1):\n            diff = abs(arr[i] - arr[i+1])\n            if diff > max_diff:\n                max_diff = diff\n        return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function finds the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')  # initialize max_diff to negative infinity\n\n    for i in range(len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = abs(arr[i] - arr[j])  # calculate absolute difference between arr[i] and arr[j]\n            if diff > max_diff:  # if current difference is greater than max_diff, update max_diff\n                max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # initialize variables\n    x = 0\n    y = 0\n    flag = 1\n    \n    # find solutions\n    while flag:\n        # check if solutions exist\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and decrement y\n        x += 1\n        y -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment y and decrement x\n        y += 1\n        x -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and y\n        x += 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and decrement y\n        x -= 1\n        y -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement y and increment x\n        y -= 1\n        x += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and y\n        x -= 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment y and increment x\n        y += 1\n        x += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and y\n        x += 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment y and decrement x\n        y += 1\n        x -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and increment y\n        x -= 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and y\n        x += 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and decrement y\n        x -= 1\n        y -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and y\n        x += 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and y\n        x -= 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement y and increment x\n        y -= 1\n        x += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and decrement y\n        x -= 1\n        y -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and decrement y\n        x += 1\n        y -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement y and increment x\n        y -= 1\n        x += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment y and increment x\n        y += 1\n        x += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment x and y\n        x += 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # increment y and decrement x\n        y += 1\n        x -= 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return (x, y)\n        \n        # decrement x and increment y\n        x -= 1\n        y += 1\n        \n        # check if solution exists\n        if a*x + b*y == n:\n            return"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # Check if n is divisible by a and b\n    if n % a!= 0 and n % b!= 0:\n        return None\n\n    # Find the two integers x and y that satisfy the equation\n    x = int(n / a)\n    y = int(n / b)\n\n    # Check if the solution is valid\n    if a * x + b * y!= n:\n        return None\n\n    # Return the solution\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Initialize x and y\n    x = None\n    y = None\n\n    # Initialize the number of iterations\n    iterations = 0\n\n    # Iterate until we find a solution or have iterated n times\n    while x is None and iterations < n:\n        # Check if we have found a solution\n        if a * x + b * y == n:\n            # Return the solution\n            return (x, y)\n        else:\n            # Try a new value of x\n            x = a * iterations + b * (iterations ** 2) / 2\n\n            # Increment the iterations\n            iterations += 1\n\n            # Try a new value of y\n            y = a * x + b * iterations\n\n            # Increment the iterations\n            iterations += 1\n\n    # If we have iterated n times and have not found a solution, return None\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    # check if a and b are invertible using extended Euclidean algorithm\n    gcd, x, y = extended_euclidean_algorithm(a, b)\n    if gcd == 1:\n        # find x and y satisfying ax + by = n\n        for i in range(n//gcd):\n            if i*a + i*b == n:\n                return i*x, i*y\n    return None\n\ndef extended_euclidean_algorithm(a, b):\n    \"\"\"\n    Find the greatest common divisor and its multiplicative inverse using the extended Euclidean algorithm.\n    \"\"\"\n    # handle trivial cases\n    if a == 0:\n        return b, 0, 1\n    elif b == 0:\n        return a, 1, 0\n\n    # find remainders and divide until quotient becomes 0\n    x1, x2, y1, y2 = 1, 0, 0, 1\n    while b!= 0:\n        q = a // b\n        a, b = b, a % b\n        x1, x2 = x2, x1 - q * x2\n        y1, y2 = y2, y1 - q * y2\n\n    # calculate gcd and its multiplicative inverse\n    gcd = a\n    inv_a = y2\n    if inv_a < 0:\n        inv_a += gcd\n    return gcd, inv_a, x1"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x1 = (-b + n//a) // a\n    x2 = (-b - n//a) // a\n    y1 = x1 // b\n    y2 = x2 // b\n    return (x1, x2, y1, y2) if x1*x2 == n else None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # First, check if the equation has two solutions\n    d = a*b - 1 # Find the discriminant\n    if d == 0:\n        x = -b/(2*a) # Calculate x1\n        y = -b/(2*a) # Calculate y1\n        return (x, y)\n    elif d > 0:\n        x1 = (-b + (d**0.5))/(2*a) # Calculate x1\n        x2 = (-b - (d**0.5))/(2*a) # Calculate x2\n        return (x1, x2)\n    else:\n        return None # No solution exists"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if a == 0:\n        # y = -b/a * n\n        y = -n // a * b\n        return (None, y)\n    elif b == 0:\n        # x = -a/b * n\n        x = -n // b * a\n        return (x, None)\n    else:\n        # x = (b * n - a * d) / (a * a - b * b)\n        # y = (a * n - b * d) / (a * a - b * b)\n        d = n - a * a // b\n        x = (b * n - a * d) // (a * a - b * b)\n        y = (a * n - b * d) // (a * a - b * b)\n        if (a * x + b * y) == n:\n            return (x, y)\n        else:\n            return (None, None)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # Check if the discriminant is positive\n    if d > 0:\n        # Calculate the two solutions\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n\n        return (int(x1), int(x2))\n\n    # Check if the discriminant is negative\n    elif d == 0:\n        # Calculate the two solutions\n        x1 = -b/(2*a)\n        x2 = -b/(2*a)\n\n        return (int(x1), int(x2))\n\n    # If the discriminant is negative and the number of solutions is even\n    elif d < 0 and n % 2 == 0:\n        # Calculate the two solutions\n        x1 = -b/(2*a)\n        x2 = (b/(2*a))**2 - n/(2*a)\n\n        return (int(x1), int(x2))\n\n    # If the discriminant is negative and the number of solutions is odd\n    elif d < 0 and n % 2 == 1:\n        # Calculate the two solutions\n        x1 = -b/(2*a)\n        x2 = (b/(2*a))**2 - (n/(2*a))**2\n\n        return (int(x1), int(x2))\n\n    # If the discriminant is positive and the number of solutions is even\n    elif d > 0 and n % 2 == 0:\n        # Calculate the two solutions\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n\n        return (int(x1), int(x2))\n\n    # If the discriminant is positive and the number of solutions is odd\n    elif d > 0 and n % 2 == 1:\n        # Calculate the two solutions\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n\n        return (int(x1), int(x2))"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # find two real roots of the quadratic equation\n    root1 = (-b + (b**2 - 4*a*n) ** 0.5) / (2*a)\n    root2 = (-b - (b**2 - 4*a*n) ** 0.5) / (2*a)\n    # check if there is a solution\n    if root1 == 0 and root2 == 0:\n        return None\n    elif root1 == 0:\n        return (0, root2)\n    elif root2 == 0:\n        return (root1, 0)\n    else:\n        return (root1, root2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n    \n    # find the gcd of a and b\n    gcd = abs(gcd(a, b))\n    \n    # find the least common multiple of a and b\n    lcm = (a*b) // gcd\n    \n    # find the value of x and y that satisfy the equation\n    for x in range(-n//gcd, n//gcd+1):\n        if lcm*x % gcd == n:\n            y = (lcm*x // gcd) % gcd\n            return (x, y)\n    \n    # no solution exists\n    return None\n\ndef gcd(a, b):\n    '''\n    Find the greatest common divisor of a and b.\n    '''\n    while b:\n        a, b = b, a % b\n    return a"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    :param list1: a list of elements\n    :param list2: another list of elements\n    :return: a new list with all elements from list1 not present in list2\n    \"\"\"\n    for item in list2:\n        list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list1:\n        if element in list2:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            del list1[i]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Use a set to remove duplicates from list2\n    list2_set = set(list2)\n    # Use a loop to iterate over each element of list1\n    for element in list1:\n        # If the element is in list2_set, remove it from list1\n        if element in list2_set:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for elem in list2:\n        if elem in list1:\n            list1.remove(elem)"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 0:\n        return 0\n    else:\n        total = 0\n        i = 0\n        while i < n // 2:\n            total += n - 2 * i\n            i += 1\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    total = 0\n    while i < n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    \n    elif n % 2 == 1:\n        # calculate sum from 0 to (n - 1)\n        total = sum_series(n - 1)\n        return total\n    \n    else:\n        # calculate sum from 0 to (n // 2)\n        total = 0\n        for i in range(n // 2):\n            total += (n - 2*i)\n        return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2,\n    for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"n must be greater than or equal to 2\")\n    sum = 0\n    for i in range(n // 2):\n        sum += (n - 2 * i)\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    # initialize sum to 0\n    total = 0\n    # iterate from 0 to n // 2\n    for i in range(n // 2):\n        # calculate the difference between n and 2*i\n        diff = n - 2 * i\n        # add the difference to the total\n        total += diff\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n//2):\n        sum += n - 2*i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n - 2*i >= 0:\n        sum += n - 2*i\n        i += 1\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    i = 0\n    sum_series = 0\n    while n - i >= 0:\n        sum_series += (n - i)\n        i += 2\n    return sum_series"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def area_polygon(s, l):"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s * (s - 2 * l + 1)) / (4 * math.tan(math.pi / l))\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using the formula for a regular polygon\n    area = (l * (s * s) / 4) * pi\n    # Return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (l ** 2)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = 2 * pi * i / l\n        area += s * tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using Heron's formula\n    area = 0.5 * s * l * tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        angle = i*2*pi/l\n        area += s*tan(angle)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l) / (4 * math.tan(math.pi / l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of the polygon using the formula A = (s * (s - l) * pi) / 2\n    return (s * (s - l) * pi) / 2"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.5 * s * (tan(pi/l)) ** 2\n    return area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Find the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    # Find the sum of the divisors of n+1\n    div_sum_plus_one = 0\n    for i in range(1, n+2):\n        if n+1 % i == 0:\n            div_sum_plus_one += i\n    # Check if the sums are the same\n    if div_sum == div_sum_plus_one:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n < 1:\n        return False\n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i!= n/i:\n                divisors.append(n/i)\n    return sum(divisors) == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of divisors of n using the formula n = sum of divisors\n    sum_divisors = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1))\n    # check if the sum of divisors of n and n+1 are equal\n    if sum_divisors == n + n + 1: \n        return True\n    else: \n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_count = 0\n\n    # Calculate the sum of the divisors of n\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_count += 1\n\n    # Check if the sum of the divisors of n is the same as the sum of all divisors\n    divisor_sum = sum([i for i in range(1, n+1)])\n    if div_count == divisor_sum:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    if n < 2:\n        return False\n    \n    div_list = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_list.append(i)\n            if i!= n//i:\n                div_list.append(n//i)\n    \n    div_set = set(div_list)\n    return len(div_set) == 1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # calculate the sum of the divisors of n\n    div_sum = sum(math.factorial(i) for i in range(1, int(math.sqrt(n))+1) if n % i == 0)\n    # check if the sum of the divisors is equal to n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # check if n is even or odd\n    if n % 2 == 0:\n        # n is even\n        # find the largest odd divisor of n\n        odd_divisor = 3\n        while odd_divisor <= math.sqrt(n):\n            if n % odd_divisor == 0:\n                break\n            odd_divisor += 2\n        # sum of divisors of n and odd_divisor\n        div_sum = n + odd_divisor\n    else:\n        # n is odd\n        # find the largest even divisor of n\n        even_divisor = 2\n        while even_divisor <= math.sqrt(n):\n            if n % even_divisor == 0:\n                break\n            even_divisor += 2\n        # sum of divisors of n and even_divisor\n        div_sum = n + even_divisor\n\n    # check if the sum of the divisors is the same as the original value of n\n    if div_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # calculate the sum of divisors\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i\n            div_sum += n//i\n    # check if sum is same as original number\n    return (div_sum == n)"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # create a list of integers between 1 and n\n    divisors = [i for i in range(1, n+1)]\n\n    # calculate the sum of the divisors\n    sum_divisors = sum(divisors)\n\n    # compare the sum of the divisors to n\n    if n == sum_divisors:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_list = [i for i in range(1, int(n**0.5)+1) if n%i == 0]\n    div_sum_list = [sum(div_list[:i+1]) for i in range(len(div_list))]\n    if div_sum_list[0] == div_sum_list[-1]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(26):\n        char_count[chr(i+ord('a'))] = 0\n    for char in str1:\n        if char.lower() in char_count:\n            char_count[char.lower()] += 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    str1 = str1.lower() # convert string to lowercase for case-insensitivity\n    \n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            if str1[i] == str1[j-1]:\n                count += 1\n    \n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    This function takes a string as input and returns a dictionary where the keys are the characters in the string and the values are the count of characters in the string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Initialize an empty dictionary to store the character count\n    count_dict = {}\n\n    # Iterate through each character in the input string\n    for char in str1:\n\n        # Convert the character to lowercase to ignore case\n        char = char.lower()\n\n        # Check if the character is in the English alphabet\n        if char in 'abcdefghijklmnopqrstuvwxyz':\n\n            # If the character is in the English alphabet, check if it already exists in the count dictionary\n            if char in count_dict:\n\n                # If the character exists in the dictionary, increment its value by 1\n                count_dict[char] += 1\n\n            # If the character doesn't exist in the dictionary, add it with a value of 1\n            else:\n                count_dict[char] = 1\n\n    # Return the count dictionary\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].lower() in alphabet:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the string to lowercase and remove all non-alphabetic characters\n    str1 = ''.join(filter(str.isalpha, str1)).lower()\n\n    # Create a dictionary to store the count of characters at each position\n    count = {}\n\n    # Iterate over the string and count the occurrences of characters at each position\n    for i in range(len(str1)):\n        if str1[i] in count:\n            count[str1[i]] += 1\n        else:\n            count[str1[i]] = 1\n\n    # Return the count of characters at each position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # create a dictionary to store the number of characters at each position in the English alphabet\n    count = {}\n    # convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # loop through each character in the string\n    for char in str1:\n        # check if the character is a letter (uppercase or lowercase)\n        if char.isalpha():\n            # if it is, add 1 to the count for the position of the letter in the English alphabet\n            pos = ord(char) - ord('a')\n            count[pos] = count.get(pos, 0) + 1\n    # return the dictionary with the number of occurrences of each letter at each position\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count_dict = {}\n    for char in alphabet:\n        count_dict[char] = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            count_dict[char.lower()] += 1\n    return count_dict"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Initialize a dictionary to store the character count\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # Convert the character to lowercase to make it case insensitive\n        char = char.lower()\n        \n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    \n    # Initialize a variable to store the total count of characters at each position\n    total_count = 0\n    \n    # Loop through each character in the alphabet and find the total count of characters at each position\n    for i in range(ord('a'), ord('z')+1):\n        char = chr(i).lower()\n        if char in char_count:\n            total_count += char_count[char]\n    \n    # Return the total count of characters at each position\n    return total_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n\n    # Convert the input string to lowercase and remove any non-alphabetic characters\n    str1 = ''.join(filter(str.isalpha, str1)).lower()\n\n    # Create a dictionary to store the count of characters that occur at the same position in the English alphabet\n    char_count = {}\n\n    # Iterate through the English alphabet and count the number of characters that occur at the same position in the input string\n    for i in range(26):\n        char = chr(ord('a') + i)\n        if char in str1:\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the count of characters that occur at the same position in the English alphabet\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for char in str1:\n        if char.lower() in alphabet:\n            if char.lower() == alphabet.pop():\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0 and (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_pair_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0:\n                even_pair_count += 1\n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % 2 == 0 and A[j] % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n    \n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor_sum = A[i] ^ A[j]\n            if xor_sum == 0:\n                even_pair_count += 1\n    \n    return even_pair_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    n = n - 1  # Subtract 1 from n to make it a power of 2\n    n |= n >> 1  # Double all bits until the least significant bit is 1\n    n |= n >> 2  # Double all bits until the second least significant bit is 1\n    n |= n >> 4  # Double all bits until the third least significant bit is 1\n    n |= n >> 8  # Double all bits until the fourth least significant bit is 1\n    n |= n >> 16  # Double all bits until the fifth least significant bit is 1\n    n += 1  # Increment n to get the next power of 2\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return 2**int(math.log2(n))+1"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize the variable to hold the result\n    power = 1\n\n    # Loop while the current power is less than or equal to the input value\n    while power <= n:\n        # If the current power is a power of 2, return it\n        if power == 2**i:\n            return power\n\n        # Increment the power by 1\n        power *= 2\n\n    # If the code reaches this point, it means the input value was already a power of 2, so return it\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while n % 2 == 0:\n        n //= 2\n    return n * 2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize a variable to store the result\n    result = 1\n    \n    # Loop while the result is less than n\n    while result < n:\n        # Multiply the result by 2\n        result *= 2\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Calculate the exponent of 2 that is greater than or equal to n\n    exp = int(log2(n))\n    \n    # Calculate the next power of 2\n    next_pow = 2**exp\n    \n    return next_pow"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Initialize power to 1\n    power = 1\n    \n    # Check if n is already a power of 2\n    if n & (n-1) == 0:\n        return n\n    \n    # Iterate until n is a power of 2\n    while power < n:\n        power <<= 1\n        \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n):\n    # Use bitwise operations to find the next power of 2\n    # We can use a bitwise OR to find the next power of 2\n    # If n is already a power of 2, then it will be unchanged\n    next_power = 1\n    while next_power < n:\n        next_power <<= 1\n    \n    # If n is already a power of 2, then it will be unchanged\n    return next_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n & (n - 1)!= 0:\n        n = n | (n & -n)\n    return n << 1"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the range is valid\n    if m < 0 or m > len(list1) - 1 or n < 0 or n > len(list1) - 1 or m > n:\n        print(\"Invalid range!\")\n        return\n    \n    # Initialize the sum to zero\n    sum_range = 0\n    \n    # Loop through the list starting from index m and ending at index n\n    for i in range(m, n+1):\n        sum_range += list1[i]\n    \n    # Return the sum of the numbers in the range\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    for i in range(m, n+1):\n        total += list1[i-1]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    # Check if the indices are valid\n    if m > len(list1) or n > len(list1) or m > n or m < 0 or n < 0:\n        return \"Invalid indices.\"\n    \n    # Sum the numbers in the specified range\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += list1[i]\n        \n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum += list1[i]\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m, n+1):\n        sum_list += list1[i-1]\n    return sum_list"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_val = 0\n    for i in range(m, n+1):\n        if i >= len(list1):\n            break\n        sum_val += list1[i]\n    return sum_val"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    if m >= n:\n        return \"Error: The starting index must be less than or equal to the ending index.\"\n    if m < 0 or n >= len(list1):\n        return \"Error: The starting or ending index is out of range.\"\n    if n == len(list1) - 1:\n        return list1[m] + sum_range_list(list1, m + 1, n)\n    else:\n        return list1[m] + sum_range_list(list1, m + 1, n)"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    # Initialize a variable to store the sum of numbers in the range\n    total_sum = 0\n    \n    # Iterate through the list from the start index m to the end index n-1\n    for i in range(m, n):\n        # Add the current element to the total sum\n        total_sum += list1[i]\n    \n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the area of a regular pentagon\n    area = 5 * a * a / 2\n    # Calculate the length of the base\n    base_length = 2 * a * math.sqrt(3) / 3\n    # Calculate the number of sides of the pentagon\n    num_sides = 5\n    # Calculate the perimeter of the pentagon\n    perimeter = (num_sides * base_length) + (num_sides - 2) * a\n    # Return the perimeter\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    circumference = 5 * a * math.sin(math.pi / 5)\n    return circumference\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    \"\"\"\n    # Calculate the length of each side of the pentagon\n    base = a / math.sqrt(5)\n    apothem = a / 5\n    \n    # Calculate the perimeter of the pentagon using Heron's formula\n    perimeter = base * 5 + apothem * (2 * math.sqrt(5) - 1)\n    \n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    perimeter = 5 * a\n    print(\"The perimeter of a pentagon with sides of length\", a, \"is\", perimeter)"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the sine of the angle from a to c\n    s = math.sin(math.pi/5)\n    # calculate the length of the hypotenuse of the right triangle\n    h = math.sqrt(3**2 + s**2)\n    # calculate the length of the diagonal of the right triangle\n    d = 2*a*s\n    # calculate the length of the perimeter of the pentagon\n    p = 5*a + 5*h + 5*d\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # Compute the circumference of the pentagon\n    circumference = 5 * a\n\n    # Compute the perimeter of the pentagon\n    perimeter = circumference * math.sin(math.pi / 5)\n\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the area of the pentagon\n    area = 5 * a**2 / (4 * math.tan(math.pi / 5))\n    # calculate the perimeter of the pentagon using the formula for the sum of the sides\n    perimeter = 5 * area\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    n = len(s)\n    for i in range(n-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurence of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - 2):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    start_index = s.find('std')\n    while start_index!= -1:\n        count += 1\n        start_index = s.find('std', start_index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+4] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in test_tuple:\n        if type(i)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if all(isinstance(x, type(test_tuple[0])) for x in test_tuple):\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # getting the type of the first element of the tuple\n    first_element_type = type(test_tuple[0])\n    # iterating through the tuple and checking if each element has the same type as the first element\n    for element in test_tuple:\n        if type(element)!= first_element_type:\n            return False\n    # if all the elements have the same type, then the function returns True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for element in test_tuple:\n        if type(element)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize a variable to keep track of the data type of the first element\n    data_type = type(test_tuple[0])\n    # Loop through the remaining elements of the tuple and compare their data type to the first one\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            # If there's a mismatch, return False\n            return False\n    # If we reach this point, all elements have the same data type\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_types = set()\n    for i in test_tuple:\n        data_types.add(type(i))\n    if len(data_types) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Initialize variable to store data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # Loop through each element in the tuple\n    for element in test_tuple:\n        # Check if the element's data type is same as the data type of the first element in the tuple\n        if type(element)!= data_type:\n            # If it's not, return False\n            return False\n    # If all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # initialize a variable to store the first element's data type\n    data_type = type(test_tuple[0])\n    # iterate over all the elements in the tuple\n    for element in test_tuple:\n        # check if the data type of the current element is same as the first element\n        if type(element)!= data_type:\n            # if not, return False\n            return False\n    # if all elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the first element of the tuple\n    first_element = test_tuple[0]\n    # Loop through the rest of the tuple\n    for element in test_tuple[1:]:\n        # Check if the type of current element is same as the first element\n        if type(element)!= type(first_element):\n            return False\n    # If we reach here, all the elements have same data type\n    return True"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Count the number of occurrences of the element\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    # Check if the count is greater than n/2\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n//2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            if count > n/2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n            if count == n//2:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n//2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n > 0):\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n): \n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n: \n        count += n & 1 \n        n >>= 1 \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        if n % 2 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    \"\"\"\n    count = 0\n    while n!= 0:\n        if n & 1 == 1:\n            count += 1\n        n = n >> 1\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    This function takes a string as input and returns a new string with all odd index characters removed.\n    '''\n    result = ''\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    This function removes the characters which have odd index values of a given string.\n    \"\"\"\n    # Convert the string to a list\n    lst = list(str)\n\n    # Iterate over the list and remove the characters with odd index values\n    for i in range(len(lst)):\n        if i % 2 == 1:\n            lst.pop(i)\n\n    # Convert the list back to a string and return it\n    return ''.join(lst)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([chr(ord(c) % 26) if ord(c) % 2!= 0 else c for c in str])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = ''\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Remove the characters of a given string that have odd index values.\n    \n    :param str: the string to process\n    :type str: str\n    :return: the modified string with odd index characters removed\n    :rtype: str\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    return ''.join(chr(int(ord(char), 16) if ord(char) >= 48 and ord(char) <= 57 else ord(char)) for index, char in enumerate(str) if index % 2!= 0)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as inputs and returns the minimum of those numbers.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # Find the minimum of a, b, and c\n    min_num = min(a, b, c)\n    \n    # Return the minimum value\n    return min_num"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a <= b <= c:\n        return a\n    elif b <= a <= c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize a variable to keep track of the number of unset bits\n    unset_bits = 0\n    \n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # If the bit is unset (i.e., 0), increment the unset_bits variable\n        if n & (1 << i) == 0:\n            unset_bits += 1\n            \n    # If all the bits are unset, return True, otherwise, return False\n    if unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three parameters n, l and r.\n    n: The number for which we want to check whether all the bits are set or not.\n    l: The starting index of the range.\n    r: The ending index of the range.\n    '''\n    # Initialize an array of bits with all bits set to 1.\n    bits = [1] * (r - l + 1)\n    \n    # Iterate over the bits array and set all the unset bits to 0.\n    for i in range(l, r + 1):\n        bits[i - l] = 0\n        \n    # Check if all the bits are set in the range.\n    if all(bits):\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # converting the input values to binary form\n    n = bin(n)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n\n    # padding the binary numbers with 0's to make them of equal length\n    n = '0'*(len(l)-len(n)) + n\n    l = '0'*(len(l)-len(l)) + l\n    r = '0'*(len(l)-len(r)) + r\n\n    # comparing the binary numbers\n    for i in range(len(l)):\n        if n[i] == '0' and (int(l[i]) < int(r[i])):\n            return False\n\n    # if all the bits are set in the given range then return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    for i in range(l, r+1):\n        if n & (1 << i):\n            count += 1\n            if count > 32:\n                return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize the count of unset bits as 0\n    unset_count = 0\n\n    # Calculate the maximum possible number that can be represented using the given number of bits\n    max_number = (2 ** n) - 1\n\n    # Iterate over all the possible numbers in the given range\n    for i in range(l, r + 1):\n        # If the number is equal to the maximum possible number, then all the bits are unset\n        if i == max_number:\n            return True\n        # If the number has unset bits, increment the count by 1\n        elif i & (i - 1):\n            unset_count += 1\n\n    # If all the bits are unset, then return True\n    if unset_count == 0:\n        return True\n    # If there are some unset bits, return False\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    # Initialize count to store the count of unset bits\n    count = 0\n\n    # Loop through all the bits in the given range\n    for i in range(l, r + 1):\n        # Check whether the i-th bit is set or unset\n        if n & (1 << i):\n            # If the i-th bit is set, increment the count\n            count += 1\n\n    # Check whether all the bits are unset or not\n    if count == 0:\n        # If all the bits are unset, return True\n        return True\n    else:\n        # If any of the bits are unset, return False\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    all_unset = True\n    for i in range(l, r + 1):\n        if bin(i).count('1')!= n:\n            all_unset = False\n            break\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    # Create a set of all numbers in the given range\n    all_nums = set(range(l, r + 1))\n\n    # Calculate the number of bits required for n\n    num_bits = len(bin(n)[2:])\n\n    # Create a set of all the possible combinations of bits\n    bits_combinations = set()\n    for i in range(2**num_bits):\n        bits_combinations.add(bin(i)[2:].zfill(num_bits))\n\n    # Calculate the intersection of all_nums and bits_combinations\n    bits_set = all_nums.intersection(bits_combinations)\n\n    # Check if there are any elements in bits_set\n    if bits_set:\n        return False\n    else:\n        return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables\n    all_unset = True\n    count = 0\n    \n    # Iterate through each bit in the given range\n    for i in range(l, r+1):\n        # If the bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n        \n        # If the count becomes greater than 0, all the bits are set in the given range\n        if count > 0:\n            all_unset = False\n    \n    # Return the value of all_unset\n    return all_unset"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n\n    if l > r:\n        return True\n\n    # Find the lowest set bit in the given range\n    lowest_bit = 0\n    while ((n >> lowest_bit) & 1) == 0:\n        lowest_bit += 1\n\n    # Find the highest unset bit in the given range\n    highest_bit = 0\n    while ((n >> highest_bit) & 1) == 1:\n        highest_bit += 1\n\n    # Return True if all the bits are unset in the given range\n    if l <= lowest_bit and highest_bit <= r:\n        return True\n\n    return False"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # Count the number of negative and positive elements in the array\n    neg_count = 0\n    pos_count = 0\n    \n    for element in arr:\n        if element < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n            \n    # If the sum of negative and positive elements is equal to n, no re-arranging is needed\n    if neg_count + pos_count == n:\n        return arr\n    \n    # If the sum of negative and positive elements is less than n, then we need to add more negative elements\n    if neg_count + pos_count < n:\n        add_count = n - neg_count - pos_count\n        for i in range(add_count):\n            arr.append(-1)\n            neg_count += 1\n            \n    # If the sum of negative and positive elements is more than n, then we need to remove negative elements\n    else:\n        remove_count = neg_count - pos_count\n        for i in range(remove_count):\n            arr.pop(0)\n            neg_count -= 1\n            \n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Return the sorted array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = [x for x in arr[:n] if x >= 0]\n    neg = [x for x in arr[:n] if x < 0]\n    neg.sort()\n    pos.sort(reverse=True)\n    result = neg + pos\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Create two empty lists to store negative and positive elements\n    neg = []\n    pos = []\n    # Iterate over the array\n    for num in arr:\n        # If the element is negative, append it to the negative list\n        if num < 0:\n            neg.append(num)\n        # If the element is positive, append it to the positive list\n        else:\n            pos.append(num)\n    # Iterate over the first n elements of the negative list and reverse them\n    for i in range(n):\n        neg.insert(0, neg.pop())\n    # Iterate over the first n elements of the positive list and reverse them\n    for i in range(n):\n        pos.insert(0, pos.pop())\n    # Combine the negative and positive lists and return the result\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    neg_indices = []\n    pos_indices = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            neg_indices.append(i)\n        else:\n            pos_indices.append(i)\n            \n    # re-arrange negative elements\n    for i in range(n):\n        arr[i], arr[neg_indices[i]] = arr[neg_indices[i]], arr[i]\n        \n    # re-arrange positive elements\n    for i in range(n):\n        arr[i], arr[pos_indices[i]] = arr[pos_indices[i]], arr[i]\n        \n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, i and j, to the beginning and end of the array, respectively\n    i, j = 0, len(arr) - 1\n\n    # Move the i pointer n positions to the right, and the j pointer n positions to the left\n    while i < n:\n        i += 1\n        j -= 1\n\n    # Swap the elements at the i and j pointers, effectively moving the negative elements to the beginning of the array\n    arr[i], arr[j] = arr[j], arr[i]\n\n    # Initialize two pointers, k and l, to the i pointer and the j pointer, respectively\n    k = i\n    l = j\n\n    # Loop through the array from the second to the last element\n    while k < l:\n        # Check if the element at k is negative\n        if arr[k] >= 0:\n            # Move the k pointer to the right\n            k += 1\n        else:\n            # Move the l pointer to the left\n            l -= 1\n            # Swap the elements at the k and l pointers\n            arr[k], arr[l] = arr[l], arr[k]\n\n    # Return the modified array\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize two pointers, i and j, to the beginning of the array\n    i = 0\n    j = n - 1\n    \n    # Traverse the array from left to right\n    while j < len(arr):\n        # If the current element is positive, increment j\n        if arr[j] > 0:\n            j += 1\n        # If the current element is negative, swap it with the element pointed to by i\n        else:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j += 1\n    \n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Initialize variables to keep track of negative and positive elements\n    neg = []\n    pos = []\n    # Iterate through the given array\n    for i in range(len(arr)):\n        # If the current element is negative\n        if arr[i] < 0:\n            # Add it to the negative list\n            neg.append(arr[i])\n        # If the current element is positive\n        else:\n            # Add it to the positive list\n            pos.append(arr[i])\n    # Combine the negative and positive lists and sort them in descending order\n    arr = neg + pos\n    arr.sort(reverse=True)\n    # Return the re-arranged array\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create a dictionary to store the negative and positive elements\n    neg_dict = {}\n    pos_dict = {}\n\n    # Iterate through the first n elements of the array\n    for i in range(n):\n        # If the element is negative, add it to the negative dictionary\n        if arr[i] < 0:\n            neg_dict[i] = arr[i]\n        # Otherwise, add it to the positive dictionary\n        else:\n            pos_dict[i] = arr[i]\n\n    # Iterate through the remaining elements of the array\n    for i in range(n, len(arr)):\n        # If the element is negative, add it to the negative dictionary\n        if arr[i] < 0:\n            # If the element is not in the negative dictionary yet, add it to the dictionary\n            if i not in neg_dict:\n                neg_dict[i] = arr[i]\n            # Otherwise, update the value in the dictionary\n            else:\n                neg_dict[i] = min(neg_dict[i], arr[i])\n        # Otherwise, add it to the positive dictionary\n        else:\n            # If the element is not in the positive dictionary yet, add it to the dictionary\n            if i not in pos_dict:\n                pos_dict[i] = arr[i]\n            # Otherwise, update the value in the dictionary\n            else:\n                pos_dict[i] = max(pos_dict[i], arr[i])\n\n    # Create a new array to store the final elements\n    new_arr = []\n\n    # Iterate through the negative dictionary and add the negative elements to the new array\n    for i in range(n):\n        if i in neg_dict:\n            new_arr.append(neg_dict[i])\n\n    # Iterate through the positive dictionary and add the positive elements to the new array\n    for i in range(n, len(arr)):\n        if i in pos_dict:\n            new_arr.append(pos_dict[i])\n\n    # Return the new array with the re-arranged elements\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pos = []\n    neg = []\n    for i in arr[:n]:\n        if i >= 0:\n            pos.append(i)\n        else:\n            neg.append(i)\n    for i in range(n, len(arr)):\n        if arr[i] >= 0:\n            pos.append(arr[i])\n        else:\n            neg.append(arr[i])\n    return neg + pos"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    This function takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Create two new arrays to store positive and negative elements\n    pos_arr = []\n    neg_arr = []\n\n    # Loop through the input array and add elements to the corresponding arrays\n    for num in arr:\n        if num > 0:\n            pos_arr.append(num)\n        else:\n            neg_arr.append(num)\n\n    # Combine the two arrays and sort them in ascending order\n    combined_arr = neg_arr + pos_arr\n    combined_arr.sort()\n\n    # Return the combined and sorted array\n    return combined_arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",\"{}\".format(char))"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i!= \" \":\n            new_str += i\n    return new_str"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Convert the string to a list of characters\n    list1 = list(str1)\n    # Loop through the list of characters and replace blank spaces with the character\n    for i in range(len(list1)):\n        if list1[i] =='':\n            list1[i] = char\n    # Convert the list back to a string and return it\n    return ''.join(list1)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\") + char"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    max_heap = []\n    for num in list1:\n        heapq.heappush(max_heap, num)\n        if len(max_heap) > n:\n            heapq.heappop(max_heap)\n    return max_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # convert the list to a min heap\n    heapq.heapify(list1)\n    # extract the top n elements and convert them back to a list\n    return [heapq.heappop(list1) for i in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in range(len(list1)):\n        heapq.heappush(heap,list1[i])\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # initialize a min-heap with the first n elements of the list\n    min_heap = list1[:n]\n    heapq.heapify(min_heap)\n    \n    # iterate over the remaining elements of the list\n    for i in range(n, len(list1)):\n        # if the current element is greater than the smallest element in the heap\n        if list1[i] > min_heap[0]:\n            # remove the smallest element from the heap\n            heapq.heappop(min_heap)\n            # add the current element to the heap\n            heapq.heappush(min_heap, list1[i])\n    \n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min heap from the list of numbers\n    min_heap = []\n    for num in list1:\n        heapq.heappush(min_heap, num)\n    \n    # Remove the smallest n elements from the heap and append them to the result list\n    result = []\n    while len(result) < n:\n        result.append(heapq.heappop(min_heap))\n    \n    return result\n"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # use heapq module to sort the list in descending order\n    sorted_list = heapq.nlargest(n, list1)\n    # convert the sorted list to a regular list\n    result = list(sorted_list)\n    return result"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * math.pi * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    area = pi * (r**2 + h**2)\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_surface_area = 2 * r * h\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*pi*r*h)+(2*pi*h*r)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    lateral_area = math.pi*(r**2)*(h/2)\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * (r**2)\n    lateral_surface_area = area - (2 * r * h)\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14*r*h\n    print(\"The lateral surface area of the cylinder is:\",area)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2 * h\n    return area"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3 # use exponentiation to find the cube of the side length"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # initialize a variable to store the even bits of the number\n    even_bits = 0\n\n    # loop through each bit of the number\n    for i in range(32):\n        # if the bit is even, set it to 1, otherwise, leave it at 0\n        if (n >> i) & 1 == 0:\n            even_bits |= 1 << i\n\n    # return the modified number\n    return even_bits"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through all bits of the number\n    for i in range(32):\n        # check if the i-th bit is even\n        if n & (1 << i) == 0:\n            # set the i-th bit of the number\n            n |= 1 << i\n    # return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    result = 0\n    for i in range(32):\n        if n & (1 << i):\n            result |= (1 << i)\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # initialize an empty list to store the even bits\n    even_bits = []\n\n    # loop through each bit in the binary representation of the number\n    for bit in bin(n)[2:]:\n        # if the bit is even, append it to the even_bits list\n        if bit == '1':\n            even_bits.append(int(bit))\n\n    # loop through the even_bits list and set each bit to 1\n    for bit in even_bits:\n        n |= 1 << bit\n\n    # return the updated number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Iterate through each bit of the input number\n    for i in range(32):\n        # Check if the current bit is even\n        if n & 1 == 0:\n            # Set the bit in the result to 1\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit of the input number\n    for i in range(32):\n        # Check if the i-th bit of the input number is even\n        if n & (1 << i)!= 0:\n            # Set the i-th bit of the result to 1\n            result |= 1 << i\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Find the first non-zero bit in the binary representation of n\n    i = 0\n    while n & 1 == 0:\n        i += 1\n        n >>= 1\n    # Set all even bits to 1\n    for _ in range(i):\n        n |= 1 << (i*2)\n    # Return the modified number\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert the given number to a binary string\n    binary_str = bin(n)[2:]\n    # initialize an empty string to store the binary string with even bits set\n    even_bits_set_binary = \"\"\n    # iterate over each character in the binary string\n    for char in binary_str:\n        # check if the character is an even bit\n        if int(char) % 2 == 0:\n            # if it is, set the corresponding bit in the even_bits_set_binary string to 1\n            even_bits_set_binary += \"1\"\n        else:\n            # if it's an odd bit, keep it as it is\n            even_bits_set_binary += \"0\"\n    # convert the even_bits_set_binary string back to an integer and return it\n    return int(even_bits_set_binary, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the even bits of the number\n    even_bits = 0\n    \n    # Loop through all bits of the number\n    for bit in bin(n)[2:]:\n        # If the bit is even, set it in the variable\n        if int(bit) == 1:\n            even_bits |= (1 << int(bit))\n    \n    # Return the number with even bits set\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the occurrence counts\n    counts = {}\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # If the tuple is not in the dictionary, add it and set its count to 1\n        if tup not in counts:\n            counts[tup] = 1\n        # If the tuple is already in the dictionary, increment its count\n        else:\n            counts[tup] += 1\n    # Return the dictionary of occurrence counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    count_dict = Counter(unique_tuples)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a dictionary to store the counts of each unique tuple\n    counts = {}\n    for item in test_list:\n        # If the tuple is already in the dictionary, increment the count\n        if item in counts:\n            counts[item] += 1\n        # If the tuple is not in the dictionary, add it with a count of 1\n        else:\n            counts[item] = 1\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n\n    # Create a dictionary to store the counts of each unique tuple\n    counts = {}\n\n    # Loop through the list of tuples and count the occurrences of each unique tuple\n    for item in test_list:\n        # If the tuple is not already in the dictionary, add it and set its count to 1\n        if item not in counts:\n            counts[item] = 1\n        # If the tuple is already in the dictionary, increment its count by 1\n        else:\n            counts[item] += 1\n\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_tuples = set(test_list)\n    count_dict = {}\n    for tuple in unique_tuples:\n        count_dict[tuple] = test_list.count(tuple)\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count_dict = Counter()\n    for item in test_list:\n        count_dict[item] += 1\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object from the list of tuples\n    counter = Counter(test_list)\n    \n    # Create an empty dictionary to store the results\n    result = {}\n    \n    # Iterate over the Counter object and add the keys and values to the result dictionary\n    for key, value in counter.items():\n        result[key] = value\n        \n    return result"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the counts\n    counts = {}\n    \n    # Iterate over the test list\n    for item in test_list:\n        # Check if the item is already a tuple\n        if type(item) == tuple:\n            # If it is, convert it to a string to compare\n            item_str = str(item)\n            # If the item string is already a key in the counts dictionary, increment its value\n            if item_str in counts:\n                counts[item_str] += 1\n            # If the item string is not a key in the counts dictionary, add it with a value of 1\n            else:\n                counts[item_str] = 1\n    \n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return dict(counter)"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            substring = str[i:j+1]\n            if substring and substring.strip():\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0 \n    for i in range(len(str)): \n        for j in range(i+1, len(str)+1): \n            if str[i:j]!= \"\": \n                count += 1 \n    return count "
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str):\n    # Initialize a variable to store the count of non-empty substrings\n    count = 0\n    \n    # Loop through each character in the string\n    for i in range(len(str)):\n        # If the current character is a letter, count the length of the substring starting from that character\n        if str[i].isalpha():\n            count += 1\n            # Loop through each character after the current letter, to count all non-empty substrings\n            for j in range(i+1, len(str)):\n                if str[j].isalpha():\n                    count += 1\n    \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    # Initialize a counter variable to keep track of the number of substrings\n    count = 0\n\n    # Loop through each character in the string\n    for i in range(len(str)):\n        # Loop through each possible substring of length i\n        for j in range(len(str) - i + 1):\n            # Check if the substring is non-empty\n            if str[j:j+i]!= '':\n                # Increment the counter variable\n                count += 1\n\n    # Return the final count of substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # Initialize a counter variable\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Iterate through each subsequent character in the string\n        for j in range(i + 1, len(str) + 1):\n            # Check if the substring is non-empty\n            if j - i > 0:\n                count += 1\n\n    # Return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j]!= '':\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)):\n            substring = str[i:j+1]\n            if substring and len(substring) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    total_sequences = 0\n    previous_number = 1\n\n    for i in range(n):\n        current_number = 2 * previous_number\n        while current_number <= m:\n            total_sequences += 1\n            previous_number = current_number\n            current_number += 1\n\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    # check if inputs are positive integers\n    if not isinstance(m, int) or not isinstance(n, int) or m <= 0 or n <= 0:\n        return \"Invalid input: m and n must be positive integers.\"\n\n    # initialize number of possible sequences to 0\n    num_sequences = 0\n\n    # initialize current sequence to 1\n    sequence = 1\n\n    # loop through length n\n    for i in range(1, n + 1):\n        # add current sequence to number of possible sequences\n        num_sequences += sequence\n\n        # check if current element is within the required range\n        if m - sequence >= 2 * i <= m:\n            # add the number of possible sequences for the previous element to the current sequence\n            sequence = sequence * (m - sequence) // 2\n        else:\n            # if current element is outside the required range, reset the sequence to 1\n            sequence = 1\n\n    # return the total number of possible sequences\n    return num_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    # Function to find the number of sequences of length n that satisfy the given conditions\n    def count_sequences(m,n,sequence):\n        # Base case: If we have generated all the elements of the sequence, return 1\n        if len(sequence) == n:\n            return 1\n        # Recursive case: Find the number of sequences that start from the current element\n        count = 0\n        for i in range(1,len(sequence)):\n            if sequence[i] >= 2*sequence[i-1] <= m:\n                count += count_sequences(m,n,sequence[:i]+[sequence[i]]+sequence[i+1:])\n        return count\n    # Calculate the number of sequences\n    count = count_sequences(m,n,[])\n    # Return the total number of sequences\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    for i in range(m, n):\n        for j in range(2, m):\n            if j > i // 2 and j < i:\n                total_sequences += 1\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n\n    # Initialize the number of possible sequences to 0\n    total_sequences = 0\n\n    # Initialize the list to store the previous elements\n    previous_elements = []\n\n    # Loop until the length of the previous elements is n\n    while len(previous_elements) < n:\n        # If the length of the previous elements is less than n, add the next element to the list\n        if len(previous_elements) < m-1:\n            # Add the next element to the list\n            previous_elements.append(m)\n        # If the length of the previous elements is equal to n, add the next element to the list\n        else:\n            # Add the next element to the list\n            previous_elements.append(m-1)\n            # Add the previous element to the list\n            previous_elements.append(m)\n\n        # Calculate the total number of sequences by counting the number of unique elements in the list\n        total_sequences += len(set(previous_elements))\n\n    # Return the total number of sequences\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    # Initialize the count variable\n    count = 0\n\n    # Iterate through all the possible sequences of length n\n    for i in range(1, m + 1):\n        # Check if the i-th element is greater than or equal to twice the previous element\n        if i >= 2 * n:\n            # Increment the count variable\n            count += 1\n\n    # Return the count variable\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    for i in range(2, m + 1):\n        for j in range(i + 2, min(m, i + 4) + 1):\n            if i!= j and j - i <= n:\n                count += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return m\n    else:\n        count = 0\n        prev_num = 1\n        for num in range(2, m+1):\n            if num > 2*prev_num and num <= m:\n                count += get_total_number_of_sequences(num, n-1)\n            prev_num = num\n        return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    total_sequences = 0\n    current_sequence = [2]\n    while len(current_sequence) < n:\n        next_sequence = []\n        for i in range(len(current_sequence)):\n            if current_sequence[i] >= 2 * current_sequence[i - 1] and current_sequence[i] <= m:\n                next_sequence.append(current_sequence[i])\n        current_sequence = next_sequence\n        total_sequences += len(current_sequence)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m, n):\n    count = 0\n    prev = None\n    for i in range(1, m + 1):\n        if i >= 2 * prev and i <= m:\n            count += 1\n        prev = i\n    return count"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    for i in range(len(list1)-1, -1, -1):\n        list1[i] = list2\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Check if the two lists have the same length\n    if len(list1)!= len(list2):\n        print(\"Error: Lists must have the same length.\")\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2[-1]"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must have the same length.\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length1 = len(list1)\n    \n    # Loop through the first list from the end\n    for i in range(length1-1, -1, -1):\n        # Append the element at index i of the second list to the first list\n        list1.append(list2[i])"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Get the length of the first list\n    length = len(list1)\n    # Check if the length of the second list is greater than the length of the first list\n    if len(list2) > length:\n        # Replace the last element of the first list with the elements of the second list\n        list1[-1:] = list2\n    # If the length of the second list is less than or equal to the length of the first list, print a message that the two lists cannot be combined\n    else:\n        print(\"The two lists cannot be combined.\")"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # Get the length of the first list\n    n = len(list1)\n    # Check if the second list is longer than the first list\n    if len(list2) > n:\n        # Truncate the second list to the length of the first list\n        list2 = list2[:n]\n    # Replace the last element of the first list with the elements of the second list\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2[-1])\n    list1.pop()\n    list1.pop()\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    total_chars = len(str1)\n    return total_chars"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total_charac = 0\n    for char in str1:\n        total_charac += 1\n    return total_charac"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # convert the given number to a float and square it\n    x = float(N) * N\n\n    # find the square root of x\n    sqrt_x = math.sqrt(x)\n\n    # convert the square root back to an integer and add 1\n    next_sqrt_x = int(sqrt_x) + 1\n\n    # return the next perfect square greater than N\n    return next_sqrt_x"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function finds the next perfect square greater than a given number.\n    \"\"\"\n\n    def is_square(num):\n        \"\"\"\n        This function checks whether a given number is a perfect square or not.\n        \"\"\"\n        root = int(math.sqrt(num))\n        return root*root == num\n\n    def is_prime(num):\n        \"\"\"\n        This function checks whether a given number is prime or not.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def next_perfect_square(N):\n        \"\"\"\n        This function finds the next perfect square greater than a given number.\n        \"\"\"\n        # Convert N to a float to avoid integer division\n        N = float(N)\n        # Iterate until we find a square greater than N\n        while True:\n            # Calculate the square root of N\n            root = int(math.sqrt(N))\n            # If N is already a perfect square, return the next square\n            if root*root == N:\n                next_square = root * (root + 1)\n                # If N is less than the next square, return N\n                if N < next_square:\n                    return next_square\n                # If N is greater than the next square, return the next perfect square greater than N\n                else:\n                    # Find the next perfect square greater than N\n                    while True:\n                        N += 1\n                        if is_square(N) and is_prime(N):\n                            return N\n\n    # Call the next_perfect_square function with the given number N\n    result = next_perfect_square(N)\n    print(result)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 0:\n        N = -N # convert negative to positive\n    is_perfect_square = True\n    sqrt_N = math.sqrt(N)\n    if sqrt_N.is_integer():\n        is_perfect_square = False\n    else:\n        sqrt_N = int(sqrt_N) + 1\n    \n    next_sq = int(sqrt_N ** 2)\n    if next_sq > N:\n        return next_sq\n    else:\n        return next_Perfect_Square(N + 1)"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n\n    # initialize variables\n    curr_square = N\n    next_square = math.ceil(math.sqrt(N)) ** 2\n    \n    # loop until next_square > curr_square\n    while next_square > curr_square:\n        curr_square = next_square\n        next_square = math.ceil(math.sqrt(next_square)) ** 2\n    \n    # return next_square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = math.sqrt(N)\n    i = 1\n    while True:\n        sqrt_i = math.sqrt(i)\n        sqrt_j = math.sqrt(N - i**2)\n        if i + sqrt_j >= N:\n            i = (N - i**2)**0.5 + 1\n            break\n        i += 1\n    return i"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function takes a number as input and returns the next perfect square greater than the input number.\n    The next perfect square is the smallest number that is a perfect square and greater than the input number.\n    If no such number exists, the function returns None.\n    '''\n    if N < 2:\n        return None\n    sqrt_N = int(math.sqrt(N))\n    for i in range(sqrt_N+1):\n        square = i*i\n        if math.isqrt(square) == i:\n            next_square = square\n            break\n    else:\n        return None\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    while True:\n        N = sqrt_N + 1\n        sqrt_N = int(math.sqrt(N))\n        if math.isqrt(N) == sqrt_N:\n            break\n    return N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    This function takes a number N as input and returns the next perfect square number greater than N.\n    \"\"\"\n    # Calculate the square root of N\n    sqrt_N = math.sqrt(N)\n    # Round the square root to the nearest integer\n    sqrt_N = int(sqrt_N)\n    # Calculate the difference between sqrt_N and N\n    diff = sqrt_N - N\n    # Return the square of the square root of the difference plus the square of the difference itself\n    return int(math.sqrt(diff*diff + sqrt_N*sqrt_N))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Check if the given number is a perfect square\n    is_perfect_square = lambda x: math.isqrt(x) ** 2 == x\n\n    # Find the smallest perfect square greater than the given number\n    next_sqrt = math.sqrt(N) + 1\n\n    # While next square is not a perfect square, increment by 1 and check again\n    while not is_perfect_square(next_sqrt):\n        next_sqrt += 1\n\n    # Return the next perfect square greater than the given number\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    i = 0\n    while i <= 1:\n        i = i + 1\n        x = i * i\n        if x >= N:\n            break\n    return math.sqrt(x)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n    if arr[0] >= arr[1]:\n        if arr[1] >= arr[2]:\n            return arr[0] + arr[1] + arr[2]\n        else:\n            return arr[0] + arr[1]\n    else:\n        if arr[0] >= arr[2]:\n            return arr[0] + arr[1] + arr[2]\n        else:\n            return arr[1] + arr[2] + arr[0]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    max_sum = float('-inf')\n    left = 0\n    right = 0\n\n    while right < n - 1:\n        if arr[left] < arr[right]:\n            max_sum = max(max_sum, arr[left] + arr[right + 1])\n            left += 1\n        else:\n            max_sum = max(max_sum, arr[right] + arr[left])\n            right += 1\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3: \n        return max(arr)\n    \n    first_increasing = True\n    max_sum = float('-inf')\n    prev = float('-inf')\n    current_sum = 0\n    \n    for num in arr: \n        if num > prev: \n            if first_increasing: \n                max_sum = current_sum\n                first_increasing = False\n            current_sum += num\n            prev = num\n        elif num < prev: \n            current_sum -= num\n        else: \n            current_sum = 0\n            prev = num\n            \n    if first_increasing: \n        max_sum = current_sum\n        \n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    # Initialize variables\n    n = len(arr)\n    max_sum_l, max_sum_r = float('-inf'), float('-inf')\n    # Loop through the array and calculate the maximum sum of a bitonic subsequence to the left and right\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i-1]:\n                max_sum_l = max(max_sum_l, arr[i] + arr[i-1])\n            else:\n                max_sum_l = max(max_sum_l, arr[i])\n        else:\n            if arr[i] < arr[i-1]:\n                max_sum_r = max(max_sum_r, arr[i] + arr[i-1])\n            else:\n                max_sum_r = max(max_sum_r, arr[i])\n    # Return the maximum sum\n    return max(max_sum_l, max_sum_r)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n    max_sum = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            # increasing subsequence\n            if i == 1 or arr[i-2] < arr[i]:\n                max_sum = max(max_sum, arr[i])\n        elif arr[i] < arr[i-1]:\n            # decreasing subsequence\n            if i == len(arr)-1 or arr[i] > arr[i+1]:\n                max_sum = max(max_sum, arr[i])\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return 0\n\n    inc_sum = dec_sum = 0\n    inc_start = dec_start = -1\n    inc_end = dec_end = -1\n\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            if arr[i] > arr[i-1]:\n                if inc_start == -1:\n                    inc_start = i\n                inc_end = i\n                inc_sum += arr[i]\n            else:\n                if dec_start == -1:\n                    dec_start = i\n                dec_end = i\n                dec_sum += arr[i]\n        else:\n            if arr[i] < arr[i-1]:\n                if inc_start == -1:\n                    inc_start = i\n                inc_end = i\n                inc_sum += arr[i]\n            else:\n                if dec_start == -1:\n                    dec_start = i\n                dec_end = i\n                dec_sum += arr[i]\n\n    if inc_start!= -1 and dec_start!= -1:\n        if inc_end < dec_end:\n            return inc_sum + dec_sum - (arr[inc_end] * (inc_end - inc_start + 1))\n        else:\n            return dec_sum + inc_sum - (arr[dec_end] * (dec_end - dec_start + 1))\n    elif inc_start!= -1 and dec_start == -1:\n        return inc_sum - arr[inc_start]\n    elif dec_start!= -1 and inc_start == -1:\n        return dec_sum - arr[dec_start]\n    else:\n        return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return arr[0]\n    else:\n        if arr[0] < arr[1]:\n            max_left = max_sum(arr[1:])\n            max_right = max_sum(arr[2:])\n            return max(max_left, max_right) + arr[0]\n        else:\n            max_left = max_sum(arr[1:])\n            max_right = max_sum(arr[2:])\n            return max(max_left, max_right)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        elif arr[i] < max_ending_here:\n            max_ending_here = max(max_ending_here + arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here + arr[i], max_ending_here)\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Check if the array is empty\n    if len(arr) == 0:\n        return 0\n\n    # Initialize variables for sum and maximum sum\n    sum = arr[0]\n    max_sum = sum\n\n    # Check if the first element is increasing or decreasing\n    if arr[0] > arr[1]:\n        bitonic_pattern = \"Increasing\"\n    else:\n        bitonic_pattern = \"Decreasing\"\n\n    # Loop through the rest of the array\n    for i in range(1, len(arr)):\n        # Check if the current element is increasing or decreasing\n        if arr[i] > arr[i-1]:\n            bitonic_pattern = \"Increasing\"\n        else:\n            bitonic_pattern = \"Decreasing\"\n\n        # Update the sum if the bitonic pattern is increasing or the current element is greater than the previous element\n        if bitonic_pattern == \"Increasing\":\n            sum += arr[i]\n        elif bitonic_pattern == \"Decreasing\":\n            sum -= arr[i]\n\n        # Update the maximum sum if the current sum is greater than the current maximum sum\n        if sum > max_sum:\n            max_sum = sum\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # Create a copy of the input array\n    arr = arr.copy()\n    \n    # Sort the array in non-decreasing order\n    arr.sort()\n    \n    # Initialize the variables for the maximum sum and the index of the maximum sum\n    max_sum = arr[0]\n    max_index = 0\n    \n    # Check the number of elements in the array\n    for i in range(1, len(arr)):\n        # If the element is less than the current maximum sum, update the maximum sum and its index\n        if arr[i] < max_sum:\n            max_sum = arr[i]\n            max_index = i\n        # If the element is greater than the current maximum sum, check if it's a subsequence of increasing elements\n        elif arr[i] > max_sum and arr[i] < arr[max_index]:\n            # If it is, update the maximum sum and its index\n            max_sum = arr[i]\n            max_index = i\n    \n    # Return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Check if the input number is an integer or float\n    if not isinstance(number, int) and not isinstance(number, float):\n        raise TypeError(\"Input must be an integer or float.\")\n\n    # Check if the input number is negative\n    if number < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n\n    # Initialize variables\n    x = number\n    prev_x = 0\n    n = 0\n\n    # Keep iterating until the difference between x and the previous x is small enough\n    while abs(x - prev_x) > 10**-10:\n        prev_x = x\n        x = (x + number/x) / 2\n        n += 1\n\n    # Return the square root using the babylonian method\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2  # Start with an initial guess of the square root\n    while abs(guess*guess - number) > 0.00001:  # Keep iterating until the difference between the square of the guess and the number is less than 0.00001\n        guess = (guess + number / guess) / 2  # Calculate a new guess by averaging the old guess and the square of the old guess\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.5\n    epsilon = 1e-10\n\n    while True:\n        new_guess = (guess + number / guess) / 2\n        if abs(new_guess - guess) < epsilon:\n            return new_guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a, b, c, d = 1, 1, 1, 1\n    square_root = None\n\n    while square_root is None:\n        next_a = b**2 - 4*a*c\n        if next_a > 0:\n            a, b, c, d = next_a, b, c, d\n        else:\n            square_root = (-b + math.sqrt(b**2 - 4*a*c)) / (2*a)\n\n    return square_root"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while abs(guess**2 - number) >= 0.0001:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    y = (x + number // x) / 2.0  # Initial guess for the square root\n    while abs(x - y) > 1e-6:  # Loop until convergence\n        x = y\n        y = (x + number // x) / 2.0\n    return y"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables to track the current iteration and the previous two approximations\n    current_guess = number / 2\n    previous_guess = 0\n    previous_previous_guess = 0\n    \n    # Use the babylonian method to compute the square root\n    while True:\n        # Calculate the current approximation\n        current_guess = (current_guess + number / current_guess) / 2\n        \n        # Check if the current approximation is within the desired precision\n        if abs(current_guess - previous_guess) < 1e-15:\n            break\n        \n        # Update the previous guess variables\n        previous_guess = current_guess\n        previous_previous_guess = current_guess - previous_guess\n    \n    # Return the approximate square root\n    return current_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while abs(guess*guess - number) > 0.00001:\n        guess = (number/guess) + guess/2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        raise ValueError('The input number cannot be negative.')\n    guess = number / 2\n    while guess ** 2 > number:\n        guess = (guess + number / guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    while True:\n        if guess * guess == number:\n            return guess\n        elif guess * guess < number:\n            guess = guess + (number / guess)\n        else:\n            guess = guess - (number / guess)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n\n    n = len(str)\n\n    # create a 2D table to store the length of palindromic subsequences\n    table = [[0] * n for _ in range(n)]\n\n    # fill the table in bottom up manner\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                if j - i < 2:\n                    table[i][j] = 1\n                else:\n                    table[i][j] = table[i+1][j-1] + 2\n\n    # return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n\n    # Create a table to store the length of longest palindromic subsequence ending at each index\n    table = [[0] * n for _ in range(n)]\n\n    # Base case: if the length of the string is 1 or 0, then it is a palindrome\n    table[0][0] = 1\n\n    # Fill the table in bottom up manner\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                table[i][j] = table[i-1][j-1] + 2\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence ending at the last index\n    return table[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str): \n    # Initialize a list to store the length of the longest palindromic subsequence ending at each index in the string\n    l = [1] * len(str)\n\n    # Initialize a variable to store the maximum length of a palindromic subsequence found so far\n    max_l = 1\n\n    # Iterate through the string from the beginning to the end\n    for i in range(1, len(str)): \n        # Check if the character at the current index is a palindrome or not\n        if str[i] == str[i - 1]: \n            # If the character is a palindrome, set the length of the longest palindromic subsequence ending at this index as 2 + the length of the longest palindromic subsequence ending at the previous index\n            l[i] = 2 + l[i - 1]\n            # Update the maximum length of a palindromic subsequence found so far\n            max_l = max(max_l, l[i])\n        else: \n            # If the character is not a palindrome, set the length of the longest palindromic subsequence ending at this index as the maximum of 1 (the empty string) and 2 (the longest palindromic subsequence ending at the previous index)\n            l[i] = max(l[i - 1], 2)\n            # Update the maximum length of a palindromic subsequence found so far\n            max_l = max(max_l, l[i])\n\n    # Return the maximum length of a palindromic subsequence found so far\n    return max_l"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Algorithm: \n    - Initialize two variables'maxLength' and'start' to 0. \n    - Initialize a variable'maxLPS' to 0. \n    - Iterate through the string'str' and check if the current character is same as the next character. \n    - If they are same, then extend the subsequence by 1. \n    - Else, check if the current character is part of the subsequence formed by characters from start to i-1. \n    - If it is, then check if the current subsequence is longer than the current longest palindromic subsequence. \n    - If it is, then update the'maxLength' and'start' variables accordingly. \n    - Update'maxLPS' variable accordingly. \n    - Return'maxLPS' variable.\n    '''\n\n    # Initialize the variables\n    maxLength = 0\n    start = 0\n    maxLPS = 0\n\n    # Iterate through the string\n    for i in range(1, len(str)):\n\n        # If the current character and the next character are same, then extend the subsequence by 1\n        if str[i] == str[i-1]:\n            maxLength += 1\n\n        # If the current character and the next character are different, then check if the current character is part of the subsequence formed by characters from start to i-1\n        else:\n            # Check if the current character is part of the subsequence formed by characters from start to i-1\n            for j in range(start, i):\n                if str[j] == str[i]:\n                    # If it is, then check if the current subsequence is longer than the current longest palindromic subsequence\n                    if maxLength > maxLPS:\n                        maxLPS = maxLength\n                        start = j\n                        break\n                    else:\n                        # If it is not, then update the'maxLength' and'start' variables accordingly\n                        if maxLength > maxLength:\n                            maxLength = 1\n                            start = i\n                            break\n                        elif maxLength < maxLength:\n                            break\n\n    # Return the value of'maxLPS' variable\n    return maxLPS"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize a 2D array to store the length of the longest palindromic subsequence for all prefixes of the string\n    lps_array = [[0] * n for i in range(n)]\n    # Initialize the length of the longest palindromic subsequence for the empty prefix\n    lps_array[0][0] = 0\n    # Iterate through all prefixes of the string\n    for i in range(1, n):\n        # Iterate through all prefixes of the string that are not already included in the longest palindromic subsequence for the current prefix\n        for j in range(i):\n            # If the current prefix is a palindrome and the length of the current prefix is greater than the length of the longest palindromic subsequence for the current prefix, update the length of the longest palindromic subsequence for the current prefix\n            if str[i] == str[j] and (i - j <= 2 or lps_array[j+1][i-1] > lps_array[j][i]):\n                lps_array[i][j] = lps_array[j+1][i-1] + 2\n            # If the current prefix is not a palindrome and the length of the current prefix is greater than the length of the longest palindromic subsequence for the current prefix, update the length of the longest palindromic subsequence for the current prefix\n            else:\n                lps_array[i][j] = max(lps_array[j][i], lps_array[j+1][i])\n    # Return the length of the longest palindromic subsequence for the entire string\n    return lps_array[n-1][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str): \n    n = len(str) \n    # Create a 2D table to store the length of longest palindromic subsequence ending at each index \n    # in the string \n    table = [[0] * n for i in range(n)] \n\n    # Initialize the table \n    for i in range(1, n): \n        for j in range(i): \n            # If the characters are same, then check for subsequence ending at the previous index \n            if str[i] == str[j]: \n                if i - j <= 2: \n                    # If the length of the subsequence is 3 or less, then update the value of the table \n                    table[i][j] = 1\n                else: \n                    # If the length of the subsequence is greater than 3, then check for a longer subsequence ending at the previous index \n                    # and add 1 to the value of the table \n                    table[i][j] = 1 + table[i - 1][j - 1] \n            else: \n                table[i][j] = 0 \n\n    # Return the length of the longest palindromic subsequence \n    return table[n - 1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    # Initialize two arrays to store the length of the longest palindromic subsequences of odd and even length\n    # respectively\n    palindromes = [[1] * n for _ in range(n)]\n    palindromes_even = [[1] * n for _ in range(n)]\n    # Initialize variables to store the longest palindromic subsequence of odd and even length\n    longest_palindrome_odd = \"\"\n    longest_palindrome_even = \"\"\n    # Iterate over all possible substrings of the string and check if they are palindromes\n    for i in range(n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                palindromes[i][j] = palindromes[i+1][j-1] + 2\n                if palindromes[i][j] > len(longest_palindrome_odd):\n                    longest_palindrome_odd = str[i:j+1]\n                if palindromes_even[i][j] > len(longest_palindrome_even):\n                    longest_palindrome_even = str[i:j+1]\n    return longest_palindrome_odd, longest_palindrome_even"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize two variables to store the start and end indices of the longest palindromic subsequence\n    start = 0\n    end = 0\n    # Initialize a variable to store the length of the longest palindromic subsequence\n    max_len = 1\n\n    # Loop through each character in the string\n    for i in range(n):\n        # Compute the length of the longest palindromic subsequence ending at position i\n        left = i\n        right = i\n        while left >= 0 and right < n and str[left] == str[right]:\n            left -= 1\n            right += 1\n        # Update the start and end indices and the length of the longest palindromic subsequence if this is a longer palindromic subsequence\n        if right - left - 1 > max_len:\n            start = left + 1\n            end = right\n            max_len = right - left - 1\n\n    # Return the length of the longest palindromic subsequence\n    return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # Create a 2D table to store the lengths of substrings\n    table = [[0] * n for _ in range(n)]\n\n    # Fill the table in bottom-up manner\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                table[i][j] = 1\n            elif str[i] == str[j]:\n                table[i][j] = table[i+1][j-1] + 2\n            else:\n                table[i][j] = max(table[i+1][j], table[i][j-1])\n\n    # Return the length of the longest palindromic subsequence\n    return table[0][n-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    lps = [1] * n\n\n    # Calculate lengths of longest palindromic subsequences of prefixes of str\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                lps[i] = max(lps[i], lps[j] + 2)\n\n    return max(lps)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 1/(1/2 + 1/3 + 1/4 +... + 1/n)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # initialize a variable to store the sum of harmonics\n    sum_harmonics = 0\n    \n    # iterate from 1 to n-1\n    for i in range(1, n):\n        # calculate the harmonic of each number\n        harmonic = 1 / (i + 1)\n        # add the harmonic to the sum of harmonics\n        sum_harmonics += harmonic\n    \n    # return the sum of harmonics\n    return sum_harmonics"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    \"\"\"\n    This function takes an integer n as input and calculates the harmonic sum of n-1.\n    \"\"\"\n    harmonic_sum = 0\n    for i in range(n):\n        harmonic_sum += 1.0 / (i + 1)\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 1/(1/(2*(n-1))+1/(2*(n-2)))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic_sum = 0\n    for i in range(n-1):\n        harmonic_sum += 1/i\n    return harmonic_sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_of_harmonic = 0\n    for i in range(1, n):\n        sum_of_harmonic += 1.0 / i\n    return sum_of_harmonic"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Calculate the harmonic sum of n-1\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n\n    # Calculate the harmonic sum of n\n    return 2*sum"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return n\n    else:\n        return (1/n) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n * (1/n + 1/n - 1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1 / i\n    return sum"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    return list(set1.intersection(set2))"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n\n    # Create a dictionary to store the frequency of each element in array_nums1\n    freq_dict1 = {}\n    for num in array_nums1:\n        if num in freq_dict1:\n            freq_dict1[num] += 1\n        else:\n            freq_dict1[num] = 1\n\n    # Create a dictionary to store the frequency of each element in array_nums2\n    freq_dict2 = {}\n    for num in array_nums2:\n        if num in freq_dict2:\n            freq_dict2[num] += 1\n        else:\n            freq_dict2[num] = 1\n\n    # Find the common elements between array_nums1 and array_nums2\n    common_elements = []\n    for num in freq_dict1:\n        if num in freq_dict2 and freq_dict1[num] == freq_dict2[num]:\n            common_elements.append(num)\n\n    return common_elements"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Convert both arrays to sets to easily find their intersection\n    set_nums1 = set(array_nums1)\n    set_nums2 = set(array_nums2)\n    \n    # Find the intersection of the two sets\n    intersection = set_nums1.intersection(set_nums2)\n    \n    # Convert the intersection back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Finds the intersection of two arrays.\n\n    Args:\n    array_nums1 (list): The first array of integers.\n    array_nums2 (list): The second array of integers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n\n    # Create a dictionary to store the elements of the first array as keys and the frequency of each element as values.\n    freq_dict = {}\n    for num in array_nums1:\n        freq_dict[num] = freq_dict.get(num, 0) + 1\n\n    # Create a new list to store the intersection of the two arrays.\n    intersection = []\n\n    # Iterate over the elements of the second array and check if each element is present in the dictionary. If it is, add it to the intersection list.\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            intersection.append(num)\n            freq_dict[num] -= 1\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    This function takes two arrays as input, array_nums1 and array_nums2.\n    It then returns the intersection of the two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two lists of integers as input and returns a list of their intersection.\n    \"\"\"\n    # create a set to store the unique elements of array_nums1\n    unique_nums1 = set(array_nums1)\n    # create a set to store the common elements of array_nums1 and array_nums2\n    common_nums = set(array_nums1).intersection(set(array_nums2))\n    # create a list to store the intersection of common elements of array_nums1 and array_nums2\n    intersection = []\n    # iterate through the unique elements of array_nums1\n    for num in unique_nums1:\n        # if the number is present in common_nums, add it to the intersection list\n        if num in common_nums:\n            intersection.append(num)\n    # return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    This function takes two arrays as input and returns a new array containing the common elements.\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the first array\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # Create a new array to store the common elements\n    common_array = []\n\n    # Iterate through the second array and add the common elements to the new array\n    for num in array_nums2:\n        if num in freq_dict and freq_dict[num] > 0:\n            common_array.append(num)\n            freq_dict[num] -= 1\n\n    return common_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n\n    # create a set of unique values in array_nums1\n    unique_nums1 = set(array_nums1)\n\n    # iterate through array_nums2 and add each element to a set if it exists in unique_nums1\n    intersect_set = set()\n    for num in array_nums2:\n        if num in unique_nums1:\n            intersect_set.add(num)\n\n    # convert the intersect_set back to a list and return it\n    return list(intersect_set)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x):\n    '''\n    This function takes in a tuple and an element and counts the number of occurrences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup: \n        if i == x: \n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # use list comprehension to insert the element before each element in the list\n    result = [element] + list\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for item in list:\n        result.append(element)\n        result.append(item)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    # create a new list with the element inserted before each element in the original list\n    result = []\n    for i in range(len(lst)):\n        result.append(element)\n        result.append(lst[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list, element):\n    # Create an empty list to store the new list with the inserted element\n    new_list = []\n    \n    # Loop through each element in the original list\n    for i in range(len(list)):\n        # Add the original element to the new list\n        new_list.append(list[i])\n        # Add the inserted element to the new list before the original element\n        new_list.insert(i, element)\n        \n    # Return the new list with the inserted element\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    polar_list = []\n    for number in numbers:\n        r = cmath.sqrt(number.real**2 + number.imag**2)\n        phi = cmath.phase(number)\n        polar_list.append((r, phi))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        \n        # Print polar coordinates\n        print(r, theta, num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their polar coordinates.\n    '''\n    polar_coords = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        polar_coords.append((r, theta))\n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            magnitude = abs(num)\n            arg = cmath.phase(num)\n            print(f\"Magnitude: {magnitude}, Argument: {arg}\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    \n    for number in numbers:\n        real, imaginary = cmath.polar(number)\n        polar_coordinates.append((real, imaginary))\n    \n    return polar_coordinates\n"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        # convert to polar coordinates\n        r = abs(number)\n        phi = cmath.phase(number)\n        \n        # print polar coordinates\n        print(\"({}, {})\".format(r, phi))"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Convert a list of complex numbers to their polar coordinates.\n    \n    Args:\n    numbers (list): list of complex numbers to convert\n    \n    Returns:\n    list: list of complex numbers in polar coordinates\n    \"\"\"\n    \n    polar_coords = []\n    \n    for number in numbers:\n        # convert the complex number to polar coordinates using the cmath module\n        r = abs(number)\n        theta = cmath.phase(number)\n        \n        # add the polar coordinates to the list of polar coordinates\n        polar_coords.append((r, theta))\n    \n    return polar_coords"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    for num in numbers:\n        real, imag = cmath.polar(num)\n        print(f\"{num} in polar coordinates: ({real:.2f}, {imag:.2f})\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function takes a list of complex numbers as input and returns a list of their corresponding polar coordinates.\n    '''\n    polar_coordinates = []\n    for number in numbers:\n        r = abs(number)\n        theta = cmath.phase(number)\n        polar_coordinates.append((r, theta))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        real = num.real\n        imag = num.imag\n        mag = cmath.sqrt(real**2 + imag**2)\n        angle = cmath.phase(num)\n        print('Magnitude:', mag, 'Angle:', angle)"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(lst):\n    count = 0\n    for num in lst:\n        if isinstance(num, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    \"\"\"\n    Write a python function that returns the number of integer elements in a given list.\n    \"\"\"\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if type(element) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)-n+1):\n        comb = tuple(l[i:i+n])\n        combs.append(comb)\n    return combs"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for combo in combinations_with_replacement(l[i:], n):\n            result.append(tuple(combo))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations of length n from the list l, with repetition.\n    Return a list of tuples with each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if len(l) < n:\n        return []\n    \n    result = []\n    for comb in combinations_with_replacement(l, n):\n        result.append(tuple(comb))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l):\n        return []\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(lst, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(lst, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    colors = list(l) # duplicate colors in the same list\n    combinations = []\n    for i in range(len(colors) - n + 1):\n        combination = tuple(colors[i:i+n])\n        combinations.append(combination)\n    return combinations"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_prime(n):\n    '''\n    Returns True if n is a prime number, False otherwise.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n+1):\n        if all(num%i!=0 for i in range(2, int(num**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Find the maximum value in each tuple\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    \n    # If the maximum value in the first tuple is greater than the maximum value in the second tuple,\n    # swap the tuples\n    if max1 > max2:\n        test_tup1, test_tup2 = test_tup2, test_tup1\n    \n    # Return the maximum value in the first tuple\n    return max1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = test_tup1\n    else:\n        max_tup = test_tup2\n    \n    if test_tup1[1] > max_tup[1]:\n        max_tup = test_tup1\n    elif test_tup2[1] > max_tup[1]:\n        max_tup = test_tup2\n    \n    if test_tup1[2] > max_tup[2]:\n        max_tup = test_tup1\n    elif test_tup2[2] > max_tup[2]:\n        max_tup = test_tup2\n    \n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Create a dictionary to store the values and their indices in the tuples\n    dict1 = {}\n    dict2 = {}\n    # Loop through each element in each tuple and store their values and indices in the dictionary\n    for i in range(len(test_tup1)):\n        dict1[test_tup1[i]] = i\n    for i in range(len(test_tup2)):\n        dict2[test_tup2[i]] = i\n    # Initialize variables to store the indices of the maximum values in the dictionaries\n    max1 = 0\n    max2 = 0\n    # Loop through the elements in the dictionary until the maximum values are found\n    for key in dict1:\n        if key > dict1[key]:\n            max1 = dict1[key]\n    for key in dict2:\n        if key > dict2[key]:\n            max2 = dict2[key]\n    # Create a new tuple containing the maximum values from the two dictionaries\n    new_tup = tuple(sorted([dict1[max1], dict2[max2]]))\n    return new_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Create empty lists to store the maximum values\n    max_tup1 = []\n    max_tup2 = []\n\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Compare the current element in both tuples and append the maximum value to the corresponding list\n        if test_tup1[i] > test_tup2[i]:\n            max_tup1.append(test_tup1[i])\n            max_tup2.append(test_tup2[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup1.append(test_tup2[i])\n            max_tup2.append(test_tup1[i])\n        else:\n            max_tup1.append(test_tup1[i])\n            max_tup2.append(test_tup1[i])\n\n    # Return the maximum tuples\n    return (max_tup1, max_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if test_tup1[0] > test_tup2[0]:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Check if the first tuple is larger than the second\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    elif len(test_tup1) < len(test_tup2):\n        return test_tup2\n    else:\n        # If the tuples are equal in size, check if they contain all elements\n        for elem in test_tup1:\n            if elem not in test_tup2:\n                return test_tup1\n        for elem in test_tup2:\n            if elem not in test_tup1:\n                return test_tup2\n        # If all elements are present in both tuples, return the original tuple\n        return test_tup1"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n\n    if len(test_tup1) < len(test_tup2):\n        return maximize_elements(test_tup2, test_tup1)\n\n    max_val = float('-inf')\n    max_tup = None\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_val:\n            max_val = test_tup1[i]\n            max_tup = test_tup1\n\n    for i in range(len(test_tup2)):\n        if test_tup2[i] > max_val:\n            max_val = test_tup2[i]\n            max_tup = test_tup2\n\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n\n    # get the maximum element from each tuple using the max() function\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n\n    # check which element has the maximum value and return the tuple with that element\n    if max1 == max2:\n        return test_tup1\n    elif max1 > max2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # check if the tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    # create a list of tuples of equal length\n    max_list = []\n    for i in range(len(test_tup1)):\n        max_list.append((test_tup1[i], test_tup2[i]))\n    \n    # sort the list by the second element of each tuple\n    max_list.sort(key=lambda x: x[1])\n    \n    # return the second element of the first max_list tuple\n    return max_list[0][1]"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # Initialize variables\n    is_prime = [True] * (n+1)\n    is_prime[0] = is_prime[1] = False\n    p = 2\n    count = 0\n    \n    # Loop through the numbers up to sqrt(n)\n    while p**2 <= n:\n        if is_prime[p]:\n            # Mark all multiples of p as composite\n            for i in range(p**2, n+1, p):\n                is_prime[i] = False\n        p += 1\n    \n    # Loop through the remaining numbers and count primes\n    for i in range(2, n+1):\n        if is_prime[i]:\n            count += 1\n    \n    # Return the nth newman-shanks-williams prime number\n    return p**2 if count == n else None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # initialize variables\n    i = 2\n    j = 3\n    k = 5\n    max_prime = n\n\n    while max_prime > 1:\n        # check for primality using Newman-Shanks-Williams algorithm\n        if i * i > max_prime:\n            if j * j > max_prime:\n                if k * k > max_prime:\n                    max_prime = k\n                k += 2\n            j += 2\n        else:\n            i += 2\n        max_prime = k\n\n    return max_prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # initialize variables\n    prime = 2\n    count = 0\n\n    # loop until nth newman prime is found\n    while count < n:\n        # check if prime number\n        is_prime = True\n        for i in range(2, int(prime**0.5)+1):\n            if prime % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n        # increment prime number\n        prime += 1\n\n    # return nth newman prime\n    return prime"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    i = 2\n    while count < n:\n        if is_newman_prime(i):\n            count += 1\n        i += 1\n    return i - 1\n\ndef is_newman_prime(n):\n    '''\n    Write a function to check if a number is a newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize count and current number to 1\n    count, current = 0, 1\n    \n    # loop through the sequence of primes until n is reached\n    while count < n:\n        # check if the current number is prime\n        if is_prime(current):\n            count += 1\n        # increment the current number by 1\n        current += 1\n    \n    # return the nth prime number\n    return current\n\ndef is_prime(num):\n    '''\n    Check if a given number is prime.\n    '''\n    # check if the number is less than 2\n    if num < 2:\n        return False\n    \n    # loop through the range of numbers from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        # check if the number is divisible by i\n        if num % i == 0:\n            return False\n    \n    # if the loop completes without finding a divisor, then the number is prime\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        count = 0\n        num = 1\n        while count < n:\n            if is_prime(num):\n                count += 1\n            num += 1\n        return num - 1\n\n    return nth_prime(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n\n    # Initialize a list to store the prime numbers \n    prime_list = [] \n\n    # Initialize a variable to store the current prime number \n    current_prime = 2 \n\n    # Loop until the list contains n primes \n    while len(prime_list) < n: \n\n        # Check if the current prime is prime and not in the list \n        if all(current_prime % i!= 0 for i in range(2, int(current_prime**0.5) + 1)) and current_prime not in prime_list:\n\n            # Add the current prime to the list \n            prime_list.append(current_prime) \n\n        # Increment the current prime by 1 \n        current_prime += 1 \n\n    # Return the nth prime in the list \n    return prime_list[n-1] "
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = [True] * (n+1) \n    sieve[0], sieve[1] = False, False \n    p = 2 \n    while p * p <= n: \n        if sieve[p]: \n            for i in range(p * p, n+1, p): \n                sieve[i] = False \n        p += 1 \n    return [i for i in range(2, n+1) if sieve[i]]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    a = 2\n    count = 0\n    while count < n:\n        if is_prime(a):\n            count += 1\n        a += 1\n\n    return a"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # initialize variables\n    p = 2 # start with 2 as 1 is not prime\n    count = 0 # count number of primes found\n    limit = n + 1 # stop counting when n is reached\n    # loop through odd numbers up to limit\n    while p <= limit:\n        # check if p is prime\n        if is_prime(p):\n            count += 1 # increment count\n            # if count is equal to n, return p\n            if count == n:\n                return p\n        p += 2 # increment p\n    \n    # if n is not found, return None\n    return None\n\ndef is_prime(n):\n    '''\n    Write a function to determine if a number is prime.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if both tuples are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return\n\n    # Create an empty list to store the element-wise division result\n    result_list = []\n\n    # Perform element-wise division on the tuples and append the result to the result list\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] / test_tup2[i])\n\n    # Return the result list as the final result\n    return result_list"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] / test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # initialize result tuple\n    result_tup = ()\n    \n    # iterate through elements in both tuples\n    for i in range(len(test_tup1)):\n        # perform element-wise division and append result to result tuple\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    \n    # return result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == type(test_tup2[i]):\n            result_list.append(test_tup1[i] / test_tup2[i])\n        else:\n            result_list.append(0)\n    return tuple(result_list)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the length of the two tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal.\")\n    # Create an empty list to store the result\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Perform element-wise division\n        result.append(test_tup1[i] / test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    \"\"\"\n    # Check if the lengths of the input tuples are equal\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the input tuples should be equal.\")\n    \n    # Perform the element-wise division operation across the tuples\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] / test_tup2[i])\n    \n    return tuple(result_tup)"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length\")\n        return\n\n    result_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            print(\"Error: The tuple elements cannot be zero\")\n            return\n        result_tup.append(test_tup1[i] / test_tup2[i])\n\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create an empty list to store the first part of the list\n    part1 = []\n\n    # Loop through the list and add elements to the first part of the list\n    for i in range(L):\n        if i < len(list1):\n            part1.append(list1[i])\n\n    # Create an empty list to store the second part of the list\n    part2 = []\n\n    # Loop through the list from the length of the first part to the end\n    for i in range(L, len(list1)):\n        if i < len(list1):\n            part2.append(list1[i])\n\n    # Return the two parts of the list in a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    half = len(list1) // 2\n    return (list1[:half], list1[half:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) % 2 == 0:\n        mid = len(lst) // 2\n        lst1 = lst[:mid]\n        lst2 = lst[mid:]\n    else:\n        mid = (len(lst) - 1) // 2\n        lst1 = lst[:mid]\n        lst2 = lst[mid+1:]\n    return (lst1, lst2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    if len(list1) < L:\n        raise ValueError(\"Length of list1 is less than L.\")\n    mid = L // 2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    mid = len(list1)//2\n    return (list1[:mid], list1[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Create a list of tuples to store the two parts of the list\n    result = []\n    # Use the slicing feature of lists to split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n    # Add the two parts to the result list as tuples\n    result.append(part1)\n    result.append(part2)\n    # Return the resulting list of tuples\n    return tuple(result)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(lst, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L.\n    The function returns the resulting lists in a tuple.\n    '''\n    length = len(lst)\n    half = length // 2\n    first_part = lst[:half]\n    second_part = lst[half:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Find the length of the first part of the list\n    length1 = len(list1[:L])\n    # Create a new list with the first part of the list\n    list1_part1 = list1[:length1]\n    # Create a new list with the remaining elements of the list\n    list1_part2 = list1[length1:]\n    # Return the two parts as a tuple\n    return (list1_part1, list1_part2)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 0\n    if h_age < 5:\n        dog_years = h_age * 7\n    elif h_age < 12:\n        dog_years = (h_age - 5) * 5\n    else:\n        dog_years = (h_age - 12) * 3\n    return dog_years\n"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Convert the height in inches to centimeters\n    height_cm = h_age * 2.54\n    \n    # Calculate the dog's age in dog years\n    dog_years = height_cm / 12.0\n    \n    # Return the dog's age in dog years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = 7 * h_age\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n    \"\"\"\n    dog_years = 7\n    return h_age * dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    years = h_age * 7\n    print(\"Dog's age in dog's years:\", years)"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    age_in_dog_years = h_age * 7\n    return age_in_dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert hours to days\n    days = h_age * 24\n    # calculate years from days\n    years = days / 365.25\n    # return the age in dog's years\n    return years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_dog_years = h_age * 7\n    return age_in_dog_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        sublist = S[i:i+step]\n        result.append(sublist)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    results = []\n    for i in range(0, len(S), step):\n        results.append(S[i:i+step])\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_split = []\n    for i in range(0, len(S), step):\n        S_split.append(S[i:i+step])\n    return S_split"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # create an empty list to hold the resulting lists\n    results = []\n\n    # iterate through the list, splitting it every n elements\n    for i in range(0, len(S), step):\n        # create a new list with the current slice of the list\n        sublist = S[i:i+step]\n        # add the new list to the results list\n        results.append(sublist)\n\n    return results"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    if not isinstance(S, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(step, int):\n        raise TypeError(\"Step must be an integer.\")\n    if step <= 0:\n        raise ValueError(\"Step must be a positive integer.\")\n    \n    result = []\n    n = len(S)\n    for i in range(0, n, step):\n        result.append(S[i:i+step])\n    \n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    n = step\n    while n <= len(S):\n        result.append(S[:n])\n        S = S[n:]\n        n += step\n    result.append(S)\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    count = 1\n    for element in S:\n        if count % step == 0:\n            split_list.append([element])\n        else:\n            split_list[-1].append(element)\n        count += 1\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    n = step if step > 0 else -step\n    result = []\n    for i in range(0, len(S), n):\n        result.append(S[i:i+n])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = 6 * l * l\n    print(f\"The lateral surface area of a cube with side length {l} is {area}\")\n"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface_area = 6 * (l * l) + 12 * (l * l) + 8 * l\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l**2)*(4)"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * l * l\n    return 6 * s"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n\n    # Calculate the volume of the cube\n    volume = l * l * l\n    \n    # Calculate the surface area of the cube\n    surface_area = 6 * volume\n    \n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 1\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # Initialize the sum of squares to 0\n    sum_of_squares = 0\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i*i\n    # Return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Calculate the square of the current odd natural number\n        square = i * i\n        # Add the square to the sum\n        total += square\n    \n    # Return the sum of the squares of the first n odd natural numbers\n    return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd number to the sum of squares\n        sum_of_squares += i*i\n        \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of squares of odd natural numbers\n    sum_of_squares = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the current odd natural number to the sum of squares\n        sum_of_squares += i*i\n    \n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    # initialize the sum to 0\n    sum = 0\n    \n    # loop through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of the odd natural number to the sum\n        sum += i**2\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Error: n must be a positive integer.\"\n    elif n == 1:\n        return 0\n    else:\n        return sum([i**2 for i in range(1, n+1, 2)])"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # initialize sum variable\n    sum_of_squares = 0\n\n    # iterate through the first n odd natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of each odd natural number to the sum\n        sum_of_squares += i*i\n\n    # return the sum of squares\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0  \n    for i in range(1, n+1, 2):  \n        sum += i*i  \n    return sum  "
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    if n < 1:\n        return None\n    if n == 1:\n        return \"*\"\n    if n == 2:\n        return \"**\"\n    if n == 3:\n        return \"***\"\n    result = \"\"\n    for i in range(n-1):\n        result += \" \"\n    result += \"*\"\n    result += \"\\n\"\n    for i in range(n-1):\n        result += \" \"\n    result += \" \"\n    result += \"\\n\"\n    for i in range(n-2):\n        result += \"*\"\n        result += \"\\n\"\n    result += \" \"\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return '*'\n    else:\n        return find_star_num(n - 1) + '*'"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize variables\n    if n <= 0:\n        return \"Please enter a positive integer greater than zero.\"\n\n    if n == 1:\n        return \"1 star\"\n\n    if n == 2:\n        return \"2 stars\"\n\n    # Calculate the star number\n    star_num = \"2 \" * (n - 2)\n\n    # Return the calculated star number\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Define the base case for when n is 1\n    if n == 1:\n        return '*'\n    \n    # Define the recursive case for when n is greater than 1\n    else:\n        # Return the result of multiplying the n-1th star number and the n-th star number\n        return n * find_star_num(n-1)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    if n == 1:\n        return \"*\"\n    elif n == 2:\n        return \"**\"\n    else:\n        for i in range(3, n+1):\n            print(\"*\", end=\"\")\n        return \"\\n\""
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n == 1:\n        return \"***\"\n    elif n == 2:\n        return \"**\"\n    else:\n        result = \"\"\n        for i in range(1, n//2+1):\n            result += \"*\"\n        result += \"**\"\n        for i in range(n//2-1, 0, -1):\n            result += \"*\"\n        return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    result = 1\n    \n    for i in range(1, n+1):\n        result *= i\n        \n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the variable to hold the result\n    result = \"\"\n\n    # loop from 1 to n\n    for i in range(1, n+1): \n        # add an asterisk to the result variable each time\n        result += \"*\"\n\n    # return the result\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1, n+1): \n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    # initialize the value of the star number\n    if n == 1:\n        return \"\u2605\"\n    elif n == 2:\n        return \"\u2605\u2605\"\n    elif n == 3:\n        return \"\u2605\u2605\u2605\"\n    elif n == 4:\n        return \"\u2605\u2605\u2605\u2605\"\n    elif n == 5:\n        return \"\u2605\u2605\u2605\u2605\u2605\"\n    else:\n        return \"Invalid input. Please enter a number between 1 and 5.\""
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, str):\n        k = k.upper()\n    if isinstance(k, int):\n        return k\n    if k.isalpha():\n        return ord(k)\n    return None"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_value = ord(k)\n    print(\"The ascii value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    # converting k to uppercase to get ascii value of uppercase characters\n    k = k.upper()\n\n    # converting each character in k to its ascii value\n    ascii_value_list = [ord(char) for char in k]\n\n    # finding the maximum ascii value in the list\n    max_ascii_value = max(ascii_value_list)\n\n    # finding the minimum ascii value in the list\n    min_ascii_value = min(ascii_value_list)\n\n    # finding the difference between the maximum and minimum ascii value\n    difference = max_ascii_value - min_ascii_value\n\n    # finding the average ascii value of the list\n    average_ascii_value = sum(ascii_value_list) / len(ascii_value_list)\n\n    # returning the average ascii value\n    return average_ascii_value"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            if arr[i] % 2 == 0:\n                even_sum += arr[i]\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions of the list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    count_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count_even += 1\n    if count_even == 0:\n        return 0\n    else:\n        return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    even_index = []\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            even_index.append(i)\n    return sum_even, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if even_index % 2 == 0:\n                sum_even += arr[i]\n            else:\n                even_index += 1\n\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum_of_even_numbers += arr[i]\n    return sum_of_even_numbers"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n            count += 1\n        if count % 2 == 0:\n            print(\"Sum of even numbers at even positions:\", sum)\n            break"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    power_sum = 0\n    for i in range(1,n+1,2):\n        power_sum += i**5\n    return power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_sum = 0\n    for i in range(2, n+1, 2):\n        even_sum += i**5\n    return even_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    # Initialize the sum variable to zero\n    sum_even_power_n = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the even natural number raised to the fifth power\n        power_5 = i ** 5\n        # Check if the even natural number is even and add it to the sum if it is\n        if i % 2 == 0:\n            sum_even_power_n += power_5\n\n    return sum_even_power_n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    total = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            total += i ** 5\n    return total"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n\n    sum_power_5 = 0\n\n    for i in range(n):\n        sum_power_5 += (i+1)**5\n\n    return sum_power_5"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for item in test_list:\n        result.append(item[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tuple in test_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for tup in test_list:\n        result.append(tup[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [item[-1] for item in test_list]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        print(\"Resulting tuple:\", result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if the input tuples are of equal length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples must have equal lengths.\")\n        return\n    \n    # create a new tuple that contains the results of the subtraction\n    result_tup = tuple(x - y for x, y in zip(test_tup1, test_tup2))\n    \n    # print the result tuple\n    print(\"The result tuple is:\", result_tup)"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tup = []\n    for i in range(len(test_tup1)):\n        sub_tup.append(test_tup1[i] - test_tup2[i])\n    return sub_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n        \n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('The two input tuples must have the same length.')\n    \n    # initialize a new tuple to store the result\n    result_tup = ()\n    \n    # loop through the first tuple\n    for i in range(len(test_tup1)):\n        # check if the current index has the same element in both tuples\n        if test_tup1[i] == test_tup2[i]:\n            # if so, add the difference between the current element of the first tuple and the current element of the second tuple to the result tuple\n            result_tup += (test_tup1[i] - test_tup2[i],)\n        # if not, add the element of the first tuple to the result tuple\n        else:\n            result_tup += (test_tup1[i],)\n    \n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize variables\n    a = 0\n    b = 0\n    sum_even_index_coeffs = 0\n\n    # Iterate through values of a and b\n    for i in range(2, n+1):\n        # Calculate the value of a\n        a = i - 1\n\n        # Calculate the value of b\n        b = n // i\n\n        # Calculate the value of the binomial coefficient\n        binomial_coeff = math.comb(n, a)\n\n        # Check if the value of b is even\n        if b % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum_even_index_coeffs += binomial_coeff\n\n    # Return the sum of even index binomial coefficients\n    return sum_even_index_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += math.comb(n, i-1)*2**(i-1)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    coeff_sum = 0\n    for i in range(2, n+1):\n        coeff_sum += math.comb(n, i) * (2 * i - 1)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    coeff_sum = 0\n    for i in range(n+1):\n        coeff_sum += math.comb(n, i)\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # Initialize the sum of even index binomial coefficients to 0\n    even_binomial_sum = 0\n\n    # Calculate the even index binomial coefficients using the formula: C(n, 2i) = (n choose i) / (2 * (n choose i - 1))\n    for i in range(2 * n): \n        even_binomial_sum += math.comb(n, 2 * i)\n\n    return even_binomial_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Loop through all numbers from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the binomial coefficient for i and n-i\n        binomial_coeff = math.comb(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n\n            # Add the even index binomial coefficient to the sum\n            total_sum += binomial_coeff\n\n    return total_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    if n <= 0:\n        return \"Error: Input must be a positive integer.\"\n    \n    sum_even_binomial_coeffs = 0\n    for i in range(2, n+1):\n        binomial_coeff = math.comb(i, 2)\n        if i % 2 == 0:\n            sum_even_binomial_coeffs += binomial_coeff\n    \n    return sum_even_binomial_coeffs"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    sum_even_coeff = 0\n    for i in range(2, n+1):\n        sum_even_coeff += math.comb(n, 2*i-2)\n    return sum_even_coeff"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = (1/3) * 3.14 * r * r * h\n    return v"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # Formula for volume of a cylinder: V = \u03c0 * r^2 * h\n    volume = 3.14 * r ** 2 * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159 * r**2 * h) / 3\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14 * (r**2) * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # calculate volume\n    vol = (1/3) * (3.141592653589793 * r**2 * h)\n    \n    # return volume\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r ** 2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = ((1/3)*pi*(r**3)+(1/2)*pi*r*h)\n    return vol\n\nprint(volume_cylinder(2,5))"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * r * r * h / 3\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14 * r * r * h  # formula for cylinder volume using formula for volume of a sphere\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    This function takes in a dictionary and an integer `n` and returns a new dictionary containing only the entries in `dict` where the value is greater than or equal to `n`.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) // 2:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            break\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i < len(test_tup) - 1:\n            if test_tup[i] == test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)-1, -1, -1):\n        if test_tup[i]!= test_tup[i+1]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup)-1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] < test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        if test_tup[i-1] == test_tup[i]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i > 0:\n            count += 1\n            if test_tup[i] == test_tup[i-1]:\n                return count\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    decagonal = 1\n    for i in range(1, n + 1):\n        decagonal = (decagonal * (3 * i - 1)) // 2\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Loop from 1 to n\n    for i in range(1, n+1):\n\n        # Calculate the sum of the squares of the digits of i\n        square_sum = sum(int(digit)**2 for digit in str(i))\n\n        # If the sum is equal to the square of n, then return i as the decagonal number\n        if square_sum == n**2:\n            return i"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 5\n    else:\n        return (n * 5) + (is_num_decagonal(n - 1) - 1)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    # calculate the number of rows in the decagonal pyramid\n    rows = n * (2 * n - 1) // 2\n    \n    # calculate the number of columns in each row\n    cols = range(1, rows + 1)\n    \n    # calculate the number of spaces in each row\n    spaces = range(1, rows + 1)\n    \n    # calculate the decagonal number\n    decagonal = 0\n    for i in range(rows):\n        for j in range(cols[i]):\n            decagonal += spaces[i]\n        for k in range(cols[i] - 1, -1, -1):\n            decagonal += spaces[i]\n    \n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Base case: if n is 1, return 1\n    if n == 1: \n        return 1\n\n    # Base case: if n is even, return 2n - 1\n    if n % 2 == 0: \n        return 2 * n - 1\n\n    # Calculate the number of rows needed for n\n    num_rows = n * (3 * n - 1) // 2\n\n    # Calculate the nth row of Pascal's triangle\n    row = [1] * (num_rows + 1)\n\n    # Calculate the nth decagonal number\n    for i in range(2, num_rows + 1):\n        for j in range(1, i + 1):\n            row[i] += row[j - 1] * row[i - j]\n\n    # Return the nth decagonal number\n    return row[n]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n < 1: \n        return False \n    else: \n        return (5 * n * n) - 10"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    if n < 0:\n        return None\n    \n    decagonal_num = 0\n    for i in range(1, n+1):\n        decagonal_num += (i*i) * (2*i-1)\n    \n    return decagonal_num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Find the sum of the squares of the first n odd numbers\n    first_n_odd_squares = sum(i*i for i in range(1, n+1, 2))\n    # Subtract 1 from the sum to get the nth decagonal number\n    return first_n_odd_squares - 1"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += i * (i+1) / 2\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    This function checks whether a given number is a decagonal number or not.\n    A decagonal number is a number whose sum of cubes of its digits is equal to the number itself.\n    '''\n    num = n\n    digits_sum = 0\n    while num > 0:\n        digit = num % 10\n        digits_sum += digit ** 3\n        num //= 10\n    if digits_sum == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Initialize the index variable\n    index = 0\n\n    # Loop through the array\n    while index < len(dlist):\n        # If the current element matches the item, return the index and the boolean True\n        if dlist[index] == item:\n            return (True, index)\n        # Increment the index variable\n        index += 1\n\n    # If the element is not found, return the index and the boolean False\n    return (False, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    # Initialize variables\n    found = False\n    index = -1\n\n    # Iterate through the array\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            index = i\n            break\n\n    # Return the result as a tuple\n    return (found, index)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to remove any duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for element in test_list:\n        if element in seen:\n            return False\n        seen.add(element)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    This function takes a list as input and returns True if all its elements are unique and False otherwise.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store the unique elements of the list\n    unique_set = set(test_list)\n    # If the length of the set is equal to the length of the list, then all elements are unique\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n\n    # Create a set to store unique elements\n    unique_set = set()\n\n    # Iterate over the list and add each element to the set\n    for element in test_list:\n        unique_set.add(element)\n\n    # Check if the length of the set is equal to the length of the original list\n    if len(unique_set) == len(test_list):\n        print(\"The given list is unique.\")\n    else:\n        print(\"The given list is not unique.\")"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for element in test_list:\n        if element not in unique_list:\n            unique_list.append(element)\n    if len(unique_list) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Convert the list to a set to check for duplicates\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # create a set of the elements of the list to check for uniqueness\n    unique_set = set(test_list)\n    # check if the length of the set is the same as the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): A list of numbers.\n    nums2 (list): A list of numbers with the same length as nums1.\n\n    Returns:\n    list: A new list containing the differences between the corresponding elements in nums1 and nums2.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    return [x - y for x, y in zip(nums1, nums2)]"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: The two lists must have the same length\")\n        return None\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have equal lengths.\")\n    else:\n        for i in range(len(nums1)):\n            nums1[i] = nums1[i] - nums2[i]\n        print(\"Subtraction result:\", nums1)"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Lists must have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n    \"\"\"\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to subtract two lists element-wise.\n\n    Parameters:\n    nums1 (list): The first list to be subtracted.\n    nums2 (list): The second list to be subtracted.\n\n    Returns:\n    A list containing the difference between the two input lists.\n    \"\"\"\n\n    # If either list is empty, return an empty list\n    if not nums1 and not nums2:\n        return []\n\n    # If the first list is shorter, extend it with zeros to match the second list's length\n    if len(nums1) < len(nums2):\n        nums1 = nums1 + [0] * (len(nums2) - len(nums1))\n\n    # Initialize the result list with zeros\n    result = [0] * len(nums1)\n\n    # Subtract each element of the first list from its corresponding element of the second list\n    for i in range(len(nums1)):\n        result[i] = nums1[i] - nums2[i]\n\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = [nums1[i] - nums2[i] for i in range(len(nums1))]\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    \"\"\"\n    This function takes an integer as input and checks if the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    digits = []\n    freq = {}\n    \n    # Convert the integer to a string and split it into digits\n    for d in str(n):\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    # Iterate over the digits in the frequency dictionary\n    for d in freq:\n        # If the digit frequency is greater than the digit itself, return False\n        if freq[d] > d:\n            return False\n    \n    # If no digit frequency is greater than the digit itself, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    This function takes an integer and checks whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digit_count = {}\n    for digit in str(n):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n\n    for digit, count in digit_count.items():\n        if count > digit:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for digit in str(n):\n        count = 0\n        for i in str(n):\n            if int(digit) == int(i):\n                count += 1\n        if count > int(digit):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for d in str(n):\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    \n    for d in freq:\n        if freq[d] > int(d):\n            return False\n    \n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n): \n    # Convert the integer to a string and split it into its digits\n    digits = str(n)\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq_dict = {}\n\n    # Iterate over each digit and update the frequency in the dictionary\n    for digit in digits:\n        freq_dict[digit] = freq_dict.get(digit, 0) + 1\n\n    # Iterate over each digit in the dictionary and check if the frequency is less than or equal to the digit itself\n    for digit, freq in freq_dict.items():\n        if freq > digit:\n            return False\n\n    # If all digits have a frequency less than or equal to their value, then the integer is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    '''\n    This function takes an integer as input and returns True if the frequency of each digit in the integer is less than or equal to the digit itself, and False otherwise.\n    '''\n    freq = {}\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10  # initialize frequency array with zeros\n\n    for digit in digits:\n        freq[digit] += 1  # increment frequency count for each digit\n\n    for i in range(10):  # iterate through all digits\n        if freq[i] > i:  # check if digit has a frequency greater than itself\n            return False\n\n    return True  # if all digits have frequency less than or equal to themselves, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    # create a dictionary to store the frequency of each digit in the integer\n    freq = {}\n    \n    # loop through each digit in the integer\n    for digit in str(n):\n        # if the digit is already in the dictionary, increment its count by 1\n        if digit in freq:\n            freq[digit] += 1\n        # if the digit is not in the dictionary, add it with a count of 1\n        else:\n            freq[digit] = 1\n    \n    # loop through each digit in the integer again and check its frequency\n    for digit in freq:\n        # if the frequency of the digit is greater than the digit itself, return False\n        if freq[digit] > int(digit):\n            return False\n    \n    # if no errors are found, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = {}\n    for digit in str(n):\n        freq[digit] = freq.get(digit, 0) + 1\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    digits = [int(d) for d in str(n)]\n    freq = {}\n\n    for digit in digits:\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    for digit in freq:\n        if freq[digit] > digit:\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(lst, el):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(lst) == 0:\n        return True\n    elif lst[0] == el:\n        return check_element(lst[1:], el)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    if all(x == element for x in list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if all(list[i] == element for i in range(len(list))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 0:\n        return False\n    elif list[0] == element:\n        return True\n    else:\n        return check_element(list[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) > 0 and list[0] == element:\n        return True\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        for i in range(len(list)):\n            if list[i] == element:\n                return False\n        return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    if list[0] == element:\n        for item in list:\n            if item!= element:\n                return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'\\ba{2,3}\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    matches = re.findall(pattern, text)\n    return bool(matches)"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a[b]{2,3}'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.*?b{2,3}'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(?:b(?:b)?)?')\n    if pattern.search(text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def text_match_two_three(text):\n    pattern = r'a(?:b(?:b(?:b(?:b))?)?)?'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = re.compile(r'a(b){2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize the maximum sum and the sub-array with the maximum sum\n    max_sum = float('-inf')\n    max_subarray = [float('-inf')]\n    # Repeat the given array k times\n    for i in range(k):\n        # Find the sub-array with the maximum sum\n        for j in range(n):\n            max_sum = max(max_sum, a[j])\n            max_subarray.append(max_sum)\n        # Reverse the sub-array and remove the first element\n        max_subarray = max_subarray[::-1][1:]\n    # Find the maximum sub-array\n    max_sum = max(max_sum, max(max_subarray))\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if i % k == 0:\n            max_sum = max(max_sum, current_sum)\n            current_sum = a[i]\n    max_sum = max(max_sum, current_sum)\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Get the maximum sub-array sum of a contiguous array\n    def max_subarray_sum(a, n):\n        max_sum = float('-inf')\n        current_sum = 0\n        for i in range(n):\n            current_sum += a[i]\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    # Get the sum of the modified array\n    modified_sum = 0\n    for i in range(k):\n        modified_sum += a[0] + a[-1] * k\n\n    # Find the largest sum of a contiguous array in the modified array\n    max_sum = max_subarray_sum(a, n)\n\n    # Check if the maximum sub-array sum of the modified array is greater than the maximum sub-array sum of the original array\n    if max_sum > modified_sum:\n        return max_sum\n    else:\n        return modified_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_subarray = []\n\n    # Generate modified array with repeated elements\n    modified_array = a * k\n\n    # Iterate over the modified array\n    for i in range(n):\n        # Calculate the sum of the current subarray\n        subarray_sum = 0\n        for j in range(i, i+k):\n            subarray_sum += modified_array[j]\n\n        # Update max_sum and max_subarray if necessary\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n            max_subarray = modified_array[i:i+k]\n\n    # Return the max sum and the max subarray\n    return max_sum, max_subarray"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Define a function to find the maximum sum of a contiguous subarray\n    def max_subarray_sum(a, n):\n        max_sum = a[0]\n        current_sum = a[0]\n        for i in range(1, n):\n            current_sum = max(a[i], current_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    # Find the maximum sum of a contiguous subarray in the original array\n    max_sum_original = max_subarray_sum(a, n)\n\n    # Create a modified array by repeating the original array k times\n    modified_array = []\n    for _ in range(k):\n        for i in range(n):\n            modified_array.append(a[i])\n\n    # Find the maximum sum of a contiguous subarray in the modified array\n    max_sum_modified = max_subarray_sum(modified_array, n)\n\n    # Return the maximum sum of a contiguous subarray in the original array\n    return max_sum_original"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    # Initialize the maximum sum to be the first element of the array\n    max_sum = a[0]\n\n    # Initialize the array of repeated elements with the first element of the array\n    repeated_elements = [a[0]]\n\n    # Iterate over the remaining elements of the array\n    for i in range(1, n):\n        # Calculate the sum of the repeated array\n        repeated_sum = repeated_elements[i-1] + a[i]\n\n        # If the sum is larger than the current maximum sum, update the maximum sum\n        if repeated_sum > max_sum:\n            max_sum = repeated_sum\n\n        # If the array has reached the end, append the current element to the repeated elements array\n        if i == n-1:\n            repeated_elements.append(a[i])\n\n    # Return the maximum sum of the repeated array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = float('-inf')\n    max_sub_array = [0] * k\n\n    for i in range(n):\n        if i < k - 1:\n            max_sub_array[i] = a[i]\n        else:\n            max_sub_array[i % k] = a[i]\n\n        current_sum = sum(max_sub_array)\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    total_sum = sum(a)\n    max_sum = total_sum\n    repeated_sum = k * total_sum\n    \n    for i in range(n - k):\n        temp_sum = a[i] * (k - 1) + a[i + 1] * k\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n        \n        if temp_sum == repeated_sum:\n            return max_sum\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n    a (list): A list of integers representing the original array.\n    n (int): The length of the original array.\n    k (int): The number of times the array should be repeated.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array formed by repeating the given array k times.\n    \"\"\"\n\n    # Initialize the maximum sum to be a negative number\n    max_sum = -float('inf')\n\n    # Repeat the given array k times\n    for i in range(k):\n        # Copy the original array to a new array\n        b = a.copy()\n        # Add the kth element of the original array to the beginning of the new array\n        b.insert(0, a[n-1])\n        # Initialize the current sum to be 0\n        current_sum = 0\n        # Traverse the new array from left to right\n        for j in range(n):\n            # Add the current element to the current sum\n            current_sum += b[j]\n            # Update the maximum sum if the current sum becomes larger\n            max_sum = max(max_sum, current_sum)\n\n    # Return the maximum sum of the modified array formed by repeating the given array k times\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    for i in range(k):\n        a.append(a[0])\n    a.sort()\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initialize the sum variable to 0\n    sum_squares = 0\n\n    # loop through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # add the square of i to the sum_squares variable\n        sum_squares += i*i\n\n    # return the sum_squares variable\n    return sum_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    i = 2\n    while i <= n:\n        sum_of_squares += i**2\n        i += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(2, n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    # initialize variables\n    sum_of_squares = 0\n    even_num = 2\n    count = 0\n    \n    # loop through first n even natural numbers\n    while count < n:\n        # add square of even number to sum of squares\n        sum_of_squares += even_num**2\n        # increment even number and count\n        even_num += 2\n        count += 1\n    \n    # return sum of squares\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    sum = 0\n    i = 2\n    while i <= n:\n        if i % 2 == 0:\n            sum += i ** 2\n        i += 2\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_lengths[0] or len(list1[i]) == max_lengths[0] and i < max_lengths[1]:\n            max_lengths = [len(list1[i]), i]\n    return max_lengths[1]"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    max_list = []\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(lst):\n    \"\"\"\n    Returns the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = [len(sublist) for sublist in lst]\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths, default=0):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths, default=0):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return max(lengths)"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    maxLength = []\n    for sublist in list1:\n        if len(sublist) > len(maxLength):\n            maxLength = sublist\n    return maxLength"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for item in list1:\n        if len(item) > len(max_list):\n            max_list = item\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        if len(sublist) > max(max_lengths):\n            max_lengths = [len(sublist)]\n        elif len(sublist) == max(max_lengths):\n            max_lengths.append(len(sublist))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # Initialize variables for maximum length and corresponding indices\n    max_length = 0\n    max_indices = []\n\n    # Loop through the list of lists\n    for i, sublist in enumerate(list1):\n        # Check if the length of the current sublist is greater than the maximum length\n        if len(sublist) > max_length:\n            # Update the maximum length and corresponding indices\n            max_length = len(sublist)\n            max_indices = [i]\n        # If the length of the current sublist is equal to the maximum length, append its index to the list\n        elif len(sublist) == max_length:\n            max_indices.append(i)\n\n    # Return the list of maximum indices\n    return max_indices"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n    # Loop through each list in the list of lists\n    for i in range(len(list1)):\n        # Initialize an empty list to store the length of each list in the original list\n        lengths = []\n        # Loop through each element in the current list\n        for j in range(len(list1[i])):\n            # Append the length of the element to the lengths list\n            lengths.append(len(list1[i][j]))\n        # Append the lengths list to the max_lengths list\n        max_lengths.append(lengths)\n    # Loop through each lengths list and find the maximum length\n    for i in range(len(max_lengths)):\n        max_lengths[i] = max(max_lengths[i])\n    # Return the maximum length in the max_lengths list\n    return max(max_lengths)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    # Initialize a dictionary to store the count of ways for each possible fence\n    ways = {}\n    # Initialize a set to store the color of the first post\n    first_post_color = set()\n    # Initialize a set to store the colors of the remaining posts\n    post_colors = set()\n    # Initialize a counter to store the number of ways for each fence\n    count = 0\n    \n    # Helper function to check if two sets have the same elements\n    def same_colors(set1, set2):\n        if len(set1)!= len(set2):\n            return False\n        return set1.issubset(set2)\n    \n    # Helper function to count the number of ways for a given fence\n    def count_ways_helper(fence):\n        # Check if the fence is valid\n        if len(fence)!= n:\n            return 0\n        # Check if the fence has all the same colors\n        if not same_colors(first_post_color, fence):\n            return 0\n        # Check if the fence has the maximum number of colors allowed\n        if len(post_colors) > k:\n            return 0\n        # Check if the fence has two adjacent posts with the same color\n        if len(set(fence) & set(post_colors)) > 2:\n            return 0\n        # Update the count of ways for the fence\n        count += 1\n    \n    # Initialize the first post with all possible colors\n    for color in range(1, k+1):\n        first_post_color.add(color)\n        post_colors.add(color)\n        count_ways_helper(first_post_color)\n    \n    # Update the count of ways for all the remaining fences\n    for i in range(1, n-1):\n        for color in range(1, k+1):\n            post_colors.add(color)\n            count_ways_helper(post_colors)\n            post_colors.remove(color)\n    \n    # Return the count of ways for the final fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n\n    # Initialize variables to store the count and combinations\n    count = 0\n    combinations = [[0 for j in range(n)] for i in range(k)]\n\n    # If k is 1, then there is only one way to paint the fence.\n    if k == 1:\n        count = 1\n        return count\n\n    # If k is 2, then there are only two ways to paint the fence: either paint all the posts with different colors or paint none of them.\n    elif k == 2:\n        for i in range(n):\n            for j in range(i+1):\n                if j == i:\n                    combinations[1][i] += 1\n                else:\n                    combinations[1][i] += 1\n        count = combinations[1][n-1]\n        return count\n\n    # For any other value of k, we can break it down into 2 subproblems:\n    # 1. Paint all the posts with different colors.\n    # 2. Paint no post.\n\n    # To find the number of ways to paint the fence with 2 adjacent posts having the same color, we can count the number of ways to paint the fence with 1 adjacent post having the same color.\n    count += count_no_of_ways(n-1, k-1)\n\n    # To find the number of ways to paint the fence with 1 adjacent post having the same color, we can paint all the posts with different colors or paint none of them.\n    count += combinations[k-1][n-1]\n\n    # Return the final count.\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = 1\n    for j in range(1, k+1):\n        dp[1][j] = 1\n\n    for i in range(2, n+1):\n        for j in range(2, k+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": ""
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    # Create a 2D list to store the possible ways\n    ways = [[0]*(k+1) for i in range(n+1)]\n\n    # Base case: if there's only one post, there's only one way\n    ways[1][1] = 1\n\n    # For each number of posts from 2 to n, calculate the number of ways of painting the fence with k colors\n    for i in range(2, n+1):\n        for j in range(1, k+1):\n            ways[i][j] = ways[i-1][j] + ways[i-1][j-1]\n\n    # Return the final answer\n    return ways[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Initialize the count to 0\n    count = 0\n    # Loop through all the possibilities\n    for i in range(2, n+1):\n        # For each possibility, loop through all the possibilities of having 2 or 1 adjacent posts with the same color\n        for j in range(1, n-i+2):\n            # If the number of adjacent posts with the same color is less than or equal to 2, add 1 to the count\n            if j <= 2:\n                count += 1\n    # Return the count of ways of painting the fence\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k):\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][1] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if dp[i-1][j] == dp[i][j-1]:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    return dp[n][k]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize the count variable to 0\n    count = 0\n    \n    # Loop through all possible combinations of colors of adjacent posts\n    for i in range(n):\n        for j in range(i+1, n):\n            # Check if the two adjacent posts have the same color\n            if i < j:\n                count += (k - 1) // 2\n    \n    # Return the final count\n    return count"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    \"\"\"\n    # If k is 1, there are only 2 ways of painting the fence\n    if k == 1:\n        return 2 ** n\n\n    # If k is greater than 1, then there are n ways of painting the fence with 1 less color\n    num_ways_1_less_color = count_no_of_ways(n, k - 1)\n\n    # If the first k - 1 adjacent posts have different colors, then there are n ways of painting the fence with the same color for all 2 adjacent posts\n    num_ways_same_color = 0\n    for i in range(k - 1):\n        num_ways_same_color += count_no_of_ways(n - 1, k - 1)\n\n    # The total number of ways of painting the fence is the product of the above two numbers\n    return num_ways_1_less_color * num_ways_same_color"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Initialize an empty dictionary to store the count of ways of painting the fence with different colors\n    count_dict = {}\n    \n    # Loop through the first n-1 posts\n    for i in range(n-1):\n        # If the colors of the current and the next post are the same, then increment the count of ways of painting the fence with the same color by 1\n        if i % 2 == 0:\n            if k % 2 == 0:\n                count_dict[(i+k, k+i)] = count_dict.get((i+k, k+i), 0) + 1\n            else:\n                count_dict[(i+k, k-i)] = count_dict.get((i+k, k-i), 0) + 1\n        else:\n            if k % 2 == 0:\n                count_dict[(i+k, k-i)] = count_dict.get((i+k, k-i), 0) + 1\n            else:\n                count_dict[(i+k, k+i)] = count_dict.get((i+k, k+i), 0) + 1\n                \n    # Return the final count of ways of painting the fence with different colors\n    return count_dict[(n-1, k-1)]"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    # calculate quotient by dividing the larger number by the smaller number\n    quotient = n // m\n    \n    # return the quotient rounded down to the nearest integer\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return find(n-1, m) + n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n//m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two arguments n and m and returns the quotient of n and m rounded down to the nearest integer.\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    if n % m!= 0:\n        quotient += 1\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    '''\n    This function finds the quotient of two numbers (rounded down to the nearest integer).\n    '''\n\n    quotient = int(n / m)\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # calculate quotient by dividing n by m\n    quotient = n // m\n\n    # if remainder is greater than 0, add 1 to quotient\n    if n % m > 0:\n        quotient += 1\n\n    # return quotient\n    return quotient"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    side_one = math.sqrt(w**2 + h**2)\n    side_two = math.sqrt(w**2 + (h/2)**2)\n    third_side = math.sqrt(w**2 + (h/2)**2) * math.tan(math.pi/4)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    c = math.sqrt(w ** 2 + h ** 2)\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the length of the other two sides\n    s = (w**2 + h**2)**0.5\n    # Calculate the length of the third side\n    third_side = math.sqrt(s**2 - w**2)\n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w ** 2 + h ** 2)\n    return a"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    This function takes the lengths of the two sides of a right angled triangle as input and returns the length of the third side of the triangle.\n    '''\n    # Calculate the semi-perimeter of the triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle using Heron's formula\n    area = math.sqrt(s * (s - w) * (s - h) * (s - w))\n    \n    # Return the third side of the triangle\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # calculate the square root of the sum of the squares of the other two sides\n    root = math.sqrt(w**2 + h**2)\n    return root"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n\n    # Calculate the length of the hypotenuse\n    sqrt_of_square_of_hypotenuse = math.sqrt(w**2 + h**2)\n\n    # Calculate the area of the triangle using Heron's formula\n    area = 0.5 * w * h\n\n    # Calculate the height of the triangle using the given formula\n    height = sqrt_of_square_of_hypotenuse / area\n\n    # Return the height of the triangle\n    return height"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter\n    s = (w + h) / 2\n    \n    # Calculate the square root of the semi-perimeter\n    c = math.sqrt(s)\n    \n    # Return the third side of the right angled triangle\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w ** 2 + h ** 2)\n    return s"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = listval[0]\n    for num in listval:\n        if num > max_num:\n            max_num = num\n    return max_num"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    \n    max_val = listval[0]\n    \n    for i in range(1, len(listval)):\n        if type(listval[i])!= type(max_val):\n            return None\n            \n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    This function takes a list as input and returns the maximum value in the list.\n    If the list is empty, it returns None.\n    '''\n    if not listval:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        maxval = max(listval[0], listval[1])\n        for i in range(2, len(listval)):\n            if listval[i] > maxval:\n                maxval = listval[i]\n        return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n\n    # Initialize max value to be the first value in the list\n    max_val = listval[0]\n\n    # Loop through the list and compare each value to the current max value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n\n    # Return the maximum value found in the list\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    elif len(listval) == 1:\n        return listval[0]\n    else:\n        max_val = listval[0]\n        for val in listval[1:]:\n            if val > max_val:\n                max_val = val\n        return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(lst):\n    \"\"\"\n    This function takes a list of heterogeneous data and returns the maximum value in the list.\n    \"\"\"\n    if not lst:\n        return None\n    max_val = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # initialize variables to keep track of the maximum value and its index\n    max_val = None\n    max_index = None\n    \n    # iterate through the list and compare each value to the current maximum value\n    for index, value in enumerate(listval):\n        if max_val is None or value > max_val:\n            max_val = value\n            max_index = index\n    \n    # return the maximum value and its index\n    return max_val, max_index"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    max_val = None\n    for val in listval:\n        if max_val is None or val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # initialize sum variable to 0\n    sum = 0\n\n    # loop through all numbers from 1 to the square root of the number\n    for i in range(1, int(number**0.5) + 1):\n        # check if the number is divisible by the current number\n        if number % i == 0:\n            # add the number to the sum variable\n            sum += i\n\n    # return the sum of all divisors\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum\n"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor = 1\n    sum_divisor = 0\n    \n    while divisor <= number:\n        if number % divisor == 0:\n            sum_divisor += divisor\n        divisor += 1\n    \n    return sum_divisor"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Calculate the sum of all divisors\n    divisors = []\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    This function takes an array as an input and returns the count of inversions.\n    \"\"\"\n    n = len(arr)\n    inversion_count = 0\n\n    for i in range(n):\n        # Start with the first element and loop through the rest of the array\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inversion_count += 1\n\n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Counts the number of inversions in an array.\n    \"\"\"\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Count the number of inversions in the array \n    inv_count = 0 \n    # Sort the array in increasing order \n    arr.sort() \n    # Iterate through the array and find the inversions \n    for i in range(n): \n        # Calculate the index of the maximum element in the remaining unsorted part of the array \n        max_index = i \n        for j in range(i+1, n): \n            if arr[j] > arr[max_index]: \n                max_index = j \n        # If the maximum element is greater than the i-th element, then there is an inversion \n        if arr[i] > arr[max_index]: \n            inv_count += n - i - 1 \n        # Swap the i-th and the maximum element in the array \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    # Return the number of inversions found in the array \n    return inv_count "
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - i\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    \n    # Helper function to merge two sorted subarrays of arr[]. \n    # First subarray is arr[l..m] and second subarray is arr[m+1..r] \n    def merge(arr, l, m, r): \n        \n        # Create temp arrays L[] and R[] \n        L = [0] * (m - l + 1) \n        R = [0] * (r - m) \n        \n        # Copy data to temp arrays L[] and R[] \n        for i in range(0, m - l + 1): \n            L[i] = arr[l + i] \n        for j in range(0, r - m): \n            R[j] = arr[m + 1 + j] \n        \n        # Merge the temp arrays back into arr[l..r] \n        i = 0 # Initial index of first subarray \n        j = 0 # Initial index of second subarray \n        k = l # Initial index of merged subarray \n        while i < len(L) and j < len(R): \n            if L[i] <= R[j]: \n                arr[k] = L[i] \n                i += 1 \n            else: \n                arr[k] = R[j] \n                j += 1 \n            k += 1 \n            \n        # Copy the remaining elements of L[], if there are any \n        while i < len(L): \n            arr[k] = L[i] \n            i += 1 \n            k += 1 \n        \n        # Copy the remaining elements of R[], if there are any \n        while j < len(R): \n            arr[k] = R[j] \n            j += 1 \n            k += 1 \n        \n    # Sort the array arr[0..n-1] \n    def merge_sort(arr, l, r): \n        if l < r: \n            m = l + (r - l) // 2 \n            merge_sort(arr, l, m) \n            merge_sort(arr, m + 1, r) \n            merge(arr, l, m, r) \n        \n    # Count inversions in the array arr[0..n-1] \n    inv_count = 0 \n    merge_sort(arr, 0, len(arr) - 1) \n    for i in range(1, len(arr)): \n        inv_count += (i - 1) * (i // 2) \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Initialize count of inversions\n    inv_count = 0\n\n    # Traverse through the array and count inversions\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    # Store the count of inversions in each subarray of size 1. \n    count = [0] * (n - 1) \n\n    # Traverse through the array and count inversions. \n    for i in range(1, n): \n        # Traverse through the subarray from index 0 to i. \n        for j in range(0, i): \n            # If the current element is greater than the element at the other end, \n            # then increment the count of inversions. \n            if arr[j] > arr[i]: \n                count[i - 1] += j - j + 1\n\n    # Traverse through the count array to find the total count of inversions. \n    inversion_count = 0 \n    for i in range(len(count)): \n        inversion_count += count[i]\n\n    return inversion_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j\n    \n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # Sort the array\n    arr = sorted(arr)\n    inv_count = 0\n    # Iterate through the array\n    for i in range(1, n):\n        # Find the index of the maximum element in the subarray arr[0:i+1]\n        j = i - 1\n        while j >= 0 and arr[j] > arr[i]:\n            j -= 1\n            inv_count += j + 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    A recursive function to flatten a nested list structure.\n\n    Args:\n        lst: The list to be flattened.\n\n    Returns:\n        A flattened list.\n    \"\"\"\n    if not lst:\n        return []\n    elif isinstance(lst, list):\n        return [elem for sublist in lst for elem in flatten_list(sublist)]\n    else:\n        return [lst]"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in lst:\n        if type(i) == list:\n            result += flatten_list(i)\n        else:\n            result.append(i)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure by recursively calling itself on each sub-list.\n    \"\"\"\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(lst):\n    \"\"\"\n    Flatten a nested list structure.\n\n    :param lst: A nested list structure to be flattened.\n    :return: A flattened list.\n    \"\"\"\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten_list(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in lst:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    result = []\n    for item in list1:\n        if type(item) == list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # Define an empty list to store flattened elements\n    flattened_list = []\n    \n    # Iterate over each element of the input list\n    for elem in list1:\n        # If the element is a list, recursively call the function\n        if type(elem) == list:\n            flattened_list += flatten_list(elem)\n        # Otherwise, add the element to the flattened list\n        else:\n            flattened_list.append(elem)\n    \n    # Return the flattened list\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the count of each item in the list\n    item_count = defaultdict(int)\n    # loop through the list of tuples\n    for item, count in stdata:\n        # add the count of the current item to the item_count dictionary\n        item_count[item] += count\n    # loop through the item_count dictionary to find the maximum aggregate\n    max_agg = 0\n    for count in item_count.values():\n        max_agg = max(max_agg, count)\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate.\n\n    Example:\n    stdata = [(1000, 5), (2000, 10), (3000, 15), (4000, 20), (5000, 25)]\n    max_aggregate(stdata) # returns 5000\n\n    The function first creates a defaultdict object to store the total price of each item. \n    It then iterates over the list of tuples and updates the total price for each item. \n    Finally, it returns the maximum aggregate.\n\n    Time Complexity: O(n)\n    where n is the number of tuples in the list.\n    '''\n    total_prices = defaultdict(int)\n\n    for item_price in stdata:\n        total_prices[item_price[0]] += item_price[1]\n\n    max_price = max(total_prices.values())\n\n    return max_price"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the aggregate and the count for each item\n    item_count = defaultdict(int)\n\n    # Iterate through the list of tuples\n    for item, quantity in stdata:\n        # Add the count of the item to the dictionary\n        item_count[item] += quantity\n\n    # Initialize the maximum aggregate variable\n    max_agg = 0\n\n    # Iterate through the dictionary to find the maximum aggregate\n    for count in item_count.values():\n        if count > max_agg:\n            max_agg = count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a dictionary to store the number of times each item appears in the list\n    count_dict = defaultdict(int)\n\n    # Iterate through the list of tuples and update the count_dict\n    for item, quantity in stdata:\n        count_dict[item] += quantity\n\n    # Calculate the maximum aggregate using the count_dict\n    max_agg = 0\n    for item, count in count_dict.items():\n        max_agg += item * count\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n    for s, p, a in stdata:\n        # Update the maximum aggregate for the customer\n        max_aggs[s] = max(max_aggs[s], a)\n\n    # Calculate the maximum aggregate for each customer\n    max_aggs_list = sorted(max_aggs.items(), key=lambda x: x[1])\n\n    # Return the maximum aggregate for each customer\n    return max_aggs_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the minimum and maximum values of each column\n    min_dict = defaultdict(lambda: float('inf'))\n    max_dict = defaultdict(lambda: float('-inf'))\n\n    # Loop through the tuples and update the minimum and maximum values\n    for num, name, price, date in stdata:\n        for i, val in enumerate(num, 1):\n            min_dict[i] = min(min_dict[i], float(val))\n            max_dict[i] = max(max_dict[i], float(val))\n\n    # Calculate the maximum aggregate from the minimum and maximum values\n    max_agg = 0\n    for val in min_dict.values():\n        max_agg += val\n    for val in max_dict.values():\n        max_agg += val\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_map = defaultdict(int)\n    max_agg = 0\n    for st, price in stdata:\n        agg_map[st] += price\n        max_agg = max(max_agg, agg_map[st])\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict with key as transaction type and value as a list of transaction amounts\n    transactions = defaultdict(list)\n\n    # Iterate through the list of tuples\n    for transaction in stdata:\n        # Extract the transaction type and amount from the tuple\n        transaction_type, amount = transaction\n\n        # Add the transaction amount to the list of amounts associated with the transaction type\n        transactions[transaction_type].append(amount)\n\n    # Initialize the maximum aggregate to negative infinity\n    max_aggregate = float('-inf')\n\n    # Iterate through the defaultdict and calculate the maximum aggregate\n    for transaction_type, amounts in transactions.items():\n        # Calculate the sum of the transaction amounts\n        total_amount = sum(amounts)\n\n        # Update the maximum aggregate if the calculated total amount is greater than the current maximum aggregate\n        if total_amount > max_aggregate:\n            max_aggregate = total_amount\n\n    # Return the maximum aggregate\n    return max_aggregate"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the number of times each item appears\n    count_dict = defaultdict(int)\n    for item, count in stdata:\n        count_dict[item] += count\n\n    # calculate the maximum aggregate by taking the maximum count for each item\n    max_agg = max(count_dict.values())\n\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    This function takes a list of tuples as input and returns the maximum aggregate value.\n    '''\n    max_values = defaultdict(int)\n    max_aggs = defaultdict(int)\n\n    for item in stdata:\n        for key, value in item:\n            max_values[key] = max(max_values[key], value)\n\n    for key, value in max_values.items():\n        max_aggs[key] += value\n\n    max_agg = max(max_aggs.values())\n\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    count = 0\n    for i in range(2**n): \n        seq = bin(i)[2:].zfill(n) \n        if sum(int(j) for j in seq[:n]) == sum(int(j) for j in seq[n:]): \n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n, 2**(2*n+1)):\n        binary_str = bin(i)[2:]\n        if binary_str[0:n] == binary_str[n:]:\n            count += 1\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count_binary_seq(n))"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        binary = bin(i)[2:].zfill(n)\n        if sum(int(b) for b in binary[:n]) == sum(int(b) for b in binary[n:]):\n            count += 1\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1, (1 << n) + 1):\n        for j in range(1, (1 << n) + 1):\n            if sum_of_first_n_bits(i) == sum_of_last_n_bits(j):\n                count += 1\n    return count\n\n\ndef sum_of_first_n_bits(binary):\n    '''\n    This function takes a binary number and returns the sum of the first n bits.\n    '''\n    n = len(binary)\n    return sum([int(bit) for bit in binary[:n]])\n\n\ndef sum_of_last_n_bits(binary):\n    '''\n    This function takes a binary number and returns the sum of the last n bits.\n    '''\n    n = len(binary)\n    return sum([int(bit) for bit in binary[-n:]])"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2 ** n):\n        binary = bin(i)[2:]\n        if sum(int(bit) for bit in binary[:n]) == sum(int(bit) for bit in binary[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    # Initialize the count of binary sequences to zero\n    count = 0\n\n    # Iterate through all possible binary strings of length 2n\n    for i in range(2**n):\n        # Convert the binary string to an integer\n        binary = bin(i)[2:].zfill(n)\n        # Calculate the sum of the first n bits\n        first_sum = sum(int(digit) for digit in binary[:n])\n        # Calculate the sum of the last n bits\n        last_sum = sum(int(digit) for digit in binary[-n:])\n        # If the first and last sums are the same, increment the count\n        if first_sum == last_sum:\n            count += 1\n\n    # Return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Initialize variables\n    count = 0\n    max_sum = 2**n - 1\n    sum_1 = 0\n    sum_2 = 0\n\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Extract the first n bits and the last n bits\n        b1 = i // 2**n\n        b2 = i % 2**n\n        # Add them up and check if they are equal\n        if sum_1 == sum_2:\n            count += 1\n\n    # Return the count of valid binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(n-1)):\n        bin_seq = bin(i)[2:].zfill(2*n)\n        if sum(bin_seq[:n]) == sum(bin_seq[n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n):\n    # Initialize variables\n    count = 0\n    binary_seq = [0] * (2 * n)\n    # Iterate through all possible binary sequences of length 2n\n    for i in range(2**n):\n        # Convert current binary sequence to list of integers\n        binary_seq_list = [int(digit) for digit in bin(i)[2:]]\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(binary_seq_list[:n]) == sum(binary_seq_list[-n:]):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n, 2**(2*n)):\n        if (i & ((1 << n) - 1)) == (i >> n):\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n    else:\n        depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # Initialize a counter variable\n    depth = 0\n    # Loop through each key in the dictionary\n    for key in d:\n        # If the key is a dictionary, recursively call the function\n        if isinstance(d[key], dict):\n            # Increment the depth counter\n            depth += 1\n            # Recursively call the function on the nested dictionary\n            dict_depth(d[key])\n    # Return the depth of the dictionary\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            current_depth += 1\n        else:\n            current_depth = 0\n        if current_depth > depth:\n            depth = current_depth\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # initialize depth counter to 0\n    depth = 0\n    \n    # recursively traverse the dictionary to count its depth\n    for value in d.values():\n        if isinstance(value, dict):\n            # increment depth counter by one for nested dictionaries\n            depth += 1\n            # recursively traverse nested dictionary to count its depth\n            depth += dict_depth(value)\n    \n    # return the depth counter\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    count = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            count += 1 + dict_depth(d[key])\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for k, v in d.items())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth += 1\n            depth += dict_depth(value)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k, v in d.items():\n        if isinstance(v, dict):\n            depth += 1\n            depth = max(depth, dict_depth(v))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Finding the range of the element to be rotated\n    range_rotated = (index - ranges[0]) % (len(arr) - ranges[0])\n\n    # Finding the element to be rotated and its index\n    element_to_rotate = arr[index - ranges[0] + range_rotated]\n    index_to_rotate = index - ranges[0] + range_rotated\n\n    # Finding the element to be rotated with respect to its index\n    element_rotated = arr[index_to_rotate]\n\n    # Finding the element to be rotated with respect to its rotation range\n    element_rotated_range = (index_to_rotate - range_rotated) % (len(arr) - range_rotated)\n    element_rotated = arr[index_to_rotate - range_rotated + element_rotated_range]\n\n    return element_rotated"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Parameters:\n    arr - a list of integers\n    ranges - a list of lists representing ranges of elements\n    rotations - a list of integers representing number of rotations to apply\n    index - an integer representing the index of the element to find\n\n    Return:\n    The element at the given index after number of rotations.\n    '''\n\n    # Get the element to find\n    element = arr[index]\n\n    # Find the rotation index of the element\n    for i in range(len(rotations)):\n        if element in ranges[rotations[i] - 1]:\n            break\n\n    # Calculate the new index after rotation\n    new_index = (index + i + ranges[rotations[i] - 1].index(element)) % len(arr)\n\n    # Return the element at the new index\n    return arr[new_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, and a list of rotations, and returns the element at the given index after performing the specified rotations.\n\n    Parameters:\n        arr (list): An array of integers.\n        ranges (list): A list of tuples representing the minimum and maximum values that can be used in the rotations.\n        rotations (list): A list of integers representing the number of rotations that need to be performed.\n        index (int): The index of the element to be found.\n\n    Returns:\n        int: The element at the given index after performing the specified rotations.\n    \"\"\"\n\n    # Initialize the element variable to -1\n    element = -1\n\n    # Iterate through the ranges and rotations lists\n    for i in range(len(ranges)):\n        if index in range(ranges[i][0], ranges[i][1]):\n            # Check if the current rotation is valid\n            if rotations[i] >= 0 and rotations[i] <= len(arr):\n                # Perform the rotation\n                element = arr[(index - ranges[i][0] + rotations[i]) % len(arr)]\n                break\n\n    # Return the element\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Find the element at a given index after number of rotations.\n    \"\"\"\n\n    # Initialize variables\n    element = None\n    current_index = index\n    current_range = ranges[0]\n\n    # Iterate over all rotations and ranges\n    for i in range(rotations):\n        # Find the next range for current index\n        current_range = ranges[i % len(ranges)]\n\n        # Calculate the next index for current range\n        next_index = current_index + current_range - 1\n        if next_index < 0:\n            next_index = len(arr) - 1\n\n        # Find the next element for current index\n        for j in range(current_range):\n            if current_index + j == next_index:\n                element = arr[current_index + j]\n                break\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Calculate the element to be rotated\n    rotated_element = arr[(index + rotations) % len(arr)]\n\n    # Calculate the element to be found\n    element_to_find = arr[index]\n\n    # Calculate the element after rotating\n    rotated_after_rotation = arr[(index + rotations) % len(arr)]\n\n    # Iterate through the ranges to find the element\n    for i in range(len(ranges)):\n        start, end = ranges[i]\n\n        # Check if the element is between start and end\n        if rotated_after_rotation >= start and rotated_after_rotation < end:\n            # Return the element to be found at the current range\n            return element_to_find\n        elif rotated_after_rotation >= end:\n            # Shift the range start\n            start = end\n        else:\n            # Shift the range end\n            end = start\n\n    # If the element was not found, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function finds the element at a given index after a certain number of rotations.\n    It takes in the following arguments:\n    arr: a list of integers\n    ranges: a list of tuples, where each tuple contains two integers representing the range of numbers to be considered for rotations.\n    rotations: the number of rotations to apply to the array.\n    index: the index of the element to be found.\n\n    This function returns the element at the specified index after the given number of rotations.\n    \"\"\"\n    # Initialize a variable to keep track of the current rotation index\n    current_rotation = 0\n\n    # Loop through each element of the array\n    for element in arr:\n        # Check if the current element falls within the current range of numbers to consider for rotations\n        if element >= ranges[current_rotation][0] and element <= ranges[current_rotation][1]:\n            # If the element falls within the current range, check if it is the element we are looking for\n            if index == current_rotation + 1:\n                return element\n\n            # If the element is not the element we are looking for, increment the current rotation index\n            else:\n                current_rotation += 1\n\n            # If we have applied the maximum number of rotations to the array and the element is not the element we are looking for, return None\n            if current_rotation >= rotations and index!= current_rotation + 1:\n                return None\n\n    # If we have made it through the entire array and have not found the element we are looking for, return None\n    return None"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    This function takes an array, ranges, and rotations as inputs, and returns the element at the given index after rotations.\n    \n    It first calculates the sum of the elements after rotations and then returns the element at the given index.\n    \n    Args:\n        arr (list): A list of integers.\n        ranges (list): A list of integers representing the rotations.\n        rotations (int): The number of rotations to be performed.\n        index (int): The index of the element to be found after rotations.\n        \n    Returns:\n        int: The element at the given index after rotations.\n    '''\n    \n    # Calculate the sum of elements after rotations\n    rotated_arr = arr\n    for i in range(rotations):\n        rotated_arr = rotated_arr[ranges[i]:] + rotated_arr[:ranges[i]]\n        \n    # Return the element at the given index after rotations\n    return rotated_arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n\n    # Find the element at the given index\n    element = arr[index]\n\n    # Find the sum of all elements before the element at the given index\n    total_sum = sum(arr[:index])\n\n    # Find the difference between the total sum and the sum of all elements after the element at the given index\n    difference = total_sum - sum(arr[index+1:])\n\n    # Find the number of rotations that need to be applied\n    num_rotations = rotations - (difference // len(arr))\n\n    # Apply the rotations to the element to find its new value\n    new_element = element\n    for i in range(num_rotations):\n        new_element = new_element[::-1]\n\n    # Find the index of the new element\n    new_index = arr.index(new_element)\n\n    return new_element, new_index"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Initializing the variables\n    count = 0\n    i = index\n    \n    # Looping for number of rotations\n    for j in range(rotations):\n        # Checking if the element is present in the array\n        if i >= len(arr):\n            # If it is, then it means the rotation is complete\n            break\n        else:\n            # If not, then increment the count and continue the loop\n            count += 1\n            i = (i + ranges[count - 1]) % len(arr)\n    \n    # Returning the element at the given index after the rotations\n    return arr[i]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n\n    Input:\n    - arr: List of elements to be rotated\n    - ranges: List of tuples representing range of elements to be rotated\n    - rotations: Number of rotations to perform\n    - index: Index of element to be found after rotations\n\n    Returns:\n    - Element at index after rotations\n    '''\n\n    # Calculate the range of elements to be rotated\n    rotation_range = ranges[0][1] - ranges[0][0]\n\n    # Calculate the total number of elements after rotations\n    total_elements = len(arr) + rotation_range * rotations\n\n    # Calculate the element index after rotations\n    element_index = (index - ranges[0][0]) + total_elements\n\n    # Check if the element index is within the valid range\n    if element_index < 0 or element_index >= total_elements:\n        return None\n\n    # Return the element at the calculated index after rotations\n    return arr[element_index % total_elements]\n"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n            if len(p_words) == 2:\n                break\n    return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if re.match(r'^p', word):\n            return word, words[words.index(word)+1]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if re.match(r'^p', words[i][0]):\n            return words[i]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*', re.IGNORECASE)\n    matches = re.findall(pattern, words)\n    return matches[0:2]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return [word, words[words.index(word)+1]]\n    return ['No matches found', None]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p[a-zA-Z]+'\n    match = re.search(pattern, words)\n    if match:\n        return words[match.start():match.end()]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = re.compile(r'^p')\n    matches = re.findall(pattern, words)\n    if len(matches) == 2:\n        return matches[0], matches[1]\n    else:\n        return None, None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if re.search(\"^p\", word):\n            p_words.append(word)\n            if len(p_words) == 2:\n                return p_words"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p'\n    return [w for w in words if re.match(pattern, w)]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    sum_so_far = 0\n\n    # Traverse through the array\n    for i in range(index, n):\n        # If the current element is greater than k, we don't include it in the subsequence\n        if a[i] > k:\n            break\n        # If the current element is less than or equal to k, we include it in the subsequence\n        sum_so_far += a[i]\n        # If the sum of the subsequence is greater than the current maximum sum, update the maximum sum\n        if sum_so_far > max_sum:\n            max_sum = sum_so_far\n\n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Base case\n    if index == n-1:\n        if a[index] > k:\n            return a[index]\n        else:\n            return 0\n\n    # Initialize max sum and ending index\n    max_ending_sum = max_sum = a[index]\n    end_index = index\n\n    # Iterate over all previous indices\n    for i in range(index-1, -1, -1):\n        if a[i] < a[index] and (i < k or a[i] < k):\n            if a[i] + a[index] > max_ending_sum:\n                max_ending_sum = a[i] + a[index]\n                end_index = i\n\n    # Add ending index to max sum and return it\n    max_sum = max(max_sum, max_ending_sum)\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    This function takes an array a, its size n, an index i, and a kth element k as input.\n    It returns the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index == n - 1:\n        if a[index] <= k:\n            return a[index]\n        else:\n            return 0\n    else:\n        if k >= a[index]:\n            return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k - a[index]))\n        else:\n            return max_sum_increasing_subseq(a, n, index + 1, k)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    # Initialize the maximum sum as 0 and the list of indices to 0\n    max_sum = 0\n    max_indices = [0] * n\n\n    # Iterate through all the elements from the index to n-1\n    for i in range(index, n):\n        # Initialize the sum as 0 and the list of indices as 0\n        temp_sum = 0\n        temp_indices = []\n\n        # Add the first element to the sum and the first index to the list\n        temp_sum += a[i]\n        temp_indices.append(i)\n\n        # Iterate through all the elements before i\n        for j in range(i):\n            # Add the current element to the sum and the current index to the list\n            temp_sum += a[j]\n            temp_indices.append(j)\n\n        # If the sum is greater than the maximum sum and the kth element is included in the subsequence, update the maximum sum and the list of indices\n        if temp_sum > max_sum and a[i] >= a[k]:\n            max_sum = temp_sum\n            max_indices = temp_indices\n\n        # If the sum is equal to the maximum sum and the kth element is included in the subsequence, update the list of indices\n        elif temp_sum == max_sum and a[i] >= a[k]:\n            max_indices = temp_indices\n\n    # Return the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i\n    return max_sum, max_indices"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    max_so_far = max(max_sum_increasing_subseq(a, n, index, k-1), a[k] + max_sum_increasing_subseq(a, n, index-1, k))\n    return max_so_far"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    dp = [0] * n\n    max_sum = 0\n\n    for i in range(n):\n        if i == index:\n            dp[i] = a[i]\n        else:\n            dp[i] = max(a[i], dp[i - 1])\n\n        if i >= k:\n            max_sum = max(max_sum, dp[i] - a[i - k])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == n:\n        return 0\n\n    if a[index] > a[k]:\n        return a[index] + max_sum_increasing_subseq(a, n, index + 1, k)\n\n    return max_sum_increasing_subseq(a, n, index + 1, k)\n\na = [1, 6, 3, 7, 2, 5]\nn = len(a)\nk = 3\nindex = 0\n\nprint(\"Maximum sum of increasing subsequence from prefix until\", index, \"index and including kth element\", k, \"is\", max_sum_increasing_subseq(a, n, index, k))"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    a (list): A list of integers.\n    n (int): Length of the list.\n    index (int): Index at which we want to find the maximum sum of increasing subsequence.\n    k (int): A given kth element which is after index.\n\n    Returns:\n    int: The maximum sum of increasing subsequence from prefix until index and including kth element.\n\n    \"\"\"\n\n    if index == 0:\n        return a[index]\n\n    if index == n - 1:\n        if a[index] > a[index + 1] + k:\n            return a[index] + k\n        else:\n            return a[index]\n\n    max_sum = max(max_sum_increasing_subseq(a, n, index - 1, k), a[index])\n\n    if a[index] < a[index + 1]:\n        max_sum = max(max_sum, a[index] + k)\n\n    if a[index] > a[index + 1] + k:\n        max_sum = max(max_sum, a[index] + k - a[index + 1])\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # Initialize the maximum sum of increasing subsequence and the maximum subsequence itself\n    max_sum = float('-inf')\n    max_subseq = []\n\n    # Iterate through all possible subsequences of length i and starting at index j, where j <= k\n    for j in range(index, k+1):\n        # Initialize the current sum of increasing subsequence\n        current_sum = 0\n\n        # Iterate through all possible subsequences of length i and starting at index j\n        for i in range(j, n):\n            # Add the current element to the sum of increasing subsequence\n            current_sum += a[i]\n\n            # If the current sum is greater than the maximum sum of increasing subsequence or if the current sum is equal to the maximum sum of increasing subsequence and the length of the current subsequence is greater than the length of the maximum subsequence, update the maximum sum of increasing subsequence and the maximum subsequence itself\n            if current_sum > max_sum or (current_sum == max_sum and len(a[i:j+1]) > len(max_subseq)):\n                max_sum = current_sum\n                max_subseq = a[i:j+1]\n\n    # Return the maximum sum of increasing subsequence and the maximum subsequence itself\n    return max_sum, max_subseq"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    if index == 0 or k == 0:\n        return a[0]\n    elif index == 1:\n        return max(a[0], a[1], a[2])\n    elif index == n:\n        return a[index-1]\n    else:\n        for i in range(1, k+1):\n            a[index] = max(a[index], a[index-i]+a[i])\n        return max_sum_increasing_subseq(a, n, index+1, k)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple to avoid modifying the original\n    tuplex_copy = deepcopy(tuplex)\n\n    # Check if m is less than or equal to n\n    if m <= n:\n        # Iterate over the first m elements of the tuple and store them in a list\n        colon = []\n        for i in range(m):\n            colon.append(tuplex_copy[i])\n\n        # Return the colon as a tuple\n        return tuple(colon)\n    else:\n        return None"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n\n    # get a deep copy of the input tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # create a list of zeros to represent the colon\n    colon = [0] * (m * n)\n\n    # iterate over the input tuple and add each element to the corresponding position in the colon\n    for i in range(len(new_tuplex)):\n        for j in range(m):\n            for k in range(n):\n                colon[j*n+k] = new_tuplex[i]\n\n    # return the colon as a tuple\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a deep copy of the tuple\n    tuplex_copy = deepcopy(tuplex)\n    # Create an empty list to store the colon\n    colon_list = []\n    # Iterate through the columns of the tuple\n    for j in range(m):\n        # Create an empty list to store the row\n        row_list = []\n        # Iterate through the rows of the tuple\n        for i in range(n):\n            # Get the value of the current element in the tuple\n            value = tuplex_copy[j*n+i]\n            # Add the value to the row list\n            row_list.append(value)\n        # Add the row list to the colon list\n        colon_list.append(row_list)\n    # Return the colon list\n    return colon_list"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    # Make a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n\n    # Get the last element of the tuple\n    last_elem = new_tuplex[-1]\n\n    # Split the last element into columns\n    num_cols = min(m, n)\n    new_last_elem = [last_elem[i:i + n] for i in range(0, len(last_elem), n)]\n\n    # Combine the new columns into a colon\n    new_tuplex[-1] = tuple(new_last_elem)\n\n    # Return the updated tuple\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    This function takes a tuplex and returns the colon of the tuplex\n    based on the given dimensions (m,n) where m and n are positive integers.\n    \"\"\"\n    if not isinstance(tuplex, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    if m > len(tuplex) or n > len(tuplex[0]):\n        raise ValueError(\"m and n should be positive integers less than or equal to the length of the tuple\")\n\n    new_tuplex = deepcopy(tuplex)\n\n    for i in range(len(new_tuplex)):\n        for j in range(m):\n            new_tuplex[i] = (tuplex[i][j],) + new_tuplex[i][j+1:]\n        for j in range(n):\n            new_tuplex.append((tuplex[i][j],) + tuplex[i][j+1:])\n\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[1:]\n    for j in range(n):\n        new_tuplex = new_tuplex[:-1]\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Finally, it returns the new tuple containing the colon of the input tuple."
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the dimensions of the input tuple\n    rows = len(tuplex)\n    cols = len(tuplex[0])\n    # Check if the input tuple is a valid tuple\n    if rows*cols!= m*n:\n        raise ValueError('Invalid tuple dimensions')\n    # Create a list of lists to store the colon\n    colon = [[0]*n for _ in range(m)]\n    # Iterate over the input tuple and fill the colon\n    for i in range(rows):\n        for j in range(cols):\n            colon[i//n][j//m] = tuplex[i][j]\n    # Return the colon as a tuple of lists\n    return tuple(colon)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Get the length of the tuple\n    length = len(tuplex)\n\n    # If the tuple is empty, return an empty tuple\n    if length == 0:\n        return ()\n\n    # If the tuple has one element, return a tuple containing that element\n    if length == 1:\n        return (tuplex[0],)\n\n    # If the tuple has more than one element, create a new tuple with the specified length\n    colon_tuplex = deepcopy(tuplex)\n    colon_tuplex = colon_tuplex[:m] + (colon_tuplex[m],) + colon_tuplex[m+1:]\n    return colon_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # check if m and n are within the bounds of the tuple\n    if m < 0 or m > len(tuplex[0]) or n < 0 or n > len(tuplex):\n        raise ValueError('m and n must be within the bounds of the tuple')\n    \n    # check if the selected colon is within the bounds of the tuple\n    if m + n > len(tuplex[0]):\n        raise ValueError('m + n must be within the bounds of the tuple')\n    \n    # create a copy of the tuple\n    new_tuplex = deepcopy(tuplex)\n    \n    # slice the tuple using m and n\n    colon = tuple(new_tuplex[i] for i in range(m, m+n))\n    \n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Create a list of tuples containing the products of the factors from each list\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append((num1, num2))\n    \n    # Sort the list of products in descending order\n    products.sort(key=lambda x: x[0]*x[1], reverse=True)\n    \n    # Return the N largest products\n    return products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two input lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize a variable to keep track of the maximum product\n    max_product = float('-inf')\n\n    # Loop through all possible combinations of two factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is larger than the current maximum\n            if product > max_product:\n                max_product = product\n\n            # If the maximum number of products has been found, stop searching\n            if max_product == N:\n                return max_product\n\n    # If the maximum number of products has not been found, return -1\n    return -1"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # Initialize the result list\n    result = []\n    \n    # Loop over the desired number of products\n    for _ in range(N):\n        # Calculate the product of the two largest numbers from the first list and the first largest number from the second list\n        prod1 = nums1[-1] * nums1[-2]\n        prod2 = nums2[-1] * nums2[-2]\n        \n        # Add the product to the result list\n        result.append(prod1)\n        result.append(prod2)\n    \n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \"\"\"\n    # Find the maximum product of any element in nums1\n    max_product = max(nums1)\n\n    # Initialize an empty list to store the largest N products found so far\n    largest_products = []\n\n    # Loop through each element in nums2\n    for num2 in nums2:\n        # Calculate the product of the current element with all elements in nums1\n        current_product = num2 * max_product\n\n        # If the product is larger than the largest product found so far, append it to the list of largest products\n        if current_product > max(largest_products):\n            largest_products.clear()\n            largest_products.append(current_product)\n        elif current_product > largest_products[-1]:\n            largest_products.append(current_product)\n        # If the product is not larger than the largest product found so far, do nothing\n\n        # If we have found the desired number of largest products, break out of the loop\n        if len(largest_products) == N:\n            break\n\n    # Return the list of largest products found\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize two lists to hold the largest products from each list\n    largest1 = []\n    largest2 = []\n    # Loop through each number in the first list\n    for num1 in nums1:\n        # Initialize a list to hold the current products\n        product_list = []\n        # Loop through each number in the second list\n        for num2 in nums2:\n            # Multiply the current number with the other number and add it to the product list\n            product_list.append(num1 * num2)\n        # Sort the product list in descending order\n        product_list.sort(reverse=True)\n        # Add the largest N products from the sorted product list to the corresponding largest lists\n        largest1.append(product_list[0:N])\n        largest2.append(product_list[1:N+1])\n    # Return the largest products from both lists\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list with the same length as N\n    result = [0] * N\n\n    # Iterate through the first N elements of the two lists\n    for i in range(N):\n        # Calculate the product of the two largest numbers from the two lists\n        product = nums1[i] * nums2[i]\n\n        # Update the result list with the product\n        result[i] = product\n\n    # Return the result list\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Initialize variables\n    largest_products = []\n    product1 = 1\n    product2 = 1\n    # Loop through the first list\n    for num in nums1:\n        # Calculate the product of the current number and the current product\n        current_product = num * product1\n        # Check if the current product is larger than the previous largest product\n        if current_product > max(largest_products, default=0):\n            # If it is, append it to the list\n            largest_products.append(current_product)\n        # If the current product is equal to the maximum largest product, increment the second factor and reset the product\n        if current_product == max(largest_products, default=0):\n            # Calculate the product of the current number and the current second factor\n            new_product2 = num * product2\n            # If the new product is larger than the current second factor, update both factors\n            if new_product2 > product2:\n                product1 = new_product2\n                product2 = num\n            # Otherwise, update the second factor only\n            else:\n                product2 = new_product2\n    # Loop through the second list\n    for num in nums2:\n        # Calculate the product of the current number and the current product\n        current_product = num * product2\n        # Check if the current product is larger than the previous largest product\n        if current_product > max(largest_products, default=0):\n            # If it is, append it to the list\n            largest_products.append(current_product)\n        # If the current product is equal to the maximum largest product, increment the first factor and reset the product\n        if current_product == max(largest_products, default=0):\n            # Calculate the product of the current number and the current first factor\n            new_product1 = num * product1\n            # If the new product is larger than the current first factor, update both factors\n            if new_product1 > product1:\n                product1 = num\n                product2 = new_product1\n            # Otherwise, update the first factor only\n            else:\n                product1 = num\n    # Return the list of the largest products\n    return largest_products[:N]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum value in each list\n    max1 = max(nums1)\n    max2 = max(nums2)\n    \n    # Initialize two variables to hold the largest products found so far\n    largest1 = 0\n    largest2 = 0\n    \n    # Loop through the combinations of two lists\n    for i in range(N):\n        # Calculate the product of the first N elements of nums1 and nums2\n        product1 = nums1[i] * nums2[i]\n        # Check if the product is larger than the largest so far\n        if product1 > largest1:\n            largest1 = product1\n            # Update the largest products found so far for the other list as well\n            largest2 = nums1[i] * nums2[0] * nums1[0] * nums2[N-i-1]\n            \n    # Return the two largest products\n    return largest1, largest2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    max_product = -float('inf')\n    for i in range(N):\n        max_product = max(max_product, nums1[i] * nums2[i])\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    largest_product = float('-inf')\n    result = []\n    \n    # Loop through all possible pairs of factors\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the two factors\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the current largest, update the largest and the result list\n            if product > largest_product:\n                largest_product = product\n                result = [nums1[i], nums2[j]]\n            \n            # If the result list has N elements, exit the loop\n            if len(result) == N:\n                break\n            \n    return result"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    \"\"\"\n    This function finds the maximum of two numbers using the if-else statement.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>=b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert the string to a list of characters\n    lst = list(str1)\n    # Convert the list to a tuple and return it\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        str1 (str): The string to be converted.\n\n    Returns:\n        tuple: The tuple of characters obtained from the string.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    This function takes a string as input and returns a tuple of its characters.\n    \"\"\"\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(str1)\n    # Convert the list of characters to a tuple of characters\n    char_tuple = tuple(char_list)\n    return char_tuple"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Convert string to list of characters\n    lst = list(str1)\n    # Convert list of characters to tuple of characters\n    return tuple(lst)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost set bit\n    rightmost_set_bit = n >> 1\n    \n    # Invert all the bits except the leftmost unset bit\n    unset_bit = ~(n ^ (rightmost_set_bit << 1))\n    \n    # Shift the bits to the left by the number of positions to the right of the rightmost set bit to set it to 1\n    return (unset_bit << (rightmost_set_bit + 1)) | (n & (unset_bit >> (rightmost_set_bit + 1)))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1\n    while mask & n == 0:\n        mask <<= 1\n    return mask"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Iterate through the bits from left to right\n    for bit in range(31, -1, -1):\n        # If the bit is 0, set the bit to 1 and break\n        if (n & (1 << bit)) == 0:\n            n |= (1 << bit)\n            break\n    \n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the count of set bits\n    count = 0\n    \n    # Iterate over the bits of the number\n    for i in range(8):\n        # If the bit is set, increment the count\n        if n & (1 << i):\n            count += 1\n    \n    # Set the leftmost unset bit to 1 and shift all the other bits to the left by 1 bit\n    leftmost_unset_bit = 1 << count\n    return leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize variables\n    left_most_unset_bit = n\n    current_bit = n\n    \n    # Set the left most unset bit to 1\n    while current_bit & (current_bit - 1) == 0:\n        left_most_unset_bit = current_bit\n        current_bit &= (current_bit - 1)\n    \n    return left_most_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize a variable to store the leftmost unset bit\n    leftmost_unset_bit = 0\n    \n    # Loop through each bit of the number\n    for bit in bin(n)[2:]:\n        # If the bit is set to 1, increment the leftmost unset bit\n        if bit == '1':\n            leftmost_unset_bit += 1\n        # If the bit is already unset, break the loop and return the leftmost unset bit\n        else:\n            break\n    \n    # Shift the number to the left by the leftmost unset bit and return the result\n    return n << leftmost_unset_bit"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the leftmost unset bit to -1\n    unset_bit = -1\n    \n    # Loop through each bit in the binary representation of n\n    for i in range(32): \n        # Check if the current bit is set to 1\n        if n & (1 << i): \n            # Set the leftmost unset bit to the current bit\n            unset_bit = i\n            break\n    \n    # Set the leftmost unset bit in the binary representation of n\n    n |= (1 << unset_bit)\n    \n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    \"\"\"\n    Sets the left most unset bit in the given number.\n\n    :param n: the integer whose left most unset bit is to be set.\n    :return: the integer with the left most unset bit set to 1.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return set_left_most_unset_bit(n & (n - 1)) << 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result as 0\n    result = 0\n    \n    # Iterate from the rightmost set bit to the leftmost unset bit\n    for i in range(31, -1, -1):\n        if (n & (1 << i)):\n            # Set the result to 1 and break the loop\n            result = 1\n            break\n    \n    # Return the result\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Find the rightmost set bit in the binary representation of n\n    rightmost_set_bit = 0\n    while (n & 1) == 0:\n        n >>= 1\n        rightmost_set_bit += 1\n\n    # Set the leftmost unset bit in the binary representation of n\n    n |= (1 << rightmost_set_bit)\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # calculate the volume of the cone using formula V=1/3*pi*(r^2*h)\n    V = (1/3)*math.pi*(r**2*h)\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes the radius and height of a cone as input and returns the volume of the cone.\n    '''\n    V = (1/3)*math.pi*(r**3) + (1/3)*math.pi*r*(h**2)\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function calculates the volume of a cone with a given radius r and height h.\n    \"\"\"\n\n    # calculate the volume of the base\n    v_base = math.pi * r**2 * h\n\n    # calculate the volume of the cone\n    v_cone = math.pi * r**2 * (h/3)\n\n    # calculate the volume of the caps\n    v_cap = 2 * math.pi * r * h\n\n    # add the volumes of the base, cone, and caps to get the total volume of the cone\n    volume = v_base + v_cone + v_cap\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    This function takes the radius and height of a cone as inputs and returns the volume of the cone.\n    \"\"\"\n    pi = math.pi\n    vol = (1/3) * pi * r * r * h\n    return vol"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    \"\"\"\n    area = math.pi * r**2\n    volume = area * h / 3\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = math.pi * r * r * h  # formula for volume of a cone\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3)*math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): The integer for which to find the highest power of 2.\n\n    Returns:\n        int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power < n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the highest power of 2 that is less than or equal to n to n itself\n    highest_pow_2 = n\n    \n    # Loop from 1 to the square root of n\n    for i in range(1, int(n**0.5)+1):\n        # If the square root of n is a whole number, then n is a power of 2\n        if i == int(n**0.5):\n            break\n        # If the square root of n is a whole number, check if it is less than or equal to n\n        if i**2 <= n:\n            # If it is, update the highest power of 2 that is less than or equal to n to the current power of 2\n            highest_pow_2 = i**2\n    \n    # Return the highest power of 2 that is less than or equal to n\n    return highest_pow_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # Initialize highest power of 2 to be 1 \n    highest = 1 \n\n    # Loop until highest power of 2 is greater than or equal to n \n    while highest <= n: \n        # Check if current power of 2 is less than or equal to n \n        if highest * highest > n: \n            # If it is, update highest power of 2 \n            highest = highest * 2 \n        else: \n            # If not, increase highest power of 2 by 1 \n            highest = highest * 2 + 1 \n\n    # Return highest power of 2 \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    # Find the next power of 2 greater than or equal to n \n    power = 1\n    while power <= n: \n        power *= 2\n    # Return the highest power of 2 less than or equal to n\n    return power // 2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest = 1\n    while highest * 2 <= n:\n        highest *= 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    return 2 ** (n.bit_length() - 1)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # find the highest power of 2 that is less than or equal to n\n    highest_power_of_2 = 1\n    while highest_power_of_2 < n:\n        highest_power_of_2 <<= 1\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 1\n    while power <= n:\n        power *= 2\n    return power - 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    # Initialize variable to store the highest power of 2\n    highest = 1\n    \n    # Iterate until the square root of n is less than or equal to 1\n    while highest*highest <= n:\n        # Update the highest power of 2\n        highest *= 2\n        \n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize the variable to store the highest power of 2\n    highest = 1\n    \n    # Loop through all powers of 2 up to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # Check if the current power of 2 is less than or equal to n\n        if i*i > n:\n            # If it is, update the highest power of 2\n            highest = i\n    \n    # Return the highest power of 2\n    return highest\n"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Find the nth lucas number.\n    \"\"\"\n    a, b = 2, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0: \n        return 2\n    elif n == 1: \n        return 1\n    else:\n        # initialize first two numbers \n        prev_num = 2\n        curr_num = 1\n\n        # loop through remaining numbers \n        for i in range(2, n+1): \n            # calculate next number \n            next_num = (prev_num + curr_num) % 2\n\n            # update previous and current numbers \n            prev_num = curr_num\n            curr_num = next_num\n\n        return curr_num"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    lucas = [0, 2]\n    for i in range(2, n+1):\n        lucas.append(lucas[i-1] + lucas[i-2])\n    return lucas[n]"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 2\n    else:\n        prev_lucas = 0\n        curr_lucas = 2\n        for i in range(2, n + 1):\n            lucas = prev_lucas + curr_lucas\n            prev_lucas = curr_lucas\n            curr_lucas = lucas\n        return curr_lucas"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # first two lucas numbers are 2 and 1\n    lucas_prev_prev = 2\n    lucas_prev = 1\n\n    # iterate n-1 times\n    for i in range(n-2):\n        # calculate the next lucas number\n        lucas_next = lucas_prev_prev + lucas_prev\n        # update the previous lucas numbers\n        lucas_prev_prev = lucas_prev\n        lucas_prev = lucas_next\n\n    # return the nth lucas number\n    return lucas_prev"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for item in list_:\n        formatted_list.append(string.format(item))\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(i) for i in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    result = []\n    for item in list_:\n        result.append(string.format(item))\n    return result"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Parameters:\n    l1 (list): A list of dictionaries.\n    l2 (list): A list of tuples.\n    l3 (list): A list of strings.\n\n    Returns:\n    dict: A dictionary where the keys are the elements of l1, l2, and l3, and the values are lists of their corresponding elements.\n    '''\n    d = {}\n\n    # Iterate through each list in turn\n    for lst in [l1, l2, l3]:\n        # Iterate through each element in the list\n        for i in range(len(lst)):\n            # If the element is a dictionary, add its key-value pairs to the dictionary\n            if isinstance(lst[i], dict):\n                for key, value in lst[i].items():\n                    if key in d:\n                        d[key].append(value)\n                    else:\n                        d[key] = [value]\n            # If the element is a tuple, add its elements to the dictionary\n            elif isinstance(lst[i], tuple):\n                if lst[i] in d:\n                    d[lst[i]].append(lst[i+1])\n                else:\n                    d[lst[i]] = [lst[i+1]]\n            # If the element is a string, add it to the dictionary as a key with an empty list as its value\n            else:\n                if lst[i] in d:\n                    d[lst[i]].append('')\n                else:\n                    d[lst[i]] = ['']\n\n    # Return the dictionary\n    return d"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(*args):\n    \"\"\"\n    This function takes any number of lists as arguments and converts them to nested dictionaries.\n    \"\"\"\n    result = {}\n    for arg in args:\n        for i, item in enumerate(arg):\n            if isinstance(item, (list, tuple)):\n                if i not in result:\n                    result[i] = {}\n                convert_list_dictionary(result[i], *item)\n            elif isinstance(item, dict):\n                if i not in result:\n                    result[i] = {}\n                result[i].update(item)\n            else:\n                if i not in result:\n                    result[i] = []\n                result[i].append(item)\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the final result\n    result = {}\n    \n    # Loop through each list and add it to the result dictionary\n    for lst in [l1, l2, l3]:\n        for item in lst:\n            # If the item is a list, recursively call the function\n            if isinstance(item, list):\n                # If the item is a nested list, add it to the result dictionary as a list\n                if any(isinstance(subitem, list) for subitem in item):\n                    result[lst.index(item)] = convert_list_dictionary(item)\n                # If the item is not a nested list, add it to the result dictionary as a dictionary\n                else:\n                    result[lst.index(item)] = {subitem: item[subitem] for subitem in item}\n            # If the item is not a list, add it to the result dictionary as a key-value pair\n            else:\n                result[item] = item\n    \n    # Return the final result\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {l2[i]: l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create a nested dictionary to store the converted data\n    nested_dict = {}\n    # Loop through each list and add its data to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n        nested_dict[l1[i]][l3[i]] = l1[i]\n    # Return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n\n    # Convert lists to nested dictionary\n    result = {}\n    for i, item in enumerate(l1):\n        result[l2[i]] = {}\n        for j, subitem in enumerate(item):\n            result[l2[i]][l3[j]] = subitem\n\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize the nested dictionary\n    my_dict = {}\n    # Loop through each list and add the elements as values to the nested dictionary\n    for i, element in enumerate(l1):\n        my_dict[element] = {'name': l2[i], 'age': l3[i]}\n    return my_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Creating a nested dictionary\n    nested_dict = {}\n    \n    # Adding keys to the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n    \n    # Adding values to the nested dictionary\n    for i in range(len(l2)):\n        nested_dict[l1[i]][l2[i]] = l3[i]\n    \n    # Returning the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the first list and add each element as a key in the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = l2[i]\n\n    # Loop through the second list and add each element as a key in the nested dictionary\n    for i in range(len(l3)):\n        nested_dict[l3[i]] = l3[i]\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(*lists):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    nested_dict = {}\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if isinstance(lists[i][j], list):\n                for k in range(len(lists[i][j])):\n                    nested_dict[lists[i][j][k]] = {}\n            else:\n                nested_dict[lists[i][j]] = {}\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, the maximum sum is 1\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate the maximum sum possible using the given equation\n    max_sum = max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    if n == 1:\n        return n\n\n    # Using the formula f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n\n    if n == 2:\n        return 3\n\n    if n == 3:\n        return 8\n\n    if n == 4:\n        return 15\n\n    if n == 5:\n        return 24\n\n    if n == 6:\n        return 35\n\n    if n == 7:\n        return 48\n\n    if n == 8:\n        return 63\n\n    if n == 9:\n        return 80\n\n    if n == 10:\n        return 100"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    \n    elif n == 2:\n        return 4\n    \n    elif n == 3:\n        return 8\n    \n    elif n == 4:\n        return 12\n    \n    elif n == 5:\n        return 16\n    \n    else:\n        return get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n\n\nn = int(input(\"Enter the value of n: \"))\nresult = get_max_sum(n)\nprint(\"The maximum sum possible is:\", result)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    else:\n        if n % 2 == 0:\n            return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n        else:\n            return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5))"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    def helper(n, max_sum):\n        if n == 1:\n            return n\n        elif n == 2:\n            return max_sum + 1\n        else:\n            return max(helper(n/2, max_sum + n), helper(n/3, max_sum + n), helper(n/4, max_sum + n), helper(n/5, max_sum + n))\n\n    return helper(n, 0)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_len:\n            max_len = len(item)\n            max_list = [item]\n        elif len(item) == max_len:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = item\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return input_list[input_list.index(max_length)]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n\n    # Create an empty dictionary to store the length of each list in the input list\n    list_lengths = {}\n\n    # Iterate through each element of the input list and update the length of the list in the dictionary\n    for element in input_list:\n        if element not in list_lengths:\n            list_lengths[element] = 1\n        else:\n            list_lengths[element] += 1\n\n    # Find the list with the maximum length\n    max_length = 0\n    max_list = None\n    for key in list_lengths:\n        if list_lengths[key] > max_length:\n            max_length = list_lengths[key]\n            max_list = key\n\n    # Return the list with the maximum length\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_tup = set(test_tup)\n    if len(test_tup) == len(unique_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    return all(x not in seen and seen.add(x) for x in test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the set has more than one element\n    return len(test_set) <= 1"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    unique_set = set(test_tup)\n    # check if the length of the set is equal to the length of the tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # create a set to store unique elements of the tuple\n    unique_set = set(test_tup)\n    # check if the set has the same length as the original tuple\n    if len(unique_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(set(test_tup)) == len(test_tup)"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for item in test_tup:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    This function takes a string as input and returns the first non-repeated character in the string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # create a dictionary to store the characters and their frequency\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # loop through the characters and find the first non-repeated character\n    for char in freq:\n        if freq[char] == 1:\n            return char\n    \n    # if no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    # create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    # find the first character that appears only once in the string\n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    # if no such character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {} # create an empty dictionary to store character counts\n\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in char_count:\n        if char_count[char] == 1:\n            return char # return the first non-repeating character"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1:\n            return str1[i]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    \n    for char in str1:\n        if freq[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    This function takes a string as input and returns the first non-repeating character in the string.\n    '''\n    # Create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first non-repeating character\n    for char in str1:\n        if char_freq[char] == 1:\n            return char\n    \n    # If all characters have the same frequency, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n\n    This function takes a string as input and returns the first non-repeated character in the string.\n\n    If there is no non-repeated character in the string, it returns None.\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    '''\n\n    # Create a dictionary to store the frequency of each character in the string\n    freq = {}\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Loop through the string and find the first non-repeated character\n    for char in str1:\n        if freq[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    This function takes a string as input and returns True if it starts and ends with the same character, False otherwise.\n    \"\"\"\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    pattern = re.compile(regex)\n\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not re.match(regex, string):\n        return False\n    \n    return string[0] == string[-1]"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string): \n    '''\n    This function takes a string as input and checks whether it starts and ends with the same character.\n    It returns True if the string satisfies the condition and False otherwise.\n    '''\n    if not string:\n        return False\n    \n    match = re.match(regex, string)\n    \n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n    if n % 2 == 0:\n        median = (sorted_numbers[n // 2 - 1] + sorted_numbers[n // 2]) / 2\n    else:\n        median = sorted_numbers[n // 2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Find the three smallest numbers\n    small_numbers = sorted([a, b, c])\n\n    # Find the median\n    if len(small_numbers) % 2 == 0:\n        median = (small_numbers[len(small_numbers)//2] + small_numbers[len(small_numbers)//2 - 1]) / 2\n    else:\n        median = small_numbers[len(small_numbers)//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    a_list = [a, b, c]\n    a_list.sort()\n    if len(a_list) % 2 == 0:\n        median = (a_list[len(a_list)//2-1] + a_list[len(a_list)//2])/2\n    else:\n        median = a_list[len(a_list)//2]\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Find the sum of the three numbers\n    sum = a + b + c\n\n    # Calculate the average of the three numbers\n    average = sum / 3\n\n    # Calculate the difference between the average and the two middle numbers\n    mid_diff = abs(average - c)\n\n    # If the difference between the average and the two middle numbers is less than the average of the two middle numbers,\n    # then the median is the middle number.\n    if mid_diff < average / 2:\n        return a\n    else:\n        return b"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # sort the numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n    \n    # calculate the length of the list\n    n = len(sorted_nums)\n    \n    # if the length is odd, then the median is the middle number\n    if n % 2!= 0:\n        return sorted_nums[n//2]\n    \n    # if the length is even, then the median is the average of the two middle numbers\n    else:\n        mid_index = n//2\n        return (sorted_nums[mid_index-1] + sorted_nums[mid_index]) / 2"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        return (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        return numbers[len(numbers)//2]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n\n    :param a: the first number\n    :param b: the second number\n    :param c: the third number\n    :return: the median of the three numbers\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Compute the indices of the middle numbers\n    mid_idx1 = len(sorted_nums) // 2\n    mid_idx2 = (len(sorted_nums) + 1) // 2\n\n    # Return the median based on which of the three numbers is the middle\n    if len(sorted_nums) % 2 == 0:\n        # If the numbers have an even number of elements, the median is the average of the middle two elements\n        return (sorted_nums[mid_idx1] + sorted_nums[mid_idx2]) / 2\n    else:\n        # If the numbers have an odd number of elements, the median is the middle element\n        return sorted_nums[mid_idx1]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Determine the median\n    if len(sorted_numbers) % 2 == 0:\n        median = (sorted_numbers[len(sorted_numbers) // 2 - 1] + sorted_numbers[len(sorted_numbers) // 2]) / 2\n    else:\n        median = sorted_numbers[len(sorted_numbers) // 2]\n\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total += digit_sum\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        num_str = str(num)\n        digit_sum += sum([int(digit) for digit in num_str])\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    \n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        total_sum += digit_sum\n    \n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Convert the number to a string and convert each character to an integer\n        digits = [int(d) for d in str(num)]\n        # Compute the sum of digits of the number\n        sum += sum(digits)\n    \n    # Return the sum of digits\n    return sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # iterate through each number in the list\n    for num in nums:\n        # convert the number to a string and split it into individual digits\n        digits = [int(digit) for digit in str(num)]\n        # sum the individual digits and return the result\n        return sum(digits)"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        digits_sum = 0\n        while num > 0:\n            digits_sum += num % 10\n            num //= 10\n        total_sum += digits_sum\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # Initialize an empty list to store the sum of digits\n    total = []\n\n    # Iterate over each number in the list\n    for num in nums:\n        # Convert the number to a string\n        num_str = str(num)\n\n        # Initialize a variable to keep track of the sum of digits\n        sum_of_num = 0\n\n        # Iterate over each character in the string\n        for char in num_str:\n            # Add the integer value of the character to the sum\n            sum_of_num += int(char)\n\n        # Append the sum of digits to the total list\n        total.append(sum_of_num)\n\n    # Return the total list\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_digits = 0\n    for num in nums:\n        sum_digits += sum(map(int, str(num)))\n    return sum_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n\n    # Create a list to store the sum of digits of each number\n    sum_of_digits_list = []\n\n    # Loop through each number in the list\n    for num in nums:\n\n        # Compute the sum of digits of the number\n        sum_of_digits_num = sum(int(digit) for digit in str(num))\n\n        # Append the sum of digits of the number to the list\n        sum_of_digits_list.append(sum_of_digits_num)\n\n    # Return the list of sum of digits of each number\n    return sum_of_digits_list"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    result = 0\n    for i in range(len(test_tup1)):\n        result ^= test_tup1[i] ^ test_tup2[i]\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # initialize the result tuple with zeros\n    result_tup = (0, 0)\n    # iterate over the elements of the tuples\n    for i in range(len(test_tup1)):\n        # perform the bitwise xor operation on the corresponding elements\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result += (test_tup1[len(test_tup2):] ^ (0,),)\n    elif len(test_tup2) > len(test_tup1):\n        result += ((0,) * (len(test_tup1) - len(test_tup2)), test_tup2[len(test_tup1):])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(int(x) ^ int(y) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Create an empty result tuple\n    result_tup = ()\n    \n    # Iterate over the tuples\n    for i in range(len(test_tup1)):\n        # Calculate the bitwise xor of the current elements\n        xor_value = test_tup1[i] ^ test_tup2[i]\n        \n        # Add the result to the result tuple\n        result_tup += (xor_value,)\n        \n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] ^ test_tup2[i])\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    if len(test_tup1) > len(test_tup2):\n        result_tup += test_tup1[len(test_tup2):]\n    elif len(test_tup2) > len(test_tup1):\n        result_tup += test_tup2[len(test_tup1):]\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n\n    freq_dict = {}  # create an empty dictionary to store unique tuples and their frequencies\n\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1  # increment the frequency of each unique tuple\n        else:\n            freq_dict[item] = 1  # initialize the frequency of each unique tuple to 1\n\n    unique_freq_tuples = []\n    for key, value in freq_dict.items():\n        unique_freq_tuples.append((key, value))\n\n    return len(unique_freq_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to a set to get unique values\n    unique_set = set(test_list)\n    # return the length of the unique set\n    return len(unique_set)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    This function takes a list as input and returns the number of unique tuples in the list.\n    '''\n    count = 0\n    for item in test_list:\n        if not isinstance(item, tuple):\n            item = (item,)\n        count += len(set(item))\n    return count"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # convert the list to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # return the length of the set\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set(test_list)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for i in test_list:\n        if i not in freq_dict:\n            freq_dict[i] = 1\n        else:\n            freq_dict[i] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create a dictionary to store the number of occurrences of each tuple\n    freq_dict = {}\n    for item in test_list:\n        # Check if the item is a tuple\n        if isinstance(item, tuple):\n            # If it is, add it to the dictionary with a count of 1\n            if item not in freq_dict:\n                freq_dict[item] = 1\n            else:\n                freq_dict[item] += 1\n    \n    # Return the number of unique tuples in the list\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if tuple(sorted(item)) in freq_dict:\n            freq_dict[tuple(sorted(item))] += 1\n        else:\n            freq_dict[tuple(sorted(item))] = 1\n    return len(freq_dict)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n\n    # loop through each element of both tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            # add the two elements and store the result in the nested list\n            test_tup1[i][j] += test_tup2[i][j]\n\n    # return the updated tuple\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize a variable to store the resultant tuple\n    result_tup = ()\n    # Initialize a variable to store the length of the two tuples\n    length = len(test_tup1)\n    # Loop through each index of the first tuple\n    for i in range(length):\n        # Append the result of adding the corresponding elements of the two tuples\n        result_tup = result_tup + (test_tup1[i] + test_tup2[i],)\n    # Return the resultant tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Check if both input tuples have same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both input tuples must have same length.\")\n        return None\n    \n    # Initialize a new tuple to store the result\n    result_tup = []\n\n    # Loop through each tuple element\n    for i in range(len(test_tup1)):\n        # Check if both elements are tuples\n        if not isinstance(test_tup1[i], tuple) or not isinstance(test_tup2[i], tuple):\n            print(\"Both elements of the nested tuple must be tuples.\")\n            return None\n        \n        # Perform index wise addition of elements of the tuple\n        result_tup.append(test_tup1[i][0] + test_tup2[i][0])\n        result_tup.append(test_tup1[i][1] + test_tup2[i][1])\n\n    # Return the result tuple\n    return tuple(result_tup)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Perform index wise addition of tuple elements in the given two nested tuples.\n\n    Parameters:\n    test_tup1 (tuple): a nested tuple containing tuples as elements.\n    test_tup2 (tuple): a nested tuple containing tuples as elements.\n\n    Returns:\n    A new nested tuple containing the index wise sum of the elements of the given nested tuples.\n    \"\"\"\n    # Initialize an empty list to store the result\n    result_list = []\n\n    # Loop through the elements of the first tuple\n    for tup1_elem in test_tup1:\n        # Loop through the elements of the second tuple\n        for tup2_elem in test_tup2:\n            # Add the elements of the tuple\n            result = tup1_elem + tup2_elem\n            # Append the result to the result list\n            result_list.append(result)\n\n    # Convert the result list to a nested tuple and return it\n    return tuple(result_list)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup1[i])):\n            result.append(test_tup1[i][j] + test_tup2[i][j])\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    final_tup = []\n    for i in range(len(test_tup1)):\n        if isinstance(test_tup1[i], tuple) and isinstance(test_tup2[i], tuple):\n            final_tup.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            final_tup.append(test_tup1[i] + test_tup2[i])\n    return final_tup"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of the two.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a,b):\n    if a<b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as arguments and returns the minimum of those numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a,b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for item in tuple1:\n        if item in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex, tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if x in tuple1: \n            return True \n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1): \n    \"\"\"\n    This function takes in two tuples and returns True if the first tuple exists in the second tuple and False otherwise.\n    \"\"\"\n    if tuplex in tuple1: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in the tuple {tuple1}.\")\n    else:\n        print(f\"{tuplex} does not exist in the tuple {tuple1}.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        print(f\"{tuplex} exists in tuple1.\")\n    else:\n        print(f\"{tuplex} does not exist in tuple1.\")"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(x, \"is even.\")\n    else:\n        print(x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(str(x) + \" is even.\")\n        return False\n    else:\n        print(str(x) + \" is odd.\")\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    This function takes a number x as input and returns True if x is odd and False if x is even.\n    '''\n    if x % 2 == 1: # if x is odd, x % 2 will be 1\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        print(\"The parity of\", x, \"is even.\")\n    else:\n        print(\"The parity of\", x, \"is odd.\")"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x):\n    '''\n    This function takes in a number x and returns whether the parity of x is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find whether the parity of a given number is odd.\n    \"\"\"\n    if x % 2 == 0:\n        return \"Even number\"\n    else:\n        return \"Odd number\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x):\n    '''\n    This function will check whether the parity of a given number is odd or even.\n    '''\n    # Calculating the parity of the number\n    if x % 2 == 0:\n        # If the number is even, it is an odd parity\n        parity = \"Odd\"\n    else:\n        # If the number is odd, it is an even parity\n        parity = \"Even\"\n    # Returning the parity\n    return parity"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd and False otherwise.\n    \"\"\"\n    if x%2!=0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2==0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Create a list of digits of the input number\n    digits = [int(digit) for digit in str(n)]\n\n    # Check if the number is already the maximum value\n    if digits[0] == 9:\n        return str(9 * 10 ** (len(digits) - 1))\n\n    # Find the maximum value among the first k digits\n    max_value = digits[0]\n    for i in range(1, len(digits)):\n        if digits[i] > max_value:\n            max_value = digits[i]\n\n    # Find the number of digits that are greater than the maximum value\n    count = 0\n    for i in range(len(digits)):\n        if digits[i] > max_value:\n            count += 1\n\n    # If the number of digits greater than the maximum value is even, add 1 to the maximum value\n    if count % 2 == 0:\n        max_value += 1\n\n    # Create a list of digits to be used to create the next bigger number\n    digits_to_use = []\n    for i in range(len(digits)):\n        if digits[i] <= max_value:\n            digits_to_use.append(digits[i])\n\n    # Reverse the list of digits to be used\n    digits_to_use.reverse()\n\n    # Create the next bigger number by appending the digits in reverse order to the original number\n    next_bigger = [digits_to_use.pop(), digits_to_use.pop()]\n    for digit in digits_to_use:\n        next_bigger.append(digit)\n\n    # Return the next bigger number as a string\n    return str(int(''.join(str(digit) for digit in next_bigger)))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    def is_valid_permutation(arr):\n        \"\"\"\n        Check if a permutation is valid or not.\n        \"\"\"\n        unique_nums = set(arr)\n        if len(arr)!= len(unique_nums):\n            return False\n        for num in arr:\n            if num <= 0 or num > 9:\n                return False\n        return True\n\n    def next_permutation(arr):\n        \"\"\"\n        Generate the next permutation of an array using the next_permutation function.\n        \"\"\"\n        i = len(arr) - 2\n        while i >= 0 and arr[i] >= arr[i + 1]:\n            i -= 1\n        if i < 0:\n            return False\n        j = len(arr) - 1\n        while j >= 0 and arr[i] >= arr[j]:\n            j -= 1\n        arr[i], arr[j] = arr[j], arr[i]\n        for k in range(i + 1, len(arr)):\n            if arr[k] < arr[i]:\n                arr[k], arr[i] = arr[i], arr[k]\n        return True\n\n    def get_next_bigger(num):\n        \"\"\"\n        Generate the next bigger number by rearranging the digits of a given number.\n        \"\"\"\n        num_list = list(str(num))\n        for i in range(len(num_list) - 1, -1, -1):\n            if num_list[i] < num_list[i + 1]:\n                num_list[i], num_list[i + 1] = num_list[i + 1], num_list[i]\n                num_str = ''.join(num_list)\n                num = int(num_str)\n                if is_valid_permutation(list(str(num))):\n                    return num\n        return None\n\n    return get_next_bigger(n)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    max_digit = max(digits)\n    index = digits.index(max_digit)\n\n    for i in range(max_digit, 9):\n        if digits[index] < i:\n            digits[index] = i\n            break\n\n    result = int(''.join(digits))\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n\n    # Convert the given number to a string\n    num_str = str(n)\n\n    # Sort the string in reverse order (from largest to smallest)\n    num_str_sorted = sorted(num_str, reverse=True)\n\n    # Convert the sorted string back to an integer\n    num_sorted = int(''.join(num_str_sorted))\n\n    # Add one to the original number and check if the result is greater than the original number\n    if num_sorted - 1 > n:\n        # If the result is greater, return the result\n        return num_sorted - 1\n    else:\n        # If the result is not greater, return the original number\n        return n"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    digits = [int(digit) for digit in str(n)]\n    new_digits = []\n\n    for i in range(len(digits)):\n        if i % 2 == 0:\n            new_digits.append(digits[i])\n        else:\n            new_digits.append(digits[-i-1])\n\n    return int(''.join(str(digit) for digit in new_digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert number to string\n    num_str = str(n)\n    \n    # split the string into digits\n    digits = [int(digit) for digit in num_str]\n    \n    # reverse the digits\n    digits = digits[::-1]\n    \n    # find the maximum digit in the digits list\n    max_digit = max(digits)\n    \n    # loop through the digits list and replace max digit with next bigger digit\n    for i, digit in enumerate(digits):\n        if digit == max_digit:\n            digits[i] = next_bigger(digit)\n    \n    # convert the list of digits back to a string and return it as an integer\n    return int(''.join(map(str, digits)))\n\ndef next_bigger(digit):\n    '''\n    Write a function to determine the next bigger digit for a given digit.\n    '''\n    # if the digit is 9, return 0\n    if digit == 9:\n        return 0\n    \n    # otherwise, return the next smaller number\n    else:\n        return digit + 1"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Convert the given number to a string\n    num_str = str(n)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Split the reversed string into digits\n    reversed_digits = list(reversed_str)\n    \n    # Find the index of the digit with the largest value\n    max_index = reversed_digits.index(max(reversed_digits))\n    \n    # Find the index of the first digit greater than the max value\n    first_index = max_index + 1\n    while first_index < len(reversed_digits) and reversed_digits[first_index] == max(reversed_digits):\n        first_index += 1\n    \n    # Reverse the digits between the first index and the max index\n    reversed_digits[first_index:max_index+1] = reversed_digits[first_index:max_index+1][::-1]\n    \n    # Reverse the whole string\n    final_str = ''.join(reversed_digits)\n    \n    # Convert the final string back to an integer\n    final_num = int(final_str)\n    \n    return final_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits)):\n        if digits[i] == 9:\n            digits[i] = 0\n        else:\n            digits[i] += 1\n            break\n    return int(''.join(str(d) for d in digits))"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    # Initialize the result as an empty list\n    result = []\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Loop through each digit in the string\n    for digit in n_str:\n        # Add the digit to the result list\n        result.append(digit)\n\n    # Sort the result list in reverse order\n    result.sort(reverse=True)\n\n    # Convert the sorted result list back to a string and return it\n    return ''.join(result)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    digits.sort(reverse=True)\n    new_number = int(''.join(digits))\n    return new_number\n"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs\n    pairs = []\n    heapq.heapify(pairs)\n\n    # Iterate over both arrays\n    for num1 in nums1:\n        for num2 in nums2:\n            # If the current pair is smaller than k, add it to the heap\n            if len(pairs) < k:\n                heapq.heappush(pairs, (min(num1, num2), (num1, num2)))\n            # Otherwise, if the current pair is larger than k, remove the smallest pair from the heap\n            else:\n                if min(heapq.heappop(pairs)[1]) > max(num1, num2):\n                    heapq.heappush(pairs, (min(num1, num2), (num1, num2)))\n\n    # Extract the k smallest pairs and return as a list of tuples\n    return [pair[1] for pair in heapq.nsmallest(k, pairs)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, (num1 + num2, (num1, num2)))\n            if len(heap) > k:\n                heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a set to store unique pairs of numbers\n    pairs = set()\n\n    # Sort the first array in non-decreasing order\n    nums1.sort()\n\n    # Iterate over the first array and the second array\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the sum of the current pair\n            current_sum = nums1[i] + nums2[j]\n\n            # If the current sum is less than the smallest pair found so far, add it to the set of pairs\n            if current_sum < min_sum or (min_sum < current_sum and (i, j) not in pairs):\n                min_sum = current_sum\n                heapq.heappush(pairs, (min_sum, (i, j)))\n\n            # If the size of the set of pairs is greater than k, remove the pair with the smallest sum from the set\n            if len(pairs) > k:\n                heapq.heappop(pairs)\n\n    # Extract the k pairs with the smallest sum from the set of pairs and return them as a list of tuples\n    result = []\n    while pairs:\n        result.append(heapq.heappop(pairs)[1])\n        if len(result) == k:\n            break\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap of size k to store the k smallest elements found so far\n    min_heap = []\n    \n    # Iterate over both arrays and add the smallest elements to the min heap\n    for num1 in nums1:\n        for num2 in nums2:\n            if len(min_heap) < k:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n            elif (num1 + num2) < min_heap[0][0]:\n                heapq.heappushpop(min_heap, (num1 + num2, (num1, num2)))\n    \n    # Extract the k smallest elements from the min heap and return the pairs\n    return [heapq.heappop(min_heap)[1] for _ in range(k)]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap1 = []\n    heap2 = []\n    result = []\n\n    for num in nums1:\n        heapq.heappush(heap1, num)\n        if len(heap1) == k:\n            break\n\n    for num in nums2:\n        heapq.heappush(heap2, num)\n        if len(heap1) < len(heap2):\n            heapq.heappush(heap1, heapq.heappop(heap2))\n        elif len(heap1) > len(heap2):\n            heapq.heappush(heap2, heapq.heappop(heap1))\n\n    while heap1:\n        result.append(heapq.heappop(heap1))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # convert the two lists to a dictionary\n    nums1_dict = {x: i for i, x in enumerate(nums1)}\n    nums2_dict = {x: j for j, x in enumerate(nums2)}\n\n    # create a min heap to store the smallest pairs\n    min_heap = []\n    heapq.heapify(min_heap)\n\n    # iterate over the first list\n    for i in range(len(nums1)):\n        # get the smallest value from the second list\n        smallest_value = float('inf')\n        for j in range(len(nums2)):\n            # check if the pair (nums1[i], nums2[j]) is smaller than the smallest pair in the heap\n            if nums1_dict[nums1[i]] + nums2_dict[nums2[j]] < smallest_value:\n                smallest_value = nums1_dict[nums1[i]] + nums2_dict[nums2[j]]\n                # add the pair to the heap\n                heapq.heappush(min_heap, (smallest_value, (nums1[i], nums2[j])))\n                # check if the heap size is greater than k\n                if len(min_heap) > k:\n                    # remove the smallest pair from the heap\n                    heapq.heappop(min_heap)\n\n    # extract the k smallest pairs from the heap\n    result = []\n    for _ in range(k):\n        value, pair = heapq.heappop(min_heap)\n        result.append(pair)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # convert the list of lists into a single list\n    nums = [x for sublist in nums1 + nums2 for x in sublist]\n    # create a min heap of size k\n    min_heap = []\n    # sort the nums list in ascending order\n    sorted_nums = sorted(nums)\n    # create two pointers i and j to traverse the nums list\n    i, j = 0, 0\n    # loop until k pairs are found\n    while k > 0:\n        # if the smallest element in the sorted_nums list is greater than or equal to the current element in nums, pop the current element from nums and push it back onto the min_heap\n        if min_heap and min_heap[0] > sorted_nums[i]:\n            heapq.heappop(min_heap)\n        # if k is less than or equal to 0, exit the while loop\n        if k <= 0:\n            break\n        # if k is greater than 0, push the next element in nums into the min_heap\n        heapq.heappush(min_heap, sorted_nums[i])\n        # increment i and decrement k\n        i += 1\n        k -= 1\n    # extract the k pairs from the min_heap and return them as a list of tuples\n    pairs = []\n    while min_heap:\n        pairs.append((min_heap[0], nums[nums.index(min_heap[0])]))\n        heapq.heappop(min_heap)\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a set to store unique pairs\n    unique_pairs = set()\n\n    # create a min heap to store the elements of the first array\n    min_heap = []\n\n    # create a variable to store the minimum element of the second array\n    second_min = float('inf')\n\n    # loop through the first array\n    for num in nums1:\n        # if the number is greater than or equal to the minimum element of the second array,\n        # add it to the min heap and update the minimum element of the second array\n        if num >= second_min:\n            heapq.heappush(min_heap, num)\n            second_min = min(num, second_min)\n\n        # if the size of the min heap is equal to k, check if the smallest pair is already in the unique_pairs set\n        if len(min_heap) == k:\n            # if it's not, add it to the unique_pairs set and remove the minimum elements from the min heap\n            if (min_heap[0], min_heap[-1]) not in unique_pairs:\n                unique_pairs.add((min_heap[0], min_heap[-1]))\n                heapq.heappop(min_heap)\n                heapq.heappop(min_heap)\n\n    # return a list of the unique pairs\n    return list(unique_pairs)"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Returns the k smallest pairs that consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # convert the lists to sets to remove duplicates and to convert the lists to tuples for the heap\n    nums1_set = set(tuple(nums1[i:i+2]) for i in range(len(nums1)))\n    nums2_set = set(tuple(nums2[i:i+2]) for i in range(len(nums2)))\n\n    # create a priority queue of the smallest k elements from the first list and from the second list\n    min_heap = [(-nums1[0], (nums1[0], 0)), (-nums2[0], (nums2[0], 0))]\n    heapq.heapify(min_heap)\n\n    # keep track of the pairs that have been found so far\n    pairs = []\n\n    while len(pairs) < k:\n        # pop the smallest element from the heap\n        neg_cost, (num1, i1) = heapq.heappop(min_heap)\n        neg_cost, (num2, i2) = heapq.heappop(min_heap)\n\n        # add the pair to the result if it's not a duplicate\n        if (num1, num2) not in pairs and (num2, num1) not in pairs:\n            pairs.append((num1, num2))\n\n        # add the next smallest element to the heap, based on the remaining elements in the lists\n        if i1 < len(nums1) - 1:\n            heapq.heappush(min_heap, (-nums1[i1+1], (nums1[i1+1], i1+1)))\n        if i2 < len(nums2) - 1:\n            heapq.heappush(min_heap, (-nums2[i2+1], (nums2[i2+1], i2+1)))\n\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store pairs with the minimum value\n    min_heap = []\n    \n    # Loop through the first array\n    for num1 in nums1:\n        # Loop through the second array\n        for num2 in nums2:\n            # Add the pair to the heap if it's the smallest or if the sum of the pair is smaller than the minimum value in the heap\n            if len(min_heap) < k or num1 + num2 < heapq.heappop(min_heap)[0]:\n                heapq.heappush(min_heap, (num1 + num2, (num1, num2)))\n    \n    # Extract the k smallest pairs from the heap and return them\n    return [heapq.heappop(min_heap)[1] for _ in range(k)]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    # Initialize minimum product as infinity\n    min_product = float('inf')\n    \n    # Loop through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples\n            product = list1[i][0] * list1[j][1]\n            \n            # If the product is smaller than the current minimum, update the minimum\n            if product < min_product:\n                min_product = product\n    \n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Find the minimum product of a pair of tuples in a given list.\n\n    Args:\n    - list1: A list of tuples.\n\n    Returns:\n    - The minimum product of a pair of tuples in the list, or None if there are not enough pairs.\n    \"\"\"\n    # Sort the list by the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n\n    # Initialize variables for the minimum product and the number of pairs\n    min_product = float('inf')\n    count = 0\n\n    # Iterate over the sorted list of tuples\n    for i in range(len(list1) - 1):\n        # Calculate the product of the current pair of tuples\n        product = list1[i][0] * list1[i+1][0]\n\n        # Update the minimum product if the current product is smaller\n        if product < min_product:\n            min_product = product\n            count = 1\n        # Update the count if the current product is the same as the minimum product\n        elif product == min_product:\n            count += 1\n\n    # Return None if there are not enough pairs\n    if count < 2:\n        return None\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # sorting the list of tuples based on the first element of each tuple\n    list1.sort(key=lambda x: x[0])\n    # initializing the minimum product and the minimum pair\n    min_product = float('inf')\n    min_pair = None\n    # iterating over the list of tuples\n    for i in range(len(list1)):\n        # getting the second element of the current tuple\n        x = list1[i][1]\n        # iterating over the remaining tuples\n        for j in range(i+1, len(list1)):\n            # getting the second element of the current tuple\n            y = list1[j][1]\n            # finding the product of the two elements\n            product = x * y\n            # updating the minimum product and the minimum pair if the current product is less than the minimum product\n            if product < min_product:\n                min_product = product\n                min_pair = (x, y)\n    # returning the minimum pair\n    return min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize minimum product variable\n    min_product = float('inf')\n    # loop through the list of tuples\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # calculate the product of the tuples and compare to minimum product\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    # return the minimum product found\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables\n    min_product = 0\n    min_pair = (float('inf'), float('inf'))\n    \n    # Iterate through the list of tuples\n    for pair in list1:\n        # Calculate the product of the first element and the second element\n        product = pair[0] * pair[1]\n        \n        # Check if the product is smaller than the current minimum product\n        if product < min_product:\n            # Update the minimum product and the corresponding pair\n            min_product = product\n            min_pair = pair\n    \n    # Return the minimum product and the corresponding pair\n    return min_product, min_pair"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n\n    Parameters:\n    -----------\n    list1: list of tuples\n        A list of tuples containing integers.\n\n    Returns:\n    --------\n    minimum_product: int\n        The minimum product of the pairs of tuples within the list.\n    \"\"\"\n    # Sort the list of tuples in ascending order\n    list1.sort()\n    # Initialize variables for storing the current product and minimum product\n    current_product = 1\n    minimum_product = 1\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the rest of the tuples\n        product_tuple = list1[i][0] * list1[i][1] * list1[i][2]\n        # Update the current product if the current tuple is greater than the current product\n        if product_tuple > current_product:\n            current_product = product_tuple\n        # Update the minimum product if the current product is less than the minimum product\n        if current_product < minimum_product:\n            minimum_product = current_product\n    # Return the minimum product\n    return minimum_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # initialize variables\n    min_product = float('inf')\n\n    # iterate through the list and calculate the minimum product\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n\n    # return the minimum product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][1] < min_product:\n                min_product = list1[i][0] * list1[j][1]\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product\n"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # initialize minimum value to first element of list\n    min_val = listval[0]\n    \n    # loop through remaining elements of list\n    for i in range(1, len(listval)):\n        # check if current element is smaller than minimum value\n        if listval[i] < min_val:\n            # if yes, update minimum value\n            min_val = listval[i]\n            \n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    \"\"\"\n    min_val = None\n    for val in listval:\n        if min_val is None or val < min_val:\n            min_val = val\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n    \"\"\"\n    return min(lst)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # create an empty list to store the minimum value\n    min_list = []\n\n    # iterate through each value in the list\n    for val in listval:\n        # check if the current value is smaller than the minimum value in the list\n        if val < min_list[0] or (val == min_list[0] and val < min_list[1]):\n            # if the current value is smaller than the minimum value or if the current value is equal to the minimum value but smaller, replace the minimum value with the current value\n            min_list = [val, val]\n        elif val > min_list[0]:\n            # if the current value is larger than the minimum value, append the current value to the minimum value list\n            min_list.append(val)\n\n    # return the minimum value from the list\n    return min_list[0]"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return \"List is empty\"\n    min_val = listval[0]\n    for i in listval[1:]:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    minval = listval[0]\n\n    for i in range(1, len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n\n    return minval"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the minimum value.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the word into list of characters\n    word_list = list(word)\n\n    # Converting first letter to upper case\n    first_letter = word_list[0]\n    if first_letter.islower():\n        first_letter = first_letter.upper()\n    else:\n        first_letter = first_letter.lower()\n    word_list[0] = first_letter\n\n    # Converting remaining letters to lower case\n    for i in range(1, len(word_list)):\n        if word_list[i].isupper():\n            word_list[i] = word_list[i].lower()\n\n    # Converting the list of characters to a string\n    camel_case_word = ''.join(word_list)\n\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word by underscores\n    word_list = word.split('_')\n    \n    # Convert each word to camel case and join them with an underscore\n    camel_word = ''.join(x.capitalize() for x in word_list)\n    \n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('_(.)', lambda x: x.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Convert the word to a list of words\n    words = re.findall(r'\\b\\w+\\b', word)\n\n    # Capitalize the first letter of each word\n    first_word = words[0]\n    capitalized_first_word = first_word.capitalize()\n    words[0] = capitalized_first_word\n\n    # Join the words back into a single string\n    result = ''.join(words)\n\n    # Convert the string to camel case\n    result = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', result)\n    result = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', result).lower()\n\n    return result"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Replace all underscores with spaces\n    word = re.sub(r'(?<!^)(?=[A-Z])','', word)\n\n    # Convert the string to camel case\n    camel_word = ''.join([word[0].upper(), word[1:]])\n\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Convert the given snake case string to camel case string.\n    '''\n    pattern = r'_(\\w)'\n    return re.sub(pattern, lambda m: m.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('_','')\n    words = word.split(' ')\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    camel_case_word = ''.join(camel_case_words)\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # replace all underscores with spaces\n    word = re.sub(r'_','', word)\n    # capitalize the first letter of each word after the first underscore\n    camel_case = ''.join([w.capitalize() if w else '' for w in word.split()])\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    # Convert the snake case string to camel case using regular expressions\n    camel_case = re.sub('_(.?)', lambda match: match.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Splitting the given word into words using snake case\n    words = re.findall(r'[a-z][A-Z]*', word)\n    # Converting each word to camel case and joining them with an underscore\n    result = ''.join(word.title() for word in words)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    # Create an empty list to store the even numbers\n    even_numbers = []\n    # Loop through each number in the list\n    for num in l:\n        # If the number is even, append it to the even_numbers list\n        if num % 2 == 0:\n            even_numbers.append(num)\n    # Return the even_numbers list\n    return even_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]\n"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2!= 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2!= 0]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and returns the nth element from that list.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # check if the input is a list of tuples\n    if not all(isinstance(x, tuple) for x in list1):\n        raise ValueError('Input must be a list of tuples')\n    # check if the input list has at least n elements\n    if len(list1) < n:\n        raise ValueError('Input list must have at least {} elements'.format(n))\n    # iterate over the list and extract the nth element\n    for i, x in enumerate(list1):\n        if i == n - 1:\n            return x\n    # if we reach this point, the nth element is not in the list\n    raise ValueError('The nth element is not in the list')"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    elif n >= len(list1):\n        return None\n    else:\n        return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n >= len(list1):\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        if n > 0 and n <= len(list1):\n            return list1[n-1]\n        else:\n            raise ValueError(\"Invalid input!\")\n    except IndexError:\n        raise IndexError(\"The list is empty!\")"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function takes a list of tuples and an integer n as input and returns the nth element from the list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    This function extracts the nth element from a given list of tuples.\n    It takes two arguments: the list of tuples and the index of the element to extract.\n    It returns the nth element from the list of tuples.\n    '''\n    # Extract the nth element from the list of tuples\n    nth_element = list1[n-1]\n    return nth_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and returns True if any value in the first sequence exists in the second sequence,\n    and returns False otherwise.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    # Check if any value exists in the first list\n    for item in list1:\n        if item in list2:\n            return True\n    \n    # Check if any value exists in the second list\n    for item in list2:\n        if item in list1:\n            return True\n    \n    # If no value exists in either list, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if both lists are of the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # Loop through both lists\n    for i in range(len(list1)):\n        # Check if the values at the same index are the same\n        if list1[i]!= list2[i]:\n            return True\n    \n    # If no values are found to be different, the lists are overlapping\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n\n    # Check if both sequences are of equal length\n    if len(list1)!= len(list2):\n        return False\n\n    # Loop through each value in list1\n    for num in list1:\n        # Check if the value exists in list2\n        if num in list2:\n            return True\n\n    # If no value in list1 exists in list2, return False\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # set of unique values in list1\n    unique_list1 = set(list1)\n    # iterate over list2 and check if any value is in the set of unique values in list1\n    for item in list2:\n        if item in unique_list1:\n            print(\"Item\", item, \"is present in list2\")\n            return True\n    print(\"All items in list2 are present in list1\")\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr):\n    max_product = float('-inf')\n    min_product = float('inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n            if current_product < min_product:\n                min_product = current_product\n                min_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in non-decreasing order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize variables\n    max1 = 0\n    max2 = 0\n\n    # Calculate the maximum value for the first element\n    if arr[0] > 0:\n        max1 = arr[0]\n    else:\n        max1 = arr[0] * -1\n\n    # Calculate the maximum value for the second element\n    if arr[1] > 0:\n        max2 = arr[1]\n    else:\n        max2 = arr[1] * -1\n\n    # Calculate the maximum value for the pair\n    if max1 * max2 > 0:\n        max3 = max1 * max2\n    else:\n        max3 = max1 * max2 * -1\n\n    # Return the pair with the highest product\n    return max1, max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr):\n    if len(arr) < 2:\n        return None\n    \n    max_product = float('-inf')\n    current_product = 1\n    max_product_pair = None\n    current_pair = None\n    \n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_product_pair = (arr[i],)\n        elif current_product == max_product:\n            max_product_pair = max_product_pair + (arr[i],)\n        \n        if i < len(arr) - 1:\n            current_product //= arr[i+1]\n            if current_product > max_product:\n                max_product = current_product\n                max_product_pair = (arr[i], arr[i+1])\n            elif current_product == max_product:\n                max_product_pair = max_product_pair + (arr[i], arr[i+1])\n    \n    if max_product_pair is None:\n        return None\n    \n    return max_product_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr) < 2:\n        return None\n    max1, max2, min1, min2 = float('-inf'), float('-inf'), float('inf'), float('inf')\n    for num in arr:\n        max1 = max(max1*num, num)\n        min1 = min(min1*num, num)\n        max2 = max(max2*num, num)\n        min2 = min(min2*num, num)\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns a tuple containing the indices of the two integers in the array that have the highest product.\n    \"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Find the first and second highest products\n    first_highest = arr[0] * arr[1]\n    second_highest = arr[1] * arr[2]\n\n    # Find the third highest product by comparing the second highest product with the first highest product\n    third_highest = second_highest\n    if first_highest > second_highest:\n        third_highest = first_highest\n\n    return (0, 1) if first_highest == third_highest else (1, 2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()  # Sorting the array in ascending order\n    n = len(arr)\n    max_product = 0\n    max_pair = (arr[0], arr[1])\n\n    for i in range(n):\n        for j in range(i+2, n):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = arr[0]\n    max2 = arr[0]\n    min1 = arr[0]\n    min2 = arr[0]\n    \n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        \n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    \n    return max1*max2, min1*min2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes in an array of integers and returns the pair with the highest product.\n    \"\"\"\n    max_product = 0\n    max1 = 0\n    max2 = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if (arr[i]*arr[j]) > max_product:\n                max_product = arr[i]*arr[j]\n                max1 = arr[i]\n                max2 = arr[j]\n\n    return (max1, max2)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max1 = max2 = float('-inf')\n\n    for i in range(len(arr)):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n\n    return max1 * max2"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr):\n    '''\n    This function takes an array of integers as input and returns the pair with the highest product.\n    '''\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Find the maximum product\n    max_product = arr[len(arr)-1] * arr[len(arr)-2]\n\n    # Check for the pair with the highest product\n    for i in range(len(arr)-3):\n        if arr[i] * arr[i+1] * arr[i+2] > max_product:\n            max_product = arr[i] * arr[i+1] * arr[i+2]\n            max_pair = (arr[i], arr[i+1])\n\n    return max_pair"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize a dictionary to store common elements\n    common_elements = {}\n    \n    # loop through the list of tuples\n    for item in Input:\n        # get the first element of the tuple\n        first_element = item[0]\n        \n        # check if the element is already in the dictionary\n        if first_element in common_elements:\n            # if it is, increment the count of occurrences of the element in the dictionary\n            common_elements[first_element] += 1\n        else:\n            # if not, add the element to the dictionary with a count of 1\n            common_elements[first_element] = 1\n    \n    # loop through the dictionary and find the element with the highest count\n    max_count = 0\n    max_element = None\n    for element, count in common_elements.items():\n        if count > max_count:\n            max_count = count\n            max_element = element\n    \n    # return the element with the highest count\n    return max_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    common_elements = set()\n    for i in Input:\n        if i[0] in common_elements:\n            continue\n        else:\n            common_elements.add(i[0])\n    return common_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # initialize an empty dictionary to store common elements as keys and their indices as values\n    common_elements = {}\n    \n    # iterate over the input list of tuples\n    for i in range(len(Input)): \n        # get the first element of the current tuple\n        current_element = Input[i][0]\n        \n        # if the current element is not in the common_elements dictionary, add it with a value of 0\n        if current_element not in common_elements: \n            common_elements[current_element] = 0\n        \n        # increment the value of the current element in the common_elements dictionary\n        common_elements[current_element] += 1\n    \n    # find the common element with the maximum occurrences in the input list of tuples\n    max_occurrences = max(common_elements.values())\n    common_element = None\n    \n    # iterate over the common_elements dictionary to find the common element with the maximum occurrences\n    for key, value in common_elements.items(): \n        if value == max_occurrences: \n            common_element = key\n            break\n    \n    # return the common element with the maximum occurrences\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tup in Input:\n        if tup[0] == common_element:\n            common_element = None\n        else:\n            common_element = tup[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize empty dictionary to store common elements\n    common_elements = {}\n    # Loop through all tuples in the list\n    for tup in Input:\n        # Check if the first element of the tuple is already in the dictionary\n        if tup[0] in common_elements:\n            # If it is, append the second element of the tuple to the list of elements\n            common_elements[tup[0]].append(tup[1])\n        else:\n            # If it's not, add the tuple as a new key-value pair to the dictionary\n            common_elements[tup[0]] = [tup[1]]\n    # Initialize empty list to store common elements in the first position\n    result = []\n    # Loop through all keys in the dictionary\n    for key in common_elements:\n        # Check if the length of the list is greater than 1, which means the element has multiple occurrences\n        if len(common_elements[key]) > 1:\n            # If it is, add the element to the result list and remove it from the dictionary\n            result.append(key)\n            del common_elements[key]\n    # Return the result list\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_elements = []\n    for tup in Input:\n        common_elements.append(tup[0])\n    return list(set(common_elements))"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for i in range(len(Input)):\n        if common_element is None:\n            common_element = Input[i][0]\n        else:\n            if Input[i][0] == common_element:\n                common_element = None\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first_elements = []\n    for item in Input:\n        if item[0] in common_first_elements:\n            continue\n        common_first_elements.append(item[0])\n    return common_first_elements"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    This function takes a list of tuples as input and returns a list of tuples, where each tuple contains\n    a group of tuples that have the same first element.\n    '''\n    # initialize an empty list to store the groups of tuples\n    groups = []\n\n    # loop through each tuple in the input list\n    for tuple in Input:\n        # if the first element of the tuple is the first element of any group in the groups list, add the tuple to that group\n        if tuple[0] in [group[0] for group in groups]:\n            group = [group for group in groups if group[0] == tuple[0]][0]\n            group.append(tuple)\n        # otherwise, create a new group with the tuple\n        else:\n            group = [tuple]\n        groups.append(group)\n\n    # return the list of groups of tuples\n    return groups"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Create an empty dictionary to store the count of elements in each tuple\n    count_dict = {}\n    \n    # Loop through each tuple in the input list\n    for tup in Input:\n        # If the first element of the tuple is in the dictionary, increment its count\n        if tup[0] in count_dict:\n            count_dict[tup[0]] += 1\n        # If the first element of the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup[0]] = 1\n    \n    # Loop through the keys of the dictionary (i.e. the elements) and find the one(s) with the highest count\n    max_count = 0\n    common_first_element = None\n    for key in count_dict:\n        if count_dict[key] > max_count:\n            max_count = count_dict[key]\n            common_first_element = key\n    \n    # Return the list of tuples with the common first element(s)\n    return [tup for tup in Input if tup[0] == common_first_element]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # Use a variable to keep track of the current maximum length\n    max_length = 0\n    \n    # Loop through the list and update the maximum length if we encounter a longer one\n    for num in lst:\n        # Check if the current number is longer than the maximum length we've seen so far\n        if len(str(num)) > max_length:\n            max_length = len(str(num))\n            \n    # Return the element with maximum length\n    return lst[lst.index(max(lst, key=len))]"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    \n    for element in lst:\n        if len(str(element)) > max_len:\n            max_len = len(str(element))\n            max_element = element\n            \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    max_length = 0 \n    max_element = None \n    for element in lst: \n        if len(str(element)) > max_length: \n            max_length = len(str(element)) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = \"\"\n    \n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    \n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_element = ''\n    \n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    \n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(str(elem)) > max_len:\n            max_len = len(str(elem))\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_length:\n            max_length = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(\"Total sum: \" + str(total * len(list1)))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    total_sum = total * len(list1)\n    print(total_sum)\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(lst):\n    total = 0\n    for num in lst:\n        total += round(num)\n    print(total * len(lst))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    total_sum *= len(list1)\n    print(total_sum)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total_sum += list1[i]\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n\n    # Round every number in the list\n    list1 = [round(num) for num in list1]\n\n    # Calculate the total sum\n    total_sum = sum(list1)\n\n    # Multiply the total sum by the length of the list\n    result = total_sum * len(list1)\n\n    # Print the result\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(lst):\n    # initialize variables\n    total = 0\n    rounded_lst = []\n    \n    # round each number in the list\n    for num in lst:\n        rounded_lst.append(round(num))\n    \n    # calculate the total sum of the rounded numbers\n    for num in rounded_lst:\n        total += num\n    \n    # multiply the total sum by the length of the list and print the result\n    result = total * len(lst)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    print(total * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    # initialize a variable to store the sum of cubes of even natural numbers\n    cube_sum = 0\n    \n    # iterate n times\n    for i in range(n):\n        # calculate the cube of the next even natural number and add it to the sum\n        cube_sum += i*i*i\n    \n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    This function takes an integer n as input and returns the sum of the cubes of the first n even natural numbers.\n    '''\n    # initialize sum and count to zero\n    sum = 0\n    count = 0\n\n    # iterate through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the number\n        cube = i ** 3\n\n        # add the cube to the sum\n        sum += cube\n\n        # increment the count\n        count += 1\n\n    # return the sum of the cubes\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 6\n    else:\n        return (2 * n) ** 3 - cube_Sum(n-1)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cubes = 0\n    \n    # iterate from 1 to n\n    for i in range(1, n+1):\n        # calculate the cube of i and add it to the sum\n        sum_cubes += i*i*i\n    \n    return sum_cubes"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # Initialize the sum and count\n    sum = 0\n    count = 0\n\n    # Iterate through the first n even natural numbers\n    for i in range(2, n+1, 2):\n        # Calculate the cube of the even number\n        cube = i ** 3\n        \n        # Add the cube to the sum and increment the count\n        sum += cube\n        count += 1\n    \n    # Return the sum of the cubes of even numbers\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    total_sum = 0\n    for i in range(2, n+1, 2):\n        total_sum += i**3\n    return total_sum\n\nn = int(input(\"Enter the value of n: \"))\nresult = cube_Sum(n)\nprint(\"The cube sum of the first {} even natural numbers is: {}\".format(n, result))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    # initialize the sum of cubes\n    cubes_sum = 0\n\n    # iterate from 2 to n and find the cube sum of even numbers\n    for i in range(2, n+1, 2):\n        cube = i ** 3\n        cubes_sum += cube\n\n    return cubes_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum_cube = 0\n    for i in range(2, n+1, 2):\n        sum_cube += i**3\n    return sum_cube"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    This function finds the sum of the cubes of the first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i**3\n    return total"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Create an empty string to hold the concatenated elements\n    concatenated_str = \"\"\n    \n    # Loop through each element of the tuple\n    for element in test_tup:\n        # Append the element to the concatenated string\n        concatenated_str += str(element)\n    \n    # Return the concatenated string\n    return concatenated_str"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return \", \".join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    result = ''\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    concatenated_str = ''\n    for item in test_tup:\n        concatenated_str += str(item) + delimiter\n    return concatenated_str[:-1]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    result = ''\n    for elem in test_tup:\n        result += str(elem) +''\n    return result"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '-'\n    new_tuple = ''\n    for element in test_tup:\n        new_tuple += delimiter + str(element) + delimiter\n    return new_tuple"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    result = []\n    for i in range(len(test_tup)):\n        result.append(str(test_tup[i]))\n    return delimiter.join(result)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \" \"\n    result = \"\"\n    for item in test_tup:\n        result += str(item) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=\" \"):\n    \"\"\"\n    This function concatenates each element of a tuple by the specified delimiter.\n\n    Args:\n        test_tup: A tuple to concatenate.\n        delimiter: A string to use as the delimiter.\n\n    Returns:\n        A concatenated string of the tuple elements.\n    \"\"\"\n    result = \"\"\n    for element in test_tup:\n        result += str(element) + delimiter\n    return result[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    avg = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", avg)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, n+1):\n        sum += i**3\n        count += 1\n    average = sum / count\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n    return total/count"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    average = sum/n\n    print(\"The average of cubes of first\", n, \"natural numbers is:\", average)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(1, n+1):\n        cube = i*i*i\n        cubes.append(cube)\n    return sum(cubes)/len(cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n\n    average = sum / (n * n * n)\n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    print(\"The average of cubes of the first\", n, \"natural numbers is\", average_of_cubes)"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0  \n    for i in range(n):  \n        sum_of_cubes += i*i*i  \n    average_of_cubes = sum_of_cubes/n  \n    return average_of_cubes  "
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_cubes = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    average_of_cubes = sum_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for item in test_tuple:\n        rear_list.append(item[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        if len(i) > 0:\n            rear_list.append(i[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, item in enumerate(test_tuple):\n        if isinstance(item, str):\n            rear_indices.append(len(item) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) > 1:\n            rear_indices.append(len(test_tuple[i]) - 1)\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i, string in enumerate(test_tuple):\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for string in test_tuple:\n        rear_list.append(string[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[i][-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for element in test_tuple:\n        rear_list.append(element[-1])\n    return rear_list"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = len(test_tuple) - 1\n    rear_list = []\n    for i in range(len(test_tuple)):\n        rear_list.append(test_tuple[rear_index][i])\n    return rear_list"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    This function takes a list and a particular element as input and returns the number of sublists that contain that element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1: \n        if x in i: \n            count += 1 \n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for lst in list1:\n        if x in lst:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1 \n    return count "
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)): \n        if x in list1[i]: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(lst, x):\n    '''\n    This function takes a list and an element as input and returns the number of times the element appears in the list.\n    '''\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers from a list of numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # Create an empty list to store the odd numbers\n    odd_nums = []\n    # Loop through the list of numbers\n    for num in nums:\n        # Check if the number is odd\n        if num % 2!= 0:\n            # If it is, add it to the odd_nums list\n            odd_nums.append(num)\n    # Return the odd_nums list\n    return odd_nums"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match a valid date format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n\n    # Check if the input string matches the pattern\n    if re.match(pattern, dt):\n        # Split the date string into year, month, and day components\n        year, month, day = re.findall(r'(\\d{4})-(\\d{2})-(\\d{2})', dt)\n        # Convert the day component to the desired format\n        day = int(day)\n        month = int(month)\n        year = int(year)\n        new_day = '{:02d}'.format(day)\n        new_month = '{:02d}'.format(month)\n        new_year = '{:04d}'.format(year)\n        # Concatenate the new year, month, and day components and return the result\n        return '-'.join([new_year, new_month, new_day])\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # convert the date string to datetime object\n    date_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n    # convert the datetime object to string in dd-mm-yyyy format\n    new_date_str = date_obj.strftime('%d-%m-%Y')\n    return new_date_str"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    repl = r'\\2-\\1-\\3'\n    return re.sub(pattern, repl, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Regular expression to match the date format\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    # Find all matches in the string\n    matches = re.findall(pattern, dt)\n    # Convert the matches to datetime objects\n    date_list = []\n    for match in matches:\n        date_obj = datetime.datetime.strptime(match, '%Y-%m-%d')\n        date_list.append(date_obj.strftime('%d-%m-%Y'))\n    # Join the list of date strings into a single string\n    result = '-'.join(date_list)\n    return result"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the date pattern\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n\n    # Match the date pattern in the input string\n    date_match = re.match(pattern, dt)\n\n    # If the date pattern is found, convert it to dd-mm-yyyy format\n    if date_match:\n        return date_match.group().replace('-', '/')\n\n    # Otherwise, return the input string as is\n    else:\n        return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # regex to match the date format\n    regex = r'\\d{4}-\\d{2}-\\d{2}'\n    # replace the date format in dt with dd-mm-yyyy\n    dt = re.sub(regex, r'\\g<3>', dt)\n    # return the modified date\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    # Use the re.sub() method to replace the matched pattern with a new string\n    new_dt = re.sub(pattern, r'\\2-\\1-\\3', dt)\n    return new_dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Remove any non-numeric characters from the date string\n    dt = re.sub('[^0-9]', '', dt)\n    # Split the date string into year, month, and day components\n    y, m, d = map(int, dt.split('-'))\n    # Convert the date components to their respective formats\n    dt_format = f'{d}-{m}-{y}'\n    # Return the formatted date string\n    return dt_format"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\2-\\1-\\3'\n    return re.sub(pattern, replacement, dt)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n\n    # Perform insertion sort on smaller arrays\n    h = 1\n    while h < n // 3:\n        h = 3 * h + 1\n\n    while h >= 1:\n        for i in range(h, n):\n            # Insert current element at its correct position in the sorted part of the array\n            j = i\n            temp = my_list[i]\n            while j >= h and temp < my_list[j - h]:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n\n        h //= 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Define the gap size for the shell sort algorithm\n    gap = len(my_list) // 2\n\n    while gap > 0:\n        # Move the gap closer to the center of the array\n        for i in range(gap, len(my_list)):\n            # Compare the current element with the previous elements\n            # using the gap size\n            for j in range(i - gap, i, gap):\n                if my_list[j] > my_list[j + gap]:\n                    # Swap the elements if they are not in the correct order\n                    my_list[j], my_list[j + gap] = my_list[j + gap], my_list[j]\n        # Decrease the gap size\n        gap = gap // 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    h = 1\n    while h < n // 3:\n        h = h * 3 + 1\n    \n    while h >= 1:\n        for i in range(h, n):\n            temp = my_list[i]\n            j = i\n            while j >= h and my_list[j - h] > temp:\n                my_list[j] = my_list[j - h]\n                j -= h\n            my_list[j] = temp\n        h = h // 3"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n\n    # Do gaps of k elements\n    for gap in range(n//2):\n        # Last gap elements are already sorted\n        for i in range(gap, n):\n            # Insert the current element in its correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j - gap]:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the length of the array\n    length = len(my_list)\n\n    # Use the insertion sort to sort the array\n    for gap in range(length//2):\n        for i in range(gap, length):\n            j = i\n            temp = my_list[i]\n\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n\n            my_list[j] = temp\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Sorts the given array using Shell Sort algorithm.\n    \"\"\"\n    n = len(my_list)\n    # Traverse through all elements\n    for gap in range(n//2):\n        # Starting from gap and ending at 0, we are changing the gap to increase the order of swapping\n        for i in range(gap, n):\n            # Swap the elements if they are not in the correct order\n            while i >= gap and my_list[i] < my_list[i-gap]:\n                my_list[i], my_list[i-gap] = my_list[i-gap], my_list[i]\n            # Print the sorted array after each iteration\n            print(\"Sorted array is:\", my_list)"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Loop through the two tuples and create a new tuple with the elementwise and values\n    and_tup = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] and test_tup2[i]:\n            result_tup += (test_tup1[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize an empty list to hold the result tuples\n    result_list = []\n    # Iterate through the tuples, elementwise\n    for i in range(len(test_tup1)):\n        # Extract the elements from the tuples\n        element1 = test_tup1[i]\n        element2 = test_tup2[i]\n        # Perform the elementwise and\n        and_element = element1 & element2\n        # Add the result to the list of results\n        result_list.append(and_element)\n    # Return the list of results\n    return result_list"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths!\")\n        return None\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # Append the element-wise and to the result tuple\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(test_tup1[i] & test_tup2[i])\n        return tuple(result)\n    else:\n        raise ValueError('The two tuples have different lengths.')"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # initialize the result list to store the elementwise and tuples\n    result = []\n    \n    # iterate over the elements of the first tuple\n    for i in range(len(test_tup1)):\n        # extract the i-th element of both tuples\n        first_elem = test_tup1[i]\n        second_elem = test_tup2[i]\n        \n        # calculate the elementwise and of the i-th elements of both tuples\n        and_val = first_elem & second_elem\n        \n        # append the elementwise and to the result list\n        result.append(and_val)\n    \n    # return the result list\n    return result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_tup = tuple(x and y for x, y in zip(test_tup1, test_tup2))\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append((test_tup1[i] & test_tup2[i]))\n    return tuple(result)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the quadratic formula\n    discriminant = b**2 - 4*a*c\n    root1 = (-b + discriminant**(0.5))/(2*a)\n    root2 = (-b - discriminant**(0.5))/(2*a)\n\n    # Find the two real roots of the quadratic formula\n    if discriminant > 0:\n        root1 = max(root1, 0)\n        root2 = max(root2, 0)\n    elif discriminant == 0:\n        root1 = max(root1, 0)\n        root2 = root1\n    else:\n        root1 = 0\n        root2 = max(root2, 0)\n\n    # Return the roots as a tuple\n    return (root1, root2)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant of the quadratic equation\n    discriminant = b ** 2 - 4 * a * c\n\n    # Check if the discriminant is real\n    if discriminant < 0:\n        return \"There are no real roots.\"\n\n    # Find the two real roots\n    root1 = (-b + discriminant ** 0.5) / (2 * a)\n    root2 = (-b - discriminant ** 0.5) / (2 * a)\n\n    # Sort the roots in ascending order\n    if root1 > root2:\n        root1, root2 = root2, root1\n\n    # Return the directrix of the parabola\n    return \"The directrix is:\", root1, root2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Using the quadratic formula to find the directrix\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b**2 - 4*a*c\n    if delta < 0:\n        return 'The parabola does not have a unique directrix.'\n    elif delta == 0:\n        return f'The directrix of the parabola is {(-b)/(2*a)}.'\n    else:\n        return f'The directrix of the parabola is {(-b+delta**0.5)/(2*a)}.'"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    \n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    delta = b**2 - 4*a*c\n    x1 = (-b + delta**0.5)/(2*a)\n    x2 = (-b - delta**0.5)/(2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Calculate the discriminant\n    disc = b**2 - 4*a*c\n    \n    # Check if the discriminant is real and positive\n    if disc < 0:\n        print('The discriminant is negative. The directrix is complex.')\n        return None\n    elif disc == 0:\n        print('The discriminant is zero. The directrix is unique.')\n        return -b/2*a\n    else:\n        print('The discriminant is positive. The directrix is real.')\n        return (-b + disc**0.5)/(2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Calculate the discriminant of the quadratic equation\n    discriminant = b**2 - 4*a*c\n\n    # Check if the discriminant is negative or zero\n    if discriminant < 0: \n        return \"The parabola has no real root\"\n    \n    # Calculate the two roots of the discriminant\n    root1 = (-b + discriminant**0.5)/(2*a)\n    root2 = (-b - discriminant**0.5)/(2*a)\n\n    # Sort the roots in ascending order\n    sorted_roots = sorted([root1, root2])\n\n    # Return the two roots\n    return sorted_roots"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant > 0:\n        directrix = (-b + discriminant**0.5)/(2*a)\n        print(\"The directrix is:\", directrix)\n    elif discriminant == 0:\n        directrix = -b/(2*a)\n        print(\"The directrix is:\", directrix)\n    else:\n        print(\"The parabola has no real roots.\")"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Create a set from the first list and check if it's a subset of the second list\n    if set(list1) <= set(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) < len(list2):\n        list1, list2 = list2, list1\n\n    for num in list2:\n        if num in list1:\n            return True\n\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Use a set to remove duplicates from both lists\n    list1 = set(list1)\n    list2 = set(list2)\n    # Compare the sets to see if there are any common elements\n    if list1.intersection(list2):\n        return True\n    else:\n        return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # check if both lists are of the same length\n    if len(list1)!= len(list2):\n        return False\n    \n    # loop through each element of list1\n    for i in range(len(list1)):\n        # check if the element exists in list2\n        if list1[i] in list2:\n            return True\n    \n    # if no common element is found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n\n    # Loop through the first list\n    for num in list1:\n        # Check if the number is in the second list\n        if num in list2:\n            # If it is, return True\n            return True\n\n    # If no common element was found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = (base1 + base2) / 2 * height\n\n    # Calculate the lengths of the sides of the trapezium\n    side1 = (area - base2) / 2\n    side2 = (area - base1) / 2\n\n    # Find the median of the two sides\n    median1 = side1\n    median2 = side2\n\n    # Find the median of the two medians\n    median = (median1 + median2) / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    trapezium_perimeter = 2 * (base1 + base2)\n    median_length = area / trapezium_perimeter\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    \n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (base1 + base2)\n    \n    # Calculate the length of the top of the trapezium\n    top = 0.5 * (height + base1 + base2)\n    \n    # Calculate the length of the bottom of the trapezium\n    bottom = 0.5 * height\n    \n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n    \n    # Calculate the diagonal of the trapezium\n    diagonal = (base1**2 + base2**2 + height**2)**0.5\n    \n    # Calculate the perpendicular distance from the center of the base to the perimeter\n    perpendicular_distance = 0.5 * (diagonal - perimeter)\n    \n    # Calculate the length of the base of the trapezium that corresponds to the perpendicular distance\n    base_of_trapezium = 0.5 * (perpendicular_distance + base)\n    \n    # Calculate the length of the top of the trapezium that corresponds to the perpendicular distance\n    top_of_trapezium = 0.5 * (perpendicular_distance + height + base1 + base2)\n    \n    # Calculate the length of the bottom of the trapezium that corresponds to the perpendicular distance\n    bottom_of_trapezium = 0.5 * (perpendicular_distance + height)\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium = 0.5 * perpendicular_distance**2\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    diagonal_of_trapezium = perpendicular_distance\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half = 0.5 * area_of_trapezium\n    \n    # Calculate the length of the diagonal of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half_plus_one = area_of_trapezium_half + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_half_plus_one_plus_one = area_of_trapezium_half_plus_one + area_of_trapezium_half\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance = area_of_trapezium_half_plus_one_plus_one + perpendicular_distance\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one = area_of_trapezium_plus_perpendicular_distance + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one + area_of_trapezium_plus_perpendicular_distance\n    \n    # Calculate the length of the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one + 1\n    \n    # Calculate the area of the trapezium that corresponds to the perpendicular distance\n    area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one_plus_one = area_of_trapezium_plus_perpendicular_distance_plus_one_plus_one_plus_one + area"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n\n    Parameters:\n    base1: float, the length of the first base of the trapezium\n    base2: float, the length of the second base of the trapezium\n    height: float, the height of the trapezium\n\n    Returns:\n    float, the median length of the trapezium\n    '''\n\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the perimeter of the trapezium\n    perimeter = base1 + base2 + height\n\n    # Calculate the median length of the trapezium\n    median = area / 2\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n\n    # Calculate the length of the trapezium using Heron's formula\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    base = 0.5 * (base1 + base2)\n\n    # Calculate the length of the base of the trapezium using the law of cosines\n    s = (3 * base * height) ** 0.5\n    base_length = 0.5 * s\n\n    # Calculate the length of the lower half of the trapezium\n    half_height = 0.5 * height\n\n    # Calculate the area of the lower half of the trapezium\n    area_lower = 0.5 * base1 * half_height + 0.5 * base2 * half_height\n\n    # Calculate the area of the upper half of the trapezium\n    area_upper = 0.5 * base1 * (half_height + height) + 0.5 * base2 * (half_height + height)\n\n    # Calculate the length of the upper half of the trapezium using the law of cosines\n    upper_length = 0.5 * (area_upper ** 0.5 - area_lower ** 0.5)\n\n    # Calculate the length of the median of the trapezium\n    median_length = 0.5 * (upper_length + lower_length)\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the area of the trapezium\n    area = 0.5 * (base1 + base2) * height\n    \n    # Calculate the base of the trapezium\n    base = max(base1, base2)\n    \n    # Calculate the length of the trapezium\n    length = 0.5 * area * (base1 / base)\n    \n    # Calculate the height of the trapezium\n    height = 0.5 * (height + area / base)\n    \n    # Calculate the area of the trapezium\n    area_trapezium = 0.5 * base * height\n    \n    # Find the index of the area of the trapezium in a list of the area of the trapeziums\n    index_area = area_trapezium / area\n    \n    # Calculate the area of the two largest trapeziums\n    area_base1 = 0.5 * base1 * height\n    area_base2 = 0.5 * base2 * height\n    \n    # Calculate the area of the two smallest trapeziums\n    area_base12 = area_base1 + area_base2\n    \n    # Find the index of the area of the two smallest trapeziums in a list of the area of the trapeziums\n    index_area12 = area_base12 / area\n    \n    # Check which index is greater and return the median\n    if index_area > index_area12:\n        return length\n    else:\n        return length + height - base"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    half_height = height / 2\n    length1 = base1 + base2\n    length2 = base1 + height - base2\n    median1 = length1 / 2\n    median2 = length2 / 2\n\n    if median1 < median2:\n        return median1\n    else:\n        return median2"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    This function finds the median length of a trapezium.\n\n    Parameters:\n    base1 - int - base of the first trapezium\n    base2 - int - base of the second trapezium\n    height - int - height of the trapezium\n\n    Returns:\n    float - the median length of the trapezium\n    '''\n\n    # Calculate the length of the first trapezium\n    trapezium_1 = base1 + base2\n\n    # Calculate the length of the second trapezium\n    trapezium_2 = trapezium_1 + height\n\n    # Calculate the area of each trapezium\n    area_1 = 0.5 * base1 * height\n    area_2 = 0.5 * (base2 + height)\n\n    # Calculate the total area of the trapezium\n    total_area = area_1 + area_2\n\n    # Calculate the length of the total trapezium\n    trapezium_total = 2 * trapezium_1 + 2 * trapezium_2\n\n    # Calculate the median length of the trapezium\n    median_length = trapezium_total / total_area\n\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = (base1 + base2) * height / 2\n\n    # Calculate the length of the base of the trapezium\n    base = area / 2\n\n    # Calculate the length of the height of the trapezium\n    height = area - base\n\n    # Calculate the length of the half of the trapezium\n    half_length = area / 2\n\n    # Calculate the length of the trapezium's diagonal\n    diagonal = 2 * half_length\n\n    # Calculate the length of the median of the trapezium's diagonal\n    median_diagonal = diagonal / 2\n\n    return median_diagonal"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1 + base2) / 2 * height"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(i)\n    return"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            print(f\"{arr[i]} is greater than {number}\")\n            break\n    else:\n        print(f\"{number} is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the array and check if each element is greater than the entered number\n    for element in arr:\n        if element > number:\n            return True\n    # If no elements were greater than the number, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n\n    # Check if the number is greater than the elements of the array\n    if number > max(arr):\n        return True\n    else:\n        return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if i > number:\n            print(\"The number is greater than\", i)\n            break\n    else:\n        print(\"The number is not greater than any element in the array\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater = False\n    for i in range(len(arr)):\n        if arr[i] > number:\n            greater = True\n            break\n    return greater"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b.*b\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        print('Match found:', result.group())\n    else:\n        print('No match found.')"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a+b+')\n    return pattern.search(text) is not None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\1*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = re.compile(r'a(?=[bB])')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to string and take the last character\n    last_char = str(n)[-1]\n    # convert the last character to an integer and return it\n    return int(last_char)"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    This function takes a number as an argument and returns its last digit.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    This function takes an integer n as input and returns the last digit of that number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_lst = []\n    for num in list1:\n        if num < 0:\n            neg_lst.append(num)\n    return neg_lst"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    This function takes a list as input and returns a new list containing the negative numbers from the input list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for i in list1:\n        if i < 0:\n            neg_list.append(i)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store the negative numbers\n    negative_list = []\n    # iterate over each element in the input list\n    for num in list1:\n        # if the element is negative, add it to the negative list\n        if num < 0:\n            negative_list.append(num)\n    # return the negative list\n    return negative_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list containing only the negative integers from the input list.\n    \"\"\"\n    neg_list = []\n    for num in lst:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = []\n    for char in str1:\n        if char.isdigit():\n            odd_chars.append(char)\n    result = \"\"\n    for char in odd_chars:\n        result += char\n    return result"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_set = set()\n    for char in str1:\n        if ord(char) % 2 == 1:\n            odd_set.add(char)\n    return ''.join(odd_set)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to hold the even characters\n    even_chars = \"\"\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is odd, add it to the even_chars string\n        if char % 2 == 1:\n            even_chars += char\n    \n    # return the even_chars string as the output\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2!= 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Initialize an empty string to store the odd characters\n    odd_str = \"\"\n    # Loop through each character in the input string\n    for char in str1:\n        # If the character is odd, add it to the odd_str\n        if char % 2 == 1:\n            odd_str += char\n    # Return the odd_str\n    return odd_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(string):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to a list of characters\n    chars = list(string)\n    # Loop over the characters in the list\n    for i in range(len(chars)):\n        # If the character is odd, remove it\n        if chars[i] % 2!= 0:\n            del chars[i]\n    # Convert the list back to a string\n    return ''.join(chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = \"\"\n    for char in str1:\n        if char.isdigit():\n            str2 += char\n        elif char.isalpha():\n            str2 += char\n    return str2"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_characters = []\n    for char in str1:\n        if int(char) % 2!= 0:\n            odd_characters.append(char)\n    return \"\".join(odd_characters)"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] == test_list[j][0]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][j] == test_list[j][i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][1], test_list[j][0]) in test_list or (test_list[i][0], test_list[j][1]) in test_list:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][1]) in test_list[j][0:i] or (test_list[j][0], test_list[i][1]) in test_list[i][0:j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            count += 1\n\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] < test_list[j] and test_list[j] < test_list[i]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n    count = 0\n    for pair in test_list:\n        if pair[0] == pair[1]:\n            count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    single_int = 1\n    for num in L:\n        single_int *= num\n    return single_int"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Check if the input is a list or not\n    if not isinstance(L, list):\n        print(\"Input must be a list.\")\n        return None\n    # Initialize the single integer\n    single = 0\n    # Iterate over the list\n    for num in L:\n        # Check if the current number is multiple of 10\n        if num % 10 == 0:\n            # If it is, add it to the single integer\n            single += num\n    # Return the single integer\n    return single"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for x in L:\n        result *= x\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result += num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in range(len(L)):\n        result += L[i]\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # check if the list is empty or has only one element\n    if len(L) <= 1:\n        return L[0]\n    # find the first multiple element in the list\n    multiple = L[0]\n    # iterate over the list and check if each element is a multiple of the first element\n    for i in range(1, len(L)):\n        if L[i] % multiple!= 0:\n            # if not, reset the multiple to the first element\n            multiple = L[0]\n        else:\n            # if yes, multiply it with the current element\n            multiple *= L[i]\n    # return the result\n    return multiple"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    # Define regex pattern to match adverbs\n    pattern = r'\\b(?:in|about|on|at|to|from|around|behind|before|after|behind|behind|behind)\\b'\n    \n    # Find all the matches of adverbs in the text\n    matches = re.findall(pattern, text)\n    \n    # Print the list of adverbs and their positions in the text\n    for match, position in matches:\n        print(\"Adverb: \", match, \", Position: \", position)\n    \n    # Return the list of adverbs and their positions in the text\n    return matches"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Remove punctuation and convert to lowercase\n    text = text.lower()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Split text into words\n    words = text.split()\n    # Initialize list to store adverb positions\n    adverb_positions = []\n    # Iterate over each word in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if re.search(r'ing$', word, re.IGNORECASE):\n            # If it is, add its position to the list\n            adverb_positions.append(i)\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Define a regular expression pattern to match adverbs\n    pattern = r'\\b(adverb)\\b'\n    \n    # Find all non-overlapping occurrences of adverbs in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n    \n    # If there are no adverbs in the text, return None\n    if not matches:\n        return None\n    \n    # Sort the matches by their starting position in the text\n    matches.sort(key=lambda match: text.find(match))\n    \n    # Find the first adverb and its starting position\n    adverb = matches[0]\n    start_pos = text.find(adverb)\n    \n    # Find the last adverb and its ending position\n    end_pos = start_pos + len(adverb)\n    last_match = matches[-1]\n    last_end_pos = text.find(last_match)\n    \n    # Return a tuple of the first adverb and its positions\n    return (adverb, (start_pos, end_pos), (last_match, last_end_pos))"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Remove any punctuation from the text\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # Convert the text to lowercase\n    text = text.lower()\n    # Split the text into words\n    words = text.split()\n    # Initialize a variable to store the adverb and its position\n    adverb_position = []\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the current word is an adverb\n        if re.match(r'\\b(adverb)\\b', words[i]):\n            # If it is, add its position to the list\n            adverb_position.append(i)\n    # Return the list of adverb positions\n    return adverb_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define the regular expression pattern for adverbs\n    pattern = r'\\b(?:[a-z][a-z]+ )?[a-z][a-z]+(?:ly)?\\b'\n\n    # Use re.search() to search for the pattern in the given text\n    match = re.search(pattern, text)\n\n    # Check if the pattern is found\n    if match:\n        # Extract the matched adverb and its position from the match object\n        adverb = match.group()\n        position = match.start()\n\n        # Return the adverb and its position\n        return adverb, position\n    else:\n        # If the pattern is not found, return an empty string\n        return '', 0"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern for adverbs\n    pattern = r'\\b(?:a|an|the)\\b\\w+\\b\\b(?:is|are|was|were|be|been|am|isn\\'t|aren\\'t|wasn\\'t|weren\\'t|been|being|am|has|had|have|hasn\\'t|hadn\\'t|haven\\'t|had|do|does|did|doesn\\'t|didn\\'t|doesn|didn|doesnt|didnt|should|shouldn\\'t|shouldnt|can|can\\'t|could|couldn\\'t|couldnt|could|may|might|mightn\\'t|mightnt)\\b'\n\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store adverb positions\n    adverb_positions = []\n\n    # Iterate over the matches and store their positions in the list\n    for match in matches:\n        adverb_positions.append(match.span())\n\n    # If no adverbs are found, return an empty list\n    if not adverb_positions:\n        return []\n\n    # Sort the list of adverb positions in ascending order\n    adverb_positions.sort()\n\n    # Return the list of adverb positions\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Regular expression pattern to match adverbs\n    pattern = r'\\b\\w*[aeiou]\\w*[aeiou]\\b'\n\n    # Find all the occurrences of adverbs in the given sentence\n    adverbs = re.findall(pattern, text)\n\n    # Initialize an empty dictionary to store adverb positions\n    positions = {}\n\n    # Loop through all the adverbs\n    for i, adv in enumerate(adverbs):\n        # Check if the adverb is already in the dictionary\n        if adv not in positions:\n            # If not, add it with its position in the sentence\n            positions[adv] = i\n\n    # Return the adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*ly\\b', text.lower())\n\n    # Sort the adverbs by their positions in the text\n    adverbs.sort(key=lambda x: text.lower().index(x))\n\n    # Print the adverbs and their positions in the text\n    for i, adv in enumerate(adverbs):\n        print(f\"{i+1}. {adv}\")\n\n    # Return the list of adverbs and their positions in the text\n    return adverbs"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_adverb_position(text):\n    # Find all occurrences of adverbs in the text\n    adverbs = re.findall(r'\\b\\w+[.,!?]\\b', text)\n\n    # Iterate over the adverbs and find their positions in the sentence\n    positions = []\n    for i, adv in enumerate(adverbs):\n        # Find the position of the first word in the adverb\n        start_position = text.find(adv)\n        # Find the position of the last word in the adverb\n        end_position = start_position + len(adv) - 1\n        # Add the positions to the list\n        positions.append((start_position, end_position))\n\n    # Return the list of adverb positions\n    return positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Split the text into individual words\n    words = text.split()\n\n    # Find all adverbs in the text\n    adverbs = re.findall(r'\\b\\w*[a-zA-Z]+\\w*[a-zA-Z]*\\b', text)\n\n    # Sort the adverbs by their position in the sentence\n    adverbs.sort(key=lambda x: words.index(x))\n\n    # Check if there are any adverbs in the text\n    if len(adverbs) == 0:\n        return None\n\n    # Find the first adverb and its position in the text\n    first_adverb = adverbs[0]\n    first_adverb_position = words.index(first_adverb)\n\n    return first_adverb, first_adverb_position"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l**2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    return surface_area"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l * l\n    return surface_area"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positives = 0\n    negatives = 0\n    zeros = 0\n\n    for num in nums:\n        if num > 0:\n            positives += 1\n        elif num == 0:\n            zeros += 1\n        else:\n            negatives += 1\n\n    pos_ratio = positives / (positives + negatives + zeros)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_count = 0\n    negative_count = 0\n    zero_count = 0\n    for num in nums:\n        if num > 0:\n            positive_count += 1\n        elif num < 0:\n            negative_count += 1\n        else:\n            zero_count += 1\n    positive_ratio = positive_count / (positive_count + negative_count + zero_count)\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    arr = array('i', nums)\n    pos_count = 0\n    for num in arr:\n        if num > 0:\n            pos_count += 1\n    pos_ratio = pos_count / len(arr)\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive = 0\n    negative = 0\n    zero = 0\n    for num in nums:\n        if num > 0:\n            positive += 1\n        elif num == 0:\n            zero += 1\n        else:\n            negative += 1\n    return (positive, negative, zero)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    # Create a new array to store the count of each number\n    positive_counts = array('i')\n\n    for num in nums:\n        if num > 0:\n            positive_counts.append(1)\n        else:\n            positive_counts.append(0)\n\n    # Calculate the total count of positive numbers\n    total_count = 0\n    for count in positive_counts:\n        total_count += count\n\n    # Calculate the ration of positive numbers\n    ration = total_count / len(nums)\n\n    # Return the ration\n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    \"\"\"\n    positive_nums = [num for num in nums if num > 0]\n    positive_count = len(positive_nums)\n    total_nums = len(nums)\n    positive_ratio = positive_count / total_nums\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return count / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize the positive count to 0\n    pos_count = 0\n    # Initialize the array of positive integers to an empty array\n    pos_nums = []\n\n    # Iterate through the array of integers\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            # If the number is positive, add it to the positive count and the positive integer array\n            pos_count += 1\n            pos_nums.append(num)\n\n    # Calculate the ration of positive integers\n    pos_ratio = float(pos_count) / len(nums)\n\n    # Print the result\n    print(\"The ration of positive integers is:\", pos_ratio)\n\n    # Return the ration of positive integers\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_nums = array('i')  # create an integer array to store positive numbers\n    \n    for num in nums:\n        if num > 0:\n            pos_nums.append(num)  # append positive numbers to the array\n    \n    pos_count = len(pos_nums)  # calculate the number of positive numbers in the array\n    \n    return pos_count / len(nums)  # return the ration of positive numbers to the total number of numbers"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_num = -1\n    for num in list1:\n        if num < 0 and num > neg_num:\n            neg_num = num\n    return neg_num"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = float('-inf')\n    for num in list1:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    This function takes a list as input and returns the largest negative number in the list.\n    '''\n    largest = None \n    for num in list1: \n        if num < 0 and (largest is None or num > largest): \n            largest = num \n    return largest "
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in range(1, len(list1)):\n        if list1[i] < 0 and list1[i] > max_neg:\n            max_neg = list1[i]\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # Initialize largest negative number to be the first number in the list\n    largest = list1[0]\n    # Loop through the list and compare each number with the largest negative number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    # Return the largest negative number\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]  # assume the first element is the largest negative number\n    for num in list1:  # iterate over the rest of the elements\n        if num < 0 and num > largest:  # if the number is negative and greater than the largest negative number so far\n            largest = num  # update the largest negative number\n    return largest  # return the largest negative number found"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    \"\"\"\n    This function finds the largest negative number from the given list.\n    \"\"\"\n    max_neg = float('-inf')  # initialize variable to keep track of maximum negative number\n    \n    for num in list1: \n        if num < 0 and num > max_neg: \n            max_neg = num  # update maximum negative number if new number is larger than current maximum negative number\n    \n    return max_neg"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = tuple(test_list[i][:K])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples.\n        K (int): The number of elements to trim each tuple by.\n\n    Returns:\n        list: A new list with the trimmed tuples.\n    \"\"\"\n\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tuple(tup[:K])\n        trimmed_list.append(trimmed_tup)\n\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = tuple(test_list[i][:K] + test_list[i][K:])\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        # check if tuple length is greater than K\n        if len(tup) > K:\n            # trim tuple by k\n            trimmed_tup = tup[:K]\n        else:\n            # append tuple as is\n            trimmed_tup = tup\n        # add trimmed tuple to trimmed list\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tup in enumerate(test_list):\n        if len(tup) > K:\n            test_list[i] = tup[:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(x)[:K] for x in test_list]"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if K > len(test_list[i]):\n                break\n            else:\n                test_list[i] = test_list[i][K:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate over each tuple in the list and trim each tuple by k\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i][j] = 0\n    \n    # return the trimmed list of tuples\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for i in range(len(test_list)):\n        trimmed_list.append(tuple([x[i] for x in test_list[i]]))\n    trimmed_list = [tuple(x) for x in trimmed_list]\n    return trimmed_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples should have same length\")\n        return\n    \n    result_tup = tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n    \n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Tuple sizes do not match.')\n    else:\n        result_tup = tuple(x*y for x,y in zip(test_tup1, test_tup2))\n        return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n\n    # Initialize result tuple with same length as input tuples\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] * test_tup2[i],)\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # using Counter module to count the occurrence of elements in the tuple\n    count_dict = Counter(tup)\n    # filtering the elements of the list that are present in the tuple\n    filtered_list = [x for x in lst if x in count_dict]\n    # count the occurrence of the elements in the filtered list\n    count_dict_filtered = Counter(filtered_list)\n    # printing the final result\n    print(\"The occurrence of all elements in the tuple in the list are:\", count_dict_filtered)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input. \n    The function counts the frequency of each element of the list in the tuple and returns the result as a dictionary.\n    '''\n    freq = Counter(lst)\n    return freq"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Convert the tuple to a dictionary \n    d = Counter(tup) \n\n    # Count the number of times each element of list appears in the tuple \n    count = 0 \n    for item in lst: \n        if item in d: \n            count += d[item] \n\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function counts the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst)\n    count_list = []\n    for item in tup:\n        count_list.append(count_dict[item])\n    return tuple(count_list)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    # Using Counter to count the occurrence of all elements in the tuple and list\n    count = Counter(tup).most_common()\n    \n    for i in range(len(lst)):\n        if lst[i] in count:\n            count[lst[i]] += 1\n        else:\n            count.append((lst[i], 1))\n    \n    # Printing the result\n    print(count)"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for item in lst:\n        if item in count:\n            count[item] += 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)  # Counter function from collections module is used to count the occurence of each element in lst\n    final_count = {}\n    for i in range(len(tup)):\n        if tup[i] in count:\n            final_count[tup[i]] = count[tup[i]]\n        else:\n            final_count[tup[i]] = 0\n    return final_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    # Create a Counter object for the tuple\n    counter = Counter(tup)\n\n    # Create an empty list for the result\n    result = []\n\n    # Iterate over the elements of the list\n    for elem in lst:\n        # If the element is in the Counter object, add its count to the result list\n        if elem in counter:\n            result.append(counter[elem])\n\n    # Return the result list\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = {}\n    for item in tup:\n        if item in lst:\n            if item in count_dict:\n                count_dict[item] += 1\n            else:\n                count_dict[item] = 1\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup) \n    result = {} \n\n    for i in lst: \n        if i in count: \n            result[i] = count[i] \n\n    return result "
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n\n    # Loop through each element in the list and calculate its cube\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # Create a new list to store the cubes\n    cubes = []\n    # Loop through each number in the input list\n    for num in nums:\n        # Calculate the cube of the current number and append it to the new list\n        cubes.append(num**3)\n    # Return the new list of cubes\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** 3)\n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172, 191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466, 497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082, 1129, 1177, 1226, 1276, 1327, 1379, 1432, 1486, 1541, 1597, 1654, 1712, 1771, 1831, 1892, 1954, 2017, 2081, 2146, 2212, 2279, 2347, 2416, 2486, 2557, 2629, 2702, 2776, 2851, 2927, 3004, 3082, 3161, 3241, 3322, 3404, 3487, 3571, 3656, 3742, 3829, 3917, 4006, 4096, 4187, 4279, 4372, 4466, 4561, 4657, 4754, 4852, 4951, 5051, 5152, 5254, 5357, 5461, 5566, 5672, 5779, 5887, 5996, 6106, 6217, 6329, 6442, 6556, 6671, 6787, 6904, 7022, 7141, 7261, 7382, 7504, 7627, 7751, 7876, 8002, 8129, 8257, 8386, 8516, 8647, 8779, 8912, 9046, 9181, 9317, 9454, 9592, 9731, 9871, 10012, 10154, 10297, 10441, 10586, 10732, 10879, 11027, 11176, 11326, 11477, 11629, 11782, 11936, 12091, 12247, 12404, 12562, 12721, 12881, 13042, 13204, 13367, 13531, 13696, 13862, 14029, 1419"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perrin_number(n):\n    '''\n    Function to check if a number is a Perrin number or not.\n    '''\n    if n < 1:\n        return False\n    if n == 1:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True\n\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_sum = 0\n    for i in range(1, n + 1):\n        if is_perrin_number(i):\n            perrin_sum += i\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_nums = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384]\n    return sum(perrin_nums[:n])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_list = [0, 1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296]\n    return sum(perrin_list[:n+1])"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 3 == 0 or i % 5 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    # Initializing variables\n    sum = 0\n    num = 1\n    \n    # Looping through the perrin numbers\n    while num <= n:\n        sum += num\n        num += 2\n        \n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    sum = 0\n    for num in perrin_numbers:\n        sum += num\n        if sum >= n:\n            return sum\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers.\n    \"\"\"\n\n    # initialize sum and count\n    total = 0\n    count = 0\n\n    # loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # check if i is a Perrin number\n        if i % 2 == 0 and i % 5!= 0:\n            # add the number to the sum and increment the count\n            total += i\n            count += 1\n\n    # return the sum and count\n    return total, count\n"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n\n    result = []\n    for s in l:\n        if len(s) == l:\n            result.append(s)\n\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n    str_list: list of strings\n    size: size of the desired string\n\n    Returns:\n    list of strings of size'size'\n    '''\n    result = []\n    for s in str_list:\n        if len(s) == size:\n            result.append(s)\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function extracts the specified size of strings from the list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) == size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of specified size strings.\n    '''\n    result = []\n    for i in range(0, len(str_list), size):\n        result.append(' '.join(str_list[i:i+size]))\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a desired string size and returns a list of strings of the desired size.\n    '''\n    string_list = []\n    for string in str_list:\n        if len(string) == size:\n            string_list.append(string)\n    return string_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) >= size:\n            result.append(str_list[i])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of strings and a size as input and returns a list of strings containing the specified size of strings from the given list of strings.\n    '''\n\n    # Initialize an empty list to hold the extracted strings\n    extracted_strings = []\n\n    # Loop through the list of strings\n    for i in range(len(str_list)):\n        # Check if the length of the current string is less than or equal to the specified size\n        if len(str_list[i]) <= size:\n            # If the length is less than or equal to the specified size, append the string to the extracted strings list\n            extracted_strings.append(str_list[i])\n\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str_list, size):\n    \"\"\"\n    This function takes a list of string values and a specified size as input and returns a new list of extracted strings.\n    \"\"\"\n    new_list = []\n    for str in str_list:\n        if len(str) == size:\n            new_list.append(str)\n    return new_list"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values as input and returns a list of the extracted string values.\n    '''\n    extracted_str_list = []\n    for i in range(len(str_list)):\n        if i % size == 0:\n            extracted_str_list.append(' '.join(str_list[i:i+size]))\n    return extracted_str_list"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub('\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub('\\s+', '', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = r'\\s+'\n    text = re.sub(pattern, '', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # remove all whitespaces from the given string using regular expressions\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Using regular expression to remove whitespaces\n    pattern = re.compile(r'\\s+')\n    text1 = pattern.sub('', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text1)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = re.compile(r'\\s+')\n    text2 = pattern.sub('', text1)\n\n    # Return the cleaned string\n    return text2"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    pattern = re.compile(r'\\s+')\n    return pattern.sub('', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Use regular expression to remove all whitespaces from the string\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss = actual_cost - sale_amount\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Returns the amount of loss on a sale if the sale amount is less than the actual cost,\n    otherwise, it returns 0.\n    \"\"\"\n    if sale_amount < actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost - sale_amount \n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount: \n        return sale_amount - actual_cost \n    else: \n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    \"\"\"\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if n/i == i:\n                sum += n\n            else:\n                sum += n/i\n    return sum\n\nn = int(input(\"Enter a number: \"))\nprint(\"The sum of even factors of\", n, \"is:\", sumofFactors(n))"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            count += i\n    return count"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumOfFactors(n):\n    '''\n    This function takes a positive integer n as input and returns the sum of the even factors of n.\n    '''\n    sum_of_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_even_factors += i\n    return sum_of_even_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef sumOfFactors(n): \n    '''\n    This function takes an integer n as input and returns the sum of all even factors of n.\n    '''\n    # Initialize sum of factors to 0 \n    sum_of_factors = 0\n    \n    # Check each odd number from 3 to the square root of n \n    for i in range(3, int(math.sqrt(n))+1, 2): \n        # Check if i divides n \n        if n % i == 0: \n            # If it does, add i to the sum of factors \n            sum_of_factors += i\n    \n    # Return the sum of factors \n    return sum_of_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 2\n    while i <= int(math.sqrt(n)):\n        if n % i == 0:\n            if i % 2 == 0:\n                sum += i\n        i += 1\n    if n > 2:\n        if n % 2 == 0:\n            sum += n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0 and i%2 == 0:\n            sum_even_factors += i\n    if n%2 == 0:\n        sum_even_factors += n\n    return sum_even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n\n    # Define the regular expression pattern to match the word containing 'z'\n    pattern = r'\\b[A-Za-z]+z\\b'\n\n    # Use the re.search() method to search for the pattern in the text\n    result = re.search(pattern, text)\n\n    # If the pattern is found, return the matched text\n    if result:\n        return result.group()\n\n    # If the pattern is not found, return None\n    else:\n        return None"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b(z\\w+)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+\\b'  # matches a word containing at least one letter\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = r'\\b[a-zA-Z]+\\s[a-zA-Z]+z\\b'\n    matches = re.findall(regex, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]*[zZ][a-zA-Z]*\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # Define the regular expression pattern for the word containing 'z'\n    pattern = r'\\b[a-zA-Z]+\\b\\s+\\b[a-zA-Z]*z\\b\\s+\\b[a-zA-Z]+\\b'\n\n    # Use the re.findall() function to find all the occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\sz\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1, 13):\n        if monthnum2 == 2 and is_leap_year(year):\n            days[1] = 29\n        return days[monthnum2-1]\n    else:\n        return \"Invalid month number.\"\n\n\ndef is_leap_year(year):\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        print('Invalid month number')\n        return None"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum in range(1, 13):\n        if monthnum % 2 == 0:\n            if monthnum in [4, 6, 9, 11]:\n                return True\n            else:\n                return False\n        else:\n            if monthnum in [3, 5, 7, 8, 10, 12]:\n                return True\n            else:\n                return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return \"31 days\"\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return \"30 days\"\n    else:\n        return \"28 or 29 days\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        else:\n            days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        days = [31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        days = [31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 > 12 or monthnum2 < 1:\n        return False\n    if daynum > days[monthnum2-1]:\n        return False\n    return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # check if the given month number is valid\n    if monthnum2 < 1 or monthnum2 > 12:\n        return False\n    \n    # check if the month number contains 31 days or not\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum == 2:\n        if year % 4 == 0:\n            if year % 100 == 0:\n                if year % 400 == 0:\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            return \"Leap Year\"\n        else:\n            return \"Not a Leap Year\"\n    else:\n        if monthnum2 % 4 == 0:\n            return \"Leap Year\"\n        else:\n            return \"Not a Leap Year\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if the month contains 31 days and False otherwise.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2]:\n        if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 4 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            return True\n        else:\n            return False\n    elif monthnum2 % 2 == 0:\n        if monthnum2 % 4 == 0:\n            return True\n        else:\n            return False\n    else:\n        return True"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # reverse the string using slicing notation\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        result.append(reversed_string)\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for i in range(len(stringlist)):\n        reversed_list.append(stringlist[i][::-1])\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list as input and returns the sublist with minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = []\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n            min_sublist = i\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = lst[0]\n    for i in range(1,len(lst)):\n        if len(lst[i]) < len(min_lst):\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    # Initialize two variables to store the minimum and current sublist lengths\n    min_len = lst[0]\n    curr_len = 1\n\n    # Iterate through the list and update the minimum and current lengths\n    for i in range(1, len(lst)):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            curr_len = 1\n        elif len(lst[i]) == min_len:\n            curr_len += 1\n\n    # If there is only one sublist, return it\n    if curr_len == 1:\n        return lst\n\n    # If there are multiple sublists, return the one with the minimum length\n    else:\n        for i in range(1, len(lst)):\n            if len(lst[i]) == min_len:\n                return lst[i]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize variables\n    min_length = 99999999999\n    min_sublist = []\n\n    # loop through each sublist in the list\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_sublist = []\n\n    for i in range(len(lst)):\n        sublist = []\n        for j in range(i+1, len(lst)+1):\n            sublist.append(lst[j-1])\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sublist = lst\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) < len(min_sublist):\n                min_sublist = lst[i:j+1]\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    \"\"\"\n    min_len = float('inf')\n    min_sublist = None\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(length, breadth):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = length * breadth\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    print(\"The area of the rectangle is:\", area)"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'[A-Z]+') # regex pattern to match uppercase substrings\n    return pattern.sub('', string) # replace all matches with an empty string"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'\\b[A-Z]{2,}\\b', re.IGNORECASE)\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern to find uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n    # Use re.sub() method to remove uppercase substrings from the given string\n    result = re.sub(pattern, '', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile(r'(?i)\\b[A-Z]+\\b')\n    return pattern.sub('', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'\\b[A-Z][a-z]+\\b', '', str1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define a regular expression pattern to match uppercase letters\n    pattern = r'[A-Z]+'\n    # Use the re.sub() function to replace all uppercase letters with empty strings\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    # Define a pattern to match uppercase substrings\n    pattern = r'\\b[A-Z]+\\b'\n\n    # Use the re.sub() function to remove all uppercase substrings\n    str2 = re.sub(pattern, '', str1)\n\n    return str2"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = re.compile('[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # remove uppercase substrings from the string\n    pattern = re.compile(r'\\b[A-Z][a-z]*\\b')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Use regular expression to find uppercase substrings\n    pattern = re.compile('[A-Z].*')\n    # Find all uppercase substrings\n    matches = pattern.findall(str1)\n    # Remove all uppercase substrings from the string\n    result = ''.join(match for match in str1 if not match.isupper())\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # create an empty list to store the first elements\n    first_lst = []\n    # loop through the list\n    for sub_lst in lst:\n        # if the sub-list is not empty, add the first element to the first_lst\n        if sub_lst:\n            first_lst.append(sub_lst[0])\n    # return the first_lst\n    return first_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n\n    # creating a new list to store the sublist elements\n    result = []\n\n    # iterating through each sublist in the original list\n    for i in lst:\n        # appending the first element of each sublist to the new list\n        result.append(i[0])\n\n    # returning the new list with the first element of each sublist\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    return [elem[0] for sublist in lst for elem in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i][0])\n    return res"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for item in lst:\n        yield item[0]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for item in lst:\n        new_lst.append(item[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(string):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for i in str:\n        if i.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize empty list to store all combinations\n    all_combinations = []\n    \n    # Find all possible combinations of elements from the given list\n    for i in range(1, len(list1)+1):\n        for subset in combinations(list1, i):\n            all_combinations.append(list(subset))\n    \n    # Return the list of all combinations\n    return all_combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            print(list1[i:j])"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # Initialize an empty list to store the combinations\n    combinations = []\n    \n    # Iterate over the list and for each element, generate all possible combinations\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            combinations.append(list1[i:j])\n    \n    # Return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # define an empty list to store the combinations\n    combinations = []\n    # iterate over the input list\n    for i in range(len(list1)):\n        # define a new list to store the current combination\n        current_combination = [list1[i]]\n        # iterate over the remaining elements of the list\n        for j in range(i+1, len(list1)):\n            # add the remaining elements to the current combination\n            current_combination.append(list1[j])\n            # add the current combination to the list of combinations\n            combinations.append(current_combination.copy())\n            # remove the last element from the current combination to avoid duplicates\n            del current_combination[-1]\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    \"\"\"\n    # Base case: if the list has only one element, there is only one combination\n    if len(list1) == 1:\n        return [list1]\n\n    # Recursive case: find all combinations of the first element and all combinations of the remaining elements\n    combinations = []\n    for i in range(len(list1)):\n        first_element = list1[i]\n        remaining_elements = list1[:i] + list1[i+1:]\n        for c in combinations_list(remaining_elements):\n            combinations.append([first_element] + c)\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(lst):\n    '''\n    This function takes a list as input and returns a list of all possible combinations of its elements.\n    '''\n    result = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            result.append(lst[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # create an empty list to store the combinations\n    combinations = []\n\n    # loop through each element in the list\n    for i in range(len(list1)):\n\n        # loop through each element after the current one\n        for j in range(i+1, len(list1)):\n\n            # create a tuple with the current and next elements\n            current = (list1[i], list1[j])\n\n            # add the current combination to the list of combinations\n            combinations.append(current)\n\n    # return the list of combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result\n"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            combo = []\n            for k in range(i, j):\n                combo.append(list1[k])\n            result.append(combo)\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_so_far = max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    \n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    curr_product = 1\n    for num in arr:\n        if curr_product < 0:\n            curr_product = 1\n        curr_product *= num\n        max_product = max(max_product, curr_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = 1\n    min_ending_here = 1\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        min_ending_here = min(arr[i], min_ending_here*arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n        \n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n\n    return max_so_far\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    This function takes an array as input and finds the maximum product subarray.\n    The function uses Kadane's algorithm to find the maximum subarray product.\n    The time complexity of the function is O(n) and the space complexity is O(1).\n    '''\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(n):\n        if dict[i]!= dict[i+1]:\n            count += 1\n    if count == n-1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # Initialize count to 0\n    count = 0\n    # Iterate over all the keys in the dictionary\n    for key in dict:\n        # If the value at the current key is not the same as the first value, increment count\n        if dict[key]!= dict[dict.keys()[0]]:\n            count += 1\n            # If count reaches n, return False\n            if count == n:\n                return False\n    # If we make it through the loop without finding any inconsistencies, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    \"\"\"\n    for i in dict:\n        if not all(x == dict[i] for x in dict[i][:n]):\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # Check if the length of the dictionary is less than n\n    if len(dict) < n:\n        return False\n\n    # Check if all the values are same\n    for val in dict.values():\n        if val!= dict[list(dict.keys())[0]]:\n            return False\n\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in dict.values():\n        if count == 0:\n            first_value = i\n        else:\n            if first_value!= i:\n                return False\n        count += 1\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    This function takes in a dictionary and an integer n.\n    It checks if all values in the dictionary are same.\n    '''\n    for i in range(len(dict)):\n        if dict[i]!= dict[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # iterate through each key-value pair in the dictionary\n    for key, value in dict.items():\n        # if any value is not same as n, return False\n        if value!= n:\n            return False\n    # if all values are same as n, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    # initialize a variable to store the first value in the dictionary\n    value = dict[next(iter(dict))]\n\n    # iterate over the dictionary values and check if they are all the same\n    for key, val in dict.items():\n        if val!= value:\n            return False\n\n    # if all values are the same, return True\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    count = {}\n\n    for i in dict.values():\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    if n == len(count):\n        return True\n    else:\n        return False"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None and v!= ''}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    return {k:v for k,v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if not value:\n            del dict1[key]"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    # Initialize two pointers, left and right, to the first and last elements of the array respectively\n    left = 0\n    right = n - 1\n\n    # Initialize three variables, max_left, max_right, and max_subseq, to negative infinity\n    max_left = float('-inf')\n    max_right = float('-inf')\n    max_subseq = float('-inf')\n\n    # Traverse the array from left to right and update the max_left and max_right variables as follows:\n    # - If the current element is greater than max_left, update max_left and max_subseq\n    # - If the current element is greater than max_right and less than or equal to max_left, update max_right and max_subseq\n    while left < right:\n        if arr[left] > max_left:\n            max_left = arr[left]\n            max_subseq = arr[left] * (right - left)\n        elif arr[left] > max_right and arr[left] <= max_left:\n            max_right = arr[left]\n            max_subseq = arr[left] * (right - left)\n        left += 1\n\n    # Traverse the array from right to left and update the max_right and max_subseq variables as follows:\n    # - If the current element is greater than max_right, update max_right and max_subseq\n    # - If the current element is greater than max_left and less than or equal to max_right, update max_left and max_subseq\n    while left < right:\n        if arr[right] > max_right:\n            max_right = arr[right]\n            max_subseq = arr[right] * (right - left)\n        elif arr[right] > max_left and arr[right] <= max_right:\n            max_left = arr[right]\n            max_subseq = arr[right] * (right - left)\n        right -= 1\n\n    # Return the maximum product formed by multiplying numbers of an increasing subsequence of the array\n    return max_subseq"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    start = 0\n    end = 0\n    length = len(arr)\n\n    # Iterate through the array and find the maximum product formed by multiplying numbers of increasing subsequences\n    while end < length:\n        if arr[end] > arr[start]:\n            # Update the maximum product\n            current_product = max(current_product * arr[end], arr[start] * arr[end])\n            max_product = max(max_product, current_product)\n            end += 1\n        else:\n            # Update the start index\n            start += 1\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    \n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        \n        max_so_far = max(max_so_far, max_ending_here)\n    \n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    dp = [[0 for j in range(n)] for i in range(n)]\n    max_product = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j+1] - dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(n-1, -1, -1):\n        for j in range(i, -1, -1):\n            if arr[j] > arr[j+1]:\n                dp[i][j] = max(dp[i][j], dp[i][j+1] + dp[i-1][j+1])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n\n    for i in range(n):\n        max_product = max(max_product, dp[n-1][i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return 0\n\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    start_index = 0\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[start_index]:\n            current_product = arr[i]\n            start_index = i\n        else:\n            current_product *= arr[i]\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < min_product:\n            min_product = current_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    max_product = float('-inf')\n\n    # Iterate through all possible increasing subsequences of the array\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Calculate the product of the subsequence\n            product = 1\n            for k in range(i, j):\n                product *= arr[k]\n\n            # Update the maximum product if the new product is greater\n            max_product = max(max_product, product)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            current_product *= arr[j-1]\n            if current_product > max_product:\n                max_product = current_product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    max_product = float('-inf')\n    max_product_ending_at_i = float('-inf')\n    for i in range(n):\n        max_product_ending_at_i = max(max_product_ending_at_i * arr[i], arr[i], 0)\n        max_product = max(max_product, max_product_ending_at_i)\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_increase = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_increase:\n            max_increase = arr[i]\n            max_product = max(max_product, max_increase)\n        else:\n            max_product = max(max_product, max_increase * arr[i])\n\n        min_product = min(min_product, arr[i])\n\n        if arr[i] < min_product:\n            min_product = arr[i]\n            max_increase = min_product\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    \"\"\"\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Loop through the tuple and find the pairwise sum of each element\n    pairwise_sum = 0\n    for i in range(len(test_tup)-1):\n        pairwise_sum += test_tup[i] + test_tup[i+1]\n\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    size = len(test_tup)\n    add_list = []\n    for i in range(1, size):\n        add_list.append(test_tup[i] + test_tup[i-1])\n    return add_list"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        raise ValueError(\"Input tuple must contain at least 2 elements.\")\n\n    result = []\n\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] + test_tup[i+1])\n\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    # initialize the sum variable\n    sum = 0\n    \n    # iterate through the list of elements and calculate the pairwise sum\n    for i in range(len(test_tup)-1):\n        sum += test_tup[i] + test_tup[i+1]\n    \n    # return the final sum\n    return sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n\n    # Convert the tuple to a list so that we can use list indexing\n    test_list = list(test_tup)\n\n    # Calculate the number of elements in the tuple\n    num_elements = len(test_list)\n\n    # Iterate over all pairs of neighboring elements in the list\n    for i in range(num_elements-1):\n        for j in range(i+1, num_elements):\n            # Add the pairwise elements and store the result in a new list\n            result = test_list[i] + test_list[j]\n            # Add the result to the test list\n            test_list.append(result)\n\n    # Convert the test list back to a tuple and return it\n    return tuple(test_list)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Loop through each element in the tuple\n    for i in range(len(test_tup)):\n        # Add the pairwise sum to the result\n        result += test_tup[i] + test_tup[i+1]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) < 2:\n        return test_tup\n\n    return (test_tup[0] + test_tup[1], test_tup[0] + test_tup[-1], test_tup[-1] + test_tup[-2])\n"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return sum(test_tup[i] + test_tup[i+1] for i in range(len(test_tup)-1))"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_elements = []\n    for i in range(len(test_tup)-1):\n        neighboring_elements.append(test_tup[i] + test_tup[i+1])\n    return neighboring_elements"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    MOD = 10**9 + 7\n    inv = [0] * n\n    inv[0] = pow(arr[0], n-2, n)\n    for i in range(1, n):\n        inv[i] = (n - (n // i) * inv[n // i]) % n\n    prod = 1\n    for i in range(n):\n        prod = (prod * arr[i] * inv[i]) % n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes an array and a number n as input and returns the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes in an array and a number n and returns the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n    return result"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes an array and a number 'n' as input and returns the product of the array multiplication modulo 'n'.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n):\n    product = 1\n    for i in arr:\n        product = (product * i) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product = (product * arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    result = 1\n    for i in arr:\n        result = (result*i) % n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 3:\n        return False\n    \n    if l[0]!= l[1]:\n        return False\n    \n    for i in range(1, len(l)-1):\n        if l[i]!= l[i-1]+1:\n            return False\n    \n    if l[-1]!= l[-2]:\n        return False\n    \n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    This function takes a list as input and returns True if the list contains consecutive numbers, False otherwise.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]+1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n\n    # Check if list contains only numbers\n    for i in l:\n        if not isinstance(i, int):\n            return False\n\n    # Check if list is empty\n    if len(l) == 0:\n        return False\n\n    # Check if list has only one element\n    if len(l) == 1:\n        return True\n\n    # Initialize variables for current number and previous number\n    current_num = l[0]\n    prev_num = None\n\n    # Iterate over the list and check if there are consecutive numbers\n    for num in l[1:]:\n        if num!= current_num + 1:\n            return False\n        current_num = num\n\n    # If the loop completes without returning False, it means the list contains consecutive numbers\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function checks whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]-1:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1] - 1: \n            return True \n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1:\n        if l[i] + 1 == l[i+1]:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    consecutive = []\n    for i in range(len(l)):\n        if l[i] == l[i+1]:\n            consecutive.append(l[i])\n    if len(consecutive) == len(l):\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] + 1 == l[i+1]: \n            return True\n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n\n    # create a set of unique elements from the two lists\n    unique_elements = set(test_list1 + test_list2)\n\n    # create an empty list to store the intersection of elements\n    intersection = []\n\n    # iterate through the unique elements and check if they are present in both lists\n    for element in unique_elements:\n        if (element in test_list1 and element in test_list2) or (element in test_list2 and element in test_list1):\n            intersection.append(element)\n\n    # return the intersection of elements\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty list to store the intersection of the given tuples\n    result = []\n    # Loop through both the tuple lists\n    for tup1 in test_list1:\n        # Loop through the second tuple list and check if each tuple in the first tuple list is present in the second tuple list\n        for tup2 in test_list2:\n            # If the tuple is present in the second tuple list, add it to the result list\n            if tup1 == tup2:\n                result.append(tup1)\n                break\n    # Return the result list\n    return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    common_tuples = set()\n\n    for tuple1 in test_list1:\n        for tuple2 in test_list2:\n            if tuple1 == tuple2:\n                common_tuples.add(tuple1)\n\n    return common_tuples"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # converting the given list to set\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # finding the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # converting the set to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection_set = set(test_list1) & set(test_list2)\n    return tuple(intersection_set)\n"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Check if the input lists are of the same length\n    if len(test_list1)!= len(test_list2):\n        return \"Lists must be of the same length\"\n    # Create a set of tuples from the input lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Return the intersection as a list of tuples\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    intersection = set1.intersection(set2)\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements\n    unique_elements = set()\n\n    # Loop through each element in the first list and add it to the set of unique elements\n    for element in test_list1:\n        unique_elements.add(element)\n\n    # Loop through each element in the second list and add it to the set of unique elements if it exists in the first list\n    for element in test_list2:\n        if element in unique_elements:\n            unique_elements.add(element)\n\n    # Convert the set back to a tuple and return it\n    return tuple(unique_elements)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create a dictionary to store the elements of list 1 and list 2\n    dictionary = {}\n    for item in test_list1:\n        if item in test_list2:\n            dictionary[item] = 1\n    \n    # Create a list to store the intersection of elements in both lists\n    intersection_list = []\n    \n    # Iterate over the keys of the dictionary and append them to the intersection list if they are also present in list 2\n    for key in dictionary.keys():\n        if key in test_list2:\n            intersection_list.append(key)\n    \n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # create a set of unique elements in both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of unique elements in both lists\n    intersection = set1.intersection(set2)\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # create a new string with the old character replaced with the new character\n    str2 = str1.replace(ch, newch)\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function takes in three arguments - a string, a character to be replaced and a new character to replace it with.\n    It replaces all occurrences of the character in the string with the new character and returns the modified string.\n    '''\n    new_str = ''\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char == ch:\n            new_str += newch\n        else:\n            new_str += char\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Create a new string that replaces all occurrences of the old character with the new character\n    str2 = str1.replace(ch, newch)\n    # Return the new string\n    return str2"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    str1 = str1.replace(ch, newch)\n    return str1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    This function takes a dictionary as an input and sorts it by value using the Counter module in Python.\n    '''\n    sorted_dict = dict(Counter(dict1).most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Convert the dictionary to a Counter object\n    counter = Counter(dict1)\n    \n    # Sort the Counter object based on value in descending order\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    \n    # Create a new dictionary from the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n    \n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # Create a Counter object from the input dictionary\n    counter = Counter(dict1)\n\n    # Sort the Counter object by value in descending order\n    sorted_counter = counter.most_common(None)\n\n    # Create a new dictionary with the sorted Counter object\n    sorted_dict = dict(sorted_counter)\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    count = Counter(dict1)\n    sorted_dict = dict(sorted(count.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_dict)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return None\n    min_num = nums[0]\n    max_num = nums[0]\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        elif num > max_num:\n            max_num = num\n    return min_num + max_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # Find the smallest and largest values\n    smallest = nums[0]\n    largest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        elif num > largest:\n            largest = num\n    \n    # Compute the sum of the smallest and largest values\n    return smallest + largest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    # Find the largest value in the array\n    max_val = max(nums)\n\n    # Find the smallest value in the array\n    min_val = min(nums)\n\n    # Return the sum of the maximum and minimum values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the maximum and minimum values in the array\n    min_value = min(nums)\n    max_value = max(nums)\n    # Calculate the sum of the minimum and maximum values\n    sum_of_values = min_value + max_value\n    return sum_of_values"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return None\n    \n    # find the largest and smallest values in the array\n    max_val = nums[0]\n    min_val = nums[0]\n    for num in nums:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n            \n    # find the sum of the largest and smallest values\n    return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = min(nums)\n    smallest = max(nums)\n    return largest + smallest"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    This function takes a string as input and converts it to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    return lower_string"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Define the pattern to match lowercase substrings\n    pattern = re.compile(r'\\b[a-z]+\\b')\n    # Use the search() method to find all matches of the pattern in the string\n    matches = pattern.findall(str1)\n    # Remove all lowercase matches from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n    \"\"\"\n    lowercase_regex = re.compile(r'[a-z]+')\n    return lowercase_regex.sub('', string)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Join the words back into a string and return\n    return''.join(words)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Define a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'(?<![\\w])([a-z][a-z0-9]*[a-z])(?![\\w])')\n\n    # Find all the lowercase substrings and replace them with an empty string\n    str1 = pattern.sub('', str1)\n\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    \"\"\"\n    # Remove all lowercase substrings using regular expression\n    pattern = r'\\b[a-z]+\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    # define regex pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n\n    # find all lowercase substrings using regex pattern\n    matches = pattern.findall(string)\n\n    # remove the lowercase substrings from the string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = re.sub(r'[a-z]', '', str1)\n    return str2"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    lowercase_pattern = re.compile(r'[a-z]+')\n    return lowercase_pattern.sub('', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # create a list of lowercase substrings\n    lowercase_substrings = re.findall('[a-z]+', str1)\n    \n    # loop through the list and remove them from the original string\n    for substring in lowercase_substrings:\n        str1 = re.sub(substring, '', str1)\n        \n    return str1"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    This function takes a positive integer as input and returns the first digit of the number.\n    '''\n    if n == 0:\n        return \"The number is zero.\"\n    else:\n        return str(n)[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Extract the first digit from the string\n    first_digit = num[0]\n    # Return the first digit\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(n)\n    # Return the first digit of the string\n    return num_str[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes an integer as input and returns the first digit of the number.\n    \"\"\"\n    if n < 0:\n        n = abs(n)\n    if n == 0:\n        return 0\n    else:\n        return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    This function takes an integer n as input and returns the first digit of the number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10**n % 10"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    # Creating a new list to store odd numbers\n    odd_list = []\n    # Looping through the list of integers\n    for num in list:\n        # If the number is odd, adding it to the new list\n        if num % 2!= 0:\n            odd_list.append(num)\n    # Returning the new list of odd numbers\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    return [x for x in lst if x % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    return [num for num in lst if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    result = []\n    for num in list:\n        if num % 2!= 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes = sum([num**3 for num in range(1, n+1)])\n\n    # Calculate the sum of the first n natural numbers\n    sum_numbers = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    # initialize the variables\n    sum_cubes = 0\n    sum_natural = 0\n\n    # compute the sum of cubes of the first n natural numbers\n    for i in range(n):\n        sum_cubes += i**3\n\n    # compute the sum of the first n natural numbers\n    for i in range(n):\n        sum_natural += i\n\n    # compute the difference between the two sums\n    diff = abs(sum_cubes - sum_natural)\n\n    # return the difference\n    return diff"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Initializing variables\n    sum_cubes = 0\n    sum_numbers = 0\n    \n    # Calculating the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_cubes += i**3\n    \n    # Calculating the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_numbers += i\n        \n    # Returning the difference between the two sums\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n\n    # Define the sum of cubes of the first n natural numbers\n    sum_cubes = sum([i**3 for i in range(1, n+1)])\n\n    # Define the sum of the first n natural numbers\n    sum_natural = sum(range(1, n+1))\n\n    # Return the difference between the two sums\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    \"\"\"\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    cubes_sum = sum([i**3 for i in range(1, n+1)])\n    \n    # Calculate the sum of the first n natural numbers\n    sum_sum = sum(range(1, n+1))\n    \n    # Calculate the difference between the sums\n    difference = cubes_sum - sum_sum\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural = 0\n    \n    # calculating the sum of cubes of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_cubes += i ** 3\n    \n    # calculating the sum of the first n natural numbers\n    for i in range(1, n+1):\n        sum_of_natural += i\n    \n    # finding the difference between the sum of cubes and the sum of natural numbers\n    difference = sum_of_cubes - sum_of_natural\n    \n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_natural_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_natural_numbers += i\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_natural = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_natural += i\n    return sum_cubes - sum_natural"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(x**3 for x in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n    return abs(sum_of_cubes - sum_of_natural_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # calculating the sum of cubes of the first n natural numbers\n    cubes = sum(i**3 for i in range(n+1))\n    \n    # calculating the sum of the first n natural numbers\n    sum_natural = sum(range(n+1))\n    \n    # subtracting the two sums to find the difference\n    diff = cubes - sum_natural\n    \n    return diff"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor = A[i] ^ A[j]\n            if xor % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    xor_values = set() # Create an empty set to store the xor values\n    \n    for i in range(N):\n        # For each element in the array, calculate the xor value\n        xor_value = sum([A[j] for j in range(N) if i!= j])\n        \n        # If the xor value is odd, add it to the set\n        if xor_value % 2!= 0:\n            xor_values.add(xor_value)\n            \n    return len(xor_values)"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i]^A[j]%2!=0:\n                count+=1\n                if count>=N:\n                    return count\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    This function takes in an array A and an integer N as input. The array A contains N integers and represents a set. \n    The function returns the number of pairs whose xor value is odd.\n    \"\"\"\n    xor_sum = 0\n    count = 0\n    for i in range(len(A)):\n        xor_sum = xor_sum ^ A[i]\n        count = count + (N - 1) // 2  # Formula to count number of pairs\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes two lists A and N and counts the number of pairs whose xor value is odd.\n    '''\n    xor_sum = 0\n    count = 0\n    for i in range(len(A)):\n        xor_sum += A[i] ^ N[i]\n        if xor_sum % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N):\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        xor_value ^= i\n    for i in range(N):\n        if (xor_value & 1) == 1:\n            count += 1\n        xor_value >>= 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            xor_val = A[i] ^ A[j]\n            if xor_val % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N):\n    # Initialize count variable to 0\n    count = 0\n    # Loop through all possible pairs (i,j) of A\n    for i in range(N):\n        for j in range(i+1,N):\n            # Calculate xor of A[i] and A[j]\n            xor = A[i] ^ A[j]\n            # If xor is odd, increment count by 1\n            if xor%2!= 0:\n                count += 1\n    # Return the count of odd pairs\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(chr(ord(c.lower()) ^ 32) if c.isalpha() else c for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.upper() if c.islower() else c.lower() for c in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # loop through each character in the string\n    for i in range(len(string)):\n        # convert the character to lowercase and uppercase using the islower and isupper functions\n        if string[i].islower():\n            string = string[:i] + string[i].upper() + string[i+1:]\n        else:\n            string = string[:i] + string[i].lower() + string[i+1:]\n    # return the modified string\n    return string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    # initialize a variable to store the result string\n    result = ''\n    # loop through each character in the string\n    for char in string:\n        # if the character is a lowercase letter, convert it to uppercase\n        if char.islower():\n            result += char.upper()\n        # if the character is an uppercase letter, convert it to lowercase\n        elif char.isupper():\n            result += char.lower()\n        # otherwise, just add the character to the result string as is\n        else:\n            result += char\n    # return the result string\n    return result"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in string)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    digit_sum = 0\n    # loop through the digits of n1 and n2 and add the difference to the digit_sum\n    for i in range(len(str(n1))):\n        digit_sum += abs(int(str(n1)[i]) - int(str(n2)[i]))\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = n1 - n2\n    sum_diff = 0\n\n    while diff > 0:\n        sum_diff += diff % 10\n        diff //= 10\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(len(str(n1))):\n        digit_sum = abs(n1 % 10 - n2 % 10)\n        sum += digit_sum\n        n1 //= 10\n        n2 //= 10\n    return sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    digits_n1 = [int(digit) for digit in str(n1)]\n    digits_n2 = [int(digit) for digit in str(n2)]\n    # Calculate the per-digit differences\n    differences = [abs(digits_n1[i] - digits_n2[i]) for i in range(len(digits_n1))]\n    # Calculate the sum of the differences\n    total_difference = sum(differences)\n    return total_difference"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    digit_list1 = [int(d) for d in str(n1)]\n    digit_list2 = [int(d) for d in str(n2)]\n\n    # Calculate the per-digit difference\n    diff = [abs(digit1 - digit2) for digit1, digit2 in zip(digit_list1, digit_list2)]\n\n    # Calculate the sum of the differences\n    total_diff = sum(diff)\n\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    while n1!= 0 or n2!= 0:\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to strings and split them into lists\n    num1_str = str(n1)\n    num2_str = str(n2)\n    num1_list = list(num1_str)\n    num2_list = list(num2_str)\n\n    # Initialize variables to keep track of the sum of per-digit differences\n    sum_diff = 0\n\n    # Loop through each character in the two numbers\n    for i in range(len(num1_list)):\n        # Subtract the corresponding characters in the two numbers and take the absolute value\n        diff = abs(int(num1_list[i]) - int(num2_list[i]))\n        # Add the difference to the sum of per-digit differences\n        sum_diff += diff\n\n    # Return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # convert the given integers into lists of digits\n    list1 = [int(d) for d in str(n1)]\n    list2 = [int(d) for d in str(n2)]\n    \n    # calculate the per-digit difference between the two lists\n    diff = [abs(list1[i]-list2[i]) for i in range(len(list1))]\n    \n    # return the sum of the per-digit differences\n    return sum(diff)"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # initialize the sum of per-digit difference to 0\n    sum_diff = 0\n    \n    # loop through each digit of the two integers\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # get the i-th digit of each integer\n        digit1 = int(str(n1)[i]) if i < len(str(n1)) else 0\n        digit2 = int(str(n2)[i]) if i < len(str(n2)) else 0\n        \n        # calculate the per-digit difference between the two digits\n        diff = abs(digit1 - digit2)\n        \n        # add the per-digit difference to the sum of per-digit differences\n        sum_diff += diff\n    \n    # return the sum of per-digit differences\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers to a string and split it into a list of digits\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize a variable to store the sum of the per-digit differences\n    digit_sum = 0\n    \n    # Loop through each digit of both strings\n    for i in range(len(str1)):\n        # Subtract the corresponding digits of the two strings and add the result to the digit_sum\n        digit_sum += abs(int(str1[i]) - int(str2[i]))\n    \n    # Return the digit_sum\n    return digit_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and its index\n    max_sum = float('-inf')\n    max_index = -1\n\n    # Initialize the sum and the current subarray sum\n    current_sum = 0\n    subarray_sum = 0\n\n    # Traverse through the list\n    for i in range(size):\n        # Update the current subarray sum\n        current_sum += a[i]\n\n        # Update the subarray sum if the maximum sum is reached\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_index = i\n\n        # Update the subarray sum if the current subarray sum becomes negative\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum and its index\n    return max_sum, max_index"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf') # initializing the max_sum variable\n    current_sum = 0 # initializing the current_sum variable\n    \n    # iterating through the list\n    for i in range(size):\n        current_sum += a[i] # adding the current element to the current_sum variable\n        \n        # checking if the current_sum variable is greater than the max_sum variable\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n        # checking if the current_sum variable becomes negative\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n\n    # Initialize the maximum subarray sum and its starting index\n    max_sum = float('-inf')\n    start = 0\n\n    # Iterate through the list starting from the beginning and calculate the sum of each subarray\n    for i in range(size):\n        # Calculate the sum of the current subarray\n        current_sum = sum(a[start:i+1])\n\n        # Update the maximum sum and its starting index if necessary\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    # Return the maximum sum and its starting index\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    # Find the maximum subarray sum\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(len(a) - size + 1):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n    for i in range(size-1, start-1, -1):\n        current_sum -= a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n            \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    elif size == 2:\n        return max(a[0], a[1])\n    else:\n        max_ending_here = max_sub_array_sum(a, size-1)\n        max_so_far = max(max_ending_here, a[size-1])\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(size):\n        current_sum += a[i]\n\n        # Update the maximum sum if the current sum is larger than the previous maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    \n    for i in range(size):\n        current_sum += a[i]\n        \n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    if size == 0 or size > len(a):\n        return 0\n\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for end in range(size, len(a)):\n        current_sum += a[end]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = end - size + 1\n\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Initialize the maximum sum and the current sublist sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the given list\n    for i in range(size):\n        # Add the current element to the current sublist sum\n        current_sum += a[i]\n\n        # Update the maximum sum if the current sublist sum is greater than the maximum sum\n        max_sum = max(max_sum, current_sum)\n\n        # If the current sublist sum becomes negative, reset it to zero\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Find the union of the two input tuples\n    union = set(test_tup1) | set(test_tup2)\n    # Convert the set to a list and sort it in ascending order\n    sorted_union = sorted(union)\n    # Print the sorted union\n    print(sorted_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # initialize an empty set to store the unique elements\n    union_set = set()\n    # add the elements of both tuples to the set\n    union_set.update(test_tup1)\n    union_set.update(test_tup2)\n    # convert the set to a list and sort it\n    sorted_union_list = sorted(list(union_set))\n    # return the sorted list\n    return sorted_union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Flatten the two tuples\n    flat_tup1 = tuple(x for tup in test_tup1 for x in tup)\n    flat_tup2 = tuple(x for tup in test_tup2 for x in tup)\n    \n    # Find the union of the two sets\n    union_set = set(flat_tup1) | set(flat_tup2)\n    \n    # Convert the set back to a sorted tuple and return it\n    sorted_union_tup = tuple(sorted(union_set))\n    return sorted_union_tup"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Create a set from the combined list to remove duplicates\n    unique_set = set(combined_list)\n\n    # Convert the set back into a sorted list\n    sorted_list = sorted(unique_set)\n\n    # Output the sorted list\n    print(sorted_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_set = set(test_tup1)\n    union_set = union_set.union(set(test_tup2))\n    return sorted(union_set)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples into a single list\n    union_list = test_tup1 + test_tup2\n    \n    # Sort the combined list in ascending order\n    union_list.sort()\n    \n    # Convert the sorted list back to a tuple and return it\n    return tuple(union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(set(union_list))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # union of two tuples = union of sets\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    union_set = set_tup1.union(set_tup2)\n    \n    # convert union set to a list and sort it\n    union_list = sorted(list(union_set))\n    \n    # output union list\n    print(\"Union of the elements of the two tuples:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Use set() to create a set of unique elements in the two input tuples\n    union_set = set(test_tup1).union(set(test_tup2))\n    # Convert the set back to a list and sort it\n    union_list = sorted(list(union_set))\n    # Return the sorted union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # using set() to remove duplicates from the two tuples\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    \n    # using union() to find the union of the two sets\n    union_set = test_set1.union(test_set2)\n    \n    # converting the set back to a list and sorting it in ascending order\n    sorted_list = sorted(list(union_set))\n    \n    # outputting the sorted list\n    print(sorted_list)\n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n    for i in range(len(lst)):\n        length = 0\n        for j in range(i, len(lst)):\n            if lst[j] == lst[i]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_len = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_len:\n                max_len = len(lst[i:j+1])\n\n    return max_len"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            max_length = max(max_length, len(lst[i:j+1]))\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n                \n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    This function takes a list as input and returns the length of the longest sublist.\n    '''\n\n    # Initialize the longest sublist length variable with 0\n    max_length = 0\n\n    # Loop through the list and calculate the length of each sublist\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) > max_length:\n                max_length = len(sublist)\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i, len(lst)):  \n            longest_length = max(longest_length, len(lst[i:j+1]))  \n    return longest_length  "
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            length = len(sublist)\n            if length > max_length:\n                max_length = length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if max_length < len(lst[i]):\n            max_length = len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        sublist = lst[i:]\n        sublist_length = len(sublist)\n        if sublist_length > max_length:\n            max_length = sublist_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize a list to store the lengths of each sublist\n    lengths = []\n\n    # loop through each element in the list\n    for i in range(len(lst)):\n        # initialize a variable to store the current sublist\n        curr_sublist = []\n        # loop through each element after i\n        for j in range(i+1, len(lst)):\n            # add the current element to the sublist\n            curr_sublist.append(lst[j])\n            # check if the current sublist is longer than the maximum length seen so far\n            if len(curr_sublist) > len(lengths) or (len(curr_sublist) == len(lengths) and max(lengths) < len(curr_sublist)):\n                # if it is, update the list with the current sublist\n                lengths = curr_sublist\n\n    # return the maximum length of any sublist\n    return max(lengths)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\\w)\"(\\w+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\")(\\w+)\\s*:\\s*\"([^\"]+)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function takes a string as input and extracts values between quotation marks.\n    '''\n    # Define a regular expression pattern to match values between quotation marks\n    pattern = r'(?<!\\\\)\"([^\"]*)\"(?!\\\\)'\n\n    # Use the re.findall() function to find all the matches of the pattern in the input string\n    matches = re.findall(pattern, text)\n\n    # Return a list of the values extracted from the input string\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\".*?\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        text (str): The string from which the values should be extracted.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    # Define a regular expression pattern for matching quotation marks\n    pattern = re.compile(r'(\".*?\")')\n\n    # Use the search method of the regular expression object to find all\n    # matches of the pattern in the text\n    matches = pattern.findall(text)\n\n    # Extract the values from the matches and return them as a list\n    values = [match.strip('\"') for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'\"([^\"]*)\"'  # regex pattern to match quotation marks\n    matches = re.findall(pattern, text)  # find all matches using the regex pattern\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = re.compile(r'\".*?\"') # regex pattern for finding values between quotation marks\n    matches = pattern.findall(text) # extract values from text using regex pattern\n    values = []\n    for match in matches:\n        value = match.strip('\"') # strip quotes from value\n        values.append(value)\n    return values"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n): \n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n\n    # Create a dictionary to store the count of equal elements\n    count_dict = {}\n\n    # Iterate through the list of integers\n    for i in arr:\n\n        # If the element is already present in the dictionary, increment the count\n        if i in count_dict:\n            count_dict[i] += 1\n        # If the element is not present in the dictionary, add it with a count of 1\n        else:\n            count_dict[i] = 1\n\n    # Iterate through the dictionary to count the number of possible unordered pairs\n    count = 0\n    for i in count_dict:\n        for j in count_dict:\n            if i!= j:\n                count += count_dict[i] * count_dict[j]\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word): \n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    # Split the word into a list of characters\n    char_list = list(word)\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Split the string into characters and return the list\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Convert the input integer to a string\n    input_str = str(n)\n    # Loop through each character in the string\n    for char in input_str:\n        # Convert the character to an integer and add it to the sum of digits\n        sum_digits += int(char)\n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative\")\n    elif n == 0:\n        return 0\n    else:\n        sum = 0\n        while n > 0:\n            sum += n % 10\n            n //= 10\n        return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input to a string to make it iterable\n    digits = str(n)\n    # Initialize the sum to 0\n    total = 0\n    # Loop through each digit in the string\n    for digit in digits:\n        # Convert the digit to an integer and add it to the sum\n        total += int(digit)\n    # Return the total sum\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Get the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The number whose digits should be summed.\n\n    Returns:\n    int: The sum of the digits of n.\n    \"\"\"\n    # Convert n to a string representation\n    s = str(n)\n    # Initialize a running sum to zero\n    sum = 0\n    # Iterate over the characters in the string and add each digit to the sum\n    for c in s:\n        if c.isdigit():\n            sum += int(c)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Initialize a variable to store the sum of digits\n    sum = 0\n    # Loop through each digit of the input number and add it to the sum\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    # Return the final sum of digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    num_str = str(n)\n    # Initialize the sum variable\n    sum = 0\n    # Iterate over each character in the string\n    for digit in num_str:\n        # Add the integer digit to the sum\n        sum += int(digit)\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    digits = []\n    while n > 0:\n        digits.append(n % 10)\n        n //= 10\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n > 0:\n        digit = n % 10\n        n //= 10\n        total += digit\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the input number to a string and then to a list of digits.\n    digits = [int(digit) for digit in str(n)]\n    # Initialize the sum variable to 0.\n    total = 0\n    # Loop through the digits list and add each digit to the sum.\n    for digit in digits:\n        total += digit\n    # Return the sum.\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit\n        n //= 10\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    This function takes a list as input and returns True if the list is sorted in non-decreasing order, and False otherwise.\n    '''\n    if len(list1) < 2:\n        return True\n\n    for i in range(1, len(list1)):\n        if list1[i] <= list1[i - 1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n    # Check if the first element is greater than or equal to the second element\n    if list1[0] >= list1[1]:\n        return False\n    # Check if the rest of the list is sorted\n    for i in range(1, len(list1)):\n        if list1[i] < list1[i-1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) <= 1:\n        return True\n    elif list1[0] < list1[1]:\n        return issort_list(list1[1:])\n    else:\n        return False"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    empty_dict_list = []\n    for i in range(length):\n        empty_dict_list.append({})\n    return empty_dict_list"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    for i, sublist in enumerate(list1):\n        sublist.sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist in the given list of lists\n    for sublist in list1:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop over each sublist in the list of lists\n    for sublist in list1:\n        # Convert the sublist to a list of strings\n        sublist = [str(elem) for elem in sublist]\n        # Sort the sublist using the built-in `sort` function\n        sublist.sort()\n        # Convert the sorted list of strings back to a list of lists\n        sublist = [list(elem) for elem in sublist]\n        # Replace the original sublist with the sorted sublist\n        list1[list1.index(sublist)] = sublist"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n\n    # create a set to store unique numbers from all lists\n    unique_nums = set()\n\n    # loop through all lists and add unique numbers to set\n    for num_list in nums:\n        unique_nums.update(num_list)\n\n    # convert set to list and return it\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a list with unique numbers.\n    It removes duplicate numbers by converting the list to set and then back to a list.\n    \"\"\"\n    return list(set(nums))"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with all the unique numbers.\n    The order of the unique numbers in the new list is preserved.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicates from a list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of unique numbers.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    # initialize an empty set to store unique numbers\n    unique_nums = set()\n\n    # loop through the list and add each unique number to the set\n    for num in list_data:\n        if num not in unique_nums:\n            unique_nums.add(num)\n\n    # use the length of the set as the product of the unique numbers\n    return len(unique_nums)"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = list(set(list_data))\n    product = 1\n    for num in unique_list:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = list(set(list_data))  # remove duplicates using set\n    unique_product = 1  # initialize product to 1\n\n    for num in unique_numbers:\n        unique_product *= num  # calculate product of each unique number\n\n    return unique_product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    # Create a set of unique numbers from the input list\n    unique_set = set(list_data)\n    # Calculate the product of the unique numbers using a for loop and multiplication\n    product = 1\n    for num in unique_set:\n        product *= num\n    # Return the final product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list of integers and returns the product of the unique numbers in the list.\n    \"\"\"\n    # Create a set of the unique numbers in the list\n    unique_nums = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = set(list_data)\n    product = 1\n\n    for number in unique_numbers:\n        product *= number\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    Write a python function to calculate the product of the unique numbers in a given list.\n    \"\"\"\n    unique_numbers = set(list_data)\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function takes the radius and height of a cylinder as input parameters.\n    It calculates and returns the surface area of the cylinder using the formula:\n    S = (2*\u03c0*r**2 + 2*\u03c0*h*r)\n    '''\n    import math\n\n    \u03c0 = math.pi\n\n    S = (2*\u03c0*r**2 + 2*\u03c0*h*r)\n\n    return S\n"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * 3.14159 * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    This function computes the surface area of a cylinder using the following formula:\n    Sa = 2\u03c0r^2h\n    '''\n    import math\n    return 2 * math.pi * r**2 * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*(r**2 + h**2)"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Calculate the surface area of a cylinder with a given radius and height.\n    \n    Parameters:\n    r (float): radius of the cylinder.\n    h (float): height of the cylinder.\n    \n    Returns:\n    area (float): surface area of the cylinder.\n    \"\"\"\n    area = 2 * 3.14 * r * h\n    return area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r**2 + 2*3.14159*h + 2*3.14159*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14159*r*h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # Calculate the surface area of the cylinder\n    surface_area = 2 * 3.14 * r * r + 2 * 3.14 * r * h + 2 * 3.14 * r * h + 2 * 3.14 * r * r\n    # Return the surface area\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Calculate the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(A)): \n        if A[i] not in B: \n            return False \n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    # Sort the two lists in ascending order\n    A.sort()\n    B.sort()\n    # Compare the two lists\n    i = 0\n    j = 0\n    while j < len(B):\n        if A[i] == B[j]:\n            i += 1\n        j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B): \n        return False \n    for i in range(len(A)): \n        if A[i] not in B: \n            return False \n    return True "
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B):\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    Write a python function to check whether a list is sublist of another or not.\n    \"\"\"\n    # Check if the second list is a sublist of the first list\n    if B in A:\n        return True\n    # If the second list is not a sublist of the first list, check if there is a common element\n    for i in range(len(A)):\n        if A[i] in B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A, B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    i=0\n    j=0\n    while i<len(A) and j<len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        else:\n            i = i-j\n            j = 0\n    if j==len(B):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A): # If the first list is longer than the second, then it cannot be a sublist\n        return False\n    \n    for i in range(len(A)-len(B)+1): # Iterate through all possible starting indexes of the second list\n        j = 0 # Initialize the index of the first list\n        while j < len(B): # Iterate through all elements in the second list\n            if A[i+j]!= B[j]: # If the next element in the first list is not equal to the current element in the second list\n                break\n            j += 1 # Increment the index of the first list\n        \n        if j == len(B): # If all elements in the second list have been matched in the first list, then the second list is a sublist of the first list\n            return True\n            \n    return False # If no sublist was found, then the second list is not a sublist of the first list"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if not A or not B:\n        return False\n    \n    i = 0\n    j = 0\n    \n    while j < len(B):\n        if A[i] == B[j]:\n            if i == len(A)-1:\n                return True\n            else:\n                i += 1\n        else:\n            if i > 0:\n                i -= 1\n            else:\n                j += 1\n    \n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B):\n    if len(B) > len(A):\n        return False\n    else:\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Convert n to a string\n    n_str = str(n)\n\n    # Get the last digit of the string\n    last_digit = int(n_str[-1])\n\n    # Find factorial of the number\n    factorial = 1\n    for i in range(2, last_digit + 1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize the last digit as 0\n    last_digit = 0\n\n    # Initialize the factorial as 1\n    factorial = 1\n\n    # Loop through the digits of the number\n    for digit in str(n):\n\n        # Convert the digit to an integer and multiply it with the current factorial\n        factorial *= int(digit)\n\n        # Calculate the last digit of the factorial\n        last_digit = factorial % 10\n\n    # Return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function finds the last digit in the factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    temp = n\n    while temp > 0: \n        factorial *= temp\n        temp //= 10\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # convert the number to a string\n    n = str(n)\n    # get the last character of the string\n    last_digit = n[-1]\n    # convert the last digit to an integer\n    last_digit = int(last_digit)\n    # find the factorial of the number\n    factorial = 1\n    for i in range(1, last_digit + 1):\n        factorial *= i\n    return factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        last_digit = n % 10\n        return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer n as input and returns the last digit of the factorial of n.\n    \"\"\"\n    # Initialize the factorial variable to 1\n    factorial = 1\n    # Loop through each digit of n and multiply it by the factorial\n    while n >= 10:\n        digit = n % 10\n        factorial *= digit\n        n //= 10\n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer n as input and returns the last digit in its factorial. \n    '''\n    factorial = 1\n    for i in range(1, n+1): \n        factorial *= i\n    return factorial%10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    # Initialize the last digit to zero\n    last_digit = 0\n    # Loop through each number in the range of 1 to n\n    for i in range(1, n+1):\n        # Calculate the factorial of i and add the last digit of the result\n        last_digit += str(factorial(i))[-1]\n    # Return the last digit\n    return last_digit\n\n\ndef factorial(n):\n    \"\"\"\n    Write a python function to calculate the factorial of a given number using recursion.\n    \"\"\"\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n    # Recursive case: multiply n by the factorial of n-1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize a variable to store the last digit of factorial\n    last_digit = 0\n\n    # loop through the digits of n\n    for i in range(len(str(n))):\n        # multiply the last digit of factorial by 10 and add n to it\n        last_digit += int(str(n)[i]) * (10 ** (len(str(n)) - 1 - i))\n\n    # return the last digit of factorial\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Flatten the lists using list comprehension\n    flattened_list = [num for sublist in [list1, list2, list3] for num in sublist]\n    return flattened_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        result.append(list1[i])\n        result.append(list2[j])\n        result.append(list3[k])\n        i += 1\n        j += 1\n        k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2) or len(list1)!= len(list3):\n        raise ValueError(\"All lists must have the same length\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Check that all lists have the same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError('All lists must have the same length.')\n    \n    # Initialize an empty list to store the interleaved elements\n    interleaved_list = []\n    \n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Add the first element to the interleaved list\n        interleaved_list.append(list1[i])\n        \n        # Add the second element to the interleaved list\n        interleaved_list.append(list2[i])\n        \n        # Add the third element to the interleaved list\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Combine the lists into a single list and sort it in ascending order\n    interleaved_list = sorted(list1 + list2 + list3)\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # Initialize an empty list to store the interleaved list\n    interleaved_list = []\n    # Loop through each element of the first list\n    for element in list1:\n        # Add the element to the interleaved list\n        interleaved_list.append(element)\n        # Check if we have reached the end of the second list\n        if len(list2) == 0:\n            break\n        # Remove the first element from the second list and add it to the interleaved list\n        interleaved_list.append(list2.pop(0))\n    # Loop through each element of the third list\n    for element in list3:\n        # Add the element to the interleaved list\n        interleaved_list.append(element)\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    j = 0\n    k = 0\n\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n\n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    This function takes in three lists of the same length and returns a single flat list\n    that contains all the elements of the first list, followed by all the elements of\n    the second list, and finally all the elements of the third list.\n    \"\"\"\n    # Create an empty list to store the interleaved list\n    interleaved_list = []\n    \n    # Loop through each element in the first list\n    for i in range(len(list1)):\n        # Add the i-th element of the first list to the interleaved list\n        interleaved_list.append(list1[i])\n    \n    # Loop through each element in the second list\n    for j in range(len(list2)):\n        # Add the j-th element of the second list to the interleaved list\n        interleaved_list.append(list2[j])\n    \n    # Loop through each element in the third list\n    for k in range(len(list3)):\n        # Add the k-th element of the third list to the interleaved list\n        interleaved_list.append(list3[k])\n    \n    # Return the interleaved list\n    return interleaved_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    flat_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if k % 2 == 0:\n            flat_list.append(list1[i])\n            i += 1\n        else:\n            flat_list.append(list3[k])\n            k += 1\n        if i < len(list1):\n            flat_list.append(list2[j])\n            j += 1\n    return flat_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list containing the elements that are present in one tuple but not in the other.\n    '''\n    # First, we create two empty lists to store the elements that are present in one tuple but not in the other\n    dissimilar1 = []\n    dissimilar2 = []\n    # Then, we loop through each element in both tuples and check if it is present in both tuples or not. If it is present only in one tuple, we add it to the appropriate list.\n    for elem in test_tup1:\n        if elem not in test_tup2 and elem not in dissimilar1:\n            dissimilar1.append(elem)\n    for elem in test_tup2:\n        if elem not in test_tup1 and elem not in dissimilar2:\n            dissimilar2.append(elem)\n    # Finally, we return a list containing the elements that are present in one tuple but not in the other\n    return dissimilar1 + dissimilar2"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Initializing an empty list to store the dissimilar elements\n    dissimilar_list = []\n\n    # Iterating through the two tuples\n    for element1, element2 in zip(test_tup1, test_tup2):\n        # Checking if the element is in the first tuple\n        if element1 not in test_tup2:\n            dissimilar_list.append(element1)\n\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n\n    # Iterate through the tuples and check for any dissimilar elements\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the dissimilar element to the set\n            dissimilar_set.add(test_tup1[i])\n\n    # Return the dissimilar elements as a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_elements.append(test_tup1[i])\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    This function takes two tuples as input and returns a list of all the dissimilar elements in the first tuple.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_elements = []\n\n    # Loop through the first tuple and check if the element is present in the second tuple\n    for element in test_tup1:\n        if element not in test_tup2:\n            # If the element is not present in the second tuple, add it to the list of dissimilar elements\n            dissimilar_elements.append(element)\n\n    # Return the list of dissimilar elements\n    return dissimilar_elements"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    \n    # Loop through each element in the tuple\n    for i in range(len(test_tup1)):\n        # If the element is not equal in both tuples, append it to the dissimilar_list\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n            \n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Loop through each element in the tuples\n    for i in range(len(test_tup1)):\n        # If the element at the current index is not equal to the element at the same index in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Return the element that is different\n            return test_tup1[i]"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Create a set from the first tuple\n    set1 = set(test_tup1)\n    # Create a set from the second tuple\n    set2 = set(test_tup2)\n    # Find the difference between the two sets\n    diff_set = set1.difference(set2)\n    # Convert the set to a list and return it\n    return list(diff_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Create a dictionary to store the index of each element in the tuple\n    index_dict = {}\n    for i, item in enumerate(test_tup1):\n        index_dict[item] = i\n\n    # Find the dissimilar elements in the second tuple\n    dissimilar_elements = []\n    for item in test_tup2:\n        if item not in index_dict or index_dict[item]!= i:\n            dissimilar_elements.append(item)\n\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Create an empty list to store even elements\n    even_list = []\n    # Loop through the elements in the nested tuple\n    for elem in test_tuple:\n        # Check if the element is even using the even_fnc function\n        if even_fnc(elem):\n            # If the element is even, append it to the even_list\n            even_list.append(elem)\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        else:\n            if even_fnc(item):\n                even_list.append(item)\n    return even_list\n\ndef even_fnc(item):\n    return isinstance(item, int) or item % 2 == 0\n\ntest_tuple = ((1, 2, 3, 4, 5), (6, 7, (8, 9, 10), 11), (12, 13, 14), (15, 16, (17, 18, 19, 20), 21), (22, 23, 24))\nresult = even_ele(test_tuple, even_fnc)\nprint(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_fnc(item))\n        else:\n            even_list.append(even_fnc(item))\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for element in test_tuple:\n        if even_fnc(element):\n            uneven_elements.append(element)\n    return uneven_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            even_list.extend(even_ele(item, even_fnc))\n        elif even_fnc(item):\n            even_list.append(item)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    result = []\n    for elem in test_tuple:\n        if type(elem) == list:\n            result.append(even_ele(elem, even_fnc))\n        else:\n            if even_fnc(elem):\n                result.append(elem)\n\n    return result\n\ndef is_even(num):\n    return num % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # create a new list to store even elements\n    even_list = []\n    for i in test_tuple:\n        # check if the element is even\n        if even_fnc(i):\n            # if the element is even, append it to the even_list\n            even_list.append(i)\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Define a function to check if an element is even or odd\n    def is_even(element):\n        if type(element) == tuple:\n            return any(is_even(x) for x in element)\n        elif type(element) == list:\n            return any(is_even(x) for x in element)\n        else:\n            return even_fnc(element)\n\n    # Create a new list to store the even elements\n    even_list = []\n\n    # Iterate through each element in the test tuple\n    for element in test_tuple:\n        # Check if the element is even\n        if is_even(element):\n            # If the element is even, add it to the even_list\n            even_list.append(element)\n\n    # Return the even_list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if type(item) == list:\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if isinstance(item, tuple):\n            new_tuple.extend(even_ele(item, even_fnc))\n        else:\n            new_tuple.append(even_fnc(item))\n    return new_tuple"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the surface area of the pyramid\n    area = (b*s)**2\n\n    # return the surface area\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n\n    # calculate the surface area of the base \n    area_base = b * b\n    \n    # calculate the surface area of the top half of the pyramid\n    area_top_half = b * s\n    \n    # calculate the surface area of the bottom half of the pyramid\n    area_bottom_half = b * s\n    \n    # calculate the total surface area of the pyramid\n    total_area = area_base + area_top_half + area_bottom_half\n    \n    # return the total surface area of the pyramid\n    return total_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculating the surface area of the square pyramid\n    surface_area = 6 * b * s\n    \n    # Returning the surface area of the square pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = (b * s) + (2 * s * b) + (b * b)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) + (b * s) + (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s**2) + (b**2*s) + (b*s)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    This function takes in two parameters, base edge and height.\n    The function then calculates the surface area of a square pyramid using the formula:\n    surface_area = (1/2) * b * s^2\n    '''\n    surface_area = (1/2) * b * s**2\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((b*s) + (b*s) + (b*s)) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b, s):\n    \"\"\"\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    \"\"\"\n    area = (b * s) + (b * s) + (b * s)\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 2*b*s + 2*b*s + 2*s*s\n    return surface"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"The dictionary is empty.\")\n    else:\n        print(\"The dictionary is not empty.\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    if dict1 == {}:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    if not dict1:  # check if the dictionary is empty\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number using formula: C(n) = (2n)! / (n!(n-1)!).\n    \"\"\"\n    return (2 * n) * (2 * n - 1) / ((n * (n - 1)) * (2 * n - 1))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    catalan = [0, 1]\n    for i in range(2, n+1):\n        catalan.append(catalan[i-1] + catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    # Base case: if n is 0 or 1, return 1\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize a list to store the Catalan numbers\n    catalan_nums = [1]\n\n    # Calculate the Catalan numbers using dynamic programming\n    for i in range(2, n+1):\n        total = 0\n        for j in range(i):\n            total += catalan_nums[j] * catalan_nums[i-j-1]\n        catalan_nums.append(total)\n\n    # Return the nth Catalan number\n    return catalan_nums[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n) = (2n-1)!/(n+1)!\n\n    Args:\n        n (int): The number of terms in the Catalan sequence to compute\n\n    Returns:\n        int: The nth Catalan number\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = 0\n    for k in range(1, n+1):\n        catalan += binomial(2*n-1, k-1) / (k+1)\n\n    return catalan\n\ndef binomial(n, k):\n    \"\"\"\n    This function computes the binomial coefficient C(n, k)\n\n    Args:\n        n (int): The total number of objects\n        k (int): The number of objects in the subset\n\n    Returns:\n        int: The binomial coefficient C(n, k)\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial(n-1, k-1) + binomial(n-1, k)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function calculates the nth Catalan number.\n    \n    Parameters\n    ----------\n    n : integer\n        The order of the Catalan number to be calculated.\n    \n    Returns\n    -------\n    int\n        The nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return catalan_number(n/2) * catalan_number(n/2)\n    else:\n        return (2*catalan_number(n-1)) - catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    if num < 0:\n        return \"Invalid input\"\n    elif num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 2\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Initialize the Catalan numbers\n    catalan = [1]\n    for i in range(2, n+1):\n        catalan.append(2 * catalan[i-1] - catalan[i-2])\n    return catalan[n]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) * (2*n-1) // (n+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 1\n    for i in range(1, num+1):\n        catalan = catalan * (2*i - 1) // i\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n    \"\"\"\n    # Base case: 0 and 1 have 1 catalan number\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the first two Catalan numbers\n    c1 = 1\n    c2 = 1\n\n    # Compute the remaining catalan numbers\n    for i in range(2, n+1):\n        c = (2*c1*c2) // (i + 1)\n        c1 = c2\n        c2 = c\n\n    return c2"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern to match adverbs ending with ly\n    pattern = r'\\b\\w+(ly|LL|ll|LY|Ll|Ly)\\b'\n\n    # Find all occurrences of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Initialize an empty list to store the positions of adverbs\n    adverb_positions = []\n\n    # Iterate through all matches and add their positions to the adverb_positions list\n    for match in matches:\n        adverb_positions.append(text.index(match))\n\n    # Return the adverb_positions list\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Regular expression to match adverbs ending with ly\n    pattern = r'\\b(er|est|ly|les|le|li|la|un|une|des|d|du|de|d\\'|d\\'|d\\'|d\\'en|d\\'et|deux|deuxi\u00e8me|trois|troisi\u00e8me|quatre|cinq|six|sept|huit|neuf|dix)\\s*(ly)\\b'\n    # Use re.findall() to find all the matches in the text\n    matches = re.findall(pattern, text)\n    # Iterate over the matches and print their positions\n    for match in matches:\n        print(match)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with ly\n    pattern = re.compile(r'(?<![a-z])(ly|lys|lis|lis[aeiou]|lis?[aeiou])(?![a-z])', re.IGNORECASE)\n    # Find all occurrences of the pattern in the text\n    matches = pattern.finditer(text)\n    # Initialize an empty list to store the adverb positions\n    adverb_positions = []\n    # Loop through all matches and add their positions to the list\n    for match in matches:\n        adverb_positions.append(match.start())\n    return adverb_positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = re.findall('\\b[a-zA-Z]+ly\\b', text)\n    if adverbs:\n        print(f\"The first adverb ending with 'ly' is: {adverbs[0]}\")\n    else:\n        print(\"No adverb ending with 'ly' was found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define a regular expression pattern to match adverbs ending with ly\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    # Use re.findall() method to find all non-overlapping matches of the pattern in the given text\n    matches = re.findall(pattern, text)\n    # Iterate over the matches and return a list of tuples containing the matched adverb and its position in the text\n    return [(match, text.find(match)) for match in matches]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define a regular expression pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n\n    # Find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n\n    # If no matches are found, return an empty list\n    if not matches:\n        return []\n\n    # Sort the matches by their starting position in the text\n    sorted_matches = sorted(matches, key=lambda x: text.find(x))\n\n    # Return the first match and its starting position\n    return sorted_matches[0], text.find(sorted_matches[0])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b(ly|lys|lyse)\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    for match in matches:\n        start_pos = match.start()\n        end_pos = match.end()\n        print(f\"Adverb found at position {start_pos} to {end_pos}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    pattern = r'\\b(ly)$'\n    matches = re.finditer(pattern, text)\n\n    for match in matches:\n        adverb = match.group()\n        start = match.start()\n        end = match.end()\n        print(f\"Adverb: {adverb}, start: {start}, end: {end}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b([a-z]+ly)\\b'\n\n    # Use re.findall() to find all non-overlapping matches of the pattern in the text\n    matches = re.findall(pattern, text)\n\n    # Loop through the matches and store their positions and lengths\n    for match in matches:\n        start_pos = text.find(match[0])\n        end_pos = start_pos + len(match[0])\n        print(f'{match[0]} is found at positions {start_pos} and {end_pos}')"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the regular expression pattern for adverbs ending with 'ly'\n    pattern = r'\\b[a-z][a-z]*ly\\b'\n    \n    # Use re.finditer() function to find all occurrences of the pattern in the given text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize an empty list to store the adverb and its positions\n    adverbs = []\n    \n    # Iterate over all the matches and add the matched text to the adverb list\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        \n        # Add the adverb and its position to the adverb list\n        adverbs.append((adverb, position))\n    \n    # Return the adverb list\n    return adverbs"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap,item)\n        elif item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,item)\n\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a min heap to store the n most expensive items\n    heap = []\n    # add the first n items to the heap\n    for item in items[:n]:\n        heapq.heappush(heap, item)\n    # add the remaining items to the heap\n    for item in items[n:]:\n        # if the item is cheaper than the smallest item in the heap,\n        # then remove the smallest item and add the new item\n        if item < heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, item)\n    # return the n most expensive items in descending order\n    return [heap[0]] * n"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of size n to store the n most expensive items\n    min_heap = []\n\n    # Iterate through the dataset\n    for item in items:\n        # Add the item to the min-heap if it's the minimum price\n        if not min_heap or item[1] < min_heap[0][1]:\n            heapq.heappush(min_heap, item)\n        # Remove the minimum item from the heap if the heap is full\n        if len(min_heap) > n:\n            heapq.heappop(min_heap)\n\n    # Return the n most expensive items\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heap = heapq.nlargest(n, items)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Create a min heap of n items to store the n most expensive items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items[i])\n\n    # Iterate through the remaining items and update the min heap\n    for i in range(n, len(items)):\n        if items[i] < min_heap[0]:\n            heapq.heappop(min_heap)\n            heapq.heappush(min_heap, items[i])\n\n    # Return the n most expensive items in descending order\n    return min_heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function finds the n most expensive items in a given dataset.\n    '''\n    # Create a min-heap of n items\n    min_heap = []\n    for i in range(n):\n        heapq.heappush(min_heap, items.pop())\n\n    # Add the remaining items to the heap\n    for item in items:\n        heapq.heappush(min_heap, item)\n\n    # Return the n most expensive items\n    return [heapq.heappop(min_heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes in a list of items and an integer n, and returns the n most expensive items.\n    '''\n    # Create a min-heap of size n\n    min_heap = []\n    # Initialize variables to store the items and their prices\n    item_prices = {}\n    for item in items:\n        item_prices[item] = 0 # Set the price of each item to zero\n        heapq.heappush(min_heap, item)\n        # Remove the least expensive item from the heap and add its price to the total price\n        if len(min_heap) == n:\n            item_prices[min_heap[0]] = heapq.heappop(min_heap)\n    # Return the total price of the n most expensive items\n    return sum(item_prices[item] for item in item_prices)"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n\n    # Use a max heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, item)\n        else:\n            if item < heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, item)\n\n    # Return the n most expensive items\n    return heap[:n]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input\n    and returns the n most expensive items in the dataset.\n    '''\n    \n    # Create a min heap of the first n elements\n    heap = [heapq.nsmallest(n, items)]\n    \n    # Iterate over the remaining elements of the dataset\n    for item in items[n:]:\n        # Remove the smallest item from the heap and add the new item\n        heapq.heappop(heap)\n        heapq.heappush(heap, item)\n        \n    # Return the n most expensive items\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Heapify the given dataset\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n\n    # Find the n most expensive items and return them\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts\n    first_part = l[:n]\n    second_part = l[n:]\n    # Add the first part to the end of the second part\n    final_list = second_part + first_part\n    return final_list"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is greater than n\n    if len(l) > n:\n        # Split the list at index n\n        part1 = l[:n]\n        part2 = l[n:]\n        # Add the first part to the end of the second part and return the result\n        return part2 + part1\n    else:\n        # If the length of the list is less than n, return the original list\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # if n is greater than the length of the list, return the original list\n    if n > len(l):\n        return l\n    \n    # split the list at the nth element\n    mid = len(l) // 2\n    if n % 2 == 0:\n        # add the first half to the end\n        l.extend(l[:mid])\n        # add the second half to the start\n        l.extend(l[mid:])\n    else:\n        # add the first half to the start\n        l.extend(l[mid:])\n        # add the second half to the end\n        l.extend(l[:mid])\n    \n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Split the list into two parts at the nth element\n    part1 = l[:n]\n    part2 = l[n:]\n    # Concatenate the two parts and return the result\n    return part1 + part2"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        return \"n must be a non-negative integer\"\n    \n    if len(l) < n:\n        return \"n must be less than the length of the list\"\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return first_part + second_part"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if isinstance(l, list):\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n)\n    else:\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Invalid input. n should be less than or equal to the length of the list.\"\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # check if the list is empty\n    if not l:\n        return []\n    \n    # check if the nth element is greater than the length of the list\n    if n > len(l):\n        return []\n    \n    # split the list at the nth element and add the first part to the end\n    return l[:n] + [l[n]]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        print(\"Error: n is greater than the length of the list.\")\n        return\n    \n    # Split the list at the nth element\n    l1, l2 = l[:n], l[n:]\n    \n    # Concatenate the first part of the list and the second part of the list\n    result = l1 + l2\n    \n    return result"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # If the length of the list is less than or equal to n, simply return the list.\n    if len(l) <= n:\n        return l\n    \n    # Initialize an empty list to hold the first part of the list.\n    new_list = []\n    \n    # Iterate through the list from the beginning to the nth element.\n    for i in range(n):\n        new_list.append(l[i])\n    \n    # Add the remaining elements of the list to the new_list.\n    for i in range(n, len(l)):\n        new_list.append(l[i])\n    \n    # Return the new list with the first part added to the end.\n    return new_list"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    \"\"\"\n    Write a function to convert a list to a tuple.\n    \"\"\"\n    tuple_obj = tuple(listx)\n    return tuple_obj"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return abs(max_num - min_num)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # find the largest value\n    largest = max(nums)\n    \n    # find the smallest value\n    smallest = min(nums)\n    \n    # return the difference between largest and smallest value\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 0:\n        return None\n    if len(nums) == 1:\n        return 0\n    return abs(max(nums) - min(nums))"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # find the largest and smallest values in the list\n    largest = max(nums)\n    smallest = min(nums)\n    \n    # calculate the difference between largest and smallest\n    diff = largest - smallest\n    \n    # return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    min_val = nums[0]\n    max_val = nums[0]\n    \n    for num in nums:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n            \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as an input and returns the difference between the largest and smallest values in the list.\n    '''\n    # Find the maximum value in the list\n    max_val = max(nums)\n\n    # Find the minimum value in the list\n    min_val = min(nums)\n\n    # Calculate the difference between the two values\n    diff = max_val - min_val\n\n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return None\n    \n    max_val = nums[0]\n    min_val = nums[0]\n    \n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n        elif num < min_val:\n            min_val = num\n    \n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Get the largest and smallest values\n    max_value = nums[0]\n    min_value = nums[len(nums)-1]\n\n    # Calculate the difference between the largest and smallest values\n    diff = max_value - min_value\n\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of integers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # find the maximum and minimum values in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # return the difference between the two values\n    return max_val - min_val"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for num in range(a, b+1):\n        square = num*num\n        print(square)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Calculate the difference between the two numbers\n    difference = b - a\n    \n    # Iterate through all possible perfect squares\n    for i in range(difference + 1):\n        if i**2 == a or i**2 == b:\n            print(i**2, end=' ')\n        elif i**2 > a and i**2 < b:\n            print(i**2, end=' ')"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == i and i**2 > 0:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    This function takes two positive integers as input, a and b, and returns a list of all perfect squares between the two numbers.\n    '''\n    perfect_squares = []\n    for i in range(a, b+1):\n        if i**2 == i:\n            perfect_squares.append(i)\n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    if b < a:\n        a, b = b, a\n    \n    perfect_squares = []\n    i = 0\n    while i * i <= b:\n        if a <= i * i <= b:\n            perfect_squares.append(i * i)\n        i += 1\n    \n    return perfect_squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # create a set to store the squares of all the numbers between a and b\n    squares = set(x*x for x in range(int(a**0.5)+1))\n    \n    # find all pairs of numbers between a and b that have a perfect square as their sum\n    perfect_pairs = [(x, y) for x in squares for y in squares if x+y == a and x+y == b]\n    \n    return perfect_pairs"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(int(a**0.5)+1, int(b**0.5)+1):\n        if a % i == 0 and b % i == 0 and i**2 == a and i**2 == b:\n            print(i, i)\n    if a % int(a**0.5) == 0 and b % int(b**0.5) == 0 and int(a**0.5)**2 == a and int(b**0.5)**2 == b:\n        print(int(a**0.5), int(b**0.5))"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i*i == a or i*i == b:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    for i in range(int(a**0.5) + 1):\n        if i**2 == a:\n            squares.append(i)\n        if i**2 == b:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        j = i * i\n        if j == i:\n            print(i, end=' ')"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n        r (float): Polar radius.\n        theta (float): Polar angle in radians.\n\n    Returns:\n        tuple: A tuple containing the rectangular x and y coordinates.\n    \"\"\"\n    # Convert polar to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # convert polar coordinates to Cartesian coordinates\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    # convert Cartesian coordinates to rectangular coordinates\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): magnitude of the polar coordinate\n    theta (float): angle of the polar coordinate (in radians)\n\n    Returns:\n    (float,float): x and y coordinates of the rectangular coordinate\n    '''\n    # Convert to radians\n    theta = cmath.pi * theta / 180\n\n    # Calculate x and y\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    # Return as a tuple\n    return x.real, x.imag"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(x, y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2 + y**2) # calculate the distance from origin\n    theta = cmath.phase(x + y*1j) # calculate the angle in radians\n    phi = cmath.phase(x - y*1j) # calculate the angle in radians\n    # convert to rectangular coordinates\n    x_rect = r * cmath.cos(phi)\n    y_rect = r * cmath.sin(phi)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \n    Args:\n    r (float): radius of the point\n    theta (float): angle in radians\n\n    Returns:\n    (float, float): coordinates of the point in rectangular coordinates\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Parameters:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    x (float): The x-coordinate of the point.\n    y (float): The y-coordinate of the point.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    phi = theta\n    x = r * cmath.cos(phi)\n    y = r * cmath.sin(phi)\n    return x, y"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the length of the list is less than or equal to 1\n    if len(newList) <= 1:\n        return newList\n\n    # Swap the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    # check if the list has at least two elements\n    if len(newList) < 2: \n        return newList\n    # swap the first and last elements of the list\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    length = len(newList)\n    if length <= 1:\n        return newList\n    \n    first = newList[0]\n    last = newList[length - 1]\n    \n    newList[0] = last\n    newList[length - 1] = first\n    \n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Check if the list has at least two elements\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        # Swap the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) > 1:\n        temp = newList[0]\n        newList[0] = newList[-1]\n        newList[-1] = temp\n        return newList\n    else:\n        return \"List must have at least two elements to swap.\""
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Find the binomial coefficient of (n, k) recursively\n    def binomial(n, k): \n        if k == 0 or k == n: \n            return 1 \n        else: \n            return n * binomial(n-1, k-1) \n    # Calculate the sum of the products of consecutive binomial coefficients\n    result = 0\n    for i in range(k, n+1): \n        result += binomial(n, i) \n    return result"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if k > n-k:\n        return 0\n\n    if k == 0 or k == n:\n        return 1\n\n    coeff = 1\n    for i in range(1, k+1):\n        coeff = coeff * (n-i+1) // i\n\n    return coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    This function will find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n\n    The function takes two integer arguments, n and k, which represent the values of n and k in the binomial theorem.\n\n    The function returns the sum of the product of consecutive binomial co-efficients.\n\n    Example:\n\n    binomial_Coeff(5,2) = 5*(5-1)*(5-2)/2 + 4*(4-1)*(4-2)/2 + 3*(3-1)*(3-2)/2 + 2*(2-1)*(2-2)/2 + 1*(1-1)*(1-2)/2 \n    = 30 + 20 + 15 + 10 + 5\n\n    binomial_Coeff(10,5) = 5*(5-1)*(5-2)*(5-3)*(5-4)/2 + 4*(4-1)*(4-2)*(4-3)*(4-4)/2 + 3*(3-1)*(3-2)*(3-3)*(3-4)/2 + 2*(2-1)*(2-2)*(2-3)*(2-4)/2 + 1*(1-1)*(1-2)*(1-3)*(1-4)/2\n    = 120 + 100 + 80 + 60 + 40 + 20\n'''\n\n    # Function to calculate the binomial coefficient\n    def binomial_coeff_helper(n, k):\n        if n < k:\n            return 0\n        elif k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coeff_helper(n-1, k-1) + binomial_coeff_helper(n-1, k)\n\n    # Calculate the sum of the product of consecutive binomial co-efficients\n    sum_product = 0\n    for i in range(1, k+1):\n        sum_product += binomial_coeff_helper(n, i) * binomial_coeff_helper(n-i+1, k-i+1)\n\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k):\n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Initialize the sum and product variables\n    sum_binomial = 0\n    product_binomial = 1\n    \n    # Loop through the sequence of binomial co-efficients\n    for i in range(1, n+1):\n        if i <= k:\n            # If i is less than or equal to k, add it to the sum and multiply by the product\n            sum_binomial += i\n            product_binomial *= i\n        else:\n            # If i is greater than k, multiply it by the (n-k+i)th term in the product\n            product_binomial *= (n-k+i)\n    \n    # Return the sum of the binomial co-efficients\n    return sum_binomial"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n, k):\n    \"\"\"\n    This function takes two integers n and k as input and returns the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    coeff = 1\n    sum_coeff = 0\n    for i in range(1, n + 1):\n        coeff = (n - i + 1) * (k + i - 1) // i\n        sum_coeff += coeff\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    \n    if k > n//2:\n        k = n-k\n        \n    sum = 0\n    for i in range(1,n+1):\n        if i == k:\n            sum += (i**k)\n        elif i < k:\n            sum += (i**k)*binomial_Coeff(n-i,k-1)\n    \n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    if n < k:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n\n    C = binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k)\n    return C"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # initialize sum of product of co-efficients to 0\n    sum_product = 0\n\n    # loop through all possible combinations of k consecutive numbers from 1 to n\n    for i in range(1,n+1):\n        for j in range(i,i+k):\n            sum_product += j * (n-j+1)\n\n    # return the final sum of product of co-efficients\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n, k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0 or k == n: \n        return 1 \n    elif k < 0 or k > n: \n        return 0\n    else: \n        return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeroes from the ip address\n    ip = re.sub('^0+(?=\\d)', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^\\d+\\.\\d+\\.\\d+\\.\\d+$'\n    if re.match(pattern, ip):\n        ip_list = ip.split('.')\n        new_ip = []\n        for ip_str in ip_list:\n            if ip_str.startswith('0'):\n                continue\n            else:\n                new_ip.append(ip_str)\n        return '.'.join(new_ip)\n    else:\n        return None"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Using regular expressions to remove leading zeroes\n    return re.sub(r'^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Find the start and end of the ip address\n    start = 0\n    for i in range(len(ip)):\n        if ip[i]!= '.':\n            break\n        start += 1\n    end = len(ip) - 1\n    for i in range(len(ip)-1, -1, -1):\n        if ip[i]!= '.':\n            break\n        end -= 1\n\n    # Remove the leading zeroes\n    for i in range(start, end+1):\n        ip = ip.replace('0'*(end-i+1), '')\n\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\.([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])){3}$'\n    if re.match(pattern, ip):\n        return re.sub(r'^(0)+', '', ip)\n    else:\n        return 'Invalid IP address'"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each octet of the ip address\n    ip = re.sub(r'(\\d)(?=\\.)', r'\\1.', ip)\n    # Remove leading zeros from the first octet of the ip address if there is one\n    ip = re.sub(r'^(\\d)(?=\\.)((\\d)(?=\\d)|$)', r'\\1.\\3', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.findall(r'(\\d+\\.){3}\\d+', ip)\n    ip_list = [ip.split('.') for ip in ip_list]\n    ip_list = [[int(x) for x in ip] for ip in ip_list]\n    ip_list = [ip[:4] for ip in ip_list]\n    ip_list = '.'.join([str(ip) for ip in ip_list])\n    return ip_list"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    # Remove leading zeros from each octet of the IP address\n    ip = re.sub('^0+','',ip)\n    # Remove leading zeros from the last octet of the IP address\n    ip = re.sub('^0+(\\d{1,2}\\.){3}\\d{1,2}$', '\\1', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n    even_index = 0\n    odd_index = 0\n    \n    while even_index < len(list1) and odd_index < len(list1):\n        if list1[even_index] % 2 == 0 and list1[odd_index] % 2 == 1:\n            even_num = list1[even_index]\n            odd_num = list1[odd_index]\n            break\n        elif list1[even_index] % 2 == 0:\n            even_index += 1\n        elif list1[odd_index] % 2 == 1:\n            odd_index += 1\n    \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # initialize the first even and first odd numbers to None\n    first_even = None\n    first_odd = None\n\n    # iterate through the list\n    for num in list1:\n        # if the number is even and not None, set the first even number to the number\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        # if the number is odd and not None, set the first odd number to the number\n        elif num % 2 == 1 and first_odd is None:\n            first_odd = num\n\n    # if both first even and first odd numbers are not None, calculate the difference and return it\n    if first_even is not None and first_odd is not None:\n        diff = first_even - first_odd\n        return diff\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num = even_num - num\n        elif num % 2!= 0:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num = odd_num - num\n\n    if even_num is None or odd_num is None:\n        return 'No even or odd numbers found in the list.'\n    else:\n        return even_num - odd_num"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    \"\"\"\n    Write a function to find the difference of the first even and first odd number of a given list.\n    \"\"\"\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if even and odd:\n        return even[0] - odd[0]\n    else:\n        return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n            \n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Check if list is empty\n    if not list1:\n        return \"Error: list is empty.\"\n    \n    # Find the first even number\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n            break\n    \n    # Find the first odd number\n    for num in list1:\n        if num % 2!= 0:\n            odd_num = num\n            break\n    \n    # Check if even and odd numbers were found\n    if even_num is None or odd_num is None:\n        return \"Error: even and odd numbers not found in the list.\"\n    \n    # Calculate the difference\n    diff = even_num - odd_num\n    \n    # Return the result\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0]\n    odd = list1[1]\n\n    if even % 2 == 0:\n        even = 0\n    else:\n        even = 1\n\n    if odd % 2 == 0:\n        odd = 0\n    else:\n        odd = 1\n\n    diff = abs(even - odd)\n\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables to store even and odd numbers\n    even_num = 0\n    odd_num = 0\n\n    # Loop through each number in the list\n    for num in list1:\n        # Check if the number is even or odd\n        if num % 2 == 0:\n            # If even, add to even number variable\n            even_num += num\n        else:\n            # If odd, add to odd number variable\n            odd_num += num\n\n    # Return the difference of the even and odd numbers\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # Initialize variables for even and odd numbers\n    even_num = None\n    odd_num = None\n    \n    # Iterate over the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            even_num = num\n        else:\n            odd_num = num\n    \n    # Check if both even and odd numbers are found\n    if even_num is None or odd_num is None:\n        return \"No even or odd numbers found in the list\"\n    else:\n        # Return the difference of the two numbers\n        return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    first_even = next(num for num in list1 if num % 2 == 0)\n    first_odd = next(num for num in list1 if num % 2!= 0)\n    return abs(first_even - first_odd)"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the binary strings to lists of digits\n    list1 = [int(digit) for digit in str1]\n    list2 = [int(digit) for digit in str2]\n\n    # Initialize a variable to keep track of the minimum number of swaps required\n    min_swaps = float('inf')\n\n    # Compare the two lists of digits and calculate the minimum number of swaps required\n    for i in range(len(list1)):\n        if list1[i]!= list2[i]:\n            min_swaps = min(min_swaps, abs(list1[i] - list2[i]))\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # create a dictionary to store the frequency of each character in str1\n    freq1 = {}\n    for char in str1:\n        if char in freq1:\n            freq1[char] += 1\n        else:\n            freq1[char] = 1\n\n    # create a dictionary to store the frequency of each character in str2\n    freq2 = {}\n    for char in str2:\n        if char in freq2:\n            freq2[char] += 1\n        else:\n            freq2[char] = 1\n\n    # calculate the number of common characters between the two strings\n    common_chars = sum([freq1[char] for char in freq1 if char in freq2])\n\n    # calculate the minimum number of swaps required to convert the two strings\n    min_swaps = 0\n    for char in freq1:\n        if freq1[char]!= freq2[char]:\n            min_swaps += abs(freq1[char] - freq2[char])\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2): \n    # Convert the input strings to binary \n    bin1 = bin(int(str1,2))[2:] \n    bin2 = bin(int(str2,2))[2:] \n   \n    # Initialize the result and set all values to 0 \n    result = 0 \n    swap_count = [[0]*len(bin2) for i in range(len(bin1)+1)] \n   \n    # Fill the swap count matrix \n    for i in range(len(bin1)): \n        for j in range(len(bin2)): \n            # If the bits are not equal, increment the result and swap the bits \n            if bin1[i]!= bin2[j]: \n                result += 1 \n                swap_count[i+1][j] = 1 \n                swap_count[i][j+1] = 1 \n   \n    # Find the minimum number of swaps required \n    min_swaps = result \n   \n    # Initialize the minimum swapping sequence \n    min_swapping_sequence = [] \n   \n    # Backtrack the matrix to find the minimum swapping sequence \n    for i in range(len(bin1),0,-1): \n        for j in range(len(bin2),0,-1): \n            # If the last bit is 1, we have swapped bits to get to this point \n            if swap_count[i][j] == 1: \n                # If the previous swap was the only swap to get here, append the previous bits to the sequence \n                if swap_count[i-1][j-1] == 1 and i > 1 and j > 1: \n                    min_swapping_sequence = [bin1[i-1],bin1[i],bin2[j-1],bin2[j]] \n                    break \n                # If the previous swap was not the only swap to get here, append the previous bits to the sequence \n                else: \n                    min_swapping_sequence = [bin1[i-1],bin2[j-1]] \n                    break \n            \n    # Return the minimum number of swaps and the minimum swapping sequence \n    return min_swaps, min_swapping_sequence "
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2): \n    '''\n    This function takes two binary numbers as input, and returns the minimum number of swaps required to convert one binary number to another.\n    The input strings can have leading zeros but are guaranteed to contain only 0s and 1s.\n    '''\n    # Remove leading zeros from the strings\n    str1 = str1.lstrip('0')\n    str2 = str2.lstrip('0')\n\n    # Convert the binary strings to decimal numbers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Calculate the number of swaps required to convert num1 to num2\n    swaps = 0\n    while num1!= num2:\n        # If num1 is less than num2, swap their bits and increment num1\n        if num1 < num2:\n            num1 = num1 ^ (1 << (num1.bit_length()-1))\n            swaps += 1\n        # If num1 is greater than num2, swap their bits and decrement num2\n        else:\n            num2 = num2 ^ (1 << (num2.bit_length()-1))\n            swaps += 1\n\n    # Return the number of swaps required\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    str1 = [int(i) for i in str1]\n    str2 = [int(i) for i in str2]\n    n1, n2 = len(str1), len(str2)\n\n    if n1!= n2:\n        return \"Both numbers should have same length\"\n\n    swaps = 0\n    for i in range(n1):\n        if str1[i]!= str2[i]:\n            str1[i], str2[i] = str2[i], str1[i]\n            swaps += 1\n\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Function to convert binary string to int\n    def binaryToInt(binaryString):\n        return int(binaryString, 2)\n\n    # Convert both binary strings to integers\n    binary1 = binaryToInt(str1)\n    binary2 = binaryToInt(str2)\n\n    # Calculate XOR of the two integers\n    xor = binary1 ^ binary2\n\n    # Initialize variables for counting swaps\n    count = 0\n    bits = xor.bit_length()\n\n    # Iterate over the bits of the XOR integer\n    for i in range(bits):\n        # If a bit is set in the XOR integer, decrement the count by 1\n        if xor & (1 << i):\n            count -= 1\n\n        # If the count becomes negative, increment a swap and reset the count\n        else:\n            count += 1\n            if count < 0:\n                count = 0\n\n    # Return the minimum number of swaps required\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables\n    swaps = 0\n    i = 0\n\n    # Iterate through the bits of both numbers\n    while i < 32:\n        # Check if the bits are different\n        if (num1 >> i) & 1!= (num2 >> i) & 1:\n            swaps += 1\n\n        # Increment the index\n        i += 1\n\n    # Return the minimum number of swaps\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    dp = [[0 for j in range(n+1)] for i in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if str1[i-1] == '1' and str2[j-1] == '0':\n                dp[i][j] = dp[i-1][j]+1\n            elif str1[i-1] == '0' and str2[j-1] == '1':\n                dp[i][j] = dp[i][j-1]+1\n            else:\n                dp[i][j] = min(dp[i-1][j],dp[i][j-1])\n    return dp[n][n]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2):\n    n = len(str1)\n    min_swaps = n\n    \n    # Find the number of swaps required to convert str1 to str2\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            min_swaps = min(min_swaps, n-i)\n    \n    # Find the number of swaps required to convert str2 to str1\n    for i in range(n):\n        if str2[i]!= str1[i]:\n            min_swaps = min(min_swaps, i+1)\n    \n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2):\n    \"\"\"\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    \"\"\"\n    count = 0\n    n = len(str1)\n    str1 = list(str1)\n    str2 = list(str2)\n    for i in range(n):\n        if str1[i] == '1' and str2[i] == '0':\n            if i > 0 and str1[i-1] == '0' and str2[i-1] == '1':\n                # Swap characters at indices i-1 and i\n                str1[i-1], str1[i] = str1[i], str1[i-1]\n                str2[i-1], str2[i] = str2[i], str2[i-1]\n                count += 1\n            elif i < n-1 and str1[i+1] == '0' and str2[i+1] == '1':\n                # Swap characters at indices i and i+1\n                str1[i], str1[i+1] = str1[i+1], str1[i]\n                str2[i], str2[i+1] = str2[i+1], str2[i]\n                count += 1\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for tup in tuple_list:\n        size += sys.getsizeof(tup)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    total_size = sys.getsizeof(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        total_size += sys.getsizeof(tuple_list[i])\n    return total_size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for i in range(len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # convert the tuple to bytes\n    tuple_bytes = bytes(tuple_list)\n    \n    # get the size of the tuple in bytes\n    tuple_size_bytes = sys.getsizeof(tuple_bytes)\n    \n    return tuple_size_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list[0]) * len(tuple_list[0])\n    for i in range(1, len(tuple_list)):\n        size += sys.getsizeof(tuple_list[i]) * len(tuple_list[i])\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initialize size to 0\n    size = 0\n\n    # iterate over the tuple elements and calculate the size of each element\n    for element in tuple_list:\n        # check the type of the element\n        if isinstance(element, int):\n            size += sys.getsizeof(int(element))\n        elif isinstance(element, float):\n            size += sys.getsizeof(float(element))\n        elif isinstance(element, str):\n            size += sys.getsizeof(str(element))\n        elif isinstance(element, bytes):\n            size += sys.getsizeof(bytes(element))\n        elif isinstance(element, complex):\n            size += sys.getsizeof(complex(element))\n        elif isinstance(element, tuple):\n            size += sys.getsizeof(element)\n        elif isinstance(element, list):\n            size += sys.getsizeof(element)\n        else:\n            print(f\"Element {element} of type {type(element).__name__} not supported.\")\n\n    # return the size in bytes\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            i += 1\n            k -= 1\n        else:\n            if k == 1:\n                return arr2[j]\n            j += 1\n            k -= 1\n    if k == 1:\n        return arr2[j]\n    return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    \n    # If one array is exhausted\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n            i += 1\n    return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # create two pointers for both arrays\n    i, j = 0, 0\n    # initialize a variable to store the kth element\n    kth = -1\n    \n    # loop until we find kth element or both arrays are exhausted\n    while i < len(arr1) and j < len(arr2):\n        # if the current element from arr1 is smaller than the current element from arr2, increment the first pointer\n        if arr1[i] < arr2[j]:\n            i += 1\n        # if the current element from arr2 is smaller than the current element from arr1, increment the second pointer\n        else:\n            j += 1\n        # if we have found kth element, we can break the loop\n        if i == len(arr1) and j == len(arr2):\n            kth = arr1[k-1]\n            break\n        # if we have found kth element, we can break the loop\n        if i == len(arr1) and j < len(arr2):\n            kth = arr2[j-1]\n            break\n        if j == len(arr2) and i < len(arr1):\n            kth = arr1[i-1]\n            break\n        \n        # if we have found kth element, we can break the loop\n        if i == len(arr1) and j == len(arr2) and arr1[i-1] == arr2[j-1]:\n            kth = arr1[i-1]\n            break\n            \n    # if we have not found kth element yet, we have to return None\n    return kth if kth!= -1 else None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n    if i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            i += 1\n            j += 1\n    if i == len(arr1):\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n            break\n\n    if i == n1:\n        return arr2[j]\n    else:\n        return arr1[i]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in two sorted arrays and an integer k and\n    returns the kth smallest element from the two arrays.\n\n    If k is greater than the total number of elements in the two arrays,\n    it returns None.\n    \"\"\"\n    n1 = len(arr1)\n    n2 = len(arr2)\n\n    # if k is greater than the total number of elements in the two arrays\n    if k > n1 + n2:\n        return None\n\n    # if k is less than or equal to the total number of elements in the two arrays\n    if k <= n1:\n        return arr1[k - 1]\n\n    # find the index of the kth smallest element in the first half of the array\n    index1 = n1 - k\n\n    # if the kth smallest element is in the second half of the array\n    if index1 == n1:\n        return arr2[k - n1]\n\n    # find the kth smallest element in the second half of the array\n    return min(arr2[k - n1], arr1[index1 - 1])"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three arguments: two sorted arrays and a number k.\n    It returns the kth smallest element from the two arrays.\n    '''\n    # Find the total number of elements in both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Find the total number of elements in the combined array\n    n = n1 + n2\n    # Create a new array to store the combined array\n    combined_arr = [0] * n\n    # Copy the first part of arr1 to the combined array\n    for i in range(n1):\n        combined_arr[i] = arr1[i]\n    # Copy the remaining elements of arr1 to the combined array\n    for i in range(n1, n):\n        combined_arr[i] = arr1[i - n1]\n    # Copy the first part of arr2 to the combined array\n    for i in range(n2):\n        combined_arr[i + n1] = arr2[i]\n    # Copy the remaining elements of arr2 to the combined array\n    for i in range(n2, n):\n        combined_arr[i + n1] = arr2[i - n2]\n    # Sort the combined array in ascending order\n    combined_arr.sort()\n    # Return the kth smallest element from the combined array\n    return combined_arr[k - 1]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    if k <= len(arr1):\n        return find_kth(arr1, arr2[k:], k)\n    else:\n        return find_kth(arr1[len(arr1) - k:], arr2, len(arr1) - k)"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_armstrong(num):\n    num_str = str(num)\n    sum = 0\n    temp = num_str\n    while temp:\n        digit = int(temp[-1])\n        sum += digit ** len(temp)\n        temp = temp[:-1]\n    if num == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # Initialize the sum of the digits of the number\n    digit_sum = 0\n\n    # Get the digits of the number and calculate the sum of their squares\n    while number > 0:\n        digit = number % 10\n        digit_sum += digit ** 3\n        number //= 10\n\n    # Check if the sum of the digits of the number is equal to the number itself\n    if digit_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_armstrong(number):\n    n = number\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit ** 3\n        n //= 10\n    return total == number\n\nnumber = int(input(\"Enter a number to check: \"))\nif is_armstrong(number):\n    print(number, \"is an Armstrong number\")\nelse:\n    print(number, \"is not an Armstrong number\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_armstrong_number(n):\n    \"\"\"\n    This function takes an integer as input and returns True if the number is Armstrong number and False otherwise.\n    \"\"\"\n    return any(sum(int(digit)**(i+1) for i, digit in enumerate(str(n))) == n for i in range(len(str(n))))"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    This function checks whether a given number is an Armstrong number or not.\n    \"\"\"\n    num = n\n    temp = num\n    sum = 0\n    while num > 0:\n        digit = num % 10\n        sum += digit ** 3\n        num //= 10\n    return temp == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_armstrong_number(number):\n    # Convert the number to a string and remove any non-digit characters\n    number_str = ''.join(filter(str.isdigit, str(number)))\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum([int(digit)**3 for digit in number_str])\n    # Compare the original number with the sum of the cubes\n    return number == sum_of_cubes"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # convert number to integer\n    num = int(number)\n    # find the sum of the cube of each digit\n    sum_of_cubes = 0\n    while num > 0:\n        digit = num % 10\n        sum_of_cubes += digit ** 3\n        num //= 10\n    # check if the sum of cubes equals the original number\n    return sum_of_cubes == num\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    number_str = str(number)\n    total = 0\n    power = len(number_str)\n\n    # calculate the total of the digits of the number\n    for digit in number_str:\n        total += int(digit) ** power\n\n    # check if the total of the digits is equal to the original number\n    if total == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    num = int(number)\n    temp = num\n    sum = 0\n    while temp!= 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    return num == sum"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string to get digits only\n    digits = [int(d) for d in str(number)]\n    # Calculate the sum of the cubes of each digit\n    cube_sum = sum([d**3 for d in digits])\n    # Check if the sum of cubes is equal to the original number\n    if cube_sum == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    average = sum / number\n    print(\"Sum of the first\", number, \"natural numbers is:\", sum)\n    print(\"Average of the first\", number, \"natural numbers is:\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n\n    sum = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n\n    average = sum / count\n\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum_list = []\n    for i in range(1, number+1):\n        sum_list.append(i)\n    sum_total = sum(sum_list)\n    avg = sum_total/number\n    return sum_list, sum_total, avg"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    else:\n        total = 0\n        for i in range(1, number+1):\n            total += i\n        average = total / number\n        return \"Sum of first {} natural numbers is: {}\".format(number, total), \"Average of first {} natural numbers is: {}\".format(number, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    if number < 1:\n        print(\"Please enter a positive integer.\")\n    else:\n        sum = 0\n        for i in range(1, number+1):\n            sum += i\n        average = sum/number\n        print(\"Sum of first {} natural numbers: {}\".format(number, sum))\n        print(\"Average of first {} natural numbers: {}\".format(number, average))"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    print(\"The sum of the first\", number, \"natural numbers is\", sum)\n    print(\"The average of the first\", number, \"natural numbers is\", average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    sum = 0\n    count = 0\n    for i in range(1, number + 1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Initialize sum and count\n    sum = 0\n    count = 0\n\n    # Loop through first n natural numbers\n    for i in range(1, n+1):\n        # Add the current number to sum and increment count\n        sum += i\n        count += 1\n\n    # Calculate and return the sum and average\n    return (sum, sum/count)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, number+1):\n        sum_n += i\n    average = sum_n / number\n    return sum_n, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(f\"{n} is even\")\n    else:\n        print(f\"{n} is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    \"\"\"\n    This function checks whether the given number n is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 2:\n            return char\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the characters and their counts\n    char_count = {}\n    \n    # loop through the string and update the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the dictionary and find the first repeated character\n    for char in char_count:\n        if char_count[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    # create a dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n\n    # loop through the dictionary to find the first repeated character\n    for char in char_freq:\n        if char_freq[char] > 1:\n            return char\n\n    # if no repeated character is found, return \"No repeated characters found\"\n    return \"No repeated characters found\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create an empty dictionary to store the frequency of each character in the string\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            char_freq[char] += 1\n        else:\n            char_freq[char] = 1\n    \n    # Find the first character with a frequency of 1 in the dictionary\n    for char in char_freq:\n        if char_freq[char] == 1:\n            return char\n    \n    # If no character has a frequency of 1, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function finds the first repeated character in a given string.\n\n    Args:\n        str1 (str): The string to search for a repeated character.\n\n    Returns:\n        str: The first repeated character or an empty string if no character is repeated.\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character\n    for char in str1:\n        if char_count[char] > 1:\n            return char\n\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            return char\n        char_count[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # create an empty dictionary to store the frequency of each character\n    freq = {}\n    \n    # iterate through each character in the string\n    for char in str1:\n        # if the character is already in the dictionary, increment its frequency\n        if char in freq:\n            freq[char] += 1\n        # if the character is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[char] = 1\n    \n    # iterate through the dictionary to find the first repeated character\n    for char in freq:\n        if freq[char] > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    first_char = None\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # Find the first repeated character in the string\n    for char in char_count:\n        if char_count[char] > 1:\n            first_char = char\n            break\n            \n    return first_char"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_numbers = []\n    for i in range(1, n+1):\n        if i == 1:\n            ludic_numbers.append(i)\n        elif i == 2:\n            ludic_numbers.append(i)\n        else:\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                ludic_numbers.append(i)\n    return ludic_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given number is a lucid number. A lucid number is a positive integer that can be written as the sum of two primes.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    i = 1\n    while i <= n:\n        if i == 1:\n            lucid.append(i)\n        elif i == 2:\n            lucid.append(i)\n        elif i % 2 == 0:\n            lucid.append(i)\n        else:\n            if i % 2!= 0:\n                if i % 4!= 0:\n                    lucid.append(i)\n        i += 1\n    return lucid"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic_num = []\n    for i in range(1, n+1):\n        lucid = True\n        for j in range(2, i):\n            if i % j == 0:\n                lucid = False\n                break\n        if lucid:\n            ludic_num.append(i)\n    return ludic_num"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(3*i+1)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucid_numbers.append(i)\n        elif i % 2 == 0:\n            lucid_numbers.append(i)\n        else:\n            lucid_numbers.append(n-i)\n    return lucid_numbers\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n+1):\n        lucid = i\n        while lucid > 1:\n            if lucid % 2 == 0:\n                lucid //= 2\n            else:\n                lucid = 3 * lucid + 1\n        lucids.append(lucid)\n    return lucids"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_list = []\n    # loop through numbers from 1 to n\n    for i in range(1, n+1):\n        # check if the number is a lucid number\n        lucid_num = i\n        # check if the number has the property of being the sum of two adjacent squares\n        while lucid_num*lucid_num <= n:\n            lucid_num += i\n            if lucid_num > n:\n                break\n        else:\n            ludic_list.append(lucid_num)\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    ludic = []\n    for i in range(1, n+1):\n        if i < 2 or any(i%j == 0 for j in range(2, int(i**0.5)+1)):\n            ludic.append(i)\n\n    return ludic"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n):\n        if i in range(2, i):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse the list of words\n    words.reverse()\n    # join the reversed words with spaces\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    # split the string into words\n    words = s.split()\n    # reverse each word and join them with a space\n    return \" \".join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    # Remove all spaces and split the string into a list of words\n    words = s.replace(' ', '').split()\n    # Reverse the list of words and join them back into a string\n    return''.join(words[::-1])"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Split the string into words\n    words = s.split()\n    # Reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # Join the reversed words back into a string\n    result =''.join(reversed_words)\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    words = s.split()  # split the string into words using split() function\n    reversed_words = words[::-1]  # reverse the order of words using slicing\n    reversed_string =''.join(reversed_words)  # join the words back into a string\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    words = s.split()\n    words.reverse()\n    return \" \".join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words using the space as the separator\n    words = s.split()\n    # reverse each word in the list using the reverse() method\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words together with spaces to form the final string\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words) // 2):\n        words[i], words[-i - 1] = words[-i - 1], words[i]\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    \n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    \n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        print(num, \"is a prime number\")\n    else:\n        print(num, \"is not a prime number\")"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    \"\"\"\n    A function to check if a given number is prime or not.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n\n    # Check if the given number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the given number is 2\n    elif num == 2:\n        return True\n\n    # Check if the given number is even\n    elif num % 2 == 0:\n        return False\n\n    # Check if the given number is odd\n    else:\n        # Initialize a variable to store the number of divisors\n        count = 0\n\n        # Check if the given number is divisible by any number between 3 and the square root of the given number\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                count += 1\n\n        # If the count is greater than 0, the given number is not a prime number\n        if count > 0:\n            return False\n\n        # If the count is equal to 0, the given number is a prime number\n        else:\n            return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi/180)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi / 180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a list of tuples containing the matching substring, a start index, and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    literals = []\n    for match in matches:\n        literal = (match.group(), match.start(), match.end())\n        literals.append(literal)\n    return literals"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(0), match.start(), match.end()\n    else:\n        return None, None, None\n\ntext = \"This is a test string with numbers and some literals: 123, 456.78, $123.45, \u00a3123.45.\"\npattern = r'\\b\\d+(\\.\\d+)?\\b|\\$?\\d+(\\.\\d+)?\\b|\\\u00a3?\\d+(\\.\\d+)?\\b'\n\nresult = find_literals(text, pattern)\n\nif result:\n    print(f\"Match found: {result[0]} ({result[1]}, {result[2]})\")\nelse:\n    print(\"No match found.\")"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use a regex pattern to find all literals in the text\n    literals = re.findall(pattern, text)\n    \n    # If no literals are found, return an empty list\n    if not literals:\n        return []\n    \n    # Loop through each literal and return the matching subtring, a start index, and an end index\n    results = []\n    for literal in literals:\n        start_index = text.find(literal)\n        end_index = start_index + len(literal)\n        results.append([literal, start_index, end_index])\n    \n    return results"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    if matches:\n        match = matches.next()\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    # Use re.findall to find all non-overlapping matches of pattern in text\n    matches = re.findall(pattern, text)\n\n    # Loop over all matches and return the string, start index and end index of each match\n    for match in matches:\n        start = text.find(match)\n        end = start + len(match)\n        yield match, start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the matches\n    result = []\n\n    # Loop through all matches and add them to the result list\n    for match in matches:\n        result.append((match.group(), match.start(), match.end()))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if len(matches) == 0:\n        return None, None, None\n    else:\n        first_match = matches[0]\n        return first_match, 0, len(first_match)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (pow(5, n) // (factorial(n) * 4))\n\ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Bell Number of 0th term is 0\n    if n == 0: \n        return 0\n\n    # Bell Number of 1st term is 1\n    if n == 1: \n        return 1\n\n    # Bell Number of 2nd term is 2\n    if n == 2: \n        return 2\n\n    # Bell Number of n+1th term is Bell Number of nth term + Bell Number of (n-1)th term\n    return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [0] * (n+1)\n    bell[1] = 1\n    for i in range(2,n+1):\n        bell[i] = bell[i-1] + bell[i-2]\n    return bell[n]"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    #First, check if n is a positive integer\n    if n < 0 or not isinstance(n, int):\n        return \"Invalid input. Please enter a positive integer.\"\n\n    #Second, check if n is a multiple of 2\n    if n % 2 == 0:\n        return \"Invalid input. Please enter an odd number.\"\n\n    #Third, initialize variables\n    k = 0\n    ans = 0\n    while k < n:\n        #Find the value of ans\n        ans += 1\n        if k % 2 == 1:\n            ans *= 4\n        k += 1\n\n    return ans"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 1\n    for i in range(n): \n        a, b = b, a+b\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n < 0:\n        return \"Invalid input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 13\n    elif n > 2:\n        result = 0\n        for i in range(1, n):\n            result = result + (1/i)\n        return result"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    '''\n    This function finds the nth bell number.\n    '''\n\n    # Initialize variables for the sequence\n    a, b = 0, 1\n\n    # Calculate the nth bell number\n    for i in range(n):\n        a, b = b, a + b\n\n    # Return the nth bell number\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell = [1] * (n+1) # initialize the list of bell numbers with 1s\n    bell[0] = 0 # first bell number is 0\n    bell[1] = 1 # second bell number is 1\n    for i in range(2, n+1): # iterate from 2 to n\n        bell[i] = bell[i-1] + bell[i-2] # calculate the next bell number by adding the previous two bell numbers\n    return bell[n] # return the nth bell number"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 1:\n        return list1[1:]\n    elif L < 1:\n        return []\n    else:\n        return remove_kth_element(list1[1:], L-1)"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Convert the list to a set to remove duplicates and then back to a list to get the k'th element\n    list1_set = list(set(list1))\n    return list1_set[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n\n    # Loop through the list\n    for i in range(L):\n        # If the current index is equal to the k'th element, move on to the next index\n        if i == L - 1:\n            del list1[i]\n        # If the current index is not equal to the k'th element, move on to the next index\n        else:\n            list1[i], list1[L - 1] = list1[L - 1], list1[i]\n\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(lst, L):\n    '''\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    lst.pop(L-1) # Remove the kth element from the list.\n    return lst"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(lst, k):\n    if k > len(lst):\n        return lst\n    return lst[:k] + lst[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)-1):\n        if i!= L-1:\n            list2.append(list1[i])\n    return list2"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    return list1[:L-1] + list1[-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L-1] + list1[L-1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    Remove the kth element from a list and return the updated list.\n    '''\n    # Check if the list is empty\n    if len(list1) == 0:\n        return list1\n    \n    # Remove the kth element from the list and return the updated list\n    list1.pop(k-1)\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    if L > len(list1):\n        return list1\n\n    if L == 1:\n        return list1[1:]\n\n    i = 0\n    j = 0\n    while i < len(list1) and j < len(list1):\n        if j == L - 1:\n            list1.pop(i)\n            break\n        i += 1\n        j += 1\n\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    # initialize max_col to be the value of the first column\n    max_col = test_list[0][N-1]\n\n    # loop through each row of the matrix\n    for row in test_list:\n        # if the value of then'th column in this row is greater than max_col, update max_col\n        if row[N-1] > max_col:\n            max_col = row[N-1]\n\n    return max_col"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    for i in range(len(test_list)):\n        test_list[i].sort(reverse=True)\n        print(f\"Column {N} of the matrix: {test_list[i][:N]}\")\n    return max(test_list[i][:N] for i in range(len(test_list)))"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row in the matrix\n    row_length = len(test_list[0])\n    # Initialize the maximum value to the first element of the first row\n    max_val = test_list[0][0]\n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if then'th element of the current row is greater than the current maximum value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for row in test_list:\n        if N-1 >= len(row):\n            max_val = max(max_val, row[N-1])\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the length of the first row in the matrix\n    length = len(test_list[0])\n    \n    # Initialize a variable to hold the maximum value in then'th column\n    max_val = float('-inf')\n    \n    # Loop through the matrix and find the maximum value in then'th column\n    for i in range(length):\n        max_val = max(max_val, test_list[j][i] for j in range(len(test_list)))\n    \n    # Return the maximum value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # Find the number of rows and columns in the matrix\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    # Check if the n is valid\n    if N < 1 or N > cols:\n        return \"Invalid value of N.\"\n\n    # Initialize the maximum value and its index to zero\n    max_val = 0\n    max_idx = 0\n\n    # Iterate through each row in the matrix\n    for i in range(rows):\n\n        # Check if then'th column value is greater than the current maximum value\n        if matrix[i][N-1] > max_val:\n\n            # Update the maximum value and its index\n            max_val = matrix[i][N-1]\n            max_idx = i\n\n    # Return the maximum value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for row in test_list:\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_num = 0\n    for i in range(len(test_list)):\n        if test_list[i][N] > max_num:\n            max_num = test_list[i][N]\n    return max_num"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Get the length of the first row in the matrix\n    num_rows = len(test_list)\n    # Check if the Nth column is greater than or equal to the number of rows in the matrix\n    if N >= num_rows:\n        return None\n    # Initialize a variable to store the max value of the Nth column\n    max_val = 0\n    # Loop through each row in the matrix and compare the Nth column value to the current max value\n    for i in range(num_rows):\n        if test_list[i][N] > max_val:\n            max_val = test_list[i][N]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    \"\"\"\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    \"\"\"\n    n = len(test_list[0])\n    for i in range(n):\n        max_val = test_list[0][i]\n        for j in range(1, len(test_list)):\n            if test_list[j][i] > max_val:\n                max_val = test_list[j][i]\n        print(max_val)"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for i in range(len(lst)):\n        merged_lst.append([lst[i][0], lst[i][1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in lst:\n        result.append([i[0], i[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    return [[lst[i][0], lst[i][1]] for i in range(len(lst))]"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged = []\n    for sublist in lst:\n        merged.append([sublist[0], sublist[1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        merged_list.append((first, second))\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize a variable to hold the cumulative sum\n    cumulative_sum = 0\n    \n    # iterate through the list of tuples\n    for tup in test_list:\n        # add the values in each tuple to the cumulative sum\n        cumulative_sum += tup[0] + tup[1] + tup[2] + tup[3] + tup[4] + tup[5] + tup[6] + tup[7] + tup[8] + tup[9] + tup[10]\n    \n    # return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n\n    # Initialize a variable to store the cumulative sum\n    cumulative_sum = 0\n\n    # Loop through each tuple in the list\n    for num in test_list:\n        # Add the current number to the cumulative sum\n        cumulative_sum += num\n\n    # Return the cumulative sum\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = []\n    for i in range(len(test_list)):\n        if i == 0:\n            cumulative_sum.append(test_list[i][0])\n        else:\n            cumulative_sum.append(cumulative_sum[i-1] + test_list[i][0])\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i]\n        print(cumulative_sum)"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for item in test_list:\n        cum_sum += item\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Create an empty list to store the cumulative sum\n    cumulative_sum = []\n\n    # Iterate through the tuple list\n    for tup in test_list:\n        # Extract the values from each tuple\n        values = tup[1:]\n\n        # Initialize a variable to keep track of the sum of the values\n        running_sum = 0\n\n        # Iterate through the values in the tuple list\n        for val in values:\n            running_sum += val\n\n        # Add the running sum to the cumulative sum list\n        cumulative_sum.append(running_sum)\n\n    # Return the cumulative sum list\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # create an empty list to store the cumulative sum\n    cum_sum = []\n    # iterate over each element in the list\n    for elem in test_list:\n        # if the element is a tuple, add the sum of its elements to the cumulative sum\n        if isinstance(elem, tuple):\n            cum_sum.append(sum(elem))\n        # if the element is not a tuple, add it to the cumulative sum\n        else:\n            cum_sum.append(elem)\n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cum_sum = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            cum_sum += test_list[i][0] + test_list[j][0]\n    return cum_sum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    averages = []\n    \n    # Iterate through each tuple in the input tuple\n    for tup in nums:\n        # Calculate the average of the tuple\n        avg = sum(tup) / len(tup)\n        # Append the average to the list of averages\n        averages.append(avg)\n    \n    # Return the list of averages\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n    return [total/count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        sum = 0\n        count = 0\n        for sub_num in num:\n            sum += sub_num\n            count += 1\n        if count > 0:\n            result.append(sum / count)\n        else:\n            result.append(None)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        total = sum(num_tuple)\n        average = total / len(num_tuple)\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    count = 0\n    for t in nums:\n        total += sum(t)\n        count += 1\n    return [total / count]"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for i in range(len(nums)):\n        total = 0\n        count = 0\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n            count += 1\n        averages.append(total/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for num_tuple in nums:\n        average = sum(num_tuple) / len(num_tuple)\n        average_list.append(average)\n    return average_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # initialize empty list to store average values for each tuple\n    avg_list = []\n    \n    # iterate through each tuple in the input tuple of tuples\n    for i in range(len(nums)):\n        # iterate through each element in the current tuple\n        for j in range(len(nums[i])):\n            # add the current element to the sum of all elements in the current tuple\n            total = 0\n            for k in range(len(nums[i][j])):\n                total += nums[i][j][k]\n            # calculate the average value by dividing the sum by the number of elements in the tuple\n            avg = total / len(nums[i][j])\n            # add the average value to the list of average values for each tuple\n            avg_list.append(avg)\n    \n    # return the list of average values for each tuple\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        total = 0\n        for num in tup:\n            total += num\n        averages.append(total/len(tup))\n    return averages"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple([a % b for a, b in zip(test_tup1, test_tup2)])"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Perform element wise modulo\n    result = [x % y for x, y in zip(test_tup1, test_tup2)]\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two input tuples must have the same length.\")\n        return\n    \n    modulo_tup = tuple([test_tup1[i] % test_tup2[i] for i in range(len(test_tup1))])\n    \n    print(\"The modulo tuple is:\", modulo_tup)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n    else:\n        for i in range(len(test_tup1)):\n            test_tup1[i] = test_tup1[i] % test_tup2[i]\n        print(test_tup1)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] % test_tup2[i],)\n    return result"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length.\")\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    # Convert the steps and d to integers\n    steps = int(steps)\n    d = int(d)\n    \n    # Initialize variables for step count, number of jumps, and current position\n    step_count = 0\n    num_jumps = 0\n    position = 0\n    \n    # Loop until we reach the target point\n    while position < steps:\n        # Move in the direction of the current position\n        if position < d:\n            position += 1\n        else:\n            position += 2\n        \n        # Increment step count\n        step_count += 1\n        \n        # Check if we have reached the target point\n        if position == d:\n            num_jumps += 1\n    \n    # Return the number of jumps\n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n\n    # Initialize variables\n    jumps = 0\n    i = 0\n\n    # Iterate through the steps\n    while i < steps:\n        # If the current point is less than d in both x and y coordinates, then jump\n        if abs(i) < d:\n            jumps += 1\n            i += 1\n        # If the current point is greater than d in both x and y coordinates, then move to the next step\n        else:\n            i += 1\n\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    jumps = 0 \n    steps += 1  # To include the last step which is not a jump \n    step = 1 \n    while step < steps: \n        if d == 0: \n            return jumps \n        elif d > 0: \n            d -= 1 \n            jumps += 1 \n            step += 1 \n        elif d < 0: \n            d += 1 \n            step += 1 \n    return jumps "
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # create a 2D list of size steps x steps\n    # with every cell initialized to infinite\n    # except the first cell which is initialized to 0\n    # and the last cell which is initialized to 0\n    grid = [[float('inf')] * steps for i in range(steps)]\n    grid[0][0] = 0\n    grid[steps-1][steps-1] = 0\n\n    # loop through each cell in the grid\n    for i in range(1, steps-1):\n        for j in range(1, steps-1):\n            # if the cell is not infinite\n            if grid[i][j]!= float('inf'):\n                # calculate the distance to the next cell\n                next_distance = abs(d - grid[i][j])\n                # if the next cell is not infinite\n                if grid[i+next_distance][j+next_distance]!= float('inf'):\n                    # update the value of the cell\n                    grid[i][j] = min(grid[i][j], grid[i+next_distance][j+next_distance]+1)\n\n    # return the number of jumps required\n    return grid[0][0]"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n\n    # Initialize variables to keep track of number of jumps and steps taken\n    num_jumps = 0\n    steps_taken = 0\n\n    # Check if initial point is already at desired destination\n    if (d, 0) == (0, 0):\n        return 0\n\n    # Keep track of the current position and target position\n    current_pos = (0, 0)\n    target_pos = (d, 0)\n\n    # Loop until the current position is at the desired destination\n    while current_pos!= target_pos:\n\n        # Calculate the distance to the next position\n        distance = abs(current_pos[0]) + abs(current_pos[1])\n\n        # Check if the next position is within range\n        if current_pos[0] > 0:\n            steps_taken += 1\n        elif current_pos[0] < 0:\n            steps_taken += 1\n\n        # Check if the next position is within range\n        if current_pos[1] > 0:\n            steps_taken += 1\n        elif current_pos[1] < 0:\n            steps_taken += 1\n\n        # Check if the next position is a valid jump\n        if steps_taken <= steps:\n            num_jumps += 1\n            current_pos = (current_pos[0] + d // steps_taken, current_pos[1])\n            steps_taken = 0\n        else:\n            current_pos = (current_pos[0] + d // steps_taken, current_pos[1])\n            steps_taken = 0\n\n    # Return the number of jumps required\n    return num_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables\n    current_position = 0\n    current_jumps = 0\n    total_jumps = 0\n\n    # Iterate through the given steps\n    while current_position <= steps:\n        # Check if the current position is at the destination\n        if current_position == d:\n            return total_jumps\n        # Check if the current position is at the top of the plane\n        if current_position == steps:\n            return -1\n        # Check if the current position is within the plane\n        if current_position > steps:\n            return -2\n\n        # Check if the current position is within the range of jumps allowed\n        if current_jumps > (steps - current_position) // 2:\n            return -3\n\n        # Calculate the next position after jumping\n        next_position = current_position + steps - current_position\n\n        # Increment the total jumps and jumps left\n        total_jumps += 1\n        current_jumps += 1\n\n        # Update the current position and jumps\n        current_position = next_position\n\n    # If the loop completes without finding the destination, return -1\n    return -1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    \"\"\"\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\n    Args:\n        steps (int): The number of jumps required.\n        d (int): The distance to reach the point.\n\n    Returns:\n        int: The minimum number of jumps required to reach the point.\n    \"\"\"\n\n    # Define the distance from the origin for each jump\n    step_distance = d / steps\n\n    # Define the starting point\n    start_point = (0, d)\n\n    # Initialize the jump count as 1\n    jump_count = 1\n\n    # Initialize the distance travelled as 0\n    distance_travelled = 0\n\n    # Loop through the number of jumps\n    while distance_travelled < d:\n        # Loop through the number of steps required for each jump\n        for _ in range(steps):\n            # Move to the next point in the 2d plane\n            start_point = (start_point[0] + step_distance[0], start_point[1] - step_distance[1])\n            # Update the distance travelled\n            distance_travelled += step_distance[0] * step_distance[1]\n\n        # Increment the jump count\n        jump_count += 1\n\n    return jump_count"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    # Function to check if a point can be reached with the given number of jumps\n    def check_point(x, y, jumps):\n        # Calculate the end point of the point (d, 0) from the current point (x, y)\n        end_x = x + d\n        end_y = 0\n        \n        # Check if the end point lies within the limits of the matrix\n        if end_x >= len(steps) or end_y >= len(steps[0]):\n            return False\n        \n        # Check if the end point is already visited\n        if steps[end_x][end_y]!= 0:\n            return False\n        \n        # Check if the end point is the point of interest\n        if end_x == len(steps) - 1 and end_y == len(steps[0]) - 1:\n            return jumps + 1\n        \n        # If the end point is not the point of interest, check if a jump is possible\n        if steps[end_x + 1][end_y] == 1 and steps[end_x + 1][end_y + 1] == 1:\n            return check_point(end_x + 1, end_y + 1, jumps + 1)\n        elif steps[end_x + 1][end_y] == 1 and steps[end_x][end_y + 1] == 1:\n            return check_point(end_x + 1, end_y, jumps + 1)\n        elif steps[end_x][end_y] == 1 and steps[end_x + 1][end_y + 1] == 1:\n            return check_point(end_x, end_y + 1, jumps + 1)\n        \n        return False\n    \n    # Check if the point (0, 0) is reachable from the origin\n    if steps[0][0] == 0 and steps[1][0] == 0:\n        return 0\n    \n    # Check if the point (0, 0) is the point of interest\n    if steps[0][0] == 1 and steps[1][0] == 1:\n        return 1\n    \n    # Check if a jump is possible from (0, 0)\n    if steps[1][0] == 1 and steps[2][0] == 1:\n        return min_Jumps(steps, d + 1) + 1\n    \n    return check_point(1, 0, 0)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    steps = steps.sort()\n    jumps = 0\n    i = 0\n    while i < len(steps):\n        if steps[i] >= d:\n            if i > 0 and steps[i] == steps[i-1]:\n                jumps += 1\n            i += 1\n        else:\n            jumps += 1\n            i += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if d is not 0\n    if d == 0:\n        return 0\n    \n    # Initialize variables for number of jumps and max number of jumps\n    num_jumps = 0\n    max_jumps = steps\n    \n    # Check if there is a point at (d, 0)\n    for i in range(steps):\n        if i == d:\n            return num_jumps\n    \n    # Calculate the number of jumps required to reach the point of form (d, 0)\n    while d > 0:\n        if d >= max_jumps:\n            num_jumps += 1\n            max_jumps += steps - d\n            d = 0\n        else:\n            num_jumps += 1\n            d += 1\n    \n    return num_jumps"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Both lists should have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        try:\n            result.append(nums1[i] / nums2[i])\n        except ZeroDivisionError:\n            print(\"Cannot divide by zero.\")\n            return\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1) == len(nums2):\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n    else:\n        print(\"Error: Lists must have same length\")\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists should have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have same length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the length of the lists is the same\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists are not of equal length!\")\n        return\n    # iterate through the lists and divide each element by the corresponding element in the other list\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists should have same length.\"\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] / nums2[i])\n        return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input, nums1 and nums2, and returns their element-wise division as output.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Length of lists are not equal\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function takes two lists as input and returns their element-wise division.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    num_regex = r'\\d+'\n    num_list = re.findall(num_regex, test_str)\n    num_str = ''.join(num_list)\n    return test_str + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # create a list of characters from the input string\n    char_list = list(test_str)\n    \n    # loop through each character in the list\n    for i in range(len(char_list)):\n        # check if the character is a number\n        if char_list[i].isdigit():\n            # if it is, move it to the end of the list\n            temp = char_list.pop(i)\n            char_list.append(temp)\n    \n    # join the characters in the list into a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = [char for char in test_str if char.isdigit()]\n    num_str = ''.join(num_list)\n    non_num_str = ''.join([char for char in test_str if not char.isdigit()])\n    return num_str + non_num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    \n    # initialize variables\n    num_found = False\n    num_str = \"\"\n    result_str = \"\"\n    \n    # iterate through each character in the input string\n    for char in test_str:\n        \n        # if the character is a number, append it to the number string\n        if char.isdigit():\n            num_str += char\n            num_found = True\n        \n        # if the number string is not empty and a letter is found, append it to the result string and reset the number string\n        elif num_found and not char.isalpha():\n            result_str += num_str\n            num_str = \"\"\n            num_found = False\n        \n        # if the character is not a number, append it to the result string\n        else:\n            result_str += char\n            \n    # append the remaining number string to the result string\n    result_str += num_str\n    \n    # return the result string\n    return result_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize an empty string to store the numbers\n    numbers = ''\n\n    # iterate over each character in the input string\n    for char in test_str:\n        # check if the character is a number\n        if char.isdigit():\n            # add the number to the numbers string\n            numbers += char\n        # if the character is not a number, add it to the output string\n        else:\n            # add the current character to the output string\n            test_str = test_str[:test_str.index(char)] + char + test_str[test_str.index(char)+1:]\n\n    # add the numbers to the end of the output string\n    test_str += numbers\n\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    temp = \"\"\n    num_found = False\n    # loop through each character in the string\n    for char in test_str:\n        # if the character is a number\n        if char.isdigit():\n            num_found = True\n            # add the character to the temp string\n            temp += char\n        # if the character is not a number\n        else:\n            # if num_found is True, move the number to the end of the temp string\n            if num_found:\n                # reverse the string temp\n                temp = temp[::-1]\n                # move the number to the end of the string\n                test_str = test_str.replace(temp, '')\n                # remove the temp string\n                del temp\n                num_found = False\n    # return the final string\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    nums = [c for c in test_str if c.isdigit()]\n    nums_str = ''.join(nums)\n    return test_str.replace(nums_str, '') + nums_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    \"\"\"\n    Write a function to move all the numbers to the end of the given string.\n    \"\"\"\n    # Find all the numbers in the string\n    numbers = re.findall(r'\\d+', test_str)\n    # Reverse the order of the numbers in the string\n    test_str = re.sub(r'\\d+', lambda x: x.group(0)[::-1], test_str)\n    # Rejoin the numbers with the rest of the string\n    test_str = test_str.join(numbers)\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Initialize an empty string to store numbers\n    num_str = ''\n\n    # Loop through the input string and check if the current character is a number\n    for char in test_str:\n        if char.isdigit():\n            num_str += char\n        else:\n            break\n\n    # If there are no numbers in the input string, return the input string as is\n    if not num_str:\n        return test_str\n\n    # Move all the numbers to the end of the input string and return the result\n    return test_str[num_str:] + num_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Convert the string to a list of characters\n    str_list = list(test_str)\n    # Initialize an empty string to store the numbers\n    num_str = ''\n    # Loop through the string\n    for char in str_list:\n        # Check if the character is a number\n        if char.isdigit():\n            # If the character is a number, add it to the num_str\n            num_str += char\n        else:\n            # If the character is not a number, add it to the string and return it\n            test_str = ''.join(str_list)\n            return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n\n    # Sort the input list in ascending order\n    a.sort()\n\n    # Initialize variables for the largest subset size and the current subset size\n    largest_subset_size = 1\n    current_subset_size = 1\n\n    # Loop through the list of numbers\n    for i in range(1, len(a)):\n        # If the current number is divisible by the next number, increase the current subset size\n        if a[i] % a[i-1] == 0:\n            current_subset_size += 1\n        # If the current number is not divisible by the next number, set the current subset size to 1 and continue to the next number\n        else:\n            largest_subset_size = max(largest_subset_size, current_subset_size)\n            current_subset_size = 1\n\n    # Return the maximum of the largest subset size and the current subset size\n    return max(largest_subset_size, current_subset_size)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n\n    return max(dp)"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables for the largest subset and the current subset\n    largest = 0\n    current = 0\n    \n    # Loop through the list of numbers\n    for num in a:\n        # If the current number is divisible by the largest subset, add it to the current subset\n        while num % largest!= 0:\n            current -= largest\n            if current < 0:\n                break\n        # Update the largest subset if the current subset is larger\n        current += num\n        largest = max(largest, current)\n    \n    return largest"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    # create a list to store the count of every number in the list\n    count = [0] * 1000\n\n    # iterate through the list of numbers\n    for num in a:\n        # add 1 to the count of the number modulo 1000\n        count[num % 1000] += 1\n\n    # initialize a variable to store the maximum count\n    max_count = 0\n\n    # iterate through the count list\n    for i in range(1000):\n        # if the count is greater than the maximum count, update the maximum count\n        if count[i] > max_count:\n            max_count = count[i]\n\n    # return the maximum count\n    return max_count\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Create a dictionary to store the size of the largest subset for each number in the list\n    sizes = {}\n    # Initialize the size of the largest subset to 0\n    max_size = 0\n    # Iterate through the list of numbers\n    for num in a:\n        # Calculate the size of the largest subset that can be made from all numbers that are divisible by the current number\n        divisible_subset_size = max(sizes.get(i, 0) for i in range(num, 10001, num))\n        # Update the size of the largest subset if the current number is larger\n        max_size = max(max_size, divisible_subset_size + 1)\n        # Update the sizes dictionary for the current number\n        sizes[num] = divisible_subset_size\n    # Return the size of the largest subset\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset_size = 0\n    subsets = []\n\n    # Sort the input list in non-decreasing order\n    a.sort()\n\n    # Iterate over the sorted list and calculate the largest subset that satisfies every pair being divisible\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            # Check if the sum of the current pair is divisible by the difference between the current pair\n            if a[i] + a[j] == a[j] - a[i]:\n                subset_size = j - i + 1\n                max_subset_size = max(max_subset_size, subset_size)\n\n    return max_subset_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Sort the input list\n    a.sort()\n\n    # Initialize variables to store the largest subset size and the current subset size\n    largest_size = 0\n    current_size = 1\n\n    # Iterate through the list\n    for i in range(len(a)):\n        # Add the current element to the current subset\n        current_size += 1\n\n        # Check if the current subset is divisible by 2\n        if current_size % 2 == 0:\n            # If it is, update the largest subset size if the current subset size is larger\n            if current_size > largest_size:\n                largest_size = current_size\n\n        # If the current element is not divisible by 2, remove the last element from the current subset\n        else:\n            # Decrement the current subset size\n            current_size -= 1\n\n    return largest_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    subsets = []\n    size = 0\n    \n    for i in range(len(a)):\n        for j in range(i+1, len(a)+1):\n            if sum(a[i:j]) % len(a) == 0:\n                subset = a[i:j]\n                subsets.append(subset)\n                size = max(size, len(subset))\n                \n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # sort the list in descending order\n    a.sort(reverse=True)\n    # initialize variables to keep track of the current subset and its size\n    current = []\n    current_size = 0\n    # loop through the sorted list\n    for num in a:\n        # if the current number is not divisible by the previous number, add it to the current subset and increment its size\n        if num % current[-1]!= 0:\n            current.append(num)\n            current_size += 1\n        # if the current number is divisible by the previous number, check if it's a larger subset and update the current subset and its size accordingly\n        else:\n            # if the new subset is larger than the current subset, update the current subset and its size\n            if current_size + 1 > current_size:\n                current = [num]\n                current_size = 1\n            # if the new subset is smaller than the current subset, update the current subset and its size\n            elif current_size + 1 < current_size:\n                current = [num]\n                current_size = 1\n            # if the new subset is equal to the current subset, add the new number to the current subset and increment its size\n            else:\n                current.append(num)\n                current_size += 1\n    # return the size of the largest subset\n    return current_size"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    This function takes in two sorted lists of same size and returns the median of the lists.\n    \"\"\"\n\n    # Merge the two lists into one sorted list\n    merged_list = merge_sort(arr1)\n    merged_list = merge_sort(arr2, merged_list)\n\n    # Find the median of the merged list\n    median = (merged_list[n // 2] + merged_list[n // 2 - 1]) / 2\n\n    return median\n\n\ndef merge_sort(arr, start=0, end=None):\n    \"\"\"\n    This function takes in a list and returns a sorted list.\n    The start and end parameters determine the range of the list to be sorted.\n    \"\"\"\n\n    # Base case: If the start index is greater than or equal to the end index,\n    # the list is already sorted and can be returned as is.\n    if start >= end:\n        return arr\n\n    # Find the middle index of the list\n    mid = (start + end) // 2\n\n    # Recursively sort the left and right halves of the list\n    left_sorted = merge_sort(arr, start, mid)\n    right_sorted = merge_sort(arr, mid + 1, end)\n\n    # Merge the two sorted lists into one sorted list\n    merged_list = []\n    i = j = 0\n\n    # Iterate over the two sorted lists and add the smaller element to the merged list\n    while i < len(left_sorted) and j < len(right_sorted):\n        if left_sorted[i] < right_sorted[j]:\n            merged_list.append(left_sorted[i])\n            i += 1\n        else:\n            merged_list.append(right_sorted[j])\n            j += 1\n\n    # Add any remaining elements from either of the sorted lists to the merged list\n    merged_list += left_sorted[i:]\n    merged_list += right_sorted[j:]\n\n    return merged_list\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n    \n    # Find the middle element of the merged list\n    middle = n // 2\n    \n    # If the number of elements is odd, the median is the middle element\n    if n % 2 == 1:\n        median = merged_list[middle]\n    \n    # If the number of elements is even, the median is the average of the two middle elements\n    else:\n        median = (merged_list[middle-1] + merged_list[middle]) / 2\n        \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    arr = arr1 + arr2\n    \n    # Sort the merged list\n    arr.sort()\n    \n    # Find the median\n    if n % 2 == 0:\n        median = (arr[n//2-1] + arr[n//2])/2\n    else:\n        median = arr[n//2]\n    \n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate both lists and sort them\n    merged = sorted(arr1 + arr2)\n    \n    # Find the median index\n    mid = n // 2\n    if n % 2 == 0:\n        # Even number of elements\n        median_index = mid\n    else:\n        # Odd number of elements\n        median_index = mid - 1\n    \n    # Return the median value\n    return merged[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sort the two lists\n    arr1.sort()\n    arr2.sort()\n\n    # find the mid-points of the two sorted lists\n    mid1 = n // 2\n    mid2 = (n - 1) // 2\n\n    # find the median based on the position of the mid-points\n    if n % 2 == 0:\n        # if n is even, return the average of the middle two elements\n        return (arr1[mid1] + arr2[mid2]) / 2\n    else:\n        # if n is odd, return the middle element\n        return arr1[mid1]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n\n    # concatenate the two arrays\n    arr = arr1 + arr2\n\n    # sort the array in ascending order\n    arr.sort()\n\n    # find the median of the sorted array\n    if n % 2 == 0:\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        median = arr[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    total = len(arr1) + len(arr2)\n    left = 0\n    right = n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr1[mid-1] < arr2[mid-1]:\n            if (mid + n - 1) // 2 <= total // 2:\n                left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            if (mid - n + 1) // 2 <= total // 2:\n                right = mid - 1\n            else:\n                left = mid + 1\n    if total % 2 == 0:\n        return (arr1[total // 2 - 1] + arr2[total // 2 - 1]) / 2\n    else:\n        return arr1[total // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Combine the two sorted lists into one\n    combined_list = arr1 + arr2\n\n    # Find the middle index of the combined list\n    mid = n // 2\n\n    # If the length of the combined list is odd, the median is in the middle element\n    if n % 2 == 1:\n        median = combined_list[mid]\n    # If the length of the combined list is even, the median is in the average of the middle two elements\n    else:\n        median = (combined_list[mid - 1] + combined_list[mid]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    if len(arr1)!= len(arr2) or len(arr1)!= n:\n        raise ValueError(\"Both lists should have the same length and size.\")\n\n    arr = arr1 + arr2\n    arr.sort()\n\n    if len(arr) % 2 == 0:\n        return (arr[len(arr) // 2 - 1] + arr[len(arr) // 2]) / 2\n    else:\n        return arr[len(arr) // 2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of the two arrays\n    arr = arr1 + arr2\n    mid = len(arr) // 2\n    arr.sort()\n\n    # If the length of the array is odd, the median is the middle element\n    if len(arr) % 2 == 1:\n        return arr[mid]\n    # If the length of the array is even, the median is the average of the middle two elements\n    else:\n        return (arr[mid-1] + arr[mid]) / 2"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    This function takes a list of numbers and an integer n and computes the n-th power of each number in the list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Write a function to compute the n-th power of each number in a list.\n    \"\"\"\n    result = []\n    for num in nums:\n        result.append(num**n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num**n)"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    \"\"\"\n    This function takes a string as input and returns True if it contains only uppercase letters and False otherwise.\n    \"\"\"\n    for char in string:\n        if char.islower():\n            return False\n    return True"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Convert the string to uppercase and return the result\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0] \n    last_element = newList[-1] \n    newList[0] = last_element \n    newList[-1] = first_element \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find the first and last indices of the list\n    firstIndex = 0\n    lastIndex = len(newList) - 1\n    \n    # Interchange the first and last element\n    newList[firstIndex], newList[lastIndex] = newList[lastIndex], newList[firstIndex]\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return newList\n    \n    lastIndex = len(newList) - 1\n    temp = newList[lastIndex]\n    newList[lastIndex] = newList[0]\n    newList[0] = temp\n    \n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return swap_List(newList[1:])"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first_element = newList[0]\n    last_element = newList[-1]\n    newList[0] = last_element\n    newList[-1] = first_element\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n    # check if the list is empty\n    if length == 0:\n        return newList\n    # check if the list has only one element\n    elif length == 1:\n        return newList\n    # swap the first and last elements of the list\n    else:\n        newList[0], newList[length-1] = newList[length-1], newList[0]\n        # return the modified list\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Checking if the given list is empty or not\n    if len(newList) == 0: \n        return newList \n    else: \n        # Interchanging the first and last element of the list \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList "
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r) :\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (3 * r**2 * (3 * r - 1)) / (2 * r)\n    # return the calculated area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * (3 * r**2)**0.5\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # Find the semi-perimeter of the circle\n    semi_perimeter = 2 * math.pi * r\n\n    # Calculate the area of the largest triangle that can be inscribed in the circle\n    area = math.sqrt(semi_perimeter * (semi_perimeter - 3 * math.sqrt(semi_perimeter)))\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    pi = math.pi\n    return (2/3) * pi * r ** 3"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0.5 * r * r * math.pi\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    def is_inscribed(a, b, c):\n        '''\n        A helper function to check if the triangle formed by a, b, and c is inscribed in a semicircle with radius r.\n        '''\n        d = r - max(a, b, c)\n        return d >= 0\n    \n    def area_of_triangle(a, b, c):\n        '''\n        A helper function to find the area of the given triangle.\n        '''\n        s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \n    max_area = 0\n    for i in range(1, 100):\n        for j in range(1, i):\n            for k in range(1, j):\n                if is_inscribed(i, j, k):\n                    area = area_of_triangle(i, j, k)\n                    if area > max_area:\n                        max_area = area\n    \n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculating the semi-circle radius\n    semi_r = r/math.sqrt(3)\n    \n    # Calculating the largest possible side of the triangle\n    side = (semi_r**2 + r**2 - r**3)/2\n    \n    # Calculating the area of the triangle using Heron's formula\n    area = math.sqrt(side * (semi_r + r) * (semi_r - r))\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    area = (3 * r ** 2) / (4 * math.tan(math.pi / 3))\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the hypotenuse of a right triangle\n    hypotenuse = 2*r\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle\n    area = (3*r**2)/(2*hypotenuse)\n    \n    # Return the area\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    return (math.pi * r**2) / 3"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n\n    if not end:\n        end = len(array) - 1\n\n    for i in range(start, end):\n        if array[i]!= i + start:\n            return i + start\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n    The function assumes that the input list is already sorted in ascending order.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] < mid:\n            start = mid + 1\n        elif array[mid] > mid:\n            end = mid - 1\n        else:\n            end = mid - 1\n    return start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes in a sorted list of natural numbers as input and returns the smallest missing number.\n    If the list is already sorted, it will return the smallest missing number using the binary search algorithm.\n\n    Parameters:\n    array (list): a sorted list of natural numbers.\n    start (int): the starting index of the array (default 0).\n    end (int): the ending index of the array (default None, meaning the last index).\n\n    Returns:\n    int: the smallest missing number in the sorted list.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    if end < 0 or start > end:\n        return \"Invalid input\"\n    if start == end:\n        if array[start]!= len(array):\n            return start\n        else:\n            return find_First_Missing(array, start + 1)\n\n    mid = (start + end) // 2\n    if array[mid] == mid + 1:\n        return find_First_Missing(array, start, mid - 1)\n    elif array[mid] == mid:\n        return find_First_Missing(array, mid + 1, end)\n    elif array[mid] < mid + 1:\n        return find_First_Missing(array, mid + 1, end)\n    else:\n        return find_First_Missing(array, start, mid - 1)"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    # initialize variables for the first and last indices of the array\n    if end is None:\n        end = len(array) - 1\n    # loop through the array and check for missing numbers\n    for i in range(start, end+1):\n        if i!= array[i]:\n            # check if the current number is missing\n            if i!= i-1:\n                return i\n    # if no missing numbers were found, return the length of the array\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the first missing number.\n    The first missing number is defined as the smallest natural number that is not present in the array.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i] == i:\n            continue\n        elif array[i] < i:\n            return i\n        else:\n            return i - 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    \n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    \n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i + 1:\n            return i + 1\n\n    return end + 1 + start"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n\n    Args:\n        array: A list of natural numbers.\n        start (int): The starting index of the subarray. Default is 0.\n        end (int): The ending index of the subarray. Default is None, which means the entire array is used.\n\n    Returns:\n        int: The smallest missing number from the subarray.\n\n    Examples:\n        >>> array = [1, 2, 3, 4, 5]\n        >>> find_First_Missing(array)\n        6\n        >>> array = [1, 3, 5, 7]\n        >>> find_First_Missing(array)\n        2\n        >>> array = [1, 2, 3, 4]\n        >>> find_First_Missing(array)\n        6\n    '''\n\n    # If the start index is not provided, set it to 0\n    if start is None:\n        start = 0\n\n    # If the end index is not provided, set it to the length of the array\n    if end is None:\n        end = len(array)\n\n    # Initialize a variable to keep track of the missing number\n    missing = start\n\n    # Iterate through the subarray\n    for i in range(start, end):\n        # If the current number is greater than the missing number, update the missing number\n        if array[i] > missing:\n            missing = array[i]\n\n    # Return the missing number\n    return missing"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    This function takes a list of numbers as input and returns a list of even numbers from the input list.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list):\n    '''\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n    '''\n    new_list = []\n    for num in list:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    This function takes a list as input and returns a new list containing only even numbers from the input list.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list):\n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    if sub is None:\n        sub = []\n\n    x, y = ele\n    adj = []\n\n    # North\n    if y > 0:\n        adj.append((x, y - 1))\n\n    # East\n    if x < 9:\n        adj.append((x + 1, y))\n\n    # South\n    if y < 9:\n        adj.append((x, y + 1))\n\n    # West\n    if x > 0:\n        adj.append((x - 1, y))\n\n    # Add the current element to the sublist\n    sub.append(ele)\n\n    # Recursively call the function for all the adjacent elements\n    for adj_ele in adj:\n        adjac(adj_ele, sub)\n\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n\n    # Get the coordinates of the given element\n    x, y = ele\n\n    # Get all the adjacent coordinates\n    adj = []\n\n    # Top row\n    if y > 0:\n        adj.append((x, y-1))\n\n    # Bottom row\n    if y < len(sub)-1:\n        adj.append((x, y+1))\n\n    # Left column\n    if x > 0:\n        adj.append((x-1, y))\n\n    # Right column\n    if x < len(sub[0])-1:\n        adj.append((x+1, y))\n\n    # Add the adjacent coordinates to the list\n    sub.extend(adj)\n\n    # Return the updated list\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adjacent = []\n\n    # iterate over all possible adjacent coordinates \n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i == 0 and j == 0:\n                continue # skip self-loop\n\n            # add adjacent coordinates to a list \n            x_adj = x + i \n            y_adj = y + j\n            if x_adj < 0 or y_adj < 0 or x_adj >= len(sub) or y_adj >= len(sub[0]):\n                continue # skip out-of-bounds coordinates\n            adjacent.append((x_adj, y_adj))\n\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adjacent_coords = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (i!= 1 or j!= 1):\n                adjacent_coords.append((ele[0] + i, ele[1] + j))\n\n    return adjacent_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    # initialize a list to store the adjacent coordinates\n    adj = []\n    # check all the four adjacent squares from the current square\n    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n        nx, ny = x+dx, y+dy\n        # check if the new square is within the board bounds\n        if 0 <= nx < 8 and 0 <= ny < 8:\n            # if the new square is not in the visited set, add it to the list of adjacent squares\n            if (nx, ny) not in sub:\n                adj.append((nx, ny))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    sub.append((x, y+1))\n    sub.append((x, y-1))\n    sub.append((x+1, y))\n    sub.append((x-1, y))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    # Get the x and y coordinates of the given element\n    x, y = ele\n    \n    # Initialize an empty list to store the adjacent coordinates\n    adj = []\n    \n    # Check the neighboring tiles in the positive x and y directions\n    if x + 1 < len(sub) and sub[x + 1][y] == 0:\n        adj.append((x + 1, y))\n    if y + 1 < len(sub[0]) and sub[x][y + 1] == 0:\n        adj.append((x, y + 1))\n    if x - 1 >= 0 and sub[x - 1][y] == 0:\n        adj.append((x - 1, y))\n    if y - 1 >= 0 and sub[x][y - 1] == 0:\n        adj.append((x, y - 1))\n    \n    # Return the list of adjacent coordinates\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    \n    x, y = ele\n    \n    # Extract all the adjacent coordinates\n    if x > 0:\n        sub.append((x-1, y))\n    if x < n-1:\n        sub.append((x+1, y))\n    if y > 0:\n        sub.append((x, y-1))\n    if y < m-1:\n        sub.append((x, y+1))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    x, y = ele\n    adj_coords = []\n\n    # Top\n    if y > 0:\n        adj_coords.append((x, y-1))\n\n    # Right\n    if x < len(sub[0])-1:\n        adj_coords.append((x+1, y))\n\n    # Bottom\n    if y < len(sub)-1:\n        adj_coords.append((x, y+1))\n\n    # Left\n    if x > 0:\n        adj_coords.append((x-1, y))\n\n    return adj_coords"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []):\n    # unpack the tuple of coordinates\n    x, y = ele\n    \n    # create a set to store the adjacent coordinates\n    adj_set = set()\n    \n    # add the current coordinate to the set of adjacent coordinates\n    adj_set.add(ele)\n    \n    # add the coordinates adjacent to the current coordinate to the set of adjacent coordinates\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (x+i, y+j) not in adj_set and (x+i, y+j)!= ele:\n                adj_set.add((x+i, y+j))\n    \n    # convert the set to a list and return it\n    return list(adj_set)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for char in text:\n        if char.isspace():\n            result += '_'\n        else:\n            result += char\n    return result"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # Replace whitespaces with underscores\n    text = text.replace(\" \", \"_\")\n    # Replace underscores with whitespaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # replace spaces with underscores\n    text = text.replace(\" \", \"_\")\n    # replace underscores with spaces\n    text = text.replace(\"_\", \" \")\n    return text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    # Check if the input text is a string\n    if not isinstance(text, str):\n        raise TypeError(\"Input should be a string\")\n    \n    # Replace spaces with underscores\n    space_replaced = text.replace(\" \", \"_\")\n    \n    # Replace underscores with spaces\n    underscore_replaced = space_replaced.replace(\"_\", \" \")\n    \n    # Return the replaced text\n    return underscore_replaced"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    # use regular expressions to replace spaces with underscores and vice versa\n    text = text.replace(' ', '_')\n    text = text.replace('_','')\n    return text"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    while count < len(num_list):\n        num_list[count] = 0\n        count += 1"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n\n    while zero_count > 0:\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1], num_list[last_zero_index]\n        last_zero_index = num_list.index(0)\n        num_list[last_zero_index], num_list[-1] = num_list[-1],"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    '''\n    # Initialize two pointers, one for the beginning of the list and one for the end of the list\n    start = 0\n    end = len(num_list) - 1\n    \n    # Traverse the list starting from the beginning and move all the zeroes to the end of the list\n    while start < end:\n        if num_list[start] == 0:\n            # Move the current element to the next available position after the end of the list\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            \n            # Move the end pointer to the previous position to start traversing the list again\n            end -= 1\n        else:\n            start += 1\n    \n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        num_list (list): A list of integers.\n\n    Returns:\n        list: A new list with all zeroes moved to the end.\n    \"\"\"\n\n    # Create two pointers: one starting at the beginning of the list and one\n    # starting at the end of the list.\n    i = 0\n    j = len(num_list) - 1\n\n    # While i is less than j, swap the values at i and j.\n    while i < j:\n        if num_list[i] == 0:\n            # Swap the current value with the value at j, which will be zero.\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            # Decrement j, since we just moved a value to its correct position.\n            j -= 1\n        else:\n            # Increment i, since we didn't find a zero.\n            i += 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            count += 1\n    num_list.reverse()\n    num_list = num_list[:len(num_list)-count] + [0]*count\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n        else:\n            i += 1\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Initialize two pointers - one for the start of the list and one for the end of the list\n    start = 0\n    end = len(num_list) - 1\n\n    # Traverse through the list from the start to the end\n    while start < end:\n        # If the current element is not zero, increment the start pointer\n        if num_list[start]!= 0:\n            start += 1\n        # If the current element is zero, swap it with the element at the end pointer\n        else:\n            num_list[start], num_list[end] = num_list[end], num_list[start]\n            # Increment the start and end pointers to traverse to the next non-zero element\n            start += 1\n            end -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    new_list = []\n    for num in num_list:\n        if num!= 0:\n            new_list.append(num)\n    for i in range(len(num_list), len(new_list)):\n        new_list.append(0)\n    return new_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    This function takes a list and its size as input and returns the sum of xor of all pairs of numbers in the list.\n\n    Example:\n    >>> pair_xor_Sum([1,2,3,4,5],5)\n    36\n\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    # XOR of all elements in the list\n    xor = 0\n    for i in range(n):\n        xor ^= arr[i]\n    \n    # XOR of all pairs of elements in the list\n    sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            sum ^= arr[i] ^ arr[j]\n            \n    return xor ^ sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        xor_sum ^= arr[i] ^ arr[i+1]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum_xor = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            sum_xor += arr[i] ^ arr[j]\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and a number n as input. \n    It returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # initialize a variable to store the xor sum\n    xor_sum = 0\n\n    # iterate over the list of numbers\n    for i in range(n):\n        # iterate over the list of numbers starting from the next index of the current index\n        for j in range(i+1,n):\n            # add the xor of the current index and the next index to the xor sum\n            xor_sum ^= arr[i] ^ arr[j]\n\n    # return the xor sum\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list of integers and the size of the list as input,\n    and returns the sum of XOR of all pairs of numbers in the list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the iterable to a list.\n    lst = list(iterable)\n    \n    # Build a max heap from the list.\n    hq.heapify(lst)\n    \n    # Sort the list in ascending order.\n    hq.heapify(lst)\n    while len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n        hq.heapify(lst)\n        \n    # Return the sorted list.\n    return lst"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min heap of the list\n    hq.heapify(iterable)\n    # sort the list using heap sort algorithm\n    hq.heapify(iterable, 0, len(iterable)-1)\n    # remove the smallest element from the heap\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a max heap from the input list\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    # extract items from the heap in sorted order and return them as a list\n    return [hq.heappop(heap) for i in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the input iterable to a list\n    arr = list(iterable)\n\n    # Build a max heap from the input list\n    hq.heapify(arr)\n\n    # Remove the maximum element from the heap and append it to the sorted list\n    result = []\n    while arr:\n        max_elem = arr[0]\n        hq.heappop(arr)\n        result.append(max_elem)\n\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = hq.heapify(iterable)\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # create a min-heap from the input list\n    heap = [x for x in iterable]\n    hq.heapify(heap)\n\n    # extract the minimum element from the heap and append it to the output list\n    output = []\n    while heap:\n        output.append(heapq.heappop(heap))\n\n    return output"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    return [hq.heappop(heap) for _ in range(len(iterable))]"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using a heap sort algorithm.\n    '''\n    # Convert the iterable to a list first, so we can sort it using a heap\n    list_iterable = list(iterable)\n\n    # Build a max heap from the list using the built-in max heap function\n    hq.heapify(list_iterable)\n\n    # Sort the heap using max heapify (in-place) and then extract elements from the heap\n    for i in range(len(list_iterable) - 1, 0, -1):\n        # Extract the maximum element from the heap (i.e., the root element)\n        max_val = hq.heappop(list_iterable)\n\n        # Insert the maximum element at the end of the sorted list\n        list_iterable[i] = max_val\n\n    # Convert the sorted list back to an iterable and return it\n    return list_iterable"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given iterable to a list\n    lst = list(iterable)\n    \n    # Build a max heap from the list\n    heap_size = len(lst)\n    for i in range(heap_size//2 - 1, -1, -1):\n        hq.heapify(lst, i, heap_size)\n    \n    # Extract elements from the heap and add to the result list\n    result = []\n    while heap_size > 0:\n        result.append(lst[0])\n        heap_size -= 1\n        hq.heappop(lst)\n    \n    # Return the sorted list\n    return result"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the input iterable to a list\n    lst = list(iterable)\n    # create a max heap from the list\n    hq.heapify(lst)\n    # sort the list using heap sort\n    for i in range(len(lst)-1, 0, -1):\n        hq.heapreplace(lst, lst[i])\n    # convert the sorted list back to an iterable and return\n    return lst"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # calculate profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n\n    # check whether profit and loss are 0\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss.\")\n        return True\n    else:\n        print(\"The given amount does not have no profit and no loss.\")\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    if profit == 0 and loss == 0:\n        print(\"The given amount has no profit and no loss\")\n    else:\n        print(\"The given amount has a profit of\", profit, \"and a loss of\", loss)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = sale_amount - actual_cost\n    if profit > 0 or sale_amount == actual_cost:\n        return False\n    else:\n        return True"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Calculate profit\n    profit = sale_amount - actual_cost\n    \n    # Check whether profit is greater than 0\n    if profit > 0:\n        print(\"No profit\")\n    else:\n        # Calculate loss\n        loss = actual_cost - sale_amount\n        \n        # Check whether loss is greater than 0\n        if loss > 0:\n            print(\"No loss\")\n        else:\n            print(\"Profitable trade\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost (int/float): Actual cost of the sale\n    sale_amount (int/float): Amount of sale\n    \n    Returns:\n    bool: True if the given amount has no profit and no loss, else False\n    '''\n    \n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    \"\"\"\n    Write a function to check whether the given amount has no profit and no loss\n    \"\"\"\n    if actual_cost < sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return None"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if sale_amount < actual_cost:\n        return \"No profit\"\n    elif sale_amount == actual_cost:\n        return \"No loss\"\n    else:\n        profit = sale_amount - actual_cost\n        return \"Profit: \" + str(profit) + \" USD\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss.\n    If the sale amount is greater than the actual cost, then there is no profit and no loss.\n    \"\"\"\n    if sale_amount > actual_cost:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    \"\"\"\n    This function checks whether the given amount has no profit and no loss\n\n    Args:\n    actual_cost: float, actual cost of the sale\n    sale_amount: float, amount of sale\n\n    Returns:\n    bool: True if the sale has no profit and no loss, else False\n    \"\"\"\n\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= 0 and sale_amount <= 0:\n        return True\n    elif actual_cost > 0 and sale_amount > 0:\n        return False\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 0.621371 # convert km/h to m/s\n    c = (17.625 * math.exp((17.625 * t) / (t + 243.5))) / (math.exp((17.625 * t) / (t + 243.5)) - math.exp((17.625 * (t + 45.5)) / (t + 243.5)))\n    wc = ((35.74 + 0.6214 * v - 35.75 * c) / (13.37 * (t + 45.5)))\n    wc = math.ceil(wc)\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": ""
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    wind_chill = 13.12 + 0.6215 * v - 11.37 * math.log(t) + 0.3965 * t * (t - 273.15)\n    return round(wind_chill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_speed = v\n    temperature = t\n    humidity = 1.0 # assumed to be at 100% relative humidity\n    \n    # Calculate the dew point temperature\n    dew_point = temperature - (0.0065 * temperature) + (0.018 * temperature * temperature)\n    # Calculate the heat index\n    heat_index = (212.0 - ((0.0065 * temperature) + (0.0555 * humidity) - (0.0012 * humidity * humidity) + (0.0088 * math.sqrt(dew_point))))\n    \n    # Calculate the wind chill\n    wind_chill_index = 35.74 + 0.6215 * wind_speed + 35.75 * temperature - 0.4275 * humidity\n    \n    # Round the wind chill index to the next integer\n    wind_chill_rounded = math.ceil(wind_chill_index)\n    \n    return wind_chill_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    if v >= 10 and v <= 15:\n        # Above 10 m/s and below or equal to 15 m/s\n        chill = int((237.3 * math.log(t)) / (v - 6.8))\n    elif v >= 15:\n        # Above 15 m/s\n        chill = int((216.7 * math.log(t)) / (v - 4.6))\n    else:\n        # Below 10 m/s\n        chill = int(237.3 * math.log(t))\n    return round(chill)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # Convert temperature from Celsius to Fahrenheit\n    t_f = (t * 9/5) + 32\n\n    # Calculate the wind chill index based on the given formula\n    wc = (t_f - 32) * (v / 1.15) ** 0.16\n\n    # Round the wind chill index to the nearest integer\n    wc = math.ceil(wc)\n\n    return wc"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v <= 0 or t <= 0:\n        return None\n    \n    return round((t - 32) * 5/9 + 32)"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v == 0:\n        return 0\n    \n    # formula for wind chill index\n    wc_index = 35.74 + (0.6215 * t) - (35.75 * (t**2) / 100) + (0.4275 * v**0.16) - (t * 0.5625)\n    wc_index = round(wc_index)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert wind speed to m/s\n    v_mps = v * 1.60934 # convert km/h to m/s\n\n    # Calculate temperature difference\n    temp_diff = t - 273.15\n\n    # Calculate wind speed difference\n    ws_diff = v_mps - 10 # wind speed at 10 m above ground\n\n    # Calculate the wind chill index\n    wc_index = -42.379 + (13.377 * temp_diff) - (0.622 * ws_diff) + (11.34 * temp_diff * ws_diff) - (0.396 * temp_diff * temp_diff) + (0.567 * ws_diff * ws_diff) - (0.428 * temp_diff * ws_diff * ws_diff) + (0.08 * temp_diff * temp_diff * ws_diff) - (0.143 * ws_diff * ws_diff * ws_diff)\n\n    # Round the wind chill index to the nearest integer\n    wc_index = math.ceil(wc_index)\n\n    return wc_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill index\n    wc = 35.74 + (0.6215*v) - (35.75*t_f) + (0.4275*v*t_f)\n    \n    # Round to the nearest integer\n    wc = math.ceil(wc)\n    \n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            continue\n        total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Define an empty list to store the names that do not start with a lowercase letter\n    sample_names_no_lowercase = []\n    # Loop through each name in the input list\n    for name in sample_names:\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If the name starts with a lowercase letter, add it to the list of names that do not start with a lowercase letter\n            sample_names_no_lowercase.append(name)\n    # Use the len() function to get the length of the list of names that do not start with a lowercase letter\n    total_length = len(sample_names_no_lowercase)\n    # Return the total length of the list of names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    filtered_names = [name for name in sample_names if name[0].isupper()]\n    sum_length = sum(len(name) for name in filtered_names)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    valid_names = []\n    for name in sample_names:\n        if name.isupper():\n            valid_names.append(name)\n    sum_length = sum(len(name) for name in valid_names)\n    return sum_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = []\n    for name in sample_names:\n        if name[0].isupper():\n            names.append(name)\n    return sum(len(name) for name in names)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create a new list that only contains the names that start with uppercase letters\n    upper_names = [name for name in sample_names if name[0].isupper()]\n\n    # Use the built-in `sum` function to sum the lengths of the names in the upper_names list\n    total_length = sum(len(name) for name in upper_names)\n\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    names = [name for name in sample_names if name[0].isupper()] # filter names that start with a lowercase letter\n    lengths = [len(name) for name in names] # get the length of each name\n    total_length = sum(lengths) # sum all the lengths\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total = 0\n    for name in sample_names:\n        if name[0].isupper():\n            total += len(name)\n    return total"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^()]*\\)'  # regex pattern to match parenthesis and what is inbetween them\n    new_string = re.sub(pattern, '', items)  # replace the parenthesis with an empty string\n    return new_string"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove the parenthesis from the string\n    items = re.sub('[(].*?[)]', '', items)\n    # Remove the space after each character\n    items = re.sub('\\s+','', items)\n    # Remove the space before the first character\n    items = items.strip(' ')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = re.compile(r'\\([^)]*\\)')\n    return pattern.sub('', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    This function takes a string and removes the parenthesis and what is inbetween them from the string.\n\n    Example:\n    input_str = 'This is a (nested) string with (parentheses) inside'\n    output_str = remove_parenthesis(input_str)\n    output_str will be 'This is a  string  with  inside'\n    '''\n    pattern = r'\\([^)]*\\)'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis\n    pattern = re.compile(r'\\([^)]*\\)')\n    items = re.sub(pattern, '', items)\n    # Remove all the spaces\n    items = items.replace(' ', '')\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Use regular expression to find all occurrences of parenthesis\n    regex = re.compile(r'\\((.*?)\\)')\n    \n    # Find all matches in the string\n    matches = re.finditer(regex, items)\n    \n    # Iterate over all matches and replace them with an empty string\n    for match in matches:\n        items = items.replace(match.group(), '')\n    \n    # Return the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Define regular expression to match parenthesis and what is inbetween them\n    pattern = r'\\([^)]*\\)'\n\n    # Use re.sub() method to remove parenthesis and what is inbetween them from a string\n    result = re.sub(pattern, '', items)\n\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\((.*?)\\)'\n    result = re.findall(pattern, items)\n    return''.join(result)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub(r'\\([^)]*\\)', '', items)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    This function finds the nth nonagonal number using the formula: n^2 + (n - 1)^2\n    '''\n    return n ** 2 + (n - 1) ** 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return (n * (n - 1)) // 2 + n - 1\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    a = 1\n    b = 2\n    count = 0\n    while count < n:\n        if (a * a + b * b) == (1 + 4) * (a + b):\n            print(a)\n            count += 1\n            a += 1\n            b += 2\n        elif (a * a + b * b) < (1 + 4) * (a + b):\n            a += 1\n        else:\n            b += 2\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    num = 0\n    for i in range(1, n+1):\n        num += i*(2*i-1)\n    return num\n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n\n    # initialize sum of first n even numbers\n    even_sum = 2 * (n-1) + 1\n    nonagonal_sum = 0\n\n    # add up the nonagonal numbers using the formula\n    for i in range(1, n):\n        nonagonal_sum += i * even_sum\n        even_sum += 2\n    \n    # return the final nonagonal number\n    return nonagonal_sum"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    This function takes an integer n as input and returns True if n is a nonagonal number and False otherwise.\n    A nonagonal number is a number whose sum of its adjacent numbers is not equal to the number itself.\n    '''\n    \n    # Loop through the range of numbers from 1 to n-1\n    for i in range(1, n):\n        # Check if the sum of adjacent numbers is equal to the number itself\n        if (i**2 + (n-i)**2) == n:\n            # If the sum is equal, return True\n            return True\n    \n    # If the loop completes without finding a nonagonal number, return False\n    return False"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n * (n - 1) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n-1)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th nonagonal number is:\", is_nonagonal(n))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return (n * (3 * n - 1)) // 2"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * (n - 1) + 1\n\nn = int(input(\"Enter a number: \"))\nresult = is_nonagonal(n)\nprint(\"The\", n, \"nonagonal number is:\", result)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?:[^z]|^)(z)([^\\s\\w]|$)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Define the pattern to match\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n\n    # Use the re.search() method to search for the pattern in the text\n    match = re.search(pattern, text)\n\n    # If the pattern is found, return True\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # split the text into words\n    words = text.split()\n    # loop through each word and check if it ends with 'z'\n    for word in words:\n        if word[-1] == 'z':\n            # if it does, return True\n            return True\n    # if we reach this point, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n\n    # Remove all non-alphabetic characters from the text\n    text = re.sub('[^a-zA-Z]','', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the word starts with 'z' and ends with 'z'\n        if words[i].startswith('z') and words[i].endswith('z'):\n            # Remove 'z' from both ends of the word\n            words[i] = words[i][1:-1]\n            # Check if the remaining word contains 'z'\n            if 'z' in words[i]:\n                # If it does, replace 'z' with '*'\n                words[i] = words[i].replace('z', '*')\n\n    # Join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[a-zA-Z]+\\b'\n    z_pattern = r'[zZ]'\n    match = re.search(pattern, text)\n    if match:\n        z_index = match.start()\n        if z_index == 0 or z_index == len(match.group()) - 1:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    # Define regular expression pattern to match 'z' except at the start and end of the word\n    pattern = r\"(?<=\\b)z(?=\\b)\"\n    # Use re.search() function to search for the pattern in the text\n    result = re.search(pattern, text)\n    # Check if the pattern is found and return the result\n    return result is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[Zz]\\w*\\b'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Remove any non-word characters (non-letters, digits, or underscores) from the text string\n    text = re.sub('[^a-zA-Z0-9_]+','', text)\n    \n    # Split the text string into individual words\n    words = text.split()\n    \n    # Loop through each word in the list\n    for i in range(len(words)):\n        # Check if the word contains 'z' at the start and end of the word\n        if words[i].startswith('z') and words[i].endswith('z'):\n            # If the word contains 'z' at the start and end of the word, print it\n            print(words[i])"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Create a new empty array to store the reversed array\n    reversed_array = []\n    \n    # Loop through the input array from the start position to the kth position\n    for i in range(k):\n        # Append the first element of the input array to the new array\n        reversed_array.append(input[i])\n    \n    # Loop through the input array from the kth position to the end of the array\n    for i in range(k, len(input)):\n        # Append the last element of the input array to the new array\n        reversed_array.append(input[i])\n    \n    # Return the reversed array\n    return reversed_array"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(input) - 1\n    temp = 0\n    \n    # Reverse the array from left to right until k-th element\n    while left < k-1:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    \n    # Reverse the array from k-th element to right\n    while left <= right:\n        temp = input[left]\n        input[left] = input[right]\n        input[right] = temp\n        left += 1\n        right -= 1\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    start = 0\n    end = k - 1\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(k-1, n):\n        input[i], input[k-i-1] = input[k-i-1], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # reverse the first k elements of the array\n    for i in range(k):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    # reverse the remaining elements of the array\n    for i in range(k, n):\n        input[i], input[n-1-i] = input[n-1-i], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    if k > n:\n        return \"Error: k is greater than the length of the array.\"\n    elif k == 1:\n        return input\n    else:\n        mid = n//2\n        left = input[:mid]\n        right = input[mid:]\n        reverse_Array_Upto_K(left, k-1)\n        reverse_Array_Upto_K(right, k-1)\n        input = left + right\n        return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n        k += 1\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if len(input) < k:\n        return \"Array cannot be reversed\"\n\n    start = 0\n    end = len(input)-1\n\n    while start < k:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a new array to store the reversed elements\n    reversed_array = []\n    # initialize the index of the first element\n    start_index = 0\n    # initialize the index of the last element\n    end_index = k-1\n    # iterate through the array from the start to the end index\n    for i in range(start_index, end_index+1):\n        # append the element at the current index to the new array\n        reversed_array.append(input[i])\n    # iterate through the array from the end to the start index\n    for i in range(end_index, start_index-1, -1):\n        # append the element at the current index to the new array\n        reversed_array.append(input[i])\n    # return the reversed array\n    return reversed_array"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n\n    Args:\n        test_tup (tuple): A tuple containing integers.\n        test_dict (dict): A dictionary containing key-value pairs.\n\n    Returns:\n        tuple: A tuple containing both the original tuple and the new dictionary.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Combine the tuple and dictionary into a new tuple\n    new_tuple = tuple(test_tup + test_dict.items())\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = tuple(test_tup)\n    new_tup.update(test_dict)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Add the dictionary to the tuple using the update() method\n    test_tup = test_tup.copy()\n    test_tup.update(test_dict)\n    # Return the updated tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup.append(test_dict)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    for key, value in test_dict.items():\n        test_tup = test_tup + (value,)\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_dict, test_tup[2])"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup + tuple(test_dict.items()))"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup, test_dict)\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n\n    # initialize first row and first column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n\n    # initialize first diagonal\n    for i in range(N):\n        dp[i][i] = cost[i][i]\n\n    # compute other diagonal elements\n    for i in range(1, N):\n        for j in range(i+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n\n    # find maximum path\n    max_path = -1\n    max_sum = 0\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                if j == N-1:\n                    continue\n                new_sum = dp[i][j] + dp[i][j+1]\n                if new_sum > max_sum:\n                    max_path = (i, j)\n                    max_sum = new_sum\n            elif j == 0:\n                if i == N-1:\n                    continue\n                new_sum = dp[i][j] + dp[i+1][j]\n                if new_sum > max_sum:\n                    max_path = (i, j)\n                    max_sum = new_sum\n            elif i == N-1:\n                new_sum = dp[i][j] + dp[i-1][j]\n                if new_sum > max_sum:\n                    max_path = (i, j)\n                    max_sum = new_sum\n            else:\n                new_sum = dp[i][j] + min(dp[i-1][j], dp[i][j-1])\n                if new_sum > max_sum:\n                    max_path = (i, j)\n                    max_sum = new_sum\n\n    # compute average\n    total_sum = 0\n    total_cells = 0\n    row, col = max_path\n    while row >= 0 and col >= 0:\n        total_sum += cost[row][col]\n        total_cells += 1\n        row -= 1\n        col -= 1\n    return max_sum / total_cells"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def maxAveragePath(cost, i, j, current_sum, visited):\n        if i == len(cost)-1 and j == len(cost[0])-1:\n            if current_sum > max_sum:\n                max_sum = current_sum\n            return\n        \n        if i < len(cost) and j < len(cost[0]) and cost[i][j]!= 1:\n            # if we have not visited this cell yet\n            visited[i][j] = True\n            current_sum += cost[i][j]\n            \n            maxAveragePath(cost, i+1, j, current_sum, visited)\n            maxAveragePath(cost, i, j+1, current_sum, visited)\n            \n            current_sum -= cost[i][j]\n            visited[i][j] = False\n    \n    # initialize variables\n    max_sum = float('-inf')\n    visited = [[False] * len(cost[0]) for _ in range(len(cost))]\n    \n    # start from top-left cell and visit each cell to compute average\n    maxAveragePath(cost, 0, 0, 0, visited)\n    \n    # return the maximum average\n    return max_sum"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    \n    # initialize first row and column\n    for i in range(N):\n        dp[0][i] = cost[0][i]\n    for j in range(N):\n        dp[j][0] = cost[j][0]\n    \n    # fill in the rest of the matrix using dynamic programming\n    for i in range(1, N):\n        for j in range(1, N):\n            if cost[i][j] > cost[i-1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    # find the maximum average path\n    max_avg = dp[N-1][N-1]\n    for i in range(N-2, -1, -1):\n        for j in range(N-2, -1, -1):\n            if cost[i][j] > cost[i+1][j]:\n                dp[i][j] = max(dp[i][j-1], dp[i][j]) + cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n            if dp[i][j] > max_avg:\n                max_avg = dp[i][j]\n    \n    # return the maximum average path\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find all possible paths\n    paths = []\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            if i == 0 and j == 0:\n                paths.append([])\n                paths[-1].append((i,j))\n            elif i > 0 and j == 0:\n                paths.append([paths[-1][-1]])\n                paths[-1].append((i,j))\n            elif i == 0 and j > 0:\n                paths.append([paths[-1][-1]])\n                paths[-1].append((i,j))\n            elif i > 0 and j > 0:\n                paths.append([paths[-1][-1]])\n                paths[-1].append((i,j))\n                paths[-1].append((i-1,j))\n                paths[-1].append((i,j-1))\n\n    # Compute the average for each path\n    max_avg = 0\n    for path in paths:\n        total_cost = 0\n        for i in range(len(path)-1):\n            total_cost += cost[path[i][0]][path[i][1]] + cost[path[i+1][0]][path[i+1][1]]\n        avg = total_cost / len(path)\n        if avg > max_avg:\n            max_avg = avg\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    dp = [[0]*N for _ in range(N)]\n    max_avg = float('-inf')\n    start_row = 0\n    start_col = 0\n\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            else:\n                dp[i][j] = max(cost[i][j], cost[i-1][j], cost[i][j-1]) + dp[i-1][j-1]\n\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            elif i == N-1:\n                max_avg = max(max_avg, dp[i][j] + dp[i][j-1])\n            elif j == N-1:\n                max_avg = max(max_avg, dp[i][j] + dp[i-1][j])\n            else:\n                max_avg = max(max_avg, dp[i][j] + dp[i-1][j-1])\n\n    return max_avg/(N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    max_path_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                continue\n            path_avg = sum(cost[i][j:j+N]) + sum(cost[i:i+N][j]) + sum(cost[i][j:j+N][k] for k in range(N-j-1)) + sum(cost[i:i+N][j:j+N][k] for k in range(N-i-1)) - sum(cost[i][j+1:j+N+1]) - sum(cost[i+1:i+N+1][j]) - sum(cost[i][j+1:j+N+1][k] for k in range(N-j-1)) - sum(cost[i+1:i+N+1][j+1:j+N+1][k] for k in range(N-i-1))\n            if path_avg > max_path_avg:\n                max_path_avg = path_avg\n    return max_path_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Define the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum average and the number of paths\n    max_avg = 0\n    num_paths = 0\n\n    # Iterate over all possible paths\n    for i in range(N):\n        for j in range(N):\n            # Check if this cell is part of an existing path\n            if i > 0 and j > 0:\n                # Check if the current cell is a valid next cell to the previous cell\n                if cost[i-1][j] < cost[i][j-1]:\n                    # Add the current cost to the total cost of the path\n                    total_cost = cost[i-1][j] + cost[i][j-1]\n                    # Add the number of visited cells to the total number of cells visited in the path\n                    num_cells = 2\n                else:\n                    # Add the current cost to the total cost of the path\n                    total_cost = cost[i][j-1] + cost[i][j]\n                    # Add the number of visited cells to the total number of cells visited in the path\n                    num_cells = 2\n\n                # Check if the current total cost is greater than the current maximum average\n                if total_cost > max_avg:\n                    max_avg = total_cost\n                    num_paths = 1\n                elif total_cost == max_avg:\n                    num_paths += 1\n\n    # Return the maximum average over all existing paths\n    return max_avg / num_paths"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Get the dimensions of the matrix\n    n = len(cost)\n\n    # Initialize variables to keep track of the current path and its average\n    current_path = []\n    current_sum = 0\n    max_average = 0\n\n    # Loop through all possible paths from the top-left cell\n    for i in range(n):\n        for j in range(n):\n            # If this is the bottom-right cell, add the cost and move on\n            if i == n-1 and j == n-1:\n                current_sum += cost[i][j]\n                current_path.append((i,j))\n            # If we can move right, add the cost and move right\n            elif j < n-1:\n                current_sum += cost[i][j]\n                current_path.append((i,j))\n            # If we can move down, add the cost and move down\n            elif i < n-1:\n                current_sum += cost[i][j]\n                current_path.append((i,j))\n            # Otherwise, we have found a path that ends here, so calculate its average and compare with the maximum\n            else:\n                current_sum += cost[i][j]\n                current_path.append((i,j))\n\n                # Calculate the average and update the maximum if necessary\n                average = current_sum / (i+1)\n                if average > max_average:\n                    max_average = average\n\n                # Reset the variables for the next path\n                current_sum = 0\n                current_path = []\n\n    return max_average"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n\n    # Calculate the number of cells visited in each path\n    visited = [[0 for j in range(N)] for i in range(N)]\n    paths = []\n\n    # Calculate the total cost of each path and add to paths\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                paths.append(cost[i][j])\n                visited[i][j] = 1\n            elif i == 0:\n                paths.append(cost[i][j] + visited[i][j-1])\n                visited[i][j] = visited[i][j-1] + 1\n            elif j == 0:\n                paths.append(cost[i][j] + visited[i-1][j])\n                visited[i][j] = visited[i-1][j] + 1\n            else:\n                paths.append(cost[i][j] + visited[i-1][j] + visited[i][j-1] + visited[i-1][j-1])\n                visited[i][j] = visited[i-1][j] + visited[i][j-1] + visited[i-1][j-1] + 1\n\n    # Calculate the maximum average of all paths\n    max_avg = max(paths)\n\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    visited = [[False] * N for _ in range(N)]\n    path = []\n\n    def helper(i, j):\n        if i == N-1 and j == N-1:\n            # Base case: we reached the bottom-right cell\n            avg = sum(cost[i][j])\n            if avg > max_avg:\n                max_avg = avg\n                path = [i, j]\n            return avg\n\n        if not visited[i][j]:\n            visited[i][j] = True\n\n            # Try to move right\n            avg1 = helper(i, j+1)\n\n            # Try to move down\n            avg2 = helper(i+1, j)\n\n            visited[i][j] = False\n            return avg1 + avg2\n\n    return max_avg, path"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n\n    # Filter the students based on height and weight\n    filtered_students = {k: v for k, v in students.items() if v[0] > h and v[1] > w}\n\n    # Print the filtered students\n    for k, v in filtered_students.items():\n        print(f\"{k}: Height: {v[0]}, Weight: {v[1]}\")\n\n    # Return the filtered students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[student] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, student_info in students.items():\n        height, weight = student_info\n        if height > h and weight > w:\n            filtered_students[name] = student_info\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    same_pairs = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            same_pairs += 1\n    return same_pairs"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    \"\"\"\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], x) for x in nums2):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Create a dictionary to store the count of each element in each list\n    counts = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in counts:\n            counts[nums1[i]] = 0\n        counts[nums1[i]] += 1\n        if nums2[i] not in counts:\n            counts[nums2[i]] = 0\n        counts[nums2[i]] += 1\n\n    # Find the indices where the counts are the same in both lists\n    same_indices = []\n    for i in range(len(nums1)):\n        if eq(counts[nums1[i]], counts[nums2[i]]):\n            same_indices.append(i)\n\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n\n    # calculate the sum of digits of the base to the power\n    result = 0\n    num = base\n    while power > 0:\n        if power % 2 == 1:\n            result += num % 10\n        power //= 2\n        num //= 10\n\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while power > 0:\n        digit = base % 10\n        sum += digit\n        power -= 1\n        base //= 10\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    \n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through the digits of the base and add them to the sum based on the power\n    for digit in base_str:\n        total += int(digit) ** power\n    \n    # Return the sum of all digits raised to the power\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        # Extract the last digit of the base raised to the power\n        digit = (base % 10) ** (power % 10)\n        total += digit\n        # Remove the last digit of the base raised to the power\n        base //= 10\n        power //= 10\n    return total"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    def digit_sum(n):\n        '''\n        Helper function to calculate the sum of all digits of a number.\n        '''\n        return sum(int(digit) for digit in str(n))\n\n    return digit_sum(base)**power"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize the sum variable\n    sum_of_digits = 0\n    # Loop through each digit of the base string\n    for digit in base_str:\n        # Convert the digit to an integer and add it to the sum variable\n        sum_of_digits += int(digit) ** power\n    # Return the sum of digits raised to the power\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    result = 0\n    for i in range(power):\n        result += sum(int(digit) for digit in str(base))\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    base_str = str(base)\n    base_list = [int(digit) for digit in base_str]\n    \n    # Initialize the sum variable\n    sum_digits = 0\n    \n    # Iterate through the list of digits and multiply each digit to the specified power and add the result to the sum variable\n    for digit in base_list:\n        digit_power = digit ** power\n        sum_digits += digit_power\n    \n    # Return the sum of all digits raised to the specified power\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(1, power+1):\n        sum += int(str(base)[i-1])\n    return sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # loop through each digit of the base\n    for digit in str(base):\n        # multiply the digit by the power\n        digit_power = int(digit) ** power\n        # add the digit power to the sum\n        sum += digit_power\n    # return the sum\n    return sum"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # defining the regular expression pattern\n    pattern = r'\"([^\"]*)\"'\n    # using re.findall() function to find all matches of the pattern in the string\n    matches = re.findall(pattern, text1)\n    # converting matches into a list and returning it\n    return list(set(matches))"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Remove all non-alphanumeric characters from the string\n    text = re.sub(r'[^a-zA-Z0-9\\s]', '', text1)\n    # Split the string into individual words\n    words = text.split()\n    # Loop through the list of words and extract the values between quotation marks\n    result = []\n    for word in words:\n        if word.startswith('\"') and word.endswith('\"'):\n            # Extract the value between the quotation marks and add it to the result list\n            value = word[1:-1]\n            result.append(value)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of all the values within quotation marks \" \" of the string.\n    '''\n    # defining the pattern for matching quotation marks\n    pattern = r'\"(.*?)\"'\n    # using regex to match all the values between the quotation marks\n    values = re.findall(pattern, text1)\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n\n    # Find all the occurrences of quotation marks in the string\n    matches = re.findall(r'(\".*?\")', text)\n\n    # Extract the values between the quotation marks\n    values = [match[1:-1] for match in matches]\n\n    # Return the extracted values\n    return values"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    This function takes a string as input and returns a list of values between quotation marks \" \".\n    '''\n    # Using regular expressions to extract values between quotation marks \" \"\n    pattern = r'\"[^\"]*\"'\n    matches = re.findall(pattern, text1)\n    # Removing the quotation marks from each match\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    pattern = r'(?<=\")(.*?)(?=\")'\n    match = re.findall(pattern, text)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, text1)\n    return matches"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = (test_tup[0],) * N\n    for i in range(N-1):\n        result_tup += (test_tup[i+1] * test_tup[i],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = tuple([test_tup[i]*test_tup[i+1] for i in range(N)])\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = [None] * N\n    for i in range(N):\n        result[i] = test_tup[i] * test_tup[i+1]\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Define the length of the tuple\n    N = len(test_tup) - 1\n    \n    # Create a new tuple with the same length as the original one\n    new_tup = (None,)*N\n    \n    # Multiply each pair of elements in the original tuple\n    for i in range(N):\n        new_tup[i] = test_tup[i] * test_tup[i+1]\n    \n    # Return the new tuple\n    return new_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    else:\n        return (test_tup[0] * multiply_elements(test_tup[1:])[0]) + multiply_elements(test_tup[1:])[1:]"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = []\n    for i in range(N):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n    N = len(test_tup) - 1\n    result_tup = [test_tup[0]]\n    for i in range(N):\n        result_tup.append(test_tup[i+1] * result_tup[-1])\n    return tuple(result_tup)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where the elements of the first list are \n    added to the corresponding element in the second list.\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    This function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through the two lists and add their elements together\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize an empty list to store the result\n    result = []\n    # Loop through each element in the first list\n    for i in range(len(lst1)):\n        # Add the corresponding element from the second list to the current result\n        result.append(lst1[i] + lst2[i])\n    # Return the final result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Initialize the result list\n    result = []\n    \n    # Iterate over the elements of the first list\n    for i in range(len(lst1)):\n        # Append the sum of the i-th element of the first list and the i-th element of the second list to the result list\n        result.append(lst1[i] + lst2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [lst1[i] + lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    # Group the list by consecutive duplicates\n    grouped = groupby(nums)\n    # Remove consecutive duplicates from each group\n    for key, group in grouped:\n        for item in group:\n            if item == next(group, None):\n                nums.remove(item)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n    \"\"\"\n    for key, group in groupby(nums):\n        if key:\n            yield key"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def consecutive_duplicates(nums):\n    \"\"\"\n    Remove consecutive duplicates of a given list.\n\n    Args:\n        nums (list): a list of integers\n\n    Returns:\n        list: a new list with consecutive duplicates removed\n    \"\"\"\n    # Use itertools.groupby to group consecutive duplicates together\n    groups = groupby(enumerate(nums), lambda x: x[0] - x[1])\n    # Convert groups to a list of lists, with each inner list containing\n    # consecutive duplicates\n    result = []\n    for group in groups:\n        if group[0] == 0:\n            # Skip the first group (i.e. the ones with no duplicates)\n            continue\n        duplicates = [x for _, x in group[1]]\n        for i in range(len(duplicates)):\n            for j in range(i+1, len(duplicates)):\n                if j == i+1:\n                    # Remove the duplicates\n                    duplicates.remove(duplicates[j])\n    # Convert the list of lists back to a list\n    return list(chain(*result))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    # Convert the list to a set to get unique elements\n    nums = list(set(nums))\n\n    # Group the elements by the sum of their index and the element itself\n    grouped_nums = sorted(enumerate(nums), key=lambda x: x[0]+x[1])\n\n    # Remove consecutive duplicates by iterating over the grouped_nums and\n    # appending the elements to a new list\n    result = []\n    for key, group in groupby(grouped_nums, key=lambda x: x[0]):\n        result.extend(list(group))\n\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates from a given list.\n    '''\n    def remove_consecutive_duplicates(iterable):\n        for key, group in groupby(iterable):\n            if not key:\n                yield from group\n            else:\n                yield key\n\n    return list(remove_consecutive_duplicates(enumerate(nums)))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Remove consecutive duplicates of a given list.\n    '''\n    return list(groupby(enumerate(nums), lambda x: x[1] == x[0] - 1))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a generator to iterate over the group of consecutive duplicates\n    consecutive_gen = (list(group) for key, group in groupby(nums) if len(list(group)) > 1)\n    # Concatenate the groups and return the result\n    return [num for group in consecutive_gen for num in group]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2*math.pi*r*h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 1/2*r*h*math.tan(math.pi/6)\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface = math.pi * r**2 * h\n    return lateral_surface\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    \n    # Using the Law of Cosines to calculate the lateral surface area\n    surface_area = math.pi * r ** 2 * h / 360\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi*r**2*h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of a cone: s = pi*r^2 * h/3\n    return math.pi * r ** 2 * h / 3"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = math.pi * (r ** 2)\n    return s"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[\\s,\\.]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # replace all occurrences of multiple colons with a single colon\n    text = re.sub(r'::', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # replace all occurrences of spaces, commas, or dots with a colon\n    text = re.sub(r'([,.])', r':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = re.sub(r'\\s+', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,. ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace spaces, commas, or dots with a colon\n    text = re.sub(r'[,.]', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r\"[^\\w\\s]\")\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\.\\, ]')\n    new_text = special_chars.sub(':', text)\n    return new_text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[,\\. ]'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    This function replaces all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to replace spaces, commas, or dots with a colon\n    pattern = re.compile(r'\\s+|,+|\\.+|_+', re.IGNORECASE)\n    # Replace all occurrences of the pattern with a colon\n    text = pattern.sub(':', text)\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    This function takes two parameters:\n    - A: A sorted array\n    - x: The number to be searched for\n\n    The function returns the index of the first occurrence of x in the sorted array A.\n\n    If x is not found in A, the function returns -1.\n    \"\"\"\n\n    # Initialize index of first occurrence to -1\n    first_occurrence = -1\n\n    # Initialize left and right pointers to the start and end of A\n    left = 0\n    right = len(A) - 1\n\n    # Loop while left pointer is less than or equal to right pointer\n    while left <= right:\n\n        # Calculate the middle index\n        mid = (left + right) // 2\n\n        # If the middle element is equal to x, then update the first occurrence index\n        if A[mid] == x:\n            first_occurrence = mid\n\n            # If x is the first element in A, then update the right pointer to mid+1\n            if mid == 0:\n                right = mid + 1\n\n            # If x is the last element in A, then update the left pointer to mid-1\n            elif mid == len(A) - 1:\n                left = mid - 1\n\n            # If x is somewhere in the middle of A, then update the left and right pointers accordingly\n            else:\n                left = mid\n                right = mid\n\n        # If the middle element is less than x, then update the left pointer to mid+1\n        elif A[mid] < x:\n            left = mid + 1\n\n        # If the middle element is greater than x, then update the right pointer to mid-1\n        else:\n            right = mid - 1\n\n    # Return the first occurrence index\n    return first_occurrence"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    \n    # Initialize a counter variable to keep track of the number of elements found\n    count = 0\n    \n    # Iterate through the array\n    for i in range(len(A)):\n        # Check if the current element is equal to the target number\n        if A[i] == x:\n            # If it is, increment the counter and update the first occurrence index if necessary\n            count += 1\n            if first_occurrence_index == -1 or i < first_occurrence_index:\n                first_occurrence_index = i\n    \n    # Return the first occurrence index or -1 if the target number was not found\n    return first_occurrence_index if count > 0 else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Iterate through the array and find the first occurrence of x\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    # If x is not found in the array, return -1\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1  # x not found in the array"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index where A[i] > x\n    left = 0\n    right = len(A) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # A[mid] == x\n            while mid > 0 and A[mid - 1] == x:\n                mid -= 1\n            return mid\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    if i == len(A):\n        return -1\n    return i"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sublist = []\n    result = 0\n    for i in range(n):\n        sublist.append(arr[i])\n        sublist.append(0)\n        prod = 1\n        for j in range(1, i+1):\n            prod *= sublist[j]\n        result += prod\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # initialize result\n    result = 0\n    # calculate product of the first element\n    product = 1\n    for i in range(n):\n        product *= arr[i]\n    # initialize cumulative product array\n    cproduct = [product]\n    # calculate sum of products of subarrays\n    for i in range(n):\n        # calculate sum of products of subarrays ending at index i\n        product = 1\n        for j in range(i+1, n):\n            product *= arr[j]\n        # update cumulative product array\n        cproduct.append(product)\n    # calculate sum of products of sublists\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # find sum of products of subarrays between indices i and j\n            subarray_product = 1\n            for k in range(i, j):\n                subarray_product *= arr[k]\n            # find sum of products of sublists between indices i and j\n            sublist_product = 1\n            for k in range(i, j):\n                sublist_product *= cproduct[k]\n            # add sum of products of sublists to result\n            result += sublist_product\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n\n    # Find sum of products of all sublists of length 1 to n\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            total_sum += arr[j-1] * (arr[j-1] - 1) * (arr[j-1] - 2) *... * (arr[j-1] - (i-1))\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    n = len(arr)\n\n    # Initialize dp[i][j] to the sum of products of all possible sublists of arr[0:i+1] and arr[j+1:n]\n    dp = [[0] * (n+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n\n    for j in range(1, n+1):\n        for i in range(n+1):\n            if i == j:\n                dp[i][j] = arr[j-1]\n            else:\n                dp[i][j] = arr[j-1] * (dp[i+1][j-1] - dp[i][j-1])\n\n    # Initialize a list to store the products of sublists\n    products = []\n\n    # For each sublist of arr[0:n], calculate the product and append it to the products list\n    for i in range(n+1):\n        product = 1\n        for j in range(i+1):\n            product *= arr[j]\n        products.append(product)\n\n    # Sum up the products of all possible sublists\n    total_sum = sum(products)\n\n    return total_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    sum_prod = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_arr = arr[i:j]\n            prod = 1\n            for x in sub_arr:\n                prod *= x\n            sum_prod += prod\n    return sum_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Initialize a variable to store the sum of products of subarrays\n    sum_of_products = 0\n\n    # Loop through all possible starting indices\n    for i in range(len(arr)):\n        # Initialize a variable to store the current subarray\n        current_subarray = []\n\n        # Loop through all possible ending indices\n        for j in range(i, len(arr)):\n            # Append the current element to the current subarray\n            current_subarray.append(arr[j])\n\n            # Calculate the product of the current subarray\n            product = 1\n            for num in current_subarray:\n                product *= num\n\n            # Add the product to the sum of products\n            sum_of_products += product\n\n    # Return the sum of products of all subarrays\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # create a list of all possible sublists of arr\n    sublists = []\n    for i in range(1, n + 1):\n        for j in range(n - i + 1):\n            sublists.append(arr[j:j+i])\n    # calculate the products of each sublist\n    prod_list = []\n    for sublist in sublists:\n        prod = 1\n        for num in sublist:\n            prod *= num\n        prod_list.append(prod)\n    # calculate the sum of products of all sublists\n    sum_of_products = 0\n    for prod in prod_list:\n        sum_of_products += prod\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Create a list to store products of subarrays\n    prod_list = [0] * (n + 1)\n    prod_list[0] = 1\n    # Calculate products of subarrays\n    for i in range(1, n + 1):\n        prod_list[i] = prod_list[i - 1] * arr[i - 1]\n    # Calculate sum of products of subarrays\n    subarray_sum = 0\n    for i in range(n):\n        subarray_sum += prod_list[i] * prod_list[i + 1]\n    return subarray_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    product = 1\n    result = 0\n\n    # Initialize the prefix sum array\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n\n    # Iterate through the array\n    for i in range(n):\n        prefix_sum[i + 1] = prefix_sum[i] + arr[i]\n\n    # Iterate through the array again to calculate the product of all subarrays\n    for i in range(1, n + 1):\n        if prefix_sum[i] - prefix_sum[i - 1] > 1:\n            product *= prefix_sum[i] - prefix_sum[i - 1]\n\n    # Calculate the sum of products of subarrays\n    for i in range(n):\n        result += product\n\n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize variables to store sum of products of subarrays and current product of subarray\n    sum_product = 0\n    product = 1\n\n    # Traverse through the list to calculate sum of products of subarrays\n    for i in range(n):\n        product *= arr[i]\n        sum_product += product\n\n    # Calculate sum of products of subarrays and return the result\n    return sum_product"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit.\n    '''\n    mask = 1 << (n.bit_length() - 2)  # bit mask for first and last bit\n    return n ^ mask"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Initialize the result variable to 0\n    result = 0\n    # Extract the first and the last bits of the input number\n    first_bit = (n & 1)   # 0 if the least significant bit is 0, 1 otherwise\n    last_bit = (n >> 31) & 1   # 0 if the most significant bit is 0, 1 otherwise\n    # Extract the middle bits of the input number\n    middle_bits = n & 0x7FFFFFFF   # 0 to 31 bits\n    # Toggle the middle bits except the first and the last bit\n    middle_bits ^= first_bit ^ last_bit   # Toggle the middle bits except the first and the last bit\n    # Combine the middle bits and the first and the last bits of the input number\n    result = (middle_bits << 1) | first_bit | last_bit\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. \n    \"\"\"\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2 ** len(bin(n)) - 2)\n    \n    # Toggle the middle bits\n    middle_bits = (n ^ (n & (n - 1))) & 1\n    \n    # Combine the first and last bits with the middle bits\n    result = first_bit | middle_bits | last_bit\n    \n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):\n    # First, extract the first and last bits\n    first_bit = n & 1\n    last_bit = n & (1 << (32 - 1))\n\n    # Then, toggle the middle bits\n    middle_bits = n & ~(1 << 1) & ~(1 << 31)\n\n    # Finally, combine the first and last bits with the middle bits\n    return (first_bit << 31) | (middle_bits << 1) | last_bit"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # To toggle the first and last bits, we need to XOR with 1\n    n ^= 1\n    # To toggle all other bits, we need to AND with all 1s except the last bit and the first bit\n    n &= ((1 << (n & 1)) - 1)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    \"\"\"\n    # Iterate through all the bits except the first and the last one\n    for i in range(len(bin(n)[2:][:-1])):\n        # Toggle the i-th bit\n        n = n ^ (1 << i)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of a number, except for the first and last bits.\n    \"\"\"\n    # Get the number of bits in the input number\n    num_bits = len(bin(n)[2:])\n\n    # Calculate the index of the middle bit\n    mid_bit_index = (num_bits - 2) // 2\n\n    # Toggle the middle bits\n    middle_bits = bin(n & ~(1 << mid_bit_index) & ~(1 << (mid_bit_index + 1)))[2:]\n\n    # Combine the original number and middle bits\n    new_num = middle_bits + str(n)\n\n    # Convert the new number to an integer\n    new_num_int = int(new_num, 2)\n\n    return new_num_int"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):\n    # This function takes a number as input and returns the number with middle bits toggled.\n    \n    # First, we calculate the middle bits by shifting the bits to the left by one and then adding 1 to it.\n    mid_bits = (n & 0b1111111100000000) >> 1 | 1\n    \n    # Then, we toggle the first and the last bits by adding or subtracting 1 to the middle bits.\n    toggled_bits = (mid_bits + 1) % 2\n    \n    # Finally, we return the original number with the middle bits toggled.\n    return n ^ toggled_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # Convert the number to binary and get its length\n    binary_string = bin(n)[2:]\n    length = len(binary_string)\n    \n    # Calculate the first and last bit positions\n    first_bit = 0\n    last_bit = length - 1\n    \n    # Calculate the middle bit positions\n    middle_bit_positions = [first_bit + (i // 2) for i in range(1, length - 1)]\n    \n    # Toggle middle bits\n    for position in middle_bit_positions:\n        if binary_string[position] == '0':\n            binary_string = binary_string[:position] + '1' + binary_string[position + 1:]\n        else:\n            binary_string = binary_string[:position] + '0' + binary_string[position + 1:]\n    \n    # Convert the binary string back to an integer and return it\n    return int(binary_string, 2)"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # initialize a variable to store the middle bits of the number\n    middle_bits = n & ~(n & 0x55555555)  \n    # shift the middle bits to the left by 1 bit to toggle their bits\n    middle_bits <<= 1  \n    # shift the middle bits to the right by 1 bit to toggle their bits\n    middle_bits >>= 1  \n    # toggle the first and last bit of the middle bits\n    middle_bits ^= 0xAAAAAAAA\n    # combine the first and last bits of the middle bits and the original number\n    n ^= middle_bits\n    return n"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n        a (list): A sorted list in which the value is to be inserted.\n        x (int): The value to be inserted.\n\n    Returns:\n        int: The index where the value should be inserted in the sorted list.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return index\n    else:\n        return left_insertion(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Use the built-in bisect_left function from the bisect module to find the insertion point\n    index = bisect.bisect_left(a, x)\n\n    # Check if the value is already present in the list\n    if index!= len(a) and a[index] == x:\n        return index\n\n    # If the value is not present, find the index of the nearest smaller value\n    while index > 0 and a[index - 1] > x:\n        index -= 1\n\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        return None\n    else:\n        return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    # find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(a, x)\n    if index == 0:\n        return 0\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n\n    # Define a function to find the left insertion point\n    def left_insertion_helper(a, x):\n        # Initialize the left and right pointers\n        left, right = 0, len(a) - 1\n\n        # Iterate until the left pointer is greater than or equal to the right pointer\n        while left < right:\n            # Find the midpoint of the current range\n            mid = (left + right) // 2\n\n            # If the midpoint value is greater than the specified value, set the left pointer to mid+1\n            if a[mid] > x:\n                left = mid + 1\n            # Otherwise, set the right pointer to mid\n            else:\n                right = mid\n\n        # Return the left pointer\n        return left\n\n    # Call the helper function and return its result\n    return left_insertion_helper(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # bisect_left function returns the index where the element should be inserted to maintain sorted order.\n    # The index returned is the first index that is greater than the value to be inserted.\n    index = bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return index\n    elif x < a[index]:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re "
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return (n*geometric_sum(n-1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 0\n    else:\n        return n * geometric_sum(n - 1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    # base case\n    if n == 1:\n        return 1\n    # recursive case\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    # Base case\n    if n == 1:\n        return 0\n\n    # Recursive case\n    return n * geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. \n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_nums = []\n    # Calculate the sum of the first n natural numbers \n    for i in range(1, n+1):\n        triangular_nums.append(math.factorial(n) // (math.factorial(i) * math.factorial(n-i)))\n    \n    # Find the smallest triangular number with n digits\n    min_triangular_num = 0\n    for i in range(1, len(triangular_nums)):\n        if triangular_nums[i] < triangular_nums[min_triangular_num]:\n            min_triangular_num = i\n    \n    return min_triangular_num"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    # Function to find the smallest triangular number with n digits\n    def smallest_triangular(n):\n        triangular = 1\n        for i in range(1, n+1):\n            triangular = triangular * (10**(i-1))\n        return triangular\n\n    # Function to find the index of smallest triangular number with n digits\n    def index_smallest_triangular(n):\n        smallest = smallest_triangular(n)\n        triangular = 1\n        count = 0\n        for i in range(1, smallest+1):\n            if triangular == smallest:\n                count += 1\n                triangular = triangular + 1\n            else:\n                triangular += 1\n        return count\n\n    return index_smallest_triangular(n)\n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    triangular_num = []\n    index = 0\n    count = 0\n    for i in range(1,10**n):\n        triangular_num.append(math.sqrt(i) * (i + 1))\n    triangular_num.sort()\n    return triangular_num.index(triangular_num[0])"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        i = 2\n        while True:\n            index = math.ceil(i*math.log10(i))\n            if index == n:\n                return i\n            i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    for i in range(10**n):\n        triangular = i*i*(i//10**n + 1)\n        if triangular < 10**n:\n            return i-1\n    return None"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        triangular = i * (i + 1) // 2\n        if len(str(triangular)) == n:\n            return i\n        i += 1"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "Let's implement this in a Python script."
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    # Initialize variables\n    triangular_num = 0\n    smallest_triangular_num = math.inf\n    index = -1\n    # Iterate over all possible triangular numbers of size n\n    for i in range(10**(n-1), 10**n):\n        for j in range(10**(n-2), 10**(n-1)-1, -1):\n            # Check if the current triangular number is smaller than the current smallest triangular number\n            if i+j <= smallest_triangular_num:\n                continue\n            # Check if the current triangular number is smaller than the smallest triangular number we have found so far\n            if i+j < smallest_triangular_num:\n                smallest_triangular_num = i+j\n                index = 1\n            # Check if the current triangular number is equal to the smallest triangular number we have found so far\n            if i+j == smallest_triangular_num:\n                index += 1\n    # Return the index of the smallest triangular number\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # initializing the index to 0\n    index = 0\n\n    # finding the length of the number\n    length = len(str(n))\n\n    # initializing the sum of digits of the number\n    sum_digits = 0\n\n    # iterating through the number from left to right\n    for i in range(length):\n\n        # extracting the digit at index i\n        digit = int(str(n)[i])\n\n        # adding the digit to the sum of digits\n        sum_digits += digit\n\n        # checking if the sum of digits is greater than the length of the number\n        if sum_digits > length:\n\n            # updating the index\n            index = i + 1\n\n            # resetting the sum of digits\n            sum_digits = 0\n\n    # returning the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sieve_of_eratosthenes(n):\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n))+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return primes\n\ndef find_Index(n):\n    primes = sieve_of_eratosthenes(n)\n    for i in range(n+1):\n        if primes[i] and i * (i+1) / 2 <= n:\n            return i * (i+1) / 2\n    return None"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n\n    # Initialize an empty dictionary\n    my_dict = {}\n\n    # Iterate through the tuple\n    for i in range(0, len(test_tup), 2):\n        # Add the key-value pair to the dictionary\n        my_dict[test_tup[i]] = test_tup[i+1]\n\n    # Return the dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {test_tup[i]: test_tup[i+1] for i in range(0, len(test_tup)-1, 2)}"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    This function takes a tuple and returns a dictionary using adjacent elements.\n    '''\n    # create an empty dictionary\n    my_dict = {}\n    # iterate through the tuple and add pairs of adjacent elements to the dictionary\n    for i in range(len(test_tup)-1):\n        my_dict[test_tup[i]] = test_tup[i+1]\n    # return the completed dictionary\n    return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    \"\"\"\n    # Initialize an empty dictionary\n    dictionary = {}\n    # Loop through the given tuple\n    for i in range(len(test_tup)-1):\n        # Add the current element as a key and the adjacent element as a value to the dictionary\n        dictionary[test_tup[i]] = test_tup[i+1]\n    # Return the dictionary\n    return dictionary"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        print(\"The given tuple must have an even number of elements.\")\n        return None\n    \n    d = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n    \n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    i = 0\n    while i < len(test_tup) - 1:\n        key = test_tup[i]\n        value = test_tup[i+1]\n        d[key] = value\n        i += 2\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    if len(test_tup) % 2 == 1:\n        return None\n    else:\n        dict_obj = {}\n        for i in range(0, len(test_tup), 2):\n            key = test_tup[i]\n            value = test_tup[i+1]\n            dict_obj[key] = value\n        return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    \"\"\"\n    d = {}\n    for i in range(0, len(test_tup)-1, 2):\n        d[test_tup[i]] = test_tup[i+1]\n    return d"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    key_val_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_val_dict[test_tup[i]] = test_tup[i+1]\n    return key_val_dict"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[1:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    if len(s) == 1:\n        return True\n\n    if s[0]!= s[1]:\n        return False\n\n    return all_Characters_Same(s[1:])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    # Loop through each character in the string\n    for char in s:\n        # Check if the current character is the same as the first character\n        if char.lower()!= first_char.lower():\n            # If not, return False\n            return False\n    # If all the characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Convert the string to lowercase\n    s = s.lower()\n    \n    # Initialize the count of characters\n    count = {}\n    \n    # Loop through each character in the string\n    for c in s:\n        # If the character is already present in the count dictionary, increment its count\n        if c in count:\n            count[c] += 1\n        # If the character is not present in the count dictionary, add it with a count of 1\n        else:\n            count[c] = 1\n    \n    # Loop through each character in the count dictionary\n    for c in count:\n        # If the count of any character is not equal to 1, return False\n        if count[c]!= 1:\n            return False\n    \n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return all(s[i] == s[0] for i in range(len(s)))"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    elif s[0] == s[1]:\n        return all_Characters_Same(s[2:])\n    else:\n        return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    # convert the string to a list of characters\n    lst = list(s)\n\n    # check if the list has only one element\n    if len(lst) == 1:\n        return True\n\n    # check if all the characters are same in the list\n    for i in range(len(lst)-1):\n        if lst[i]!= lst[i+1]:\n            return False\n\n    # if all the characters are same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return False\n    else:\n        if s[0] == s[1]:\n            return all_Characters_Same(s[2:])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    This function takes a string as input and returns True if all the characters are same and False otherwise.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(s)\n    \n    # Check if the length of the list is 1\n    if len(char_list) == 1:\n        return True\n    \n    # Compare the first character with all the other characters in the list\n    for i in range(len(char_list)):\n        if char_list[i]!= char_list[0]:\n            return False\n    \n    # If all the characters are same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 1/6 * side**2 * math.sqrt(2)"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side * side * side"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    base = side / 2.0\n    height = math.sqrt(3) * side / 2.0\n    return (base * height) / 3.0"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.125 * side ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 6 * side**2\n\ndef volume_tetrahedron(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    return 14 * side**3\n\ndef surface_area_tetrahedron(side):\n    '''\n    Write a function to calculate the surface area of a tetrahedron.\n    '''\n    return 14 * side**2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    b = side\n    c = side\n    p = (a**2 + b**2 + c**2)**0.5\n    area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side / 2\n    area = (1/3) * math.sqrt(s * (s - 1) * (s - 2) * (s - 3))\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2) ** 0.5 # side of the pyramid\n    area = (s*(s-side)) / 4 # formula to find area of tetrahedron\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 0.5 * side ** 2\n    \n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # calculate the number of items to be rotated\n    n = len(list)\n    if m >= n:\n        return list\n    k = m % n\n    \n    # reverse the first k items in the list\n    list = list[:k] + list[k:][::-1]\n    \n    # reverse the rest of the list\n    list = list[::-1]\n    \n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. \n    \"\"\"\n    n = len(list)\n    m %= n\n    list[:m], list[n-m:] = list[n-m:][::-1], list[:m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Handle edge cases\n    if not list:\n        return list\n    elif m == 0:\n        return list\n    elif m == len(list):\n        return list[:0]\n\n    # Rotate the list\n    n = len(list)\n    # Use modulo operator to find the required index\n    index = (n + m) % n\n    # Rotate the list by reversing the first n-m items and appending the rest of the list\n    result = list[index:] + list[:index]\n    return result"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n\n    # Calculate the length of the list\n    n = len(list)\n\n    # Check if the number of items to be rotated is greater than the length of the list\n    if m >= n:\n        return list\n\n    # Reverse the list\n    list = list[::-1]\n\n    # Initialize a new list to store the rotated elements\n    rotated_list = []\n\n    # Iterate through the original list and add each element to the new list rotated by m items to the right\n    for i in range(n):\n        if i < m:\n            rotated_list.append(list[i])\n        else:\n            j = i - m\n            if j < 0:\n                j += n\n            rotated_list.append(list[j])\n\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    if m == 0 or m == n:\n        return list\n    else:\n        return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    n = len(list)\n    m = m % n\n    list = list[n - m:] + list[:n - m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    # If the list is empty, return an empty list\n    if n == 0:\n        return []\n\n    # If the rotation is not possible, return the original list\n    if n - m < m:\n        return list\n\n    # Perform the rotation\n    for i in range(n - m, m):\n        list[i] = list[i + m]\n    for i in range(m, n):\n        list[i] = list[i - m]\n\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    list.extend(list[:m])\n    list[:m] = []\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m == 0 or m == len(list):\n        return list\n    n = len(list)\n    for i in range(m % n):\n        list.append(list.pop(0))\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(lst, n):\n    \"\"\"\n    Function to rotate a given list by specified number of items to the right direction.\n    \"\"\"\n    # Create a copy of the original list\n    lst_copy = lst[:]\n    # Calculate the number of items to be rotated\n    n = n % len(lst)\n    # Reverse the first n elements of the list\n    lst_copy[:n] = lst_copy[:n][::-1]\n    # Reverse the remaining elements of the list\n    lst_copy[n:] = lst_copy[n:][::-1]\n    # Concatenate the two reversed lists\n    return lst_copy"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for elem in test_tup:\n        if elem is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    def is_divisible_by_digit(num):\n        return all(digit in str(num) for digit in str(num))\n\n    return filter(is_divisible_by_digit, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible(num, digit):\n        return num % digit == 0\n    \n    def has_same_digits(num1, num2):\n        digits1 = set(str(num1))\n        digits2 = set(str(num2))\n        return digits1 == digits2\n    \n    return list(filter(lambda num: is_divisible(num, 1) and has_same_digits(num, num), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(x) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    \"\"\"\n    def is_divisible_by_digits(num):\n        \"\"\"\n        Helper function to check if a given number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(d) for d in str(num)]\n        return all(digit in digits for digit in range(10))\n    \n    return list(filter(is_divisible_by_digits, range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n    startnum (int): the starting number in the range.\n    endnum (int): the ending number in the range.\n\n    Returns:\n    list: a list of numbers that are divisible by every digit in the range.\n    \"\"\"\n\n    # Create a function to check if a number is divisible by a specific digit\n    is_divisible_by_digit = lambda num, digit: num % digit == 0\n\n    # Create a function to check if a number is divisible by every digit in a given range\n    is_divisible_by_range = lambda num: all(is_divisible_by_digit(num, digit) for digit in range(10))\n\n    # Create a list of numbers within the given range\n    numbers = [num for num in range(startnum, endnum + 1)]\n\n    # Filter the numbers that are divisible by every digit in the range\n    divisible_numbers = list(filter(is_divisible_by_range, numbers))\n\n    # Return the list of divisible numbers\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def is_divisible_by_digit(num, digit):\n        return num % digit == 0\n    \n    return filter(lambda x: all(is_divisible_by_digit(x, digit) for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(d) % int(x) == 0 for d in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    '''\n    return list(filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes in two arguments, startnum and endnum, and returns a list of all the numbers in the given range that are divisible by every digit they contain.\n\n    Args:\n    startnum: The starting number to check for divisibility by digits.\n    endnum: The ending number to check for divisibility by digits.\n\n    Returns:\n    A list of numbers in the given range that are divisible by every digit they contain.\n    \"\"\"\n\n    # Define a lambda function to check if a number is divisible by a certain digit\n    def is_divisible(num, digit):\n        return num % digit == 0\n\n    # Create a list comprehension to iterate through every number in the given range and check if they are divisible by every digit they contain\n    divisible_numbers = [num for num in range(startnum, endnum + 1) if all(is_divisible(num, digit) for digit in str(num))]\n\n    return divisible_numbers"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    This function calculates the area of a sector given its radius and angle. If the angle is greater than 360 degrees, the function returns None.\n    '''\n\n    if a > 360:\n        return None\n    else:\n        return math.pi * r * r"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    area = math.pi * r * r * (1 - math.cos(math.radians(a)))\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r, a):\n    \"\"\"\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    \"\"\"\n    # Check if angle is within the range of 0 to 360 degrees\n    if a >= 360:\n        return None\n    # Calculate the area of the sector using the formula area = pi*r^2*sin(angle/180*pi)\n    area = math.pi * r ** 2 * math.sin(a * math.pi / 180)\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        return math.pi*r**2*a/360"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the acceptable range\n    if a > 360 or a < 0:\n        return None\n    \n    # Calculate the area of the sector using the formula A = r*a/360\n    area = r * a / 360\n    \n    # Return the area of the sector\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    area = math.pi * r * r * a / 360\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is larger than 360 degrees\n    if a > 360:\n        return None\n    # Calculate area of sector\n    area = math.pi * r * r\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    # Check if angle is valid\n    if a > 360:\n        return None\n    \n    # Calculate area using formulas\n    area = math.pi * r**2 * math.sin(math.radians(a/2))\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    This function takes the radius and angle of a sector as input and returns the area of the sector.\n    If the angle is larger than 360 degrees, the function returns None.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r ** 2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    n = len(X) \n    m = len(Y) \n    p = len(Z) \n\n    # Create a table to store lengths of longest common \n    # subsequence of prefixes of X, Y and Z \n    lcs = [[0] * (m+1) for i in range(n+1)] \n\n    # Fill the table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(p+1): \n                if i == 0 or j == 0 or k == 0: \n                    lcs[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    lcs[i][j][k] = 1 + lcs[i-1][j-1][k-1] \n                elif X[i-1] == Y[j-1]: \n                    lcs[i][j][k] = lcs[i-1][j][k] \n                elif X[i-1] == Z[k-1]: \n                    lcs[i][j][k] = lcs[i][j-1][k] \n                else: \n                    lcs[i][j][k] = lcs[i][j][k-1] \n\n    # Starting from the last cell (p, m, n) and moving \n    # towards the first cell (0, 0, 0) \n    start = lcs[n][m][p] \n    lcs_sequence = [] \n    i = n \n    j = m \n    k = p \n\n    while start > 0: \n        # If current character is in X \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs_sequence.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n            start -= 1 \n\n        # If current character is in Y \n        elif X[i-1] == Y[j-1]: \n            j -= 1 \n            start -= 1 \n\n        # If current character is in Z \n        elif X[i-1] == Z[k-1]: \n            k -= 1 \n            start -= 1 \n    \n    return ''.join(reversed(lcs_sequence)) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    # Get the length of X, Y and Z\n    n = len(X)\n    m = len(Y)\n    l = len(Z)\n\n    # Create a table to store the lengths of LCS \n    # for all possible alignments \n    table = [[0] * (l+1) for i in range(n+1)] \n\n    # Fill the table in bottom up manner \n    for i in range(n+1): \n        for j in range(m+1): \n            for k in range(l+1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j][k] = 0 \n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n                    table[i][j][k] = table[i-1][j-1][k-1] + 1 \n                else: \n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i-1][j-1][k-1]) \n\n    # Starting from the last cell (i.e., i=n, j=m, k=l) \n    # backtrack to find the longest common subsequence \n    i = n \n    j = m \n    k = l \n    lcs = [] \n    while i > 0 and j > 0 and k > 0: \n        if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n            k -= 1 \n        elif table[i-1][j][k] == table[i][j-1][k]: \n            i -= 1 \n        elif table[i][j-1][k] == table[i-1][j][k]: \n            j -= 1 \n        else: \n            k -= 1 \n\n    # Reverse the list to get the correct order of characters in the LCS \n    lcs.reverse() \n    return lcs "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    # Create a 3x3 table to store the LCS lengths of all three sequences\n    n = len(X)\n    m = len(Y)\n    o = len(Z)\n    LCS = [[[0 for j in range(o+1)] for k in range(m+1)] for i in range(n+1)]\n\n    # Fill in the table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n                    LCS[i][j][k] = LCS[i-1][j-1][k-1] + 1\n                elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n                    LCS[i][j][k] = LCS[i-1][j][k]\n                elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n                    LCS[i][j][k] = LCS[i][j-1][k]\n                else:\n                    LCS[i][j][k] = LCS[i][j][k-1]\n\n    # Find the LCS starting from the bottom right corner\n    i, j, k = n, m, o\n    lcs = ''\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Z[k-1] == X[i-1]:\n            lcs = X[i-1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif LCS[i-1][j][k] > LCS[i][j-1][k]:\n            i -= 1\n        elif LCS[i][j-1][k] > LCS[i][j][k-1]:\n            j -= 1\n        else:\n            k -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    dp = [[[0]*(p+1) for j in range(m+1)] for i in range(n+1)]\n\n    for i in range(n+1):\n        for j in range(m+1):\n            for k in range(p+1):\n                if i == 0 or j == 0 or k == 0:\n                    dp[i][j][k] = 0\n                elif X[j-1] == Y[i-1] and Y[i-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[n][m][p]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    # Create a 3x3 table to store lengths of LCS of substrings \n    # of X, Y and Z\n    L = [[0 for j in range(len(Y)+1)] for i in range(len(X)+1)]\n\n    # Fill the table in bottom-up fashion.\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            if X[i-1] == Y[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Print the length of LCS for X, Y and Z\n    print(\"Length of LCS for X, Y and Z:\", L[len(X)][len(Y)])\n\n    # Return the length of LCS\n    return L[len(X)][len(Y)]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n\n    # Initialize a 3D table to store the length of the longest common subsequence for all possible prefixes of X, Y and Z\n    table = [[[0]*(len(Y)+1) for j in range(len(Z)+1)] for i in range(len(X)+1)]\n\n    # Fill the table in bottom-up manner\n    for i in range(1, len(X)+1):\n        for j in range(1, len(Y)+1):\n            for k in range(1, len(Z)+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    table[i][j][k] = 1 + table[i-1][j-1][k-1]\n                else:\n                    table[i][j][k] = max(table[i-1][j][k], table[i][j-1][k], table[i][j][k-1])\n\n    # Return the length of the longest common subsequence for the given three string sequence\n    return table[-1][-1][-1]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    # find the length of each string in the list\n    n, m, p = len(X), len(Y), len(Z)\n    # create a 2D table to store lengths of longest common subsequences\n    # initialize first row and first col of table with 0\n    L = [[0] * (p + 1) for _ in range(3)]\n    # iterate through all possible substrings of X and Y and store length of LCS in table\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n                    L[0][0] = 0\n                elif X[i - 1] == Y[j - 1]:\n                    L[0][k] = L[0][k - 1] + 1\n                elif Y[j - 1] == Z[k - 1]:\n                    L[i][0] = L[i - 1][0] + 1\n                else:\n                    L[i][k] = max(L[i - 1][k], L[i][k - 1], L[i - 1][k - 1])\n    # backtrack to find the actual LCS and return it as a string\n    i, j, k = p, p, p\n    lcs = \"\"\n    while i > 0 and j > 0 and k > 0:\n        if X[i - 1] == Y[j - 1] and Y[j - 1] == Z[k - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n            k -= 1\n        elif X[i - 1] == Y[j - 1]:\n            i -= 1\n        elif Y[j - 1] == Z[k - 1]:\n            j -= 1\n        else:\n            k -= 1\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n\n    # Create a table to store lengths of longest common subsequences of prefixes of X, Y and Z\n    LCS = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Build LCS table in bottom up manner\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif X[i - 1] == Y[j - 1] and Z[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n\n    # Find the length of the longest common subsequence\n    length = LCS[n][m]\n\n    # Print the LCS\n    print(\"The longest common subsequence is:\")\n    i = n\n    j = m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1] and Z[i - 1] == Y[j - 1]:\n            print(X[i - 1], end=\" \")\n            i -= 1\n            j -= 1\n        elif LCS[i - 1][j] > LCS[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n    dp = [[0]*(p+1) for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    LCS = \"\"\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if X[i-1] == Y[j-1]:\n            LCS = X[i-1] + LCS\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] > dp[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    \n    return LCS"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i == 0 or j == 0:\n                p[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    LCS = \"\"\n    i, j = n, m\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            LCS = X[i - 1] + LCS\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return LCS[::-1]\n"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to match capital letters followed by letters and spaces\n    pattern = r'[A-Z][a-z]+\\s*'\n    # Use the re.sub function to replace the matched pattern with a space\n    result = re.sub(pattern, r'\\1', str1)\n    # Return the modified string\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\b\\w'\n    words = re.findall(pattern, str1)\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove non-alphanumeric characters\n    str1 = re.sub('[^a-zA-Z0-9]', '', str1)\n    # Split the string into words\n    words = str1.split()\n    # Create a new string to hold the new words\n    new_words = ''\n    # Loop through each word in the original list\n    for word in words:\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # Add a space before the word\n            new_words +=''\n        # Append the word to the new string\n        new_words += word\n    # Return the new string\n    return new_words"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # define regex pattern to find capital words\n    pattern = r'(?<=\\b)(?=[A-Z])'\n    # replace capital words with spaces\n    return re.sub(pattern,'', str1)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Add spaces between capital words\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words back into a string\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b\\w'\n    words = re.findall(pattern, str1)\n    result = []\n    for word in words:\n        if word[0].isupper():\n            result.append(word)\n            result.append(' ')\n    return ''.join(result).strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Use regular expressions to find all words in the string\n    words = re.findall(r'\\b\\w+\\b', str1)\n    # Use a loop to iterate over the words and insert spaces between them if necessary\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n    # Join the words back together into a string and return it\n    return ''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-alphanumeric characters except spaces\n    string = re.sub(r'[^a-zA-Z0-9\\s]', '', string)\n    # Split the string into words\n    words = string.split()\n    # Capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # Join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = r'\\b[A-Z]\\w+\\b'\n    words = re.findall(pattern, str1)\n    spaces = re.findall(r'\\b', str1)\n    index = 0\n    result = ''\n    for word in words:\n        if index == 0 or not words[index-1].isupper():\n            result += word.capitalize() +''\n        else:\n            result +='' + word.lower()\n        index += 1\n    return result.strip()"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\b[A-Z][a-z]*\\b', str1)\n    return''.join(words)\n"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Sort a given list of strings of numbers numerically.\n    \"\"\"\n    nums_list = []\n    for num_str in nums_str:\n        # check if the number is an integer\n        try:\n            int_num = int(num_str)\n            nums_list.append(int_num)\n        except ValueError:\n            # if not, try to convert it to float\n            try:\n                float_num = float(num_str)\n                nums_list.append(float_num)\n            except ValueError:\n                # if it's not an integer or float, ignore it\n                pass\n    \n    # sort the list in numeric order\n    nums_list.sort()\n    \n    return nums_list"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num in nums_str:\n        try:\n            nums.append(float(num))\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all numeric strings to integers\n    nums_int = [int(num) for num in nums_str if num.isdigit()]\n    # Sort the list of integers in ascending order\n    nums_int.sort()\n    # Convert back to strings\n    sorted_nums_str = [str(num) for num in nums_int]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        if num_str.isnumeric():\n            nums.append(int(num_str))\n        else:\n            nums.append(num_str)\n    nums.sort(key=lambda x: (isinstance(x, int), x))\n    return nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    This function takes a list of strings as input and returns the sorted list of strings in numerical order.\n    \"\"\"\n    # Convert the list to a list of lists, where each sublist contains one number and one string\n    nums_list = [[int(x), x] for x in nums_str]\n    # Sort the list of lists based on the first element of each sublist\n    nums_list.sort(key=lambda x: x[0])\n    # Convert the sorted list of lists back to a list of strings\n    sorted_nums_str = [str(x) for x in nums_list]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings of numbers to float\n    nums = [float(num) for num in nums_str]\n    # Sort the list numerically\n    nums.sort()\n    # Convert the sorted list back to strings\n    sorted_nums = [str(num) for num in nums]\n    # Return the sorted list\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically. \n    \"\"\"\n    # Convert all strings in the list to integers\n    nums = [int(n) for n in nums_str]\n    \n    # Sort the integers numerically in ascending order\n    nums.sort()\n    \n    # Convert the sorted integers back to strings and return the list\n    return [str(n) for n in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    nums_str = [str(num) for num in nums]\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            num = float(num_str)\n            nums.append(num)\n        except ValueError:\n            pass\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # add the tuple to the list\n    test_list.append(test_tup)\n    # print the updated list\n    print(test_list)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Using list concatenation to add the tuple to the list\n    test_list += test_tup"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i]) == tuple:\n            test_list[i] = tuple(test_list[i]) + test_tup\n        elif type(test_list[i]) == list:\n            test_list[i] = add_tuple(test_list[i], test_tup)\n        else:\n            continue\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup[i]\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    test_list.append(test_tup)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    if i > 0 and arr[i] > arr[i//2]:\n        return False\n    else:\n        return True\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    n = len(arr)\n\n    for i in range(n//2, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    for i in range(n-1, n//2-1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n\n    # If the current index is greater than the last index, the array is a min heap\n    if i > len(arr) // 2:\n        return True\n    \n    # If the left child is greater than the right child, the array is not a min heap\n    if arr[i] > arr[2 * i + 1]:\n        return False\n\n    # Recursively check the left and right child of the current index\n    return check_min_heap_helper(arr, 2 * i + 1) and check_min_heap_helper(arr, 2 * i + 2)\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # The base case is when the array has only one element\n    if len(arr) == 1:\n        return True\n    \n    # Recursive function call to check if the array represents a min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    \n    if arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, len(arr)-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    \"\"\"\n    Write a function to check if the given array represents min heap or not.\n\n    :param arr: A list containing elements of any data type.\n    :param i: The index of the current element to be checked.\n    :return: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    if i == 0:\n        return True\n    elif arr[i] > arr[i // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i // 2)\n\ndef check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    :param arr: A list containing elements of any data type.\n    :return: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    if len(arr) % 2 == 0:\n        return check_min_heap_helper(arr, len(arr) // 2)\n    else:\n        return check_min_heap_helper(arr, len(arr) // 2 - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents a min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    else:\n        parent = (i - 1) // 2\n        if arr[i] < arr[parent]:\n            return False\n        else:\n            return check_min_heap_helper(arr, parent)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    if i > 0:\n        if arr[i] > arr[i//2]:\n            return False\n    if 2 * i + 1 <= len(arr) - 1:\n        if arr[2 * i + 1] > arr[i]:\n            return False\n    if 2 * i + 2 <= len(arr) - 1:\n        if arr[2 * i + 2] > arr[i]:\n            return False\n    return True\n\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    for i in range(len(arr)//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i-1)//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i-1)//2)\n\ndef check_min_heap(arr):\n    '''\n    This function checks if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < len(arr):\n        if arr[i] > arr[i*2+1]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i*2+1)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    \"\"\"\n\n    jacobsthal = [0, 1, 1]\n\n    for i in range(2, n+1):\n        jacobsthal.append(jacobsthal[i-1] + jacobsthal[i-2])\n\n    return jacobsthal[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the first two numbers in the sequence\n    a, b = 0, 1\n\n    # Initialize an empty list to store the sequence\n    sequence = []\n\n    # Loop through each number to generate the sequence\n    for i in range(n):\n        # Calculate the next number in the sequence\n        c = (a + b) % 2\n\n        # Add the next number to the sequence\n        sequence.append(c)\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth number in the sequence\n    return sequence[n-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2) + jacobsthal_num(n-3)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_num(n - 1) - jacobsthal_num(n - 2)) // 3\n\ndef jacobsthal_lucas_num(n):\n    '''\n    Write a function to find the nth jacobsthal-lucas number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (2 * jacobsthal_lucas_num(n - 1) + jacobsthal_num(n - 1) - 2 * jacobsthal_num(n - 2)) // 3"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    a, b = 0, 1\n    for i in range(n): \n        a, b = b, a + b \n    return a "
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return 2 * jacobsthal_num(n//2)\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    \"\"\"\n    if n < 0: \n        return None \n    elif n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    else: \n        j = 0 \n        while True: \n            j += 1 \n            jacob_num = (2*j-1)*(2*j-3) \n            if jacob_num == n: \n                return j "
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    jacobsthal_numbers = [0, 1, 1]\n    i = 3\n\n    while len(jacobsthal_numbers) < n:\n        temp = sum(jacobsthal_numbers[i-1:i+1])\n        jacobsthal_numbers.append(temp)\n        i += 2\n\n    return jacobsthal_numbers[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n\n    # Initialize the variables\n    a = 0\n    b = 1\n\n    # Print the first two jacobsthal numbers\n    print(a)\n    print(b)\n\n    # Print the rest of the jacobsthal numbers\n    for i in range(2, n):\n        c = a + b\n        print(c)\n        a = b\n        b = c"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    # Sort the tuple list based on the second element of the tuple\n    test_list.sort(key=lambda x: x[1])\n    # Traverse the sorted tuple list and keep track of the minimum k records\n    i = 0\n    while i < len(test_list):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        elif test_list[i][1] < min_list[-1][1]:\n            min_list[-1] = test_list[i]\n        i += 1\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    '''\n    test_list.sort(key=lambda x: x[1])\n    return test_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    This function takes a tuple list and returns the minimum K records from the list.\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            min_list[min_list.index(min(min_list)) + 1] = test_list[i]\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize variables\n    min_val = None\n    min_list = []\n    # iterate over the list\n    for i in range(len(test_list)):\n        # check if the current record is less than minimum\n        if test_list[i][0] < min_val:\n            # if yes, update min_val and min_list\n            min_val = test_list[i][0]\n            min_list = [test_list[i]]\n        # if the current record is equal to minimum, add to min_list\n        elif test_list[i][0] == min_val:\n            min_list.append(test_list[i])\n        # check if min_list contains K number of records\n        if len(min_list) == K:\n            # if yes, return the min_list\n            return min_list\n    # if min_list is less than K number of records, return min_list\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_val = float('inf')\n    min_list = []\n\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and len(set(test_list[i][1]) & set(test_list[j][1])) <= K:\n                temp_val = sum([min(a, b) for a, b in zip(test_list[i][1], test_list[j][1])])\n                if temp_val < min_val:\n                    min_val = temp_val\n                    min_list = [test_list[i], test_list[j]]\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    # Sort the list of tuples by the second element\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n\n    # Initialize the minimum value of K to infinity\n    min_val = float('inf')\n\n    # Initialize the count of minimum values found to 0\n    count = 0\n\n    # Traverse through the sorted list and check if the count of minimum values found is less than K\n    for i in range(len(sorted_list)):\n        if count < K:\n            # If the current value is smaller than the current minimum value, update the minimum value and increment the count\n            if sorted_list[i][0] < min_val:\n                min_val = sorted_list[i][0]\n                count += 1\n\n    # Return the minimum value of K records\n    return min_val"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    test_list.sort(key=lambda x: x[1])\n    minimum_value = test_list[0][1]\n    result = []\n    for record in test_list:\n        if record[1] == minimum_value:\n            result.append(record)\n        if len(result) == K:\n            break\n    return result"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    count = 0\n    \n    # Sort the list in ascending order\n    test_list.sort()\n    \n    # Iterate over the list and add elements to the min_list\n    for i in test_list:\n        if len(min_list) < K:\n            min_list.append(i)\n            count += 1\n        elif i < min_list[0]:\n            min_list.pop(0)\n            min_list.append(i)\n            count += 1\n        elif i == min_list[0]:\n            count += 1\n    \n    # Return the minimum k records from the list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    \"\"\"\n    This function takes a list of tuples and a number K as input and returns the minimum K records from the list.\n\n    Args:\n    test_list (list): A list of tuples.\n    K (int): The number of minimum records to find.\n\n    Returns:\n    list: A list of minimum K records from the list.\n\n    Example:\n    >>> test_list = [(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]\n    >>> min_k(test_list, 3)\n    [(1, 2, 3), (4, 5, 6), (13, 14, 15)]\n    \"\"\"\n    # Sort the list based on the first element of each tuple\n    sorted_list = sorted(test_list, key=lambda x: x[0])\n\n    # Initialize an empty list to store the minimum K records\n    min_records = []\n\n    # Iterate through the sorted list and keep the minimum K records\n    for i in range(len(sorted_list) - K + 1):\n        min_records.append(sorted_list[i])\n\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(len(test_list)):\n            if j!= i:\n                if test_list[i][0] < test_list[j][0]:\n                    count += 1\n        if count < K:\n            min_list.append(test_list[i])\n        if len(min_list) == K:\n            break\n    return min_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    # loop through each index of l1, l2, and l3\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    common = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common.append(l1[i])\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n\n    # Initialize an empty dictionary to store the count of elements\n    count_dict = {}\n\n    # Iterate over the lists and count the occurrences of each element\n    for i in range(len(l1)):\n        count_dict[l1[i]] = count_dict.get(l1[i], 0) + 1\n        count_dict[l2[i]] = count_dict.get(l2[i], 0) + 1\n        count_dict[l3[i]] = count_dict.get(l3[i], 0) + 1\n\n    # Create a list of common elements from the count dictionary\n    common_elements = [k for k, v in count_dict.items() if v == 3]\n\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index.\n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    # Initialize an empty list to store the common elements\n    common = []\n    \n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at that index is present in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common list\n            common.append(l1[i])\n    \n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_indices = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_indices.append(i)\n    return common_indices"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_list.append(l1[i])\n    return common_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    # Create a dictionary to store the common elements\n    common_elements = {}\n    \n    # Loop through each index of each list\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                # Check if the element at the current index of each list is in the dictionary\n                if l1[i] in common_elements and l2[j] in common_elements and l3[k] in common_elements:\n                    # If it is, increment the count of that element\n                    common_elements[l1[i]] += 1\n                elif l1[i] in common_elements or l2[j] in common_elements or l3[k] in common_elements:\n                    # If it's not, add the element to the dictionary and set its count to 1\n                    if l1[i] not in common_elements:\n                        common_elements[l1[i]] = 1\n                    if l2[j] not in common_elements:\n                        common_elements[l2[j]] = 1\n                    if l3[k] not in common_elements:\n                        common_elements[l3[k]] = 1\n    \n    # Create a list of the common elements and return it\n    common_elements_list = list(common_elements.keys())\n    return common_elements_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    if len(numbers) < 2:\n        return None\n\n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n\n    # return the second element of the sorted list\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Find the smallest number\n    smallest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest:\n            smallest = numbers[i]\n\n    # Find the second smallest number\n    second_smallest = float('inf')\n    for i in range(len(numbers)):\n        if numbers[i]!= smallest and numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()  # Sort the list in ascending order\n    return numbers[1]  # Return the second element in the sorted list"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return \"The list should have at least two elements.\"\n    elif len(numbers) == 2:\n        return sorted(numbers)[1]\n    else:\n        return sorted(numbers)[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    # check if list is empty\n    if len(numbers) == 0:\n        return None\n\n    # initialize variables for smallest and second smallest numbers\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n\n    # iterate through the list and update smallest and second smallest numbers\n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n\n    # return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = None\n    second_smallest = None\n\n    for num in numbers:\n        if smallest is None or num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif second_smallest is None or num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None  # base case: list has less than two elements\n    \n    # sort the list in ascending order\n    sorted_numbers = sorted(numbers)\n    \n    # return the second smallest number\n    return sorted_numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest(numbers[1:])\n        return smallest if smallest is not None else numbers[0]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    if matches:\n        print(\"The string '{}' contains the substring '{}'\".format(text, matches[0]))\n    else:\n        print(\"The string '{}' doesn't contain the substring '{}'\".format(text, pattern))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(?=.*b)'\n    match = re.search(pattern, text)\n    if match:\n        print(f\"Found match: {match.group()}\")\n    else:\n        print(\"No match found\")"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": ""
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b+'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a[b]*'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a(b*)'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n\n    count = 0\n\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    # function to reverse a string\n    def reverse_string(s):\n        return s[::-1]\n\n    # list to store the pairs of reverse strings\n    reverse_pairs = []\n\n    # loop through the list of strings\n    for i in range(len(test_list)):\n        # get the current string\n        s = test_list[i]\n\n        # loop through the rest of the list\n        for j in range(i+1, len(test_list)):\n            # get the reverse of the current string\n            r_s = reverse_string(s)\n\n            # get the reverse of the next string\n            r_r = reverse_string(test_list[j])\n\n            # if the reversed strings are equal, they are reverse pairs\n            if r_s == r_r:\n                # add the pair of strings to the reverse pairs list\n                reverse_pairs.append((s, r_s))\n\n    # return the number of pairs of reverse strings found\n    return len(reverse_pairs)"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for string in test_list:\n        if len(string) > 1:\n            for i in range(len(string)):\n                for j in range(i+1, len(string)):\n                    if string[i:j+1] == string[j:i+1][::-1]:\n                        count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n\n    This function takes a list of strings as input and returns the count of the number of pairs of reverse\n    strings in the list.\n\n    If two strings are equal, then they cannot be reverse of each other.\n\n    If a string is a reverse of another string, then the smaller string comes first.\n\n    Example:\n\n    test_list = [\"abc\", \"cba\", \"bac\", \"bca\"]\n    count_reverse_pairs(test_list)  # Output: 2\n    \"\"\"\n    # Create a dictionary to store the count of each string\n    count_dict = {}\n\n    # Iterate through the list of strings\n    for string in test_list:\n        # If the string is already present in the dictionary, increment the count\n        if string in count_dict:\n            count_dict[string] += 1\n        # If the string is not present in the dictionary, add it with a count of 1\n        else:\n            count_dict[string] = 1\n\n    # Initialize a counter to count the number of pairs of reverse strings\n    pair_count = 0\n\n    # Iterate through the dictionary again and for each string, check if the reverse of the string is present\n    for string in count_dict:\n        # If the reverse of the string is present, increment the pair count\n        if string in count_dict and string[::-1] in count_dict and count_dict[string] > 0:\n            pair_count += count_dict[string] * count_dict[string]\n            count_dict[string] = 0  # Reset the count for this string\n\n    return pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for string in test_list:\n        if string!= string[::-1]:\n            for i in range(len(string)):\n                for j in range(i + 1, len(string)):\n                    if string[i:j] == string[j:i][::-1]:\n                        count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_dict = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_dict:\n            sublist_dict[sublist_tuple] += 1\n        else:\n            sublist_dict[sublist_tuple] = 1\n    return sublist_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                subitem_tuple = tuple(subitem)\n                if subitem_tuple in count_dict:\n                    count_dict[subitem_tuple] += 1\n                else:\n                    count_dict[subitem_tuple] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in sublists:\n            sublists[sublist] += 1\n        else:\n            sublists[sublist] = 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        count[tup] = count.get(tup, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[i:j])\n            if sublist not in sublist_count:\n                sublist_count[sublist] = 1\n            else:\n                sublist_count[sublist] += 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = list1[i:j]\n            sublist_tuple = tuple(sublist)\n            count[sublist_tuple] = count.get(sublist_tuple, 0) + 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    list2 = [tuple(x) for x in list1]\n    count = {}\n    for sublist in list2:\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for item in list1:\n        if type(item) == tuple:\n            key = tuple(item)\n        else:\n            key = item\n        if key not in sublists:\n            sublists[key] = 1\n        else:\n            sublists[key] += 1\n    return sublists"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \"\"\"\n    # create an empty dictionary to store the count of each unique sublist\n    counts = {}\n    # loop through the given list\n    for item in list1:\n        # convert the item to a tuple and check if it is already a tuple in the dictionary\n        if item in counts:\n            # if it is a tuple, increment its value by 1\n            counts[item] += 1\n        else:\n            # if it is not a tuple, convert it to a tuple and add it to the dictionary with a value of 1\n            counts[tuple(item)] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for num in lst:\n        for sublist in num:\n            if sublist not in count:\n                count[sublist] = 1\n            else:\n                count[sublist] += 1\n    return count"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef is_decimal(num):\n    pattern = r'^[-+]?\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, num))"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    num_parts = num.split('.')\n    if len(num_parts)!= 2:\n        return False\n    int_part = num_parts[0]\n    dec_part = num_parts[1]\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    for char in int_part:\n        if not char.isdigit():\n            return False\n    if len(dec_part) > 0 and not dec_part[0].isdigit():\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    int_part, dec_part = parts\n    if len(int_part) > 10 or len(dec_part) > 2:\n        return False\n    for char in int_part:\n        if char < '0' or char > '9':\n            return False\n    for char in dec_part:\n        if char < '0' or char > '9':\n            return False\n    if len(dec_part) > 1 and dec_part[1] == '0':\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n\n    # check if the input string is a valid float number with a precision of 2\n    try:\n        float_num = float(num)\n        if str(float_num).split('.')[-1].startswith('0'):\n            return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' not in num:\n        return False\n    else:\n        integer_part = num.split('.')[0]\n        decimal_part = num.split('.')[1]\n        if len(integer_part) > 10 or len(decimal_part) > 2:\n            return False\n        else:\n            integer_part = int(integer_part)\n            decimal_part = int(decimal_part)\n            if integer_part < 0:\n                return False\n            else:\n                for digit in str(integer_part):\n                    if not digit.isdigit():\n                        return False\n                for digit in str(decimal_part):\n                    if not digit.isdigit():\n                        return False\n                if len(decimal_part) > 0:\n                    if decimal_part < 0 or decimal_part >= 10**len(decimal_part):\n                        return False\n                return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        # Convert the string to a float and check whether it is within 0.01 of an integer\n        num = float(num)\n        int_num = int(num)\n        return abs(num - int_num) < 0.01\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    # Check if the input is a string\n    if not isinstance(num, str):\n        return False\n    \n    # Remove any non-digit characters from the input\n    num = ''.join(c for c in num if c.isdigit())\n    \n    # Check if the string has a precision of 2\n    if len(num) > 2:\n        return False\n    \n    # Check if the string is a decimal number with a precision of 2\n    if '.' in num:\n        if len(num.split('.')[1]) > 2:\n            return False\n    \n    # Check if the string is a valid decimal number with a precision of 2\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    try:\n        num = float(num)\n        if num.is_integer():\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    unique = True\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                unique = False\n                break\n    return unique"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list has only one element\n    if len(arr) == 1:\n        return True\n    \n    # loop through the list and check if each element is equal to the previous element\n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    \n    # if we've made it this far, the list has only one distinct element\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # convert the list into a set to remove duplicates\n    unique_set = set(arr)\n\n    # check if the length of the set is equal to 1, which means that the list contains only one distinct element\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return True\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                return False\n\n    return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # Sort the list of numbers in ascending order\n    arr.sort()\n\n    # Check if the length of the list is 1 or not\n    if len(arr) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    This function takes a list of numbers as input and returns True if the list contains only one distinct element, otherwise it returns False.\n    '''\n\n    # Check if the list contains any duplicate elements\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4,6,9,11]:\n        return True\n    elif monthnum3 in [2,3,5,7,8,10,12]:\n        return False\n    else:\n        print(\"Invalid month number. Please enter a number between 1 and 12.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 3 == 0 and monthnum3 % 100!= 0 or monthnum3 % 400 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return 30\n    elif monthnum in [4, 6, 9, 11]:\n        return 30\n    elif monthnum in [2]:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            return 29\n        else:\n            return 28"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum):\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        print(\"Invalid Month Number\")\n        return None"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum in [4,6,9,11]:\n        return False\n    else:\n        raise ValueError(f\"Month number {monthnum} is invalid.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    # Check if the month number is valid\n    if monthnum not in range(1,13):\n        return \"Invalid month number\"\n    \n    # Check whether the month number contains 30 days or not\n    if monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum in [2, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return True\n    elif 1 <= monthnum3 <= 3:\n        return False\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    if monthnum3 % 3 == 0:\n        print(\"The given month number contains 30 days.\")\n    else:\n        print(\"The given month number does not contain 30 days.\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n\n    # convert month number to string\n    monthnum3 = str(monthnum3)\n\n    # check if month number is valid\n    if monthnum3.isdigit() and int(monthnum3) >= 1 and int(monthnum3) <= 12:\n\n        # check if month number contains 30 days\n        if int(monthnum3) == 1 or int(monthnum3) == 3 or int(monthnum3) == 5 or int(monthnum3) == 7 or int(monthnum3) == 8 or int(monthnum3) == 10 or int(monthnum3) == 12:\n            print(\"30 Days in this Month\")\n        else:\n            print(\"31 Days in this Month\")\n\n    else:\n        print(\"Invalid Month Number\")"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    elif monthnum in [4, 6, 9, 11]:\n        return True\n    elif monthnum == 2:\n        if is_leapyear(year):\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef is_leapyear(year):\n    '''\n    Write a function to check whether the given year is a leap year or not.\n    '''\n    if year % 4!= 0:\n        return False\n    elif year % 100!= 0:\n        return True\n    elif year % 400!= 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    # sort the array\n    arr.sort()\n    min_diff = float('inf')\n\n    # iterate through the sorted array\n    for i in range(len(arr) - 1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array.\n    '''\n    # Sort the array\n    arr.sort()\n    # Initialize minimum difference and current difference\n    min_diff = float('inf')\n    diff = 0\n\n    # Iterate through the array\n    for i in range(n-1):\n        # Calculate the difference between the current element and the next element\n        diff = arr[i+1] - arr[i]\n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n):\n    # To store the minimum difference and the indices of the two elements\n    min_diff = float('inf')\n    min_index = -1\n    min_index2 = -1\n    \n    # Loop through the array and find the minimum difference and its indices\n    for i in range(n):\n        for j in range(i+1,n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n                min_index = i\n                min_index2 = j\n    \n    # Return the minimum difference and its indices\n    return min_diff, min_index, min_index2"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes two arguments:\n    - arr: An array of n integers.\n    - n: The length of the array.\n    The function returns the minimum difference between any two elements in the array.\n    '''\n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference as infinity\n    min_diff = float('inf')\n    \n    # Iterate through the array\n    for i in range(n):\n        # Check if the next element is not in the array\n        if arr[i] + min_diff < arr[i+1]:\n            # Update the minimum difference\n            min_diff = arr[i+1] - arr[i]\n    \n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array of integers as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n\n    # if the array has only one element, then it is the minimum difference\n    if n == 1:\n        return 0\n\n    # divide the array into two halves\n    mid = n // 2\n    left_arr = arr[:mid]\n    right_arr = arr[mid:]\n\n    # recursively find the minimum difference in the two halves\n    left_diff = find_min_diff(left_arr, mid)\n    right_diff = find_min_diff(right_arr, n - mid)\n\n    # find the minimum difference between any two elements in the two halves\n    min_diff = float('inf')\n    for i in range(mid):\n        for j in range(mid):\n            if left_arr[i]!= right_arr[j]:\n                min_diff = min(min_diff, abs(left_arr[i] - right_arr[j]))\n\n    # return the minimum of the two differences\n    return min(left_diff, right_diff, min_diff)"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1] - arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function finds the minimum difference between any two elements in a given array.\n    \"\"\"\n    arr.sort()  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        min_diff = min(min_diff, diff)\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n    It uses a sliding window approach to find the minimum difference between any two elements in the array.\n    '''\n    \n    # Initialize two variables to store the minimum difference and its index\n    min_diff = float('inf')\n    min_diff_index = 0\n    \n    # Loop through the array and slide a window of size n over it\n    for i in range(n):\n        # Calculate the difference between the current element and the next element in the window\n        diff = arr[i+n] - arr[i]\n        \n        # If the current difference is less than the minimum difference found so far, update the minimum difference and its index\n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index = i\n            \n    # Return the minimum difference and its index\n    return min_diff, min_diff_index"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    # Initialize variables \n    num = 2\n    count = 1\n\n    # Loop until nth polite number is found \n    while count < n:\n        # Check if num is a polite number \n        if is_prime(num) and num % 2 == 1:\n            return num\n        # Increment count and num \n        num += 2\n        count += 1\n\n    # If nth polite number is not found \n    return -1\n\ndef is_prime(num): \n    '''\n    Check if a number is prime or not.\n    '''\n    if num <= 1: \n        return False \n    for i in range(2, int(math.sqrt(num))+1): \n        if num % i == 0: \n            return False \n    return True"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    polite = 0\n    for i in range(1, n+1):\n        total = 0\n        number = i\n        while number > 0:\n            digit = number % 10\n            total += digit*digit\n            number //= 10\n        if total == i:\n            polite = i\n            break\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n+1) if is_prime(i)]\n\n    if len(primes) == 0:\n        return \"There are no polite numbers less than or equal to\", n\n\n    if len(primes) == 1:\n        return primes[0]\n\n    polite = 0\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            if count == 0:\n                polite = i\n            count += 1\n        else:\n            count = 0\n\n    return polite"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n    '''\n    p = 5\n    q = 2\n    i = 1\n    while i < n:\n        if i % p == 0 and i % q == 0:\n            i += 1\n            continue\n        else:\n            i += 1\n    return i"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_polite(n):\n    def nth_polite(num):\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 5\n        elif num == 2:\n            return 10\n        elif num == 3:\n            return 15\n        elif num == 4:\n            return 20\n        elif num == 5:\n            return 25\n        elif num == 6:\n            return 30\n        elif num == 7:\n            return 35\n        elif num == 8:\n            return 40\n        elif num == 9:\n            return 45\n        elif num == 10:\n            return 50\n        else:\n            return nth_polite(num - 1) + nth_polite(num - 2)\n\n    return nth_polite(n)\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n\n    if n == 1: \n        return \"1st\"\n    elif n == 2: \n        return \"2nd\"\n    elif n == 3: \n        return \"3rd\"\n    else: \n        return str(n) + \"th\"\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    # initialize variables\n    a = 1\n    b = 1\n    c = 1\n    count = 0\n    \n    # loop through values of a, b, and c\n    while count < n:\n        # if c is greater than b, swap a and c\n        if c > b:\n            a, c = c, a\n        # if a is greater than b and c is greater than a, swap b and c\n        elif a > b and c > a:\n            b, c = c, b\n        # increment count\n        count += 1\n    \n    # return c\n    return c"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input\"\n\n    polite_numbers = [1, 1, 2, 4, 6, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96]\n\n    return polite_numbers[n - 1]"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 1: \n        return 1\n    elif n % 2 == 0: \n        return 2 * is_polite(n//2)\n    else: \n        return 2 * is_polite((n-1)//2) + 1\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The nth polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef is_polite(n): \n    '''\n    This function takes a positive integer n and returns the nth polite number. \n    The nth polite number is defined as the smallest positive integer m such that m^n is prime. \n    For example, the nth polite number for 4 is 25 and the nth polite number for 5 is 105. \n    If there is no such m, then return -1.\n    '''\n    if n <= 0: \n        return -1\n    \n    # Find the nth prime number\n    count = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count == n:\n                break\n    \n    if count == n:\n        return i**n\n    else:\n        return -1"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    if n < 2:\n        return []\n    pairs = []\n    for i in range(n):\n        if i + 1 < n:\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize empty list to store pairs\n    pairs = []\n    # iterate over the list\n    for i in range(len(l1) - 1):\n        # append the pair to the list\n        pairs.append((l1[i], l1[i+1]))\n    # return the list of pairs\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a sum as input and returns the count of pairs whose sum is equal to'sum'.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes a list of numbers and a target sum as input and returns the number of pairs whose sum is equal to the target sum.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    This function takes two parameters, arr and sum, both of which are lists of integers.\n    The function counts the number of pairs whose sum is equal to the sum parameter passed to it.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    This function takes two lists as input and returns the difference between them.\n    \"\"\"\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns a new list that contains the elements present in \n    the first list but not in the second list.\n    '''\n    return [x for x in li1 if x not in li2]"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between the two lists.\n    '''\n    # initialize an empty list to store the difference between the two lists\n    diff_list = []\n    # loop through the two lists and compare each element\n    for elem in li1:\n        # if the element is not present in the second list, add it to the diff_list\n        if elem not in li2:\n            diff_list.append(elem)\n    # return the diff_list as the output\n    return diff_list"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(n):\n        num = 2 * (i + 1)\n        total += num ** 4\n    return total"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(1, n + 1, 2):\n        sum_of_powers += i ** 4\n    return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, 4 * n + 1, 4):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum_of_4th_powers = 0\n    for i in range(n):\n        num = i + 1\n        fourth_power = num ** 4\n        sum_of_4th_powers += fourth_power\n    return sum_of_4th_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n\n    # Initialize the sum variable to zero\n    sum = 0\n\n    # Loop through the first n odd numbers\n    for i in range(1, n+1, 2):\n        # Add the fourth power of the current odd number to the sum variable\n        sum += i**4\n\n    # Return the sum variable\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum_of_fourth_powers = 0\n    \n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n        \n    return sum_of_fourth_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n\n    # Initialize the sum and count of odd numbers\n    sum = 0\n    count = 0\n    \n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1):\n        \n        # Check if the current number is odd\n        if i % 2!= 0:\n            \n            # Calculate the fourth power of the current number and add it to the sum\n            sum += i**4\n            \n            # Increment the count of odd numbers\n            count += 1\n            \n    # Return the sum of fourth powers of odd numbers\n    return sum"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char.isspace():\n            continue\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            if not stack:\n                return False\n            if stack.pop()!= \"(\":\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if len(stack) == 0 or (char == ')' and stack[-1]!= '(') or (char == '}' and stack[-1]!= '{') or (char == ']' and stack[-1]!= '['):\n                return False\n            stack.pop()\n    if len(stack) > 0:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not.\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    stack = deque()\n    open_par = 0\n\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            top_char = stack.pop()\n            if top_char == '(':\n                open_par += 1\n            elif top_char == ')':\n                open_par -= 1\n            if open_par < 0:\n                return False\n\n    return open_par == 0"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char in ['(', '{', '[']:\n            stack.append(char)\n        elif char in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if char in ['(', '{']:\n                if top!= char:\n                    return False\n            elif char in [')', '}']:\n                if top == '(':\n                    continue\n                elif top == '[':\n                    if top == '[' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                elif top == '{':\n                    if top == '{' and stack[-1] == '{':\n                        stack.pop()\n                    else:\n                        return False\n    if stack:\n        return False\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_expression(exp):\n    stack = deque()\n    open_brackets = ['(', '{', '[']\n    close_brackets = [')', '}', ']']\n\n    for char in exp:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack:\n                return False\n            if close_brackets.index(char)!= open_brackets.index(stack.pop()):\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i, c in enumerate(exp):\n        if c == '(':\n            stack.append(i)\n        elif c == ')':\n            if not stack:\n                return False\n            j = stack.pop()\n            if j == 0:\n                return True\n            if j >= len(exp) or exp[j]!= '(':\n                return False\n    return True if not stack else False"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in ['(', '[', '{']:\n            stack.append(i)\n        elif i in [')', ']', '}']:\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if i in ['(', '{', '[']:\n                    if i!= top:\n                        return False\n                elif i in [')', '}', ']']:\n                    if i!= top:\n                        return False\n    return not stack"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function takes a string and an integer as input,\n    where the integer represents the length of the words that need to be removed.\n    It removes all the words with the given length from the string and returns the modified string.\n    \"\"\"\n    # Split the string into words and store them in a list\n    words = test_str.split()\n\n    # Initialize an empty string to store the modified words\n    modified_words = \"\"\n\n    # Loop through the words and remove the words with the given length\n    for word in words:\n        if len(word)!= K:\n            modified_words += word + \" \"\n\n    # Return the modified string\n    return modified_words[:-1]"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    \"\"\"\n    This function removes all the words with k length in the given string.\n    \"\"\"\n    # Split the string into words\n    words = test_str.split()\n    # Initialize an empty list to store the cleaned string\n    cleaned_str = []\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to K\n        if len(word) < K:\n            # If the length is less than K, add it to the cleaned string\n            cleaned_str.append(word)\n    # Join the cleaned string back into a single string and return it\n    return''.join(cleaned_str)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    i = 0\n    while i < len(words):\n        if len(words[i]) == K:\n            del words[i]\n        else:\n            i += 1\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    # split the string into words\n    words = test_str.split()\n    # initialize an empty list to store the new words\n    new_words = []\n    # loop through each word in the list\n    for word in words:\n        # check if the length of the word is not equal to K\n        if len(word)!= K:\n            # add the word to the new list if it is not of length K\n            new_words.append(word)\n    # join the new list of words into a string\n    result =''.join(new_words)\n    # return the new string\n    return result"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n\n    # Loop through each word in the list\n    for i in range(len(words)):\n        # If the length of the word is less than or equal to K, remove the word\n        if len(words[i]) <= K:\n            del words[i]\n\n    # Join the words into a single string\n    return''.join(words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n\n    # Convert the pattern to a regex pattern\n    pattern = re.compile(pattern)\n\n    # Find all the substrings in the text using the regex pattern\n    matches = pattern.findall(text)\n\n    # If there are no matches, return None\n    if not matches:\n        return None\n\n    # Find the index of the first match\n    first_match_index = text.index(matches[0])\n\n    # Find the length of the first match\n    first_match_length = len(matches[0])\n\n    # Loop through the rest of the matches\n    for match in matches[1:]:\n\n        # Find the index of the match\n        match_index = text.index(match)\n\n        # Calculate the position of the match within the text\n        position = (match_index - first_match_index) + first_match_length\n\n        # Return the position and the length of the match\n        return (position, len(match))\n\n    # If there are no matches, return None\n    return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start()\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Use the re.finditer function to find all occurrences of the pattern in the text.\n    matches = re.finditer(pattern, text)\n\n    # Check if there are any matches.\n    if len(matches) == 0:\n        return None\n    \n    # Iterate through the matches and print the results.\n    for match in matches:\n        # Print the index of the start of the match and the substring itself.\n        print(\"Match found at index {} with substring '{}'\".format(match.start(), match.group()))\n\n    # Return the matches list.\n    return matches"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # find all occurrences of the pattern in the text\n    match = re.findall(pattern, text)\n    \n    # check if there are any matches\n    if not match:\n        return None\n    \n    # find the position of the first match\n    position = match[0].start()\n    \n    # return a dictionary containing the match and its position\n    return {\"match\": match[0], \"position\": position}"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern, text)\n    if result:\n        for i in range(len(result)):\n            print(f\"Substring: {result[i]}, Occurrence: {result.count(result[i])}, Position: {i}\")\n    else:\n        print(\"No match found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = re.findall(pattern,text)\n    if not result:\n        return None\n    for i in result:\n        result[result.index(i)] = (i,text.find(i))\n    return result"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    # Initialize a counter for even indices\n    count_even = 0\n    # Loop through the list\n    for num in nums:\n        # If the index is odd, increment the counter\n        if num % 2!= 0:\n            count_even += 1\n            # If the counter becomes equal to the length of the list, return True\n            if count_even == len(nums):\n                return True\n    # If we reach this point, return False\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if sum([int(num) for num in nums[i:]]) % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    for i in range(1, len(nums), 2):\n        if not all(n % 2 for n in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    \"\"\"\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    \"\"\"\n    odd_indices = [i for i in range(len(nums)) if i % 2!= 0]\n    for index in odd_indices:\n        if not nums[index] % 2:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        if nums[i] % 2!= 0:\n            odd_count += 1\n        else:\n            break\n    return odd_count == 0"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    # Initialize a counter for odd positions\n    count = 0\n    \n    # Loop through each number in the list\n    for num in nums:\n        # Check if the current number is odd\n        if num % 2!= 0:\n            # If so, increment the counter\n            count += 1\n            \n    # Return True if every odd position has odd numbers, False otherwise\n    return count == len(nums) // 2"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1 and nums[i] % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0 and (nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if any(num % 2!= 0 for num in nums[i:]):\n            return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    for i in range(len(test_str)):\n        if i == 0 or i == len(test_str) - 1:\n            continue\n        if test_str[i-1] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and test_str[i] in vowels and test_str[i-1] not in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0:\n            if test_str[i] in vowels and test_str[i-1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)):\n        if i > 0 and i < len(test_str)-1:\n            if test_str[i-1] in vowels and test_str[i+1] in vowels:\n                count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a dictionary to store the elements in the list\n    element_dict = {}\n\n    # Iterate over the list and add each element to the dictionary\n    for element in arr:\n        if element in element_dict:\n            element_dict[element] += 1\n        else:\n            element_dict[element] = 1\n\n    # Initialize the sum variable to 0\n    sum_var = 0\n\n    # Iterate over the keys of the dictionary and add up the values\n    for key, value in element_dict.items():\n        if value == 1:\n            sum_var += int(key)\n\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n\n    # Initialize a dictionary to store the count of each element in the list\n    count_dict = {}\n\n    # Iterate through the list and update the count of each element in the dictionary\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Initialize a set to store the elements that have a count of 1 in the dictionary\n    unique_set = set()\n\n    # Iterate through the dictionary and add the unique elements to the set\n    for key, value in count_dict.items():\n        if value == 1:\n            unique_set.add(key)\n\n    # Calculate the sum of the unique elements\n    unique_sum = sum(unique_set)\n\n    # Return the sum of the unique elements\n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create an empty set to store the elements of the list\n    set_elements = set()\n    \n    # Loop through the elements of the list\n    for element in arr:\n        # Add the element to the set\n        set_elements.add(element)\n        \n    # Initialize the sum variable to 0\n    sum = 0\n    \n    # Loop through the elements of the set and add their value to the sum variable\n    for element in set_elements:\n        sum += element\n        \n    # Return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    This function takes a list as input and returns the sum of all the unique elements in the list.\n    If there are any duplicates, only the first occurrence of each element is considered.\n    '''\n    unique_elements = set(arr) # Create a set of unique elements in the list\n    sum_unique = sum(unique_elements) # Calculate the sum of unique elements\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of all non-repeated elements in the list.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_set = set(arr)\n    \n    # Calculate the sum of the unique elements in the list\n    unique_sum = sum(unique_set)\n    \n    return unique_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements.\n    \"\"\"\n    # Create a set to store unique elements in the list\n    unique_elements = set(arr)\n\n    # Calculate the sum of unique elements\n    sum_unique = sum(unique_elements)\n\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_set = set(arr)\n    \n    # initialize the sum variable to 0\n    sum_var = 0\n    \n    # iterate over the unique set and add its values to the sum variable\n    for num in unique_set:\n        sum_var += num\n    \n    # return the sum variable\n    return sum_var"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    # Calculate the sum of unique elements\n    sum_of_unique = sum(unique_elements)\n    # Return the sum of unique elements\n    return sum_of_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # initialize the sum variable to 0\n    sum = 0\n    # loop through the set and add the sum of its elements to the sum variable\n    for num in unique_set:\n        sum += num\n    # return the sum variable\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    # Create a set to store the non-repeated elements\n    set_arr = set(arr) \n    # Initialize a variable to store the sum of non-repeated elements\n    sum_arr = 0\n    # Iterate over the set of non-repeated elements and add their values to the sum\n    for num in set_arr: \n        sum_arr += num \n    # Return the sum of non-repeated elements\n    return sum_arr "
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if not key]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(lst) if key == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    packed_list = []\n    for key, group in groupby(list1):\n        if key == list1[0]:\n            group = list(group)\n        else:\n            group = list(group)\n            group.pop(0)\n            group = [list1[0]] + group\n        packed_list.append(group)\n    return packed_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    for key, group in groupby(list1):\n        if len(list(group)) > 1:\n            res.append(list(group))\n    return res"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(lst, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Use groupby() function to group the list elements based on their values\n    grouped_list = groupby(list1)\n\n    # Initialize an empty list to store the sublists\n    sublists = []\n\n    # Iterate over the grouped list\n    for key, group in grouped_list:\n        # Check if the next key in the grouped list is equal to the current key\n        if next(grouped_list, None)[0] == key:\n            # If the next key is equal to the current key, append the current group to the sublist\n            sublists[-1].extend(list(group))\n        else:\n            # If the next key is not equal to the current key, create a new sublist and append the current group to it\n            sublists.append(list(group))\n\n    # Return the list of sublists\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped = groupby(list1)\n    sublists = []\n    for key, group in grouped:\n        if key == list1[0]:\n            sublists.append([key])\n        else:\n            sublists[-1].append(key)\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return list(groupby(list1, lambda x: x))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns a new list of lists where each sublist contains\n    consecutive duplicates of the input list.\n    \"\"\"\n    return list(groupby(lst, key=lambda x: (x,)))"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # grouping the list by consecutive duplicates and packing them into sublists\n    packed_list = [list(group) for key, group in groupby(list1) if not key]\n    return packed_list"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        if isinstance(item, list):\n            for subitem in item:\n                if subitem in count_dict:\n                    count_dict[subitem] += 1\n                else:\n                    count_dict[subitem] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in count_dict:\n            count_dict[tuple_sublist] += 1\n        else:\n            count_dict[tuple_sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Convert the list to a set to remove duplicates\n    list1 = set(list1)\n    # Create an empty dictionary to store the counts\n    counts = {}\n    # Iterate through the set and count the number of occurrences of each tuple\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the counts dictionary\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    # Return the counts dictionary\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    count_dict = {}\n    \n    # Loop through each element of the list\n    for element in list1:\n        # Convert the element to a tuple\n        tuple_element = tuple(element)\n        # Check if the tuple is already in the dictionary\n        if tuple_element in count_dict:\n            # Increment the count of the tuple in the dictionary\n            count_dict[tuple_element] += 1\n        else:\n            # Otherwise, add the tuple to the dictionary with a count of 1\n            count_dict[tuple_element] = 1\n    \n    # Return the dictionary of unique sublists\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublist_count = {}\n    for i in list1:\n        if isinstance(i, list):\n            for j in i:\n                sublist_count[tuple(j)] = sublist_count.get(tuple(j), 0) + 1\n        else:\n            sublist_count[(i,)] = sublist_count.get((i,), 0) + 1\n    return sublist_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    sublists = {}\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            sublist = tuple(list1[k] for k in range(i, j))\n            if sublist not in sublists:\n                sublists[sublist] = 1\n            else:\n                sublists[sublist] += 1\n    return sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Define an empty dictionary to store the counts\n    counts = {}\n    # Loop through each element of the list\n    for elem in list1:\n        # Check if the element is a list\n        if isinstance(elem, list):\n            # Convert the list to a tuple\n            tuple_elem = tuple(elem)\n            # Check if the tuple is already in the dictionary\n            if tuple_elem in counts:\n                # Increment the count of the tuple\n                counts[tuple_elem] += 1\n            else:\n                # Add the tuple to the dictionary with a count of 1\n                counts[tuple_elem] = 1\n    # Return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_sublist_dict = {}\n    for sublist in list1:\n        if sublist not in unique_sublist_dict:\n            unique_sublist_dict[sublist] = 1\n        else:\n            unique_sublist_dict[sublist] += 1\n    return unique_sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the number of occurrences of each tuple\n    count_dict = {}\n\n    # Loop through each list in the input list\n    for sublist in list1:\n        # Convert the sublist to a tuple and add it to the count_dict\n        if tuple(sublist) in count_dict:\n            count_dict[tuple(sublist)] += 1\n        else:\n            count_dict[tuple(sublist)] = 1\n\n    # Return the count_dict\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary where every list is turned to a tuple and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    unique_lsts = {}\n    for i in range(len(lst)):\n        unique_lsts[tuple(lst[i])] = unique_lsts.get(tuple(lst[i]), 0) + 1\n    return unique_lsts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Create a list of tuples containing the sum and the tuple itself\n    sums = [(sum(comb), tuple(comb)) for comb in combinations(test_list, r=2)]\n    return sums"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            print(tuple(sorted(test_list[i])), tuple(sorted(test_list[j])))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # convert the input list to set to remove duplicates\n    unique_tuples = set(test_list)\n    # sort the tuples in ascending order\n    sorted_tuples = sorted(unique_tuples)\n    # initialize the result list\n    result = []\n    # loop through all possible combinations of tuples\n    for i in range(len(sorted_tuples)):\n        for j in range(i+1, len(sorted_tuples)):\n            # check if the sum of the two tuples equals the first tuple\n            if sorted_tuples[i][0] + sorted_tuples[j][0] == sorted_tuples[i][1]:\n                # create a tuple of the two tuples as a pair and add it to the result list\n                pair = (sorted_tuples[i], sorted_tuples[j])\n                result.append(pair)\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initialize an empty list to store the combinations\n    combinations_list = []\n    # sort the given list\n    test_list.sort()\n    # use itertools.combinations() to generate all possible combinations of sums with tuples in the given list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                if sum(test_list[i:j+1]) == sum(test_list[j:k+1]) == sum(test_list[k:len(test_list)]):\n                    # add the combination to the list\n                    combinations_list.append((test_list[i:j+1], test_list[j:k+1], test_list[k:len(test_list)]))\n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    min_sum = min(test_list)\n    max_sum = max(test_list)\n\n    for i in range(min_sum, max_sum+1):\n        combinations_list = []\n        for tup in combinations(test_list, r=2):\n            if sum(tup) == i:\n                combinations_list.append(tup)\n\n        if combinations_list:\n            print(f\"Combinations of sum {i}: {combinations_list}\")"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples and returns a list of all possible combinations of sums with tuples from the list.\n    '''\n    # Create a dictionary to store the indices of tuples in the list\n    index_dict = {}\n    for i in range(len(test_list)):\n        index_dict[tuple(test_list[i])] = i\n    \n    # Iterate over all possible pairs of tuples from the list\n    comb_list = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # Find the sum of the two tuples\n            sum_pair = tuple(sorted(test_list[i] + test_list[j]))\n            # If the sum is in the dictionary, add the combination to the list\n            if sum_pair in index_dict:\n                comb_list.append((tuple(sorted(test_list[i])), tuple(sorted(test_list[j]))))\n                \n    return comb_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Get the maximum sum from the given tuple list\n    max_sum = max(sum(x) for x in test_list)\n    \n    # Create a list of tuples with sum as the first element and the tuple as the second element\n    tuples_list = [(sum(x), x) for x in test_list]\n    \n    # Sort the list of tuples in ascending order of the sum\n    tuples_list.sort()\n    \n    # Create a list to store the combinations of sums with tuples\n    combinations_list = []\n    \n    # Iterate through the sorted list of tuples\n    for i in range(len(tuples_list)):\n        # Create a combination of the current tuple with the rest of the tuples in the list\n        for comb in combinations(tuples_list[i:], i):\n            # Check if the sum of the combination is equal to the maximum sum\n            if sum(comb[0][1]) == max_sum:\n                combinations_list.append(comb)\n    \n    # Return the list of combinations\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    \"\"\"\n    This function takes a tuple list as input and returns all the combinations of sums of tuples in the list.\n\n    Args:\n    test_list (list): A list of tuples.\n\n    Returns:\n    list: A list of tuples containing all the combinations of sums of tuples in the given tuple list.\n\n    \"\"\"\n\n    # Create a list of tuples containing all the possible sums of tuples in the list.\n    all_sums = [(a, b) for a in test_list for b in test_list]\n\n    # Use itertools.combinations() function to generate all combinations of sums of tuples in the list.\n    combinations_list = list(combinations(all_sums, len(test_list)))\n\n    # Filter out the combinations with duplicate tuples.\n    unique_combinations_list = []\n    for combination in combinations_list:\n        if combination not in unique_combinations_list:\n            unique_combinations_list.append(combination)\n\n    return unique_combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # sort the list in ascending order\n    test_list.sort()\n\n    # initialize the result list\n    result_list = []\n\n    # iterate over all pairs of adjacent elements in the list\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            # check if the sum of the current pair of elements is equal to the sum of the first element and the last element of the current pair of elements\n            if (test_list[i][0] + test_list[j][0]) == (test_list[i][1] + test_list[j][1]):\n                # create a new combination tuple and append it to the result list\n                combination = (test_list[i], test_list[j])\n                result_list.append(combination)\n\n    # return the result list of combinations\n    return result_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # initializing an empty list to store the combinations\n    combinations_list = []\n    # initializing a variable to store the sum of the current combination\n    current_sum = 0\n    # initializing a dictionary to store the remaining tuples in the list\n    remaining_dict = {}\n\n    # loop through each tuple in the given list\n    for i in range(len(test_list)):\n        # check if the current tuple is in the dictionary\n        if test_list[i] not in remaining_dict:\n            # if not, add it to the dictionary and initialize the remaining sum to be the sum of the current tuple and the index of the current tuple\n            remaining_dict[test_list[i]] = [i, test_list[i][0]]\n            current_sum += test_list[i][0]\n        else:\n            # if it is, update the remaining sum to be the difference between the current sum and the index of the current tuple\n            remaining_dict[test_list[i]][1] = remaining_dict[test_list[i]][0] - i\n            # add the current tuple to the list of combinations\n            combinations_list.append(test_list[i])\n            # check if the remaining sum is 0\n            if current_sum == 0:\n                break\n\n    # return the list of combinations\n    return combinations_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    # find the greatest common divisor of the number and itself \n    gcd = math.gcd(n, n) \n    # find the count of divisors of the number \n    count = math.factorial(int(math.log(n, gcd))) \n    # count the even divisors \n    even_count = count - count // 2 \n    # check if the count of even divisors is odd or even \n    if even_count % 2 == 0: \n        return \"The count of divisors is even.\" \n    else: \n        return \"The count of divisors is odd.\" "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n // i!= i:\n                count += 1\n    if count == 0:\n        count = 1\n    return count"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Using Euclidean algorithm to find the number of divisors\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisor_count += 1\n\n    if n > 1:\n        divisor_count += 1\n\n    # Printing the result\n    if divisor_count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n            else:\n                continue\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 2\n            n //= i\n    if n > 1:\n        count += 1\n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. \n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            count += 1 \n            if count > 2: \n                return False \n            else: \n                continue \n    if n > 1: \n        count += 1 \n    return count % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n\n    # Calculate the count of divisors of n\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n\n    # Check whether the count of divisors is even or odd\n    if count % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math \n\ndef count_divisors(n): \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n))+1): \n        if n % i == 0: \n            divisor_count += 1\n            if n // i!= i: \n                divisor_count += 1 \n    if n > 1: \n        divisor_count += 1 \n    return divisor_count % 2 == 0 "
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and n % n == 0:\n        count -= 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    This function takes a number as input and returns True if the count of divisors is even, False otherwise. \n    The count of divisors of a number n is the number of integers less than or equal to n that divide evenly into n. \n    A number n is said to be perfect if there are no divisors other than 1 and n.\n    '''\n\n    # calculate the sum of all integers from 1 to n\n    total = sum(range(1, n+1))\n\n    # calculate the sum of the integers from 1 to n that are divisors of n\n    div_sum = sum(range(1, int(math.sqrt(n))+1))\n\n    # check whether the count of divisors is even\n    if div_sum % 2 == 0 and total % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            total += arr[j-1]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n + 1)\n    prefix_sum[0] = 0\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n    sum_odd_length_subarrays = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length_subarrays += prefix_sum[j] - prefix_sum[i - 1]\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    odd_sum = 0\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if i % 2 == 1 and i > 0:\n            odd_sum += current_sum\n            current_sum = 0\n\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n\n    sum = 0\n    n = len(arr)\n\n    # Traverse through the array\n    for i in range(n):\n\n        # Check if the current element is odd\n        if i % 2!= 0:\n\n            # Initialize a variable to store the sum of subarrays\n            sub_sum = 0\n\n            # Traverse through the remaining elements in the array\n            for j in range(i, n):\n\n                # If the current element is odd, add it to the sum\n                if j % 2!= 0:\n                    sub_sum += arr[j]\n\n                # If the subarray sum is odd, add it to the total sum\n                if sub_sum % 2!= 0:\n                    sum += sub_sum\n\n            # Add the final sum of the subarray to the total sum\n            sum += sub_sum\n\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    if not arr:  # if the list is empty\n        return 0\n\n    # Initialize the sum to zero\n    total_sum = 0\n\n    # Iterate through the list and keep track of the current subarray\n    current_subarray = []\n    for i in range(len(arr)):\n        # If the current element is odd\n        if i % 2!= 0:\n            current_subarray.append(arr[i])\n\n        # If the current element is even or the subarray is complete\n        else:\n            total_sum += sum(current_subarray)\n            current_subarray = []\n\n    # Return the total sum of odd length subarrays\n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n\n    for i in range(n):\n        # check if the current element is odd\n        if arr[i] % 2!= 0:\n            # check if the current subarray is odd length\n            if i == 0 or i == n-1:\n                result += arr[i]\n            elif arr[i-1] % 2!= 0 and arr[i+1] % 2!= 0:\n                result += arr[i]\n\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_arr = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if i+j-1<len(arr):\n                sum_arr.append(sum(arr[i:i+j]))\n    return sum(sum_arr)"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays.\n    '''\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n+1, 2):\n            total += arr[j-1] - arr[i]\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1, 2):\n            if j-i+1%2==1:\n                sum_odd_length += arr[j-1]\n    return sum_odd_length"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize variables\n    count = 0\n    sum_odd = 0\n    max_length = 0\n    max_sum = 0\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        # Check if the current element is odd length\n        if i % 2!= 0:\n            # Add the current element to the sum\n            sum_odd += arr[i]\n            \n            # Check if the sum of odd length subarrays is greater than the previous maximum sum\n            if sum_odd > max_sum:\n                # Update the maximum sum and count of odd length subarrays\n                max_sum = sum_odd\n                count = 1\n            # Check if the current sum of odd length subarrays is greater than the previous maximum sum\n            elif sum_odd == max_sum:\n                # Increment the count of odd length subarrays\n                count += 1\n    \n    # Return the sum of all odd length subarrays\n    return max_sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert rgb to xyz color space\n    x = (r / 255.0) * 1.055\n    y = (g / 255.0) * 1.055\n    z = (b / 255.0) * 1.055\n    \n    # Convert xyz to xyY color space\n    y_bar = (y / 1.055) + (1.0 / 3.0)\n    \n    x_prime = x / y_bar\n    y_prime = y / y_bar\n    z_prime = z / y_bar\n    \n    # Convert xyY to xy color space\n    x_bar = x_prime + (1.0 / 3.0)\n    y_bar = y_prime\n    z_bar = z_prime\n    \n    # Convert xy color space to polar coordinates\n    r_prime = (x_prime / (3.0 * (x_bar + y_bar)))\n    g_prime = (2.0 * y_prime / (3.0 * (x_bar + y_bar))) - (1.0 / 3.0)\n    b_prime = z_prime\n    \n    # Convert polar coordinates to hue, saturation, and value\n    h = 0.0\n    s = 0.0\n    v = 0.0\n    \n    if r_prime + g_prime + b_prime > 0.0:\n        max_value = max(r_prime, g_prime, b_prime)\n        min_value = min(r_prime, g_prime, b_prime)\n        \n        if max_value == r_prime:\n            h = 60.0 * (((g_prime - b_prime) / (max_value - min_value)))\n        elif max_value == g_prime:\n            h = 60.0 * (((b_prime - r_prime) / (max_value - min_value)) + 2.0)\n        else:\n            h = 60.0 * (((r_prime - g_prime) / (max_value - min_value)) + 4.0)\n        \n        h = h % 360.0\n        \n        s = (max_value - min_value) / max_value\n        \n        if max_value == 0.0:\n            v = 0.0\n        else:\n            v = max_value\n        \n        if s == 0.0:\n            v = max_value\n    else:\n        v = 0.0\n        s = 0.0\n    \n    # Convert hue, saturation, and value to hsv color space\n    h_prime = h / 60.0\n    s_prime = s * max(v, 1.0 - max(v, 1.0 - v))\n    v_prime = v * 1.0\n    v_prime_prime = v_prime * (1.0 - s_prime)\n    \n    if h_prime == 0.0:\n        r_prime = v_prime_prime\n        g_prime = t_prime\n        b_prime = 0.0\n    elif h_prime == 1.0:\n        r_prime = t_prime\n        g_prime = v_prime_prime\n        b_prime = 0.0\n    elif h_prime == 2.0:\n        r_prime = 0.0\n        g_prime = v_prime_prime\n        b_prime = t_prime\n    elif h_prime == 3.0:\n        r_prime = 0.0\n        g_prime = t_prime\n        b_prime = v_prime_prime\n    elif h_prime == 4.0:\n        r_prime = t_prime\n        g_prime = 0.0\n        b_prime = v_prime_prime\n    else:\n        r_prime = v_prime_prime\n        g_prime = 0.0\n        b_prime = t_prime\n    \n    # Convert hsv color space to rgb color space\n    r_final = 255.0 * r_prime\n    g_final = 255.0 * g_prime\n    b_final = 255.0 * b_prime\n    \n    return r_final, g_final, b_final"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    # Calculate maximum and minimum values for each channel\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Calculate difference between maximum and minimum values\n    diff = max_val - min_val\n    \n    # Calculate saturation value\n    if max_val == 0:\n        h = 0\n        s = 0\n    else:\n        s = diff / max_val\n    \n    # Calculate hue value\n    if max_val == r:\n        h = (g - b) / diff\n    elif max_val == g:\n        h = 2 + (b - r) / diff\n    else:\n        h = 4 + (r - g) / diff\n    \n    # Normalize hue value to range 0-360\n    h = h * 60\n    if h < 0:\n        h = h + 360\n    \n    # Calculate value and saturation values\n    v = max_val\n    s = s * 100\n    \n    # Round off values and return\n    return (int(h), int(s), int(v))"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n\n    # Find the maximum and minimum values among the three RGB components\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n\n    # Find the difference between the maximum and minimum values\n    diff = max_value - min_value\n\n    # Calculate the value of the Hue\n    if max_value == r:\n        hue = (g - b) / diff\n    elif max_value == g:\n        hue = 2 + (b - r) / diff\n    else:\n        hue = 4 + (r - g) / diff\n\n    # Normalize the hue value to the interval [0, 6]\n    hue = hue % 6\n\n    # Calculate the value of the Saturation\n    if max_value == 0:\n        saturation = 0\n    else:\n        saturation = diff / max_value\n\n    # Calculate the value of the Value\n    value = max_value\n\n    # Return the converted values in a tuple\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == min_val:\n        h = 0\n    else:\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n\n        h = h / 6\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts RGB color to HSV color.\n    \"\"\"\n    # Normalize the input RGB values to the range [0, 255]\n    r = r / 255.0\n    g = g / 255.0\n    b = b / 255.0\n\n    # Compute the maximum and minimum values of the RGB color\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n\n    # Compute the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Compute the hue value in degrees\n    if diff == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / diff) % 6\n    elif max_val == g:\n        hue = (b - r) / diff + 2\n    else:\n        hue = (r - g) / diff + 4\n\n    # Compute the saturation and value values in percentages\n    if diff == 0:\n        saturation = 0\n    elif max_val == r:\n        saturation = (diff / (max_val + min_val)) * 100\n    elif max_val == g:\n        saturation = (diff / (max_val + min_val)) * 100\n    else:\n        saturation = (diff / (max_val + min_val)) * 100\n\n    # Compute the value in percentages\n    value = (max_val * 100)\n\n    # Convert the hue value in degrees to a float value\n    hue = hue * 60\n\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert an RGB color value to HSV color value.\n    Conversion formula:\n    H = degrees mod 360\n    S = (V - min(V, R, G, B)) / (max(V, R, G, B) - min(V, R, G, B))\n    V = max(V, R, G, B)\n    \"\"\"\n\n    # Convert RGB to HSV\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    hsv_values = []\n\n    hsv_values.append((max_val - min_val) / max_val)\n    hsv_values.append((max_val, max_val, max_val - min_val) if max_val == min_val else (max_val - r) / (max_val - min_val))\n    hsv_values.append((max_val, max_val, max_val - min_val) if max_val == min_val else (max_val - g) / (max_val - min_val))\n    hsv_values.append((max_val, max_val, max_val - min_val) if max_val == min_val else (max_val - b) / (max_val - min_val))\n\n    h = 0\n    s = 0\n    v = max_val\n\n    hsv_values[0] *= 60  # Convert to degrees\n\n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / (max_val - min_val) * 60\n    elif max_val == g:\n        h = (b - r) / (max_val - min_val) * 60 + 120\n    else:\n        h = (r - g) / (max_val - min_val) * 60 + 240\n\n    s *= 100\n    v *= 100\n\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n    \"\"\"\n    r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    h = 0\n    s = 0\n    v = max_value\n    if delta == 0:\n        h = 0\n    elif max_value == r:\n        h = (g - b) / delta\n    elif max_value == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    h = h / 6 if h < 1 else h\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_value\n    return round(h, 2), round(s, 2), round(v, 2)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to float values\n    r, g, b = float(r), float(g), float(b)\n    \n    # Convert r, g, b to range 0-255\n    r, g, b = r/255, g/255, b/255\n    \n    # Get max and min values\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    \n    # Calculate saturation and value\n    if max_value == min_value:\n        h = 0\n        s = 0\n    else:\n        delta = max_value - min_value\n        s = delta / max_value\n        if r == max_value:\n            h = (g - b) / delta\n        elif g == max_value:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        h = h / 6\n        \n        if h < 0:\n            h += 1\n            \n    # Convert h, s, and v to range 0-1\n    h, s, v = h, s, max_value\n    \n    # Calculate hue value\n    if s == 0:\n        h = 0\n    elif h == 1:\n        h = 0\n    elif h > 1:\n        h = 0\n    \n    # Return h, s, and v\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert r, g, b to floats and normalize to 0-1\n    r, g, b = r/255.0, g/255.0, b/255.0\n\n    # Convert r, g, b to floats and normalize to 0-1\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    # Convert rgb to hsv\n    h = 0\n    s = 0\n    v = max_val\n\n    if delta == 0:\n        h = 0\n    elif max_val == r:\n        h = 60 * ((g-b)/delta) % 6\n    elif max_val == g:\n        h = 60 * ((b-r)/delta) + 120\n    else:\n        h = 60 * ((r-g)/delta) + 240\n\n    if h < 0:\n        h += 360\n\n    # Convert hsv back to 0-1\n    h = h/360.0\n    s = s/delta\n    v = v/delta\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = r / 255.0  # Convert from 0-255 to 0.0-1.0 range\n    g = g / 255.0\n    b = b / 255.0\n    \n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    h = 0\n    s = 0\n    v = max_val\n    \n    delta = max_val - min_val\n    \n    if max_val == min_val:\n        h = 0\n    elif max_val == r:\n        h = (g - b) / delta\n    elif max_val == g:\n        h = 2 + (b - r) / delta\n    else:\n        h = 4 + (r - g) / delta\n    \n    h = h / 6\n    \n    s = delta / max_val\n    \n    if s == 0:\n        v = 0\n    elif delta == 0:\n        v = 0\n    else:\n        v = max_val\n    \n    hsv = [h, s, v]\n    \n    return hsv"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    \n    for i in list1:\n        if i % 2 == 0:\n            even_num += i\n        else:\n            odd_num += i\n            \n    product = even_num * odd_num\n    \n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of first even and odd numbers of a list.\n\n    Args:\n    lst: A list of integers.\n\n    Returns:\n    The product of the first even and odd numbers of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    return even_count * odd_count\n"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for i in list1:\n        if i % 2 == 0:\n            even_count += 1\n            even_product *= i\n        else:\n            odd_count += 1\n            odd_product *= i\n\n    if even_count == 0 or odd_count == 0:\n        return \"No even or odd number in the list\"\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    even_sum = 0\n    odd_sum = 0\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_sum += num\n        else:\n            odd_count += 1\n            odd_sum += num\n            \n    product = even_count * odd_count\n    \n    if product == 0:\n        return None\n    else:\n        return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of first even and odd numbers in the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return even_count * odd_count"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(lst):\n    even_sum = 0\n    odd_sum = 0\n\n    for num in lst:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    product = even_count * odd_count\n    return product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd number of the list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    result = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n            \n        result *= min(even_count, odd_count)\n            \n    return result"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of first even and odd number of the list.\n    '''\n    even_num = odd_num = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_num *= num\n        else:\n            odd_num *= num\n    return even_num * odd_num\n"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = []\n    for char in test_str:\n        if char.isdigit():\n            result.append(int(char))\n        else:\n            return None\n    return tuple(result)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # initialize an empty list to store the integer values\n    int_list = []\n    \n    # split the string at commas to get the tuple values\n    values = test_str.split(',')\n    \n    # iterate over the values to convert each to an integer\n    for value in values:\n        # check if the value is a valid integer\n        try:\n            int_value = int(value)\n            int_list.append(int_value)\n        except ValueError:\n            # if the value is not a valid integer, print an error message and move on to the next value\n            print(f\"Error: {value} is not a valid integer\")\n    \n    # return the integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.replace(\"(\", \"\").replace(\")\", \"\").replace(\",\", \" \").split()))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # check if input is a tuple string\n    if isinstance(test_str, tuple) and all(isinstance(x, str) for x in test_str):\n        # convert tuple string to integer tuple\n        test_int = tuple(int(x) for x in test_str)\n        return test_int\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to tuple\n    test_tuple = tuple(test_str.split(','))\n    \n    # Convert the tuple to integer tuple\n    test_int_tuple = tuple(int(x) for x in test_tuple)\n    \n    return test_int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into individual characters\n    char_list = list(test_str)\n    \n    # Define a function to convert a character to an integer\n    def char_to_int(char):\n        try:\n            return int(char)\n        except ValueError:\n            return None\n    \n    # Convert each character to an integer and add it to a list\n    int_list = [char_to_int(char) for char in char_list]\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.replace('[', '').replace(']', '').split(', ')\n    int_tuple = tuple(int(i) for i in tuple_str)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a tuple\n    test_tuple = tuple(test_str.split(','))\n\n    # Convert the tuple to an integer tuple\n    int_tuple = tuple(int(x) for x in test_tuple)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Define the pattern for matching strings\n    pattern = r'\\((\\d+),(\\d+)\\)'\n\n    # Use re.findall() to find all matches of the pattern in test_str\n    matches = re.findall(pattern, test_str)\n\n    # Convert each match to a tuple of integers and return the result\n    return tuple(map(int, matches[0]))"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    str_list = test_str.split(',')\n    # Convert each string in the list to an integer\n    int_list = [int(i) for i in str_list]\n    # Convert the list of integers to a tuple\n    int_tuple = tuple(int_list)\n    # Return the tuple\n    return int_tuple"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Use bisect_right to find the index where x should be inserted\n    index = bisect.bisect_right(a, x)\n\n    # If x is already present in the list, its insertion point will be index\n    if index < len(a) and a[index] == x:\n        return index\n\n    # Otherwise, the insertion point is the index of the last element greater than x\n    return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index == len(a):\n        return index\n    if a[index] == x:\n        return index\n    return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)  # find the index of the rightmost element greater than or equal to x\n    if i < len(a) and a[i] == x:  # if the element at the rightmost index is equal to x, it's the right insertion point\n        return i\n    elif i == len(a):  # if we've exhausted the list, the insertion point is len(a)\n        return i\n    else:  # otherwise, the insertion point is at index i+1\n        return i + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize the left and right indices to the start and end of the list, respectively\n    left = 0\n    right = len(a) - 1\n\n    # loop until the left index is less than or equal to the right index\n    while left <= right:\n        # calculate the midpoint index\n        mid = (left + right) // 2\n\n        # if the midpoint value is less than the specified value, update the left index to mid + 1\n        if a[mid] < x:\n            left = mid + 1\n        # if the midpoint value is greater than or equal to the specified value, update the right index to mid - 1\n        else:\n            right = mid - 1\n\n    # return the index of the right insertion point\n    return right + 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    This function takes in a sorted list a and a value x and returns the index of the right insertion point where x should be inserted to maintain the sorted order.\n\n    Args:\n    a (list): A sorted list of numbers.\n    x (int): A number that needs to be inserted into the list.\n\n    Returns:\n    int: The index of the right insertion point where x should be inserted to maintain the sorted order.\n    \"\"\"\n\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the element x is already present in the list, return the current index of the element\n    if x == a[right]:\n        return right\n\n    # If the element x should be inserted to maintain the sorted order, return the right insertion point\n    elif x > a[right]:\n        return right + 1\n\n    # If the element x should be inserted to maintain the sorted order, return the right insertion point\n    else:\n        return right"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(?=.{3}b)'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a[b]{3}'\n    return re.search(pattern, text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a\\w{3}b')\n    return pattern.search(text)"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a\\w{3}b'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    if match:\n        print(\"Found a match!\")\n        print(\"Match found at index:\", match.start())\n        print(\"Match found:\", match.group())\n    else:\n        print(\"No match found!\")"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"(?<=a)b{3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    # Convert the list to a tuple and join it with the given string\n    new_tuple = tuple(str(elem) for elem in test_list)\n    new_tuple = test_str.join(new_tuple)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert list to tuple\n    new_list = tuple(test_list)\n    # Convert string to tuple\n    new_str = tuple(test_str)\n    # Combine both tuples\n    combined_tuple = new_list + new_str\n    return combined_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_list, test_str)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_str.split()) + test_list\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the string to a list of characters\n    test_list = list(test_str)\n    # create a new tuple by joining the list with the given string\n    new_tuple = tuple(test_list)\n    # return the new tuple\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple_list = test_list + tuple(test_str)\n    return new_tuple_list"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tup = (test_str, *test_list)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Convert the string to a list of characters\n    test_list = list(test_str)\n    \n    # Add the first character from the list to the end of the tuple\n    test_tuple = tuple(test_list + [test_list[0]])\n    \n    return test_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # convert the list to a tuple\n    test_tuple = tuple(test_list)\n    # concatenate the string and tuple\n    new_tuple = (test_str,) + test_tuple\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n                if count > 1:\n                    return False\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n    if even_count == len(nums) / 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2!= 0:\n            print(\"Index\", i, \"contains an odd number.\")\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if len(nums[i]) % 2 == 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            count += 1\n    return count == len(nums)"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    \n    for i in range(len(nums)):\n        if i % 2 == 1:\n            if i % 2 == 1:\n                if i+1 < len(nums):\n                    if nums[i] % 2 == 1 and nums[i+1] % 2 == 1:\n                        print(\"The even index\", i, \"contains even numbers.\")\n                    else:\n                        print(\"The even index\", i, \"does not contain even numbers.\")\n                else:\n                    print(\"The even index\", i, \"is the last element.\")\n            else:\n                if nums[i] % 2 == 1:\n                    print(\"The even index\", i, \"contains even numbers.\")\n                else:\n                    print(\"The even index\", i, \"does not contain even numbers.\")\n        else:\n            if nums[i] % 2 == 1:\n                print(\"The even index\", i, \"contains even numbers.\")\n            else:\n                print(\"The even index\", i, \"does not contain even numbers.\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                print(f\"The even index {i} contains an even number: {nums[i]}\")\n            else:\n                print(f\"The even index {i} contains an odd number: {nums[i]}\")\n        else:\n            print(f\"The odd index {i} contains a number: {nums[i]}\")"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:i+2])) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    n = len(nums)\n    for i in range(0, n, 2):\n        if nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_tup = []\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return [item for sublist in test_tup for item in sublist]"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    # check if the given tuple is a tuple\n    if isinstance(test_tup, tuple):\n        # check if the tuple is empty\n        if not test_tup:\n            return ()\n        # check if the tuple has only one element\n        elif len(test_tup) == 1:\n            return test_tup[0]\n        # check if the tuple has more than one element\n        else:\n            # create an empty list to store the elements of the tuple\n            result = []\n            # loop through the elements of the tuple\n            for element in test_tup:\n                # recursively remove tuples from each element of the tuple\n                result.extend(remove_nested(element))\n            # return the result list\n            return tuple(result)\n    else:\n        # the given tuple is not a tuple\n        return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # use a list comprehension to remove nested tuples from the list\n    new_list = [item for sublist in test_tup for item in sublist]\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    result = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_tup = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            new_tup.append(item)\n    return new_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            new_list.extend(item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(elem for tup in test_tup for elem in tup if not isinstance(elem, tuple))"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    while isinstance(test_tup, tuple):\n        test_tup = list(test_tup)\n    return test_tup"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    count = 0\n    for element in input_list:\n        if isinstance(element, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list):\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    \"\"\"\n    Write a python function to count the number of lists in a given number of lists.\n    \"\"\"\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_lists(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr: list\n        The sorted array.\n    x: any\n        The element to search for.\n\n    Returns:\n    int\n        The last position of x in arr, or -1 if x is not in arr.\n    \"\"\"\n\n    # Find the last position of x using binary search\n    lo, hi = 0, len(arr) - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n\n    # x not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    This function takes a sorted array and an element x as input, and returns the index of the last occurrence of x in the array.\n    If x is not present in the array, it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if arr[left] == x:\n        return left\n    else:\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n\n    # Binary search for the x\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            # Found x, now find its position in the array\n            i = mid\n            while i < len(arr) and arr[i] == x:\n                i += 1\n            return i - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    '''\n    This function takes two parameters:\n        arr: the sorted array of integers.\n        x: the element to find its last position in the array.\n\n    This function returns the last position of x in the array.\n\n    The function first checks if x is already in the array. If it is, then it returns its index.\n    If x is not in the array, then the function uses binary search to find the last position of x in the array.\n    The binary search function is implemented in the last function.\n    '''\n\n    if x in arr:\n        return arr.index(x)\n    else:\n        left, right = 0, len(arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if arr[mid] == x:\n                right = mid - 1\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr, x):\n    '''\n    This function finds the last position of an element in a sorted array.\n    The function takes two arguments: the sorted array and the element to be searched.\n    The function returns the last position of the element if it is found, else it returns -1.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return right"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n\n    :param arr: a sorted array\n    :type arr: list\n    :param x: the element to find the last position of\n    :type x: any\n    :return: the last position of the element in the array, or -1 if the element is not in the array\n    :rtype: int\n    \"\"\"\n    if not arr:\n        return -1\n    elif x < arr[0]:\n        return -1\n    elif x > arr[-1]:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    Returns the last position of an element in a sorted array.\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Find the first occurrence of x in the array\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            left = mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If x is not in the array, return -1\n    if left == len(arr):\n        return -1\n\n    # Find the last occurrence of x in the array\n    while left > 0 and arr[left - 1] == x:\n        left -= 1\n\n    return left - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if not arr or not arr[0]:\n        return None\n    last_pos = None\n    for i in range(len(arr)):\n        if arr[i] == x:\n            last_pos = i\n            break\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # Initialize the last position to -1\n    last_position = -1\n\n    # Traverse through the array\n    for i in range(len(arr)):\n        # If the current element is equal to x\n        if arr[i] == x:\n            # Update the last position to i\n            last_position = i\n\n    # Return the last position\n    return last_position"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n\n    while l <= r:\n        mid = (l + r) // 2\n\n        if arr[mid] == x:\n            if mid == 0 or arr[mid-1]!= x:\n                return mid\n            else:\n                l = mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b$'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a(.*)b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return \"No match found\"\n\ntext = \"This is a string with an 'a' followed by anything ending in 'b'.\"\nresult = text_starta_endb(text)\nprint(result)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return 'No match found'"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^\\n]*)(?=b)'\n    return re.search(pattern, text).group(0)"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a\\w*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a.*b')\n    match = pattern.match(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'a[^b]*b')\n    matches = pattern.findall(text)\n    if matches:\n        return matches[0]\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    return bool(re.match(pattern, text))"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict.values():\n        sum += item\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # initialize sum variable\n    sum = 0\n    \n    # iterate over range from 1 to n\n    for i in range(1, n+1):\n        # if i is odd, add it to sum\n        if i % 2!= 0:\n            sum += i\n    \n    # return the sum\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n\n    # initialize sum to 0\n    total = 0\n\n    # loop through odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        total += i\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum_odd = 0\n    while l <= r:\n        if l % 2!= 0:\n            sum_odd += l\n        l += 1\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    total = 0\n    for num in range(l, r+1):\n        if num % 2 == 1:\n            total += num\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n    elif n < 1:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1:\n        return 1\n    else:\n        return sum_odd(n-2) + n-1\n"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = 1, n\n    sum_odd = 0\n    \n    while l <= r:\n        if l % 2 == 1:\n            sum_odd += l\n        l += 1\n        \n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    \"\"\"\n    This function takes a single argument `n`, which is the upper limit of the range.\n    It calculates the sum of all odd natural numbers within that range and returns it.\n    \"\"\"\n    # initialize the sum to 0\n    sum_of_odds = 0\n    \n    # loop through all integers from 1 to n\n    for i in range(1, n+1):\n        # if the current integer is odd\n        if i % 2!= 0:\n            # add it to the sum\n            sum_of_odds += i\n            \n    # return the sum\n    return sum_of_odds"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    # initialize the sum variable to 0\n    total = 0\n\n    # loop through each element of the array\n    for num in arr:\n        # add each element to the total sum\n        total += num\n\n    # return the total sum\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # If d is 0, return n\n    if d == 0:\n        return n\n    \n    # Convert n to a binary string\n    binary_string = bin(n)[2:]\n    \n    # Pad the binary string with leading zeros\n    padded_string = '0'*(32-len(binary_string)) + binary_string\n    \n    # Calculate the number of bits to rotate\n    num_bits_to_rotate = d % 32\n    \n    # Rotate the binary string to the left\n    rotated_string = padded_string[-num_bits_to_rotate:] + padded_string[:-num_bits_to_rotate]\n    \n    # Convert the rotated binary string back to an integer\n    rotated_integer = int(rotated_string, 2)\n    \n    return rotated_integer"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    # Convert the binary representation of n to a list of digits\n    bin_list = [int(digit) for digit in bin(n)[2:]]\n\n    # Rotate the bits of the list to the left by d positions\n    for _ in range(d):\n        bin_list.append(bin_list.pop(0))\n\n    # Convert the list of digits back to a binary number\n    return int(''.join(map(str, bin_list)), 2)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # get the number of bits in the number\n    bits = bin(n).lstrip('0b').__len__()\n    \n    # calculate the amount of bits to rotate by\n    rotate_bits = (d % bits)\n    \n    # rotate the bits\n    rotated_bits = bin(n >> rotate_bits)[2:].zfill(bits)\n    \n    # convert the rotated bits back to an integer\n    rotated_n = int(rotated_bits, 2)\n    \n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Calculate the number of bits to rotate left\n    rotate_bits = d % 32\n\n    # Calculate the number of bits to shift the bits to the left\n    shift_bits = 32 - rotate_bits\n\n    # Create a mask to select the bits to rotate\n    mask = (1 << rotate_bits) - 1\n\n    # Rotate the bits\n    rotated_bits = (n >> shift_bits) | (n << (rotate_bits - shift_bits))\n\n    # Return the rotated bits\n    return rotated_bits & ((1 << 32) - 1)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Mask to extract the most significant d bits\n    mask = 0xFFFFFFFF << (32 - d)\n    # Shift left d bits\n    rotated_n = (n << d) & mask\n    # Shift right the remaining bits\n    n_without_d_bits = n >> d\n    # OR the rotated bits with the original bits\n    result = rotated_n | n_without_d_bits\n    return result"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    binary_num = bin(n)[2:]\n    # Calculate the number of digits\n    num_of_digits = len(binary_num)\n    # Calculate the number of bits to rotate\n    num_of_bits_to_rotate = d % num_of_digits\n    # If the number of bits to rotate is 0, then no rotation is required\n    if num_of_bits_to_rotate == 0:\n        return n\n    # Calculate the rotation amount\n    rotation_amount = (2**num_of_bits_to_rotate) - 1\n    # Calculate the shifted number\n    shifted_num = binary_num[num_of_bits_to_rotate:] + binary_num[:num_of_bits_to_rotate]\n    # Reverse the shifted number\n    reversed_shifted_num = shifted_num[::-1]\n    # Calculate the new number\n    new_number = int(reversed_shifted_num,2)\n    # Return the new number\n    return new_number"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    mask = 0xFFFFFFFF # 32 bit mask\n    d &= 31 # restrict d to 5 bits\n    n = n & mask # restrict n to 32 bits\n    \n    # rotate left by d bits\n    n = (n << d) | (n >> (32-d))\n    \n    return n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\n    :param n: the number to rotate\n    :param d: the number of bits to rotate left\n    :return: the rotated number\n    \"\"\"\n    # Calculate the number of bits that need to be rotated left\n    num_bits = 32\n    shift_count = d % num_bits\n    if d < 0:\n        shift_count = num_bits + d\n\n    # Shift the bits to the left and mask the highest bit\n    rotated_num = (n << shift_count) & 0xFFFFFFFF\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n, d):\n    '''\n    Write a function to rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' ', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    text = re.sub(r'\\s+','', text)\n    # Remove leading and trailing whitespaces\n    text = text.strip()\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for num in [x, y, z]:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n\n    count = 0\n    if x == y:\n        count += 1\n    if x == z:\n        count += 1\n    if y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n\n    if x == y and x == z:\n        count += 1\n\n    if y == x and y == z:\n        count += 1\n\n    if z == x and z == y:\n        count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    if x!= y!= z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if y == z and x == y:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(100):\n        if x == y == z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if x == y!= z:\n        count += 1\n    if x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x, y, z)):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If the array is already sorted, return 0\n    if arr == sorted(arr):\n        return 0\n\n    # If the array has a single element, return 1\n    if n == 1:\n        return 1\n\n    # Initialize a variable to store the count of rotations\n    count = 0\n\n    # Initialize two pointers for the array\n    left = 0\n    right = n - 1\n\n    # Loop until the pointers meet\n    while left < right:\n        # Check if the current element is greater than the next element\n        if arr[left] > arr[right]:\n            # Increment the count\n            count += 1\n\n            # Move the left pointer to the right\n            left += 1\n        else:\n            # Move the right pointer to the left\n            right -= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[i+1]:\n            return 1\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array.\n    :param arr: the given sorted array\n    :return: the number of rotations required to generate a sorted array\n    \"\"\"\n    n = len(arr)\n    count = 0\n    while n > 1 and arr[0] > arr[n-1]:\n        count += 1\n        n //= 2\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Initialize two variables to keep track of the smallest and largest elements\n    smallest = arr[0]\n    largest = arr[0]\n    # Loop through the array and update the smallest and largest elements\n    for i in range(1, n):\n        if arr[i] < smallest:\n            smallest = arr[i]\n        if arr[i] > largest:\n            largest = arr[i]\n    # Check if the array is sorted or not\n    if smallest == largest:\n        return 0\n    # Initialize two variables to keep track of the number of rotations and the index of the first and last elements\n    rotations = 0\n    first = 0\n    last = n-1\n    # Loop through the array and check if the current element is greater than the last element\n    while first < last:\n        if arr[first] > arr[last]:\n            rotations += 1\n            first += 1\n            last -= 1\n        else:\n            first += 1\n    return rotations"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # Traverse the array to find the smallest element\n    for i in range(n):\n        if arr[i] < arr[0]:\n            temp = arr[0]\n            arr[0] = arr[i]\n            arr[i] = temp\n            break\n\n    # Traverse the array again to find the largest element\n    for i in range(n):\n        if arr[i] > arr[n-1]:\n            temp = arr[n-1]\n            arr[n-1] = arr[i]\n            arr[i] = temp\n            break\n\n    # If the two elements are equal, the array is already sorted\n    if arr[0] == arr[n-1]:\n        return 0\n\n    # If the array is already sorted, then we don't need to rotate it\n    if arr[0] <= arr[n-2] and arr[n-1] >= arr[1]:\n        return 0\n\n    # If the array is already sorted in descending order, then we don't need to rotate it\n    if arr[0] >= arr[n-2] and arr[n-1] <= arr[1]:\n        return 0\n\n    # Count the number of rotations required to sort the array\n    count = 0\n    while arr[0] > arr[n-1]:\n        arr.pop(0)\n        arr.append(arr[n-1])\n        count += 1\n\n    while arr[0] < arr[n-1]:\n        arr.pop(n-1)\n        arr.insert(0, arr[0])\n        count += 1\n\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Initialize variables\n    n = len(arr)\n    count = 0\n    \n    # Sort the array\n    sorted_arr = sorted(arr)\n    \n    # Find the index of the smallest element in the sorted array\n    for i in range(n):\n        if arr[i] == sorted_arr[i]:\n            break\n    \n    # Check if the first element of the sorted array is smaller than the second element\n    if arr[0] < sorted_arr[1]:\n        # If the first element is smaller, count the number of rotations required\n        count = n - i\n    \n    # Check if the last element of the sorted array is smaller than the second to last element\n    if arr[n-1] < sorted_arr[n-2]:\n        # If the last element is smaller, count the number of rotations required\n        count = i + 1\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    # merge sort implementation to sort the array\n    def merge_sort(arr, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            merge_sort(arr, left, mid)\n            merge_sort(arr, mid + 1, right)\n            merge(arr, left, mid, right)\n\n    # merge function to merge two sorted halves\n    def merge(arr, left, mid, right):\n        n1 = mid - left + 1\n        n2 = right - mid\n        L = [0] * n1\n        R = [0] * n2\n\n        for i in range(n1):\n            L[i] = arr[left + i]\n        for j in range(n2):\n            R[j] = arr[mid + 1 + j]\n\n        i = 0\n        j = 0\n        k = left\n\n        while i < n1 and j < n2:\n            if L[i] <= R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n\n        while i < n1:\n            arr[k] = L[i]\n            i += 1\n            k += 1\n\n        while j < n2:\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\n    # count the number of merges required to generate the sorted array\n    n = len(arr)\n    count = 0\n    left = 0\n    right = n - 1\n    merge_sort(arr, left, right)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n\n    if n == 0 or n == 1:\n        return True\n    elif n < 0:\n        return False\n    else:\n        root = n ** 0.5\n        return root == int(root)"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    # check if the number is less than 2\n    if n < 2:\n        return False\n    \n    # calculate the square root of the given number\n    square_root = int(n ** 0.5) + 1\n    \n    # check if the square root is an integer\n    if square_root ** 2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not. \n    \"\"\"\n    # calculate square root using Newton's method\n    a = n\n    b = (a + n // a) / 2\n    while b * b > a:\n        a = b\n        b = (a + n // a) / 2\n    if b * b == a:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    This function takes an integer n and returns True if it is a perfect square and False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Return False if the number is less than 2\n    if n < 2:\n        return False\n\n    # Calculate the square root using the built-in function sqrt()\n    sqrt_n = round(n ** 0.5)\n\n    # If the square root is an integer, then the number is a perfect square\n    if sqrt_n ** 2 == n:\n        return True\n\n    # If the square root is not an integer, then the number is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check if the given number is a perfect square or not.\n    \"\"\"\n    if n <= 0:\n        return False\n    i = 1\n    while i * i <= n:\n        if i * i == n:\n            return True\n        i += 1\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # Calculate the square root of the number\n    root = cmath.sqrt(n)\n    \n    # Calculate the difference between the square root and the original number\n    diff = abs(root - n)\n    \n    # Check if the difference is a perfect square\n    if is_perfect_square(diff):\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Check whether a number is a perfect square or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: Whether n is a perfect square or not.\n    \"\"\"\n    import math\n    return math.sqrt(n) == int(math.sqrt(n))"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n <= 0:\n        return False\n    else:\n        sqrt_n = int(n ** 0.5)\n        if sqrt_n ** 2 == n:\n            return True\n        else:\n            return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    root = int(n**0.5)\n    if root**2 == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    This function takes an array of numbers as input and returns True if the product of all numbers is even,\n    and False otherwise.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n        if product % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr: \n        product *= num\n    if product % 2 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_sum_list = []\n    for i in range(len(lists)):\n        current_sum = sum(lists[i])\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = [lists[i]]\n        elif current_sum == max_sum:\n            max_sum_list.append(lists[i])\n    return max_sum_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    This function takes a list of lists as input and returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if j == 0:\n                current_sum = lists[i][j]\n            else:\n                current_sum = lists[i][j] + result[i-1][j-1]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                result = [[lists[i][j]]]\n            elif current_sum == max_sum:\n                result.append([lists[i][j]])\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize max sum to negative infinity\n    max_sum = float('-inf')\n    # Initialize max list to empty list\n    max_list = []\n    # Loop through each list in the lists parameter\n    for lst in lists:\n        # Initialize a sum variable to 0\n        sum = 0\n        # Loop through each element in the list\n        for num in lst:\n            # Add the element to the sum\n            sum += num\n        # If the sum is greater than max sum, update max sum and max list\n        if sum > max_sum:\n            max_sum = sum\n            max_list = lst\n    # Return the max list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for lst in lists:\n        lst.sort()\n        current_sum = lst[0]\n        for i in range(1, len(lst)):\n            current_sum += lst[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = lst.copy()\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize maximum sum and index of maximum sum\n    max_sum = float('-inf')\n    max_sum_index = 0\n    \n    # Iterate through each list in the input list\n    for i in range(len(lists)):\n        # Initialize current sum and index of current sum\n        current_sum = 0\n        current_sum_index = i\n        \n        # Iterate through the remaining elements of the current list\n        for j in range(i+1, len(lists[i])):\n            # Add current element to current sum and update index\n            current_sum += lists[i][j]\n            current_sum_index = j\n            \n            # Check if current sum is greater than maximum sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_sum_index = current_sum_index\n    \n    # Return the list in the input list that corresponds to the maximum sum\n    return [lists[i][j] for i in range(len(lists)) for j in range(len(lists[i])) if i == max_sum_index][::-1]"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    max_lists = None\n    \n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_lists = [lists[i], lists[j]]\n    \n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    \n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == 0 and j == 0:\n                max_sum = lists[i][j]\n                max_list = [[lists[i][j]]]\n            elif i == 0:\n                max_sum = max_sum + lists[i][j]\n                max_list.append([lists[i][j]])\n            elif j == 0:\n                max_sum = max_sum + lists[i][j]\n                max_list[0].append(lists[i][j])\n            elif lists[i][j] > max_list[-1][-1]:\n                max_sum = max_sum + lists[i][j]\n                max_list[-1].append(lists[i][j])\n            else:\n                max_sum = max_sum - max_list[-1][-1] + lists[i][j]\n                max_list[-1].pop()\n                max_list[-1].append(lists[i][j])\n    \n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    max_sum = float('-inf')\n    max_list = None\n    for i in range(len(lists)):\n        for j in range(i+1, len(lists)):\n            current_sum = sum(lists[i]) + sum(lists[j])\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_list = [lists[i], lists[j]]\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    # Initialize variables\n    max_sum = float('-inf')\n    max_list = []\n    current_sum = 0\n\n    # Loop through each list in the input list of lists\n    for sublist in lists:\n        # Loop through each element in the sublist\n        for element in sublist:\n            # Add the element to the current_sum\n            current_sum += element\n\n            # Check if the current_sum is greater than max_sum\n            if current_sum > max_sum:\n                # If it is, update max_sum and max_list\n                max_sum = current_sum\n                max_list = [element]\n            # Check if the current_sum is equal to max_sum\n            elif current_sum == max_sum:\n                # If it is, append the element to max_list\n                max_list.append(element)\n\n    # Return the max_list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = None\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result = sublist\n    return result"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    start_index = 0\n    end_index = 0\n    max_run = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            end_index = i\n        else:\n            if count > max_run:\n                max_run = count\n                start_index = start_index if start_index < count else count\n                \n            count = 0\n            start_index = i\n            end_index = i\n            \n    if count > max_run:\n        max_run = count\n        start_index = start_index if start_index < count else count\n            \n    return max_run, test_str[start_index:end_index+1]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # initialize variables\n    max_run = 0\n    prev_char = test_str[0]\n    run = 1\n\n    # iterate through the string\n    for i in range(1, len(test_str)):\n        # check if the current character is uppercase\n        if test_str[i].isupper():\n            # update the run count and store the maximum run\n            if run > max_run:\n                max_run = run\n            # reset the run count\n            run = 1\n        else:\n            # increment the run count\n            run += 1\n        # update the previous character\n        prev_char = test_str[i]\n\n    # check if the last character is uppercase and update the run count\n    if test_str[-1].isupper() and run > max_run:\n        max_run = run\n\n    # return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # initialize variables\n    max_run = 0\n    current_run = 0\n    prev_char = None\n\n    # loop through the string\n    for char in test_str:\n        # if the character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # if the character is not uppercase, reset the current run and check for a longer run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n\n        # if the current character is not uppercase and the previous character was uppercase, increment the current run\n        if prev_char is not None and prev_char.isupper() and not char.isupper():\n            current_run += 1\n\n        # update the previous character\n        prev_char = char\n\n    # check for a final longest run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    # Find the maximum length of the run of uppercase characters in the string\n    max_run = 0\n    curr_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            curr_run += 1\n        else:\n            curr_run = 0\n        \n        if curr_run > max_run:\n            max_run = curr_run\n    \n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert the string to lowercase\n    test_str = test_str.lower()\n    # Initialize variables for the maximum run of uppercase characters and its length\n    max_run = ''\n    max_len = 0\n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the current character is uppercase, check if it is the start of a new run of uppercase characters\n        if test_str[i].isupper():\n            # If it is the start of a new run of uppercase characters, check if its length is greater than the current maximum run length\n            if i - max_len + 1 > len(max_run):\n                # If it is, update the maximum run and its length\n                max_run = test_str[max_len:i+1]\n                max_len = i - max_len + 1\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    uppercase = False\n\n    # Loop through the string\n    for char in test_str:\n        # If the character is uppercase, increment the current run count\n        if char.isupper():\n            current_run += 1\n            # If the current run is longer than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the character is not uppercase, reset the current run count to 0\n        else:\n            current_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    # Initialize variables to keep track of the current run and the maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Loop through each character in the string\n    for i in range(len(test_str)):\n        # If the character is uppercase, increment the current run\n        if test_str[i].isupper():\n            current_run += 1\n        # If the character is not uppercase and the current run is greater than the maximum run, update the maximum run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run to 0\n            current_run = 0\n    \n    # If the current run is greater than the maximum run, update the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    \n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n    # Iterate through the string\n    for char in test_str:\n        # Check if the current character is uppercase\n        if char.isupper():\n            current_run += 1\n        else:\n            # Check if the current run is greater than the maximum run\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run\n            current_run = 0\n    # Check if the current run is greater than the maximum run\n    if current_run > max_run:\n        max_run = current_run\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables to keep track of the current run of uppercase characters and the maximum run\n    current_run = 0\n    max_run = 0\n    \n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is uppercase and the current run is greater than 0, update the current run\n        if char.isupper() and current_run > 0:\n            current_run += 1\n            # If the current run is greater than the maximum run, update the maximum run\n            if current_run > max_run:\n                max_run = current_run\n        # If the character is not uppercase or the current run is zero, reset the current run\n        else:\n            current_run = 0\n\n    # Return the maximum run of uppercase characters\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_index = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n            if count > max_count:\n                max_count = count\n                max_index = i\n        else:\n            count = 0\n    return max_index"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list, or None if there is no odd number in the list.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if K in tup:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    if K in test_tup:\n        print(\"The given tuple contains the k value\")\n    else:\n        print(\"The given tuple does not contain the k value\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) < K:\n        return False\n    for i in range(K):\n        if test_tup[i] not in test_tup[i+1:]:\n            return False\n    return True"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    k_count = 0\n    for tup in test_tup:\n        if K in tup:\n            k_count += 1\n    if k_count == len(test_tup):\n        print(\"All tuples contain the k\")\n    else:\n        print(\"Some tuples do not contain the k\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    if len(test_tup) == K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if the number of elements in the first tuple is equal to the number of elements in the second tuple\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Both tuples should have the same number of elements')\n\n    # Iterate through the first tuple and check if each element is smaller than its corresponding element in the second tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Both tuples should have the same length.\")\n        return\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(\"Error: First tuple element is greater than second tuple element.\")\n            return\n        elif test_tup1[i] == test_tup2[i]:\n            continue\n        else:\n            print(\"Error: First tuple element is smaller than second tuple element.\")\n            return"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    \"\"\"\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    \n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup2)):\n        if test_tup1[i] >= test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    \n    # check if length of both tuples are same\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    \n    # iterate over both tuples and check if each element of second tuple is smaller than its corresponding element in the first tuple\n    for i in range(len(test_tup1)):\n        if test_tup2[i] >= test_tup1[i]:\n            return False\n    \n    return True"
    }
]