[
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2 and test_tup1[i] not in shared_elements:\n            shared_elements.append(test_tup1[i])\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n\n    # iterate through the list and check if each element is present in the other list\n    for elem in lst1:\n        if elem in lst2:\n            # if an element is found, append it to a list\n            shared_list.append(elem)\n\n    # return the shared list\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n\n    # Create two sets to store the elements of both lists\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n\n    # Find the intersection of both sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Sort the two lists in ascending order\n    sorted_list1 = sorted(test_tup1)\n    sorted_list2 = sorted(test_tup2)\n\n    # Initialize an empty list to store the shared elements\n    shared_list = []\n\n    # Iterate through the sorted lists and compare the elements\n    for i in range(len(sorted_list1)):\n        if sorted_list1[i] == sorted_list2[i]:\n            shared_list.append(sorted_list1[i])\n\n    return shared_list"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    # Convert the given tuples into sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # Find the intersection of the two sets\n    shared_elements = set1.intersection(set2)\n    # Convert the intersection set back into a list and return it\n    return list(shared_elements)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert the tuples to sets to remove duplicates\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    # find the intersection of the two sets\n    shared_set = set1.intersection(set2)\n    # convert the shared set back to a list and return it\n    return list(shared_set)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Returns a list of shared elements between two tuples.\n    \"\"\"\n    shared = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared.append(elem)\n    return shared"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = []\n    for element in test_tup1:\n        if element in test_tup2:\n            shared_elements.append(element)\n    return shared_elements"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the shared elements from the given two lists.\n    \"\"\"\n    shared_elements = []\n    for elem in test_tup1:\n        if elem in test_tup2:\n            shared_elements.append(elem)\n    return shared_elements"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n\n    # Check if the number is 1 or less than 2\n    if n <= 1:\n        return True\n\n    # Check if the number is divisible by any number less than or equal to the square root of the number\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n\n    # If the loop completes without finding a divisor, the number is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return True\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    \n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n        \n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2 or n == 3:\n        return False\n    elif n % 2 == 0:\n        return True\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return True\n        return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer as input and returns True if it is a prime number, otherwise it returns False.\n    '''\n    # Check if the number is less than 2 (not prime)\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number less than or equal to the square root of the number\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n\n    # If the number is not divisible by any number less than or equal to the square root of the number, then it is prime\n    return False"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_not_prime(n):\n    '''\n    This function takes an integer n as input and returns True if n is not a prime number.\n    '''\n\n    # check if n is less than 2\n    if n < 2:\n        return True\n\n    # check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # check if n is divisible by any number between 3 and the square root of n\n    for i in range(3, int(math.sqrt(n))+1, 2):\n        if n % i == 0:\n            return True\n\n    return False"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n\n    # convert the input list into a min heap\n    hq.heapify(nums)\n\n    # remove the smallest element from the heap to form the n largest integers\n    largest = []\n    while len(largest) < n:\n        largest.append(hq.heappop(nums))\n\n    return largest"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min heap of size n\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, -nums[i])\n        \n    # push remaining numbers into the heap\n    for num in nums[n:]:\n        hq.heappush(max_heap, -num)\n        \n    # pop the smallest n numbers from the heap\n    return [-num for num in hq.nsmallest(n, max_heap)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a min heap\n    hq.heapify(nums)\n\n    # remove and return the n largest elements from the heap\n    return [hq.heappop(nums) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a min-heap\n    heap = nums\n    hq.heapify(heap)\n    \n    # remove the minimum n elements from the heap and return them in descending order\n    return [hq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min-heap of size n\n    heap = []\n    for num in nums:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            # If the current number is greater than the smallest number in the heap, pop the smallest number from the heap\n            if num > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, num)\n    # Return the n largest numbers from the heap\n    return heap[:n]"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Build a max heap from the given list of numbers\n    heap = nums[:n]\n    hq.heapify(heap)\n    \n    # Remove the smallest element from the max heap and add it to the result list\n    for _ in range(n, len(nums)):\n        largest = hq.heappop(heap)\n        result.append(largest)\n    \n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Initialize a min heap to store the n largest integers\n    heap = []\n    for num in nums[:n]:\n        hq.heappush(heap, -num)\n\n    # Iterate through the remaining list of numbers and update the heap\n    for num in nums[n:]:\n        # Remove the smallest number from the heap\n        hq.heappop(heap)\n\n        # Add the new number to the heap\n        hq.heappush(heap, -num)\n\n    # Extract the n largest integers from the heap and return them in descending order\n    result = []\n    for _ in range(n):\n        result.append(-hq.heappop(heap))\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # convert the list of numbers to a min heap\n    heap = hq.nsmallest(n, nums)\n    # convert the min heap to a list in descending order\n    result = [heapq.heappop(heap) for _ in range(n)]\n    # reverse the list of integers to get the n largest integers in descending order\n    result.reverse()\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # Use a max-heap to store the n largest integers\n    hq.heapify(nums)\n\n    # Remove the largest integer from the heap and append it to the result list\n    result = []\n    while n > 0:\n        result.append(hq.heappop(nums))\n        n -= 1\n\n    # Reverse the result list to get the largest n integers in descending order\n    result.reverse()\n\n    return result"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # create a min-heap with the given list of numbers\n    heap = hq.heapify(nums)\n    # create an empty list to store the n largest integers\n    largest_nums = []\n    # loop through the heap and add n elements to the largest_nums list in descending order\n    for i in range(n):\n        # if the heap is empty, break the loop\n        if len(heap) == 0:\n            break\n        # add the smallest element in the heap to the largest_nums list\n        largest_nums.append(hq.heappop(heap))\n    # return the largest_nums list\n    return largest_nums"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    This function takes an integer x as input and returns True if the number is a power of two, else it returns False.\n    A number is a power of two if there exists a positive integer n such that 2^n equals x.\n    '''\n    if x <= 1:\n        return False\n    elif x == 2:\n        return True\n    elif x % 2 == 0:\n        return is_Power_Of_Two(x//2)\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Check if x is a power of two or not\n    if x & (x - 1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    This function checks whether the two numbers differ at one bit position only or not.\n    '''\n    # Convert the given numbers to binary and count the number of set bits\n    count1 = x.bit_length() - x.count('0')\n    count2 = y.bit_length() - y.count('0')\n\n    # Return whether the numbers differ at one bit position only or not\n    return count1 == count2"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the input number to binary representation\n    bin_x = bin(x)[2:]\n\n    # Check if the binary representation of the input number has more than one occurrence of 1\n    count = bin_x.count('1')\n    if count > 1:\n        return False\n\n    # Check if the binary representation of the input number has only one occurrence of 1\n    else:\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0: # if x has only one bit set to 1, it is a power of 2\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    if x == 0: \n        return True\n\n    count = 0\n    while x!= 0: \n        x >>= 1\n        count += 1\n\n    return count == 1\n"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x & (x-1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n\n    # Convert the given number to binary and check if there is only one bit that is different from its complement\n    binary = bin(x)[2:]\n    return binary.count('1') == 1"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Power_Of_Two(x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x == 0 or x == 1:\n        return True\n    else:\n        while x!= 1:\n            if x % 2 == 0:\n                x = x // 2\n            else:\n                x = 3 * x + 1\n        return True"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 0: \n        if x & 1!= 0: \n            return False \n        x >>= 1 \n    return True"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b'\n    words = re.findall(pattern, text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w+\\b'  # find all word boundaries\n    words = re.findall(pattern, text)  # find all words using regular expressions\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pattern = r'\\b\\w{4,}\\b' # find all words that are at least 4 characters long\n    matches = re.findall(pattern, text) # find all matches in the text\n    return matches\n\ntext = \"This is a sample text with some words that are at least 4 characters long.\"\nresult = find_char_long(text)\nprint(result)"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_char_long(text):\n    \"\"\"\n    This function takes a string as input and returns a list of words\n    that are at least 4 characters long.\n    \"\"\"\n    words = re.findall(r'\\b\\w{4,}\\b', text)\n    return words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find words with at least 4 characters\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into a list of words\n    words = text.split()\n\n    # Initialize an empty list to store the long words\n    long_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the length of the word is greater than or equal to 4\n        if len(word) >= 4:\n            # If the word is longer than 4 characters, add it to the list\n            long_words.append(word)\n\n    # Return the list of long words\n    return long_words"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Use regular expressions to find all words that are at least 4 characters long\n    pattern = r'\\b\\w{4,}\\b'\n    matches = re.findall(pattern, text)\n    \n    # Return a list of all matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Split the text into words\n    words = text.split()\n\n    # Define a pattern to match words with at least 4 characters long\n    pattern = re.compile(r'\\b\\w{4,}\\b')\n\n    # Find all matches with the pattern\n    matches = pattern.findall(text)\n\n    # Return the list of matches\n    return matches"
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_char_long(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    result = []\n    \n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    \n    return result"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [x ** 2 for x in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num**2)\n    return squared_nums"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num ** 2)\n    return squares"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    # find the length of the string\n    n = len(str)\n\n    # create a list of all possible rotations of the string\n    rotations = []\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j+1, n):\n                rotations.append(str[i:j+1] + str[j:k+1] + str[k:n+1])\n\n    # find the minimum number of rotations required to get the same string\n    min_rotations = n\n    for rotation in rotations:\n        if rotation == str:\n            min_rotations = min(min_rotations, rotations.index(rotation)+1)\n\n    # return the minimum number of rotations required\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Rotations(str):\n    # check if the input string is empty\n    if not str:\n        return 0\n\n    # find the length of the input string\n    n = len(str)\n\n    # create a dictionary to store the frequency of characters\n    freq = {}\n    for i in range(n):\n        char = str[i]\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # sort the dictionary based on the frequency of characters\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # initialize the minimum number of rotations to be n\n    min_rotations = n\n\n    # loop through the sorted dictionary\n    for i in range(len(sorted_freq)):\n        char, freq = sorted_freq[i]\n\n        # check if the frequency of the character is greater than 0\n        if freq > 0:\n            # decrement the frequency of the character\n            freq -= 1\n\n            # check if the frequency of the character is 0\n            if freq == 0:\n                # decrement the minimum number of rotations\n                min_rotations -= 1\n\n            # update the frequency of the character in the dictionary\n            freq = sorted_freq[i][1]\n            sorted_freq[i] = (char, freq)\n\n            # check if the frequency of the character is greater than 0\n            if freq > 0:\n                # check if the number of rotations required is less than the current minimum number of rotations\n                if min_rotations > 0:\n                    min_rotations -= 1\n\n    return min_rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    n = len(str)\n    # check all possible rotations of the string\n    for i in range(n): \n        for j in range(n-i-1): \n            # check if the current and next character are equal \n            if str[j] == str[j+1]: \n                # if yes, we have found a rotation \n                # count the number of rotations that yield the same string \n                cnt = 1\n                while cnt < n: \n                    if str[j+cnt] == str[(j+cnt+i)%n]: \n                        cnt += 1\n                    else: \n                        break\n                # return the minimum number of rotations required to get the same string \n                return min(cnt, n-cnt)\n    # if no rotation is found, return 0\n    return 0"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    for i in range(1, n):\n        for j in range(i, n):\n            if str[i] == str[j]:\n                # we found a common character, let's check the substrings\n                for k in range(i, j):\n                    if str[k]!= str[i]:\n                        # a substring has a different character, let's check if it matches the rest of the string\n                        if str[k:j] == str[i:j]:\n                            # the substring matches the rest of the string, let's check if it's a rotation\n                            if str[k:j] + str[0:k] == str:\n                                return j - i + 1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    # initialize the minimum number of rotations to infinity\n    min_rot = float('inf')\n\n    # loop through all possible rotations of the string\n    for i in range(len(str)):\n        # loop through all possible rotations of the string after the current one\n        for j in range(i+1, len(str)+1):\n            # create a new string by reversing the characters in the current and next rotations\n            reversed_str = str[i:j][::-1]\n            # compare the new string with the original string\n            if reversed_str == str:\n                # update the minimum number of rotations if the current rotation is smaller\n                min_rot = min(min_rot, j-i)\n\n    # return the minimum number of rotations required to get the same string\n    return min_rot"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    count = 0\n\n    # Check if the string is a palindrome\n    if str == str[::-1]:\n        return 0\n\n    # Check for all possible rotations\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            # Check if the substring is a palindrome\n            if str[i:j] == str[i:j][::-1]:\n                return 0\n\n    # If no valid rotations are found, return -1\n    return -1"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_len = len(str)\n    if str_len <= 1:\n        return 0\n    rotations = 0\n    if str[0]!= str[-1]:\n        rotations += 1\n    for i in range(1, str_len//2):\n        if str[i]!= str[-1-i]:\n            rotations += 1\n            if rotations == 2:\n                return rotations\n            break\n    if rotations == 1:\n        return rotations\n    for i in range(1, str_len//2):\n        if str[str_len-i-1]!= str[i]:\n            rotations += 1\n            if rotations == 2:\n                return rotations\n            break\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Rotations(s):\n    # Initialize the sliding window\n    pattern = s[::-1]\n    window = \"\"\n    rotations = 0\n    start = 0\n\n    while start < len(s):\n        # Find the next character in the pattern that matches the next character in the window\n        while start < len(s) and pattern[start] == window[len(window) - 1]:\n            start += 1\n\n        # If the target string is found, calculate the minimum number of rotations required\n        if start == len(s):\n            rotations = len(s) - len(window)\n            break\n\n        # Slide the window to the right\n        window = s[start:]\n        start = 0\n\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Rotations(str):\n    n = len(str)\n    rotations = 0\n    max_index = 0\n    \n    # find the maximum index of each character in the string\n    for i in range(n):\n        max_index = max(max_index, str.find(str[i], max_index+1))\n    \n    # loop through all possible rotations and count the number of rotations that result in the same string\n    for i in range(n):\n        for j in range(i+1, n):\n            if str[i:j+1] == str[j:i:-1]:\n                rotations += 1\n    \n    # return the minimum number of rotations required to get the same string\n    return rotations"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Rotations(str):\n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n\n    # Initialize the minimum number of rotations to infinity\n    min_rotations = float('inf')\n\n    # Iterate through each character in the string\n    for i in range(len(str)):\n        # Get the current character and the previous character\n        current = str[i]\n        prev = str[i - 1]\n\n        # If the current character is greater than the previous character, then the string has been rotated\n        if current > prev:\n            # Calculate the number of rotations required to get the same string\n            rotations = 0\n            while current!= prev:\n                current = str[i + rotations]\n                rotations += 1\n\n            # Update the minimum number of rotations if the current rotation count is less than the previous rotation count\n            if rotations < min_rotations:\n                min_rotations = rotations\n\n    # Return the minimum number of rotations required to get the same string\n    return min_rotations"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    return s.strip(ch)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if ch in s:\n        return s.replace(ch, '', 1)[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_Occ(s, ch):\n    '''\n    This function removes first and last occurrence of a given character from the string.\n    '''\n    # Check if the character exists in the string\n    if ch in s:\n        # Split the string into a list of characters\n        char_list = list(s)\n        # Find the index of the first occurrence of the character\n        index1 = char_list.index(ch)\n        # Find the index of the last occurrence of the character\n        index2 = char_list.rindex(ch)\n        # Remove the first occurrence of the character from the string\n        char_list[index1] = ''\n        # Remove the last occurrence of the character from the string\n        char_list[index2] = ''\n        # Convert the list of characters back to a string\n        result = ''.join(char_list)\n        return result\n    else:\n        return \"The character does not exist in the string\""
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    \"\"\"\n    s = s.replace(ch, '', 1)  # remove first occurrence\n    s = s.replace(ch, '', -1)  # remove last occurrence\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n\n    # Remove the first occurrence of the given character\n    s = s.replace(ch, '')\n\n    # Remove the last occurrence of the given character\n    s = s.strip(ch)\n\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # check if the character exists in the string\n    if ch in s:\n        # split the string into two parts\n        parts = s.split(ch)\n        # remove the first and last parts of the string\n        s = parts[0] + parts[2]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_Occ(s, ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # Splitting the string into a list\n    s = list(s)\n    # Counting the occurrence of the character in the list\n    count = s.count(ch)\n    # If the character is present in the list, then remove it from the list\n    if count > 0:\n        s.remove(ch)\n        # Removing the first occurrence of the character from the list\n        if s[0] == ch:\n            s.pop(0)\n        # Removing the last occurrence of the character from the list\n        if s[-1] == ch:\n            s.pop(-1)\n    # Joining the list back to a string\n    result = ''.join(s)\n    return result"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # convert string to list to perform operations on individual characters\n    lst = list(s)\n    # find first and last occurrence of the character\n    i = lst.index(ch)\n    j = lst.index(ch, i+1)\n    # remove first occurrence\n    lst.pop(i)\n    # remove last occurrence\n    lst.pop(j-1)\n    # convert list back to string and return\n    return ''.join(lst)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch):\n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s[0] == ch:\n        return s[1:]\n    elif s[-1] == ch:\n        return s[:-1]\n    else:\n        return s"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_Occ(s, ch):\n    # Check if the character is present in the string\n    if ch in s:\n        # Get the indices of first and last occurrences of the character\n        i = s.find(ch)\n        j = s.rfind(ch)\n        # Check if both indices are not -1 (character is present in the string)\n        if i!= -1 and j!= -1:\n            # Remove the first occurrence and the last occurrence of the character\n            s = s[:i] + s[j+1:]\n    return s"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    \"\"\"\n    # Step 1: Calculate the sum of each row\n    for i in range(len(M)):\n        total_sum = sum(M[i])\n        M[i] = [x for _, x in sorted(zip(M[i], [total_sum] * len(M[i])))]\n    \n    # Step 2: Merge the sorted matrix\n    for i in range(1, len(M)):\n        for j in range(len(M[i])-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    \n    # Step 3: Print the sorted matrix\n    for i in range(len(M)):\n        print(M[i])"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Initialize a list to store the sorted matrix\n    sorted_M = []\n    \n    # Loop through each row of the matrix\n    for i in range(len(M)):\n        # Find the sum of the current row\n        row_sum = sum(M[i])\n        \n        # Initialize a variable to store the row with the minimum sum\n        min_sum_row = []\n        \n        # Loop through each column of the matrix\n        for j in range(len(M[0])):\n            # Calculate the sum of the current column\n            col_sum = sum([M[k][j] for k in range(len(M))])\n            \n            # If the sum of the current column is less than the minimum sum, store the row with the minimum sum\n            if col_sum < min_sum_row:\n                min_sum_row = M[i]\n        \n        # Append the minimum sum row to the sorted matrix\n        sorted_M.append(min_sum_row)\n    \n    # Return the sorted matrix\n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in M]\n    \n    # Sort the rows by their sums\n    sorted_rows = sorted(M, key=lambda row: row_sums.index(sum(row)))\n    \n    # Reverse the sorted rows to get the desired result\n    sorted_rows.reverse()\n    \n    return sorted_rows"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    sum_rows = []\n    sorted_matrix = []\n    \n    # Calculate the sum of each row\n    for i in range(rows):\n        row_sum = 0\n        for j in range(cols):\n            row_sum += M[i][j]\n        sum_rows.append(row_sum)\n    \n    # Sort the matrix according to the sum of its rows\n    for i in range(rows):\n        for j in range(cols):\n            for k in range(rows):\n                if sum_rows[k] < sum_rows[i]:\n                    temp = M[i][j]\n                    M[i][j] = M[k][j]\n                    M[k][j] = temp\n                    \n    # Print the sorted matrix\n    for i in range(rows):\n        row = []\n        for j in range(cols):\n            row.append(M[i][j])\n        sorted_matrix.append(row)\n    \n    print(sorted_matrix)"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    n = len(M)\n    for i in range(n):\n        max_index = i\n        for j in range(i+1, n):\n            if M[j][0] > M[max_index][0]:\n                max_index = j\n        M[i], M[max_index] = M[max_index], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # Get the number of rows and columns in the matrix\n    rows, cols = len(M), len(M[0])\n    \n    # Create a new matrix of zeros\n    sorted_M = [[0 for _ in range(cols)] for _ in range(rows)]\n    \n    # Iterate through the rows of the matrix\n    for i in range(rows):\n        # Initialize the sum of the current row\n        current_sum = 0\n        \n        # Iterate through the columns of the current row\n        for j in range(cols):\n            # Add the value of the current element to the sum\n            current_sum += M[i][j]\n        \n        # Sort the current row in ascending order based on the sum of its elements\n        sorted_M[i] = sorted(M[i])\n        \n        # Check if the sum of the current row is equal to the sum of the sorted row\n        if current_sum == sum(sorted_M[i]):\n            # If yes, copy the sorted row to the new matrix\n            for k in range(cols):\n                sorted_M[i][k] = sorted_M[i][k]\n        else:\n            # If no, copy the current row to the new matrix\n            for k in range(cols):\n                sorted_M[i][k] = M[i][k]\n    \n    return sorted_M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # loop through each element of the current row\n        for j in range(len(M[i])):\n            # calculate the sum of the current element and the next elements in the same row\n            temp = M[i][j]\n            for k in range(j, len(M[i])):\n                temp += M[i][k]\n            # replace the current element with the smallest sum in the row\n            M[i][j] = temp\n            for k in range(len(M)):\n                if M[k][j] > M[k][i]:\n                    M[k][i], M[k][j] = M[k][j], M[k][i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        for j in range(n-1):\n            if sum(M[i]) > sum(M[j]):\n                M[i], M[j] = M[j], M[i]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # loop through each row of the matrix\n    for i in range(len(M)):\n        # find the sum of the current row\n        row_sum = sum(M[i])\n        # create a list to hold the indices of the current row\n        row_indices = []\n        # loop through each element in the current row\n        for j in range(len(M[i])):\n            # if the element is greater than or equal to the row sum, add its index to the row indices list\n            if M[i][j] >= row_sum:\n                row_indices.append(j)\n        # sort the row indices in ascending order\n        row_indices.sort()\n        # loop through the row indices and swap the elements in the row of the matrix\n        for j in row_indices:\n            M[i][j], M[i][row_indices.index(j)] = M[i][row_indices.index(j)], M[i][j]\n    # return the sorted matrix\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    # Initialize a list of tuples containing the sum of each row and its index in the matrix\n    sums = [(sum(row), i) for i, row in enumerate(M)]\n    # Sort the list of tuples by the first element (sum of rows) in ascending order\n    sums.sort()\n    # Create a new matrix with the sorted rows\n    result = [[0] * n for _ in range(n)]\n    for i in range(n):\n        # Extract the sum of the i-th row and its index from the list of sums\n        row_sum, row_index = sums[i]\n        # Copy the i-th row from the original matrix to the result matrix\n        result[i] = M[row_index]\n    return result"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*l*b*h\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Volume(l, b, h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h  # Volume formula for triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    \"\"\"\n\n    # Calculate the volume of the prism\n    volume = (l * b * h) / 3\n\n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (l * b * h) / 3\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/6)*(l*b*h)\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n\n    # calculate the volume of the prism\n    volume = l * b * h / 6\n\n    # return the volume of the prism\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h):\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # Calculate the area of the prism\n    area = 0.5 * l * b\n    \n    # Calculate the volume of the prism\n    volume = area * h\n    \n    # Return the volume\n    return volume"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = 1/3 * l * b * h # formula for volume of a triangular prism\n    return V"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    V = (1/3) * l * b * h\n    print(\"The volume of the triangular prism is:\", V)\n"
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = 0.5 * l * b * h\n    return volume"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'^[a-z_]+$'\n    if re.match(pattern, text):\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+(_[a-z]+)*'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    \"\"\"\n    pattern = r\"(?<=[a-z])[A-Z]|(?<=[A-Z])[a-z]\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    # Define a regular expression pattern to match lowercase letters followed by an underscore\n    pattern = re.compile(r'[a-z](_?)+')\n\n    # Use the pattern to search for matches in the input text\n    matches = re.findall(pattern, text)\n\n    # Return True if any matches are found and False otherwise\n    return bool(matches)"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'[a-z]+_[a-z]+'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'(?<=[a-z])[A-Z](?=[a-z])'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    pattern = r'[a-z]+[_][a-z]+'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'([a-z])_([a-z])')\n    matches = pattern.findall(text)\n    return len(matches) > 0"
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r'([a-z]+)_([a-z]+)' # pattern to match sequences of lowercase letters joined with an underscore\n    match = re.search(pattern, text) # search for a match in the text\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    \"\"\"\n    Write a function that returns the perimeter of a square given its side length as input.\n    \"\"\"\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 4 * a\n    return perimeter"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    chars_to_remove = set(string)\n    result = []\n    for char in string:\n        if char not in chars_to_remove:\n            result.append(char)\n    return ''.join(result)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    NO_OF_CHARS = 256\n    char_list = [chr(i) for i in range(NO_OF_CHARS)]\n    char_dict = {char: True for char in char_list}\n    \n    for char in string:\n        char_dict[char] = False\n    \n    return ''.join([char for char in char_list if char_dict[char]])\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_string = []\n    for i in range(NO_OF_CHARS):\n        if i not in string:\n            list_string.append(chr(i))\n    return list_string\n\ndef main():\n    string1 = input(\"Enter the first string: \")\n    string2 = input(\"Enter the second string: \")\n\n    result = str_to_list(string1)\n    print(\"Result:\", result)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    remove_chars = set(string.lower())\n    return [c for c in string if c not in remove_chars]"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = []\n    for i in range(NO_OF_CHARS):\n        if string[i] not in char_list:\n            char_list.append(string[i])\n    \n    return char_list\n\nstring = input(\"Enter a string: \")\nchar_list = str_to_list(string)\nprint(\"Characters in the first string which are not present in the second string: \", char_list)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def str_to_list(string, remove_chars):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string = [string[i] for i in range(len(string)) if string[i] not in remove_chars]\n    return string\n\nNO_OF_CHARS = 256\ndef remove_chars(string, remove_chars):\n    '''\n    Write a function to remove all characters from the string that are present in the remove_chars list.\n    '''\n    return str_to_list(string, remove_chars)\n\ndef remove_vowels(string):\n    '''\n    Write a function to remove vowels from the string.\n    '''\n    return remove_chars(string, 'aeiouAEIOU')\n\ndef remove_consecutive_chars(string):\n    '''\n    Write a function to remove consecutive characters from the string.\n    '''\n    result = [string[0]]\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            continue\n        result.append(string[i])\n    return ''.join(result)\n\ndef remove_special_chars(string):\n    '''\n    Write a function to remove special characters from the string.\n    '''\n    special_chars = set(['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '-', '_', '+', '=', '[', ']', '{', '}', '\\\\', '|', ';', ':', '\\'', '\"', '<', '>', ',', '.', '?'])\n    return ''.join([char for char in string if char not in special_chars])\n\ndef remove_digits(string):\n    '''\n    Write a function to remove digits from the string.\n    '''\n    return ''.join([char for char in string if not char.isdigit()])"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def str_to_list(string, char_list): \n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n\n    :param string: The first string to process.\n    :param char_list: The list of characters to remove from the first string.\n    :return: The modified string without the specified characters.\n    \"\"\"\n    result = \"\"\n    for char in string: \n        if char not in char_list: \n            result += char\n    return result\n"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def str_to_list(string):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # create a list of characters to be removed from the string\n    to_remove = [chr(i) for i in range(NO_OF_CHARS) if chr(i) in string]\n    # remove the characters from the string\n    string = ''.join([c for c in string if c not in to_remove])\n    return string"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def str_to_list(string):\n    # Remove all the characters present in the second string from the first string\n    filtered_string = \"\"\n    for char in string:\n        if char not in string2:\n            filtered_string += char\n    # Convert the filtered string to a list of characters\n    char_list = list(filtered_string)\n    # Pad the list with spaces to make it of length NO_OF_CHARS\n    if len(char_list) < NO_OF_CHARS:\n        char_list += [\" \"] * (NO_OF_CHARS - len(char_list))\n    return char_list"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    char_list = list(string)\n    for char in char_list:\n        if char in string:\n            char_list.remove(char)\n    return ''.join(char_list)\n\nif __name__ == \"__main__\":\n    string1 = input(\"Enter a string: \")\n    string2 = input(\"Enter another string: \")\n    result = str_to_list(string1, string2)\n    print(\"Result after removing characters:\", result)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Check if there are any duplicate elements in the dictionary\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    \n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    freq_dict = {}\n    \n    # Iterate through the array and count the frequency of each element in the dictionary\n    for num in arraynums:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n            \n    # Iterate through the dictionary and check if any element has a frequency greater than 1\n    for num in freq_dict:\n        if freq_dict[num] > 1:\n            return True\n    \n    # If no duplicates are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a set to keep track of the unique elements in the array\n    unique_nums = set()\n\n    # iterate through the array and add each element to the set\n    for num in arraynums:\n        unique_nums.add(num)\n\n    # check if the length of the set is equal to the length of the array\n    return len(unique_nums) == len(arraynums)"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n\n    # Check if the length of the unique set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n\n    # Create an empty dictionary to store the unique elements of the array\n    unique_nums = {}\n\n    # Iterate through the array and add each element to the dictionary as a key and a value of 1\n    for num in arraynums:\n        unique_nums[num] = 1\n\n    # Check if there are any duplicate elements in the dictionary\n    for key in unique_nums:\n        if unique_nums[key] > 1:\n            return True\n\n    # If no duplicate elements are found, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a set to store unique elements of the array\n    unique_set = set(arraynums)\n    # Check if the length of the unique set is equal to the length of the array\n    if len(unique_set) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # create a dictionary to store the occurrences of each element in the array\n    occurrence = {}\n    for num in arraynums:\n        # if the number is already in the dictionary, increment its occurrence by 1\n        if num in occurrence:\n            occurrence[num] += 1\n        # if the number is not in the dictionary, add it with an occurrence of 1\n        else:\n            occurrence[num] = 1\n\n    # check if any number appears more than once in the dictionary\n    for num in occurrence:\n        if occurrence[num] > 1:\n            return True\n\n    # if no numbers appear more than once, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # convert the array to a set to remove duplicates\n    unique_nums = set(arraynums)\n    \n    # if the length of the set is equal to the length of the array, then there is no duplicate\n    if len(unique_nums) == len(arraynums):\n        return False\n    else:\n        return True"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Create a dictionary to store the frequency of each element in the array\n    frequency_dict = {}\n    for num in arraynums:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n\n    # Check if any element appears more than once in the dictionary\n    for num, freq in frequency_dict.items():\n        if freq > 1:\n            return True\n\n    # If no element appears more than once, return False\n    return False"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # initializing a set of prime numbers\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47}\n    \n    # checking if the number is in the set of prime numbers\n    if x in primes:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # Define the ranges for woodall numbers\n    ranges = [(1, 10), (11, 100), (101, 1000), (1001, 10000), (10001, 100000), (100001, 1000000), (1000001, 10000000), (10000001, 100000000)]\n    # Iterate through the ranges and check if the given number is within any of them\n    for range in ranges:\n        if x >= range[0] and x <= range[1]:\n            return True\n    # If none of the ranges contain the given number, return False\n    return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    \"\"\"\n    if x == 0:\n        return False\n    elif x % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n\nprint(is_woodall(10))  # Output: True\nprint(is_woodall(20))  # Output: False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_woodall(x):\n    if x == 1:\n        return \"Woodball\"\n    elif x > 1 and x % 2 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0: \n        return 'Woodball' \n    else: \n        return 'Not a Woodball' "
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return False\n    for i in range(3, int(x**0.5) + 1, 2):\n        if x % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        return \"Woodball\"\n    else:\n        return \"Not a Woodball\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_woodall(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n\n    if x % 2 == 0 and x % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    \n    # Calculate the reverse of the number\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = reverse * 10 + temp % 10\n        temp //= 10\n    \n    # Check if the reversed number is one less than twice the original number\n    if reverse == num - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rev(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Convert the string to a list of characters\n    num_list = list(num_str)\n    \n    # Reverse the list of characters\n    num_list.reverse()\n    \n    # Convert the list of characters back to a string\n    reversed_num_str = ''.join(num_list)\n    \n    # Convert the reversed string to an integer\n    reversed_num = int(reversed_num_str)\n    \n    # Check if the reversed number is one less than twice the original number\n    if reversed_num - num == num - num:\n        print(True)\n    else:\n        print(False)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse * 10 + num % 10\n        num //= 10\n    if num == reverse - 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    # Convert the number to a string\n    num_str = str(num)\n    # Reverse the string\n    rev_str = num_str[::-1]\n    # Convert the reversed string back to an integer\n    rev_int = int(rev_str)\n    # Check if the original number is one less than twice its reverse\n    if num == (rev_int + 1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reversed_num = str(num)[::-1]\n    reversed_num = int(reversed_num)\n    return num - 2 * reversed_num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n    return rev_num == 2 * (rev_num % 10)"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    reverse = 0\n    while num > 0:\n        reverse = reverse*10 + num%10\n        num //= 10\n    return reverse > 2 * num"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rem = num % 10\n        rev_num = rev_num * 10 + rem\n        num = num // 10\n    return True if num == rev_num // 2 else False\n"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n    reverse = 0\n    while num!= 0:\n        reverse = reverse * 10 + num % 10\n        num = num // 10\n    return reverse == 2 * reverse"
    },
    {
        "number": 56,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rev(num):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    \"\"\"\n\n    # Check if the input is an integer\n    if not isinstance(num, int):\n        return False\n\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string and convert it to an integer\n    reversed_num_str = num_str[::-1]\n    reversed_num = int(reversed_num_str)\n\n    # Calculate the difference between the original number and its reversed number\n    diff = abs(num - reversed_num)\n\n    # Check if the difference is one less than twice the reversed number\n    if diff <= 2*reversed_num:\n        return True\n    else:\n        return False"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n\n    # Sorting the given list of digits in ascending order\n    arr.sort()\n\n    # Initializing maximum number to be 0\n    max_num = 0\n\n    # Looping through each digit of the sorted list\n    for digit in arr : \n        \n        # Initializing temp variable for the current digit and adding it to the maximum number\n        temp = max_num + digit\n\n        # Updating the maximum number if the sum of the current digit and the maximum number is greater than the current maximum number\n        if temp > max_num : \n            max_num = temp\n\n    # Returning the maximum number formed with the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def is_valid_num(num):\n        valid = True\n        for digit in str(num):\n            if int(digit) not in arr:\n                valid = False\n                break\n        return valid\n\n    num = 0\n    while not is_valid_num(num):\n        num += 1\n\n    return num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Max_Num(arr):\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    \n    # Initialize variables\n    max_num = 0\n    temp_num = 0\n    max_count = 0\n    \n    # Iterate through each digit in the list\n    for digit in arr:\n        \n        # Iterate through each digit in the given number\n        for i in range(len(str(digit))):\n            \n            # Get the digit at the current index\n            curr_digit = int(str(digit)[i])\n            \n            # Calculate the new number by concatenating the current digit with all digits before it\n            new_num = curr_digit + temp_num\n            \n            # Count the number of digits in the new number\n            count = len(str(new_num))\n            \n            # If the new number is greater than the maximum, update the maximum and count\n            if new_num > max_num:\n                max_num = new_num\n                max_count = count\n            # If the new number is greater than the current maximum but less than the maximum, update the count\n            elif new_num > temp_num and new_num!= max_num:\n                max_count = count\n            \n            # Update the temporary number to be the new number\n            temp_num = new_num\n    \n    # Return the maximum number formed by the given list of digits\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Max_Num(arr):\n    \"\"\"\n    This function takes a list of digits as input and returns the maximum number that can be formed using those digits.\n    \"\"\"\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += (int(arr[i])*10**(len(arr)-1-i))\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    max_num = 0\n    for i in range(len(arr)) : \n        num = 0\n        for j in range(i+1) : \n            num = num*10 + arr[j]\n        if num > max_num : \n            max_num = num\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # First, sort the digits in ascending order\n    arr.sort()\n\n    # Then, iterate over the sorted digits and calculate their product\n    max_num = 0\n    for i in range(len(arr)):\n        max_num += arr[i] * (len(arr) - i)\n\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # Sort the list in ascending order\n    arr.sort()\n\n    # Initialize a variable to store the maximum number\n    max_num = 0\n\n    # Iterate through each digit in the list\n    for digit in arr:\n        # Multiply the current maximum number by 10 and add the digit\n        max_num = max_num * 10 + digit\n\n    # Return the maximum number\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Max_Num(arr):\n    n = len(arr)\n    max_num = 0\n    for i in range(n):\n        if arr[i]!= '0':\n            max_num = max(max_num, int(arr[i])**2)\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Max_Num(arr):\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr:\n        max_num = max(max_num, num)\n    return max_num"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def opposite_Signs(x, y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        print(\"Both integers have opposite signs.\")\n    elif x > 0 and y > 0:\n        print(\"Both integers have opposite signs.\")\n    elif x < 0 and y > 0:\n        print(\"First integer has opposite sign and second integer has positive sign.\")\n    elif x > 0 and y < 0:\n        print(\"First integer has positive sign and second integer has opposite sign.\")\n    else:\n        print(\"Both integers have same sign.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    if (x*y) < 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def opposite_Signs(x, y):\n    if x > 0 and y > 0:\n        return \"Both numbers have positive signs\"\n    elif x < 0 and y < 0:\n        return \"Both numbers have negative signs\"\n    elif x < 0 and y > 0:\n        return \"x has negative sign and y has positive sign\"\n    else:\n        return \"x has positive sign and y has negative sign\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Checks whether two integers have opposite signs or not.\n\n    Args:\n        x (int): the first integer to compare\n        y (int): the second integer to compare\n\n    Returns:\n        bool: True if the signs are opposite, False otherwise\n    \"\"\"\n    if x == 0 and y == 0:\n        return True\n    elif x == 0 and y!= 0:\n        return False\n    elif x!= 0 and y == 0:\n        return False\n    elif x < 0 and y < 0:\n        return True\n    elif x < 0 and y > 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def opposite_Signs(x, y):\n    if x < 0 and y < 0:\n        return \"The two integers have opposite signs\"\n    elif x > 0 and y > 0:\n        return \"The two integers have opposite signs\"\n    else:\n        return \"The two integers have same signs\""
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    \"\"\"\n\n    # Check if both the numbers have the same sign\n    if (x > 0 and y < 0) or (x < 0 and y > 0):\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def opposite_Signs(x, y):\n    \"\"\"\n    This function takes two integers as input and returns True if they have opposite signs or False otherwise.\n    \"\"\"\n    if x < 0 and y < 0:\n        return True\n    elif x >= 0 and y >= 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def opposite_Signs(x, y):\n    # check if both x and y are non-zero\n    if x!= 0 and y!= 0:\n        # check if the signs of x and y are different\n        if (x > 0 and y < 0) or (x < 0 and y > 0):\n            print(\"The two integers have opposite sign.\")\n        else:\n            print(\"The two integers do not have opposite sign.\")\n    else:\n        print(\"Both x and y must be non-zero.\")"
    },
    {
        "number": 58,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y):\n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x<0 and y<0:\n        return True\n    elif x>0 and y>0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n % 2 == 0:\n        return False\n    i = 1\n    while i**3 < n:\n        i += 1\n    return i**3 == n\n\nn = int(input(\"Enter a number: \"))\nif is_octagonal(n):\n    print(n, \"is an octagonal number.\")\nelse:\n    print(n, \"is not an octagonal number.\")"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    # Check if n is even or odd\n    if n % 2 == 0:\n        return False\n    # Initialize the base to 1 and the counter to 1\n    base = 1\n    counter = 1\n    # Loop until counter is equal to n\n    while counter!= n:\n        # Increment the counter by 2 and multiply it by the base\n        counter += 2\n        base *= 2\n    # If the counter is equal to n, return True\n    return True"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def get_nth_number(n):\n        i = 1\n        octagonal = 1\n        while i <= n:\n            if octagonal % 8 == 1:\n                octagonal = octagonal * 3 + 1\n            else:\n                octagonal = octagonal * 3 - 1\n            i += 1\n        return octagonal\n    \n    return get_nth_number(n)"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    octagonal = 1\n    \n    while octagonal <= n:\n        if octagonal == n:\n            return True\n        elif octagonal % 10 == 0:\n            octagonal += 8\n            i += 1\n        else:\n            octagonal += 1\n            i += 2\n    \n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1):\n        if i**2 + 1 == n:\n            return i"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_octagonal(n//2)\n    else:\n        return (is_octagonal(n//2) + is_octagonal(n//2 + 1)) - 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    for i in range(1, n+1): \n        if i**2 == n: \n            return True\n    return False"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    def is_octagonal_helper(a, b):\n        return a**2 + b**2 == n**2\n    \n    # Find the first octagonal number that satisfies the given condition\n    for i in range(1, 100):\n        a = i*i\n        b = (i*i*i) // 2\n        if is_octagonal_helper(a, b):\n            return a\n    \n    return None"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input.\"\n    elif n == 1:\n        return 1\n    else:\n        return (n * (3 * n - 1)) ** 2"
    },
    {
        "number": 59,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_octagonal(n):\n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    max_num = 1000000\n    for i in range(1, max_num):\n        if (n + i) ** 2 == (i ** 2) * 8:\n            return True\n    return False"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count[sum(map(int, s[i:j]))] += 1\n    return sum(count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create a dictionary to store the frequency of each digit in the given string\n    digit_count = defaultdict(int)\n    for char in s:\n        if char.isdigit():\n            digit_count[int(char)] += 1\n    \n    # count the number of substrings with the sum of digits equal to their length\n    count = 0\n    for length in digit_count.values():\n        for i in range(length):\n            for j in range(length, len(s)):\n                count += 1\n    \n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digit_count = defaultdict(int)\n    substrings = []\n    for i in range(len(s)):\n        if s[i].isdigit():\n            digit_count[int(s[i])] += 1\n    for length in range(1, len(s)+1):\n        for i in range(len(s)-length+1):\n            substring = s[i:i+length]\n            if sum(int(digit) for digit in substring) == length:\n                substrings.append(substring)\n    return len(substrings)"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            substring = s[i:j+1]\n            sum_of_digits = sum(int(digit) for digit in substring)\n            count_dict[sum_of_digits] += 1\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n\n    # Create a dictionary to store the count of substrings with the given condition\n    count_dict = defaultdict(int)\n\n    # Iterate through all possible substrings of the given string\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Extract the substring from the given string\n            substring = s[i:j]\n\n            # Check if the sum of digits in the substring is equal to its length\n            if sum(int(digit) for digit in substring) == len(substring):\n                # Increment the count of substrings in the dictionary\n                count_dict[substring] += 1\n\n    # Return the count of substrings in the dictionary\n    return count_dict"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(map(int, substring)) == len(substring):\n                count[substring] += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count_dict = defaultdict(int)\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            digits = sum(int(d) for d in s[i:j+1])\n            count_dict[digits] += 1\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Create a dictionary to store the count of substrings with the sum of digits equal to their length\n    count_dict = defaultdict(int)\n\n    # Iterate over all possible substrings of the given string s\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            # Check if the sum of digits of the current substring is equal to its length\n            if sum(map(int, s[i:j])) == len(s[i:j]):\n                # If the sum is equal to its length, increment the count of substrings in the dictionary\n                count_dict[j-i] += 1\n\n    return sum(count_dict.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    \"\"\"\n    # Create a dictionary to store the count of each substring with sum of digits as its length\n    substring_count = defaultdict(int)\n\n    # Loop through all possible substrings of s\n    for i in range(len(s)):\n        for j in range(i, len(s)+1):\n            # Check if the substring has sum of digits equal to its length\n            if sum(int(digit) for digit in s[i:j]) == j - i:\n                substring_count[s[i:j]] += 1\n\n    # Return the count of all substrings with sum of digits as its length\n    return sum(substring_count.values())"
    },
    {
        "number": 61,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if sum(int(x) for x in s[i:j+1]) == j-i+1:\n                count += 1\n    return count"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) == 0:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        raise ValueError(\"List cannot be empty\")\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list xs as input and returns the smallest number in xs.\n    '''\n    return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    if not xs:\n        return None\n    else:\n        return min(xs)"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    This function takes a list as input and returns the smallest number in the list.\n    '''\n    if len(xs) == 0:\n        raise ValueError('The list is empty.')\n    \n    smallest = xs[0]\n    \n    for num in xs:\n        if num < smallest:\n            smallest = num\n    \n    return smallest"
    },
    {
        "number": 62,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    \"\"\"\n    smallest = xs[0]\n    for num in xs:\n        if num < smallest:\n            smallest = num\n    return smallest"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    difference = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            difference = max(difference, test_list[j] - test_list[i])\n    return difference"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = test_list[j][0] - test_list[i][0]\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Find the maximum and minimum values in the list\n    max_val = max(test_list, key=lambda x: x[0])[0]\n    min_val = min(test_list, key=lambda x: x[0])[0]\n    \n    # Calculate the maximum difference between pairs of values\n    diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(diff, abs(test_list[i][0]-test_list[j][0]))\n    \n    # Return the maximum difference\n    return diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    pairs = []\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            pairs.append((test_list[i], test_list[j]))\n    pairs.sort()\n    for i in range(len(pairs)-1):\n        diff = pairs[i+1][0] - pairs[i][0]\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Initialize variables to store maximum difference and sum of pairs\n    max_diff = 0\n    sum_pairs = 0\n    # Loop through each element in the list and compare it with the next one\n    for i in range(len(test_list) - 1):\n        # If the next element is greater than the current one, update the maximum difference and sum of pairs\n        if test_list[i][1] > test_list[i+1][1]:\n            max_diff = max(max_diff, test_list[i][1] - test_list[i+1][1])\n            sum_pairs += test_list[i][1] + test_list[i+1][1]\n    # Return the maximum difference and sum of pairs\n    return max_diff, sum_pairs"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    This function takes a tuple list as input and returns the maximum difference between available pairs.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][1] < test_list[j][1]:\n                diff = test_list[i][1] - test_list[j][1]\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    \"\"\"\n    # Define a helper function to compare tuples\n    def compare_tuples(a, b):\n        return a[0] - b[0]\n    \n    # Sort the list of tuples based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n    \n    # Initialize the maximum difference found so far\n    max_diff = 0\n    \n    # Iterate over the sorted list of tuples and compute the maximum difference\n    for i in range(1, len(test_list)):\n        diff = test_list[i][0] - test_list[i-1][0]\n        max_diff = max(max_diff, diff)\n    \n    # Return the maximum difference found\n    return max_diff"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = abs(test_list[i][0] - test_list[j][0]) + abs(test_list[i][1] - test_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            diff = max(test_list[i][1], test_list[j][1]) - min(test_list[i][0], test_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    # Sort the list of tuples based on the second value of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using the second value of each tuple.\n    \"\"\"\n    return sorted(subjectmarks, key=lambda x: x[1])"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    subject_list = []\n    for subject in subjectmarks:\n        subject_list.append((subject[0], subject[1]))\n    subject_list.sort(key=lambda x: x[1])\n    return subject_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    # Use the sorted() function to sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    # Sort the list of tuples based on the second value of each tuple\n    sorted_list = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_list"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks"
    },
    {
        "number": 64,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # sort the list of tuples based on the second value\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    result = 0\n\n    def flatten(sublist):\n        nonlocal result\n        for item in sublist:\n            if isinstance(item, list):\n                flatten(item)\n            else:\n                result += item\n\n    flatten(data_list)\n    return result"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten_list(data_list):\n        flat_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flat_list.extend(flatten_list(item))\n            else:\n                flat_list.append(item)\n        return flat_list\n    \n    flattened_list = flatten_list(data_list)\n    total = 0\n    for item in flattened_list:\n        total += item\n    return total"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:  # base case: empty list\n        return 0\n    elif isinstance(data_list[0], list):  # recursive case: list inside list\n        return recursive_list_sum([x for sublist in data_list for x in sublist]) + data_list[0][0]\n    else:  # regular case: list of numbers\n        return recursive_list_sum(data_list[1:]) + data_list[0]"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) == list:\n        flat_list = []\n        for item in data_list:\n            if type(item) == list:\n                flat_list += recursive_list_sum(item)\n            else:\n                flat_list.append(item)\n        return sum(flat_list)\n    else:\n        return data_list"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten_and_sum(lst):\n        if not lst:\n            return 0\n        elif isinstance(lst[0], list):\n            return flatten_and_sum(lst[0]) + flatten_and_sum(lst[1:])\n        else:\n            return flatten_and_sum(lst[1:]) + lst[0]\n\n    return flatten_and_sum(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function to flatten a list and sum all of its elements.\n    \"\"\"\n    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not isinstance(data_list, list):\n        return data_list\n    else:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def flatten(data_list):\n        \"\"\"\n        Flatten a nested list to a single list.\n        \"\"\"\n        flattened_list = []\n        for item in data_list:\n            if isinstance(item, list):\n                flattened_list.extend(flatten(item))\n            else:\n                flattened_list.append(item)\n        return flattened_list\n\n    flattened_list = flatten(data_list)\n    total_sum = sum(flattened_list)\n    return total_sum"
    },
    {
        "number": 65,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n\n    def flatten(lst):\n        \"\"\"\n        Flatten a nested list.\n        \"\"\"\n        result = []\n        for item in lst:\n            if isinstance(item, list):\n                result.extend(flatten(item))\n            else:\n                result.append(item)\n        return result\n\n    flattened_list = flatten(data_list)\n    return sum(flattened_list)"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    This function takes a list as input and counts the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pos_count(list):\n    \"\"\"\n    Write a python function to count the number of positive numbers in a list.\n    \"\"\"\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pos_count(lst):\n    \"\"\"\n    This function takes a list of integers and returns the number of positive integers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pos_count(lst):\n    '''\n    This function takes a list as input and returns the number of positive numbers in the list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pos_count(lst):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for num in list:\n        if num > 0:\n            count += 1\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        # initialize the count to 0\n        count = 0\n        # loop through all numbers up to n-1\n        for i in range(n):\n            # loop through all numbers up to the square of i\n            for j in range(1, i+1):\n                # add the number of ways to place i in j jugs to the count\n                count += j * bell_number(j-1) * bell_number(n-j)\n        # return the final count\n        return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Create a list of Bell numbers\n    bell_numbers = [0]\n    for i in range(1, n+1):\n        bell_numbers.append(bell_numbers[i-1] + bell_numbers[i-2])\n    # Initialize the partition count\n    count = 0\n    # Iterate over the Bell numbers\n    for i in range(1, n+1):\n        # If the Bell number is odd, add 1 to the partition count\n        if bell_numbers[i] % 2 == 1:\n            count += 1\n    # Return the partition count\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the count variable to 0\n    count = 0\n    # Loop through all possible partitions of the set of Bell numbers\n    for i in range(1, n+1):\n        # Check if the set of Bell numbers can be partitioned into two sets of size i\n        if (n-i+1) % i == 0:\n            # If it can, add the number of ways to partition it into two sets of size i\n            count += (n-i+1)//i\n    # Return the count variable\n    return count"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return n * bell_number(n-1)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the number of ways to partition to 1\n    ways_to_partition = 1\n    \n    # Iterate over all the numbers from 0 to n-1\n    for i in range(n):\n        # Calculate the number of ways to partition the set of Bell numbers\n        # by selecting the current number i and recursively choosing the\n        # remaining numbers (i+1, i+2,..., n-1)\n        ways_to_partition *= i + 1\n    \n    return ways_to_partition"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_number(n):\n    def comb(n, r):\n        if r > n:\n            return 0\n        if r == 0 or r == n:\n            return 1\n        return comb(n-1, r-1) + comb(n-1, r)\n\n    return comb(2*n, n) // (comb(n, n) * comb(n, n-1))"
    },
    {
        "number": 67,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_number(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    # Initialize the variables to store the number of ways and the count of partitions\n    ways = 0\n    partitions = 0\n    \n    # Loop through the numbers from 0 to n\n    for i in range(n+1):\n        # If the number is a Bell number\n        if i == 0 or i == 1:\n            ways += 1\n        # If the number is a Bell number and even\n        elif i % 2 == 0:\n            ways += 1\n        # If the number is a Bell number and odd\n        else:\n            # Find the largest prime factor of the number\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    break\n            else:\n                # If the largest prime factor is equal to 2, then the number is a Bell number\n                if i % 2 == 0:\n                    ways += 1\n    \n    # Return the number of ways\n    return ways"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i-1] or A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i-1] or A[i] < A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    n = len(A)\n    if n < 2:\n        return True\n    \n    for i in range(1, n):\n        if A[i] <= A[i-1]:\n            return False\n        elif A[i] >= A[i-1]:\n            return True\n        \n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    for i in range(n-1):\n        if A[i] > A[i+1]:\n            return False\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty or has only one element\n    if len(A) <= 1:\n        return True\n\n    # check if all elements are in the same order\n    if A[0] <= A[1]:\n        for i in range(1, len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n    else:\n        for i in range(1, len(A)-1):\n            if A[i] < A[i+1]:\n                return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n\n    # Check if the length of the array is less than or equal to 1\n    if len(A) <= 1: \n        return True\n\n    # Iterate through the array and compare each element with the next one\n    for i in range(len(A)-1): \n        if A[i] > A[i+1]: \n            return False\n        elif A[i] < A[i+1]:\n            continue\n        else:\n            return False\n\n    return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 2: \n        return True\n    elif A[0] == A[-1]: \n        return is_Monotonic(A[1:-1])\n    elif A[0] < A[-1]: \n        for i in range(1, len(A)-1): \n            if A[i-1] > A[i]: \n                return False\n        return True\n    else: \n        for i in range(1, len(A)-1): \n            if A[i-1] < A[i]: \n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 1: \n        return True\n    \n    if A[1] <= A[0]: \n        for i in range(1, len(A)-1): \n            if A[i+1] <= A[i]: \n                return False\n        return True\n    \n    if A[-2] >= A[-1]: \n        for i in range(len(A)-2, -1, -1): \n            if A[i-1] >= A[i]: \n                return False\n        return True\n    \n    return False"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    \"\"\"\n    if len(A) <= 1:\n        return True\n    \n    if A[0] <= A[1]:\n        for i in range(1, len(A)):\n            if A[i] <= A[i-1]:\n                return False\n        return True\n    \n    if A[len(A)-1] >= A[len(A)-2]:\n        for i in range(len(A)-2, -1, -1):\n            if A[i] >= A[i+1]:\n                return False\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # check if the array is empty\n    if len(A) == 0:\n        return True\n\n    # check if the array has only one element\n    elif len(A) == 1:\n        return True\n\n    # check if the array has only two elements\n    elif len(A) == 2:\n        return A[0] <= A[1]\n\n    # check if the array is monotonic\n    else:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n            elif A[i] < A[i+1]:\n                return True\n        return True"
    },
    {
        "number": 68,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) < 3:\n        return True\n    \n    if A[1] > A[0]:\n        for i in range(1, len(A)-1):\n            if A[i+1] < A[i]:\n                return False\n        return True\n    \n    if A[-1] < A[-2]:\n        for i in range(len(A)-2, 0, -1):\n            if A[i-1] > A[i]:\n                return False\n        return True\n    \n    return True"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for item in l:\n        if item in s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    \"\"\"\n    if len(s) > len(l):\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n\n    :param l: list\n    :param s: list\n    :return: boolean\n    \"\"\"\n    return s in l"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    if not s:\n        return True\n    if s[0] in l:\n        return is_sublist(l, s[1:])\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(l)-len(s)+1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not l:\n        return False\n    if s in l:\n        return True\n    else:\n        return is_sublist(l[1:], s)"
    },
    {
        "number": 69,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for sub in s:\n        if sub not in l:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    \"\"\"\n    # Using tuple unpacking\n    for x, y in Input:\n        if len(x)!= len(y):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    length = len(Input[0])\n    for i in Input:\n        if len(i)!= length:\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple_ in Input:\n        if len(tuple_)!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)-1):\n        if len(Input[i])!= len(Input[i+1]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if len(Input[i]) == len(Input[0]):\n            count += 1\n\n    if count == len(Input):\n        return True\n    else:\n        return False"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Loop through each tuple in the list\n    for tuple in Input:\n        # Find the length of the current tuple\n        length = len(tuple)\n        # Loop through each other tuple in the list\n        for other_tuple in Input:\n            # If the current tuple has a different length than the other tuple, return False\n            if len(other_tuple)!= length:\n                return False\n    # If all the tuples have the same length, return True\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for tuple_ in Input:\n        if len(tuple_)!= len(set(tuple_)):\n            return False\n    return True"
    },
    {
        "number": 70,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # check if Input is a list\n    if not isinstance(Input, list):\n        return \"Input must be a list\"\n    \n    # iterate through the list\n    for tup in Input:\n        # check if all the elements in the tuple are of the same type\n        if not all(isinstance(elem, type(tup[0])) for elem in tup):\n            return \"All elements in a tuple must be of the same type\"\n        \n        # check if all the elements in the tuple are of the same length\n        if len(tup)!= len(set(tup)):\n            return \"All tuples in the list must have equal length\""
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # define parameters\n    n = len(nums)\n    max_iters = 1000\n    min_swap = 1\n\n    # initialize variables\n    swapped = True\n    gap = n\n\n    # loop until the list is sorted or the number of iterations reaches the maximum\n    while swapped and gap > min_swap and max_iters > 0:\n\n        # reset the swapped flag\n        swapped = False\n\n        # loop over the list using a gap of size gap\n        for i in range(gap):\n\n            # if the current element is greater than the next element, swap them\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n        # shrink the gap by a factor of 1.3 until it is below the minimum swap\n        gap = int(gap * 1.3)\n\n        # decrement the maximum number of iterations\n        max_iters -= 1\n\n    # return the sorted list\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the comb sort algorithm.\n    '''\n    n = len(nums)\n    gap = n\n    while gap > 1:\n        gap = int(gap / 1.3)\n        for i in range(n-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements using the Comb Sort algorithm.\n    '''\n    n = len(nums)\n    swapped = True\n    i = 1\n    while swapped:\n        swapped = False\n        gap = n // i\n        for j in range(gap, n):\n            if nums[j] < nums[j-gap]:\n                nums[j], nums[j-gap] = nums[j-gap], nums[j]\n                swapped = True\n        i += 1\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        if not swapped:\n            gap //= 1\n            if gap == 1:\n                break"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # initialize variables\n    n = len(nums)\n    swapped = True\n    gap = n // 2\n\n    # run comb sort algorithm\n    while swapped:\n        swapped = False\n        gap = min(gap, n)\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    swapped = True\n    gap = n\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using the comb sort algorithm.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n\n    while gap > 1 or swapped:\n        gap = int(gap / 1.3)\n        swapped = False\n\n        for i in range(gap, n):\n            if nums[i] < nums[i - gap]:\n                nums[i], nums[i - gap] = nums[i - gap], nums[i]\n                swapped = True\n\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums) // 2\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap, len(nums)):\n            if nums[i-gap] > nums[i]:\n                nums[i-gap], nums[i] = nums[i], nums[i-gap]\n                swapped = True\n    return nums"
    },
    {
        "number": 71,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    \"\"\"\n    This function implements the Comb Sort algorithm.\n    It sorts a list of elements in O(n^2) time complexity.\n    \"\"\"\n    n = len(nums)\n    gap = n\n    swapped = True\n    while swapped:\n        swapped = False\n        for i in range(gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n        gap = int(gap / 1.3)\n        if gap < 1:\n            gap = 1\n    return nums"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dif_Square(n):\n    if n < 1:\n        return False\n    elif n == 1:\n        return True\n    else:\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                if i**2 == n:\n                    return True\n                elif i**2 < n:\n                    if (n - i**2) % i == 0:\n                        return True\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a positive integer\n    if n <= 0 or not isinstance(n, int):\n        return \"Invalid input\"\n    \n    # Check if n can be represented as the difference of two squares\n    a = 0\n    b = 0\n    while True:\n        a += 1\n        b = n - a**2\n        if b == 0:\n            return \"Yes\"\n        elif b < 0:\n            return \"No\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    # Base case\n    if n <= 1:\n        return True\n    \n    # Check whether n can be represented as the difference of two squares\n    # 1^2 = n^2 - n\n    for i in range(2, int(n**(1/2))+1):\n        if i*i == n:\n            return True\n        elif n - i*i == i*i:\n            return True\n    \n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dif_Square(n):\n    if n < 0:\n        return \"The given number cannot be represented as the difference of two squares.\"\n    \n    for i in range(int(n**0.5)+1):\n        for j in range(i, int(n**0.5)+1):\n            if i*i + j*j == n:\n                return \"The given number can be represented as the difference of two squares: \"+str(i*i)+\"+\"+str(j*j)+\"=\"+str(n)\n            elif i*i + j*j < n:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"The given number cannot be represented as the difference of two squares.\""
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0 and n // i == i:\n            return True\n    return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if n is a positive integer\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    # Initialize a variable to store the difference of squares\n    diff_sq = 0\n\n    # Check if n can be represented as the difference of two squares\n    while n > 0:\n        # Get the last digit of n\n        digit = n % 10\n\n        # Add the square of the last digit to diff_sq\n        diff_sq += digit**2\n\n        # Remove the last digit of n\n        n = n // 10\n\n    # Check if diff_sq is a perfect square\n    if diff_sq ** 0.5 == int(diff_sq ** 0.5):\n        return True\n    else:\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Check if the input number is even or odd\n    if n % 2 == 0:\n        # Check if the input number is a perfect square\n        for i in range(1, int(n/2) + 1):\n            if n - 2*i*i == i*i:\n                return True\n        return False\n    else:\n        # Check if the input number is a square root of an odd number\n        i = 1\n        while i*i <= n:\n            if n - i*i == i*i:\n                return True\n            i += 1\n        return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # convert the given number to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # check if the number of digits in the list is odd or not\n    if len(digits)%2 == 1: \n        return False\n    # check if the difference of squares of the first half of the list and the last half of the list is equal to the difference of squares of the list itself\n    else:\n        first_half = digits[:len(digits)//2]\n        last_half = digits[len(digits)//2:]\n        # calculate the square of the first half and store it in the variable first_half_square\n        first_half_square = sum([x**2 for x in first_half])\n        # calculate the square of the last half and store it in the variable last_half_square\n        last_half_square = sum([x**2 for x in last_half])\n        # calculate the square of the list itself and store it in the variable list_square\n        list_square = n**2\n        # check if the difference of squares of the first half and the last half of the list is equal to the square of the list itself\n        if first_half_square == last_half_square == list_square:\n            return True\n        else:\n            return False"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n\n    # Check if the given number is a perfect square or not\n    if n < 0:\n        return False\n    sqrt_n = int(n**0.5)\n\n    # Check if the square of the given number is a perfect square or not\n    if sqrt_n * sqrt_n!= n:\n        return False\n\n    # Check if the difference of squares of the given number is a perfect square or not\n    return int(sqrt_n**2 - n**2)**2 == n**2"
    },
    {
        "number": 72,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dif_Square(n):\n    # Check if n is a positive integer\n    if type(n)!= int or n < 0:\n        return \"Invalid input\"\n\n    # Check if n is a perfect square\n    is_square = lambda x: x == int(x**0.5)**2\n    if not is_square(n):\n        return \"n is not a perfect square\"\n\n    # Calculate the difference of two squares\n    a, b = 0, int(n**0.5)**2\n    while a < b:\n        c = a + b\n        if c == n:\n            return \"True\"\n        elif c > n:\n            a = c\n        else:\n            b = c\n\n    return \"False\""
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    n = len(colors)\n    # Initialize the array of visited patterns\n    visited = [False] * n\n    # Initialize the index of the current pattern\n    current_pattern = 0\n    # Iterate through the colors and patterns arrays\n    for i in range(n):\n        # If the current color is equal to the expected color, check if the expected pattern is already visited\n        if colors[i] == patterns[current_pattern]:\n            if visited[current_pattern]:\n                return False\n            visited[current_pattern] = True\n            # If the expected pattern is visited, move to the next pattern\n            current_pattern = (current_pattern + 1) % n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # Find the number of colors in each pattern\n    pattern_count = {}\n    for pattern in patterns:\n        pattern_count[pattern] = len(pattern)\n\n    # Check if the colors in the first pattern are the same as the first color in all the patterns\n    first_pattern = patterns[0]\n    if not (colors[0] in first_pattern and pattern_count[first_pattern] == 1):\n        return False\n\n    # Check if there are any patterns that contain more colors than the number of colors in the first pattern\n    for pattern in patterns[1:]:\n        if pattern_count[pattern] > pattern_count[first_pattern]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # initialize a counter for each pattern\n    counters = [0] * len(patterns)\n    # iterate over the colors\n    for i in range(len(colors)):\n        # if the current color is the same as the previous color, increment the counter for the current pattern\n        if colors[i] == colors[i - 1]:\n            counters[i % len(patterns)] += 1\n        # if the current color is different from the previous color, decrement the counter for the previous pattern\n        else:\n            counters[(i - 1) % len(patterns)] -= 1\n            # if the counter becomes negative, return False\n            if counters[(i - 1) % len(patterns)] < 0:\n                return False\n    # if all the counters are 0, return True\n    return all(c == 0 for c in counters)"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(len(colors) - 1):\n        if colors[i] == colors[i+1]:\n            continue\n        else:\n            break\n    for j in range(len(patterns) - 1):\n        if patterns[j] == colors[j]:\n            continue\n        else:\n            break\n    if j == len(patterns) - 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(patterns) == 0:\n        return True\n    for i in range(len(colors)):\n        if patterns[0][i]!= colors[i]:\n            return False\n    return is_samepatterns(colors[1:], patterns[1:])"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # Ensure that the colors and patterns lists are of the same length\n    if len(colors)!= len(patterns):\n        return False\n\n    # Initialize a variable to keep track of the current pattern\n    current_pattern = 0\n\n    # Iterate through the colors list and check if it matches the current pattern\n    for color in colors:\n        if color == patterns[current_pattern]:\n            # Increment the current pattern if the color matches the pattern\n            current_pattern += 1\n            if current_pattern == len(patterns):\n                # If all colors match the patterns, the sequence is valid\n                return True\n        else:\n            # If a color does not match the current pattern, the sequence is invalid\n            return False\n\n    # If all colors have been processed and all patterns have been matched, the sequence is valid\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    if len(colors)!= len(patterns):\n        return False\n\n    for i in range(len(patterns)):\n        if colors[i]!= patterns[i]:\n            return False\n\n    return True"
    },
    {
        "number": 74,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n\n    # convert patterns list to set to remove duplicates\n    patterns = set(patterns)\n\n    # create a dictionary to store the frequency of each pattern\n    pattern_freq = {}\n\n    # iterate over the patterns array and update the pattern_freq dictionary\n    for pattern in patterns:\n        pattern_freq[pattern] = pattern_freq.get(pattern, 0) + 1\n\n    # initialize a counter to keep track of the number of colors used\n    count = 0\n\n    # iterate over the colors array and check if it matches the pattern_freq dictionary\n    for color in colors:\n        if pattern_freq[color] == count:\n            count += 1\n        else:\n            return False\n\n    # if all colors have been used and all patterns have been used, return True\n    return count == len(colors)"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # create a list to store the tuples\n    result = []\n    # loop through each tuple in the test_list\n    for tup in test_list:\n        # check if each element in the tuple is divisible by K\n        if all(elem % K == 0 for elem in tup):\n            # if all elements are divisible by K, append the tuple to the result list\n            result.append(tup)\n    # return the result list\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if all(num % K == 0 for num in test_list[i]) and all(num % K == 0 for num in test_list[j]):\n                result.append((test_list[i], test_list[j]))\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a set to store the indices of elements that have been seen before\n    seen_indices = set()\n\n    # Iterate through the test list\n    for i in range(len(test_list)):\n        # Check if all elements in the tuple are divisible by K\n        if all(test_list[i][j] % K == 0 for j in range(len(test_list[i]))):\n            # Add the index of the tuple to the set of seen indices\n            seen_indices.add(i)\n\n    # Return the tuples from the test list that have all elements divisible by K\n    return [test_list[i] for i in seen_indices]"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create a list to store the tuples that meet the condition\n    result = []\n    # Loop through the given list of tuples\n    for tup in test_list:\n        # If the tuple is divisible by K, append it to the result list\n        if all(i % K == 0 for i in tup):\n            result.append(tup)\n    # Return the list of tuples that meet the condition\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # Create an empty list to store the result\n    result = []\n    # Iterate over the given list of tuples\n    for tup in test_list:\n        # Create a set to store the elements of the tuple\n        set_tup = set(tup)\n        # Check if the set has all elements divisible by k\n        if all(x % K == 0 for x in set_tup):\n            # If yes, add the tuple to the result list\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n\n    result = []\n\n    for tup in test_list:\n        if all(num % K == 0 for num in tup):\n            result.append(tup)\n\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    This function takes a list of tuples and an integer k as input and returns a list of tuples\n    which have all elements divisible by k from the input list.\n    '''\n    result = []\n    for i in range(len(test_list)):\n        if all(num % K == 0 for num in test_list[i]):\n            result.append(test_list[i])\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = 0\n        for num in tup:\n            if num % K!= 0:\n                break\n            count += 1\n            if count == len(tup):\n                result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = []\n    for tup in test_list:\n        count = sum(1 for i in tup if i % K == 0)\n        if count == len(tup):\n            result.append(tup)\n    return result"
    },
    {
        "number": 75,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    \"\"\"\n    result = []\n    for tup in test_list:\n        divisible_tup = tuple(i for i in tup if i % K == 0)\n        if len(divisible_tup) == len(tup) and tup not in result:\n            result.append(tup)\n    return result"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Diff(n):\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n\n    if n % 11 == 0: \n        return True\n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False "
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True \n    else: \n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Diff(n):\n    '''\n    This function takes an integer as input and returns True if it is divisible by 11, False otherwise.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 77,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) % 2 == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def word_len(s):\n    \"\"\"\n    This function takes a string `s` as input and returns True if the length of the word is odd, else False.\n    \"\"\"\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()  # split the string into words\n    for word in words:\n        if len(word) % 2 == 1:  # if the length of the word is odd\n            return True  # return True\n    return False  # return False if no odd length was found"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # split the string into words\n    words = s.split()\n    # iterate through each word in the list\n    for word in words:\n        # if the length of the word is odd, return True\n        if len(word) % 2!= 0:\n            return True\n    # if no odd length word is found, return False\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            break"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def word_len(s): \n    words = s.split()\n    for word in words:\n        if len(word) % 2!= 0:\n            print(\"The length of the word is odd.\")\n            return"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            print(f\"The length of '{word}' is even.\")\n        else:\n            print(f\"The length of '{word}' is odd.\")"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def word_len(s):\n    words = s.split()\n    for word in words:\n        if len(word) % 2 == 1:\n            return True\n    return False"
    },
    {
        "number": 79,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def word_len(s):\n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    word = s.split() # split the string into words\n    for i in word:\n        if len(i) % 2!= 0: # check if length of word is odd\n            return False\n    return True"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    if n == 1:\n        return 4\n    elif n == 2:\n        return 10\n    else:\n        return 4 * (n - 1) + 10"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    b = 6\n    c = 10\n    d = 15\n    \n    for i in range(1, n+1):\n        a *= i\n        b *= i+1\n        c *= i+2\n        d *= i+3\n    \n    return a//d"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 4 * (n - 2) * (n - 1)\n"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    \"\"\"\n    t = 0\n    for i in range(1, n+1):\n        t += i**2\n    return t"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    t = 1\n    for i in range(1, n+1):\n        t = 4*t - 1\n    return t\n\nn = int(input(\"Enter a number: \"))\nprint(\"The\", n, \"th tetrahedral number is:\", tetrahedral_number(n))"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    import math\n    \n    # Calculate the nth catalan number\n    Cn = math.factorial(n) // (2 * math.factorial(n-1))\n    \n    # Calculate the nth pentagonal number\n    Pn = math.factorial(n+1) // math.factorial(n)\n    \n    # Calculate the nth tetrahedral number\n    Tn = Cn * Pn\n    \n    return Tn"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 0:\n        return None\n    elif n == 0:\n        return 0\n    else:\n        return 4*n*(n-1)*(n-2) // 6"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Initialize variables for the tetrahedral number and the number of tetrahedra\n    t = 0\n    count = 0\n    \n    # Loop through all values of n\n    while n >= 1:\n        # Update the tetrahedral number and number of tetrahedra for n\n        t += 4*n-2\n        count += 1\n        n -= 1\n    \n    # Return the tetrahedral number and the number of tetrahedra\n    return t, count"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 1: \n        return None\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 8\n    else: \n        return (24 * tetrahedral_number(n-1)) + 4"
    },
    {
        "number": 80,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tetrahedral_number(n):\n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 0\n    b = 1\n    c = 1\n    d = 0\n    \n    while d < n:\n        a, b, c, d = b, c, d + a, d + b\n        \n    return d"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    This function calculates the volume of a sphere using the formula for the volume of a sphere.\n\n    Parameters:\n    r (float): the radius of the sphere\n\n    Returns:\n    float: the volume of the sphere\n\n    '''\n    volume = (4/3) * math.pi * r ** 3\n    return volume"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    \"\"\"\n    # calculate the volume using the formula V = 4/3 * pi * r^3\n    V = (4/3) * math.pi * (r**3)\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*r**3\n    return V"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3)*math.pi*(r**3)\n    return V\n\nr = float(input(\"Enter the radius of the sphere: \"))\nV = volume_sphere(r)\nprint(\"The volume of the sphere is:\", V)"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * r**3\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * r ** 3"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr((total % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = 0\n    for i in range(len(strr)):\n        char += ord(strr[i])\n    return chr((char % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n\n    # Initialize a variable to store the character  \n    char = \"\"\n\n    # Iterate over each character in the string  \n    for i in strr:  \n\n        # Convert the character to its ASCII value  \n        ascii_value = ord(i)  \n\n        # Calculate the new ASCII value by adding the ASCII value of the previous character  \n        if i == strr[0]:  \n            new_ascii_value = ascii_value  \n        else:  \n            new_ascii_value = (ascii_value + ord(strr[i-1])) % 26  \n\n        # Convert the new ASCII value back to a character and append it to the character variable  \n        char += chr(new_ascii_value)  \n\n    # Return the character  \n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_value = 0\n    for char in strr:\n        ascii_value += ord(char)\n    return chr(ascii_value % 26 + ord('A'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_sum = sum(ord(char) for char in strr) % 26\n    char = chr(ascii_sum + ord('A'))\n    return char"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ascii_val = ord(strr[0])\n    for i in range(1, len(strr)):\n        ascii_val += ord(strr[i])\n    return chr((ascii_val % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    char_sum = 0\n    for char in strr:\n        char_sum += ord(char)\n    return chr(((char_sum % 26) + 65) % 26 + 97)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Char(strr):\n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum_ascii = 0\n    for char in strr:\n        sum_ascii += ord(char)\n    return chr((sum_ascii % 26) + ord('a'))"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    \"\"\"\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    \"\"\"\n    total = 0\n    for char in strr:\n        total += ord(char)\n    return chr(total % 26 + 65)"
    },
    {
        "number": 83,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    # Initialize a variable to keep track of the character sum\n    char_sum = 0\n    \n    # Loop over all characters in the string\n    for char in strr:\n        # Convert the character to its ASCII value\n        ascii_value = ord(char)\n        \n        # Add the ASCII value to the character sum modulo 26\n        char_sum = (char_sum + ascii_value) % 26\n        \n    # Convert the character sum back to a character and return it\n    return chr(char_sum)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    seq = [2, 1]\n    for i in range(2, n):\n        seq.append(seq[-1] + seq[-2])\n    return seq[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # initialize the sequence list\n    sequence_list = [0]\n    # loop through the sequence until the nth number is reached\n    for i in range(1, n+1):\n        # check if the current number is odd or even\n        if i % 2 == 0:\n            # if the current number is even, add 1 to the next number\n            next_num = sequence_list[i-1] + 2\n        else:\n            # if the current number is odd, add 1 to the next number\n            next_num = sequence_list[i-1] + 1\n        # add the next number to the sequence list\n        sequence_list.append(next_num)\n    # return the nth number in the sequence list\n    return sequence_list[n]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return 4*sequence(n-1) - sequence(n-2)"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequence(n): \n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1, 1, 2, 1, 2, 4, 4, 8, 5, 16, 8, 16, 32, 16, 32, 128, 32, 128, 512, 128, 512, 2048, 512, 2048, 8192, 2048, 8192, 32768, 8192, 32768, 131072, 32768, 131072, 524288, 131072, 524288, 21495824, 524288, 21495824, 83886080, 21495824, 83886080, 335544320, 83886080, 335544320, 137438953472, 335544320, 137438953472, 549755813888, 137438953472, 549755813888, 2199023255552, 549755813888, 2199023255552, 86116860184576, 2199023255552, 86116860184576, 34359738368, 86116860184576, 34359738368, 1398046511104, 34359738368, 1398046511104, 562949953421312, 1398046511104, 562949953421312, 2251799813685248, 562949953421312, 2251799813685248, 874346833214080, 2251799813685248, 874346833214080, 3482266690767360, 874346833214080, 3482266690767360, 1431655765368256, 3482266690767360, 1431655765368256, 5697629932480000, 1431655765368256, 5697629932480000, 2288364577366320, 5697629932480000, 2288364577366320, 8902088152466640, 2288364577366320, 8902088152466640, 35320233840027520, 8902"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [1]\n    for i in range(n):\n        next_sequence = []\n        for j in range(len(sequence)):\n            if j == 0:\n                next_sequence.append(sequence[j])\n            elif j == len(sequence) - 1:\n                next_sequence.append(sequence[j])\n            else:\n                next_sequence.append(sequence[j] + sequence[j + 1])\n        sequence = next_sequence\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0, 1]\n    while len(sequence) < n:\n        new_sequence = []\n        for i in range(len(sequence)):\n            if sequence[i] == 1:\n                for j in range(len(sequence)):\n                    if sequence[j] == 1:\n                        if i!= j:\n                            new_sequence.append(1)\n                        else:\n                            new_sequence.append(0)\n            else:\n                new_sequence.append(0)\n        sequence = new_sequence\n    return sequence[n-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = [0]\n    for i in range(n):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[n-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequence(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    sequence = [0, 1]\n    for i in range(2, n + 1):\n        sequence.append(sequence[-1] + sequence[-2])\n    return sequence[-1]"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n\n    # Initialize variables\n    current_number = 2\n    count = 1\n\n    # Iterate n-1 times\n    for i in range(n-1):\n        # Calculate the next number in the sequence\n        next_number = (current_number * 2) % 10\n        # Check if the next number is prime\n        if next_number == 1:\n            # If prime, increment count and move to the next number in sequence\n            count += 1\n            current_number = 2\n        else:\n            # If not prime, move to the next number in sequence\n            current_number = next_number\n\n    # Return the count of primes in the sequence\n    return count"
    },
    {
        "number": 84,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n        return\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[i - 1] + sequence[i - 2])\n    print(sequence[n - 1])"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Formula for surface area of a sphere: pi * r^2\n    return math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r**2"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    This function calculates the surface area of a sphere using the formula:\n    surface area = 4 * pi * r^2\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = 4 * math.pi * r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    s = 4 * math.pi * r**2\n    return s"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = math.pi\n    surface_area = 4 * pi * r ** 2\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # Calculate the surface area of a sphere using the formula:\n    # surface area = 4 * pi * r^2\n    surface_area = 4 * math.pi * (r**2)\n    return surface_area"
    },
    {
        "number": 85,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4 * math.pi * r**2\n    return surface_area"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables for the centered hexagonal number\n    x = 1\n    y = 0\n    z = 0\n\n    # Loop through the nth centered hexagonal number\n    for i in range(1, n+1):\n        # Calculate the centered hexagonal number\n        hex_num = (x + y + z) // 2\n\n        # Calculate the coordinates of the hexagon\n        angle = 60 * (i - 1) / n\n        x_coord = int(1 / 2 * (3 ** 0.5) * (1 + (1 / 6) ** 0.5) * (1 + (1 / 3) ** 0.5) * angle)\n        y_coord = int(1 / 2 * (3 ** 0.5) * (1 - (1 / 6) ** 0.5) * (1 + (1 / 3) ** 0.5) * angle)\n        z_coord = int(1 / 2 * (3 ** 0.5) * (1 - (1 / 6) ** 0.5) * (1 - (1 / 3) ** 0.5) * angle)\n\n        # Calculate the distance from the center of the hexagon to the center of the square\n        dist = int(abs(hex_num - x_coord) + abs(hex_num - y_coord))\n\n        # Check if the hexagon is in the square\n        if dist % 2 == 0:\n            # If it is, return the centered hexagonal number\n            return hex_num\n        else:\n            # If it's not, update the coordinates\n            x = x_coord\n            y = y_coord\n            z = z_coord\n\n    # If the loop completes without finding a centered hexagonal number, return None\n    return None"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n * (2 * n - 1)) // 6\n"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    a = 1\n    b = 3\n    c = 5\n    d = 7\n    e = 9\n    f = 11\n    \n    for i in range(1, n+1):\n        if i <= 2*n:\n            print(a, end=' ')\n        elif 2*n+1 <= i <= 3*n:\n            print(b, end=' ')\n        elif 3*n+1 <= i <= 4*n:\n            print(c, end=' ')\n        elif 4*n+1 <= i <= 5*n:\n            print(d, end=' ')\n        elif 5*n+1 <= i <= 6*n:\n            print(e, end=' ')\n        elif 6*n+1 <= i <= 7*n:\n            print(f, end=' ')\n        else:\n            print(f, end=' ')\n            \n    print()"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Initialize variables\n    hexagon = 0\n    centered_hexagon = 0\n    temp = 1\n    count = 1\n\n    # Iterate n times\n    for i in range(1, n+1):\n\n        # Calculate the centered hexagon number\n        centered_hexagon = (i * 3 - 1) // 2\n\n        # Add the centered hexagon to the total sum\n        hexagon += centered_hexagon\n\n        # Update the count of centered hexagons\n        count += 2\n\n        # Update the temporary number\n        temp += 1\n\n    # Return the final result\n    return hexagon"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Calculate the base and offset of the centered hexagonal number\n    base = 16\n    offset = 1\n    hexagonal_number = (base ** (2 * n)) - (base ** n) + offset\n    return hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Base case: if n is 0, return 0\n    if n == 0:\n        return 0\n    \n    # Base case: if n is odd, return n\n    if n % 2!= 0:\n        return n\n    \n    # Calculate the number of rows required to reach n\n    rows = n // 2 + 1\n    \n    # Calculate the number of cells in each row\n    cells_per_row = 2 * rows - 1\n    \n    # Initialize the result to 0\n    result = 0\n    \n    # Iterate through the rows and add the centered hexagonal number to the result\n    for i in range(rows):\n        # Calculate the number of cells in this row\n        cells = 2 * i + 1\n        \n        # Add the centered hexagonal number to the result\n        result += cells * (i * (i + 1) // 2 + 1)\n    \n    return result"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # Define the centered hexagonal sequence\n    sequence = [1, 6, 15, 28, 45, 66, 91, 120, 153, 190, 231, 276, 325, 378, 435, 496, 561, 630, 703, 780, 861, 946, 1035, 1128, 1225, 1326, 1431, 1540, 1653, 1770, 1891, 2016, 2145, 2278, 2415, 2556, 2701, 2850, 3003, 3160, 3321, 3486, 3655, 3828, 4005, 4186, 4371, 4560, 4753, 4950, 5151, 5356, 5565, 5778, 6005, 6236, 6471, 6710, 6953, 7200, 7451, 7706, 7965, 8228, 8495, 8766, 9041, 9320, 9603, 9890, 10181, 10476, 10775, 11078, 11385, 11696, 12011, 12330, 12653, 12980, 13311, 13646, 13985, 14328, 14675, 15026, 15381, 15740, 16103, 16470, 16841, 17216, 17595, 17978, 18365, 18756, 19151, 19550, 19953, 20360, 20771, 21186, 21605, 22028, 22455, 22886, 23321, 23760, 24203, 24650, 25101, 25556, 26015, 26478, 26945, 27416, 27891, 28370, 28853, 29340, 29831, 30326, 30825, 31328, 31835, 32346, 32861, 33380, 33903, 34430, 34961, 35496, 36035, 36578, 37125, 37676, 38231, 38790, 39353, 39920, 40491, 41066, 41645, 42228, 42815, 43406, 44001, 44600, 45203, 45810, 46421, 47036, 47655"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_digit(digit):\n        if digit == 0:\n            return 0\n        elif digit % 2 == 0:\n            return centered_hexagonal_digit(digit // 2) + 1\n        else:\n            return centered_hexagonal_digit((digit - 1) // 2) + 2\n\n    return centered_hexagonal_digit(n)"
    },
    {
        "number": 86,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    \"\"\"\n    # Helper function to calculate centered hexagonal number\n    def centered_hexagonal(n):\n        return 2*n*(n+1) - 1\n\n    # Calculate the number of rows and columns required\n    num_rows = n // 2 + 1\n    num_cols = 4 * (n // 2) + 1\n\n    # Calculate the position of the central hexagon\n    center_row = int(num_rows / 2)\n    center_col = int(num_cols / 2)\n\n    # Calculate the first row of the centered hexagon\n    row_num = 1\n    row = [0] * num_cols\n    row[center_col] = 1\n\n    # Fill the remaining rows of the centered hexagon\n    for i in range(center_row-1, -1, -1):\n        if i % 2 == 0:\n            row[center_col-i] = centered_hexagonal(row_num)\n            row[center_col+i] = centered_hexagonal(row_num-1)\n        else:\n            row[center_col-i] = centered_hexagonal(row_num+1)\n            row[center_col+i] = centered_hexagonal(row_num)\n        row_num += 1\n\n    # Calculate the centered hexagonal number\n    result = 0\n    for i in range(num_cols):\n        result += row[i]\n\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    This function takes three dictionaries as input and returns a single dictionary that contains the key-value pairs of all three dictionaries.\n    \"\"\"\n    merged_dict = {}\n    # Use the union() function to merge the key-value pairs of the three dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # combine the three dictionaries into one using the update() method\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Create an empty dictionary to store the merged dictionaries\n    merged_dict = {}\n    \n    # Loop through each key in the first dictionary\n    for key in dict1:\n        # Check if the key already exists in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the key and value from the first dictionary to the merged dictionary\n            merged_dict[key] = dict1[key]\n        else:\n            # If the key already exists in the merged dictionary, check if the values are the same\n            if dict1[key] == merged_dict[key]:\n                # If they are the same, do nothing\n                pass\n            else:\n                # If they are different, raise a ValueError\n                raise ValueError(\"The values for the same key in the dictionaries are different.\")\n    \n    # Loop through each key in the second dictionary\n    for key in dict2:\n        # Check if the key already exists in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the key and value from the second dictionary to the merged dictionary\n            merged_dict[key] = dict2[key]\n        else:\n            # If the key already exists in the merged dictionary, check if the values are the same\n            if dict2[key] == merged_dict[key]:\n                # If they are the same, do nothing\n                pass\n            else:\n                # If they are different, raise a ValueError\n                raise ValueError(\"The values for the same key in the dictionaries are different.\")\n    \n    # Loop through each key in the third dictionary\n    for key in dict3:\n        # Check if the key already exists in the merged dictionary\n        if key not in merged_dict:\n            # If not, add the key and value from the third dictionary to the merged dictionary\n            merged_dict[key] = dict3[key]\n        else:\n            # If the key already exists in the merged dictionary, check if the values are the same\n            if dict3[key] == merged_dict[key]:\n                # If they are the same, do nothing\n                pass\n            else:\n                # If they are different, raise a ValueError\n                raise ValueError(\"The values for the same key in the dictionaries are different.\")\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merges three dictionaries into a single dictionary.\n    The key-value pairs from all three dictionaries are added to the result dictionary, overwriting any existing key-value pairs with the same keys.\n    '''\n    result = {}\n    result.update(dict1)\n    result.update(dict2)\n    result.update(dict3)\n    return result"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single dictionary.\n    \"\"\"\n    # Merge the first two dictionaries\n    merged_dict = {**dict1, **dict2}\n    \n    # Merge the third dictionary into the merged dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n\n    # Create a new dictionary to store the merged values\n    merged_dict = {}\n\n    # Loop through each key-value pair in the first dictionary\n    for key,value in dict1.items():\n        # If the key already exists in the merged dictionary, add the value to the existing value\n        if key in merged_dict:\n            merged_dict[key] = value\n        # Otherwise, add the key-value pair to the merged dictionary\n        else:\n            merged_dict[key] = value\n\n    # Loop through each key-value pair in the second dictionary\n    for key,value in dict2.items():\n        # If the key already exists in the merged dictionary, add the value to the existing value\n        if key in merged_dict:\n            merged_dict[key] = value\n        # Otherwise, add the key-value pair to the merged dictionary\n        else:\n            merged_dict[key] = value\n\n    # Loop through each key-value pair in the third dictionary\n    for key,value in dict3.items():\n        # If the key already exists in the merged dictionary, add the value to the existing value\n        if key in merged_dict:\n            merged_dict[key] = value\n        # Otherwise, add the key-value pair to the merged dictionary\n        else:\n            merged_dict[key] = value\n\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1, dict2, dict3):\n    '''\n    Merge three dictionaries into a single dictionary.\n    '''\n    # Create a new empty dictionary\n    merged_dict = {}\n    \n    # Loop through each key in the first dictionary\n    for key, value in dict1.items():\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If it does, append the values from the two dictionaries with the same key\n            merged_dict[key].extend(value)\n        else:\n            # If it doesn't, add the value as a list with one element (the original value)\n            merged_dict[key] = [value]\n    \n    # Loop through each key in the second dictionary\n    for key, value in dict2.items():\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If it does, append the values from the two dictionaries with the same key\n            merged_dict[key].extend(value)\n        else:\n            # If it doesn't, add the value as a list with one element (the original value)\n            merged_dict[key] = [value]\n    \n    # Loop through each key in the third dictionary\n    for key, value in dict3.items():\n        # Check if the key already exists in the merged dictionary\n        if key in merged_dict:\n            # If it does, append the values from the two dictionaries with the same key\n            merged_dict[key].extend(value)\n        else:\n            # If it doesn't, add the value as a list with one element (the original value)\n            merged_dict[key] = [value]\n    \n    # Return the merged dictionary\n    return merged_dict"
    },
    {
        "number": 87,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections as ct\n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict1.copy()\n    for key in dict2:\n        if key not in merged_dict:\n            merged_dict[key] = dict2[key]\n    for key in dict3:\n        if key not in merged_dict:\n            merged_dict[key] = dict3[key]\n    return merged_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    This function takes a list as input and returns a dictionary with the frequency of all the elements in the list.\n    '''\n    # Using Counter to get the frequency of each element in the list\n    count = collections.Counter(lst)\n    # Converting the Counter object to a dictionary\n    freq_dict = dict(count)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import collections\n\ndef freq_count(lst):\n    freq_dict = {}\n    for i in lst:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import collections\n\ndef freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # create an empty dictionary to store the frequency of each element\n    freq = {}\n\n    # iterate through the list and update the frequency of each element\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n\n    # return the dictionary containing the frequency of each element\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n\n    # Using a dictionary to store the frequency of each element in the list\n    freq = {}\n\n    # Using a set to remove duplicates from the list\n    lst = list(set(lst))\n\n    # Iterating over the list and adding the frequency of each element to the dictionary\n    for elem in lst:\n        freq[elem] = lst.count(elem)\n\n    return freq"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = collections.defaultdict(int)\n    # Iterate over the list and update the frequency dictionary\n    for item in list1:\n        freq_dict[item] += 1\n    # Return the frequency dictionary\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import collections\n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict"
    },
    {
        "number": 88,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import collections\n\ndef freq_count(lst):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.defaultdict(int)\n    for item in lst:\n        freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    diff = float('inf')\n    for i in range(1, N+1):\n        if abs(i-N) < diff:\n            diff = abs(i-N)\n    return N - diff"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = N\n    for i in range(1, N+1):\n        if abs(i-N) < abs(closest-N):\n            closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    while n > 1:\n        if N % n == 0:\n            return n\n        n -= 1\n    return n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 0\n    \n    smaller_num = 1\n    closest_smaller_num = abs(N - smaller_num)\n    \n    for i in range(2, N):\n        diff = abs(N - i)\n        \n        if diff < closest_smaller_num:\n            closest_smaller_num = diff\n            smaller_num = i\n            \n    return smaller_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    num = N\n    while True:\n        if num == 1:\n            return 0\n        else:\n            num -= 1"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def closest_num(N):\n    # Initialize variables to keep track of the smallest and largest numbers\n    smallest = float('inf')\n    largest = float('-inf')\n    \n    # Loop through the list of numbers\n    for num in N:\n        # If the number is smaller than the smallest number, update the smallest number\n        if num < smallest:\n            smallest = num\n            \n        # If the number is larger than the largest number, update the largest number\n        elif num > largest:\n            largest = num\n            \n        # If the number is between the smallest and largest numbers, find the closest smaller number to it\n        else:\n            # Calculate the difference between the number and the smallest number\n            diff = abs(num - smallest)\n            \n            # If the difference is smaller than the difference between the number and the largest number,\n            # update the smallest number to the number itself\n            if diff < abs(num - largest):\n                smallest = num\n            \n            # Otherwise, update the largest number to the number itself\n            else:\n                largest = num\n    \n    # Return the smallest number\n    return smallest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return 1\n    else:\n        min_num = 1\n        max_num = N\n        while min_num < max_num:\n            mid_num = (min_num + max_num) // 2\n            if mid_num % 2 == 0:\n                if mid_num > N:\n                    max_num = mid_num - 1\n                else:\n                    min_num = mid_num + 1\n            else:\n                if mid_num > N:\n                    min_num = mid_num + 1\n                else:\n                    max_num = mid_num - 1\n        return min_num"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def closest_num(N):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def closest_smaller_prime(n):\n        primes = [i for i in range(2, n+1) if is_prime(i)]\n        if primes:\n            return primes[-1]\n        else:\n            return None\n\n    n = int(input(\"Enter a number: \"))\n    closest = closest_smaller_prime(n)\n    print(f\"The closest smaller prime to {n} is {closest}\")\n"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def closest_num(N):\n    min_diff = float('inf')\n    closest = None\n    for i in range(N):\n        if i > 0 and i!= N - 1:\n            diff = abs(N - i)\n            if diff < min_diff:\n                min_diff = diff\n                closest = i\n    return closest"
    },
    {
        "number": 89,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 1:\n        return 0\n    elif N == 2:\n        return 1\n    elif N % 2 == 0:\n        return closest_num(N//2)\n    else:\n        return closest_num(N//2) + 1"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest_word = ''\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    max_word = ''\n\n    for word in list1:\n        if len(word) > max_length:\n            max_length = len(word)\n            max_word = word\n    \n    return max_word"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest_word = \"\"\n    for word in list1:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    \"\"\"\n    longest = \"\"\n    for i in list1:\n        if len(i) > len(longest):\n            longest = i\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for word in list1:\n        length = len(word)\n        if length > max_length:\n            max_length = length\n    return max_length"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    longest = \"\"\n    for word in list1:\n        if len(word) > len(longest):\n            longest = word\n    return len(longest)"
    },
    {
        "number": 90,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if type(str1)!= list or type(sub_str)!= str:\n        return \"Error: Both input parameters must be lists and strings.\"\n    \n    for item in str1:\n        if sub_str in item:\n            return True\n    \n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a string is present as a substring in a given list of string values.\n    \"\"\"\n    return str1 in sub_str"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(str1 in s for s in sub_str)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    \"\"\"\n    This function takes two string arguments:\n    str1: The string to search for the substring in.\n    sub_str: The substring to search for in str1.\n\n    This function returns True if the substring is present in str1, False otherwise.\n    \"\"\"\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for item in str1:\n        if item in sub_str:\n            return True\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 91,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_undulating(n // 2)\n    else:\n        return not is_undulating((n - 1) // 2)"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0: \n        return \"Undulating\"\n    else: \n        return \"Not undulating\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    \"\"\"\n    if n % 2 == 0:\n        return \"The number is odd and undulating.\"\n    elif n % 2 == 1:\n        return \"The number is even and undulating.\"\n    else:\n        return \"The number is neither odd nor even and undulating.\""
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    if n % 2 == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n < 1:\n        return 'Input must be a positive integer.'\n    if n <= 1:\n        return 'The number is not undulating.'\n    if n % 2 == 0:\n        return 'The number is undulating.'\n    elif n % 2 == 1:\n        return 'The number is not undulating.'"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    elif n % 2 == 0:\n        return is_undulating(n//2)\n    else:\n        return True"
    },
    {
        "number": 92,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n\n    # First, check if the number is even or odd.\n    if n % 2 == 0:\n        return False\n\n    # Second, check if the number is a power of 2.\n    num_bits = 0\n    while n > 1:\n        n >>= 1\n        num_bits += 1\n\n    if num_bits % 2 == 1:\n        return False\n\n    return True"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power(a, b):\n    '''\n    This function takes two parameters a and b and returns the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power(a, b):\n    '''\n    This function calculates the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = 1\n    for i in range(b):\n        result *= a\n    return result"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 93,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power(a, b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    test_list.sort(key=itemgetter(1))\n    # Return the first value of the smallest tuple\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Define a custom sorting function\n    def custom_sort(x):\n        return x[1]\n    \n    # Sort the list of tuples based on the second value\n    test_list.sort(key=itemgetter(1))\n    \n    # Return the index of the first tuple with the smallest second value\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the tuple with the smallest second value.\n    '''\n\n    # Sort the list of tuples based on the second value of the tuples\n    test_list.sort(key=itemgetter(1))\n\n    # Return the index of the first tuple in the sorted list\n    return test_list[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    sorted_list = sorted(test_list, key=itemgetter(1))\n    return sorted_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # Sort the list of tuples by the second value of each tuple\n    sorted_list = sorted(test_list, key=itemgetter(1))\n\n    # Iterate through the sorted list and return the index of the first tuple with the smallest second value\n    for i in range(len(sorted_list)):\n        if sorted_list[i][1] == min(sorted_list[i][1] for i in range(len(sorted_list))):\n            return i\n    \n    # If no tuples with the smallest second value are found, return None\n    return None"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import itemgetter\n\ndef index_minimum(test_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    \"\"\"\n    minimum = sorted(test_list, key=itemgetter(1))[0]\n    return minimum[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    return min(enumerate(test_list), key=itemgetter(1))[0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the index of the first value of the tuple with the smallest second value.\n    '''\n    # sort the list of tuples by second value in ascending order\n    test_list.sort(key=itemgetter(1))\n\n    # return the index of the first tuple in the sorted list\n    return test_list[0][0]"
    },
    {
        "number": 94,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from operator import itemgetter \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min_index = 0\n    min_value = test_list[min_index][1]\n    \n    for i in range(1, len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n            \n    return test_list[min_index][0]"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Base case: if the list is empty, the smallest length is 0\n    if not lst:\n        return 0\n\n    # Recursive case: check the length of the first element in the list\n    first_element = lst[0]\n    length = 1\n\n    # If the first element is a list, recursively find the length of the smallest list\n    if type(first_element) == list:\n        length = Find_Min_Length(first_element)\n\n    return length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):\n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n\n    min_len = len(lst[0])  # initialize length of smallest list to be length of first list\n\n    for sublist in lst:  # iterate over all lists in list of lists\n        if len(sublist) < min_len:  # check if length of sublist is smaller than current smallest length\n            min_len = len(sublist)  # update smallest length\n\n    return min_len  # return smallest length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = float('inf')\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):\n    '''\n    This function takes a list of lists as input and returns the length of the smallest list in the list.\n    '''\n    min_length = len(lst[0])\n    for sub_list in lst:\n        if len(sub_list) < min_length:\n            min_length = len(sub_list)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length"
    },
    {
        "number": 95,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 1000000\n    for i in lst:\n        if len(i) < min_len:\n            min_len = len(i)\n    return min_len"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    # initialize count to zero\n    count = 0\n    # check if n is less than or equal to 1\n    if n <= 1:\n        return 0\n    # loop from 2 to n-1\n    for i in range(2, n):\n        # check if n is divisible by i\n        if n % i == 0:\n            # increment count if n is divisible by i\n            count += 1\n    # return the count of divisors\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    # Create a boolean list to keep track of prime numbers\n    is_prime = [True] * (n + 1)\n    is_prime[0], is_prime[1] = False, False\n    \n    # Iterate over all numbers from 2 to n\n    for i in range(2, int(n**0.5) + 1):\n        # If i is prime, mark all multiples of i as not prime\n        if is_prime[i]:\n            for j in range(i**2, n + 1, i):\n                is_prime[j] = False\n    \n    # Count the number of prime numbers up to n\n    count = 0\n    for i in range(2, n + 1):\n        if is_prime[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    \"\"\"\n    count = 1\n    for i in range(2, n+1):\n        if n % i == 0:\n            count += 1\n    return count"
    },
    {
        "number": 96,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    i = 1\n    while i*i <= n:\n        if n % i:\n            i += 1\n        else:\n            count += 1\n            n //= i\n    if n > 1:\n        count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n\n    # Loop through each element in the flattened list of lists\n    for item in list1:\n\n        # If the item is already a key in the dictionary, increment its value by 1\n        if item in freq_dict:\n            freq_dict[item] += 1\n\n        # If the item is not a key in the dictionary, add it with a value of 1\n        else:\n            freq_dict[item] = 1\n\n    # Return the dictionary of frequency of each element\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store frequency\n    freq = {}\n    # Loop through each element in the list\n    for element in list1:\n        # Check if the element is already in the dictionary\n        if element in freq:\n            # If it is, increment its frequency count\n            freq[element] += 1\n        # If it is not, add it to the dictionary with a frequency count of 1\n        else:\n            freq[element] = 1\n    # Return the frequency dictionary\n    return freq"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for element in list1:\n        if element not in freq_dict:\n            freq_dict[element] = 1\n        else:\n            freq_dict[element] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    freq_dict = {}\n    for item in list1:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # Create an empty dictionary to store the frequency of each element\n    freq_dict = {}\n    # Loop through the list of lists and add the frequency of each element to the dictionary\n    for sublist in list1:\n        for item in sublist:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item not in frequency_dict:\n                frequency_dict[item] = 1\n            else:\n                frequency_dict[item] += 1\n    return frequency_dict"
    },
    {
        "number": 97,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    result = total / len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    result /= len(numbers)\n    return result"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)"
    },
    {
        "number": 98,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_num(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = ''\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n //= 2\n    return binary[::-1]"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_num = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary_num = str(remainder) + binary_num\n        n = n // 2\n    return binary_num"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    # Base case: if n is zero or negative, return zero\n    if n == 0 or n < 0:\n        return \"0\"\n    # Base case: if n is one, return \"1\"\n    elif n == 1:\n        return \"1\"\n    # Recursive case: convert n to binary recursively by dividing it by 2 and appending the remainder to the result string\n    else:\n        binary = decimal_to_binary(n // 2)\n        if n % 2 == 0:\n            return binary + \"0\"\n        else:\n            return binary + \"1\""
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    \n    # Initialize an empty string to store the binary equivalent of the decimal number\n    binary = ''\n    \n    # Loop through each digit of the decimal number and convert it to binary\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2\n    \n    # If the binary string has a leading zero, remove it\n    if binary[0] == '0':\n        binary = binary[1:]\n    \n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        remainder = n % 2\n        binary = str(remainder) + binary\n        n = n // 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = \"\"\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def decimal_to_binary(n):\n    \"\"\"\n    This function takes a decimal number as input and returns its binary equivalent as a string.\n    \"\"\"\n    # initialize an empty string to store the binary equivalent\n    binary = \"\"\n    # loop through each digit of the decimal number\n    while n > 0:\n        # get the last digit of the decimal number\n        digit = n % 2\n        # add the binary equivalent of the digit to the beginning of the binary string\n        binary = str(digit) + binary\n        # remove the last digit from the decimal number\n        n = n // 2\n    # return the binary string\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def decimal_to_binary(n):\n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    while n > 0:\n        binary = str(n % 2) + binary\n        n //= 2\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def decimal_to_binary(n):\n    # Convert the decimal number to a string and reverse the order of its digits\n    s = str(n)[::-1]\n\n    # Initialize an empty string to store the binary representation\n    binary = \"\"\n\n    # Convert each digit to its binary equivalent and append it to the binary string\n    for digit in s:\n        binary += bin(int(digit))[2:]\n\n    return binary"
    },
    {
        "number": 99,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    \"\"\"\n    binary = \"\"\n    while n > 0: \n        binary = str(n % 2) + binary \n        n = n // 2 \n    return binary "
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    def is_smaller_than_palindrome(n):\n        return str(n) < str(n)[::-1]\n\n    def is_valid_palindrome(n):\n        return is_palindrome(n) and is_smaller_than_palindrome(n)\n\n    def is_palindrome_valid_for_num(n):\n        return is_valid_palindrome(n) and is_valid_palindrome(n + 1)\n\n    for i in range(num, 10**6):\n        if is_palindrome_valid_for_num(i):\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_smallest_palindrome(num):\n    def is_palindrome(num):\n        # Check if the number is a palindrome\n        str_num = str(num)\n        return str_num == str_num[::-1]\n\n    def generate_palindrome(num):\n        # Generate a palindrome by adding a character to the original number\n        while True:\n            if is_palindrome(num):\n                return num\n            num = str(num) + 'a'\n\n    # Find the smallest palindrome greater than the given number\n    smallest_palindrome = generate_palindrome(num + 1)\n    smallest_palindrome_num = int(smallest_palindrome[::-1])\n\n    # Find the next smallest palindrome by subtracting 1 from the smallest palindrome\n    next_smallest_palindrome = smallest_palindrome_num - 1\n\n    return next_smallest_palindrome"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the input integer to a string and reverse it\n    input_str = str(num)[::-1]\n\n    # Check if the reversed string is a palindrome\n    if input_str == input_str[::-1]:\n        # Convert the reversed string back to an integer and return it\n        return int(input_str)\n\n    # Check if the reversed string is a palindrome that is greater than the original number\n    while input_str[-1] == '0':\n        input_str = input_str[:-1]\n\n    # If the reversed string is not a palindrome, append a digit to the end and reverse it\n    input_str += str(num % 10)\n    input_str = str(int(input_str[::-1]))[::-1]\n\n    # Check if the reversed string is a palindrome that is greater than the original number\n    if int(input_str) > num:\n        # Convert the reversed string back to an integer and return it\n        return int(input_str)\n    else:\n        # If the reversed string is not a palindrome that is greater than the original number, raise an exception\n        raise ValueError(\"The next smallest palindrome is greater than the original number.\")"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Reverse the digits of the input number\n    reversed_num = int(str(num)[::-1])\n\n    # Check if the reversed number is a palindrome\n    while reversed_num > 0:\n        if reversed_num % 10 == reversed_num // 10:\n            break\n        reversed_num //= 10\n\n    # If the reversed number is a palindrome, add 1 to it to get the next smallest palindrome\n    if reversed_num > 0:\n        return reversed_num + 1\n\n    # Otherwise, the input number is already a palindrome, so add 1 to it to get the next smallest palindrome\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        return num\n\n    # Find the smallest palindrome starting from the number\n    for i in range(10**len(num_str), 10**len(num_str) * 10 + 1):\n        if str(i) == str(i)[::-1]:\n            return i"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    \"\"\"\n    palindrome = str(num)[::-1]\n    digits = [int(digit) for digit in palindrome]\n    for i in range(len(digits)):\n        digits[i] += 1\n        digits[i+1] = 0\n        if str(digits) == palindrome:\n            return int(\"\".join(str(digit) for digit in digits))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef next_smallest_palindrome(num):\n    \"\"\"\n    This function takes an integer as input and returns the next smallest palindrome of the input integer.\n    \"\"\"\n    # Create a list of all palindromes of the given number\n    palindromes = [str(i) for i in range(10**(len(str(num))-1), 10**len(str(num)))]\n    # Find the smallest palindrome in the list\n    smallest_palindrome = min(palindromes)\n    # Get the index of the smallest palindrome in the list\n    smallest_palindrome_index = palindromes.index(smallest_palindrome)\n    # Increment the index by one to get the next smallest palindrome\n    next_palindrome_index = smallest_palindrome_index + 1\n    # Return the next smallest palindrome as an integer\n    return int(smallest_palindrome + '0'*(len(str(num))-len(str(smallest_palindrome))))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(num):\n    '''\n    Helper function to check if a number is a palindrome.\n    '''\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while not is_palindrome(num + 1):\n        num += 1\n    return num + 1"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_smallest_palindrome(num):\n    # Check if the input number is less than or equal to 1\n    if num <= 1:\n        return None\n    \n    # Initialize two pointers, one at the beginning of the string and the other at the end\n    left = 0\n    right = len(str(num)) - 1\n    \n    # Keep swapping characters if they are out of order until they are in order\n    while left < right:\n        if str(num)[left] < str(num)[right]:\n            str(num)[left], str(num)[right] = str(num)[right], str(num)[left]\n            left += 1\n            right -= 1\n        else:\n            str(num)[left], str(num)[right] = str(num)[right], str(num)[left]\n            right -= 1\n    \n    # If the left pointer is greater than or equal to the right pointer, the number is already a palindrome\n    if left >= right:\n        return int(str(num))\n    \n    # Increment the left pointer until it is equal to the right pointer\n    while left < right:\n        str(num)[left], str(num)[right] = str(num)[right], str(num)[left]\n        left += 1\n        right -= 1\n    \n    # Increment the right pointer until it is equal to the left pointer\n    while left < right:\n        str(num)[left], str(num)[right] = str(num)[right], str(num)[left]\n        left += 1\n        right -= 1\n    \n    # Return the number as an integer\n    return int(str(num))"
    },
    {
        "number": 100,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys\n\ndef is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if is_palindrome(num):\n        return num + 1\n    elif num % 10 == 0:\n        if num == 0:\n            return 1\n        else:\n            return num * 10 - 1\n    else:\n        return num * 10 + 1\n\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        try:\n            num = int(sys.argv[1])\n        except ValueError:\n            print(\"Invalid input. Please provide an integer.\")\n        else:\n            print(\"Next smallest palindrome of\", num, \"is\", next_smallest_palindrome(num))\n    else:\n        print(\"Usage: python next_smallest_palindrome.py <integer>\")"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k < 1 or k > len(arr):\n        return \"Invalid input\"\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) < k:\n        return \"Array length is less than kth element.\"\n    else:\n        return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # calculate the length of the array\n    n = len(arr)\n    # check if k is within the bounds of the array\n    if k < 1 or k > n:\n        return None\n    # initialize the left and right pointers\n    left = 1\n    right = n\n    # loop until the left pointer is less than or equal to the right pointer\n    while left <= right:\n        # calculate the midpoint of the current range\n        mid = (left + right) // 2\n        # if k is equal to the midpoint, return the value at that index\n        if arr[mid] == k:\n            return arr[mid-1]\n        # if k is less than the midpoint, move the right pointer to mid-1\n        elif arr[mid] < k:\n            left = mid + 1\n        # if k is greater than the midpoint, move the left pointer to mid+1\n        else:\n            right = mid - 1"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]"
    },
    {
        "number": 101,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k > len(arr):\n        return None\n    elif k == 1:\n        return arr[0]\n    else:\n        mid = len(arr) // 2\n        if k > mid:\n            return kth_element(arr[mid:], k - mid)\n        else:\n            return kth_element(arr[:mid], k)"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    # Convert the first character to lowercase\n    first_char = word[0].lower()\n    # Convert the rest of the characters to uppercase\n    rest_chars = ''.join(c.upper() for c in word[1:])\n    # Combine the first character with the rest of the characters\n    return first_char + rest_chars"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    camel_case = first_word.lower()\n    for i in range(1, len(word.split('_'))):\n        camel_case += word.split('_')[i].capitalize()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_letter = word[0]\n    rest_of_word = word[1:]\n    return first_letter.lower() + rest_of_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    camel_case_word = \"\"\n    for i, char in enumerate(word):\n        if i > 0 and char.isupper():\n            camel_case_word += \"_\"\n        camel_case_word += char.lower()\n    return camel_case_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join([word.capitalize() for word in words])"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    # Split the word into a list of words\n    word_list = word.split('_')\n    # Capitalize the first letter of each word\n    for i in range(len(word_list)):\n        word_list[i] = word_list[i].capitalize()\n    # Join the words together with a capitalized first letter\n    camel_word = ''.join(word_list)\n    # Return the camel case word\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in range(len(word)):\n        if i > 0 and word[i] == '_':\n            camel_word += word[i].upper()\n        else:\n            camel_word += word[i].lower()\n    return camel_word"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            camel_case += word[i+1].upper()\n            i += 1\n        else:\n            camel_case += word[i].upper()\n    return camel_case"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    first_word = word.split('_')[0]\n    return first_word + ''.join(word[i].upper() for i in range(1, len(word)))"
    },
    {
        "number": 102,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert a snake case string to camel case string.\n    \"\"\"\n    words = word.split('_')\n    return words[0] + ''.join(x.title() for x in words[1:])"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = 0\n    for i in range(n, 0, -1):\n        a += m * i\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # initializing the variables\n    row = 0\n    col = 0\n    a = 0\n    \n    # iterating through the rows and columns\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                # if the current cell is the starting point, set the value of a to 1\n                a = 1\n            else:\n                # if the current cell is not the starting point, check if the next cell is adjacent to the starting point\n                if i+1 < n and j!= 0 and (j+1) % m == 0:\n                    a += 1\n                if j+1 < m and (i+1) % n == 0:\n                    a += 1\n                if i!= 0 and j+1 < m and (j-1) % m == 0:\n                    a += 1\n                if i!= 0 and (i-1) % n == 0:\n                    a += 1\n                \n            # printing the value of a at each cell\n            print(\"a({},{}) = {}\".format(i, j, a))"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n\n    # Initialize the first column of the matrix as 1\n    a = [1] * (n+1)\n\n    # Initialize the first row of the matrix as 1\n    for i in range(1, m+1):\n        a[i] = a[i-1] * i\n\n    # Calculate the remaining values of the matrix using the recurrence relation\n    for i in range(2, n+1):\n        for j in range(1, m+1):\n            a[j] *= i\n\n    # Return the value of a(n, m)\n    return a[-1]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return n*(m*(n+m+1)//2)"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n\n    Returns:\n    The Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the matrix of probabilities\n    P = [[0]*(n+1) for _ in range(m+1)]\n\n    # Initialize the first row of the matrix\n    for i in range(1, n+1):\n        P[0][i] = 1\n\n    # Initialize the first column of the matrix\n    for j in range(1, m+1):\n        P[j][0] = 1\n\n    # Fill in the rest of the matrix\n    for j in range(1, m+1):\n        for i in range(1, n+1):\n            P[j][i] = 2 * P[j-1][i] - P[j-1][i-1]\n\n    # Return the Eulerian number\n    return P[m][n]"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return 1\n    elif n > m:\n        a = eulerian_num(n-1, m)\n    else:\n        a = eulerian_num(n, m-1)\n    return a + n - m + 1"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Initialize the Eulerian number to 1\n    eulerian = 1\n    \n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # If i is a multiple of m, multiply the Eulerian number by (i/m)\n        if i % m == 0:\n            eulerian *= (i/m)\n            \n    # Return the Eulerian number\n    return eulerian"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    This function finds the Eulerian number a(n, m) for the given values of n and m.\n    \"\"\"\n    # Initialize the Eulerian number to 0\n    a = 0\n\n    # Calculate the sum of all positive integers less than or equal to m\n    for i in range(1, m+1):\n        a += i\n\n    # Calculate the number of divisors for each prime factor of m\n    prime_factors = []\n    for i in range(2, m+1):\n        while m % i == 0:\n            prime_factors.append(i)\n            m //= i\n\n    # Calculate the sum of all positive integers less than or equal to n\n    for i in range(1, n+1):\n        # Find the minimum prime factor of i\n        min_prime_factor = min(prime_factors, key=lambda x: i // x)\n\n        # Calculate the sum of all positive integers less than or equal to i\n        sum_i = (i // min_prime_factor) * min_prime_factor\n        a -= sum_i\n\n    return a"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def eulerian_num(n, m):\n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Calculate the number of factors of n\n    num_factors = sum(1 for i in range(1, n+1) if n%i == 0)\n    \n    # Calculate the number of factors of m\n    denom_factors = sum(1 for i in range(1, m+1) if m%i == 0)\n    \n    # Calculate the Eulerian number a(n, m)\n    a_n_m = num_factors * denom_factors\n    \n    return a_n_m"
    },
    {
        "number": 103,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find the Eulerian number a(n, m).\n    \"\"\"\n    # Initialize the matrix to store the parity of each element in the matrix\n    parity_matrix = [[0]*(m+1) for i in range(n+1)]\n    \n    # Fill the parity matrix\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            parity_matrix[i][j] = (2*j-1) % 4\n    \n    # Calculate the Eulerian number using the parity matrix\n    eulerian_num = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            eulerian_num += parity_matrix[i][j] * (1 if i==j else -1)\n    \n    return eulerian_num"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Loop through each sublist of strings in the input list\n    for sublist in input_list:\n        # Sort the sublist using the built-in sort() function\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i, lst in enumerate(input_list):\n        input_list[i] = sorted(lst)\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    for sublist in input_list:\n        sublist.sort()\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            input_list[i][j] = sorted(input_list[i][j])"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Define a nested loop to iterate over each sublist of strings in the input_list\n    for sublist in input_list:\n        # Sort the sublist using the sorted() function\n        sorted_sublist = sorted(sublist)\n        # Replace the original sublist with the sorted sublist\n        input_list[input_list.index(sublist)] = sorted_sublist\n    return input_list"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()"
    },
    {
        "number": 104,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Iterate through each sublist in the input list\n    for sublist in input_list:\n        # Sort the sublist in ascending order\n        sublist.sort()"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_true_booleans(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i is True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if type(i) == bool and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if isinstance(i, bool) and i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item == True:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count(lst):\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count"
    },
    {
        "number": 105,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the list to the tuple\n    test_tup = test_tup + tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for item in test_list:\n        test_tup += (item,)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # Append the given list to the given tuple\n    test_tup += tuple(test_list)\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    # Convert the list to a tuple\n    test_tup = tuple(test_list)\n    # Append the list to the tuple\n    test_tup += (test_list,)\n    # Return the new tuple\n    return test_tup"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = list(test_tup)\n    new_list.extend(test_list)\n    return tuple(new_list)"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list = list(test_list)\n    test_tup = tuple(test_tup)\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + tuple(test_tup)\n    return test_list"
    },
    {
        "number": 106,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to append the given list to the given tuples.\n    \"\"\"\n    test_list.extend(test_tup)\n    return test_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge num1 and num2\n    num1.extend(num2)\n    # Sort num1\n    heapq.heapify(num1)\n    # Merge num1 and num3\n    num1.extend(num3)\n    # Sort num1\n    heapq.heapify(num1)\n    # Return num1\n    return num1"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merge two sorted lists\n    num1.extend(num2)\n    num1.sort()\n\n    # Merge three sorted lists\n    num3.extend(num1)\n    num3.sort()\n\n    # Return merged list\n    return num3"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n    \"\"\"\n    merged_list = []\n    heapq.heapify(num1)\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(merged_list, heapq.heappop(num1))\n    heapq.heappush(num2, heapq.heappop(num2))\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    heapq.heappush(merged_list, heapq.heappop(num2))\n    while num3:\n        if len(num3) > 0 and num3[0] <= merged_list[-1]:\n            heapq.heappush(merged_list, heapq.heappop(num3))\n        else:\n            break\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # create a min heap of the three lists\n    min_heap = [num1[0], num2[0], num3[0]]\n    heapq.heapify(min_heap)\n    \n    # add the remaining elements of the lists to the heap\n    for i in range(1, len(num1)):\n        heapq.heappush(min_heap, num1[i])\n    for i in range(1, len(num2)):\n        heapq.heappush(min_heap, num2[i])\n    for i in range(1, len(num3)):\n        heapq.heappush(min_heap, num3[i])\n    \n    # convert the heap back to a list and return it\n    return [heapq.heappop(min_heap) for i in range(len(min_heap))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Merges three sorted lists into a single sorted list.\n    \"\"\"\n    heap = []\n    for num in num1 + num2 + num3:\n        heapq.heappush(heap, num)\n\n    return [heapq.heappop(heap) for _ in range(len(num1) + len(num2) + len(num3))]"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    \n    # Define a function to merge two lists\n    def merge(lst1, lst2):\n        '''\n        Merge two sorted lists into a single sorted list.\n        '''\n        result = []\n        i = j = 0\n        while i < len(lst1) and j < len(lst2):\n            if lst1[i] < lst2[j]:\n                result.append(lst1[i])\n                i += 1\n            else:\n                result.append(lst2[j])\n                j += 1\n        result += lst1[i:]\n        result += lst2[j:]\n        return result\n    \n    # Merge the three lists into a single sorted list\n    merged_list = merge(num1, num2)\n    merged_list = merge(merged_list, num3)\n    \n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge three lists into a single sorted list.\n    \"\"\"\n    # Concatenate the three lists into one\n    merged_list = num1 + num2 + num3\n\n    # Convert the merged list into a min heap\n    heapq.heapify(merged_list)\n\n    # Extract the elements of the min heap and append them to a new list\n    sorted_list = []\n    while merged_list:\n        sorted_list.append(heapq.heappop(merged_list))\n\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # merge lists in descending order\n    merged_list = []\n    for num in num1:\n        merged_list.append(num)\n    for num in num2:\n        merged_list.append(num)\n    for num in num3:\n        merged_list.append(num)\n    merged_list.sort(reverse=True)\n    \n    # return the merged list\n    return merged_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef merge_sorted_list(num1, num2, num3):\n    # merge two sorted lists\n    merged_list = heapq.merge(num1, num2)\n    # merge the merged list with third list\n    merged_list = heapq.merge(merged_list, num3)\n    # sort the merged list\n    sorted_list = heapq.nsmallest(len(merged_list), merged_list)\n    return sorted_list"
    },
    {
        "number": 108,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # Merging the first two lists\n    merge_list = []\n    i = j = 0\n    while i < len(num1) and j < len(num2):\n        if num1[i] < num2[j]:\n            merge_list.append(num1[i])\n            i += 1\n        else:\n            merge_list.append(num2[j])\n            j += 1\n    merge_list += num1[i:]\n    merge_list += num2[j:]\n    \n    # Merging the third list\n    merge_list += num3\n    \n    # Sorting the merged list\n    merge_list = sorted(merge_list)\n    \n    return merge_list"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize variables for odd value count and index\n    count = 0\n    index = 0\n    # Loop through each character in the string s\n    for i in range(len(s)):\n        # If the character is odd, increment the count and index\n        if int(s[i]) % 2!= 0:\n            count += 1\n            index = i\n        # If the count equals the given number of times, return the index\n        if count == n:\n            return index\n    # If the loop completes without returning the index, return -1\n    return -1"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    binary_string = s\n    count = 0\n    for i in range(n):\n        if binary_string[0] == '0':\n            binary_string = binary_string[1:] + binary_string[0]\n        else:\n            binary_string = binary_string[0] + binary_string[1:]\n        count += int(binary_string,2)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    \"\"\"\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    :param s: binary string\n    :type s: str\n    :param n: number of times to rotate the binary string\n    :type n: int\n    :return: number of odd numbers in the rotated binary string\n    :rtype: int\n    \"\"\"\n    s = s[::-1]  # reverse the binary string\n    n = n % len(s)  # handle the case when n is greater than the length of the binary string\n    odd_count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            odd_count += 1\n    return odd_count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to list of digits\n    s_list = [int(i) for i in s]\n    # Find the length of the binary string\n    n = len(s_list)\n    # Initialize a variable to count odd numbers\n    count = 0\n    # Loop through the list of digits and check if each number is odd\n    for i in range(n):\n        if s_list[i] % 2!= 0:\n            count += 1\n    # Return the count of odd numbers after rotating the binary string n times\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    count = 0\n    for i in range(n):\n        s = s[-1] + s[:-1]\n        count += s.count('1')\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_Equivalent(s, n):\n    \"\"\"\n    This function takes a binary string s and an integer n as input and returns the number of odd numbers in the rotated binary string after rotating it n times.\n    \"\"\"\n    # initialize variables\n    count = 0\n    temp = []\n\n    # loop through each character of the binary string s\n    for i in range(len(s)):\n        # convert each character to an integer and add it to a temporary list\n        temp.append(int(s[i]))\n\n    # loop through each element of the temporary list n times\n    for i in range(n):\n        # add the first element to the end of the list\n        temp.append(temp[0])\n        # remove the first element from the list\n        temp.pop(0)\n\n    # loop through each element of the temporary list and count the number of odd numbers\n    for i in temp:\n        if i % 2!= 0:\n            count += 1\n\n    # return the count of odd numbers after rotation\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_Equivalent(s, n):\n    # Convert binary string to a list of bits\n    bits = [int(bit) for bit in s]\n    # Initialize a list to store the rotated bits\n    rotated_bits = []\n    # Rotate the bits n times\n    for _ in range(n):\n        # Append the last bit to the first position and the next-to-last bit to the second position, etc.\n        for i in range(len(bits)-1, -1, -1):\n            rotated_bits.append(bits[i])\n        # Pop the first bit from the end of the list\n        bits.pop()\n    # Count the number of odd bits in the rotated bits\n    count = sum(1 for bit in rotated_bits if bit == 1)\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    # Initialize the count variable\n    count = 0\n    # Initialize the length of the binary string\n    length = len(s)\n    # Rotate the binary string n times\n    rotated = s[n:] + s[:n]\n    # Loop through the rotated string and check if the value is odd\n    for char in rotated:\n        if int(char) % 2 == 1:\n            count += 1\n    # Return the count\n    return count"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_Equivalent(s, n):\n    # Initialize an empty list to store the odd numbers\n    odd_nums = []\n    \n    # Convert the binary string to a list of binary digits\n    digits = list(map(int, s))\n    \n    # Rotate the binary digits by the given number of times\n    for i in range(n):\n        digits.append(digits.pop(0))\n        \n    # Find the odd numbers in the rotated binary digits\n    for i in range(len(digits)):\n        if digits[i] % 2 == 1:\n            odd_nums.append(digits[i])\n            \n    # Return the length of the odd_nums list\n    return len(odd_nums)"
    },
    {
        "number": 109,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_Equivalent(s, n): \n    \"\"\"\n    This function takes a binary string s and a positive integer n as input and returns the number of odd numbers when rotating the binary string s the given number of times.\n    \"\"\"\n    \n    # Initialize an empty string to store the rotated binary string\n    rotated_s = \"\"\n    \n    # Iterate n times\n    for i in range(n):\n        # Iterate through each character of the binary string s\n        for j in range(len(s)):\n            # Check if the current character is an odd number\n            if int(s[j]) % 2!= 0:\n                # Add the current character to the rotated binary string\n                rotated_s += s[j]\n    \n    # Return the number of odd numbers in the rotated binary string\n    return rotated_s.count(\"1\")"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                if nestedlist[i][j][k] in common:\n                    common.remove(nestedlist[i][j][k])\n                else:\n                    common.append(nestedlist[i][j][k])\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    common = []\n    for i in nestedlist:\n        for j in nestedlist:\n            if i == j:\n                common.append(i)\n    return common"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            for k in range(len(nestedlist[i][j])):\n                common_elements.append(nestedlist[i][j][k])\n    return list(set(common_elements))"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    This function takes a nested list as input and returns a list of all the common elements between all pairs of sublists.\n    \"\"\"\n    # Create a set of all elements in the first sublist\n    first_sublist = set(nestedlist[0])\n    \n    # Create a set of all elements in the second sublist\n    second_sublist = set(nestedlist[1])\n    \n    # Create a set of all the common elements between the first and second sublists\n    common_elements = first_sublist.intersection(second_sublist)\n    \n    # Return the list of common elements\n    return list(common_elements)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in range(len(nestedlist)):\n        for j in range(i+1, len(nestedlist)):\n            if nestedlist[i] in nestedlist[j]:\n                if nestedlist[j] not in common_elements:\n                    common_elements.append(nestedlist[j])\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        if len(set(sublist)) == len(sublist):\n            common_elements.append(sublist)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n    \"\"\"\n    # Initialize an empty set to store the common elements\n    common = set()\n\n    # Loop through each nested list in the input list\n    for lst in nestedlist:\n        # Loop through each element in the nested list\n        for elem in lst:\n            # Check if the element is already in the common set\n            if elem in common:\n                # If it is, add it to the output set\n                common.add(elem)\n            else:\n                # If it isn't, add it to the common set\n                common.add(elem)\n\n    # Return the common elements as a list\n    return list(common)"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for i in nestedlist:\n        if len(set(i) & set(common_elements)) == 0:\n            common_elements.append(i)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = []\n    for sublist in nestedlist:\n        for element in sublist:\n            if element not in common_elements:\n                common_elements.append(element)\n    return common_elements"
    },
    {
        "number": 111,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n\n    # Find the set of unique elements in the nested list\n    unique_elements = set()\n    for item in nestedlist:\n        if isinstance(item, list):\n            unique_elements |= set(common_in_nested_lists(item))\n        else:\n            unique_elements.add(item)\n\n    # Find the set of common elements\n    common_elements = set()\n    for item in unique_elements:\n        if all(i == item for sublist in nestedlist for i in sublist):\n            common_elements.add(item)\n\n    return common_elements"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        num = int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_integer(text):\n    \"\"\"\n    Check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n\n    # check if the string only contains digits\n    if text.isdigit():\n        return True\n    else:\n        return False"
    },
    {
        "number": 113,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    \"\"\"\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if not dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n\n    if all(len(d) == 0 for d in list1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for dic in list1:\n        if dic:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for d in list1:\n        if d:\n            return False\n    return True"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for item in list1:\n        if item:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 115,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    all_empty = True\n    for i in list1:\n        if i:\n            all_empty = False\n            break\n    return all_empty"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    \"\"\"\n    This function takes a tuple of positive integers as input and returns a single integer.\n    \"\"\"\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    int_value = 0\n    for num in nums:\n        int_value = int_value * 10 + num\n    return int_value"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # Initialize an empty string to store the integer representation of the tuple\n    int_str = \"\"\n    # Loop through each number in the tuple\n    for num in nums:\n        # If the number is less than 10, add a 0 to the beginning of its string representation\n        if num < 10:\n            int_str += \"0\"\n        # Append the number to the end of the integer string\n        int_str += str(num)\n    # Return the integer representation of the tuple as an integer\n    return int(int_str)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)"
    },
    {
        "number": 116,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str):\n                try:\n                    result.append(float(element))\n                except ValueError:\n                    result.append(element)\n            else:\n                result.append(float(element))\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in test_list:\n        for item in row:\n            try:\n                # Try to convert the item to a float\n                float(item)\n                # If conversion was successful, convert the item to a float\n                row[row.index(item)] = float(item)\n            except ValueError:\n                # If conversion failed, leave the item as a string\n                pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            try:\n                float(element)\n            except ValueError:\n                try:\n                    int(element)\n                    test_list[test_list.index(sublist)][test_list[test_list.index(sublist)].index(element)] = float(element)\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for element in sublist:\n            if isinstance(element, str):\n                try:\n                    float_element = float(element)\n                    sublist[sublist.index(element)] = float_element\n                except ValueError:\n                    pass"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sub_list in test_list:\n        for item in sub_list:\n            try:\n                float(item)\n            except ValueError:\n                return False\n    return True"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    \"\"\"\n    float_list = []\n    for item in test_list:\n        try:\n            float_list.append(float(item))\n        except ValueError:\n            continue\n    return float_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for sublist in test_list:\n        for item in sublist:\n            try:\n                float(item)\n            except ValueError:\n                continue\n            else:\n                sublist[test_list.index(sublist)] = float(item)\n    return test_list"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        for subitem in item:\n            try:\n                float(subitem)\n                result.append(float(subitem))\n            except ValueError:\n                pass\n    return result"
    },
    {
        "number": 117,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # create an empty list to store the converted floats\n    converted_list = []\n    \n    # iterate through each element in the list of lists\n    for sublist in test_list:\n        # iterate through each element in the sublist and try to convert it to a float\n        for element in sublist:\n            try:\n                converted_list.append(float(element))\n            except ValueError:\n                pass # skip this element if it cannot be converted to a float\n                \n    return converted_list\n"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split the string on the space character\n    words = string.split()\n    # return the list of words\n    return words"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_list(string):\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_list(string):\n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # Split the string on the space character and return the resulting list\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 118,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_list(string):\n    \"\"\"\n    Write a function to convert a string to a list of strings split on the space character.\n    \"\"\"\n    return string.split()"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    for i in range(n):\n        count = 1\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n                if count == 2:\n                    return arr[i]\n    return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            return arr[i]\n    return \"No element found\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr)!= len(set(arr)):\n        return \"The array contains duplicates.\"\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] == arr[i-1]:\n                return arr[i]\n        return \"The element appears only once in the array.\""
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_element = None\n\n    for i in range(len(arr)):\n        if i == 0 or arr[i]!= arr[i-1]:\n            if unique_element is None:\n                unique_element = arr[i]\n            else:\n                unique_element = None\n                break\n\n    return unique_element"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Create a dictionary to store the elements and their frequency\n    freq = {}\n    for i in range(len(arr)):\n        if arr[i] in freq:\n            freq[arr[i]] += 1\n        else:\n            freq[arr[i]] = 1\n    \n    # Iterate through the dictionary and find the element that appears only once\n    for key in freq:\n        if freq[key] == 1:\n            return key\n    \n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if arr[i]!= arr[i+1]:\n            return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n < 2:\n        return -1\n\n    # Initialize two pointers, one at the beginning and the other at the end of the array\n    i = 0\n    j = n - 1\n\n    # Move the pointers towards each other until they meet in the middle\n    while i < j:\n        mid = (i + j) // 2\n        # If the element at mid is the only element, return it\n        if mid == 0 or arr[mid]!= arr[mid - 1]:\n            if mid == n - 1 or arr[mid]!= arr[mid + 1]:\n                return arr[mid]\n        # If the element at mid is greater than the only element, move the left pointer to mid + 1\n        elif arr[mid] > arr[mid - 1]:\n            i = mid + 1\n        # If the element at mid is less than the only element, move the right pointer to mid - 1\n        else:\n            j = mid - 1\n\n    # If the only element in the array is at the beginning, return it\n    if arr[i] == arr[0]:\n        return arr[i]\n    # If the only element in the array is at the end, return it\n    elif arr[j] == arr[n - 1]:\n        return arr[j]\n    # If there are multiple elements that appear only once, return -1\n    else:\n        return -1"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # Traverse through the array\n    for i in range(len(arr)):\n        # Check if the element at the current index is equal to the next element\n        if i < len(arr) - 1 and arr[i] == arr[i+1]:\n            # If the element is equal to the next element, check if the next element is equal to the next element\n            if i < len(arr) - 2 and arr[i] == arr[i+2]:\n                # If both the previous and next elements are equal to the current element, return the current element\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    elif arr[0] == arr[-1]:\n        return search(arr[1:-1])\n    else:\n        for i in range(len(arr)):\n            if arr[i] == arr[i+1]:\n                return arr[i]"
    },
    {
        "number": 119,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def search(arr):\n    # Initialize a dictionary to store the indices of elements that appear only once\n    indices = {}\n    # Iterate through the sorted array and update the indices dictionary\n    for i in range(len(arr)):\n        if arr[i] not in indices:\n            indices[arr[i]] = [i]\n        else:\n            indices[arr[i]].append(i)\n    # Iterate through the sorted array again and find the element that appears only once\n    for i in range(len(arr)):\n        if len(indices[arr[i]]) == 1:\n            return arr[i]\n    # If no element appears only once, return None\n    return None"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    list1: a list of tuples of integers.\n\n    Returns:\n    The maximum absolute product between numbers in pairs of tuples within the input list.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the list of tuples\n    for i, tup in enumerate(list1):\n        # Calculate the absolute difference between the current number and the next number in the tuple\n        diff = abs(tup[0] - tup[1])\n        # Update the current product if the new absolute difference is greater than the current product\n        if diff > current_product:\n            current_product = diff\n        # Update the maximum product if the current product is greater than the previous maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n    # Return the maximum absolute product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product_tuple(lst):\n    \"\"\"\n    Given a list of tuples, return the maximum absolute product of the numbers in pairs of tuples.\n    \"\"\"\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0] * list1[j][1])\n            max_product = max(max_product, product)\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n\n    # Iterate through the list of tuples\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the next tuple\n        next_product = current_product * list1[i+1]\n\n        # Update the maximum product if the current product is greater\n        max_product = max(max_product, abs(current_product))\n\n        # Update the current product\n        current_product = next_product\n\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialize the maximum absolute product and the maximum product found so far\n    max_abs_product = float('-inf')\n    max_product = float('-inf')\n\n    # Iterate through the list of tuples and compare the absolute value of the product of each pair\n    for tup in list1:\n        diff = abs(tup[0] * tup[1])\n        if diff > max_abs_product:\n            max_abs_product = diff\n            max_product = tup\n    \n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = abs(list1[i][0]*list1[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            diff = abs(list1[i][0] - list1[j][0]) + abs(list1[i][1] - list1[j][1])\n            if diff > max_product:\n                max_product = diff\n    return max_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_abs_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0]*list1[j][1]\n            if product > max_abs_product:\n                max_abs_product = product\n    return max_abs_product"
    },
    {
        "number": 120,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    \"\"\"\n    max_product = float('-inf')  # initialize maximum product to negative infinity\n    \n    # loop through each pair of tuples in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # find the absolute difference between the first number in the pair and the second number in the pair\n            diff = abs(list1[i][0] - list1[j][0])\n            # update the maximum product if the absolute difference is greater than the current maximum product\n            if diff > max_product:\n                max_product = diff\n    \n    return max_product"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list to store the factors of each number\n    factors = {}\n\n    # loop through each number from 1 to the limit\n    for num in range(1, limit+1):\n        # check if the number is amicable\n        if num % 2!= 0 and (limit - num) % 6!= 0 and num!= (limit - num):\n            # get the factors of the number\n            factors[num] = list(range(1, int(num**0.5)+1))\n            for factor in factors[num]:\n                if num % factor == 0:\n                    factors[num].remove(factor)\n                    break\n\n            if len(factors[num]) == 0:\n                # the number is amicable and can be summed up\n                amicable_sum += num\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    sum_of_amicable = 0\n    for i in range(1, limit):\n        for j in range(2, i):\n            if i == j:\n                continue\n            if i % j == 0 and j % i == 0:\n                if i + j == limit:\n                    sum_of_amicable += i + j\n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n\n    amicable_numbers = []\n\n    for num in range(1, limit + 1):\n        # Check if the number is divisible by any number between 1 and the square root of the number\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                break\n        else:\n            amicable_numbers.append(num)\n\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n\n    # Initialize a dictionary to store the sum of proper divisors for each number\n    divisors_sum_dict = {}\n\n    # Loop through all numbers from 1 to limit (inclusive)\n    for i in range(1, limit + 1):\n        # Check if the number is a proper divisor of itself\n        if i in divisors_sum_dict:\n            # If it is, add it to the sum of proper divisors for all numbers up to limit\n            divisors_sum_dict[i] += i\n\n    # Sum all values in the dictionary\n    amicable_sum = sum(divisors_sum_dict.values())\n\n    return amicable_sum"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(n):\n    '''\n    Helper function to check if a number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef sum_amicable_numbers(limit):\n    '''\n    Sums all the amicable numbers from 1 to a specified number.\n    '''\n    amicable_sum = 0\n    for i in range(1, limit+1):\n        if is_prime(i) and is_prime(limit-i):\n            amicable_sum += i\n    return amicable_sum\n\n\ndef main():\n    '''\n    Main function for the script.\n    '''\n    limit = int(input(\"Enter the limit: \"))\n    print(\"The sum of all amicable numbers from 1 to\", limit, \"is:\", sum_amicable_numbers(limit))\n\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    \"\"\"\n    amicable_numbers = []\n    for num in range(1, limit + 1):\n        if num in amicable_numbers:\n            continue\n        elif num in amicable_numbers:\n            continue\n        elif num in amicable_numbers:\n            continue\n        else:\n            is_amicable = True\n            for i in range(1, num):\n                if num % i == 0:\n                    is_amicable = False\n                    break\n            if is_amicable:\n                amicable_numbers.append(num)\n    return sum(amicable_numbers)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_amicable(n):\n    # First check if n is a perfect square\n    if n % 4 == 0:\n        a = n // 2\n        while a * a <= n:\n            if n % a == 0:\n                return False\n            a += 1\n        return True\n    # Check if n is a proper amicable number\n    elif n < 28:\n        a = 1\n        while a < n:\n            if n % a == 0:\n                b = n // a\n                if b!= a and is_amicable(b):\n                    return True\n            a += 1\n    # Check if n is a prime number\n    else:\n        return all(n % i!= 0 for i in range(2, int(n ** 0.5) + 1))\n\ndef amicable_numbers_sum(limit):\n    total_sum = 0\n    for n in range(1, limit + 1):\n        if is_amicable(n):\n            total_sum += n\n    return total_sum\n\nlimit = int(input(\"Enter the limit: \"))\nresult = amicable_numbers_sum(limit)\nprint(\"The sum of all amicable numbers from 1 to\", limit, \"is\", result)"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_amicable_numbers(limit):\n    \"\"\"\n    This function takes a number as input and returns the sum of all amicable numbers from 1 to that number.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit+1):\n        if num in amicable_numbers(num):\n            amicable_sum += num\n    return amicable_sum\n\ndef amicable_numbers(num):\n    \"\"\"\n    This function takes a number as input and returns a list of all its amicable numbers.\n    \"\"\"\n    result = []\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and i!= num:\n            if num//i == i:\n                result.append(num//i)\n            else:\n                result.append(num)\n    return result"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # Initialize variables for sum and current number\n    sum_of_amicable = 0\n    current_number = 2\n    \n    # Loop through all numbers from 1 to limit\n    while current_number <= limit:\n        # Check if current number is a prime number\n        is_prime = True\n        for i in range(2, int(current_number**0.5)+1):\n            if current_number % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            # Check if current number is amicable\n            sum_of_current_number = current_number + sum(divisors(current_number))\n            if sum_of_current_number == current_number and sum_of_current_number == sum(divisors(sum_of_current_number)):\n                sum_of_amicable += sum_of_current_number\n        \n        # Move to the next number\n        current_number += 1\n    \n    return sum_of_amicable"
    },
    {
        "number": 123,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    # initialize variables\n    amicable_sum = 0\n    i = 1\n    limit = limit - 1\n    \n    # loop through numbers from 1 to the specified limit\n    while i <= limit:\n        # check if the number is amicable by comparing its sum to the original number\n        if i + 1 == sum_of_amicable_numbers(i):\n            amicable_sum += i + 1\n            \n        # increment i\n        i += 1\n    \n    # return the sum of amicable numbers\n    return amicable_sum\n\ndef sum_of_amicable_numbers(n):\n    '''\n    Write a function to calculate the sum of all amicable numbers from 1 to a specified number.\n    '''\n    # initialize variables\n    i = 1\n    limit = n\n    amicable_sum = 0\n    \n    # loop through numbers from 1 to the specified limit\n    while i <= limit:\n        # check if the number is amicable by comparing its sum to the original number\n        if i + 1 == n:\n            amicable_sum += i + 1\n            \n        # increment i\n        i += 1\n    \n    # return the sum of amicable numbers\n    return amicable_sum"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b * 1j)"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a+b*1j) #phase() returns the angle in radians\n    angle = cmath.degrees(angle) #converts to degrees\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    This function takes in two complex numbers as input and returns the angle of the complex number in radians.\n    \"\"\"\n    magnitude = cmath.sqrt(a.real**2 + a.imag**2)\n    angle = cmath.phase(a)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    angle = cmath.phase(a+b)\n    return angle.real"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # Find the square root of the sum of squares of real and imaginary parts\n    root = cmath.sqrt(a**2 + b**2)\n    \n    # Calculate the angle using the arccosine function\n    angle = cmath.phase(a + b*1j)\n    \n    # Convert the angle to degrees\n    angle = angle * 180 / cmath.pi\n    \n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n\n    angle = cmath.phase(complex(a,b))\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n\n    Parameters:\n    a (complex): The real part of the complex number.\n    b (complex): The imaginary part of the complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    angle = cmath.phase(a + b*1j)\n    return angle.real"
    },
    {
        "number": 124,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(complex(a,b))\n    angle = angle * 180 / cmath.pi\n    return angle"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize two variables to store the number of 0s and 1s in the string \n    zero_count = 0 \n    one_count = 0 \n    # Initialize a variable to store the maximum difference between the count of 0s and 1s \n    max_diff = 0 \n    # Loop through the characters of the string \n    for char in string: \n        # If the character is a 0, increment the number of 0s \n        if char == '0': \n            zero_count += 1 \n        # If the character is a 1, increment the number of 1s \n        elif char == '1': \n            one_count += 1 \n        # Otherwise, do nothing \n        else: \n            continue \n        # Calculate the difference between the number of 0s and 1s \n        diff = abs(zero_count - one_count) \n        # Update the maximum difference if the current difference is greater \n        if diff > max_diff: \n            max_diff = diff \n    # Return the maximum difference \n    return max_diff "
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    # Initialize variables for count of 0s and 1s\n    count0 = count1 = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the count of 0s\n        if char == '0':\n            count0 += 1\n        # If the character is a 1, increment the count of 1s\n        elif char == '1':\n            count1 += 1\n        # If the count of 1s is greater than the count of 0s, return the difference as the maximum difference\n        elif count1 > count0:\n            return count1 - count0\n    \n    # If no 1 is found, return the difference as the maximum difference\n    return count1 - count0"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_length(string): \n    n = len(string)\n    dp = [0] * n \n    max_diff = 0\n    for i in range(1, n): \n        if string[i] == '0': \n            dp[i] = dp[i-1] + 1 \n            if max_diff < dp[i]: \n                max_diff = dp[i] \n        else: \n            dp[i] = dp[i-1] \n    return max_diff \n"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    diff = 0\n    count = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            if count > diff:\n                diff = count\n            count = 0\n        if i > 0 and string[i] == string[i-1]:\n            max_diff = max(max_diff, diff)\n            diff = 0\n    max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Initialize variables to keep track of the number of 0s and 1s in each sub-string\n    zeros = ones = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # If the character is a 0, increment the number of 0s\n        if char == '0':\n            zeros += 1\n        # If the character is a 1, increment the number of 1s\n        else:\n            ones += 1\n        \n        # Calculate the maximum difference between the number of 0s and number of 1s in any sub-string\n        max_diff = max(zeros - ones, ones - zeros)\n        \n        # Update the variables for the next sub-string\n        zeros = ones = 0\n    \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        count_0 = 0\n        count_1 = 0\n        for j in range(i, len(string)):\n            if string[j] == '0':\n                count_0 += 1\n            else:\n                count_1 += 1\n            diff = count_0 - count_1\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    n = len(string)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            diff = 0\n            zero_count = 0\n            one_count = 0\n            for k in range(i, j):\n                if string[k] == '0':\n                    zero_count += 1\n                else:\n                    one_count += 1\n                diff = max(diff, abs(zero_count - one_count))\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_length(string): \n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    \"\"\"\n    # Initialize variables\n    count_zeros = 0\n    count_ones = 0\n    max_diff = 0\n\n    # Iterate through the string\n    for i in range(len(string)):\n        # If the character is a 0, increment the count of zeros\n        if string[i] == '0':\n            count_zeros += 1\n        # If the character is a 1, increment the count of ones\n        else:\n            count_ones += 1\n\n        # Update the maximum difference between the counts\n        diff = abs(count_ones - count_zeros)\n        if diff > max_diff:\n            max_diff = diff\n\n    # Return the maximum difference\n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    n = len(string)\n    count = [0] * 2\n    \n    for i in range(n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n    max_diff = count[0] - count[1]\n    \n    for i in range(1, n):\n        if string[i] == '0':\n            count[0] += 1\n        else:\n            count[1] += 1\n            \n        diff = count[0] - count[1]\n        \n        if diff > max_diff:\n            max_diff = diff\n            \n    return max_diff"
    },
    {
        "number": 125,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_length(string):\n    max_diff = 0\n    prev_zero_count = 0\n    prev_one_count = 0\n\n    for i in range(len(string)):\n        if string[i] == '0':\n            prev_zero_count += 1\n        else:\n            prev_one_count += 1\n\n        diff = abs(prev_zero_count - prev_one_count)\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n\n    def gcd(a, b):\n        \"\"\"\n        Find the greatest common divisor of two given numbers.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    common_divisor = gcd(a, b)\n    sum_of_divisors = a + b\n\n    return sum_of_divisors - (common_divisor * (a // common_divisor))\n"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Function to find the sum of common divisors of two given numbers\n    def common_divisor_sum(x, y):\n        sum = 0\n        for i in range(1, min(x, y)+1):\n            if x % i == 0 and y % i == 0:\n                sum += i\n        return sum\n\n    # Return the sum of common divisors of the two numbers\n    return common_divisor_sum(a, b)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns their sum of their common divisors.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        This function takes two numbers as input and returns their greatest common divisor.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    def common_divisors(x, y):\n        \"\"\"\n        This function takes two numbers as input and returns their common divisors.\n        \"\"\"\n        divisors = []\n        for i in range(1, min(x, y) + 1):\n            if x % i == 0 and y % i == 0:\n                divisors.append(i)\n        return divisors\n\n    def sum_of_divisors(common_divisors):\n        \"\"\"\n        This function takes a list of common divisors as input and returns their sum.\n        \"\"\"\n        return sum(common_divisors)\n\n    return sum_of_divisors(common_divisors(a, b))"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum(a,b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    common_divisors = []\n    divisor = 1\n    while divisor <= a:\n        if a % divisor == 0 and b % divisor == 0:\n            common_divisors.append(divisor)\n        divisor += 1\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum(a,b): \n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, min(a,b)+1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a Python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # function to find the GCD of two numbers\n    def gcd(a, b):\n        \"\"\"\n        Function to find the greatest common divisor of two numbers.\n        \"\"\"\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    # find the GCD of the two numbers\n    gcd_ab = gcd(a, b)\n\n    # find the sum of common divisors of the two numbers\n    sum_cd = a + b + gcd_ab\n\n    # return the sum of common divisors\n    return sum_cd"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Find all common divisors of a and b\n    divisors = []\n    for i in range(1, max(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            divisors.append(i)\n\n    # Find the sum of all common divisors\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    def is_common_divisor(num, divisor):\n        \"\"\"\n        Returns True if num is a common divisor of num and divisor, False otherwise.\n        \"\"\"\n        return num % divisor == 0\n\n    def find_common_divisors(num1, num2):\n        \"\"\"\n        Returns a list of common divisors of num1 and num2.\n        \"\"\"\n        divisors = []\n        for i in range(1, num1 + 1):\n            if is_common_divisor(i, num1) and is_common_divisor(i, num2):\n                divisors.append(i)\n        return divisors\n\n    common_divisors = find_common_divisors(a, b)\n    return sum(common_divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    This function will return the sum of common divisors of two given numbers.\n    \"\"\"\n    divisors = []\n    for i in range(1, num1+1):\n        if num1 % i == 0 and num2 % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 126,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    \"\"\"\n    # find the GCD of a and b\n    gcd = 1\n    while gcd!= a and gcd!= b:\n        if a > b:\n            a -= b\n        else:\n            b -= a\n        gcd = a if a > b else b\n\n    # find the sum of common divisors\n    sum_cd = 1\n    for i in range(2, gcd + 1):\n        if gcd % i == 0 and a % i == 0 and b % i == 0:\n            sum_cd += i\n\n    return sum_cd"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    print(f\"The product of {x} and {y} is {result}.\")"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    result = 0\n    while y!= 0:\n        remainder = x % y\n        x = y\n        y = remainder\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = x * y\n    return result\n"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    result = 0\n    for i in range(y):\n        result += x\n    return result"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers.\n    \"\"\"\n    return x * y"
    },
    {
        "number": 127,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [] # create an empty list to store the long words\n    \n    for word in words: # iterate through each word\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # if it is, add it to the list of long words\n    \n    return long_words # return the list of long words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    \"\"\"\n    Write a function to find words that are longer than n characters from a given list of words.\n    \"\"\"\n    words = str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # split the input string into words\n    words = str.split()\n    # create an empty list to store the long words\n    long_words = []\n    # iterate over the words in the list\n    for word in words:\n        # check if the length of the word is greater than n\n        if len(word) > n:\n            # add the word to the list of long words\n            long_words.append(word)\n    # return the list of long words\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # split the string into words\n    long_words = [] # initialize an empty list to store the long words\n\n    for word in words:\n        if len(word) > n: # check if the length of the word is greater than n\n            long_words.append(word) # add the word to the long_words list\n\n    return long_words # return the long_words list"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split() # convert string to list of words\n    result = []\n    for word in words:\n        if len(word) > n: # check if word is longer than n characters\n            result.append(word) # append to result list\n    return result"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"
    },
    {
        "number": 128,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def long_words(n, words):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in words:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    \n    # Check if the matrix is rectangular\n    if rows!= cols:\n        return False\n    \n    # Check if the matrix contains non-integer values\n    for row in my_matrix:\n        for elem in row:\n            if not isinstance(elem, int):\n                return False\n    \n    # Check if the matrix contains repeated values\n    for i in range(rows):\n        for j in range(cols):\n            # Check up and to the left\n            if (i > 0) and (j > 0) and (my_matrix[i][j] == my_matrix[i-1][j-1]):\n                return False\n            # Check down and to the left\n            if (i < rows-1) and (j > 0) and (my_matrix[i][j] == my_matrix[i+1][j-1]):\n                return False\n            # Check up and to the right\n            if (i > 0) and (j < cols-1) and (my_matrix[i][j] == my_matrix[i-1][j+1]):\n                return False\n            # Check down and to the right\n            if (i < rows-1) and (j < cols-1) and (my_matrix[i][j] == my_matrix[i+1][j+1]):\n                return False\n    \n    # Check if the matrix is a magic square\n    for i in range(rows):\n        for j in range(cols):\n            sum_row = sum(my_matrix[i])\n            sum_col = sum(row[j] for row in my_matrix)\n            if (my_matrix[i][j]!= sum_row - i) and (my_matrix[i][j]!= sum_col - j):\n                return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    n = len(my_matrix)\n    # Check if the matrix is a square\n    if n!= len(my_matrix[0]):\n        return False\n\n    # Check if the matrix is symmetric\n    for i in range(n):\n        if my_matrix[i][n-1-i]!= my_matrix[n-1-i][i]:\n            return False\n\n    # Check if the matrix is a magic square\n    for i in range(n):\n        for j in range(n):\n            # Check if the element is present in the correct row and column\n            if my_matrix[i][j]!= i+1 and my_matrix[j][i]!= i+1:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    m = len(my_matrix[0])\n\n    # check if the matrix is a square\n    if n!= m:\n        return False\n\n    # check if the matrix contains only integers\n    for row in my_matrix:\n        for element in row:\n            if not isinstance(element, int):\n                return False\n\n    # create a magic square\n    magic_sum = sum(sum(row) for row in my_matrix)\n    magic_square = [i for i in range(1, n * n + 1)]\n\n    # check if the magic square contains only integers\n    for element in magic_square:\n        if element not in [sum(row) for row in my_matrix]:\n            return False\n\n    # check if the magic square is a magic square\n    for i in range(n * n):\n        row = [magic_square[i]] * n\n        magic_sum = sum(row)\n        if magic_sum not in magic_square:\n            return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Find the sum of the diagonal of the matrix\n    diagonal_sum = sum(sum(row) for row in my_matrix)\n    \n    # Check if the diagonal sum is equal to the sum of the elements in the matrix\n    if diagonal_sum == sum(my_matrix[0]) + sum(my_matrix[i][j] for i in range(len(my_matrix)) for j in range(len(my_matrix[0]))):\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n\n    # Check if the matrix has exactly 3 rows and 3 columns\n    if len(my_matrix)!= 3 or len(my_matrix[0])!= 3:\n        return False\n\n    # Check if the matrix contains only integers between 1 and 9\n    for row in my_matrix:\n        for num in row:\n            if not isinstance(num, int) or num < 1 or num > 9:\n                return False\n\n    # Check if the matrix is a magic square\n    square = my_matrix[0]\n    for i in range(1, 3):\n        for j in range(1, 3):\n            if square[i][j]!= square[i-1][j-1] + square[i-1][j] + square[i-1][j+1] + \\\n               square[i][j-1] + square[i][j+1] + square[i+1][j-1] + square[i+1][j] + square[i+1][j+1]:\n                return False\n\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    sum_of_rows = [sum(row) for row in my_matrix]\n    sum_of_columns = [sum(col) for col in zip(*my_matrix)]\n    square_sum = sum(sum_of_rows) + sum(sum_of_columns)\n\n    if square_sum == n**2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    \"\"\"\n\n    # Initialize the sum of the elements in each row and column\n    row_sums = [sum(row) for row in my_matrix]\n    col_sums = [sum(col) for col in zip(*my_matrix)]\n\n    # Calculate the difference between the sum of each row and column\n    row_diff = abs(sum(row_sums) - sum(row_sums))\n    col_diff = abs(sum(col_sums) - sum(col_sums))\n\n    # Check if the sum of each row and column is the same\n    if row_diff == 0 and col_diff == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    # Check if the matrix is a square matrix\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    \n    # Check if all rows have the same sum\n    row_sums = [sum(row) for row in my_matrix]\n    if len(set(row_sums))!= 1:\n        return False\n    \n    # Check if all columns have the same sum\n    col_sums = [sum(my_matrix[i][j] for i in range(len(my_matrix))) for j in range(len(my_matrix[0]))]\n    if len(set(col_sums))!= 1:\n        return False\n    \n    # Check if the diagonal has the same sum as the main diagonal\n    diagonal_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if diagonal_sum!= my_matrix[len(my_matrix)//2][len(my_matrix)//2]:\n        return False\n    \n    # Check if the diagonal has the same sum as the reverse diagonal\n    reverse_diagonal_sum = sum(my_matrix[i][-i-1] for i in range(len(my_matrix)))\n    if reverse_diagonal_sum!= my_matrix[len(my_matrix)//2][len(my_matrix)-len(my_matrix)//2-1]:\n        return False\n    \n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    for i in range(n):\n        row_sum = sum(my_matrix[i])\n        col_sum = sum(my_matrix[j] for j in range(n))\n        diag_sum = sum(my_matrix[i][j] for i in range(n) for j in range(n))\n        if row_sum!= col_sum or row_sum!= diag_sum or col_sum!= diag_sum:\n            return False\n    return True"
    },
    {
        "number": 129,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Initialize variables to keep track of the size of the matrix and the sum of the diagonal elements\n    size = len(my_matrix)\n    diagonal_sum = 0\n\n    # Check if the matrix is square\n    if size!= len(my_matrix[0]):\n        return False\n\n    # Calculate the sum of the diagonal elements\n    for i in range(size):\n        diagonal_sum += my_matrix[i][i]\n\n    # Check if the sum of the diagonal elements is equal to the sum of the matrix elements\n    if diagonal_sum!= sum(sum(row) for row in my_matrix):\n        return False\n\n    # Check if each row, column, and 2x2 sub-matrix is a magic square\n    for i in range(size):\n        # Check each row\n        for j in range(size):\n            if not is_magic_square(my_matrix, i, j, size):\n                return False\n\n        # Check each column\n        for j in range(size):\n            if not is_magic_square(my_matrix, j, i, size):\n                return False\n\n        # Check each 2x2 sub-matrix\n        for row in range(0, size, 2):\n            for col in range(0, size, 2):\n                if not is_magic_square(my_matrix, row, col, 2):\n                    return False\n\n    return True\n\ndef is_magic_square(my_matrix, i, j, size):\n    '''\n    Check if the matrix is a magic square by checking if the sum of the rows and columns is equal to the diagonal element.\n    '''\n    # Initialize variables to keep track of the sum of the rows and columns\n    row_sum = 0\n    column_sum = 0\n\n    # Check if the matrix is a magic square\n    for k in range(size):\n        row_sum += my_matrix[i][k]\n        column_sum += my_matrix[k][j]\n\n    # Check if the sum of the rows and columns is equal to the diagonal element\n    if i == j:\n        if row_sum!= my_matrix[i][i] or column_sum!= my_matrix[j][j]:\n            return False\n    elif i + j == size - 1:\n        if row_sum!= my_matrix[i][i] or column_sum!= my_matrix[j][j]:\n            return False\n\n    return True"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item in the list\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with the maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    max_item = None\n    max_count = 0\n    \n    for num in nums:\n        count_dict[num] += 1\n        \n        # Update the max item and count if the current count is greater than the previous max count\n        if count_dict[num] > max_count:\n            max_item = num\n            max_count = count_dict[num]\n    \n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = 0\n    max_num = None\n    for num, count in freq.items():\n        if count > max_freq:\n            max_freq = count\n            max_num = num\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    max_freq = 0\n    max_item = None\n\n    for num in nums:\n        freq_map[num] += 1\n\n        if freq_map[num] > max_freq:\n            max_freq = freq_map[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n\n    for num in nums:\n        freq[num] += 1\n\n    max_count = 0\n    max_item = None\n\n    for item, count in freq.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # Create a dictionary to store the frequency of each item\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_freq = 0\n    for item, freq in freq.items():\n        if freq > max_freq:\n            max_item = item\n            max_freq = freq\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_num = max(freq, key=freq.get)\n    return max_num"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    max_count = 0\n    max_item = None\n\n    for num in nums:\n        count[num] += 1\n        if count[num] > max_count:\n            max_count = count[num]\n            max_item = num\n\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_dict = defaultdict(int)\n    for num in nums:\n        freq_dict[num] += 1\n    max_freq = max(freq_dict.values())\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq == max_freq:\n            max_item = item\n    return max_item"
    },
    {
        "number": 130,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    max_freq = max(freq.values())\n    max_num = [key for key, value in freq.items() if value == max_freq][0]\n    return max_num"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    result = ''\n    for i in range(len(str1)-1, -1, -1):\n        if str1[i] not in vowels:\n            result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    reversed_str = \"\"\n    for i in str1:\n        if i.lower() in vowels:\n            reversed_str = i + reversed_str\n        else:\n            reversed_str = reversed_str + i\n    return reversed_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    vowels = 'aeiouAEIOU'\n    vowel_reverse = []\n    vowels_set = set(vowels)\n    for char in str1:\n        if char not in vowels_set:\n            vowel_reverse.append(char)\n    vowel_reverse = ''.join(vowel_reverse)\n    return vowel_reverse[::-1]"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            result = char + result\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    new_str = ''\n    for char in str1:\n        if char in vowels and char not in new_str:\n            new_str += char\n            vowel_count += 1\n    if vowel_count == 0:\n        return 'There are no vowels in the given string.'\n    else:\n        new_str = new_str[::-1]\n        return new_str"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    vowel_indices = []\n    result = \"\"\n    for i, char in enumerate(str1):\n        if char in vowels:\n            vowel_indices.append(i)\n    vowel_indices.reverse()\n    for i in vowel_indices:\n        result += str1[i]\n    return result"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    vowels = [char for char in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(char)\n    result = result[::-1]\n    return \"\".join(result)"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # Define the pattern for vowels\n    vowels = re.compile('[aeiouAEIOU]')\n    \n    # Reverse only the vowels\n    str2 = vowels.sub('', str1)\n    str2 = str2[::-1]\n    \n    return str2"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    vowels = \"aeiouAEIOU\"\n    # initialize an empty list to store the reversed vowels\n    reversed_vowels = []\n    # loop through each character in the input string\n    for char in str1:\n        # check if the character is a vowel\n        if char in vowels:\n            # if it is, append it to the reversed_vowels list in reverse order\n            reversed_vowels.append(char)\n    # join the reversed_vowels list into a string and return it\n    return ''.join(reversed_vowels[::-1])"
    },
    {
        "number": 131,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    new_str = ''\n    for char in str1:\n        if char.lower() not in vowels:\n            new_str += char\n            vowel_count += 1\n    return new_str[::-1] + vowel_count"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 += str(i) + \" \"\n    return str1.strip()"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tup_string(tup):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # convert the tuple to a string\n    result = str(tup1)\n    # return the string\n    return result"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert a tuple to a string.\n    \"\"\"\n    return str(tup1)"
    },
    {
        "number": 132,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Convert the tuple to a string\n    str_tuple = str(tup1)\n    # Print the string\n    print(str_tuple)"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([num for num in nums if num < 0])"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_negative = 0\n    for num in nums:\n        if num < 0:\n            sum_negative += num\n    return sum_negative"
    },
    {
        "number": 133,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n <= 0:\n        return None\n    elif n == 1:\n        return 1\n    else:\n        return n*2 - 1\n"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n + 1) * ((3 * n) ** 0.5)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n\n    # Check if n is a positive integer\n    if n <= 0 or not isinstance(n, int):\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize the sum variable\n    sum = 0\n\n    # Loop through each row\n    for i in range(1, n+1):\n\n        # Calculate the number of hexagons in the current row\n        num_hexagons = (2 * i * (i+1)) + (i+1)\n\n        # Add the sum of the hexagonal numbers in the current row\n        sum += num_hexagons\n\n    # Return the nth hexagonal number\n    return sum"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 6\n    c = 12\n    \n    # Iterate until nth hexagonal number is found\n    for i in range(1, n+1):\n        # Calculate the nth hexagonal number\n        nth_hexagonal = a + b + c\n        \n        # Print the nth hexagonal number\n        print(nth_hexagonal)\n        \n        # Update values for next iteration\n        a = b\n        b = c\n        c = 6 * a + 6 * b"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    \"\"\"\n    # Convert n to binary\n    binary = bin(n)[2:]\n    # Calculate the number of bits\n    num_bits = len(binary)\n    # Calculate the number of squares\n    num_squares = num_bits // 2\n    # Calculate the number of remaining bits in the squares\n    remaining_bits = num_bits % 2\n    # Calculate the exponent\n    exponent = num_squares - 1\n    # Calculate the hexagonal number\n    hexagonal = (2 * n + 1) ** exponent\n    # Check if there's any remaining bits\n    if remaining_bits:\n        hexagonal += 2 ** remaining_bits\n    return hexagonal"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*(2*n-1)*(2*n-2))/6"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (2 * n - 1)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Find the nth line\n    line_num = n // 2\n    # Find the position in the line\n    pos_in_line = n % 2\n    # Calculate the hexagonal number\n    hex_num = (line_num ** 2) - ((line_num + 1) ** 2) + pos_in_line\n    return hex_num"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def hexagonal_num(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # Initialize the first two terms of the series\n    prev_term = 1\n    term = 6\n    \n    # Calculate the nth term of the series\n    for i in range(1, n+1):\n        # Update the previous term\n        prev_term = term\n        \n        # Update the current term\n        term = 6*prev_term - 3\n        \n        # Print the current term\n        print(term)"
    },
    {
        "number": 135,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return 2*n*(n+1)"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n            \n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n\n    # Initialize counters for non-zero and zero elements\n    non_zero = 0\n    zero = 0\n\n    # Iterate through the array and count non-zero and zero elements\n    for num in nums:\n        if num!= 0:\n            non_zero += 1\n        else:\n            zero += 1\n\n    # Calculate the ratio of non-zero to zero elements\n    ratio = non_zero / zero\n\n    # Return the ratio of non-zero to zero elements\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    non_zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    zero_ratio = zero_count/non_zero_count\n    return zero_ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    arr = array('i', nums) # convert list to array of integers\n    zeroes = sum(arr == 0)\n    non_zeroes = len(arr) - zeroes\n    ratio = 0 if non_zeroes == 0 else zeroes / non_zeroes\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    non_zero_count = 0\n    zero_count = 0\n    \n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n        else:\n            zero_count += 1\n    \n    return non_zero_count / zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    \n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    \n    if non_zeroes == 0:\n        return 0\n    \n    return zeroes / non_zeroes"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n    '''\n    # Convert the array to an array of non-negative integers\n    nums = [abs(num) for num in nums]\n    \n    # Convert the array to an array of booleans\n    bools = [num == 0 for num in nums]\n    \n    # Calculate the ratio of zeroes to non-zeroes\n    zero_count = sum(bools) / len(bools)\n    \n    # Return the ratio of zeroes to non-zeroes\n    return zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # Convert the array to a list\n    nums_list = list(nums)\n    # Initialize counters for zeroes and non-zeroes\n    zero_count = 0\n    non_zero_count = 0\n    # Iterate through the list and count the zeroes and non-zeroes\n    for num in nums_list:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n    # Return the ratio\n    return ratio"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    zeros = array('i', [0] * n)\n    ones = array('i', [0] * n)\n    \n    for num in nums:\n        if num == 0:\n            zeros[zeros.index(num) + 1] += 1\n        else:\n            ones[ones.index(num) + 1] += 1\n            \n    non_zero_count = 0\n    for num in nums:\n        if num!= 0:\n            non_zero_count += 1\n    \n    zeros_count = sum(zeros)\n    ones_count = sum(ones)\n    \n    return zeros_count / non_zero_count"
    },
    {
        "number": 137,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef zero_count(nums):\n    \"\"\"\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        nums (list or tuple or array): List or tuple of integers.\n\n    Returns:\n        float: Ratio of zeroes to non-zeroes in the input array.\n    \"\"\"\n\n    # Convert input array to array of integers\n    nums = array('i', nums)\n\n    # Count the number of zeroes and non-zeroes in the array\n    zero_count = sum(1 for num in nums if num == 0)\n    non_zero_count = len(nums) - zero_count\n\n    # Calculate the ratio of zeroes to non-zeroes\n    ratio = zero_count / non_zero_count\n\n    return ratio"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # If n is zero or one, it can be represented as sum of non-zero powers of 2\n    if n == 0 or n == 1:\n        return True\n    \n    # If n is greater than 1, check if any power of 2 can be obtained by dividing n by 2\n    while n > 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            return False\n    \n    # If n is still greater than 1 at the end of the loop, it can be represented as sum of non-zero powers of 2\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # check if n is 0 or 1\n    if n == 0 or n == 1:\n        return True\n    \n    # check if n is already a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # loop through odd numbers from 3 to n/2\n    for i in range(3, n//2+1, 2):\n        # check if i^2 + n is a power of 2\n        if (i*i+n) & (i*i+n-1) == 0:\n            return True\n    \n    # if we get to here, n cannot be represented as sum of non-zero powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    # Check if the given number is a power of 2\n    if n == 1 or n == 2:\n        return True\n    \n    # Check if the given number is divisible by 2 and power of 2\n    while n % 2 == 0 and n > 1:\n        if n == 4:\n            return True\n        n = n // 2\n    \n    # Check if the given number is divisible by 4 and power of 2\n    while n % 4 == 0 and n > 1:\n        if n == 16:\n            return True\n        n = n // 4\n    \n    # Check if the given number is divisible by 8 and power of 2\n    while n % 8 == 0 and n > 1:\n        if n == 64:\n            return True\n        n = n // 8\n    \n    # Check if the given number is divisible by 16 and power of 2\n    while n % 16 == 0 and n > 1:\n        if n == 256:\n            return True\n        n = n // 16\n    \n    # Check if the given number is divisible by 32 and power of 2\n    while n % 32 == 0 and n > 1:\n        if n == 1024:\n            return True\n        n = n // 32\n    \n    # Check if the given number is divisible by 64 and power of 2\n    while n % 64 == 0 and n > 1:\n        if n == 4096:\n            return True\n        n = n // 64\n    \n    # Check if the given number is divisible by 128 and power of 2\n    while n % 128 == 0 and n > 1:\n        if n == 16384:\n            return True\n        n = n // 128\n    \n    # Check if the given number is divisible by 256 and power of 2\n    while n % 256 == 0 and n > 1:\n        if n == 65536:\n            return True\n        n = n // 256\n    \n    # Check if the given number is divisible by 512 and power of 2\n    while n % 512 == 0 and n > 1:\n        if n == 262144:\n            return True\n        n = n // 512\n    \n    # Check if the given number is divisible by 1024 and power of 2\n    while n % 1024 == 0 and n > 1:\n        if n == 1048576:\n            return True\n        n = n // 1024\n    \n    # If none of the above conditions are true, then it cannot be represented as sum of powers of 2\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # check if n is a power of 2\n    if (n & (n-1)) == 0:\n        # check if n is a sum of powers of 2\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                if n//i == i:\n                    return True\n                else:\n                    return False\n\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is 0 or 1\n    if n == 0 or n == 1:\n        return True\n\n    # Check if the number is divisible by 2\n    if n % 2 == 0:\n        return False\n\n    # Loop until the square root of n is reached\n    sqrt_n = int(n ** 0.5)\n    for i in range(sqrt_n+1):\n        if n % (2 ** i) == 0:\n            # Check if the remaining number is divisible by 2 ** i\n            if n % (2 ** (i+1)) == 0:\n                return False\n\n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    This function checks whether the given number can be represented as sum of non-zero powers of 2 or not.\n    \"\"\"\n    if n == 0:\n        return True\n    \n    if n < 0:\n        return False\n    \n    if n % 2 == 0:\n        return False\n    \n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n            \n    return True"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n\n    # Check if the number is a power of 2\n    if n & (n-1) == 0: \n        return True\n\n    # Check if the number can be represented as sum of powers of 2\n    for i in range(2, int(n**0.5)+1): \n        if n % i == 0: \n            return True\n\n    # If the number can be represented as sum of powers of 2, return True\n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # loop through all possible sums of powers of 2 \n    for i in range(1, n+1): \n        # check if the sum is a power of 2 \n        if i == 2**k: \n            return True\n    \n    # if no such power of 2 is found, the number cannot be represented as sum of non-zero powers of 2 \n    return False"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        return True\n    \n    # Check if n can be represented as sum of powers of 2\n    is_sum = True\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            is_sum = False\n            break\n        if n % (i**2) == 0:\n            is_sum = False\n            break\n    \n    return is_sum"
    },
    {
        "number": 138,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # Initialize a set to store the non-zero powers of 2\n    powers_of_2 = set()\n\n    # Find the non-zero powers of 2 in the number n\n    while n!= 1:\n        if n % 2 == 0:\n            powers_of_2.add(2)\n            n //= 2\n        else:\n            powers_of_2.add(n)\n            n = 3 * n + 1\n\n    # Check if the number can be represented as sum of powers of 2\n    if len(powers_of_2) == 1 and pow(2, len(powers_of_2)) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pi = 3.14159\n    return 2 * pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    print(\"The circumference of the circle is:\", circumference)"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    circumference = 2 * 3.14159 * r  # pi * radius\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    \"\"\"\n    pi = 3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844609550582231725359408128481117450284102701938521105559644622948954930381964428810975665933446128475648233786783165271201909145648566923460348610454326648213393607260249141273724587006606315588174881520920962829254091715364367892590360011330530548820466521384146951941511609433057270365759591953092186117381932611793105118548074462379962749567351885752724891227938183011949129833673362440656643086021394946395224737190702179860943702770539217176293176752384674818467669405132000568127145263560827785771342757789609173637178721468440901224953430146549585371050792279689258923542019956112129021960864034418159813629774771309960518707211349999998372978049951059731732816096318595024459455346908302642522308253344685035261931188171010003137838752886587533208381420617177669147303598253490428755468731159562863882353787593751957781857780532171226806"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14159 * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # using the formula for the circumference of a circle\n    return circumference"
    },
    {
        "number": 139,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2 * 3.14 * r  # Formula for circumference\n    return circumference"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    flat_list = []\n    for sublist in test_list:\n        flat_list.extend(sublist)\n    return flat_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        if isinstance(item, list):\n            flattened_list.extend(extract_singly(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n\n    # Initialize an empty set to hold the flattened numbers\n    flattened_set = set()\n\n    # Iterate over each sublist in the list\n    for sublist in test_list:\n        # Iterate over each number in the sublist\n        for num in sublist:\n            # Add the number to the flattened_set\n            flattened_set.add(num)\n\n    # Convert the flattened_set to a list and return it\n    return list(flattened_set)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Args:\n    - test_list (list of lists): A list of lists that contains integers.\n\n    Returns:\n    - (set): A set of integers that are the flattened set of numbers in the input list.\n    \"\"\"\n\n    # Flatten the input list of lists into a single list\n    flattened_list = [item for sublist in test_list for item in sublist]\n\n    # Convert the flattened list to a set and return it\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n    \"\"\"\n    return set(sum(x, []) for x in test_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return set(flattened_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flat_list = []\n    for sub_list in test_list:\n        for item in sub_list:\n            flat_list.append(item)\n    return set(flat_list)"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for sublist in test_list:\n        flattened_list.extend(sublist)\n    return flattened_list"
    },
    {
        "number": 140,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = [num for sublist in test_list for num in sublist]\n    return set(flattened_list)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    def merge(left, right):\n        result = []\n        i, j = 0, 0\n        while i < len(left) and j < len(right):\n            if left[i] > right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                j += 1\n        result += left[i:]\n        result += right[j:]\n        return result\n    \n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n    \n    nums = merge_sort(nums)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # Find the largest element in the unsorted part of the array\n        max_idx = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_idx]:\n                max_idx = j\n\n        # Swap the largest element with the element at the beginning of the unsorted part of the array\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n\n        # Reverse the sub-array from the largest element to the end of the array\n        for j in range(i, n-1, -1):\n            nums[j], nums[n-j-1] = nums[n-j-1], nums[j]"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # create a list of numbers from 1 to n\n    inversion_count = [0] * n\n    # perform inversion counting\n    for i in range(n):\n        for j in range(0, i):\n            if nums[i] < nums[j]:\n                inversion_count[i] += inversion_count[j]\n    # find the maximum inversion count\n    max_inversion_count = max(inversion_count)\n    # perform the pancake sort\n    while max_inversion_count > 0:\n        for i in range(n - 1):\n            # swap adjacent elements if they are in reverse order\n            if inversion_count[i] > max_inversion_count:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n                # update inversion count for the swapped elements\n                inversion_count[i] = 0\n                inversion_count[i + 1] = max_inversion_count\n                max_inversion_count -= 1\n        # reduce the maximum inversion count by the number of inversions made during this pass\n        max_inversion_count = max(inversion_count)\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Step 1: Create a copy of the input list\n    arr = nums[:]\n\n    # Step 2: Sort the array in descending order using the bubble sort algorithm\n    for i in range(len(arr)):\n        for j in range(len(arr) - i - 1):\n            if arr[j] < arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n    # Step 3: The array is now sorted in descending order.\n    # Step 4: Reverse the sorted array using the reverse() method\n    arr.reverse()\n\n    # Step 5: Return the sorted array\n    return arr"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # we will use a modified version of the bubble sort algorithm for pancake sort\n    # we will use 2 variables to keep track of the maximum and minimum indices of the unsorted part of the array\n    max_index = 0\n    min_index = n - 1\n    # we will loop through the array until we have sorted it\n    while max_index!= min_index:\n        # we will swap the elements at max_index and min_index indices\n        nums[max_index], nums[min_index] = nums[min_index], nums[max_index]\n        # we will calculate the new maximum and minimum indices\n        max_index = max_index - 1\n        min_index = min_index + 1\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Find the length of the list\n    n = len(nums)\n    \n    # Create a list of integers from 1 to n\n    inversions = list(range(1, n+1))\n    \n    # Perform the sorting\n    def helper(start, end):\n        # Base case: if the start and end pointers are the same, we're done\n        if start == end:\n            return\n        \n        # Find the pivot index\n        pivot = start\n        for i in range(start+1, end+1):\n            if nums[i] > nums[pivot]:\n                pivot += 1\n                nums[i], nums[pivot] = nums[pivot], nums[i]\n        \n        # Swap the pivot with the end of the list\n        nums[pivot], nums[end] = nums[end], nums[pivot]\n        \n        # Recursively sort the left and right sublists\n        helper(start, pivot-1)\n        helper(pivot+1, end)\n    \n    helper(0, n-1)\n    \n    # Print the sorted list\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        # find the maximum element in the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        \n        # swap the maximum element with the first element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n        \n        # reverse the sublist starting from the ith element\n        k = i\n        while k < max_index:\n            nums[k], nums[max_index] = nums[max_index], nums[k]\n            k += 1\n    \n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n\n    # Helper function to reverse the order of the elements in a given list\n    def reverse_list(lst):\n        for i in range(len(lst)//2):\n            j = len(lst) - i - 1\n            lst[i], lst[j] = lst[j], lst[i]\n        return lst\n\n    # Helper function to reverse the order of the elements in the sub-list of the given list\n    def reverse_sublist(lst, start, end):\n        for i in range(start, end):\n            j = end - i - 1\n            lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to swap two elements in the list\n    def swap(lst, i, j):\n        lst[i], lst[j] = lst[j], lst[i]\n\n    # Helper function to count the number of inversions in the sub-list\n    def count_inversions(lst, start, end):\n        count = 0\n        for i in range(start, end):\n            for j in range(start, end):\n                if i < j:\n                    if lst[i] > lst[j]:\n                        count += 1\n        return count\n\n    # Helper function to perform the pancake sort algorithm\n    def pancake_sort_helper(lst):\n        n = len(lst)\n\n        # Reverse the order of the elements in the list\n        lst = reverse_list(lst)\n\n        # Perform the pancake sort algorithm\n        for i in range(n - 1):\n            max_index = i\n            for j in range(i + 1, n):\n                if lst[j] > lst[max_index]:\n                    max_index = j\n\n            # Reverse the order of the elements in the sub-list\n            reverse_sublist(lst, i, max_index + 1)\n\n            # Perform the selection sort on the sub-list\n            for k in range(max_index, i, -1):\n                if lst[k] > lst[k - 1]:\n                    swap(lst, k, k - 1)\n\n            # Count the number of inversions in the sub-list\n            inversions = count_inversions(lst, i, max_index + 1)\n\n            # Add the number of inversions to the result\n            result += inversions\n\n        return result\n\n    # Initialize the result variable to 0\n    result = 0\n\n    # Call the pancake sort helper function on the given list\n    sorted_list = pancake_sort_helper(nums)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    # Use a nested loop to swap adjacent elements if they are in the wrong order\n    for i in range(n):\n        # Find the maximum element in the unsorted part of the list\n        max_index = i\n        for j in range(i+1, n):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        # Swap the maximum element with the current element\n        nums[i], nums[max_index] = nums[max_index], nums[i]\n    # Reverse the sorted part of the list\n    nums = nums[n-1::-1]\n    return nums"
    },
    {
        "number": 141,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # initialize the maximum index and the swapped variable\n    max_index = 0\n    swapped = True\n    \n    # iterate through the list of elements\n    while swapped:\n        swapped = False\n        \n        # iterate through the list again, swapping elements as needed\n        for i in range(len(nums)-1):\n            if nums[i] > nums[i+1]:\n                nums[i], nums[i+1] = nums[i+1], nums[i]\n                swapped = True\n        \n        # if no swaps were made, the list is already sorted\n        if not swapped:\n            break\n        \n        # update the maximum index to the last element swapped\n        max_index = len(nums)-1\n    \n    return nums"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list1[i] == list3[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            if list1[i] == list3[i]:\n                count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count number items that are identical in the same position of three given lists.\n    \"\"\"\n    count = 0\n\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n        if list2[i] == list3[i]:\n            count += 1\n        if list3[i] == list1[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 142,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_samepair(list1, list2, list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    \"\"\"\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for element in Input:\n        if type(element) == list:\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    count = 0\n    for i in Input:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    This function takes a tuple as input and returns the number of lists present in it.\n    '''\n    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 143,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lists(Input):\n    count = 0\n    for i in Input:\n        if type(i) == list:\n            count += 1\n    return count"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[j] - arr[i])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return \"Array should have at least 2 elements.\"\n    \n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    This function takes an array as input and returns the maximum absolute difference between any two elements in the array.\n    '''\n    if len(arr) < 2:\n        return \"The array should have at least two elements.\"\n    \n    max_diff = arr[1] - arr[0] # initialize the maximum difference to be the difference between the first and second element\n    for i in range(1, len(arr)-1): # iterate over the array starting from the third element\n        if abs(arr[i+1] - arr[i]) > max_diff: # calculate the absolute difference between the current and next element\n            max_diff = abs(arr[i+1] - arr[i])\n    \n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr):\n    max_diff = float('-inf')\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            max_diff = max(max_diff, diff)\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr):\n    \"\"\"\n    Given an array of integers, find the maximum absolute difference between any two elements in the array.\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"
    },
    {
        "number": 145,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # find the maximum value in the array\n    max_val = max(arr)\n    \n    # initialize the maximum absolute difference variable\n    max_diff = float('-inf')\n    \n    # loop through the array and find the maximum absolute difference between any two elements\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    \n    return max_diff"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n\n    # find the solutions of the equation ax + by = n\n    x1 = (b * n) // a\n    y1 = (a * x1) // b\n\n    # check if there is a solution\n    if x1 * a + y1 * b == n:\n        return (x1, y1)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    # Check if a, b, and n are all integers\n    if not all(isinstance(x, int) for x in [a, b, n]):\n        return None\n    \n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is negative, which means there are no real roots\n    if d < 0:\n        return None\n    \n    # Calculate the two roots using the quadratic formula\n    x1 = (-b + d**0.5) / (2*a)\n    x2 = (-b - d**0.5) / (2*a)\n    \n    # Check if the roots are integers and return the result as a tuple\n    if all(isinstance(x, int) for x in [x1, x2]):\n        return (x1, x2)\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a, b, n are integers\n    if not (isinstance(a, int) and isinstance(b, int) and isinstance(n, int)):\n        return None\n    \n    # Calculate the discriminant\n    d = b**2 - 4*a*n\n    \n    # Check if the discriminant is greater than zero\n    if d > 0:\n        # Calculate x1 and x2\n        x1 = (-b + d**0.5)/(2*a)\n        x2 = (-b - d**0.5)/(2*a)\n        \n        # Check if the solutions are integers\n        if isinstance(x1, int) and isinstance(x2, int):\n            return (x1, x2)\n        else:\n            return None\n    else:\n        return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(-(n+1) // a, (n+1) // a + 1):\n        if (a * x) % b == n % b:\n            for y in range(-(n+1) // b, (n+1) // b + 1):\n                if (b * y) % a == n % a:\n                    return (x, y)\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    d = b**2 - 4*a*n\n    if d < 0:\n        return None\n    elif d == 0:\n        x = -b/2/a\n        return (x, x)\n    else:\n        x1 = (-b - d**0.5)/2/a\n        x2 = (-b + d**0.5)/2/a\n        return (x1, x2)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    x = None\n    y = None\n\n    # calculate the discriminant\n    d = b**2 - 4*a*n\n\n    # check if the discriminant is positive\n    if d > 0:\n        # find the root of the discriminant\n        root1 = (-b + d**0.5) / (2*a)\n        root2 = (-b - d**0.5) / (2*a)\n\n        # check if the roots are integers\n        if int(root1) == root1 and int(root2) == root2:\n            x = int(root1)\n            y = int(root2)\n\n    # check if the discriminant is zero\n    elif d == 0:\n        x = -b / (2*a)\n        y = -b / (2*a)\n\n    # check if the discriminant is negative\n    else:\n        return None\n\n    # return the solution as a tuple\n    return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Check if ax + by = n\n    if a == 0:\n        if b == 0:\n            if n == 0:\n                return (0, 0)\n            else:\n                return None\n        else:\n            x = -n / b\n            y = 0\n            return (x, y)\n    else:\n        # Check if x = -n / a\n        if n % a == 0:\n            x = -n // a\n            y = 0\n            return (x, y)\n        \n        # Check if y = -n / b\n        elif n % b == 0:\n            y = -n // b\n            x = 0\n            return (x, y)\n        \n        # Check if x = -n / a and y = -n / b\n        else:\n            d = gcd(a, b)\n            x = -n // d\n            y = -n // d\n            return (x, y)"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    \n    # Initialize two variables to start with\n    x = 0\n    y = 0\n    \n    # Calculate the difference between n and ax + by\n    diff = n - (a * x + b * y)\n    \n    # If the difference is zero, we have a solution\n    if diff == 0:\n        return (x, y)\n    \n    # If the difference is negative, there is no solution\n    if diff < 0:\n        return None\n    \n    # We need to find a solution using the quadratic formula\n    # ax^2 + bx + c = 0\n    # => x = (-b +/- sqrt(b^2 - 4ac)) / 2a\n    \n    # Initialize variables for quadratic formula\n    a_squared = a * a\n    b_squared = b * b\n    quadratic_term = b_squared - 4 * a_squared * a\n    \n    # Calculate the roots of the quadratic equation\n    root1 = (-b + (quadratic_term ** 0.5)) / (2 * a)\n    root2 = (-b - (quadratic_term ** 0.5)) / (2 * a)\n    \n    # If the roots are real numbers, we have a solution\n    if isinstance(root1, (int, float)) and isinstance(root2, (int, float)):\n        return (int(root1), int(root2))\n    \n    # If the roots are complex numbers, there is no solution\n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(a, b+1):\n        if x*a + b*x == n:\n            return x, n - x*a\n    \n    return None"
    },
    {
        "number": 160,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Check if a and b are non-zero\n    if a == 0 or b == 0:\n        return None\n\n    # Compute the discriminant and two solutions\n    discriminant = b**2 - 4*a*n\n    if discriminant < 0:\n        return None\n    elif discriminant == 0:\n        x1 = -b/2/a\n        return (x1, x1)\n    else:\n        x1 = (-b + math.sqrt(discriminant))/(2*a)\n        x2 = (-b - math.sqrt(discriminant))/(2*a)\n        return (x1, x2)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # create a new list to store the unique elements from list1\n    unique_list = []\n    \n    # iterate over list2\n    for item in list2:\n        # if the item is not present in list1, add it to unique_list\n        if item not in list1:\n            unique_list.append(item)\n            \n    # return the unique_list\n    return unique_list"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Initialize an empty list to store the unique elements of the first list\n    unique_elements = []\n    \n    # Iterate through the elements of the second list\n    for element in list2:\n        # If the element is not present in the first list, add it to the unique_elements list\n        if element not in list1:\n            unique_elements.append(element)\n    \n    # Return the unique_elements list as the result of the function\n    return unique_elements"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for item in list1:\n        if item in list2:\n            list1.remove(item)"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        if i in list2:\n            list1.remove(i)\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            list1.remove(list1[i])\n    return list1"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    \"\"\"\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 161,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    return [x for x in list1 if x not in list2]"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \"\"\"\n    total = 0\n    i = 0\n    while i <= n // 2:\n        total += n - 2 * i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # Initialize variables\n    total = 0\n    i = 0\n\n    # Calculate sum from i=0 to n // 2\n    while n - 2 * i >= 0:\n        total += n - 2 * i\n        i += 1\n\n    # Return the total sum\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0, n // 2):\n        result += n - 2 * i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while n - 2*i >= 0:\n        total += n - 2*i\n        i += 1\n    return total"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n % 2 == 1:\n        return None\n    else:\n        result = 0\n        for i in range(n // 2):\n            result += n - 2 * i\n        return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n // 2):\n        sum += n - 2 * i\n    return sum"
    },
    {
        "number": 162,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n\n    # initialize the sum of the series to 0\n    series_sum = 0\n\n    # iterate over the series from 0 to n // 2\n    for i in range(n // 2):\n        # add the sum of the series from i to 0 to the series sum\n        series_sum += (n - 2 * i)\n\n    # return the sum of the series\n    return series_sum"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # Calculate the semi-perimeter of the polygon\n    perimeter = (s * l) / 2\n\n    # Calculate the area using the formula A = (s * l) / 2 * tan(pi / n)\n    n = 3\n    A = (perimeter * l) / (2 * tan(pi / n))\n\n    # Return the area\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s\n    area *= tan(pi/l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the circumference\n    c = 2 * pi * s\n    # Calculate the area\n    A = (l * c) / (4 * tan(pi/l))\n    return A"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area using Heron's formula\n    a = (s * l) / 2\n    area = tan(pi/l) * a\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    angle = 360 / l\n    for i in range(l):\n        x = s * tan(pi/l * i)\n        y = s\n        area += x\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # calculate the area of a triangle using Heron's formula\n    area = 0.5 * s * l * tan(pi / l)\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area using the formula A = (s * l) / 2\n    area = (s * l) / 2\n    # Return the area\n    return area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Calculate the area of each side of the polygon\n    area_list = []\n    for i in range(l):\n        side = s * tan(pi/l)\n        area_list.append(side)\n\n    # Calculate the total area of the polygon\n    total_area = sum(area_list)\n\n    return total_area"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = (l * s) / 2\n    return area\n\ns = int(input(\"Enter the length of the base of the polygon: \"))\nl = int(input(\"Enter the number of sides of the polygon: \"))\n\nprint(\"The area of the polygon is:\", area_polygon(s, l))"
    },
    {
        "number": 163,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from math import tan, pi\n\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n\n    # calculate the value of pi\n    pi_value = pi\n    \n    # calculate the area of each side of the polygon\n    area = (s * l)/2\n    \n    # calculate the area of the polygon by summing up the areas of its sides\n    polygon_area = sum(area)\n    \n    # calculate the area of the polygon using Heron's formula\n    herons_formula = 0.5 * s * tan(pi_value/3)\n    \n    # calculate the total area of the polygon\n    total_area = polygon_area + herons_formula\n    \n    return total_area"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    \n    def sum_of_divisors(num):\n        div_list = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div_list.append(i)\n                if i!= num//i:\n                    div_list.append(num//i)\n        return div_list\n    \n    def find_divisor(num):\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return i\n        return num\n    \n    sum1 = sum_of_divisors(n)\n    sum2 = sum_of_divisors(find_divisor(n))\n    if sum1 == sum2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n\n    Args:\n        n (int): An integer for which we want to check if the sum of divisors is the same.\n\n    Returns:\n        bool: True if the sum of the divisors of n is the same, False otherwise.\n    \"\"\"\n\n    # Calculate the sum of the divisors of n\n    sum_div = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            sum_div += i\n            if n // i!= i:\n                sum_div += n // i\n\n    return sum_div == n"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            div_sum += i\n    # Check if the sum of divisors of n and n+1 are same\n    if div_sum == (n+1)*math.sqrt(n+1):\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    # Calculate the sum of divisors of n\n    div_sum = sum(math.divisors(n))\n    \n    # Check if the sum is the same as the square root of n\n    if abs(div_sum - math.sqrt(n)) < 1e-6:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    This function takes an integer n and returns True if the sum of the divisors of n is equal to the original number,\n    and False otherwise.\n    \"\"\"\n    # Find the set of divisors of n\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    \n    # Check if the sum of the divisors is equal to n\n    if sum(divisors) == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n\n    def is_prime(num):\n        '''\n        Helper function to check if a number is prime.\n        '''\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_of_divisors(num):\n        '''\n        Helper function to calculate the sum of its divisors.\n        '''\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0 and is_prime(i):\n                divisors.append(i)\n        return sum(divisors)\n\n    num1, num2 = map(int, input(\"Enter two integers separated by space: \").split())\n\n    if sum_of_divisors(num1) == sum_of_divisors(num2):\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"are the same.\")\n    else:\n        print(\"The sum of the divisors of\", num1, \"and\", num2, \"are different.\")"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef div_sum(n):\n    \"\"\"\n    Determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n\n    # Find the sum of divisors of n\n    sum_n = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_n += i + n // i\n\n    # Find the sum of divisors of n+1\n    sum_n1 = 0\n    for i in range(1, int(math.sqrt(n+1))+1):\n        if n+1 % i == 0:\n            sum_n1 += i + n+1 // i\n\n    # Check if the sum of the two sums is the same\n    return sum_n == sum_n1"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    def divisor_sum(num):\n        '''\n        Recursive function to calculate the sum of all divisors of a given number.\n        '''\n        if num == 1:\n            return 1\n        else:\n            return num + divisor_sum(num - 1)\n\n    # calculate the sum of the divisors of n\n    sum_div_n = divisor_sum(n)\n\n    # check if the sum of the divisors of n is equal to the sum of all divisors of n\n    sum_all_div = divisor_sum(math.factorial(n))\n    if sum_div_n == sum_all_div:\n        print(f'{n} is a perfect number.')\n    else:\n        print(f'{n} is not a perfect number.')"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    \n    # Calculate the sum of the divisors of n\n    div_sum = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            div_sum += i + n // i\n    \n    # Check if the sum of the divisors is the same as n\n    if div_sum == n:\n        print(f'{n} has the same sum of divisors as its factors.')\n    else:\n        print(f'{n} does not have the same sum of divisors as its factors.')"
    },
    {
        "number": 164,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef div_sum(n): \n    \"\"\"\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    \"\"\"\n    def sum_of_divisors(num): \n        \"\"\"\n        Write a function to calculate the sum of the divisors of a given integer.\n        \"\"\"\n        div_sum = 0\n        for i in range(1, num+1):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    sum1 = sum_of_divisors(n)\n    sum2 = sum_of_divisors(sum1)\n    if sum1 == sum2:\n        print(\"The sum of divisors of\", n, \"and\", sum1, \"are the same.\")\n    else:\n        print(\"The sum of divisors of\", n, \"and\", sum1, \"are different.\")"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n\n    # Convert the string to lowercase to make it case insensitive\n    str1 = str1.lower()\n\n    # Initialize a dictionary to store the count of each character\n    char_count = {}\n\n    # Loop through the string and count the number of characters at each position in the English alphabet\n    for i, char in enumerate(str1):\n        # Check if the character is in the English alphabet\n        if 'a' <= char <= 'z':\n            # If it is, increment the count of the character in the dictionary\n            if char in char_count:\n                char_count[char] += 1\n            else:\n                char_count[char] = 1\n\n    # Return the dictionary containing the counts\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_count = {}\n    for i in range(len(str1)):\n        char = str1.lower()[i]\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through the string and count the number of characters at each position in the English alphabet\n    for i in range(26):\n        char = chr(65 + i)\n        char_count[char] = str1.count(char)\n\n    # Return the dictionary with the counts of each character at each position\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in range(26):\n        if str1.lower().count(alphabet[i].lower()) > 0:\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i in str1:\n        if i.lower() == alpha[alpha.index(i.lower())].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase for case insensitivity\n    str1 = str1.lower()\n    # Create a list of the English alphabet\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    # Initialize a dictionary to store the number of times each character appears in the string\n    char_count = {}\n    # Loop through each character in the English alphabet\n    for char in alphabet:\n        # Count the number of times each character appears in the string\n        count = str1.count(char)\n        # Add the count to the dictionary\n        char_count[char] = count\n    # Return the dictionary\n    return char_count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_char_position(str1):\n    \"\"\"\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    \"\"\"\n    count = 0\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(str1)):\n        if str1.lower().replace(\" \", \"\").replace(\",\", \"\").replace(\"'\", \"\").replace(\"(\", \"\").replace(\")\", \"\").replace(\"-\", \"\").replace(\".\", \"\").replace(\"!\", \"\").replace(\"?\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\",\", \"\").replace(\")\", \"\").replace(\"(\", \"\").replace(\"+\", \"\").replace(\"*\", \"\").replace(\"/\", \"\").replace(\"%\", \"\").replace(\"&\", \"\").replace(\"#\", \"\").replace(\"$\", \"\").replace(\"^\", \"\").replace(\"&\", \"\").replace(\"~\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"|\", \"\").replace(\"\\\\\", \"\").replace(\":\", \"\").replace(\";\", \"\").replace(\"'\", \"\").replace(\",\", \"\").replace(\".\", \"\").replace(\"?\", \"\").replace(\"!\", \"\").replace(\"-\", \"\").replace(\"/\", \"\").replace(\"+\", \"\").replace(\"*\", \"\").replace(\"%\", \"\").replace(\"&\", \"\").replace(\"#\", \"\").replace(\"$\", \"\").replace(\"^\", \"\").replace(\"&\", \"\").replace(\"~\", \"\").replace(\"[\", \"\").replace(\"]\", \"\").replace(\"{\", \"\").replace(\"}\", \"\").replace(\"|\", \"\").replace(\"\\\\\", \"\")[i] == alpha[i].lower():\n            count += 1\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_char_position(str1):\n    # Convert the string to lowercase and remove non-alphabetic characters\n    str1 = ''.join(c.lower() for c in str1 if c.isalpha())\n    # Initialize a dictionary to store the count of each character\n    count = {}\n    # Loop through the string and increment the count for each character\n    for c in str1:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    # Return the count of characters that occur at the same position in the English alphabet\n    return sum(1 for c in count.keys() if c.isalpha())"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Convert the string to lowercase\n    str1 = str1.lower()\n\n    # Initialize variables\n    char_count = {}\n    count = 0\n\n    # Iterate through the string\n    for i in range(len(str1)):\n        # Check if the current character is a letter\n        if str1[i].isalpha():\n            # Get the position of the character in the English alphabet (case insensitive)\n            pos = ord(str1[i]) - ord('a')\n            # Check if the position exists in the dictionary\n            if pos in char_count:\n                # Increment the count of the position in the dictionary\n                char_count[pos] += 1\n            else:\n                # Create a new key-value pair in the dictionary and set its value to 1\n                char_count[pos] = 1\n\n    # Iterate through the dictionary and add up the counts for each position\n    for pos in char_count:\n        count += char_count[pos]\n\n    # Return the total count\n    return count"
    },
    {
        "number": 165,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    english_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for char in str1:\n        if char in english_alphabet.lower():\n            if english_alphabet.lower().index(char) == english_alphabet.lower().index(str1[count]):\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] + A[j]) % 2 == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pairs = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_pairs += 1\n    return even_pairs"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_even_pair(A):\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_even_pair(A):\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0 and A[i] % 2 == 0 and A[j] % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 166,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_even_pair(A):\n    \"\"\"\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # If n is already a power of 2, then return it as it is.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the power of 2 that is greater than or equal to n.\n    power = 1\n    while power < n:\n        power <<= 1\n\n    # Return the power of 2 that is greater than or equal to n.\n    return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    while True:\n        n = n << 1\n        if n >= 2**32:  # 2^32 = 4,294,967,296\n            break\n    return n"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function finds the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Convert n to integer\n    n = int(n)\n\n    # Initialize result to 2\n    result = 2\n\n    # Iterate until result is greater than n\n    while result <= n:\n        result <<= 1\n\n    # Return result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Initialize the variable to store the result\n    result = 1\n    \n    # While n is not a power of 2\n    while n % 2 == 0:\n        # Double the value of n\n        n = n // 2\n        \n        # Add 1 to the result\n        result = result * 2\n    \n    # Add n to the result\n    result = result + n\n    \n    # Return the result\n    return result"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer as input and returns the smallest power of 2 greater than or equal to n.\n    \"\"\"\n\n    # Find the binary representation of n\n    binary = bin(n)[2:]\n\n    # If the binary representation has 0's, add 1 to the binary representation\n    while binary.startswith('0'):\n        binary = '1' + binary\n\n    # Convert the binary representation to an integer\n    binary_num = int(binary, 2)\n\n    # Find the smallest power of 2 that is greater than or equal to n\n    next_power_of_2 = 2**(binary_num + 1)\n\n    return next_power_of_2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def next_power_of_2(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # If the number is already a power of 2, return it.\n    if n & (n-1) == 0:\n        return n\n\n    # Find the largest power of 2 smaller than or equal to the given number.\n    max_pow2 = n\n    while max_pow2 & (max_pow2-1)!= 0:\n        max_pow2 -= 1\n\n    # Perform binary search to find the smallest power of 2 greater than or equal to the given number.\n    min_pow2 = max_pow2\n    while max_pow2 >= n:\n        mid_pow2 = (min_pow2 + max_pow2) // 2\n        if mid_pow2 < n:\n            min_pow2 = mid_pow2\n        else:\n            max_pow2 = mid_pow2 - 1\n\n    return max_pow2"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # Check if n is a power of 2\n    if n & (n-1) == 0:\n        # If it is, return n itself\n        return n\n    else:\n        # If not, calculate the next power of 2\n        power = 1\n        while power < n:\n            power <<= 1\n        \n        return power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 1\n    while i < n:\n        i <<= 1\n    \n    return i"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n\n    # First, convert n to binary form\n    binary_str = bin(n)[2:]\n\n    # Initialize a variable to keep track of the length of the binary string\n    binary_len = len(binary_str)\n\n    # If the binary string is of length 1, the next power of 2 is simply 2\n    if binary_len == 1:\n        return 2\n\n    # Initialize a variable to keep track of the power of 2 we're looking for\n    target_power = 1\n\n    # Iterate through the binary string and set the target power to the current power of 2\n    for i in range(binary_len - 1, -1, -1):\n        if binary_str[i] == '1':\n            target_power *= 2\n\n    # If the binary string is of length 1, the next power of 2 is simply the target power\n    if binary_len == 1:\n        return target_power\n\n    # If the binary string is of length greater than 1, the next power of 2 is simply the target power\n    return target_power"
    },
    {
        "number": 167,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    \"\"\"\n    # Start with 1 as the smallest power of 2\n    power = 1\n    \n    # Loop while n is not divisible by the power\n    while n > 1:\n        power *= 2\n        n /= 2\n        \n    # Return the smallest power of 2 greater than or equal to n\n    return power"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def frequency(a,x):\n    '''\n    This function takes two arguments: the list to search in and the number to search for.\n    It returns the number of times the number 'x' appears in the list 'a'.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def frequency(lst, num):\n    \"\"\"\n    This function takes in a list and a number and returns the count of the number in the list.\n    \"\"\"\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def frequency(lst, x):\n    count = 0\n    for i in lst:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def frequency(lst, num):\n    '''\n    This function takes a list and a number as input and returns the number of times that number appears in the list.\n    '''\n    count = 0\n    for i in lst:\n        if i == num:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for num in a:\n        if num == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def frequency(a, x):\n    \"\"\"\n    Write a function to count the number of occurrences of a number in a given list.\n    \"\"\"\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def frequency(a, x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 168,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def frequency(a, x):\n    '''\n    This function counts the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n\n    # Check if the input list is valid\n    if not isinstance(list1, list) or not (0 <= m < n < len(list1)):\n        return \"Invalid input\"\n\n    # Initialize a variable to store the sum\n    sum = 0\n\n    # Loop through the indices and add the numbers to the sum\n    for i in range(m, n+1):\n        sum += list1[i]\n\n    # Return the sum\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total_sum = 0\n    for i in range(m, n+1):\n        total_sum += list1[i-1]\n    return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum += i\n    return sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    list1 (list): A list of numbers.\n    m (int): The first index of the range.\n    n (int): The second index of the range.\n\n    Returns:\n    int: The sum of numbers within the range [m, n] of the input list.\n    \"\"\"\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > n:\n        return \"The maximum index should be greater than or equal to the minimum index.\"\n    else:\n        total_sum = 0\n        for i in range(m, n+1):\n            total_sum += list1[i]\n        return total_sum"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    sum_range = 0\n    for i in range(m, n+1):\n        if i in list1:\n            sum_range += i\n    return sum_range"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    \"\"\"\n    total = 0\n    for i in range(m, n + 1):\n        total += list1[i]\n    return total"
    },
    {
        "number": 170,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[i:j] for i in range(m, n+1) for j in range(m, n+1))"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5 * a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # Calculate the area of a regular pentagon\n    s = (5/2) * a ** 2\n    # Calculate the perimeter of a regular pentagon using the formula for the area of a regular polygon\n    p = 5 * a\n    # Return the perimeter of the pentagon\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n\n    # calculate the semi-perimeter (half the perimeter)\n    s = (5 * a) ** 0.5\n\n    # calculate the total perimeter by adding the semi-perimeter to 5*a\n    p = 5 * a + s\n\n    # return the total perimeter\n    return p"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n\nprint(perimeter_pentagon(5)) # Output: 55.0"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    p = 5 * a * math.sqrt(3)\n    return p\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = 5*a\n    return perimeter"
    },
    {
        "number": 171,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # find the sum of the perimeter of each side\n    perimeter_sides = a + a + a + a + a\n    # calculate the area of a regular pentagon\n    area = (5 * a ** 2) / (4 * math.tan(math.pi / 5))\n    # find the perimeter of the entire pentagon\n    perimeter = perimeter_sides + area\n    # return the value of the perimeter\n    return perimeter"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    \"\"\"\n    This function counts the number of occurances of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+3)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)-3):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = 0\n    while index!= -1:\n        index = s.find('std', index)\n        if index!= -1:\n            count += 1\n            index += 4 # skip the'std' substring\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    i = 0\n    while i < len(s):\n        if s[i:i+3] =='std':\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index + 1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    \"\"\"\n    Write a function to count the number of occurance of the string'std' in a given string.\n    \"\"\"\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurances of the string'std' in a given string.\n    '''\n    return s.count('std')"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurance of the string'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    return count"
    },
    {
        "number": 172,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count = 0\n    index = s.find('std')\n    while index!= -1:\n        count += 1\n        index = s.find('std', index+1)\n    return count"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # initialize a variable to store the data type of the first element in the tuple\n    data_type = type(test_tuple[0])\n    # iterate over all the elements in the tuple\n    for element in test_tuple:\n        # check if the data type of the current element is same as the data type of the first element\n        if type(element)!= data_type:\n            # if not, return False\n            return False\n    # if all the elements in the tuple have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # check if tuple is empty\n    if not test_tuple:\n        return False\n    \n    # get the type of the first element in the tuple\n    type_first_elem = type(test_tuple[0])\n    \n    # check if all the elements in the tuple have the same type as the first element\n    for elem in test_tuple[1:]:\n        if type(elem)!= type_first_elem:\n            return False\n    \n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Get the data type of the first element of the tuple\n    data_type = type(test_tuple[0])\n    # Loop through the rest of the tuple\n    for item in test_tuple[1:]:\n        # If the data type of the current item is not equal to the data type of the first item, return False\n        if type(item)!= data_type:\n            return False\n    # If we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # check if the tuple is not empty\n    if len(test_tuple) == 0:\n        return False\n    \n    # check if the first element is a tuple\n    if isinstance(test_tuple[0], tuple):\n        return False\n    \n    # get the data type of the first element\n    data_type = type(test_tuple[0])\n    \n    # check if all the elements are of the same data type\n    for item in test_tuple:\n        if type(item)!= data_type:\n            return False\n    \n    # if all elements are of the same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types = []\n    for elem in test_tuple:\n        types.append(type(elem))\n    return all(x == types[0] for x in types)"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    \"\"\"\n    # Define a dictionary to store data types of each element in the tuple\n    data_types = {}\n\n    # Iterate through the tuple\n    for element in test_tuple:\n        # Check if the data type of the element is already stored in the dictionary\n        if element in data_types:\n            # If it is, check if the new data type is same as the old data type\n            if not isinstance(element, data_types[element]):\n                return False\n        else:\n            # If it isn't, store the data type of the element in the dictionary\n            data_types[element] = type(element).__name__\n\n    # If all the elements have same data type, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Check if all the elements in a tuple have the same data type.\n    '''\n    # Get the first element of the tuple\n    first_element = type(test_tuple[0])\n    \n    # Loop through the remaining elements of the tuple\n    for element in test_tuple[1:]:\n        # Check if the current element is not of the same data type as the first element\n        if type(element)!= first_element:\n            # If not, return False\n            return False\n    \n    # If all elements have the same data type as the first element, return True\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for i in range(1, len(test_tuple)):\n        if type(test_tuple[i])!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    data_type = type(test_tuple[0])\n    for elem in test_tuple:\n        if type(elem)!= data_type:\n            return False\n    return True"
    },
    {
        "number": 222,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # Create a dictionary to store the data type of each element in the tuple\n    data_types = {}\n    for element in test_tuple:\n        data_types[id(element)] = type(element)\n    \n    # Iterate over the dictionary to check if all the elements have same data type\n    all_same = True\n    for key in data_types:\n        if len(set(data_types.values())) > 1:\n            all_same = False\n            break\n    \n    return all_same"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n        if count > n // 2:\n            return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count and left pointers to zero\n    count = 0\n    left = 0\n\n    # Iterate through the array and count the number of elements equal to x\n    while left < n and arr[left] == x:\n        count += 1\n        left += 1\n\n    # If count is equal to n/2, return True\n    if count == n/2:\n        return True\n\n    # Initialize count, right pointer to n-1 and candidate to x\n    count = 0\n    right = n-1\n    candidate = x\n\n    # Iterate through the array starting from right pointer and count the number of elements equal to candidate\n    while right >= 0 and arr[right] == candidate:\n        count += 1\n        right -= 1\n\n    # If count is greater than n/2, return True\n    if count > n/2:\n        return True\n\n    # If the loop completes without finding a majority element, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Find the first occurrence of the element\n    first_occurrence = arr.index(x)\n\n    # Initialize a count variable to keep track of the number of occurrences of x\n    count = 1\n\n    # Iterate through the array starting from the first occurrence\n    for i in range(first_occurrence, n):\n        if arr[i] == x:\n            count += 1\n        else:\n            count -= 1\n\n        # If the count reaches zero, the element is the majority\n        if count == 0:\n            return True\n\n    # If the loop completes without finding the element, it is not the majority\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > n // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n // 2"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through the array\n    for i in arr:\n        # If the element is equal to the searched element, increment the count variable\n        if i == x:\n            count += 1\n\n    # If the count variable is greater than n/2, return True\n    if count > n/2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    \"\"\"\n    \n    # Initialize the count and the candidate for majority element to 0\n    count = 0\n    candidate = 0\n    \n    # Iterate through the array\n    for i in range(n):\n        # If the current element is equal to the candidate, increment the count\n        if arr[i] == candidate:\n            count += 1\n        \n        # If the count is greater than or equal to n/2, return True\n        if count >= n//2:\n            return True\n        \n        # If the current element is greater than the candidate, update the candidate\n        elif arr[i] > candidate:\n            candidate = arr[i]\n    \n    # If no majority element is found, return False\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n        if count == n//2:\n            return True\n\n    return False"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n > 0:\n        count += n & 1  # count the number of set bits in the current binary digit\n        n >>= 1  # move to the next binary digit\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n\n    count = 0\n    \n    while n > 0: \n        count += n & 1 \n        n >>= 1 \n        \n    return count "
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    count = 0\n    \n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        \n        n //= 2\n        \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # convert the binary number to a string\n    binary_num = bin(n)[2:]\n    \n    # count the number of set bits in the binary number\n    count = 0\n    for bit in binary_num:\n        if bit == '1':\n            count += 1\n    \n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Set_Bits(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n    n (int): The number whose set bits we want to count.\n\n    Returns:\n    int: The number of set bits in n.\n    \"\"\"\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count"
    },
    {
        "number": 224,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Set_Bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1  # count the number of bits set to 1 in the least significant bit position\n        n >>= 1  # move to the next bit position\n    return count"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join([str[i] for i in range(len(str)) if i % 2 == 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    # Convert the string to a list of characters\n    chars = list(str)\n\n    # Loop through the characters and remove odd index values\n    new_chars = []\n    for i, char in enumerate(chars):\n        if i % 2 == 0:\n            new_chars.append(char)\n\n    # Convert the new list of characters back to a string and return it\n    return ''.join(new_chars)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with the odd index characters removed.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2!= 0:\n            new_string += string[i]\n    return new_string"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    return ''.join([char for i, char in enumerate(str) if i % 2!= 0])"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n\n    Args:\n        str (str): a string to be processed\n\n    Returns:\n        str: the string with odd index characters removed\n    \"\"\"\n    # initialize an empty string to store the odd index characters\n    result = \"\"\n\n    # loop through each character in the input string\n    for char in str:\n        # if the index value of the character is odd, append it to the result string\n        if ord(char) % 2!= 0:\n            result += char\n\n    return result"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    result = []\n    for i in range(len(str)):\n        if i % 2!= 0:\n            result.append(str[i])\n    return ''.join(result)"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # initialize an empty string to store the characters\n    new_str = ''\n    # iterate through each character in the input string\n    for char in str:\n        # if the index of the character is odd, append it to the new string\n        if (ord(char) - 96) % 2!= 0:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # Initialize an empty string to store the odd values of the input string\n    odd_str = \"\"\n    # Loop through each character in the input string\n    for char in str:\n        # Check if the index of the character is odd\n        if int(char) % 2 == 1:\n            # Append the character to the odd string\n            odd_str += char\n    # Return the odd string\n    return odd_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    \"\"\"\n    # create a list of odd index values from the string\n    odd_values = [i for i in range(len(str)) if i % 2!= 0]\n\n    # create a new string with the odd index values removed\n    new_str = ''.join([str[i] for i in odd_values])\n\n    return new_str"
    },
    {
        "number": 226,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    else:\n        if b < c:\n            return b\n        else:\n            return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)\n"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three arguments (a, b, c) and returns the smallest number among them.\n    \"\"\"\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_of_three(a, b, c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c:\n        return a\n    elif b < a and b < c:\n        return b\n    else:\n        return c"
    },
    {
        "number": 227,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_of_three(a, b, c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a, b, c)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    \"\"\"\n    for i in range(l, r + 1):\n        if bin(i).count('1') < n:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    This function takes three arguments: \n    n - the integer which represents the binary number\n    l - the lower limit of the range\n    r - the upper limit of the range\n\n    The function returns True if all the bits in the given range are set to 1, False otherwise.\n    '''\n    # Loop through each bit in the binary number\n    for i in range(l, r+1):\n        # If the current bit is 0, return False\n        if (n & (1<<i)) == 0:\n            return False\n    # If all bits are set, return True\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n\n    Args:\n        n (int): number of bits\n        l (int): lower bound of the range\n        r (int): upper bound of the range\n\n    Returns:\n        bool: True if all the bits are unset in the given range, False otherwise.\n    \"\"\"\n    for i in range(l, r + 1):\n        if (n & (1 << i))!= 0:\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Initialize variables to store the range of bits set\n    count = 0\n    start = 0\n\n    # Loop through the range of bits and count the number of set bits\n    for i in range(l, r+1):\n        count += (n >> i) & 1\n\n    # If count is equal to 0, then all bits are set in the given range\n    if count == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n == 0:\n        return True\n    if l == 1:\n        return False\n    return all_Bits_Set_In_The_Given_Range(n//2, l, r) and (n % 2 == 0 or (n % 2 == 1 and n//2 >= l and n//2 <= r))"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # convert decimal to binary and then remove leading zeros\n    num_bin = bin(n)[2:]\n    # convert range to binary and then remove leading zeros\n    l_bin = bin(l)[2:]\n    r_bin = bin(r)[2:]\n    # compare the binary strings\n    if num_bin == r_bin:\n        return True\n    elif num_bin[:r_bin.index('1')] == l_bin:\n        return False\n    else:\n        return all_Bits_Set_In_The_Given_Range(n,l,r-1)"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the number of unset bits in the given range\n    num_unset_bits = ((1 << l) - 1) & ((1 << (r + 1)) - 1)\n\n    # Check if the number of unset bits is 0 or not\n    if num_unset_bits == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    # Calculate the range of bits to be checked\n    if l < 0:\n        l = 0\n    if r > 31:\n        r = 31\n    range_of_bits = r - l + 1\n\n    # Calculate the count of set bits in the given range\n    count_of_set_bits = 0\n    for i in range(l, r + 1):\n        if n & (1 << i):\n            count_of_set_bits += 1\n\n    # Check if all the bits are unset in the given range\n    if range_of_bits == count_of_set_bits:\n        return True\n    else:\n        return False"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    mask = (1 << r) - 1\n    return (n & mask) == 0"
    },
    {
        "number": 228,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n < l:\n        return True\n    elif n > r:\n        return True\n    else:\n        for i in range(l, r+1):\n            if bin(i)[2:].count('1')!= len(bin(i)[2:]):\n                return False\n        return True"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # initialize two pointers, one for positive and one for negative\n    pos = 0\n    neg = n - 1\n\n    # loop through the array and swap the elements until we have moved the negative pointer n positions\n    while neg >= 0:\n        if arr[pos] >= 0 and arr[neg] >= 0:\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0 and arr[neg] < 0:\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0:\n            pos += 1\n        else:\n            neg -= 1\n\n    # swap the remaining elements in the array\n    while pos < n:\n        if arr[pos] >= 0 and arr[neg] >= 0:\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0 and arr[neg] < 0:\n            pos += 1\n            neg -= 1\n        elif arr[pos] < 0:\n            pos += 1\n        else:\n            neg -= 1\n\n    # return the modified array\n    return arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    \n    # create two separate arrays to store the negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # loop through the original array and store the negative and positive elements in the separate arrays\n    for i in range(n):\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        else:\n            pos_arr.append(arr[i])\n    \n    # concatenate the negative and positive arrays to form the final array\n    final_arr = neg_arr + pos_arr\n    \n    # sort the final array in ascending order\n    final_arr.sort()\n    \n    # return the final array\n    return final_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # Initialize two pointers, i and j, to 0.\n    i = j = 0\n    \n    # Loop through the array.\n    while j < len(arr):\n        # If the element at j is negative, increment i and swap arr[i] with arr[j].\n        if arr[j] < 0:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n        \n        # If the element at j is positive, increment j.\n        j += 1\n        \n    # Return the modified array.\n    return arr[:n]"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n\n    # Initialize two empty lists to store negative and positive elements\n    negative_list = []\n    positive_list = []\n\n    # Loop through the array and add the elements to their respective lists\n    for i in arr:\n        if i < 0:\n            negative_list.append(i)\n        else:\n            positive_list.append(i)\n\n    # Merge the two lists in sorted order\n    sorted_list = negative_list + positive_list\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    pos = 0\n    neg = 0\n\n    # Iterate through the array\n    for i in range(n):\n        if arr[i] >= 0:\n            # Move positive elements to the beginning of the array\n            arr[pos], arr[i] = arr[i], arr[pos]\n            pos += 1\n        else:\n            # Move negative elements to the end of the array\n            arr[neg], arr[i] = arr[i], arr[neg]\n            neg += 1\n\n    # Print the final array\n    print(\"Re-arranged array:\", arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize variables to count number of negative and positive elements\n    neg_count = 0\n    pos_count = 0\n    # iterate through the array\n    for i in range(n):\n        # check if element is negative or positive\n        if arr[i] < 0:\n            neg_count += 1\n        else:\n            pos_count += 1\n    # initialize variables to store negative and positive elements\n    neg_elements = []\n    pos_elements = []\n    # iterate through the array again and add elements to respective lists\n    for i in range(n):\n        if arr[i] < 0:\n            neg_elements.append(arr[i])\n        else:\n            pos_elements.append(arr[i])\n    # initialize variables to store new array elements\n    new_arr = []\n    # add negative elements to new array before positive elements\n    for i in range(neg_count):\n        new_arr.append(-1 * neg_elements.pop(0))\n    for i in range(pos_count):\n        new_arr.append(pos_elements.pop(0))\n    # add remaining negative and positive elements to new array in their original order\n    for i in range(neg_count + pos_count):\n        new_arr.append(neg_elements.pop(0)) if neg_elements else new_arr.append(pos_elements.pop(0))\n    # return the new array\n    return new_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # initialize two empty arrays to hold negative and positive elements\n    neg_arr = []\n    pos_arr = []\n    \n    # loop through each element in the input array\n    for num in arr:\n        # check if the element is negative\n        if num < 0:\n            # add the negative element to the negative array\n            neg_arr.append(num)\n        else:\n            # add the positive element to the positive array\n            pos_arr.append(num)\n    \n    # loop through the first n elements of the input array\n    for i in range(n):\n        # if the i-th element is negative, move it to the end of the negative array\n        if arr[i] < 0:\n            neg_arr.append(arr[i])\n        # otherwise, move it to the end of the positive array\n        else:\n            pos_arr.append(arr[i])\n    \n    # combine the negative and positive arrays and return the result\n    return neg_arr + pos_arr"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    \"\"\"\n    # initialize two pointers, left and right, to 0\n    left = 0\n    right = 0\n\n    # initialize two variables, positive_count and negative_count, to 0\n    positive_count = 0\n    negative_count = 0\n\n    # loop through the array and count the number of positive and negative elements\n    while right < len(arr):\n        if arr[right] >= 0:\n            positive_count += 1\n        else:\n            negative_count += 1\n        right += 1\n\n    # if there are less than n positive elements, return the array as it is\n    if positive_count < n:\n        return arr\n\n    # initialize an empty array, result, to hold the re-arranged elements\n    result = []\n\n    # loop through the array again, this time adding only the first n elements to the result array\n    while right < len(arr):\n        if arr[right] >= 0:\n            if len(result) < n:\n                result.append(arr[right])\n        else:\n            if len(result) < n + negative_count:\n                result.append(arr[right])\n        right += 1\n\n    # add the remaining negative elements to the result array\n    result.extend(arr[right - n:])\n\n    # return the result array\n    return result"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative = []\n    positive = []\n    for num in arr[:n]:\n        if num < 0:\n            negative.append(num)\n        else:\n            positive.append(num)\n    \n    rearranged = negative + positive\n    return rearranged"
    },
    {
        "number": 229,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    # Create a list to store the positive and negative elements\n    pos_list = []\n    neg_list = []\n    \n    # Iterate over the array and add positive and negative elements to the appropriate list\n    for num in arr:\n        if num >= 0:\n            pos_list.append(num)\n        else:\n            neg_list.append(num)\n    \n    # Sort the positive and negative lists in ascending order\n    pos_list.sort()\n    neg_list.sort()\n    \n    # Combine the positive and negative lists into a single list\n    combined_list = neg_list + pos_list\n    \n    # Re-arrange the combined list so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved\n    i = 0\n    for num in combined_list:\n        if num >= 0:\n            arr[i] = num\n            i += 1\n        else:\n            arr[i] = num\n            i += 1\n            arr[i] = num\n            i += 1\n    \n    return arr"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str2 = str1.replace(' ','')\n    return str2"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # Replace all occurrences of blank spaces with the character\n    str1 = str1.replace(\" \",\"\")\n    \n    # Return the updated string\n    return str1"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)\n"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    \"\"\"\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_blank(str1, char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \", char)"
    },
    {
        "number": 230,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',char)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for i in list1:\n        heapq.heappush(heap, i)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Create a min-heap of the first n elements of the list\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,list1[i])\n    \n    # Extract the n largest elements from the heap and add them to a new list\n    result = []\n    while len(heap) > 0:\n        result.append(heapq.heappop(heap))\n    \n    return result"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return heapq.nlargest(n, list1)"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Use a max heap to find the n largest elements\n    heap = []\n    for i in range(len(list1)):\n        if len(heap) < n:\n            heapq.heappush(heap, list1[i])\n        elif list1[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap, list1[i])\n    # Return the n largest elements\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for item in list1:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n    \"\"\"\n    # Use a min heap to keep track of the n largest elements\n    min_heap = []\n    for num in list1:\n        # If the heap is full or if the current number is larger than the smallest element, pop the smallest element and add the current number\n        if len(min_heap) < n or num > heapq.heappop(min_heap):\n            heapq.heappush(min_heap, num)\n        # If the heap is not full and the current number is smaller than the smallest element, add the current number\n        elif num < heapq.heappop(min_heap):\n            heapq.heappush(min_heap, num)\n    # Return the n largest elements\n    return min_heap"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Sort the list in descending order\n    list1.sort(reverse=True)\n    # Create a new list with the n largest items\n    return list1[:n]"
    },
    {
        "number": 232,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef larg_nnum(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for num in list1:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return [heap[0]] + heapq.nlargest(n-1, heap[1:])"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2*pi*r*r + 2*pi*h*r + 2*pi*h*r + 2*pi*r*r + 2*pi*r*r"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2 * pi * r * r\n    return area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    \"\"\"\n    This function calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    r (float): radius of the cylinder\n    h (float): height of the cylinder\n\n    Returns:\n    float: lateral surface area of the cylinder\n    \"\"\"\n    lateral_area = 2 * r * h  # lateral surface area of the cylinder\n    return lateral_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Calculate the lateral surface area using the formula: lateral surface area = 2*pi*r^2*h\n    lateral_surface_area = 2 * 3.14159 * (r**2) * h\n    # Return the value of lateral_surface_area\n    return lateral_surface_area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    \"\"\"\n    # Calculate the surface area of the cylinder\n    cylinder_area = 2 * 3.14 * r * h\n    # Calculate the surface area of the lateral surface\n    lateral_area = 2 * 3.14 * r * (r - 2 * h)\n    return cylinder_area + lateral_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateral_surface_area_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return 2 * r * h"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    Area = 2*math.pi*(r**2 + h**2)\n    return Area"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*3.14*r**2 + 2*3.14*r*h + 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*r**2 + 2*3.14*r*h + 2*3.14*r**2 + 2*3.14*r*h) / (12)"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Find the lateral surface area of a cylinder using formula\n    surface_area = 2 * math.pi * r * h\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r, h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = 2*3.14159265*r*h\n    print(\"The lateral surface area of a cylinder with radius\", r, \"and height\", h, \"is\", area)"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = l**3\n    return volume"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube given its side length.\n    \"\"\"\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 234,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    while n > 0:\n        if n & 1 == 0:  # If n is even\n            n |= 1  # Set the even bit to 1\n        n >>= 1  # Shift right to get next bit\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize a variable to store the result\n    result = 0\n    # Iterate through each bit of the input number\n    for i in range(32):\n        # If the ith bit is even, set the result to 1\n        if (n & (1 << i)) == (1 << i):\n            result = result | (1 << i)\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # loop through each bit in the binary representation of n \n    for i in range(len(bin(n)[2:])): \n        # set the i-th bit to 1 if it is even \n        if i%2 == 0: \n            n |= (1 << i) \n    return n "
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize a variable to store the result\n    result = 0\n\n    # Loop through each bit in the input number\n    for i in range(32):\n        # If the bit is even, set it in the result variable\n        if (n & (1 << i)):\n            result |= (1 << i)\n\n    # Return the result\n    return result"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    while n % 2 == 0:\n        n = n / 2\n    return n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n\n    # Initialize the result variable to 0\n    result = 0\n\n    # Convert the given number to a binary string\n    bin_str = bin(n)[2:]\n\n    # Iterate over each character in the binary string\n    for char in bin_str:\n        # Check if the character is an even bit\n        if int(char) % 2 == 0:\n            # If it is, set the corresponding bit to 1 in the result variable\n            result |= 1 << (len(bin_str) - bin_str[::-1].index(char))\n\n    # Return the result variable as an integer\n    return int(result)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # Initialize an empty string to store the result\n    result = \"\"\n    \n    # Loop through each bit of the input number\n    for bit in bin(n)[2:]:\n        # If the bit is even, append it to the result\n        if bit == '1':\n            result += '1'\n        else:\n            result += '0'\n    \n    # Convert the result string to an integer and return it\n    return int(result, 2)"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    return n | (n - 1) & 0b1001111111111111111111111111111"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_bit_set_number(n):\n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << i) for i in range(64) if n & (1 << i)\n"
    },
    {
        "number": 235,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    even_bits = n & 0b11110000\n    return even_bits"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the counts\n    count_dict = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # if the tuple is already in the dictionary, increment its count by 1\n        if tup in count_dict:\n            count_dict[tup] += 1\n        # if the tuple is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[tup] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create an empty dictionary to store the count of occurrences\n    count_dict = {}\n    # Iterate over the list of tuples\n    for item in test_list:\n        # If the item is not already in the dictionary, add it with a count of 1\n        if item not in count_dict:\n            count_dict[item] = 1\n        # Otherwise, increment the count by 1\n        else:\n            count_dict[item] += 1\n    # Return the dictionary of count of occurrences\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    # use Counter to count the occurrences of each tuple in the list\n    count_dict = Counter(test_list)\n    \n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return dict(count)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef check_occurrences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create a dictionary to store the occurrence counts\n    count_dict = {}\n    # loop through each tuple in the list\n    for tup in test_list:\n        # if the tuple is not in the count_dict, add it and set its value to 1\n        if tup not in count_dict:\n            count_dict[tup] = 1\n        # if the tuple is already in the count_dict, increment its value by 1\n        else:\n            count_dict[tup] += 1\n    # return the count_dict\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    count = Counter(test_list)\n    return count"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples to a set to remove duplicates\n    unique_tuples = set(test_list)\n    # Create a dictionary to store the count of each unique tuple\n    count_dict = {}\n    # Iterate through the unique tuples\n    for t in unique_tuples:\n        # Increment the count of each unique tuple in the dictionary by 1\n        count_dict[t] = count_dict.get(t, 0) + 1\n    # Return the dictionary of unique tuple counts\n    return count_dict"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Convert the list of tuples into a set of tuples to remove duplicates\n    unique_tuples = set(test_list)\n\n    # Use the Counter function from the collections module to count the occurrences of each tuple\n    counts = Counter(unique_tuples)\n\n    # Convert the Counter object back into a dictionary and return it\n    return dict(counts)"
    },
    {
        "number": 237,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter \n\ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Create a Counter object to count the occurrences of each tuple in the list\n    counter = Counter(test_list)\n    # Convert the Counter object to a dictionary\n    result = dict(counter)\n    return result"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            substring = str[i:j]\n            if substring:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i, n):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize an empty dictionary to store the count of substrings\n    count = {}\n    \n    # loop through all possible substrings of the string\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            # check if the substring is non-empty and add its length to the count dictionary\n            if str[i:j] and not str[i:j].isspace():\n                if str[i:j] in count:\n                    count[str[i:j]] += 1\n                else:\n                    count[str[i:j]] = 1\n    \n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize count to zero\n    count = 0\n    # iterate through each character in the string\n    for i in range(len(str)):\n        # iterate through each subsequent character in the string\n        for j in range(i+1, len(str)+1):\n            # check if the substring between i and j is non-empty\n            if str[i:j]!= '':\n                # increment the count if the substring is non-empty\n                count += 1\n    # return the final count\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_of_substrings(str):\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if len(str[i:j]) > 0:\n                count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            if str[i:j].strip():\n                count += 1\n                \n    return count"
    },
    {
        "number": 238,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count the number of non-empty substrings of a given string.\n    \"\"\"\n    # initialize a variable to keep track of the number of non-empty substrings\n    count = 0\n    # loop through each character in the string\n    for i in range(len(str)):\n        # loop through each starting position for the current substring\n        for j in range(i, len(str)+1):\n            # check if the substring is not empty and add 1 to the count if it is\n            if str[j-1:j]!= \"\":\n                count += 1\n    # return the count of non-empty substrings\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m, n):\n    # base case: when n=0, return 1\n    if n == 0:\n        return 1\n\n    # base case: when m=0, return 0\n    if m == 0:\n        return 0\n\n    # recursive case:\n    # number of sequences of length n that end with k such that k >= 2*j <= m\n    # and k is even is n odd and j is odd\n    # and k is odd and j is even is n even and j is even\n    # where j is the previous element\n    n_odd = 0 if n % 2 == 0 else 1\n    j_odd = 0 if j % 2 == 0 else 1\n    n_even = 0 if n % 2 == 1 else 1\n    j_even = 0 if j % 2 == 1 else 1\n    return get_total_number_of_sequences(m, n - 1) + (n_odd * j_odd + n_even * j_even)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m, n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return m\n    if n % 2 == 0:\n        return 0\n    prev_two = 0\n    prev_one = 0\n    count = 0\n    for i in range(2, n):\n        if i % 2 == 0:\n            count += prev_two\n        else:\n            count += prev_one\n        prev_two = prev_one\n        prev_one = count\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m, n):\n    if m < 2 or n < 1:\n        return 0\n\n    # Initialize the cache\n    cache = [0] * (m + 1)\n    cache[0] = 1\n    cache[1] = 1\n\n    # Iterate through each possible sequence of length n\n    for i in range(2, m + 1):\n        # For each sequence, add the number of sequences of length n-1, where the current element is less than or equal to twice the previous element\n        cache[i] = (cache[i] + cache[i - 1]) % 1000000007\n\n    # Return the result\n    return cache[n]\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    \"\"\"\n    sequences = set()\n    for i in range(m, n+1):\n        sequence = [2 * j + 2 for j in range(i//2)]\n        sequences.add(tuple(sequence))\n    return len(sequences)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    i = 2  # initialize the first element to 2\n    while i <= m:\n        count += m // i  # count the number of sequences of length n that start with i\n        i += 1\n    return count"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m, n):\n    def helper(i, j, prev_seq, count):\n        if i == j:\n            if j == 0:\n                return 1\n            else:\n                return 0\n        if i > j:\n            return count\n        if prev_seq[i] == m or prev_seq[j] == m:\n            return helper(i + 1, j, prev_seq, count)\n        if prev_seq[i] + prev_seq[j] <= m:\n            return helper(i, j + 1, prev_seq, count)\n        else:\n            return helper(i, j, prev_seq, count)\n\n    total = 0\n    prev_seq = []\n    for i in range(n):\n        prev_seq.append(0)\n    for i in range(2, m + 1):\n        total += helper(0, n - 1, prev_seq, 1)\n        prev_seq[0] = i\n    return total"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m // 2, m):\n        for j in range(i + 2, min(i + n, m)):\n            if j % 2 == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m, n):\n    def is_valid(sequence):\n        for i in range(1, len(sequence)):\n            if sequence[i] <= 2 * sequence[i - 1] or sequence[i] > m:\n                return False\n        return True\n\n    def get_num_valid_sequences(num_elements, max_element):\n        return (max_element - 1) * (max_element - 2) // 2\n\n    def get_num_sequences(num_elements):\n        max_element = 2 * num_elements\n        return get_num_valid_sequences(num_elements, max_element)\n\n    return get_num_sequences(n)"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m, n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    # Initialize the number of sequences to 0\n    total_sequences = 0\n    \n    # Initialize the list to store all possible sequences\n    sequences = []\n    \n    # Iterate through all possible sequences of length n\n    for i in range(n+1):\n        if i == 0:\n            # If the sequence length is 0, add the first element as 1\n            sequences.append(1)\n        elif i == 1:\n            # If the sequence length is 1, add the first two elements as 1 and 2\n            sequences.append(1)\n            sequences.append(2)\n        else:\n            # If the sequence length is greater than 1, add the previous element to the sequence\n            sequences.append(sequences[-1])\n            \n            # Add the first element greater than the previous element and less than or equal to m to the sequence\n            for j in range(sequences[-1]+1, min(m, sequences[-1]*2)+1):\n                sequences.append(j)\n                \n            # Add the second element greater than the previous element and less than or equal to m to the sequence\n            for k in range(sequences[-1]+1, min(m, sequences[-1]*2)+1):\n                sequences.append(k)\n    \n    # Calculate the number of possible sequences and return the result\n    total_sequences = len(sequences)\n    return total_sequences"
    },
    {
        "number": 239,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n):\n    total_sequences = 0\n    prev_num = 0\n    for i in range(1,m+1):\n        current_num = i\n        count = 0\n        while current_num <= n:\n            if current_num >= 2*prev_num and current_num <= m:\n                count += 1\n            current_num += 1\n        total_sequences += count\n        prev_num = i\n    return total_sequences"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[:]\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    # Loop through the first list and add each element to a new list\n    new_list = []\n    for i in range(len(list1) - 1):\n        new_list.append(list1[i])\n    # Add the last element from the second list to the new list\n    new_list.append(list2)\n    # Replace the original list with the new list\n    list1[:] = new_list"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_list(list1, list2):\n    '''\n    This function takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    if len(list1)!= len(list2):\n        raise ValueError(\"The two lists must be of the same length.\")\n    list1[-1] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_list(list1, list2):\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_list(list1, list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    return list1"
    },
    {
        "number": 240,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    \"\"\"\n    list1.pop()\n    list1.extend(list2)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 242,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    \"\"\"\n    Write a function to count the total number of characters in a string.\n    \"\"\"\n    count = 0\n    for char in str1:\n        count += 1\n    return count"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # initializing the lower bound to 1 and upper bound to the given number\n    lower_bound = 1\n    upper_bound = N\n\n    # checking if the given number is already a perfect square\n    if math.isqrt(N) * math.isqrt(N) == N:\n        # if it is, just return the square root of the given number plus 1\n        return math.sqrt(N) + 1\n\n    # iterating through the lower and upper bounds until the next perfect square is found\n    while True:\n        # calculating the midpoint between the lower and upper bounds\n        midpoint = (lower_bound + upper_bound) / 2\n\n        # checking if the midpoint is a perfect square\n        if math.isqrt(midpoint) * math.isqrt(midpoint) == midpoint:\n            # if it is, returning the midpoint plus 1\n            return midpoint + 1\n        # if the midpoint is not a perfect square, updating the lower bound to the midpoint plus 1\n        else:\n            lower_bound = midpoint + 1"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrtN = math.sqrt(N)\n    \n    # Initialize the next perfect square greater than sqrtN to be the square root of N\n    next_sqrtN = sqrtN\n    \n    # Iterate until the square root of the next perfect square greater than sqrtN is greater than 1\n    while next_sqrtN * next_sqrtN > 1:\n        # If the square of the next perfect square is greater than N, set the square of the next perfect square to be N\n        if next_sqrtN * next_sqrtN > N:\n            next_sqrtN = sqrtN\n        \n        # If the square of the next perfect square is less than N, set the square of the next perfect square to be the square of the next perfect square plus the square of the square root of N\n        else:\n            next_sqrtN = next_sqrtN * next_sqrtN + sqrtN**2\n    \n    # Return the next perfect square greater than sqrtN\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function calculates the next perfect square greater than a given number.\n    '''\n    # Use the math.isqrt function to find the square root of N\n    sqrt_N = int(math.isqrt(N))\n\n    # Use the math.ceil function to find the next perfect square\n    next_square = math.ceil(sqrt_N*sqrt_N)\n\n    # Check if the next square is greater than N\n    if next_square > N:\n        # Return the next perfect square\n        return next_square\n    else:\n        # If the next square is less than or equal to N, check if the square root of N+1 is greater than the square root of N\n        sqrt_N_plus_one = int(math.sqrt(N+1))\n        if sqrt_N_plus_one > sqrt_N:\n            # Return the square root of N+1\n            return sqrt_N_plus_one\n        else:\n            # If the square root of N+1 is less than or equal to the square root of N, return the square root of N\n            return sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of N\n    sqrt_N = int(math.sqrt(N))\n    # If the square root is even, add 1 to it\n    if sqrt_N % 2 == 0:\n        sqrt_N += 1\n    # Find the next perfect square greater than sqrt_N\n    next_sqrt = 2 * sqrt_N + 1\n    # Return the next perfect square greater than N\n    return next_sqrt"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # We will first find the square root of N.\n    sqrt_N = int(math.sqrt(N))\n    # We will then check if the square root is an odd integer. If it is, then we need to find the next odd integer.\n    if sqrt_N % 2 == 0:\n        next_sqrt_N = sqrt_N + 1\n        while next_sqrt_N % 2 == 0:\n            next_sqrt_N += 1\n        return next_sqrt_N\n    # If the square root is odd, then the next perfect square is the square of the next odd integer.\n    else:\n        next_sqrt_N = sqrt_N + 2\n        while next_sqrt_N % 2 == 0:\n            next_sqrt_N += 1\n        return next_sqrt_N"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    \"\"\"\n    # Find the square root of N\n    sqrtN = int(math.sqrt(N))\n\n    # Calculate the next perfect square by adding 1 to the square root of N\n    next_sqrtN = sqrtN + 1\n\n    # Check if the next perfect square is greater than N\n    while next_sqrtN <= N:\n        next_sqrtN += 1\n\n    # Return the next perfect square\n    return next_sqrtN"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqrt_N = int(math.sqrt(N))\n    if sqrt_N*sqrt_N == N:\n        sqrt_N += 1\n    return int(math.pow(sqrt_N, 2))"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "Let's write a Python function to implement this algorithm.<|im_sep|>"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # Find the square root of the given number\n    sqrt_N = math.sqrt(N)\n    # Calculate the next perfect square\n    next_square = math.ceil(sqrt_N) ** 2\n    # Return the next perfect square\n    return next_square"
    },
    {
        "number": 244,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef next_Perfect_Square(N):\n    '''\n    This function returns the next perfect square greater than a given number N.\n    '''\n    i = math.sqrt(N)\n    j = i * i\n    while True:\n        j += 1\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i += 1\n            j = i * i\n        if j > N:\n            i +="
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    \n    # Initialize variables\n    n = len(arr)\n    dp = [0] * n\n    \n    # Iterate through the array\n    for i in range(1, n): \n        \n        # If the element is increasing\n        if arr[i] > arr[i-1]:\n            \n            # If the element is decreasing or increasing, update the maximum sum\n            dp[i] = max(dp[i-1] + arr[i], dp[i-2])\n            \n    # Return the maximum sum\n    return max(dp)"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n <= 1:\n        return arr[0]\n    \n    max_ending = [0] * n\n    min_ending = [float('inf')] * n\n    \n    max_so_far = float('-inf')\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            if arr[i] < min_ending[i-1]:\n                min_ending[i] = arr[i]\n            elif arr[i] > max_ending[i-1]:\n                max_ending[i] = arr[i]\n        else:\n            if arr[i] > max_ending[i-1]:\n                max_ending[i] = arr[i]\n            elif arr[i] < min_ending[i-1]:\n                min_ending[i] = arr[i]\n                \n    for i in range(n-2, -1, -1):\n        if arr[i] > arr[i+1]:\n            if arr[i] > max_ending[i+1]:\n                max_ending[i] = arr[i]\n            elif arr[i] < min_ending[i+1]:\n                min_ending[i] = arr[i]\n        else:\n            if arr[i] > max_ending[i+1]:\n                max_ending[i] = arr[i]\n            elif arr[i] < min_ending[i+1]:\n                min_ending[i] = arr[i]\n                \n    max_ending = max_ending[1:]\n    min_ending = min_ending[:-1]\n    \n    max_sum = max(max_ending)\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # initialize variables\n    prev_max = float('-inf')\n    curr_max = 0\n    prev_sum = 0\n    curr_sum = 0\n\n    # iterate through the array\n    for i in range(n):\n        curr_sum = max(curr_sum + arr[i], arr[i])\n        curr_max = max(curr_max, curr_sum)\n\n        # calculate the maximum sum of a bitonic subsequence\n        if i > 0:\n            curr_sum = curr_sum + prev_sum - prev_max\n\n        prev_sum = curr_sum\n        prev_max = curr_max\n\n    return curr_max"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum(arr):\n    \"\"\"\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    \"\"\"\n\n    # Helper function to check if a subsequence is bitonic\n    def is_bitonic(seq):\n        # Check if the sequence is empty\n        if len(seq) <= 1:\n            return True\n\n        # Check if the sequence is increasing and then decreasing\n        return (seq[1] - seq[0] <= 0) and (is_bitonic(seq[1:]) == True)\n\n    # Initialize the maximum sum to be the first element of the array\n    max_sum = arr[0]\n\n    # Iterate through the array and update the maximum sum if a bitonic subsequence is found\n    for i in range(1, len(arr)):\n        if is_bitonic(arr[i-1:i+1]):\n            max_sum = max(max_sum, arr[i])\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 3:\n        return None\n    \n    # Traverse the array to find the first increasing subsequence\n    i = 1\n    while i < len(arr) and arr[i] >= arr[i-1]:\n        i += 1\n    \n    # If the subsequence is not found, return None\n    if i == len(arr):\n        return None\n    \n    # Traverse the array to find the first decreasing subsequence\n    j = i - 1\n    while j >= 0 and arr[j] <= arr[j+1]:\n        j -= 1\n    \n    # If the subsequence is not found, return None\n    if j == -1:\n        return None\n    \n    # Calculate the maximum sum of the bitonic subsequence\n    max_sum = sum(arr[j:i])\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            dp[i][i] = dp[i-1][i] + arr[i]\n        else:\n            dp[i][i] = dp[i-1][i]\n\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i + gap\n            if arr[j] < arr[j-1]:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j]) + arr[j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        raise ValueError(\"Array must have at least 3 elements\")\n\n    # Check if the array is increasing\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            raise ValueError(\"Array must be increasing\")\n\n    # Initialize variables to store the maximum sum and the length of the subsequence\n    max_sum = arr[0]\n    subsequence_length = 1\n\n    # Iterate through the array and find the maximum sum of a bitonic subsequence\n    for i in range(1, n):\n        if arr[i] > arr[i - 1] and arr[i] < arr[i - 2]:\n            subsequence_length += 1\n        else:\n            subsequence_length = 1\n\n        if subsequence_length > 1 and subsequence_length + arr[i] > max_sum:\n            max_sum = subsequence_length + arr[i]\n\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Check if the array is bitonic\n    increasing = True\n    decreasing = False\n    for i in range(1, n - 1):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        elif arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] > arr[i - 1]:\n            increasing = False\n            decreasing = True\n        else:\n            increasing = True\n            decreasing = True\n\n    if increasing and decreasing:\n        return max(arr)\n\n    # Find the maximum sum of a decreasing subsequence\n    if increasing:\n        return max_sum(arr[::-1])\n\n    # Find the maximum sum of an increasing subsequence\n    if decreasing:\n        return max_sum(arr[1:])\n\n    # If the array is neither increasing nor decreasing, return 0\n    return 0"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # Step 1: Initialize variables\n    inc_sum, dec_sum = float('-inf'), float('-inf')\n\n    # Step 2: Iterate through the array\n    for i in range(n):\n        # If the current element is increasing, add it to the sum\n        if i == 0 or arr[i] > arr[i - 1]:\n            inc_sum += arr[i]\n        else:\n            dec_sum += arr[i]\n\n        # Update the maximum sum\n        max_sum = max(max_sum, inc_sum, dec_sum)\n\n    # Step 3: Return the maximum sum\n    return max_sum"
    },
    {
        "number": 245,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum(arr):\n    n = len(arr)\n\n    # create a table to store the maximum sum of a subsequence ending at index i\n    table = [0] * n\n\n    # initialize the table with the value of the first element\n    table[0] = arr[0]\n\n    # fill the table using dynamic programming\n    for i in range(1, n):\n        # if the current element is increasing, add it to the maximum sum of the subsequence ending at index i-1\n        if arr[i] < arr[i-1]:\n            table[i] = table[i-1] + arr[i]\n        # if the current element is decreasing, take the maximum of the current element and the sum of the subsequence ending at index i-1\n        else:\n            table[i] = max(arr[i], table[i-1] + arr[i])\n\n    # return the maximum sum of a bitonic subsequence\n    return max(table)"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    epsilon = 0.00000000001\n    guess = number / 2.0\n    while abs(guess * guess - number) >= epsilon:\n        guess = (guess + number / guess) / 2.0\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = 1.0\n    y = number / x\n    i = 0\n    while y > 0.00001:\n        x_prev = x\n        x = x - (number/x)\n        y = x_prev - x\n        i += 1\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    low = 0\n    high = number\n    mid = (low + high) / 2\n    \n    while True:\n        if mid * mid == number:\n            return mid\n        elif mid * mid < number:\n            low = mid\n        else:\n            high = mid\n        mid = (low + high) / 2"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    \"\"\"\n    if number < 0:\n        return None\n\n    x = number / 2\n    y = 1.0\n    z = 0.0\n\n    while abs(x - y) > 0.0000000001:\n        z = y\n        y = x\n        x = (y + number / y) / 2\n\n    return x"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    \"\"\"\n    Compute the square root of a number using the babylonian method.\n    \n    Args:\n    number (float): the number to compute the square root of.\n    \n    Returns:\n    float: the square root of the input number.\n    \"\"\"\n    guess = number / 2.0  # Start with an initial guess of the square root\n    while True:\n        # Compute the next guess\n        new_guess = (guess + number / guess) / 2.0\n        # Check if the new guess is close enough to the actual square root\n        if abs(guess - new_guess) < 1e-6:\n            return new_guess\n        # Update the guess\n        guess = new_guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x0 = 1.0\n    x1 = number / x0\n    i = 0\n    while abs(x1 - x0) > 1e-10:\n        x0 = x1\n        x1 = (x0 + number / x0) / 2.0\n        i += 1\n    return x1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    # Initialize variables\n    i = 0\n    j = 1\n    k = 0\n    x = number\n    y = 0\n    z = 0\n    # Perform babylonian method until desired accuracy is reached\n    while abs(x - y) > 0.0001:\n        x = y\n        y = z\n        z = (x + y) / 2.0\n        i += 1\n    # Return square root\n    return z"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    tolerance = 1e-6 # small value to avoid division by zero errors\n    guess = 0.5\n    while abs(guess**2 - number) > tolerance:\n        guess = (number/guess + guess) / 2\n    return guess"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 1\n    while True:\n        guess_square = guess**2\n        if guess_square == number:\n            return guess\n        elif guess_square < number:\n            guess += 1\n        else:\n            guess -= 1"
    },
    {
        "number": 246,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n\n    # Initialize two variables to start the algorithm\n    x1 = 1\n    x2 = 2\n\n    # Initialize the maximum iteration count and the tolerance\n    max_iterations = 100\n    tolerance = 0.001\n\n    # Initialize the iteration count and the square root of the input number\n    iteration = 0\n    sqrt_num = number\n\n    while abs(x2 - x1) >= tolerance and iteration < max_iterations:\n        # Compute the new x2 value using the babylonian method\n        x3 = (x1 + x2) / 2\n        x2 = x3\n\n        # Check if the new x2 value is within the tolerance range\n        iteration += 1\n        if abs(sqrt_num - x2 * x2) < tolerance:\n            return x2\n        else:\n            # Update the x1 value and the square root of the input number\n            x1 = x3\n            sqrt_num = x2 * x2\n\n    # If the maximum number of iterations has been reached, return the current x2 value\n    return x2"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lps(str):\n    n = len(str)\n    # Initialize an array of size n to store the length of the longest palindromic subsequence ending at each index\n    dp = [0] * n\n\n    # Initialize the longest palindromic subsequence ending at index 0\n    dp[0] = 0\n\n    # Check for all possible substrings starting from index 1\n    for i in range(1, n):\n        # If the current substring is odd length, then we can extend it by adding the previous substring\n        if n - i % 2 == 1:\n            dp[i] = dp[i - 1] + 2\n        # If the current substring is even length, then we can extend it by adding the previous substring or the next substring\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2]) + 2\n\n    return dp[-1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lps(str):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        lps_prev = [0] * n\n        lps_curr = [0] * n\n        max_len = 1\n        for i in range(1, n):\n            if str[i] == str[i-1]:\n                lps_prev[i] = lps_curr[i-1] + 2\n                lps_curr[i] = lps_prev[i]\n            elif i > 1 and str[i] == str[i-2]:\n                lps_prev[i] = max(lps_prev[i-1], lps_prev[i-2]) + 2\n                lps_curr[i] = lps_prev[i]\n            else:\n                lps_prev[i] = lps_curr[i-1]\n                lps_curr[i] = lps_prev[i]\n            if lps_curr[i] > max_len:\n                max_len = lps_curr[i]\n        return max_len"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n    max_len = 1\n    start = 0\n\n    for i in range(1, n):\n        for j in range(i):\n            if str[i] == str[j]:\n                if i - j == 1:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i - 1][j - 1] + 2\n\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = j\n\n    return max_len, str[start:start + max_len]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lps(str):\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(3, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str[start] == str[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    max_len = 1\n    start = 0\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n                if dp[i][j] > max_len:\n                    max_len = dp[i][j]\n                    start = i\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return max_len, start"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lps(str):\n    n = len(str)\n    dp = [[0] * n for _ in range(n)]\n\n    # Compute LPS values for all substrings\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lps(s):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(s)\n    # Create a 2D array to store the lengths of LPSs for substrings of s.\n    L = [[0 for j in range(n)] for i in range(n)]\n\n    # Store the length of LPS for empty string.\n    L[0][0] = 0\n\n    # Fill the lengths of LPS for substrings one by one.\n    for i in range(1, n):\n        for j in range(i):\n            # If the characters at the current position are same, then\n            # extend the LPS by including the current character.\n            if s[i] == s[j]:\n                L[i][j] = L[j][i-1] + 2\n            else:\n                # If the characters are different, then take the maximum of\n                # including the current character or not including the current\n                # character.\n                L[i][j] = max(L[i][j-1], L[j][i])\n\n    # Return the length of the longest palindromic subsequence.\n    return L[n-1][0]"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef expand_around_center(s, left, right):\n    while left >= 0 and right < len(s) and s[left] == s[right]:\n        left -= 1\n        right += 1\n    return left + 1, right - 1\n\ndef longest_palindromic_subsequence(s):\n    n = len(s)\n    if n == 0 or n == 1:\n        return n\n\n    start = 0\n    max_length = 1\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            length = j - i\n            if is_palindrome(s[i:j]) and length > max_length:\n                start = i\n                max_length = length\n\n    return max_length\n\ndef lps(s):\n    return longest_palindromic_subsequence(s)"
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lps(str): \n    n = len(str) \n  \n    # Create a table to store lengths of palindromic subsequences \n    # of all odd-length substrings \n    L = [[0] * n for i in range(n)] \n  \n    # Fill the table L[][] in bottom-up manner. Note that L[i][j] \n    # contains the length of the longest palindromic subsequence \n    # of str[0...i-1] and str[j...n-1] \n    for i in range(n): \n        L[i][i] = 1 \n  \n    for length in range(3, n+1): \n        for i in range(n-length+1): \n            j = i + length - 1 \n            if str[i] == str[j]: \n                L[i][j] = 2 + L[i+1][j-1] \n            else: \n                L[i][j] = max(L[i+1][j], L[i][j-1]) \n  \n    # Return the length of the longest palindromic subsequence \n    return L[0][n-1] "
    },
    {
        "number": 247,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_palindrome(s):\n    \"\"\"\n    Check if a string is palindrome or not.\n    \"\"\"\n    return s == s[::-1]\n\n\ndef lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n    \"\"\"\n    # Initialize variables\n    max_length = 1\n    start = 0\n\n    # Loop through each character in the string\n    for i in range(1, len(s)):\n        # Check if the current character is a palindrome\n        if is_palindrome(s[i-1:i+1]):\n            # If it is, check if its length is greater than the current longest palindrome\n            if i-start+1 > max_length:\n                max_length = i-start+1\n                start = i-max_length+1\n\n    # Return the maximum length palindrome subsequence\n    return max_length"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    result = 0\n    for i in range(1, n):\n        result += 1 / i\n    return result"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / harmonic_sum(n-1) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n * (1/n) * (n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum_list = [0] * (n - 1)\n    for i in range(n - 1):\n        sum_list[i] = 1 / (i + 1)\n    return sum(sum_list)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    This function takes in an integer n and calculates the harmonic sum of n-1.\n    The harmonic sum is the sum of 1/k for k=1,2,...,n-1.\n    '''\n    return 1/n + harmonic_sum(n-1)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/i for i in range(1, n+1))"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += 1/i\n    return sum/n"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1/n) + (1/n) + (1/n) +... + (1/n) + (1/n)"
    },
    {
        "number": 248,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n * (n - 1)) / 2"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Use set intersection to find the common elements between the two arrays\n    intersection = set(array_nums1) & set(array_nums2)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    set_intersection = set1.intersection(set2)\n    for num in set_intersection:\n        intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Find the intersection of two arrays.\n\n    Parameters:\n    array_nums1 (list): The first array of integers.\n    array_nums2 (list): The second array of integers.\n\n    Returns:\n    list: The intersection of the two arrays.\n    \"\"\"\n    # Create a set to store the numbers in array_nums1\n    set_nums1 = set(array_nums1)\n\n    # Create a list to store the intersection\n    intersection = []\n\n    # Loop through each number in array_nums2\n    for num in array_nums2:\n        # If the number is in the set of array_nums1, add it to the intersection list\n        if num in set_nums1:\n            intersection.append(num)\n\n    # Return the intersection list\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2 and num not in intersection:\n            intersection.append(num)\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a dictionary to store the frequency of each number in array_nums1\n    freq_dict = {}\n    for num in array_nums1:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n\n    # create a list to store the intersection of two arrays\n    intersection = []\n\n    # loop through each number in array_nums2\n    for num in array_nums2:\n        # if the number is in the frequency dictionary of array_nums1, add it to the intersection list\n        if num in freq_dict:\n            intersection.append(num)\n            freq_dict[num] -= 1\n            if freq_dict[num] == 0:\n                del freq_dict[num]\n\n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to store the counts of each number in array_nums1\n    dict_nums1 = {}\n    for num in array_nums1:\n        if num in dict_nums1:\n            dict_nums1[num] += 1\n        else:\n            dict_nums1[num] = 1\n    \n    # create a set of all numbers in array_nums2\n    set_nums2 = set(array_nums2)\n    \n    # create an empty list to store the intersection\n    intersection = []\n    \n    # iterate through each number in array_nums1\n    for num in dict_nums1:\n        # if the number is in array_nums2 and the count is greater than 0, add it to the intersection list\n        if num in set_nums2 and dict_nums1[num] > 0:\n            intersection.append(num)\n    \n    return intersection"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a set of the numbers in array_nums1\n    set1 = set(array_nums1)\n    # create a set of the numbers in array_nums2\n    set2 = set(array_nums2)\n    # find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # create a set of unique elements in array_nums1\n    unique_elements1 = set(array_nums1)\n    # create an empty set to store the intersection of unique elements in array_nums1 and array_nums2\n    intersection = set()\n    # iterate over array_nums2 and add any elements that are in both sets to the intersection set\n    for element in array_nums2:\n        if element in unique_elements1:\n            intersection.add(element)\n    # convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    array_nums1.sort()\n    array_nums2.sort()\n    i = j = 0\n    intersect_array = []\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] == array_nums2[j]:\n            if not intersect_array or array_nums1[i]!= intersect_array[-1]:\n                intersect_array.append(array_nums1[i])\n            i += 1\n            j += 1\n        elif array_nums1[i] < array_nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return intersect_array"
    },
    {
        "number": 249,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays.\n    \"\"\"\n    # Create a set to hold the intersection of the two arrays\n    intersection = set()\n    \n    # Iterate through each element in the first array\n    for num in array_nums1:\n        # If the element is in the second array, add it to the intersection set\n        if num in array_nums2:\n            intersection.add(num)\n    \n    # Convert the intersection set to a list and return it\n    return list(intersection)"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_X(tup, x):\n    \"\"\"\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for item in tup: \n        if item == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_X(tup, x):\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0 \n    for element in tup: \n        if element == x: \n            count += 1 \n    return count "
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_X(tup, x):\n    count = 0\n    for item in tup:\n        if item == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count"
    },
    {
        "number": 250,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_X(tup, x):\n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result[len(list):]"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in range(len(list)):\n        if i == 0:\n            new_list.append(element)\n        new_list.append(list[i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def insert_element(list, element):\n    '''\n    This function takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(list[i])\n        result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element] + list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    new_list = []\n    for i in range(len(list)):\n        new_list.append(element)\n        new_list.extend(list[:i])\n    return new_list"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def insert_element(list, element):\n    \"\"\"\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    \"\"\"\n    result = []\n    for i in range(len(list)):\n        result.insert(0, element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        if i == 0:\n            result.append(element)\n        else:\n            result.append(list[i-1])\n    result.append(element)\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.append(list[i])\n    return result"
    },
    {
        "number": 251,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def insert_element(list, element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in range(len(list)):\n        result.append(element)\n        result.extend(list[:i])\n        result.extend(list[i:])\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    \"\"\"\n    polar_coordinates = []\n    for num in numbers:\n        # Convert complex number to polar coordinates\n        real, imag = cmath.polar(num)\n        \n        # Calculate magnitude and angle of polar coordinates\n        magnitude = abs(num)\n        angle = cmath.phase(num)\n        \n        # Add the polar coordinates to a list\n        polar_coordinates.append([magnitude, angle])\n        \n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for number in numbers:\n        magnitude = abs(number)\n        angle = cmath.phase(number)\n        print(magnitude, angle)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        if isinstance(num, complex):\n            r, theta = cmath.polar(num)\n            polar_coordinates.append((r, theta))\n        else:\n            polar_coordinates.append(None)\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_coordinates = []\n    for num in numbers:\n        polar_coordinates.append(cmath.polar(num))\n    return polar_coordinates"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        if isinstance(num, complex):\n            r = num.real\n            theta = cmath.phase(num)\n            print(f\"r = {r}, theta = {cmath.pi * theta / 180}\")\n        else:\n            print(\"Invalid input. Please provide a complex number.\")"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for num in numbers:\n        x, y = num.real, num.imag\n        r = cmath.sqrt(x**2 + y**2)\n        theta = cmath.phase(num)\n        polar_num = (r, theta)\n        print(polar_num)"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    This function converts a list of complex numbers to a list of tuples containing the \n    angle (in radians) and magnitude (in the unit of the complex numbers) of each complex number.\n    '''\n    polar_list = []\n    for num in numbers:\n        mag = abs(num)\n        arg = cmath.phase(num)\n        polar_list.append((arg, mag))\n    return polar_list"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        real = abs(num)\n        imag = cmath.phase(num)\n        polar = (real, imag)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for number in numbers:\n        real = abs(number)\n        imag = cmath.phase(number)\n        polar = (real, imag)\n        result.append(polar)\n    return result"
    },
    {
        "number": 252,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    result = []\n    for num in numbers:\n        r = cmath.sqrt(num.real**2 + num.imag**2)\n        theta = cmath.phase(num)\n        result.append((r, theta))\n    return result"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if type(item) == int:\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    count = 0\n    for item in list1:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_integer(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count"
    },
    {
        "number": 253,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Generate all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n\n    # Create a list of all possible combinations of length n using combinations_with_replacement\n    combinations = list(combinations_with_replacement(l, n))\n    \n    # Initialize an empty list to store the combinations in a tuple format\n    combined_list = []\n    \n    # Iterate through the combinations and append the tuples to the combined_list\n    for combination in combinations:\n        combined_list.append(tuple(combination))\n    \n    return combined_list"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # Generate all combinations of length n\n    combinations = list(combinations_with_replacement(l, n))\n    # Flatten the list to get a list of tuples\n    combinations_flat = [tuple(combination) for combination in combinations]\n    return combinations_flat"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l[i:], n-1):\n            result.append((l[i],) + tuple(j))\n    return result"
    },
    {
        "number": 255,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement\n\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    result = []\n    for i in range(len(l)):\n        for j in combinations_with_replacement(l, n):\n            result.append(tuple(j))\n    return result"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a list to keep track of prime numbers\n    primes = []\n    # Check all numbers from 2 to n-1\n    for i in range(2, n):\n        # If i is prime, add it to the list of primes\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n    # Return the number of primes found\n    return len(primes)"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check whether a number is prime or not\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # Initialize a boolean list to keep track of whether each number is prime or not\n    primes = [True] * (n+1)\n    primes[0] = primes[1] = False\n\n    # Iterate through each number from 2 to n\n    for i in range(2, int(n**0.5)+1):\n        # If a number is prime, mark all its multiples as not prime\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n\n    # Count the number of prime numbers\n    count = sum(primes)\n\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            count += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    This function checks if a given number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    \"\"\"\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    \"\"\"\n    return b,a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_numbers(a, b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_numbers(a, b):\n    return b, a"
    },
    {
        "number": 257,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    return b,a"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    max_tup = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # initializing variables\n    max_tuple1 = 0\n    max_tuple2 = 0\n\n    # comparing elements of each tuple\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max_tuple1:\n            max_tuple1 = test_tup1[i]\n        if test_tup2[i] > max_tuple2:\n            max_tuple2 = test_tup2[i]\n\n    # returning the max tuple\n    if max_tuple1 > max_tuple2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length\")\n\n    # Use a list comprehension to find the maximum value in each tuple\n    max_tup1 = max(test_tup1)\n    max_tup2 = max(test_tup2)\n\n    # Check which tuple has the maximum value\n    if max_tup1 > max_tup2:\n        max_tuple = test_tup1\n    else:\n        max_tuple = test_tup2\n\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = test_tup1\n    if max_tup[0] < test_tup2[0]:\n        max_tup = test_tup2\n    if max_tup[1] < test_tup2[1]:\n        max_tup = test_tup2\n    if max_tup[2] < test_tup2[2]:\n        max_tup = test_tup2\n    return max_tup"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    \"\"\"\n    max_tup = []\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        if test_tup1[i] > test_tup2[i]:\n            max_tup.append(test_tup1[i])\n        elif test_tup1[i] < test_tup2[i]:\n            max_tup.append(test_tup2[i])\n        else:\n            max_tup.append(test_tup1[i])\n    return tuple(max_tup)"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if test_tup1 > test_tup2:\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2"
    },
    {
        "number": 259,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = max(test_tup1)\n    max2 = max(test_tup2)\n    max_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max_tuple = (test_tup1[i], test_tup2[i])\n        elif test_tup2[i] > max2:\n            max_tuple = (test_tup2[i], test_tup1[i])\n    return max_tuple"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n\ndef is_prime(num):\n    '''\n    A simple function to check if a number is prime.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Find the nth Newman-Shanks-Williams prime number.\n\n    Args:\n    n (int): the nth prime number to find.\n\n    Returns:\n    int: the nth Newman-Shanks-Williams prime number.\n    \"\"\"\n\n    # Initialize the list of primes to the first 100 primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\n    # Initialize the count of primes to 100\n    count = 100\n\n    # Loop until we have found the nth prime number\n    while count < n:\n        # Find the next prime number\n        next_prime = max(primes[-1] + 2, primes[-1] * 3)\n\n        # Add the next prime to the list if it is not in the list yet\n        if next_prime not in primes:\n            primes.append(next_prime)\n\n        # Increment the count of primes found\n        count += 1\n\n    # Return the nth prime number\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # generate list of all primes up to n\n    primes = []\n    i = 2\n    while i <= n:\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n\n    # generate nth newman\u2013shanks\u2013williams prime number\n    prime = primes[n-1]\n    newman_prime = primes[n-2] - 1\n\n    return newman_prime\n``` \n\nTo test the function, we can call it with different values of n and see if the result is correct:\n\n```python\nprint(newman_prime(10)) # should print 31\nprint(newman_prime(100)) # should print 303\nprint(newman_prime(1000)) # should print 3274\n``` \n\nThe function should return the correct result for all values of n."
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return primes[n-1]"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n\n    # Initialize count to 0\n    count = 0\n\n    # Iterate over all primes less than n\n    for i in range(2, n):\n        is_prime = True\n        # Check if i is a prime number\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        # If i is prime, increment count\n        if is_prime:\n            count += 1\n        # Check if we have found the nth prime number\n        if count == n:\n            return i\n    # If we have not found the nth prime number, return None\n    return None"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num) and num!= 1:\n            count += 1\n        num += 1\n    return num\n\ndef is_prime(num):\n    '''\n    A helper function to check if a number is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def newman_prime(n):\n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    while True:\n        if p % 2 == 0:\n            p += 1\n        else:\n            for i in range(3, int(p**0.5)+1, 2):\n                if p % i == 0:\n                    break\n            else:\n                return p\n        if p == n:\n            return p"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    \"\"\"\n    # Define the list of primes\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    # Define the function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Define the function to find the nth newman\u2013shanks\u2013williams prime number\n    def newman_prime_num(n, primes=primes):\n        # Check if n is a valid input\n        if n < 0:\n            raise ValueError(\"n must be a positive integer.\")\n\n        # Initialize the count of prime numbers found so far to 0\n        count = 0\n\n        # Iterate through the list of primes\n        for prime in primes:\n            # Check if the current prime number is a factor of n\n            if prime * prime > n:\n                break\n            if n % prime == 0:\n                count += 1\n\n        # Return the nth newman\u2013shanks\u2013williams prime number\n        return count\n\n    # Return the nth newman\u2013shanks\u2013williams prime number\n    return newman_prime_num(n)"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def is_prime(num): \n        if num < 2: \n            return False\n        for i in range(2, int(num**0.5) + 1): \n            if num % i == 0: \n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n: \n        if is_prime(num): \n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 260,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    p = 2\n    count = 0\n    while count < n:\n        if is_prime(p):\n            count += 1\n        p += 1\n    return p\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length!\")\n        return\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            print(\"The element at index {} is zero, so division by zero is undefined.\".format(i))\n            return\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return tuple(elem1/elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n    else:\n        return None"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length\")\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] / test_tup2[i])\n    return result"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i] % test_tup2[i] == 0:\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        else:\n            result_tup += (float(test_tup1[i]) / float(test_tup2[i]),)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Length of tuples should be equal.\")\n        return\n    else:\n        result_tup = ()\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] / test_tup2[i],)\n        return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: The two tuples do not have the same length.\")\n        return\n    \n    # Perform element-wise division of the two tuples\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] / test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] // test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Define the length of the tuples\n    n = len(test_tup1)\n\n    # Perform element-wise division\n    for i in range(n):\n        test_tup1[i] /= test_tup2[i]\n\n    # Return the result\n    return test_tup1"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        return \"The two tuples should have the same number of elements.\"\n    # Initialize a new tuple with the same number of elements as the input tuples\n    result_tup = tuple([0] * len(test_tup1))\n    # Perform element-wise division on each element of the input tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] == 0:\n            result_tup[i] = 0\n        else:\n            result_tup[i] = test_tup1[i] / test_tup2[i]\n    return result_tup"
    },
    {
        "number": 261,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Check if the tuples have equal lengths\n    if len(test_tup1)!= len(test_tup2):\n        return \"Error: Tuples have different lengths\"\n\n    # Perform element-wise division operation across the tuples\n    result_tup = tuple(elem1 / elem2 for elem1, elem2 in zip(test_tup1, test_tup2))\n\n    return result_tup"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_two_parts(lst, L):\n    # calculate the length of the first part of the list\n    n = len(lst) // 2\n    \n    # create the first part of the list\n    part1 = lst[:n]\n    \n    # create the second part of the list\n    part2 = lst[n:]\n    \n    # return the result as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    part1 = list1[:L]\n    part2 = list1[L:]\n\n    # Return the two parts as a tuple\n    return (part1, part2)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    \"\"\"\n    n = len(list1)\n    if L <= 0 or L > n:\n        raise ValueError(\"L should be a positive integer less than or equal to the length of the list\")\n    mid = n // 2\n    first_part = list1[:mid]\n    second_part = list1[mid:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split the given list into two parts where the length of the first part is L and return the resulting lists in a tuple.\n    \"\"\"\n    if len(lst) <= L:\n        raise ValueError(\"The length of the list must be greater than or equal to L\")\n    else:\n        mid = len(lst) // 2\n        return (lst[:mid], lst[mid:])"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    This function takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # create a new list to store the first part of the list\n    first_part = []\n    # loop through the list\n    for item in list1:\n        # if the length of the list is less than or equal to L, add the item to the first part of the list\n        if len(first_part) < L:\n            first_part.append(item)\n        # if the length of the list is greater than L, add the last item of the first part to the second part of the list and reset the first part to an empty list\n        else:\n            first_part.append(list1[-1])\n            break\n    # return a tuple with the first part and second part of the list\n    return (first_part, list1)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    Split a list into two parts with length L.\n    \"\"\"\n    n = len(lst)\n    mid = n // 2\n    if n % 2 == 0:\n        # if the length of the list is even\n        first_part = lst[:mid]\n        second_part = lst[mid:]\n    else:\n        # if the length of the list is odd\n        first_part = lst[:mid+1]\n        second_part = lst[mid+1:]\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) % L == 0:\n        n = len(list1) // L\n        return (list1[:n], list1[n:])\n    else:\n        n = len(list1) // L\n        return (list1[:n], list1[n:]) + (list1[-(L-n):],)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_two_parts(lst, L):\n    \"\"\"\n    This function splits a list into two parts, where the length of the first part is L, and returns the two parts as a tuple.\n\n    Parameters:\n    lst (list): The list to split\n    L (int): The length of the first part of the list\n\n    Returns:\n    tuple: A tuple containing the two parts of the list\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L is greater than the length of the list\")\n    return lst[:L], lst[L:]"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Check if L is valid input\n    if not isinstance(L, int):\n        raise TypeError(\"L must be an integer.\")\n    if L <= 0:\n        raise ValueError(\"L must be a positive integer.\")\n\n    # Calculate the number of elements to be included in the first part of the list\n    num_elements = len(list1) // 2 * 2\n\n    # Split the list into two parts\n    first_part = list1[:num_elements]\n    second_part = list1[num_elements:]\n\n    # Return the two parts as a tuple\n    return (first_part, second_part)"
    },
    {
        "number": 262,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Find the index where the length of the first part is L\n    index = 0\n    while index < len(list1) and len(list1[index]) < L:\n        index += 1\n    # Split the list into two parts\n    part1 = list1[:index]\n    part2 = list1[index:]\n    return part1, part2"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    age = (h_age * 7) + 4\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # calculate dog's age in dog's years\n    dog_years = 10 * h_age\n    # return dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # Calculate the dog's age in years\n    age = 7 * h_age / 2\n\n    return age"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n\n    :param h_age: the height in inches of the dog.\n    :return: the age in dog's years.\n    \"\"\"\n    feet = h_age / 12.0\n    age_dogs = feet / 7.0\n    return age_dogs"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    # convert human age to dog's age in dog's years\n    dog_years = int(h_age) * 7\n\n    # return the calculated dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_years = h_age * 7\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n\n    dog_years = h_age * 7\n\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate dog's age in dog's years\n    dog_years = 7 * h_age\n\n    # Return the dog's age in dog's years\n    return dog_years"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    # assume a 12-month cycle and use 12 to convert from hours to years\n    return h_age * 12"
    },
    {
        "number": 264,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    \"\"\"\n    age_in_years = 7 * h_age\n    return age_in_years"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # initialize an empty list to hold the resulting lists\n    result = []\n    # loop through the input list\n    for i in range(0, len(S), step):\n        # create a new list containing the current list and the next step\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S = list(S)\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    \"\"\"\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    \"\"\"\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    L = []\n    for i in range(0, len(S), step):\n        L.append(S[i:i+step])\n    return L"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    split_list = []\n    for i in range(0, len(S), step):\n        split_list.append(S[i:i+step])\n    return split_list"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # Initialize an empty list to store the resulting lists\n    result = []\n\n    # Loop through the list, splitting for every nth element\n    for i in range(0, len(S), step):\n        # Create a new list containing the current element and the previous n-1 elements\n        sublist = S[i:i+step]\n\n        # Add the new sublist to the result list\n        result.append(sublist)\n\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 265,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    S_len = len(S)\n    result = []\n    for i in range(0, S_len, step):\n        result.append(S[i:i+step])\n    return result"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2 # formula for lateral surface area of cube"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # Calculate the volume of the cube\n    volume = l ** 3\n\n    # Calculate the lateral surface area of the cube using the formula:\n    #   lateral_surface_area = 2 * volume\n    lateral_surface_area = 2 * volume\n\n    return lateral_surface_area"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l**2"
    },
    {
        "number": 266,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i**2\n        i += 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    if n % 2 == 0:\n        return \"Please enter an odd number\"\n    else:\n        total = 0\n        for i in range(1, n+1, 2):\n            total += i**2\n        return total"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 2\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        sum += count**2\n        count += 1\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n\n    # Initialize variables\n    sum_of_squares = 0\n    odd_number = 1\n\n    # Iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n\n    # Return the sum of the squares of the first n odd natural numbers\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i*i\n    return sum_of_squares"
    },
    {
        "number": 267,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    # initialize sum to 0\n    sum = 0\n    # iterate through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # add the square of the current odd natural number to the sum\n        sum += i*i\n    # return the sum of squares\n    return sum"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    # Initialize the sum of the stars\n    sum_stars = 0\n    \n    # Iterate through each integer from 1 to n\n    for i in range(1, n+1):\n        # Add the value of i to the sum of the stars\n        sum_stars += i\n        \n    # Return the sum of the stars\n    return sum_stars"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # initialize the first 5 digits of the number as the first 5 digits of the number of stars\n    first_5_digits = str(n).zfill(5)\n    # initialize a variable to store the number of stars\n    count = 0\n    # loop through each digit of the first 5 digits\n    for digit in first_5_digits:\n        # if the digit is a 1, add it to the count\n        if digit == '1':\n            count += 1\n        # if the count reaches the number of stars, return it\n        elif count == n:\n            return digit\n    # if the count does not reach the number of stars, return -1 to indicate that the number is not valid\n    return -1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n\n    # Initialize the count variable\n    count = 1\n\n    # Iterate till n\n    while count <= n:\n        # Print the current count\n        print('*' * count)\n\n        # Increment the count by 1\n        count += 1"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    result = \"\"\n    for i in range(1, n+1):\n        result += \"*\"\n    return result\n"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the counter variable\n    count = 1\n    # Initialize the result variable to empty string\n    result = \"\"\n\n    # Loop n times, adding a star to the result string\n    for i in range(1, n+1):\n        result += \"*\"\n\n    # Return the result string\n    return result"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_star_num(n):\n    '''\n    Write a function to find then'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n+1):\n        star_num = star_num + (i * (2*i-1))\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    for i in range(1,n+1):\n        print('*' * i)"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    This function takes an integer n as input and returns then'th star number.\n    '''\n    # initialize the variable to store the star number\n    star_num = 1\n    \n    # loop through n times\n    for i in range(1, n+1): \n        # add the current value of star_num to the result\n        star_num += star_num \n        \n    # return the result\n    return star_num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"1\"\n    else:\n        num = 1\n        for i in range(1, n+1):\n            num *= i\n        return num"
    },
    {
        "number": 268,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_star_num(n):\n    \"\"\"\n    Write a function to find then'th star number.\n    \"\"\"\n    # Initialize the current number as 1\n    current_num = 1\n    # Initialize the multiplier as 1\n    multiplier = 1\n\n    # Loop through the numbers from 1 to n\n    for i in range(1, n+1):\n        # Multiply the current number by the multiplier\n        current_num *= multiplier\n\n        # Print the current number\n        print(current_num)\n\n        # Increment the multiplier by 2\n        multiplier += 2"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n\n    # convert character to ASCII code\n    ascii_value = ord(k)\n\n    # print the ascii value\n    print(\"The ascii value of\", k, \"is\", ascii_value)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    \"\"\"\n    if isinstance(k, str):\n        k = ord(k)\n    return k"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_values = {\n        'A': 65, 'B': 66, 'C': 67, 'D': 68, 'E': 69, 'F': 70, 'G': 71, 'H': 72,\n        'I': 73, 'J': 74, 'K': 75, 'L': 76, 'M': 77, 'N': 78, 'O': 79, 'P': 80,\n        'Q': 81, 'R': 82, 'S': 83, 'T': 84, 'U': 85, 'V': 86, 'W': 87, 'X': 88,\n        'Y': 89, 'Z': 90,\n        'a': 97, 'b': 98, 'c': 99, 'd': 100, 'e': 101, 'f': 102, 'g': 103, 'h': 104,\n        'i': 105, 'j': 106, 'k': 107, 'l': 108,'m': 109, 'n': 110, 'o': 111, 'p': 112,\n        'q': 113, 'r': 114,'s': 115, 't': 116, 'u': 117, 'v': 118, 'w': 119, 'x': 120,\n        'y': 121, 'z': 122\n    }\n    return ascii_values.get(k, -1)"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_dict = {chr(i):i for i in range(32, 127)}\n    return ascii_dict[k]"
    },
    {
        "number": 269,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            even_sum += arr[i]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):\n    even_sum = 0\n    even_index = -1\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            even_sum += num\n            if i % 2 == 0:\n                even_index = i\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even += arr[i]\n            count += 1\n        if count % 2 == 0:\n            return sum_even\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):\n    sum_even_index = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_index += arr[i]\n            count += 1\n            if count % 2 == 0:\n                break\n    return sum_even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n            if even_index % 2 == 0:\n                even_sum -= arr[i-1]\n\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    sum_even = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:  # if the number is even\n            if i % 2 == 0:   # if the index is even\n                sum_even += arr[i]\n    return sum_even"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n\n    return even_sum, even_index"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            even_index += 1\n            if even_index % 2 == 0:\n                break\n    return even_sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):\n    sum = 0\n    for i in range(0, len(arr), 2):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum"
    },
    {
        "number": 270,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions of a list.\n    \"\"\"\n    even_sum = 0\n    even_index = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n            if i % 2 == 0:\n                even_index += 1\n    return even_sum, even_index"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_power = 0\n    for i in range(2, 2*n+1, 2):\n        sum_power += i**5\n    return sum_power\n\nn = int(input(\"Enter a positive integer: \"))\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", even_Power_Sum(n))"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_power_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            even_power_sum += i**5\n    return even_power_sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    power_sum = 0\n    for num in even_numbers:\n        power_sum += num ** 5\n    return power_sum\n\nn = int(input(\"Enter a positive integer n: \"))\nresult = even_Power_Sum(n)\nprint(\"The sum of the first\", n, \"even natural numbers that are raised to the fifth power is:\", result)"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    \"\"\"\n    sum_even_power = 0\n    count = 0\n    \n    for i in range(1, n+1, 2):\n        sum_even_power += i ** 5\n        count += 1\n        \n    return sum_even_power"
    },
    {
        "number": 271,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i ** 5\n    return sum"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    result = []\n    for i in test_list:\n        result.append(i[1])\n    return result"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tup in test_list:\n        rear_list.append(tup[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for item in test_list:\n        rear_elements.append(item[1])\n    return rear_elements"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_obj in test_list:\n        rear_list.append(tuple_obj[-1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for tuple_data in test_list:\n        rear_list.append(tuple_data[1])\n    return rear_list"
    },
    {
        "number": 272,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[1])\n    return rear_elements"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the lengths of the two tuples are the same\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples are not the same length.\")\n        return\n\n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    result_tup = tuple([test_tup1[i] - test_tup2[i] for i in range(len(test_tup1))])\n\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Check if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two tuples must have the same length.\")\n    # Loop through the tuples and subtract the elements with the same index\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Initialize a new tuple to store the result\n    result_tup = ()\n    # Loop through the tuples\n    for i in range(len(test_tup1)):\n        # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n        result_tup = result_tup + (test_tup1[i] - test_tup2[i],)\n    # Return the new tuple\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples must have the same length.\")\n        return\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] -= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] - test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        if i in test_tup2:\n            new_tup += (test_tup1[i] - test_tup2[i],)\n    return new_tup"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n    return None"
    },
    {
        "number": 273,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Subtracts elements of the first tuple by elements of the second tuple with the same index.\n\n    Args:\n        test_tup1: tuple\n            The first tuple to be used.\n        test_tup2: tuple\n            The second tuple to be used.\n\n    Returns:\n        A tuple with the substracted elements.\n    \"\"\"\n    # Check that both tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same number of elements\")\n\n    # Check that both tuples have elements that can be subtracted\n    for i in range(len(test_tup1)):\n        if not isinstance(test_tup1[i], (int, float)) or not isinstance(test_tup2[i], (int, float)):\n            raise ValueError(\"Both elements of both tuples must be numeric\")\n\n    # Subtract the elements of the first tuple by the elements of the second tuple with the same index\n    result_tup = tuple(test_tup1[i] - test_tup2[i] for i in range(len(test_tup1)))\n\n    return result_tup"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 1:\n        return 0\n    else:\n        odd_sum = 0\n        for i in range(1, n+1):\n            odd_sum += math.comb(n, i)\n        return odd_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(2, n+1):\n        for j in range(i*2, n+1, i):\n            sum += math.comb(n, j-i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (i + 1) * math.comb(n, i)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # initialize variables\n    even_sum = 0\n    coeff_sum = 1\n    # iterate through even indices\n    for i in range(2, n+1, 2):\n        # calculate the binomial coefficient\n        coeff = math.comb(n, i)\n        # calculate the sum of even indices of the binomial coefficient\n        sum_even_indices = i\n        # check if the sum of even indices is even\n        if sum_even_indices % 2 == 0:\n            even_sum += sum_even_indices\n            # add the binomial coefficient to the sum of even indices\n            coeff_sum += coeff\n    # return the sum of even indices and the sum of binomial coefficients\n    return even_sum, coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    This function takes in a positive integer n and returns the sum of even index binomial coefficients.\n    '''\n\n    # Calculate the sum of even index binomial coefficients using matrix exponentiation\n    sum = 0\n    for i in range(n+1):\n        for j in range(i+1):\n            if i % 2 == 0:\n                sum += math.comb(n, j)\n\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n//2):\n        for j in range(i):\n            sum += math.comb(n, i-j) * math.comb(n, j)\n    return sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            term = math.comb(n, i)\n            sum_even += term\n    return sum_even"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize sum variable to 0\n    even_sum = 0\n    # Loop through even indices\n    for i in range(2, n+1, 2):\n        # Compute the binomial coefficient for i, n-i, and i+1\n        coeff = math.comb(n, i-1) * math.comb(n-i, i) * math.comb(i+1, n-i)\n        # Add the even index binomial coefficient to the sum if it's even\n        if i % 2 == 0:\n            even_sum += coeff\n    # Return the sum of even index binomial coefficients\n    return even_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize a variable to store the sum of even index binomial coefficients\n    coeff_sum = 0\n\n    # Calculate the even index binomial coefficients and add them to the sum\n    for i in range(n+1):\n        coeff_sum += math.comb(n, i) * 2 ** i\n\n    return coeff_sum"
    },
    {
        "number": 274,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math  \n  \ndef even_binomial_Coeff_Sum(n):  \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum_even_index = 0  \n    for i in range(2, n+1):  \n        sum_even_index += math.comb(n, i)  \n        if i % 2 == 0:  \n            sum_even_index += math.comb(n, i-2)  \n    return sum_even_index  \n  \n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    vol = (1/3) * r**3 * h\n    return vol"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14*(r**2)*(h)"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 3.14159*r**2*h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14159 * r * r * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    V = 3.14 * (r ** 2) * h\n    return V"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    \"\"\"\n    volume = 3.14159 * r * r * h\n    return volume"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return 3.14 * r**2 * h"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * pi * (r**3) * h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def volume_cylinder(r, h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (1/3) * 3.14159 * r**2 * h\n    return volume"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_filter(dict, n):\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {k: v for k, v in dict.items() if v >= n}\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_filter(dict, n):\n    return {key: value for key, value in dict.items() if value >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 277,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_filter(dict, n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    \"\"\"\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == 0:\n            continue\n        elif test_tup[i-1]!= test_tup[i]:\n            break\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= 0:\n            count += 1\n            if test_tup[i] == test_tup[i-1]:\n                break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            if test_tup[i]!= test_tup[i+1]:\n                count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            break\n        if test_tup[i] == test_tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if i == len(test_tup) - 1:\n            return count\n        elif test_tup[i]!= test_tup[i + 1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1, 0, -1):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    count = 1\n    decagonal = 1\n    while count <= n:\n        decagonal += (2 * (count - 1))\n        count += 1\n    return decagonal"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_num_decagonal(n):\n    '''\n    This function takes an integer n as input and returns True if it is a decagonal number and False otherwise.\n    A decagonal number is a positive integer that can be expressed as the sum of two consecutive integers.\n    For example, 15 is a decagonal number because 1 + 12 = 15.\n    '''\n    # initializing the sum of consecutive integers\n    sum_of_consecutive = 0\n    # iterating from 1 to n-1\n    for i in range(1, n-1):\n        # adding the i-th and i+1-th integers\n        sum_of_consecutive += i\n    # if the sum of consecutive integers is equal to n, then it's a decagonal number\n    if sum_of_consecutive == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (n * (2 * n - 1)) / 2"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1, n+1):\n        num += ((2*i-1)**2 + 2*i-1)/2\n    return num"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Function to calculate the decagonal number\n    def decagonal_num(n):\n        return (n * (3 * n - 1)) // 2\n    \n    # Check if the input is valid\n    if n < 1:\n        return False\n    \n    # Calculate the decagonal number and return it\n    return decagonal_num(n)"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n\n    # Initialize variables for the decagonal number and the value of n\n    decagonal = 0\n    count = 1\n\n    # Loop through the numbers from 1 to n\n    while count <= n:\n\n        # Calculate the value of the decagonal number\n        decagonal += 2 * count - 1\n\n        # Increment the count variable\n        count += 1\n\n    # Check if the calculated decagonal number is equal to n\n    if decagonal == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = []\n    num = 1\n    for i in range(1, n+1):\n        decagonal_numbers.append(num)\n        num += 2*(i+1)\n    return decagonal_numbers[-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_sum = 0\n    for i in range(1, n+1):\n        decagonal_sum += i*(i+1) // 2\n    return decagonal_sum"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_num_decagonal(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal_numbers = [1]\n    for i in range(2, n+1):\n        decagonal_numbers.append(sum(map(int, str(i**2 + 1))))\n    return decagonal_numbers[n-1]"
    },
    {
        "number": 279,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    a = 1\n    b = 0\n    decagonal = 0\n    for i in range(1, n+1):\n        decagonal += ((a**2 + b**2)**0.5)\n        a, b = b, decagonal - a\n    return decagonal"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for index in range(len(dlist)):\n        if dlist[index] == item:\n            return True, index\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Loop through the list and compare each element to the item\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            # Return the index position and a boolean indicating if the element was found\n            return (i, True)\n    # If the element is not found, return -1 and a boolean indicating that the element was not found\n    return (-1, False)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return (True, i)\n    return (False, -1)"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \"\"\"\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 280,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(set(test_list)) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n    \"\"\"\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    # create a set to store unique elements of the list\n    unique_set = set(test_list)\n\n    # check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    \"\"\"\n    unique = True\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                unique = False\n                break\n        if not unique:\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    \"\"\"\n    This function takes a list of elements as input and returns True if all the elements are unique, False otherwise.\n    \"\"\"\n    # create a set from the input list to remove duplicates\n    set_of_elements = set(test_list)\n    # check if the length of the set is equal to the length of the input list\n    if len(set_of_elements) == len(test_list):\n        return True\n    else:\n        return False"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return False\n        seen.add(item)\n    return True"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = True\n    for i in range(len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            unique = False\n            break\n    return unique"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    return len(test_set) == len(test_list)"
    },
    {
        "number": 281,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # Create a set to store unique elements of the list\n    unique_set = set(test_list)\n    # Check if the length of the set is equal to the length of the list\n    if len(unique_set) == len(test_list):\n        # If the set is equal to the list, then all elements are unique\n        return True\n    else:\n        # If the set is not equal to the list, then there are duplicate elements\n        return False"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length.\")\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sub_list(nums1, nums2):\n    \"\"\"\n    This function subtracts two lists element-wise and returns the result.\n\n    :param nums1: a list of numbers\n    :param nums2: a list of numbers\n    :return: a list of the elements of nums1 subtracted from those of nums2, element-wise\n    \"\"\"\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    This function takes two lists as input and subtracts the corresponding elements element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"The two lists must have the same length.\")\n        return\n\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists should have same length')\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print('Lists must have the same length')\n    else:\n        result = []\n        for i in range(len(nums1)):\n            result.append(nums1[i] - nums2[i])\n        return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # check if the two lists have the same length\n    if len(nums1)!= len(nums2):\n        raise ValueError('Both lists must have the same length.')\n    \n    # subtract the corresponding elements of the lists\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    \n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Lists must have the same length\")\n        return\n\n    for i in range(len(nums1)):\n        nums1[i] -= nums2[i]\n\n    return nums1"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 282,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sub_list(nums1, nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def validate(n):\n    # Initialize a dictionary to store the frequency of digits\n    freq = {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0}\n\n    # Convert the integer to a string and loop through each character\n    for digit in str(n):\n        # Update the frequency of the current digit in the dictionary\n        freq[int(digit)] += 1\n\n        # Check if the frequency of the digit is greater than the digit itself\n        if freq[int(digit)] > int(digit):\n            # If the frequency of the digit is greater than the digit itself, return False\n            return False\n\n    # If we make it through the loop without returning False, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n\n    freq = [0] * 10 # initialize frequency list with zeros\n\n    # count frequency of each digit\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # check if frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if digit > n % 10: # if frequency of digit is greater than the digit itself, return False\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = [0] * 10  # initialize a list of frequency of each digit\n\n    # iterate through the integer and update the frequency of each digit\n    for digit in str(n):\n        freq[int(digit)] += 1\n\n    # iterate through the frequency list and check if the frequency is less than or equal to the digit itself\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False  # if any digit has a frequency greater than itself, return False\n\n    return True  # if all digits have a frequency less than or equal to themselves, return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    for i in str(n):\n        digits.append(int(i))\n    freq = {}\n    for d in digits:\n        if d in freq:\n            freq[d] += 1\n        else:\n            freq[d] = 1\n    for d in freq:\n        if freq[d] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    freq = [0] * 10  # frequency of each digit\n\n    for digit in str(n):  # iterate through each digit in the integer\n        freq[int(digit)] += 1  # increment the frequency of that digit\n\n    for digit in freq:  # iterate through the frequency list and check if any digit is greater than or equal to its value\n        if digit >= digit:  # if any digit is greater than or equal to its value\n            return False  # return False if any digit is greater than or equal to its value\n\n    return True  # return True if no digit is greater than or equal to its value"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def validate(n):\n    \"\"\"\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    \"\"\"\n    # Initialize an empty dictionary to store the frequency of each digit\n    freq = {}\n\n    # Iterate through each digit in the integer and increment its frequency in the dictionary\n    for digit in str(n):\n        if digit in freq:\n            freq[digit] += 1\n        else:\n            freq[digit] = 1\n\n    # Iterate through the frequency dictionary and check whether the frequency of each digit is greater than or equal to the digit itself\n    for digit, count in freq.items():\n        if count > digit:\n            return False\n\n    # If all digits pass the validation, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # Initialize a dictionary to store the frequency of digits\n    freq = {}\n\n    # Loop through each digit in the number\n    for digit in str(n):\n        # If the digit is already in the dictionary, increment its frequency\n        if digit in freq:\n            freq[digit] += 1\n        # If the digit is not in the dictionary, add it with a frequency of 1\n        else:\n            freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in freq:\n        if freq[digit] > int(digit):\n            return False\n\n    # If no digit has a frequency greater than or equal to its value, the number is valid\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = [int(digit) for digit in str(n)]\n    freq = [0] * 10\n    for digit in digits:\n        freq[digit] += 1\n\n    for i in range(10):\n        if freq[i] > 0 and freq[i] > i:\n            return False\n\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    # initialize a dictionary to store the frequency of each digit\n    freq = {}\n\n    # loop through each digit in the integer\n    for digit in str(n):\n        # check if the digit is already in the dictionary\n        if digit in freq:\n            # increment the frequency of the digit by 1\n            freq[digit] += 1\n        else:\n            # otherwise, add the digit to the dictionary with a frequency of 1\n            freq[digit] = 1\n\n    # loop through each digit in the integer again to check if the frequency of the digit is greater than or equal to the digit itself\n    for digit in str(n):\n        # check if the frequency of the digit is greater than or equal to the digit itself\n        if freq[digit] > int(digit):\n            # if it is, return False\n            return False\n\n    # if all digits pass the frequency check, return True\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def validate(n):\n    # check if n is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # count the frequency of each digit in n\n    freq = [0] * 10\n    for d in str(n):\n        freq[int(d)] += 1\n\n    # check if the frequency of each digit is less than or equal to the digit itself\n    for f in freq:\n        if f > n // f or (f == n // f and f > 1):\n            return False\n\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_element(list, element):\n    \"\"\"\n    This function takes in a list and an element and checks whether all items in the list are equal to the given element.\n    \"\"\"\n    if len(list) == 1:\n        if list[0] == element:\n            return True\n        else:\n            return False\n    else:\n        if list[0] == element:\n            return check_element(list[1:], element)\n        else:\n            return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_element(list, element):\n    '''\n    This function takes in a list and an element and returns True if all items in the list are equal to the given element, else False.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_element(lst, element):\n    '''\n    This function takes a list and an element as inputs, and returns True if all items in the list are equal to the given element, and False otherwise.\n    '''\n    if len(lst) == 0:\n        return True\n    else:\n        return lst[0] == element and check_element(lst[1:], element)"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:],element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for item in list:\n        if item!= element:\n            return False\n    return True"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # check if the list is empty\n    if not list:\n        return True\n\n    # check if the first element in the list is equal to the given element\n    if list[0] == element:\n        # check if the rest of the list are equal to the given element recursively\n        return check_element(list[1:], element)\n    else:\n        # if the first element is not equal to the given element, return False\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_element(list, element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if len(list) == 0:\n        return True\n    elif list[0] == element:\n        return check_element(list[1:], element)\n    else:\n        return False"
    },
    {
        "number": 284,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_element(list, element):\n    if len(list) == 0:\n        return True\n    else:\n        return check_element(list[1:], element) and list[0] == element"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(?=(b{2,3}))'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)b{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'a.*b{2,3}')\n    match = pattern.search(text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'(?=.*a)(?=.*b)(?=.*b{2,3})'\n    match = re.search(pattern, text)\n    return match is not None"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a.{2,3}b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b){2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'\\ba{2,3}b\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_two_three(text):\n    pattern = r'(?<=a)b{2,3}'\n    return bool(re.search(pattern, text))\n"
    },
    {
        "number": 285,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'a[b]{2,3}'\n    return re.search(pattern, text) is not None"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Find the maximum subarray sum without any repeats\n    max_sum = max_subarray(a, n)\n\n    # Initialize the maximum subarray sum with repeats\n    max_sum_repeated = max_sum\n\n    # Repeat the array k times and find the maximum subarray sum with repeats\n    for i in range(k):\n        temp = max_subarray(a, n)\n        if temp > max_sum_repeated:\n            max_sum_repeated = temp\n\n    return max_sum_repeated\n\n\ndef max_subarray(arr, n):\n    '''\n    Find the maximum subarray sum in an array.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Compute the sum of the first k elements of the array\n    a_sum = sum(a[:k])\n    # Initialize the maximum sum found so far\n    max_sum = a_sum\n    \n    # Iterate over the remaining elements of the array\n    for i in range(n-k+1):\n        # Compute the sum of the i-th element of the array\n        sum_i = sum(a[i:i+k])\n        # Update the maximum sum found so far\n        max_sum = max(max_sum, sum_i - a_sum)\n        # Update the sum of the first k elements of the array\n        a_sum = a_sum - a[i] + a[i+k]\n    \n    # Return the maximum sum found so far\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # initialize sum and maximum sum variables\n    sum = max_sum = a[0]\n    \n    # loop through the array\n    for i in range(1, n): \n        # add the current element to the sum\n        sum += a[i]\n        \n        # check if the sum is greater than the maximum sum\n        if sum > max_sum: \n            # update the maximum sum\n            max_sum = sum\n            \n        # check if the sum exceeds the limit\n        if sum > n * k: \n            # reset the sum\n            sum = a[i]\n            \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Create a new list containing the original array and repeated k times\n    repeated_array = a * k\n\n    # Initialize variables to keep track of the current maximum subarray sum and the starting index of the current subarray\n    max_sum = float('-inf')\n    start = 0\n\n    # Loop through the modified array\n    for i in range(n):\n        # Update the maximum sum and starting index if the current element in the original array is greater than the current maximum subarray sum\n        if a[i] > max_sum:\n            max_sum = a[i]\n            start = i\n\n    # Initialize a variable to keep track of the current subarray sum\n    current_sum = 0\n\n    # Loop through the modified array again to find the maximum subarray sum that ends at the repeated array\n    for i in range(n):\n        # Check if the current element in the original array is equal to the current element in the repeated array\n        if a[i] == repeated_array[i - start]:\n            # Add the current element to the current subarray sum\n            current_sum += a[i]\n        # If the current element is not equal to the current element in the repeated array, we have found the end of the current subarray and can update the maximum sum and starting index accordingly\n        else:\n            # Update the maximum sum and starting index if the current subarray sum is greater than the current maximum subarray sum\n            if current_sum > max_sum:\n                max_sum = current_sum\n                start = i - k + 1\n            # Reset the current subarray sum\n            current_sum = 0\n\n    # Return the maximum subarray sum\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n\n    # Initialize variables to store the maximum sum of contiguous subarray and the sum of each subarray\n    max_sum = 0\n    subarray_sum = 0\n\n    # Loop through each element in the array\n    for i in range(n):\n        # Add the current element to the subarray sum\n        subarray_sum += a[i]\n\n        # If the subarray sum is greater than the current maximum sum, update the maximum sum\n        if subarray_sum > max_sum:\n            max_sum = subarray_sum\n\n        # If the subarray sum is greater than the sum of all previous subarrays, exit the loop\n        if subarray_sum > sum(a[i:i+k]):\n            break\n\n    # Return the maximum sum of the contiguous subarray\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Initialize max_sum to the first element of the array\n    max_sum = a[0]\n    # Initialize a list to store the modified array\n    modified_array = [a[0]]\n    # Initialize a counter variable to keep track of the number of times k needs to be repeated\n    counter = 1\n    # Loop until the end of the array is reached\n    for i in range(1, n):\n        # If the sum of the current element and the previous element is greater than the previous max_sum, update max_sum\n        if a[i] + modified_array[-1] > max_sum:\n            max_sum = a[i] + modified_array[-1]\n        # If the sum of the current element and the previous element is equal to the previous max_sum, update the counter variable\n        elif a[i] + modified_array[-1] == max_sum:\n            counter += 1\n        # If the counter variable is equal to k, update the modified_array and the counter variable\n        if counter == k:\n            modified_array.append(a[i])\n            counter = 1\n    # Return the maximum sum of the modified array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    \"\"\"\n    \n    # calculate the maximum sum of a non-repeating array\n    max_sum = max(a)\n    # calculate the maximum sum of a repeating array\n    max_sum_repeated = max(a) * k\n    \n    # iterate through the array and update the maximum sum of a non-repeating array and a repeating array\n    for i in range(n):\n        max_sum = max(max_sum + a[i], a[i])\n        max_sum_repeated = max(max_sum_repeated + a[i], a[i] * k)\n    \n    # return the maximum sum of a non-repeating array\n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Compute the sum of the first k elements\n    total_sum = sum(a[:k])\n    \n    # Initialize the maximum sum and the current sum\n    max_sum = total_sum\n    curr_sum = total_sum\n    \n    # Iterate through the remaining elements\n    for i in range(k, n):\n        # Add the current element to the sum and update the maximum sum and current sum\n        curr_sum += a[i]\n        max_sum = max(max_sum, curr_sum)\n        # Subtract the first element from the sum and update the maximum sum and current sum\n        curr_sum -= a[i-k]\n        max_sum = max(max_sum, curr_sum)\n        \n    return max_sum"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    # Initialize the maximum sum and the current sum\n    max_sum = float('-inf')\n    cur_sum = 0\n\n    # Initialize the repeated array\n    repeated_array = a * k\n\n    # Iterate over all possible starting indices\n    for i in range(n): \n        # Update the current sum by adding the current element and the repeated element at the same index\n        cur_sum = cur_sum + a[i] + repeated_array[i]\n\n        # Update the maximum sum if the current sum is greater\n        if cur_sum > max_sum: \n            max_sum = cur_sum\n\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    mod_array = [a[0] for i in range(k)]\n    mod_array.extend(a)\n\n    for i in range(k, n):\n        temp_sum = 0\n        for j in range(k):\n            temp_sum += mod_array[i-j]\n        temp_sum += mod_array[i]\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n\n    return max_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n            sum += i*i\n        i += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i ** 2\n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    while count < n:\n        if count % 2 == 0:\n            sum += count ** 2\n        count += 1\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    # initializing variables\n    sum_of_squares = 0\n    count = 0\n\n    # iterating over the even natural numbers from 2 to n\n    for num in range(2, n+1, 2):\n        count += 1\n        sum_of_squares += num**2\n\n    # returning the sum of squares of first n even natural numbers\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    current_number = 2\n    while current_number <= n:\n        sum_of_squares += current_number ** 2\n        current_number += 2\n    return sum_of_squares"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    even_numbers = []\n    for i in range(2, n+1, 2):\n        even_numbers.append(i)\n    \n    total = 0\n    for num in even_numbers:\n        total += num**2\n    \n    return total"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    even_squares_sum = 0  \n    for i in range(1, n+1, 2):  \n        even_squares_sum += i*i  \n    return even_squares_sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i\n    return sum"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for lst in list1:\n        if len(lst) > len(max_list):\n            max_list = lst\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_length_list = []\n    for item in list1:\n        if len(item) > max_length(item):\n            max_length_list.append(len(item))\n    return max_length_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for i in range(len(list1)):\n        max_lengths.append(max(len(sublist) for sublist in list1[i]))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    lengths = []\n    for sublist in list1:\n        lengths.append(len(sublist))\n    return lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    # Find the maximum length in the input list\n    max_length = len(max(list1, key=len))\n    \n    # Create an empty list to store the result\n    result = []\n    \n    # Iterate through each sublist in the input list and add the maximum length to the result list\n    for sublist in list1:\n        result.append(max_length)\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_lengths = []\n    for sublist in list1:\n        lengths = [len(sublist)]\n        for item in sublist:\n            if len(item) > max(lengths):\n                lengths.append(len(item))\n        max_lengths.append(max(lengths))\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n\n    # initialize variables to store the maximum length and the list of maximum length\n    max_length = 0\n    max_list = []\n\n    # loop through each sublist in the list\n    for sublist in list1:\n        # loop through each element in the sublist\n        for element in sublist:\n            # check if the length of the element is greater than the current maximum length\n            if len(element) > max_length:\n                # update the maximum length and the list of maximum length\n                max_length = len(element)\n                max_list = sublist\n\n    # return the list of maximum length\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n\n    Args:\n        list1 (list of lists): The input list of lists.\n\n    Returns:\n        list: A list of maximum lengths in the input list of lists.\n    \"\"\"\n\n    # Initialize an empty list to store the maximum lengths\n    max_lengths = []\n\n    # Loop through each list in the input list of lists\n    for sublist in list1:\n        # Find the length of the sublist\n        length = len(sublist)\n\n        # If the length is greater than the current maximum length, update the maximum length\n        if length > max(max_lengths) or (length == max(max_lengths) and sublist < max_lengths):\n            max_lengths = [length]\n        else:\n            max_lengths.append(length)\n\n    return max_lengths"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of maximum length in a list of lists.\n    \"\"\"\n    max_list = []\n    for sublist in list1:\n        if len(sublist) > len(max_list):\n            max_list = sublist\n    return max_list"
    },
    {
        "number": 290,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_list = []\n    for i in range(len(list1)):\n        if len(list1[i]) > len(max_list):\n            max_list = list1[i]\n    return max_list"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # This is a helper function that returns the number of ways to paint the fence with the given number of colors and n posts.\n    def count_ways(colors, n, k):\n        # If n is 0 or k is 0, the fence can be painted in one way.\n        if n == 0 or k == 0:\n            return 1\n        \n        # If the number of colors is less than or equal to 2, we can paint the fence with k colors if we have n-1 or fewer posts left.\n        if colors <= 2:\n            return count_ways(colors+1, n-1, k)\n        \n        # If the number of colors is greater than 2, we can paint the fence with k-2 colors and n-1 post left.\n        else:\n            return count_ways(colors, n-1, k-2)\n    \n    # Now we can call the helper function to count the number of ways to paint the fence.\n    return count_ways(0, n, k)"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create a list of possible colors for each post\n    colors = list(range(1, k+1))\n\n    # create a list of all possible ways of painting the fence\n    ways = [[0]*(n+1) for _ in range(k+1)]\n    for i in range(1, k+1):\n        ways[i][0] = 1\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            ways[j][i] = ways[j][i-1]\n            if ways[j][i-1] == 1:\n                ways[j][i] += ways[j-1][i]\n\n    return ways[k][n]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # Initialize a 2D list to store the number of ways for each possible color combination\n    ways = [[0] * k for _ in range(n+1)]\n\n    # Base cases: if fence is empty, only one way to paint is 1\n    if n == 0:\n        return 1\n\n    # If fence has only one post, all colors can be used\n    if n == 1:\n        return k\n\n    # If fence has two posts, there are two possible colors (same and different)\n    if n == 2:\n        return ways[1][0] + ways[1][1]\n\n    # Fill the 2D list with the number of ways for each possible color combination\n    for i in range(1, n+1):\n        for j in range(k):\n            ways[i][j] = 0\n            if j > 0:\n                ways[i][j] += ways[i-1][j-1]\n            if j > 1:\n                ways[i][j] += ways[i-1][j]\n\n    # Return the number of ways for fence with n posts and k colors\n    return ways[n][k-1]"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways(colors, color_count, index):\n        if index == n:\n            return 1\n        if color_count == 0:\n            return 0\n        if colors[index] == colors[index - 1]:\n            return count_ways(colors, color_count - 1, index + 1)\n        return count_ways(colors, color_count, index + 1)\n\n    def count_ways_with_limit(colors, color_count, index):\n        if index == n:\n            return 1\n        if color_count == 0:\n            return 0\n        if colors[index] == colors[index - 1]:\n            return count_ways_with_limit(colors, color_count - 1, index + 1)\n        if color_count % 2 == 0:\n            return count_ways_with_limit(colors, color_count, index + 1)\n        return count_ways_with_limit(colors, color_count, index + 1)\n\n    # calculate the number of ways for each color combination\n    color_ways = [0] * (k + 1)\n    for color in range(1, k + 1):\n        color_ways[color] = count_ways(colors, color, 0)\n\n    # calculate the total number of ways for the given n and k\n    total_ways = 1\n    for color in range(1, k + 1):\n        total_ways *= color_ways[color]\n\n    # calculate the number of ways for the given n and k with the 2-color constraint\n    two_color_ways = count_ways_with_limit(colors, k, 0)\n    return total_ways // two_color_ways"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k):\n    def count_ways_helper(n, k, color_count, color_set):\n        if n == 0:\n            return 1\n        if k == 0 or color_set.issubset(color_count):\n            return 0\n        return count_ways_helper(n - 1, k, color_count, color_set) + \\\n            count_ways_helper(n - 1, k - 1, color_count + {(color_set - color_count).pop()}, color_set)\n\n    return count_ways_helper(n, k, set(), set())"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # create a boolean matrix to store the color status of each post\n    colors = [[False for j in range(n)] for i in range(k+1)]\n\n    # base case: if all the colors are used\n    if n == k:\n        return 1\n\n    # base case: if all the posts are used\n    if n == 0:\n        return 1\n\n    # find the ways to paint the fence without adjacent colors\n    ways_without_adjacent = count_no_of_ways(n-1, k)\n\n    # find the ways to paint the fence with adjacent colors\n    for i in range(k):\n        if not colors[i][i]:\n            colors[i][i] = True\n            ways_with_adjacent = count_no_of_ways(n-1, k)\n            colors[i][i] = False\n            ways_without_adjacent += ways_with_adjacent\n\n    # return the total number of ways\n    return ways_without_adjacent"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    count = 0\n    for i in range(2, n+1):\n        for j in range(n-i+2):\n            if i <= n-k:\n                count += 1\n\n    return count\n\nprint(count_no_of_ways(6, 3))  # Output: 13"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k):\n    if k % 2!= 0:\n        return 0\n    count = 0\n    for i in range(1, k + 1, 2):\n        if n % i == 0:\n            count += n // i\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k):\n    def backtrack(start, current_color, used_colors):\n        if current_color >= k:\n            return 1\n        if start == n:\n            return 1\n        used_colors.add(current_color)\n        result = backtrack(start + 1, current_color + 1, used_colors) + backtrack(start + 1, current_color, used_colors)\n        used_colors.remove(current_color)\n        return result\n\n    result = backtrack(0, 0, set())\n    return result"
    },
    {
        "number": 291,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n\n    # initialize a dictionary to store the number of ways for each color\n    color_count = {0: 1}\n\n    # loop through all possible colors\n    for color in range(1, k+1):\n        # add the number of ways for each color to the dictionary\n        color_count[color] = n * color_count[color-1]\n\n        # if the color is already present in the dictionary, add the number of ways for each color to it\n        if color in color_count:\n            color_count[color] += n * color_count[color]\n\n    # return the total number of ways for all colors\n    return color_count[k]\n"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    # Calculate the quotient\n    quotient = n // m\n    \n    # Return the quotient\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find(n, m):\n    \"\"\"\n    Calculate the quotient of two numbers and return it rounded down.\n\n    Args:\n        n (int): The numerator of the division.\n        m (int): The denominator of the division.\n\n    Returns:\n        int: The quotient rounded down.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers n and m and returns their quotient rounded down to the nearest integer.\n    \"\"\"\n    quotient = n // m\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find(n, m):\n    '''\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n    '''\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find(n, m):\n    \"\"\"\n    This function takes two numbers as input and returns their quotient rounded down to the nearest integer.\n\n    Parameters:\n    n: int\n        The first number to divide.\n    m: int\n        The second number to divide.\n\n    Returns:\n    int\n        The quotient of n and m rounded down to the nearest integer.\n    \"\"\"\n    return n // m"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    \"\"\"\n\n    # calculate the quotient\n    quotient = n // m\n\n    # round the quotient to the nearest integer using the floor division operator\n    quotient = quotient // 1 * 1\n\n    return quotient"
    },
    {
        "number": 292,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find(n, m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return int(n/m)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side1 = w\n    side2 = h\n    side3 = math.sqrt(side1**2 + side2**2)\n    return side3"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    '''\n\n    # Formula to find the third side of a right angled triangle\n    c = math.sqrt((w ** 2) + (h ** 2))\n\n    return c"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    \"\"\"\n    This function calculates the third side of a right angled triangle.\n    \n    Parameters:\n    w: float\n        the length of the first side of the triangle\n    h: float\n        the length of the second side of the triangle\n    \n    Returns:\n    float\n        the length of the third side of the triangle\n    \"\"\"\n    \n    # calculate the square of the hypotenuse\n    sq_hypotenuse = w**2 + h**2\n    \n    # calculate the square of the semi-perimeter\n    sq_semiperimeter = math.sqrt(sq_hypotenuse)\n    \n    # calculate the semi-perimeter\n    semiperimeter = math.sqrt(sq_semiperimeter)\n    \n    # calculate the third side of the triangle\n    third_side = 2*w*semiperimeter\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    This function finds the third side of a right angled triangle.\n    '''\n    area = math.sqrt(w**2 + h**2)\n    return area"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt((w**2) + (h**2))\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(w**2 + h**2)\n    return s"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    \"\"\"\n    s = (w**2 + h**2) ** 0.5\n    return math.sqrt(s**2 - w**2)"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Calculate the semi-perimeter of the right triangle\n    s = (w + h) / 2\n    \n    # Calculate the area of the triangle\n    area = math.sqrt(s * (s - w) * (s - h))\n    \n    # Calculate the third side of the triangle\n    third_side = area / math.sin(math.pi/3)\n    \n    return third_side"
    },
    {
        "number": 293,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef otherside_rightangle(w, h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w*w + h*h)"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = float('-inf')\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for value in listval:\n        if maxval is None or value > maxval:\n            maxval = value\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    # Initialize the maximum value to be the first element of the list\n    max_val = listval[0]\n    # Loop through the list and compare each element to the current max value\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not isinstance(listval, list):\n        print(\"Input must be a list\")\n        return\n    max_val = listval[0]\n    for item in listval:\n        if item > max_val:\n            max_val = item\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    \"\"\"\n    if not listval:\n        raise ValueError(\"The list is empty.\")\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = None\n    for val in listval:\n        if maxval is None or val > maxval:\n            maxval = val\n    return maxval"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    max_val = listval[0]\n    for i in listval:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    elif isinstance(listval[0], int):\n        max_num = listval[0]\n        for i in listval:\n            if i > max_num:\n                max_num = i\n        return max_num\n    elif isinstance(listval[0], float):\n        max_num = listval[0]\n        for i in listval:\n            if i > max_num:\n                max_num = i\n        return max_num\n    elif isinstance(listval[0], str):\n        max_str = listval[0]\n        for i in listval:\n            if i > max_str:\n                max_str = i\n        return max_str\n    else:\n        return None"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val"
    },
    {
        "number": 294,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    This function takes a heterogeneous list as input and returns the maximum value in the list.\n    '''\n    max_val = listval[0] # initialize the maximum value with the first element in the list\n    for i in range(1, len(listval)):\n        if listval[i] > max_val: # if the current element is greater than the maximum value, update the maximum value\n            max_val = listval[i]\n    return max_val # return the maximum value"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    div_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            div_sum += i\n    return div_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    i = 1\n    while i*i <= number:\n        if number % i == 0:\n            divisor_sum += i\n        i += 1\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    \"\"\"\n    divisor_sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisor_sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum"
    },
    {
        "number": 295,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum_div = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum_div += i\n    return sum_div"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n    \n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n\n    result.extend(left[i:])\n    result.extend(right[j:])\n\n    return result\n\ndef get_Inv_Count(arr):\n    sorted_arr = merge_sort(arr)\n    inv_count = 0\n\n    for i in range(len(sorted_arr) - 1):\n        for j in range(i + 1, len(sorted_arr)):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += len(sorted_arr) - j\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inv_count = 0\n    # Sort the array in ascending order\n    arr.sort()\n    # Count the number of inversions using two pointers\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] > arr[j]:\n            inv_count += (j - i)\n            i += 1\n        else:\n            j -= 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, i):\n            if arr[i] < arr[j]:\n                inv_count += (i - j)\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    inversions = 0\n\n    # Divide array into two halves\n    for i in range(n//2):\n        # Sort left half\n        left = arr[:i+1]\n        right = arr[i+1:]\n        left.sort()\n        right.sort(reverse=True)\n\n        # Merge sorted halves and count inversions\n        j = 0\n        k = 0\n        while j < len(left) and k < len(right):\n            if left[j] <= right[k]:\n                arr[i+j] = left[j]\n                j += 1\n            else:\n                inversions += len(left) - j\n                arr[i+j] = right[k]\n                k += 1\n        # Add any remaining elements from left or right half\n        while j < len(left):\n            arr[i+j] = left[j]\n            j += 1\n        while k < len(right):\n            inversions += len(right) - k\n            arr[i+k] = right[k]\n            k += 1\n\n    return inversions"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    count = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                count += n - j\n\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n\n    for i in range(n):\n        # Find the smallest element in the remaining part of the array\n        smallest = i\n        for j in range(i+1, n):\n            if arr[j] < arr[smallest]:\n                smallest = j\n\n        # Swap the smallest element with the first element of the current part of the array\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n\n        # Count the number of inversions in the current part of the array\n        left, right = i+1, n-1\n        while left < right:\n            if arr[left] > arr[i] and arr[right] > arr[i]:\n                inv_count += right-left\n                left += 1\n                right -= 1\n            elif arr[left] > arr[i]:\n                left += 1\n            else:\n                right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    n = len(arr)\n    # initialize count to zero\n    inv_count = 0\n\n    # use three pointers, left, mid, and right\n    left, mid, right = 0, 0, n - 1\n\n    # sort the array in non-decreasing order\n    while mid <= right:\n        # compare the elements at the mid point with the two pointers\n        if arr[left] > arr[mid]:\n            left += 1\n        if arr[mid] > arr[right]:\n            right -= 1\n        # if the two elements are in the correct order, swap them\n        if arr[left] <= arr[mid]:\n            arr[left], arr[mid] = arr[mid], arr[left]\n            # increment the count of inversions\n            inv_count += right - left + 1\n        # move the pointers to the next pair of elements\n        mid += 1\n        left += 1\n        right -= 1\n\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr):\n    n = len(arr)\n    inv_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                inv_count += n - j - 1\n    return inv_count"
    },
    {
        "number": 296,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    # Create a function to count inversions in an array\n    def merge_sort(arr):\n        if len(arr) <= 1:\n            return arr\n        mid = len(arr) // 2\n        left = arr[:mid]\n        right = arr[mid:]\n        left = merge_sort(left)\n        right = merge_sort(right)\n        return merge(left, right)\n\n    def merge(left, right):\n        inv_count = 0\n        i = j = 0\n        merged = []\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inv_count += len(left) - i\n                j += 1\n        merged += left[i:]\n        merged += right[j:]\n        return merged, inv_count\n\n    # Sort the array\n    sorted_arr = merge_sort(arr)\n\n    # Count inversions\n    inv_count = 0\n    n = len(sorted_arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sorted_arr[i] > sorted_arr[j]:\n                inv_count += n - i - 1\n    return inv_count"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n\n    Parameters:\n    list1 (list): A nested list structure.\n\n    Returns:\n    A flattened list.\n    \"\"\"\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    \"\"\"\n    flattened_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flattened_list = []\n    for item in list1:\n        if type(item) == list:\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def flatten_list(lst):\n    flattened = []\n    for item in lst:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def flatten_list(lst):\n    flat_lst = []\n    for elem in lst:\n        if isinstance(elem, list):\n            flat_lst.extend(flatten_list(elem))\n        else:\n            flat_lst.append(elem)\n    return flat_lst"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"
    },
    {
        "number": 297,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    # initialize an empty list to store the flattened list\n    flattened_list = []\n    # loop through each element in the list\n    for element in list1:\n        # if the element is a list, recursively call the function\n        if type(element) == list:\n            flattened_list.extend(flatten_list(element))\n        else:\n            # otherwise, append the element to the flattened list\n            flattened_list.append(element)\n    # return the flattened list\n    return flattened_list"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a defaultdict to store the maximum aggregate for each customer\n    max_aggs = defaultdict(int)\n\n    # iterate through each tuple in the list of tuples\n    for customer, amount in stdata:\n        # update the max aggregate for the customer\n        max_aggs[customer] += amount\n\n    # find the maximum aggregate for each customer\n    max_customer_aggs = max(max_aggs.items(), key=lambda x: x[1])\n\n    # return the maximum aggregate for the customer with maximum aggregate\n    return max_customer_aggs[1]"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a dictionary to store the maximum aggregate for each customer\n    max_agg = defaultdict(int)\n\n    for item in stdata:\n        # Calculate the maximum aggregate for the customer\n        max_agg[item[0]] = max(max_agg[item[0]], item[1])\n\n    # Find the maximum aggregate of all customers and return it\n    return max(max_agg.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        for i, value in enumerate(item):\n            if i == 0:\n                max_dict[item[0]] += value\n            else:\n                max_dict[item[0]] = max(max_dict[item[0]], value)\n    return max(max_dict.values())"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a defaultdict to store the total sales for each product and each date\n    date_sales = defaultdict(defaultdict(int))\n    \n    # Loop through the list of tuples and update the date_sales defaultdict\n    for sale in stdata:\n        date = sale[0]\n        product = sale[1]\n        quantity = sale[2]\n        price = sale[3]\n        \n        # Update the total sales for each product and each date\n        date_sales[date][product] += quantity * price\n    \n    # Find the maximum aggregate for each product and each date\n    max_sales = {}\n    for date in date_sales:\n        for product in date_sales[date]:\n            if date_sales[date][product] > max_sales.get((date, product), 0):\n                max_sales[(date, product)] = date_sales[date][product]\n    \n    # Loop through the max_sales and find the maximum value\n    max_agg = 0\n    for date in max_sales:\n        for product in max_sales[date]:\n            if max_sales[date][product] > max_agg:\n                max_agg = max_sales[date][product]\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_dict = defaultdict(int)\n    for item in stdata:\n        max_dict[item[0]] += item[1]\n    max_agg = max(max_dict.values())\n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n\n    # Create a defaultdict to store the maximum aggregate for each transaction\n    max_agg = defaultdict(int)\n\n    # Iterate through each transaction in the list\n    for t in stdata:\n        # Calculate the maximum aggregate for each transaction\n        max_agg[t[0]] = max(max_agg[t[0]], t[1])\n\n    # Find the maximum aggregate from the defaultdict\n    max_agg_final = max(max_agg.values())\n\n    # Return the maximum aggregate value\n    return max_agg_final"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    agg_dict = defaultdict(int)\n    max_agg = 0\n    \n    for st, amt in stdata:\n        agg_dict[st] += amt\n        max_agg = max(max_agg, agg_dict[st])\n    \n    return max_agg"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # create a dictionary to store the maximum aggregate for each student\n    max_aggs = defaultdict(int)\n\n    # iterate through each tuple in the list of tuples\n    for student, score in stdata:\n        # update the maximum aggregate for the student\n        max_aggs[student] = max(max_aggs[student], score)\n\n    # return the maximum aggregate for each student\n    return max_aggs"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_so_far = defaultdict(int)\n    max_ending = defaultdict(int)\n\n    for (name, price) in stdata:\n        if price > max_so_far[name]:\n            max_ending[name] = price\n        else:\n            max_ending[name] = max_so_far[name] + price\n\n        if max_ending[name] > max_so_far[name]:\n            max_so_far[name] = max_ending[name]\n\n    return max_so_far"
    },
    {
        "number": 299,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import defaultdict\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    d = defaultdict(int)\n    for item in stdata:\n        d[item[0]] += item[1]\n    for key, value in d.items():\n        max_agg = max(max_agg, value)\n    return max_agg"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:]\n        first_n_bits = binary_str[:n]\n        last_n_bits = binary_str[-n:]\n        if int(first_n_bits, 2) == int(last_n_bits, 2):\n            count += 1\n\n    return count\n\nn = int(input(\"Enter the value of n: \"))\nresult = count_binary_seq(n)\nprint(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", result)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_binary_seq(n):\n    count = 0\n    for i in range(2**n):\n        num = bin(i)[2:].zfill(n)\n        total_sum = sum(int(digit) for digit in num)\n        if sum(int(digit) for digit in num) % 2 == 0:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**(2*n)-1):\n        if sum(int(digit) for digit in bin(i)[2:].zfill(n)) == sum(int(digit) for digit in bin(i)[-2:].zfill(n)):\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n-1, 2**2*n, 2**n):\n        bits = bin(i)[2:].zfill(2*n)\n        sum_bits = int(bits[n-1:n+1], 2) + int(bits[-n-1:-1], 2)\n        if sum_bits == i:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    binary_seq = [0]*(2*n)\n    count = 0\n    for i in range(n):\n        binary_seq[i] = 0\n    for i in range(n, 2*n):\n        for j in range(i-n, i):\n            if (binary_seq[j] + binary_seq[i-j-1] == 0):\n                count += 1\n                for k in range(j, i):\n                    binary_seq[k] = binary_seq[k] ^ (1<<(i-1-j))\n                break\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # Initialize count variable\n    count = 0\n    \n    # Calculate the sum of the first n bits\n    first_sum = 0\n    for i in range(n):\n        first_sum += 1\n    \n    # Calculate the sum of the last n bits\n    last_sum = 1\n    for i in range(n, 2*n):\n        last_sum *= 2\n    \n    # Check if the sum of the first and last bits is equal\n    if first_sum == last_sum:\n        count += 1\n    \n    # Print the count of the binary sequences\n    print(\"The count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits is:\", count)"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        binary_str = bin(i)[2:].zfill(2*n)\n        first_sum = int(binary_str[:n])\n        last_sum = int(binary_str[-n:])\n        if first_sum == last_sum:\n            count += 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n\n    # Get the sum of first n bits\n    first_bits = bin(n).count('1')\n\n    # Get the sum of last n bits\n    last_bits = bin(n * 2 - 1).count('1')\n\n    # Calculate the count of sequences\n    count = first_bits * last_bits\n\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # initialize a list to store the count of each binary sequence\n    count = []\n    \n    # loop through all possible first n bits\n    for i in range(2**n):\n        \n        # initialize a variable to store the sum of the first n bits\n        first_sum = 0\n        \n        # loop through the first n bits of the binary sequence\n        for j in range(n):\n            \n            # get the binary value of the jth bit of the binary sequence i\n            bit = (i >> j) & 1\n            \n            # add the binary value of the jth bit to the sum of the first n bits\n            first_sum += bit\n        \n        # loop through all possible last n bits\n        for j in range(2**n):\n            \n            # initialize a variable to store the sum of the last n bits\n            last_sum = 0\n            \n            # loop through the last n bits of the binary sequence\n            for k in range(n):\n                \n                # get the binary value of the kth bit of the binary sequence j\n                bit = (j >> k) & 1\n                \n                # add the binary value of the kth bit to the sum of the last n bits\n                last_sum += bit\n                \n            # check if the sum of the first n bits is equal to the sum of the last n bits\n            if first_sum == last_sum:\n                \n                # add 1 to the count of the binary sequence\n                count.append(1)\n                \n    # return the count of binary sequences\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(2**n):\n        if i >= (2**n - (2**n // 2)):\n            seq = bin(i)[2:].zfill(2*n)\n            sum1 = sum(int(seq[i:i+n]) for i in range(n))\n            sum2 = sum(int(seq[n+i:n+i+n]) for i in range(n))\n            if sum1 == sum2:\n                count += 1\n    return count"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def dict_depth(d, depth=0):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value, depth + 1))\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        depth = 1 + max(dict_depth(v) for v in d.values())\n        return depth\n    else:\n        return 0"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    current_depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            current_depth += 1\n        if current_depth > depth:\n            depth = current_depth\n        current_depth = 0\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth = max(depth, dict_depth(d[key]) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    stack = [d]\n    depth = 1\n    while stack:\n        current_dict = stack.pop()\n        for key, value in current_dict.items():\n            if isinstance(value, dict):\n                stack.append(value)\n        depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if isinstance(d[key], dict):\n            depth += 1\n            depth += dict_depth(d[key])\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    \"\"\"\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            depth = max(depth, dict_depth(value) + 1)\n        elif isinstance(value, list):\n            depth = max(depth, max([dict_depth(item) for item in value]) + 1)\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key, value in d.items():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n        else:\n            depth += 1\n    return depth"
    },
    {
        "number": 301,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            depth += 1\n    return depth"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            if rotations[i] == 0:\n                return arr[index]\n            elif rotations[i] == 1:\n                return arr[(index - 1) % len(arr)]\n            elif rotations[i] == 2:\n                return arr[(index - 2) % len(arr)]\n            elif rotations[i] == 3:\n                return arr[(index - 3) % len(arr)]\n            else:\n                return \"Invalid rotation value\"\n    return \"Index out of range\""
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Initializing the result variable with the first element of the array\n    result = arr[0]\n    \n    # Looping through all the rotations and checking if the index is present in the range of rotations\n    for i in range(rotations):\n        # Looping through all the elements in the array\n        for j in range(len(arr)):\n            # If the index is present in the range of rotations, updating the result variable with the element at the given index\n            if j+i >= index:\n                result = arr[j]\n    \n    # Returning the result variable\n    return result"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes an array, a list of ranges, number of rotations, and an index as input.\n    It returns the element at the given index after the specified number of rotations.\n    \"\"\"\n    # Find the range that contains the index\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            range_index = i\n            break\n    else:\n        raise ValueError(\"Index not found in the array.\")\n\n    # Find the corresponding element after the specified number of rotations\n    if rotations > 0:\n        rotations %= len(arr[range_index])\n        if rotations == 0:\n            element = arr[range_index][-1]\n        else:\n            element = arr[range_index][-rotations]\n    else:\n        element = arr[range_index][index]\n\n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    \"\"\"\n    # Find the element at the given index\n    element = arr[index]\n\n    # Calculate the number of rotations needed to get to the desired index\n    rotations_needed = 0\n    for i in range(len(ranges)):\n        if index >= ranges[i][0] and index <= ranges[i][1]:\n            rotations_needed += rotations[i]\n            break\n\n    # Find the element at the desired index after rotations\n    rotations_left = rotations_needed\n    for i in range(rotations_needed):\n        if rotations_left > 0:\n            element = find_Rotated_Element(element, rotations_left)\n            rotations_left -= 1\n\n    return element\n\n\ndef find_Rotated_Element(element, rotations_left):\n    \"\"\"\n    This function takes an element and the number of rotations left and returns the rotated element.\n    \"\"\"\n    if rotations_left == 0:\n        return element\n    elif rotations_left % 2 == 0:\n        return find_Rotated_Element(element, rotations_left // 2)\n    else:\n        return element[-(rotations_left // 2) - 1]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Find the number of elements in the array\n    n = len(arr)\n    \n    # Calculate the position of the element in the array after rotations\n    position = ((index + rotations) % n)\n    \n    # Calculate the new index after rotations\n    new_index = ((position + index) % n)\n    \n    # Find the element at the new index\n    return arr[new_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # Finding the element at index\n    current_index = index\n    \n    # Applying rotations to the array\n    for i in range(rotations):\n        # Finding the element at index and finding the next element after rotation\n        current_element = arr[current_index]\n        next_index = current_index + ranges[i]\n        \n        # If the next element is out of range\n        if next_index >= len(arr):\n            # Finding the element at index and finding the next element after rotation\n            current_element = arr[current_index]\n            next_index = current_index + (len(arr) - ranges[i])\n            \n        # Updating the current_index\n        current_index = next_index\n    \n    # Returning the element at the final index\n    return arr[current_index]\n"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # calculate the initial element\n    initial_element = arr[index]\n    # calculate the sum of numbers\n    total_sum = 0\n    for num in arr:\n        total_sum += num\n    # calculate the difference between total sum and the sum of initial element and its adjacent elements\n    diff = total_sum - (initial_element + arr[index-1] + arr[index+1])\n    # calculate the number of rotations required to achieve the difference\n    rotations_needed = diff // rotations\n    # calculate the final element after rotations_needed rotations\n    final_element = (initial_element + arr[index-rotations_needed] + arr[index+rotations_needed]) % rotations\n    # find the index of the final element in the sorted array\n    sorted_index = (index + rotations_needed) % len(arr)\n    for i in range(len(ranges)):\n        if ranges[i][0] < sorted_index < ranges[i][1]:\n            index = (i * rotations) + (sorted_index - ranges[i][0])\n            break\n    return arr[index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    # Calculate the total number of rotations\n    total_rotations = rotations * len(ranges)\n    \n    # Calculate the difference between the index and the total number of rotations\n    difference = index - total_rotations\n    \n    # If the difference is greater than the length of the array, take the difference modulo the length of the array\n    if difference > len(arr):\n        difference = difference % len(arr)\n    \n    # Find the element at the given index after rotations\n    element = arr[(difference + len(arr)) % len(arr)]\n    \n    return element"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    '''\n    Write a Python function to find element at a given index after number of rotations.\n    '''\n    \n    # Initialize the index of the element to be searched\n    element_index = index\n    \n    # Initialize the current element\n    current_element = arr[element_index]\n    \n    # Perform rotations and update the element index\n    for rotation in rotations:\n        if rotation == 0:\n            element_index = (element_index + rotation) % len(arr)\n        else:\n            temp = arr[element_index]\n            for i in range(rotation):\n                arr[element_index] = current_element\n                element_index = (element_index + 1) % len(arr)\n            current_element = temp\n            \n    # Return the element at the updated index\n    return arr[element_index]"
    },
    {
        "number": 304,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    This function takes the array, ranges, rotations and index as input, and\n    finds the element at the given index after the given number of rotations.\n\n    Args:\n        arr (list): The given array.\n        ranges (list): List of ranges of each rotation.\n        rotations (list): List of rotations.\n        index (int): Index of element to be found.\n\n    Returns:\n        The element at the given index after rotations.\n    \"\"\"\n\n    # Find the number of rotations to perform.\n    n = len(ranges)\n\n    # Calculate the number of elements to skip for each rotation.\n    skip = ranges[0]\n\n    # Calculate the index of the first element in the current rotation.\n    start = (index // ranges[0]) * ranges[0]\n\n    # Initialize the element to be returned.\n    element = None\n\n    # Perform rotations for n times.\n    for i in range(n):\n        # Calculate the new start index.\n        if i == n-1:\n            new_start = (index // ranges[i]) * ranges[i]\n        else:\n            new_start = ((index // ranges[i]) * ranges[i]) + skip\n\n        # Perform the rotation.\n        arr = arr[new_start:index+1]\n        arr.rotate(-rotations[i])\n\n        # Update the skip index.\n        skip = (skip * ranges[i]) + (index % ranges[i])\n\n        # Check if the element has been found.\n        if index in arr:\n            element = arr[arr.index(index)]\n            break\n\n    return element"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+$'\n    for word in words:\n        if re.match(pattern, word):\n            return word, word[1:]"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = r'^p\\w+$'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = [word for word in words if word[0] == 'p']\n    if len(p_words) >= 2:\n        return p_words[0], p_words[1]\n    else:\n        return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef start_withp(words):\n    \"\"\"\n    Write a function to return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    pattern = r'^p'\n    for word in words:\n        if re.match(pattern, word):\n            return word\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w+')\n    for word in words:\n        if pattern.match(word):\n            return word, word[2:]\n    return None"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p\\w+')\n    matches = re.findall(pattern, words)\n    return matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # Split the input string into words\n    words = words.split()\n    \n    # Initialize variables for the first and second words\n    first_p_word = None\n    second_p_word = None\n    \n    # Iterate over the words\n    for word in words:\n        # Check if the first word starts with 'p'\n        if word.startswith('p'):\n            # If it does, check if it's the first or second word\n            if first_p_word is None:\n                # If it's the first word, set it as the first_p_word\n                first_p_word = word\n            else:\n                # If it's the second word, set it as the second_p_word\n                second_p_word = word\n                \n    # Return the two words starting with 'p'\n    return first_p_word, second_p_word"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    # define a regular expression to match words starting with 'p'\n    pattern = re.compile(r'^\\p{Ll}p\\p{Ll}.*', re.IGNORECASE)\n    \n    # find all words starting with 'p'\n    matches = re.findall(pattern,''.join(words))\n    \n    # check if there are at least two matches\n    if len(matches) >= 2:\n        # return the first two matches\n        return matches[:2]\n    else:\n        # if there are not at least two matches, return an empty list\n        return []"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    pattern = re.compile(r'^p.*')  # match words starting with letter 'p'\n    matches = re.findall(pattern, words)  # find all matches of the pattern in the list of words\n    \n    if len(matches) == 0:\n        return \"No matches found\"\n    else:\n        return matches[0], matches[1]  # return the two matches"
    },
    {
        "number": 305,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef start_withp(words):\n    pattern = re.compile(r'^p\\w+$')  # find words starting with 'p'\n    match = re.search(pattern, words)  # search for a match\n    if match:\n        return words[match.start():match.end()]  # return the matched words\n    else:\n        return None"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    This function returns the maximum sum of increasing subsequence from prefix until the ith index and also including the kth element,\n    where k > i.\n\n    Args:\n        a (list): A list of integers.\n        n (int): The length of the list.\n        index (int): The ith index of the subsequence.\n        k (int): The index after i.\n\n    Returns:\n        int: The maximum sum of increasing subsequence from prefix until the ith index and also including the kth element.\n    \"\"\"\n    if index == n:\n        return 0\n\n    # Initialize the sum and the maximum sum found so far\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    # Initialize the table to store the sum of increasing subsequences until each index\n    table = [0] * n\n\n    # Calculate the sum of increasing subsequences until each index\n    for i in range(n):\n        if i == index:\n            table[i] = max(0, table[i - 1] - a[i - 1])\n        elif i < k:\n            table[i] = max(table[i - 1] + a[i], a[i])\n        else:\n            table[i] = max(table[i - 1] + a[i], a[i] + table[i - k])\n\n        curr_sum += table[i]\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    \n    if index == 0:\n        return 0\n    \n    max_sum = max_sum_increasing_subseq(a, n, index-1, k)\n    \n    if a[index] < k:\n        return max_sum\n    \n    prefix_sum = max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]\n    \n    return max(max_sum, prefix_sum)\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > n:\n        return 0\n\n    if index == k:\n        return a[index]\n\n    dp = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - k] + a[index])\n\n    return dp[n]\n"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(index, n):\n        if i == k:\n            curr_sum += a[i]\n        else:\n            curr_sum += max(a[i], curr_sum)\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Base case\n    if k == n:\n        return 0\n\n    # Initialize variables to store the maximum sum and its corresponding index\n    max_sum = float('-inf')\n    max_index = -1\n\n    # Traverse through the array from i to n\n    for i in range(index, n):\n        # If the element is greater than k, then skip it\n        if a[i] > k:\n            continue\n\n        # Find the sum of increasing subsequence from prefix up to index i\n        sub_sum = max_sum_increasing_subseq(a, n, index, i)\n\n        # If the current sum is greater than the maximum sum found so far, update the maximum sum and its corresponding index\n        if sub_sum + a[i] > max_sum:\n            max_sum = sub_sum + a[i]\n            max_index = i\n\n    # If the maximum sum is still -inf, then no increasing subsequence with kth element is possible\n    if max_sum == float('-inf'):\n        return 0\n\n    # Include the kth element in the increasing subsequence\n    max_sum += k\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    \"\"\"\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        if i == index:\n            dp[i] = dp[i - 1]\n        elif i == k - 1:\n            dp[i] = max(dp[i - 1], dp[i - 2]) + a[i]\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2]) + a[i]\n\n    return max(dp)"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    if k > index:\n        return 0\n\n    max_sum = 0\n    for i in range(index, k):\n        if a[i] > a[k - 1]:\n            sub_max_sum = max_sum_increasing_subseq(a, n, i, k) + a[i]\n            max_sum = max(max_sum, sub_max_sum)\n\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    # Initialize max_sum and max_ending_here\n    max_sum = float('-inf')\n    max_ending_here = 0\n    \n    # Create a list of sum of increasing subsequences\n    prefix_sum = [0] * n\n    \n    # Build the list of sum of increasing subsequences\n    for i in range(n):\n        prefix_sum[i] = max(prefix_sum[i], prefix_sum[i-1] + a[i])\n        \n        # Update the max_sum and max_ending_here for the given k\n        if i >= index and i < k:\n            max_sum = max(max_sum, prefix_sum[i] - prefix_sum[i-k])\n            max_ending_here = max(max_ending_here, prefix_sum[i] - prefix_sum[i-k])\n    \n    # Return the maximum sum of increasing subsequence\n    return max_sum"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if k > index:\n        return 0\n    if k == index:\n        return a[k]\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], a[i])\n        if dp[i] + a[i] >= dp[index] + a[k]:\n            dp[index] = dp[i] + a[i]\n    return dp[index]"
    },
    {
        "number": 306,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n\n    # Base case\n    if index == n:\n        return 0, 0, 0\n\n    # Initialize variables for prefix sum, current sum, and last element\n    prefix_sum = a[0]\n    current_sum = a[index]\n    last_element = a[index]\n\n    # Check if the last element is a part of the increasing subsequence or not\n    for i in range(index):\n        if a[i] < last_element:\n            break\n        prefix_sum += a[i]\n        current_sum += a[i]\n        if i == k - 1:\n            current_sum -= a[i]\n\n    # Recurse for remaining subsequence\n    max_sum, prefix_sum, current_sum = max_sum_increasing_subseq(a, n, index + 1, k)\n\n    # Update the maximum sum if current sum is greater\n    if current_sum > max_sum:\n        max_sum = current_sum\n        prefix_sum = prefix_sum\n        current_sum = current_sum\n\n    # Update the current sum with the last element and calculate the sum of the remaining subsequence\n    current_sum += last_element\n    remaining_sum = prefix_sum + current_sum\n\n    return max_sum, prefix_sum, remaining_sum"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    col = tuple(deepcopy(tuplex[:m]))\n    col = col + (tuplex[m],) + tuple(deepcopy(tuplex[m+1:n]))\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    row = []\n    for i in range(m):\n        row.append(deepcopy(tuplex[i]))\n    for i in range(n-1):\n        for j in range(m):\n            row[j] = (row[j][0],row[j][1])\n    for i in range(m):\n        row[i] = tuple(row[i])\n    return tuple(row)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    \"\"\"\n    col = []\n    for i in range(m):\n        col.append(tuplex[n*i])\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Create a copy of the original tuple\n    new_tuplex = deepcopy(tuplex)\n    # Split the tuple into a list of sub-lists\n    sublist = []\n    for i in range(len(new_tuplex)):\n        sublist.append([new_tuplex[i]])\n    # Combine the sub-lists into a single list\n    new_tuplex = []\n    for i in range(m):\n        for j in range(n):\n            if j < len(sublist) and i < len(sublist[j]):\n                new_tuplex.append(sublist[j][i])\n    return tuple(new_tuplex)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new_tuplex = deepcopy(tuplex)\n    for i in range(m):\n        new_tuplex = new_tuplex[0]\n    for i in range(n):\n        new_tuplex = new_tuplex[1]\n    return new_tuplex"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Copy the tuple so that the original is not changed\n    tuplex_copy = deepcopy(tuplex)\n\n    # Create a new tuple with the required length\n    colon = ()\n    for i in range(m):\n        colon += (tuplex_copy[i],)\n\n    # Remove the last element from the tuple (the last colon)\n    colon = colon[:-1]\n\n    # Add the remaining elements to the tuple\n    for i in range(m,n):\n        colon += (tuplex_copy[i],)\n\n    # Reverse the tuple\n    colon = tuple(colon[::-1])\n\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    col = deepcopy(tuplex)\n    col = col[:m] + (0,) * (n-m) + col[m:]\n    return col"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # Initialize an empty list to store the colon\n    colon_list = []\n    # Initialize variables to keep track of the current position and the total number of rows\n    i, j = 0, 0\n    # Initialize variables to keep track of the number of spaces and the total number of cols\n    spaces, total_cols = 0, 0\n    # Loop through each element in the tuple\n    for elem in tuplex:\n        # If the number of rows is equal to the current position, add a newline and reset the position\n        if j == m:\n            # Add spaces to the colon if there are any\n            colon_list.append(''* spaces)\n            # Reset the position and the number of rows\n            i, j = 0, 0\n            # Add a newline to the colon\n            colon_list.append('\\n')\n            # Increment the number of spaces\n            spaces += 1\n            # Reset the number of cols\n            total_cols = 0\n        # Add the element to the colon\n        colon_list.append(str(elem))\n        # Increment the total number of cols\n        total_cols += 1\n        # Increment the number of rows\n        j += 1\n    # Add spaces to the colon if there are any\n    colon_list.append(''* spaces)\n    # Return the colon as a string\n    return ''.join(colon_list)"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex, m, n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    tuplex_copy = deepcopy(tuplex)\n    colon = []\n    for i in range(m):\n        colon_copy = deepcopy(tuplex_copy[i])\n        for j in range(n):\n            colon_copy[j] = tuplex_copy[i][j]\n        colon.append(colon_copy)\n    return colon"
    },
    {
        "number": 307,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from copy import deepcopy\n\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # get a copy of the tuple\n    t = deepcopy(tuplex)\n\n    # get the length of the tuple\n    length = len(t)\n\n    # check if the index is valid\n    if not (0 <= m <= n <= length):\n        print(\"Invalid index\")\n        return\n\n    # get the indices of the colon\n    start = m\n    end = n-1\n\n    # check if the indices are valid\n    if not (0 <= start <= end <= length):\n        print(\"Invalid index\")\n        return\n\n    # create a colon of the tuple\n    colon = tuple(t[start:end+1])\n\n    # return the colon\n    return colon"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Find the maximum and minimum values in each list\n    max1 = max(nums1)\n    min1 = min(nums1)\n    max2 = max(nums2)\n    min2 = min(nums2)\n\n    # Find the largest product from the two lists\n    product1 = max1 * max2\n    product2 = min1 * min2\n\n    # Find the largest product that includes one factor from each list\n    largest_product = product1\n    if product2 > largest_product:\n        largest_product = product2\n\n    # Find the number of largest products to select\n    num_largest_products = 1\n    while num_largest_products < N:\n        num_largest_products *= 2\n\n    # Find the largest products\n    largest_products = [0] * num_largest_products\n    largest_products[0] = largest_product\n    for i in range(1, num_largest_products):\n        largest_products[i] = max(nums1[0] * largest_products[i-1], nums2[0] * largest_products[i-1])\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    \n    # Initialize variables to keep track of largest products\n    largest_prod1 = 0\n    largest_prod2 = 0\n    \n    # Loop through each combination of two numbers in the lists\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Calculate the product of the current pair of numbers\n            product = nums1[i] * nums2[j]\n            \n            # If the product is greater than the current largest products, update them\n            if product > largest_prod1:\n                largest_prod1 = product\n                largest_prod2 = nums1[i] * nums2[j]\n            elif product > largest_prod2:\n                largest_prod2 = product\n                largest_prod1 = nums1[i] * nums2[j]\n            \n            # If we've found the desired number of products, stop the loop\n            if i + j >= N:\n                break"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order, so that the largest products are at the beginning of the list\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the maximum products to zero\n    max_product1 = max_product2 = 0\n\n    # Loop through the first N elements of the sorted lists, computing the products of the two factors and keeping track of the maximum product\n    for i in range(N):\n        product1 = nums1[i] * nums2[i]\n        product2 = nums1[i] * nums2[N-i-1]\n        max_product1 = max(max_product1, product1)\n        max_product2 = max(max_product2, product2)\n\n    # Return the maximum products found\n    return max_product1, max_product2"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    max_products = []\n    factor = 0\n\n    # Loop through each factor from each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Compute the product of the current factor and the corresponding elements of both lists\n            product = nums1[i] * nums2[j]\n\n            # Check if the product is greater than the current max product\n            if product > max_product:\n                max_product = product\n                max_products = [nums1[i], nums2[j]]\n                factor = i\n\n    # Check if we have found the required number of max products\n    if len(max_products) == N:\n        return max_products, factor\n    else:\n        return None"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n\n    # Calculate the largest products\n    largest_products = []\n    for i in range(N):\n        largest_products.append(max(nums1[i] * nums2[i], nums1[i] * nums2[N-i-1], nums2[i] * nums1[N-i-1]))\n\n    return largest_products"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The two lists must have the same length.\")\n    if N > len(nums1) // 2:\n        raise ValueError(\"The number of products to find must be at most half of the length of the lists.\")\n\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    max_product = 0\n\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product > max_product:\n            max_product = product\n\n    return max_product"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize the result list\n    result = []\n\n    # Iterate over the range of the desired products\n    for i in range(N):\n        # Compute the product of the two selected numbers\n        product = nums1[i] * nums2[i]\n\n        # Add the product to the result list\n        result.append(product)\n\n    return result"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    # Create a list of tuples containing the products of each element from nums1 and nums2\n    product_list = [(nums1[i] * nums2[j], i, j) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Sort the list in descending order based on the products\n    product_list.sort(reverse=True)\n\n    # Return the first N products\n    return [product for product, _, _ in product_list[:N]]"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n\n    # Initialize variables to keep track of the largest products and their indices\n    largest_product1 = float('-inf')\n    largest_product2 = float('-inf')\n    index1 = -1\n    index2 = -1\n\n    # Loop through each number in the first list and check if it's larger than the current largest product\n    for i, num1 in enumerate(nums1):\n        if num1 > largest_product1:\n            largest_product1 = num1\n            index1 = i\n\n        # Check if the sum of the largest product and the current number is larger than the current largest product\n        if num1 + largest_product2 > largest_product1:\n            largest_product2 = num1 + largest_product2\n            index2 = i\n\n    # If the sum of the largest product and the current number is larger than the current largest product,\n    # loop through each number in the second list and check if it's larger than the current largest product\n    for i, num2 in enumerate(nums2):\n        if num2 > largest_product2:\n            largest_product2 = num2\n            index2 = i\n\n        # Check if the sum of the largest product and the current number is larger than the current largest product\n        if num2 + largest_product1 > largest_product2:\n            largest_product1 = num2 + largest_product1\n            index1 = i\n\n    # Check if we have found the specified number of largest products\n    if index1 == -1 or index2 == -1 or largest_product1 == float('-inf') or largest_product2 == float('-inf'):\n        return -1\n    else:\n        return (index1, index2)"
    },
    {
        "number": 308,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # Sort the two lists in descending order\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n\n    # Initialize two pointers for each list\n    i, j = 0, 0\n\n    # Initialize a variable to store the largest product\n    largest_product = float('-inf')\n\n    # Loop through the lists\n    while i < len(nums1) and j < len(nums2):\n        # Calculate the product of the two lists\n        product = nums1[i] * nums2[j]\n\n        # Update the largest product if the current product is greater\n        if product > largest_product:\n            largest_product = product\n\n        # Increment the pointers for each list\n        i += 1\n        j += 1\n\n        # If the number of products we have found is equal to the desired number, return it\n        if i >= N and j >= N:\n            return largest_product"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two arguments a and b, and returns the maximum of the two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maximum(a, b):\n    '''\n    This function takes two numbers as input and returns the maximum of those numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maximum(a, b):\n    \"\"\"\n    Returns the maximum of two numbers.\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a >= b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maximum(a, b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Use list comprehension to convert the string to a list of characters\n    lst = [char for char in str1]\n    # Convert the list to a tuple\n    t = tuple(lst)\n    return t"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert the string to a list\n    lst = list(str1)\n    # convert the list to a tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function converts a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # convert string to list of characters\n    lst = list(str1)\n    # convert list to tuple\n    tup = tuple(lst)\n    # return the tuple\n    return tup"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    This function takes a string as input and returns a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 310,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    This function sets the left most unset bit of a number.\n    '''\n    i = 0\n    while (n & (1 << i)) == 0:\n        i += 1\n    \n    n |= (1 << i)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n = n >> 1\n    n = n | (1 << 31)\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a Python function to set the left most unset bit.\n    \"\"\"\n    if n == 0:\n        return n\n\n    # Find the position of the leftmost unset bit\n    pos = 0\n    while (n & 1) == 0:\n        n >>= 1\n        pos += 1\n\n    # Set the leftmost unset bit to 1\n    n |= (1 << pos)\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # find the index of the leftmost unset bit\n    index = n.bit_length() - n.count('1') - 1\n\n    # set the left most unset bit\n    mask = (1 << index) - 1\n    return n | mask\n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n & 1 == 0:\n        n >>= 1\n    return n | (1 << (n.bit_length() - 1))"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    This function sets the left most unset bit in a given integer.\n    '''\n    \n    # initialize a variable to store the binary representation of the number\n    bin_rep = bin(n)[2:]\n\n    # iterate over each bit in the binary representation\n    for i in range(len(bin_rep)):\n        \n        # if the bit is 0, set it to 1 and move on to the next bit\n        if bin_rep[i] == '0':\n            bin_rep[i] = '1'\n            break\n        \n        # if the bit is already 1, move on to the next bit\n        else:\n            continue\n\n    # convert the binary representation back to an integer\n    int_rep = int(bin_rep, 2)\n\n    # return the integer with the left most unset bit set to 1\n    return int_rep"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # Initialize the result variable to 1 \n    result = 1\n\n    # Iterate through the binary representation of n \n    for i in range(len(bin(n)[2:])): \n        # If the i-th bit is 1, then unset the i-th bit in result \n        if bin(n)[2:].count('1') == i: \n            result = result & ~(1 << i)\n\n    return result"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n):\n    # Set the rightmost unset bit\n    while (n & 1) == 0:\n        n = n >> 1\n\n    # Set the leftmost unset bit\n    n = n | 1\n\n    return n"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # If the number is already a power of 2, there is no left most unset bit.\n    if n & (n - 1) == 0:\n        return n\n\n    # Find the bit position of the leftmost unset bit.\n    for i in range(len(bin(n)[2:])):\n        if bin(n)[2:].count(\"1\", 0, i) == 0:\n            return n | (1 << i)\n\n    # If no unset bit was found, return the maximum possible number.\n    return 2**len(bin(n)[2:]) - 1"
    },
    {
        "number": 311,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n):\n    '''\n    Write a python function to set the left most unset bit.\n    '''\n\n    # Find the first set bit in n\n    first_set_bit = n & -n\n\n    # Set the leftmost unset bit to 1\n    n = n | first_set_bit\n\n    return n"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = (1/3) * math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * (r**2) * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r ** 2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r * r * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = (1/3) * math.pi * r * r * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function calculates the volume of a cone.\n\n    Args:\n        r (float): radius of the base of the cone\n        h (float): height of the cone\n\n    Returns:\n        float: volume of the cone\n    '''\n\n    # Formula to calculate the volume of a cone\n    volume = (1/3) * math.pi * (r**2) * h\n\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes two parameters: radius r and height h.\n    It calculates the volume of a cone using the formula:\n    V = (1/3) * \u03c0 * r^2 * h.\n    '''\n    V = (1/3) * math.pi * r**2 * h\n    return V"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 312,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef volume_cone(r, h):\n    '''\n    This function takes in two parameters, r, which is the radius of the cone, and h, which is its height.\n    The function then calculates the volume of the cone using the formula: V = \u03c0r\u00b2h.\n    '''\n    volume = math.pi * r**2 * h\n    return volume"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Initialize highest power of 2 variable to 1\n    highest_power_of_2 = 1\n\n    # Loop through numbers from 2 to n\n    while highest_power_of_2 <= n:\n        # Increment highest power of 2\n        highest_power_of_2 <<= 1\n\n    # Return highest power of 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # check if n is less than 2^0\n    if n < 2:\n        return 0\n    # initialize highest power of 2 as 1\n    highest_power = 1\n    # loop until n is less than highest power of 2\n    while n >= highest_power:\n        # double highest power of 2\n        highest_power *= 2\n    # return highest power of 2\n    return highest_power"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    \n    # Initialize the highest power of 2 to 1\n    highest = 1\n    \n    # Loop through all numbers from 2 to n and check if each number is a power of 2\n    for i in range(2, n+1):\n        if i == 2**highest:\n            # If it is a power of 2, update the highest power of 2\n            highest = highest + 1\n    \n    # Return the highest power of 2\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    highest_power_of_2 = 0\n    while highest_power_of_2 * 2 <= n:\n        highest_power_of_2 *= 2\n    return highest_power_of_2"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n):\n    # Base case: if n is 1, it's already a power of 2\n    if n == 1:\n        return 1\n\n    # Binary search: if n is a power of 2, it's already at the leftmost position\n    if n & (n - 1) == 0:\n        return n\n\n    # Otherwise, we need to search for the highest power of 2 less than or equal to n\n    highest = 1\n    while highest <= n:\n        highest <<= 1\n\n    return highest"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n        # If the current bit is 1, we've found the highest power of 2 less than or equal to n\n        if n & 1 == 1:\n            return n"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    for i in range(1, n+1):\n        if i >= 1 and i == 2**i:\n            return i"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    \"\"\"\n    while n > 1:\n        n = n >> 1\n        if n == 0:\n            return 1 << (n - 1)\n    return 1"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2**highest_Power_of_2(n/2)"
    },
    {
        "number": 388,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n\n    # initialize the highest power of 2 found so far as 0\n    highest_power_of_2 = 0\n\n    # loop through all the numbers from 1 to n\n    for i in range(1, n+1): \n\n        # if the number is a power of 2, update the highest power of 2 found so far\n        if i == 1 << highest_power_of_2: \n            highest_power_of_2 += 1\n\n    # return the highest power of 2 found so far\n    return highest_power_of_2"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        prev_prev = 2\n        prev = 1\n        for i in range(2, n+1):\n            curr = prev_prev + prev\n            prev_prev = prev\n            prev = curr\n        return curr"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n    sqrt_5 = math.sqrt(5)\n    phi = (1 + sqrt_5) / 2\n    psi = (1 - sqrt_5) / 2\n    return int((phi ** n - psi ** n) / sqrt_5)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_lucas(n):\n    \"\"\"\n    This function finds the nth lucas number using recursion.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_lucas(n):\n    '''\n    Write a function to find then'th lucas number.\n    '''\n\n    # Define the first two Lucas numbers\n    a = 2\n    b = 1\n\n    # Loop through the sequence n times\n    for i in range(n):\n        # Compute the next Lucas number\n        c = a + b\n\n        # Update the values of a and b\n        a = b\n        b = c\n\n    # Return the nth Lucas number\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find then'th lucas number.\n    '''\n    # Initialize the first two numbers of the lucas sequence\n    a = 2\n    b = 1\n\n    # Calculate the nth number of the lucas sequence\n    for i in range(2, n+1):\n        c = a + b\n        a = b\n        b = c\n\n    return b"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the nth lucas number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th lucas number is:\", find_lucas(n))"
    },
    {
        "number": 389,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_lucas(n):\n    \"\"\"\n    Write a function to find then'th lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    formatted_list = []\n    for num in list_:\n        formatted_num = string.format(num)\n        formatted_list.append(formatted_num)\n    return formatted_list"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_string(lst, string):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n    \"\"\"\n    return [string.format(x) for x in lst]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string % list_[i]\n    return list_"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(x) for x in list_]"
    },
    {
        "number": 390,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    \"\"\"\n    Write a function to apply a given format string to all of the elements in a list.\n    \"\"\"\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def convert_list_dictionary(*lists):\n    \"\"\"\n    This function converts more than one list to nested dictionary.\n    \n    The function takes a variable number of lists as arguments and returns a dictionary.\n    The keys of the outer dictionary are the names of the input lists, and the \n    values of each key are the corresponding elements from the input lists.\n    \n    If one of the input lists has an odd number of elements, the remaining elements\n    will be ignored.\n    \n    Example usage:\n    >>> l1 = [1, 2, 3]\n    >>> l2 = [4, 5]\n    >>> l3 = [6, 7, 8]\n    >>> d = convert_list_dictionary(l1, l2, l3)\n    >>> print(d)\n    {'list1': [1, 2, 3], 'list2': [4, 5], 'list3': [6, 7]}\n    \"\"\"\n    if len(lists) == 0:\n        return {}\n    elif len(lists) == 1:\n        return {list(lists[0]): list(lists[0])}\n    else:\n        keys = lists[0].keys()\n        values = []\n        for l in lists[1:]:\n            if len(l) % 2 == 0:\n                values.extend(l.values())\n            else:\n                values.extend(l)\n        return {key: values for key in keys}"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = {'name': l2[i], 'age': l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Convert the first list to dictionary\n    l1_dict = {i: l1[i] for i in range(len(l1))}\n\n    # Convert the second list to dictionary\n    l2_dict = {i: l2[i] for i in range(len(l2))}\n\n    # Convert the third list to dictionary\n    l3_dict = {i: l3[i] for i in range(len(l3))}\n\n    # Combine the three dictionaries into a nested dictionary\n    nested_dict = {**l1_dict, **l2_dict, **l3_dict}\n\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # create a dictionary to store the data\n    data = {}\n    # loop through the lists and add the data to the dictionary\n    for i, lst in enumerate([l1, l2, l3]):\n        for item in lst:\n            # split the item into key and value\n            key, value = item.split(':')\n            # check if the key already exists in the dictionary\n            if key in data:\n                # if it does, append the value to the existing key\n                data[key].append(value)\n            else:\n                # if it doesn't, create a new key with a list value\n                data[key] = [value]\n    # return the final dictionary\n    return data"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n\n    Args:\n        l1: list\n        l2: list\n        l3: list\n\n    Returns:\n        dictionary: nested dictionary created from three input lists\n    '''\n\n    # initialize an empty dictionary\n    nested_dict = {}\n\n    # iterate through the three input lists\n    for i in range(len(l1)):\n        # check if the current index in l1 is a string or not\n        if isinstance(l1[i], str):\n            # if it is, add it as a key to the nested dictionary\n            nested_dict[l1[i]] = l2[i]\n        else:\n            # if it's not, create a new dictionary and add it as a key\n            # to the nested dictionary\n            new_dict = {}\n            nested_dict[str(i+1)] = new_dict\n            # iterate through the current index in l1\n            for j in range(len(l1[i])):\n                # add the value at the current index to the new dictionary\n                new_dict[l1[i][j]] = l2[i][j]\n\n    # return the nested dictionary\n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    \"\"\"\n    nested_dict = {}\n    \n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {l2[i]: l3[i]}\n        \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Initialize an empty dictionary\n    nested_dict = {}\n    \n    # Iterate through each list and add each item as a key in the dictionary\n    for item in l1:\n        nested_dict[item] = {}\n    \n    for item in l2:\n        nested_dict[item] = {}\n    \n    for item in l3:\n        nested_dict[item] = {}\n    \n    return nested_dict"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = l2[i]\n        result[l1[i]] = {key: l3[i][key] for key in l3[i]}\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        if l3:\n            value = {k: v for k, v in zip(l3[i], value)}\n        result[key] = value\n    return result"
    },
    {
        "number": 391,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    # Create an empty dictionary to store the nested dictionary\n    nested_dict = {}\n\n    # Loop through the first list and create the nested dictionary\n    for i in range(len(l1)):\n        nested_dict[l1[i]] = {}\n        for j in range(len(l2)):\n            nested_dict[l1[i]][l2[j]] = l3[i][j]\n\n    return nested_dict"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5) + n\n    else:\n        return get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case: if n is 1, return 1\n    if n == 1:\n        return 1\n\n    # Recursive case: calculate f(n/2), f(n/3), f(n/4), and f(n/5)\n    a = get_max_sum(n//2)\n    b = get_max_sum(n//3)\n    c = get_max_sum(n//4)\n    d = get_max_sum(n//5)\n\n    # Calculate f(n)\n    max_sum = max(a + b + c + d, n)\n\n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Initialize the sum\n    max_sum = 0\n    \n    # Calculate the sum for 1, 2, 3, 4, 5\n    max_sum += n\n    \n    # Calculate the sum for 1, 2, 4, 5\n    max_sum += n/2\n    \n    # Calculate the sum for 1, 3, 4, 5\n    max_sum += n/2 + n/3\n    \n    # Calculate the sum for 1, 2, 4, 5, 6\n    max_sum += n/3 + n/4\n    \n    # Calculate the sum for 1, 2, 4, 5, 6, 7\n    max_sum += n/4 + n/5\n    \n    # Return the maximum sum\n    return max_sum"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base case\n    if n == 1:\n        return 1\n    \n    # recursive case\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) + n, n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Base case: If n is 1, the maximum sum is just n.\n    if n == 1:\n        return n\n    \n    # Recursive case: Calculate the maximum sum by considering n and n/2.\n    left_sum = get_max_sum(n/2) + n\n    \n    # Calculate the maximum sum by considering n, n/2, n/3, n/4, and n/5.\n    right_sum = max(get_max_sum(n/3) + n,\n                   get_max_sum(n/4) + n,\n                   get_max_sum(n/5) + n,\n                   n)\n    \n    # Return the maximum sum.\n    return max(left_sum, right_sum)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_max_sum(n):\n    if n == 1:\n        return n\n    else:\n        return max((get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)), n)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n\n    # Base case\n    if n == 1:\n        return n\n\n    # Recursive case\n    else:\n        # Calculate the sum of the first 4 terms of the sequence\n        sum1 = get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n\n        # Calculate the sum of the remaining terms\n        sum2 = n\n\n        # Return the maximum sum\n        return max(sum1, sum2)"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        if n == 1:\n            return n\n        else:\n            return max(f(n//2) + f(n//3) + f(n//4) + f(n//5), n)\n\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_max_sum(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 3\n    elif n == 3:\n        return 10\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n            max_list = [i]\n        elif len(i) == max_length:\n            max_list.append(i)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    max_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_list = [input_list[i]]\n        elif len(input_list[i]) == max_len:\n            max_list.append(input_list[i])\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(str(item)) > max_length:\n            max_length = len(str(item))\n            max_list = [item]\n        elif len(str(item)) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length.\n    \"\"\"\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    \n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    \n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    result = None\n\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            result = item\n\n    return result"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # Find the maximum length of the list\n    max_len = 0\n    for item in input_list:\n        if len(str(item)) > max_len:\n            max_len = len(str(item))\n    \n    # Create a new list with the maximum length\n    max_list = []\n    for item in input_list:\n        if len(str(item)) == max_len:\n            max_list.append(item)\n    \n    # Return the new list\n    return max_list"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # initialize variables for length and index of longest list\n    max_length = 0\n    max_index = None\n    \n    # loop through each list in input_list\n    for index, list in enumerate(input_list):\n        # calculate length of current list\n        current_length = len(list)\n        \n        # if current list is longer than longest list found so far, update variables\n        if current_length > max_length:\n            max_length = current_length\n            max_index = index\n    \n    # return longest list based on index of longest list\n    return input_list[max_index]"
    },
    {
        "number": 393,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    max_list = []\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n            max_list = [item]\n        elif len(item) == max_length:\n            max_list.append(item)\n    return max_list"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    seen = set()\n    for elem in test_tup:\n        if elem in seen:\n            return False\n        seen.add(elem)\n    return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # Convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # Check if the length of the set is equal to the length of the original tuple\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_set = set(test_tup)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple contains no duplicates.\n    \"\"\"\n    return len(test_tup) == len(set(test_tup))"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup)!= len(set(test_tup)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    unique_elements = set(test_tup)\n    if len(unique_elements) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 394,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # convert the tuple to a set to remove duplicates\n    test_set = set(test_tup)\n    # check if the set is empty (i.e. contains no duplicates)\n    if len(test_set) == len(test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in char_count:\n        if char_count[char] == 1:\n            return char\n    \n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # loop through the string and update the count in the dictionary\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n            \n    # loop through the string again and return the first non-repeating character\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n        \n    # if there are no non-repeating characters, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {}\n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_count = {} # create an empty dictionary to store the count of each character in the string\n    \n    for char in str1:\n        if char in char_count: # if the character is already in the dictionary, increment its count by 1\n            char_count[char] += 1\n        else: # if the character is not in the dictionary, add it with a count of 1\n            char_count[char] = 1\n    \n    # find the first non-repeated character and return its index\n    for i in range(len(str1)):\n        if char_count[str1[i]] == 1: # if the count of the current character is 1, return its index\n            return i\n    \n    # if no non-repeated character is found, return -1\n    return -1"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n\n    # create a dictionary to store the characters and their frequencies\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] += 1\n        else:\n            freq_dict[char] = 1\n\n    # loop through the characters and find the first non-repeating character\n    for char in str1:\n        if freq_dict[char] == 1:\n            return char\n\n    # if no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Convert the string to a set to get unique characters\n    char_set = set(str1)\n    \n    # Find the first non-repeating character in the set\n    for char in char_set:\n        if str1.count(char) == 1:\n            return char\n    \n    # If no non-repeating character is found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char, count in char_count.items():\n        if count == 1:\n            return char\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq_dict = {}\n    for char in str1:\n        freq_dict[char] = freq_dict.get(char, 0) + 1\n\n    # Find the first character with a frequency of 1 (i.e. the first non-repeating character)\n    for char in freq_dict:\n        if freq_dict[char] == 1:\n            return char\n\n    # If no non-repeating characters are found, return None\n    return None"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        if char in char_dict:\n            del char_dict[char]\n        else:\n            char_dict[char] = True\n    return list(char_dict.keys())[0]"
    },
    {
        "number": 395,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    \"\"\"\n    # convert the string to a set to remove duplicates\n    unique_chars = set(str1)\n    # check if the length of the set is equal to the length of the string\n    if len(unique_chars) == len(str1):\n        # return the first character in the set\n        return list(unique_chars)[0]\n    # if the length is not equal, there are no non-repeating characters\n    else:\n        return None"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string)!= None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # Use re.match() method to check if the string matches the regex pattern\n    match = re.match(regex, string)\n    \n    # If the string matches the pattern, return True\n    if match:\n        return True\n    \n    # If the string doesn't match the pattern, return False\n    return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n\n    match = re.match(regex, string)\n\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\nregex = r'^[a-z]$|^([a-z]).*\\1$'\n\ndef check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not.\n    \"\"\"\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 396,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef check_char(string):\n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^[a-z]$|^([a-z]).*\\1$'\n    match = re.search(pattern, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the median\n    median = (sorted_nums[1] + sorted_nums[2]) / 2\n    \n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    middle_index = len(sorted_numbers) // 2\n    return sorted_numbers[middle_index]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    sorted_nums = sorted([a, b, c])\n\n    # Calculate the length of the sorted array\n    length = len(sorted_nums)\n\n    # Determine if the median is the first, middle, or last element of the sorted array\n    if length % 2 == 0:\n        median = (sorted_nums[length//2 - 1] + sorted_nums[length//2]) / 2\n    else:\n        median = sorted_nums[length//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n\n    # Sort the three numbers in ascending order\n    numbers = [a, b, c]\n    numbers.sort()\n\n    # Calculate the middle number of the three numbers\n    middle = (numbers[1] + numbers[2]) / 2\n\n    # Determine if the middle number is the median or not\n    if middle == numbers[1]:\n        median = numbers[1]\n    else:\n        median = numbers[0]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_numbers = sorted([a, b, c])\n    n = len(sorted_numbers)\n\n    if n % 2 == 0:\n        median = (sorted_numbers[n//2 - 1] + sorted_numbers[n//2]) / 2\n    else:\n        median = sorted_numbers[n//2]\n\n    return median"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    middle = len(sorted_numbers) // 2\n    if len(sorted_numbers) % 2 == 0:\n        return (sorted_numbers[middle - 1] + sorted_numbers[middle]) / 2\n    else:\n        return sorted_numbers[middle]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the three numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Find the middle index\n    mid = len(sorted_numbers) // 2\n\n    # Find the middle numbers\n    if len(sorted_numbers) % 2 == 0:\n        median_1 = (sorted_numbers[mid-1] + sorted_numbers[mid]) / 2\n    else:\n        median_1 = sorted_numbers[mid]\n\n    # Return the median\n    return median_1"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import random\n\ndef quickselect(arr, k):\n    if len(arr) == 1:\n        return arr[0]\n    pivot = random.choice(arr)\n    lows = [el for el in arr if el < pivot]\n    highs = [el for el in arr if el > pivot]\n    pivots = [el for el in arr if el == pivot]\n    if k < len(lows):\n        return quickselect(lows, k)\n    elif k < len(lows) + len(pivots):\n        return pivots[0]\n    else:\n        return quickselect(highs, k - len(lows) - len(pivots))\n\ndef median_numbers(a, b, c):\n    arr = [a, b, c]\n    arr.sort()\n    n = len(arr)\n    k = n // 2\n    return quickselect(arr, k)"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_numbers(a, b, c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    mid = len(numbers) // 2\n    if len(numbers) % 2 == 0:\n        return (numbers[mid - 1] + numbers[mid]) / 2\n    else:\n        return numbers[mid]"
    },
    {
        "number": 397,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Calculate the middle number\n    middle_index = len(sorted_numbers) // 2\n    middle_number = sorted_numbers[middle_index]\n\n    # Calculate the median\n    if len(sorted_numbers) % 2 == 0:\n        # If the number of numbers is even, the median is the average of the two middle numbers\n        median = (sorted_numbers[middle_index - 1] + sorted_numbers[middle_index]) / 2\n    else:\n        # If the number of numbers is odd, the median is the middle number\n        median = sorted_numbers[middle_index]\n\n    # Return the median\n    return median"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(d) for d in str(num)]\n        total = sum(digits)\n        result.append(total)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        digits = []\n        while num > 0:\n            digits.append(num % 10)\n            num //= 10\n        sum_of_digits.append(sum(digits))\n    return sum_of_digits"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total_sum = 0\n    for num in nums:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        num_str = str(num)\n        result += sum(int(digit) for digit in num_str)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    total = 0\n    for num in nums:\n        total += sum(int(digit) for digit in str(num))\n    return total"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n        total_digits = sum(digits)\n        result.append(total_digits)\n    return result"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    digit_sum = 0\n    for num in nums:\n        digit_sum += sum(map(int, str(num)))\n    return digit_sum"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    \"\"\"\n    sum_list = []\n    for num in nums:\n        digits_sum = 0\n        for digit in str(num):\n            digits_sum += int(digit)\n        sum_list.append(digits_sum)\n    return sum_list"
    },
    {
        "number": 398,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = []\n    for num in nums:\n        sum_num = 0\n        for digit in str(num):\n            sum_num += int(digit)\n        result.append(sum_num)\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    \"\"\"\n    xor_result = 0\n    for i in range(min(len(test_tup1), len(test_tup2))):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    return xor_result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(x ^ y for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Check if the tuples have the same number of elements\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must have the same number of elements\")\n\n    # Initialize the result tuple with the same length as the first tuple\n    result_tup = tuple(0 for _ in range(len(test_tup1)))\n\n    # Perform the mathematical bitwise xor operation on each pair of elements of the tuples\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] ^ test_tup2[i]\n\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = tuple()\n    for i in range(len(test_tup1)):\n        result += (test_tup1[i] ^ test_tup2[i])\n    return result"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return tuple(bin(x ^ y)[2:].zfill(8) for x, y in zip(test_tup1, test_tup2))"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # Initialize the result tuple\n    result_tup = ()\n    \n    # Perform bitwise xor operation for each element of the input tuples\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] ^ test_tup2[i],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # unpacking the tuples\n    t1, t2 = test_tup1\n    # initializing the result tuple\n    result_tup = ()\n    # iterating over the first tuple and applying the bitwise xor operation to each element\n    for i in range(len(t1)):\n        result_tup += (t1[i] ^ t2[i],)\n    # returning the result tuple\n    return result_tup"
    },
    {
        "number": 399,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_result = 0\n    \n    for i in range(len(test_tup1)):\n        xor_result ^= test_tup1[i] ^ test_tup2[i]\n    \n    return xor_result"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for elem in test_list:\n        if elem not in freq_dict:\n            freq_dict[elem] = 1\n        else:\n            freq_dict[elem] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for elem in test_list:\n        if (elem,) not in freq:\n            freq[(elem,)] = 1\n        else:\n            freq[(elem,)] += 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item not in freq_dict:\n            freq_dict[item] = 1\n        else:\n            freq_dict[item] += 1\n    return len(freq_dict)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty set to store unique tuples\n    unique_set = set()\n    # iterate through the list of tuples\n    for tup in test_list:\n        # add each unique tuple to the set\n        unique_set.add(tup)\n    # return the number of unique tuples\n    return len(unique_set)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for item in test_list:\n        if item not in unique_tuples:\n            unique_tuples.add(item)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return len(freq_dict)\n"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for item in test_list:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return len(freq)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuples = set()\n    for tup in test_list:\n        if tup not in unique_tuples:\n            unique_tuples.add(tup)\n    return len(unique_tuples)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    from collections import Counter\n    \n    # Count the frequency of each tuple in the list\n    freq_count = Counter(test_list)\n    \n    # Return the number of unique tuples\n    return len(freq_count)"
    },
    {
        "number": 400,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_freq = {}\n    for item in test_list:\n        if tuple(item) in unique_freq:\n            unique_freq[tuple(item)] += 1\n        else:\n            unique_freq[tuple(item)] = 1\n    return len(unique_freq)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        result_tup.append(test_tup1[i] + test_tup2[i])\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            test_tup1[i][j] += test_tup2[i][j]\n    return test_tup1"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize the result tuple with length of first tuple\n    result_tup = tuple([0] * len(test_tup1))\n\n    # iterate over each element of the first tuple and add its corresponding element of the second tuple to the result tuple\n    for i in range(len(test_tup1)):\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    \"\"\"\n    # Initialize a new empty tuple\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Check if the current element is a tuple or not\n        if isinstance(test_tup1[i], tuple):\n            # If it is, then recursively call the function and append the result to the result list\n            result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            # If it's not a tuple, simply add the elements of the two tuples and append the result to the result list\n            result.append(test_tup1[i] + test_tup2[i])\n    # Return the resulting tuple\n    return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result_tup = [0] * len(test_tup1)\n    for i in range(len(test_tup1)):\n        # Add the corresponding elements of the two tuples\n        result_tup[i] = test_tup1[i] + test_tup2[i]\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # initialize an empty result tuple\n    result_tup = ()\n\n    # loop through each element in the first tuple\n    for i in range(len(test_tup1)):\n        # loop through each element in the second tuple\n        for j in range(len(test_tup2[i])):\n            # add the corresponding elements of the two tuples\n            result_tup += (test_tup1[i][j] + test_tup2[i][j],)\n\n    # return the result tuple\n    return result_tup"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize a 2D list to store the sum of each element of the two tuples\n    result = [[0 for _ in range(len(test_tup2[0]))] for _ in range(len(test_tup1))]\n\n    # Iterate through the 2D list and add the corresponding elements of the two tuples\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2[0])):\n            result[i][j] = test_tup1[i][j] + test_tup2[i][j]\n\n    # Return the result as a nested tuple\n    return tuple(tuple(row) for row in result)\n"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    # Initialize the result list\n    result = []\n    # Loop through each element of the first tuple\n    for i in range(len(test_tup1)):\n        # Initialize the current sum\n        current_sum = 0\n        # Loop through each element of the second tuple\n        for j in range(len(test_tup2[i])):\n            # Add the current element of the first tuple to the current sum of the second tuple\n            current_sum += test_tup1[i][j]\n        # Append the current sum to the result list\n        result.append(current_sum)\n    # Return the result list\n    return result"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Length of the first tuple does not match with the length of the second tuple\")\n        return None\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            elif type(test_tup1[i]) == tuple and type(test_tup2[i]) == list:\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            elif type(test_tup1[i]) == list and type(test_tup2[i]) == tuple:\n                result.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n            else:\n                result.append(test_tup1[i] + test_tup2[i])\n        return tuple(result)"
    },
    {
        "number": 401,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] + test_tup2[i])\n    return result"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as inputs and returns the minimum of them.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def minimum(a, b):\n    '''\n    This function takes two numbers as input and returns the minimum of those numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum.\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 404,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def minimum(a, b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True \n    else: \n        return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1):\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    \"\"\"\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex: \n        return True \n    else: \n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function checks whether an element exists within a tuple.\n    '''\n    # loop through the tuple1 and check if it's in tuplex\n    for element in tuple1:\n        if element in tuplex:\n            return True\n    # if we make it through the loop without finding an element, return False\n    return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex, tuple1): \n    '''\n    This function takes two parameters: a tuple to check for elements within, and another tuple.\n    The function checks if each element in the first tuple exists in the second tuple, and returns a boolean value.\n    '''\n    for element in tuplex: \n        if element in tuple1: \n            return True \n    return False "
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex, tuple1):\n    '''\n    This function takes two tuples as input and checks if an element exists within the second tuple.\n    If an element exists within the second tuple, the function returns True. If the element does not exist, it returns False.\n    '''\n    if tuplex in tuple1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 405,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x in tuple1:\n            return True\n    return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = x % 2 \n    if parity == 0: \n        return False \n    else: \n        return True "
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd or even.\n    '''\n    if x % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'The number is even.'\n    else:\n        return 'The number is odd.'\n"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False \n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return \"The number is even.\"\n    else:\n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return \"The number is even.\"\n    else: \n        return \"The number is odd.\""
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Parity(x):\n    \"\"\"\n    This function takes a number x as input and returns True if the parity of the number is odd, and False otherwise.\n    \"\"\"\n    if x%2!=0: # checks if the remainder of x divided by 2 is not 0\n        return True\n    else:\n        return False"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0: \n        return False\n    else: \n        return True"
    },
    {
        "number": 406,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return 'Even'\n    else:\n        return 'Odd'"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # convert the given number to a string\n    num_str = str(n)\n    \n    # sort the string digits in descending order\n    sorted_str = sorted(num_str, reverse=True)\n    \n    # create a new number by concatenating the sorted digits\n    new_num = int(''.join(sorted_str))\n    \n    # return the new number\n    return new_num"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert the given number to a string\n    number = str(n)\n    # convert the string to a list of digits\n    digits = list(number)\n    # create a list to store the digits in the new order\n    new_digits = []\n    # loop through each digit and append it to the new_digits list in the correct order\n    for digit in digits:\n        # if the digit is smaller than 5, append it to the end of the new_digits list\n        if int(digit) < 5:\n            new_digits.append(digit)\n        # if the digit is larger than or equal to 5, append it to the beginning of the new_digits list\n        else:\n            new_digits.insert(0, digit)\n    # convert the new_digits list to a string and convert it back to an integer\n    result = int(''.join(new_digits))\n    # return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = [int(digit) for digit in str(n)]\n    digits.sort(reverse=True)\n    new_number = 0\n    for digit in digits:\n        new_number += digit * (9**i)\n        i += 1\n    return new_number"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # convert the number to a string\n    num_str = str(n)\n    \n    # check if the original number is a power of 10\n    if int(num_str) == n:\n        return n\n    \n    # find the position of the first digit that is greater than 1\n    for i in range(len(num_str)):\n        if int(num_str[i]) > 1:\n            pos = i\n            break\n    \n    # if the first digit is the last digit, we need to move it to the end\n    if pos == len(num_str) - 1:\n        num_str = num_str[:pos] + num_str[pos+1:]\n        pos = len(num_str) - 1\n    \n    # move the digits to the left of the first digit in reverse order\n    for i in range(pos, len(num_str)-1):\n        num_str = num_str[:i] + num_str[i+1] + num_str[i]\n    \n    # convert the string back to an integer and return it\n    return int(num_str)"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # convert number to string\n    s = str(n)\n    # find the largest digit\n    max_digit = max(s)\n    # find the index of that digit\n    index = s.index(max_digit)\n    # swap the digit at index with the first digit\n    s = s[:index] + s[index] + s[index+1:]\n    # convert the string back to an integer\n    result = int(s)\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    digits = list(str(n))\n    # Find the index of the smallest digit\n    smallest_digit_index = digits.index(min(digits))\n    # Swap the smallest digit with the last digit\n    digits[smallest_digit_index], digits[-1] = digits[-1], digits[smallest_digit_index]\n    # Reverse the digits after the smallest digit\n    digits = digits[smallest_digit_index + 1:] + digits[:smallest_digit_index + 1]\n    # Convert the digits back to an integer and add 1\n    next_bigger = int(\"\".join(digits)) + 1\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # create a dictionary to map each digit to its position in the number\n    digit_map = {\n        '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9\n    }\n    # create a list of digits of the number\n    digits = str(n)\n    # sort the digits in descending order\n    digits_sorted = sorted(digits, reverse=True)\n    # create an empty string to store the rearranged digits\n    rearranged_digits = ''\n    # loop through the sorted digits and add them to the rearranged string\n    for digit in digits_sorted:\n        rearranged_digits += digit_map[digit]\n    # convert the rearranged string to an integer and add 1 to it\n    next_bigger = int(rearranged_digits) + 1\n    # return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Reverse the digits of the number\n    reversed_num = str(n)[::-1]\n    \n    # Initialize the result variable\n    result = 0\n    \n    # Iterate over the digits of the reversed number and append the last digit to the result\n    for digit in reversed_num:\n        result = result * 10 + int(digit)\n    \n    # Increment the result by 1 to get the next bigger number\n    result += 1\n    \n    # Return the result\n    return result"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    \n    # Convert the given number to a string and reverse it\n    reversed_str = str(n)[::-1]\n    \n    # Initialize a variable to store the next bigger number\n    next_bigger = 0\n    \n    # Iterate through each digit of the reversed string\n    for digit in reversed_str:\n        \n        # Convert the digit to an integer and add it to the next bigger number\n        next_bigger += int(digit)\n        \n        # Check if the next bigger number is greater than the given number\n        if next_bigger > n:\n            \n            # Break out of the loop because the next bigger number is greater than the given number\n            break\n            \n    # Return the next bigger number\n    return next_bigger"
    },
    {
        "number": 407,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    \"\"\"\n    # Initialize variables\n    digits = list(str(n))\n    max_digit = max(digits)\n    \n    # Find the next bigger number\n    for i in range(max_digit, 0, -1):\n        if digits.count(str(i)) > 0:\n            new_digits = digits.copy()\n            new_digits.remove(str(i))\n            new_digits.append(str(i))\n            next_bigger = int(''.join(new_digits))\n            return next_bigger\n    \n    # If there is no next bigger number, return None\n    return None"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Sort both arrays\n    nums1.sort()\n    nums2.sort()\n    # Initialize a priority queue (heap) with the first element of each array\n    heapq.heappush(nums1, -heapq.heappop(nums1))\n    heapq.heappush(nums2, -heapq.heappop(nums2))\n    # Initialize a list to store the pairs\n    pairs = []\n    # Loop until we have found k pairs\n    while k > 0:\n        # Find the minimum element from each array and add it to the list of pairs\n        if -heapq.heappop(nums1) < -heapq.heappop(nums2):\n            pairs.append([nums1[0], nums2[0]])\n        else:\n            pairs.append([nums1[0], nums2[1]])\n        # Decrement k and update the priority queue\n        k -= 1\n        heapq.heappush(nums1, -heapq.heappop(nums1))\n        heapq.heappush(nums2, -heapq.heappop(nums2))\n    return pairs"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Build the min heap of first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n\n    # Initialize result list\n    result = []\n\n    # Find k smallest pairs\n    for _ in range(k):\n        # Pop the smallest element from both heaps\n        num1, num2 = heapq.heappop(min_heap), heapq.heappop(min_heap)\n\n        # Check if the sum is already present in the result list\n        if num1 + num2 in result:\n            continue\n\n        # Add the sum to the result list\n        result.append((num1, num2))\n\n        # Push the larger element from the first heap to the second heap\n        if num1 < num2:\n            heapq.heappush(min_heap, num2)\n        else:\n            heapq.heappush(min_heap, num1)\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n\n    # Create a min heap to store the pairs\n    pairs = []\n\n    # Iterate over both arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # Check if the current pair satisfies the condition\n            if i+j <= k and nums1[i] + nums2[j] < nums1[i] * nums2[j]:\n                # Add the current pair to the heap\n                heapq.heappush(pairs, (nums1[i] + nums2[j], (i, j)))\n\n    # Sort the pairs based on the first element of each pair\n    pairs.sort()\n\n    # Return the k number of smallest pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # create a min heap with the minimum element of the first array\n    min_heap = []\n    for num in nums1:\n        heapq.heappush(min_heap, num)\n    \n    # create a second min heap with the minimum element of the second array\n    second_min_heap = []\n    for num in nums2:\n        if not second_min_heap or heapq.heappop(second_min_heap) > num:\n            heapq.heappush(second_min_heap, num)\n    \n    # use a list to store the k smallest pairs\n    result = []\n    while k > 0 and min_heap and second_min_heap:\n        if min_heap[0] <= second_min_heap[0]:\n            if k == 1:\n                result.append([heapq.heappop(min_heap), heapq.heappop(second_min_heap)])\n                break\n            else:\n                k -= 1\n                heapq.heappop(min_heap)\n        else:\n            if k == 1:\n                result.append([heapq.heappop(second_min_heap), heapq.heappop(min_heap)])\n                break\n            else:\n                k -= 1\n                heapq.heappop(second_min_heap)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # sort the array\n    nums1.sort()\n    nums2.sort()\n    \n    # create a min heap to store the pairs\n    heap = []\n    \n    # iterate through the arrays\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            # calculate the sum of the elements\n            sum_ = nums1[i] + nums2[j]\n            \n            # add the pair to the heap\n            if len(heap) < k:\n                heapq.heappush(heap, (sum_, i, j))\n            # update the pair if it is smaller than the smallest element in the heap\n            elif sum_ < heap[0][0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap, (sum_, i, j))\n    \n    # extract the pairs from the heap\n    result = []\n    while heap:\n        sum_, i, j = heapq.heappop(heap)\n        result.append([nums1[i], nums2[j]])\n        \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    # Sort the two arrays\n    nums1.sort()\n    nums2.sort()\n\n    # Initialize the result list\n    result = []\n\n    # Initialize the max heap and the min heap\n    max_heap = []\n    min_heap = []\n\n    # Iterate through the first array\n    for num1 in nums1:\n        # Remove the smallest element from the min heap\n        heapq.heappop(min_heap)\n        # Add the current element to the max heap\n        heapq.heappush(max_heap, num1)\n\n        # Check if the k pairs are found\n        if len(result) == k:\n            break\n\n        # Add the largest element from the max heap to the result list\n        result.append(heapq.heappop(max_heap))\n\n        # Add the second smallest element from the min heap to the result list\n        result.append(heapq.heappop(min_heap))\n\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create a min heap to store the pairs and their indices\n    heap = [(float('inf'), (i, j)) for i in range(len(nums1)) for j in range(len(nums2))]\n    heapq.heapify(heap)\n\n    # Iterate through the first array and for each element, check if there are k pairs in the min heap that can be formed with that element\n    for i in range(len(nums1)):\n        # Find the k smallest pairs in the heap that are formed with the current element\n        pairs = heapq.nsmallest(k, heap, key=lambda x: (x[0], -nums1[i]))\n\n        # Pop the pairs from the heap and add them to the result list\n        result = []\n        for _ in range(k):\n            pair = heapq.heappop(pairs)\n            result.append(pair[1:])\n\n        # Add the formed pairs to the heap to get the next k smallest pairs\n        for pair in result:\n            # Calculate the distance between the elements in the pair\n            dist = abs(nums1[i] - pair[0]) + abs(nums2[pair[1]] - pair[0])\n            heapq.heappush(heap, (-dist, pair))\n\n    # Return the result list\n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Create a min heap with the elements of nums2 and their indices\n    min_heap = [(nums2[i], i) for i in range(len(nums2))]\n    heapq.heapify(min_heap)\n    \n    # Initialize the result list\n    result = []\n    \n    # Iterate over the first array\n    for num1 in nums1:\n        # If there are more elements in the min heap than k, remove the smallest one\n        while len(result) < k:\n            if len(min_heap) == 0:\n                break\n            heapq.heappop(min_heap)\n        \n        # If there are still elements in the min heap, update the result list\n        if len(min_heap) > 0:\n            pair = (num1, min_heap[0][0])\n            result.append(pair)\n    \n    return result"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # create a list of tuples containing (difference between each element in nums1 and nums2, index)\n    pairs = [(abs(num1 - num2), i) for i in range(len(nums1)) for num1 in nums1 for num2 in nums2]\n    # sort the list based on the difference\n    pairs.sort()\n    # return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 408,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    \"\"\"\n    # Combine the two arrays in a list of pairs\n    pairs = [(nums1[i], nums2[j]) for i in range(len(nums1)) for j in range(len(nums2))]\n\n    # Sort the pairs by their first element in non-decreasing order\n    pairs.sort(key=lambda p: p[0])\n\n    # Return the first k pairs\n    return pairs[:k]"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Initialize variables to store the minimum product and the tuple with minimum product\n    min_prod = float('inf')\n    min_tuple = None\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the first element of the tuple and the product of the second element of the tuple\n            prod = list1[i][0] * list1[j][1]\n            # If the product is less than the current minimum product, update the minimum product and the tuple with minimum product\n            if prod < min_prod:\n                min_prod = prod\n                min_tuple = (list1[i], list1[j])\n    return min_tuple"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to infinity\n    min_product = float('inf')\n\n    # Loop through the list of tuples\n    for i in range(len(list1)):\n        # Loop through the remaining tuples\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the two tuples and compare it to the current minimum product\n            product = tuple_product(list1[i], list1[j])\n            if product < min_product:\n                min_product = product\n\n    return min_product\n\ndef tuple_product(tuple1, tuple2):\n    '''\n    Calculate the product of two tuples.\n    '''\n    product = 1\n    for i in range(len(tuple1)):\n        product *= tuple1[i] * tuple2[i]\n    return product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    minimum = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][1] * list1[j][1]\n            if product < minimum:\n                minimum = product\n    return minimum"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][0] * list1[i][1] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = 1\n            for k in range(len(list1[i])):\n                product *= list1[i][k] * list1[j][k]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1 = sorted(list1, key=lambda x: x[0]*x[1])\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n\n    # Initialize the minimum product to be positive infinity\n    min_product = float('inf')\n\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            # Calculate the product of the tuples\n            product = list1[i][0] * list1[j][1]\n\n            # Check if the current product is less than the minimum product\n            if product < min_product:\n                min_product = product\n\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            product = list1[i][0] * list1[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # initialize the minimum product to be the first element of the list\n    min_product = list1[0]\n    # initialize the product of the first two elements of the list\n    product = list1[0] * list1[1]\n    # loop through the list starting from the second element\n    for i in range(1, len(list1)):\n        # update the minimum product if the current element is smaller\n        if list1[i] < min_product:\n            min_product = list1[i]\n        # update the product if the current element has a smaller value\n        product = min(product, list1[i] * list1[i + 1])\n    return min_product"
    },
    {
        "number": 409,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    \"\"\"\n    # Initialize variables\n    min_product = float('inf')\n    product = 1\n\n    # Iterate through each tuple in the list\n    for i in range(len(list1)):\n        # Calculate the product of the current tuple and the current index\n        product = product * (i+1)\n\n        # Calculate the minimum product\n        if product < min_product:\n            min_product = product\n\n    # Return the minimum product\n    return min_product"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n\n    # Check if the input list is empty or not\n    if not listval:\n        return None\n\n    # Initialize the minimum value to the first element of the list\n    min_val = listval[0]\n\n    # Loop through the list and compare each element to the minimum value\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_val(listval):\n    \"\"\"\n    This function takes a list of values as input and returns the minimum value.\n    \"\"\"\n    if len(listval) == 0:\n        return None\n    else:\n        return min(listval)"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if i < min_val:\n            min_val = i\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise ValueError('List is empty')\n\n    min_val = listval[0]\n    for val in listval:\n        if val < min_val:\n            min_val = val\n\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] < min_num:\n            min_num = listval[i]\n    return min_num"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # Initialize the minimum value variable\n    min_val = float('inf')\n\n    # Iterate over the list and compare each element with the current minimum value\n    for i in listval:\n        if type(i)!= type(min_val):\n            # If the element is not of the same type as the current minimum value, set the minimum value to that element\n            min_val = i\n        elif type(i) == type(min_val):\n            # If the element is of the same type as the current minimum value, compare it with the current minimum value\n            if i < min_val:\n                # If the current element is smaller than the current minimum value, set the minimum value to that element\n                min_val = i\n\n    # Return the minimum value found\n    return min_val"
    },
    {
        "number": 410,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string.\n    \"\"\"\n    return re.sub('_(.)', lambda match: match.group(1).upper(), word)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef snake_to_camel(word):\n    \"\"\"\n    Convert a snake_case string to camelCase.\n    \"\"\"\n    words = word.split('_')\n    camel_case_word = words[0]\n    for i in range(1, len(words)):\n        camel_case_word += words[i][0].upper() + words[i][1:]\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove the underscores from the word\n    camel_case_word = re.sub('_', '', word)\n    # capitalize the first letter of each word\n    words = camel_case_word.split('_')\n    camel_case_words = []\n    for word in words:\n        camel_case_words.append(word.capitalize())\n    # join the words with underscores\n    return ''.join(camel_case_words)"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Remove leading and trailing underscores\n    word = re.sub('^_|_$', '', word)\n    # Convert underscores to camel case\n    parts = word.split('_')\n    camel_case_word = parts[0]\n    for part in parts[1:]:\n        camel_case_word += part.capitalize()\n    return camel_case_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # convert snake case to camel case\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = re.findall(r'_[a-z]', word)\n    camel_word = ''.join([word[i].upper() for i in range(len(word)) if i!= 0])\n    for word in words:\n        camel_word = camel_word + '_' + word[1:]\n    return camel_word"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # remove underscores from the word\n    word = re.sub('_', '', word)\n    # capitalize the first letter of each word\n    camel_case_word = word.capitalize()\n    # join the words with underscores to form the camel case string\n    camel_case_string = ''.join(camel_case_word.split('_'))\n    return camel_case_string"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = ''\n    for i, char in enumerate(word):\n        if i == 0:\n            camel_case += char.lower()\n        elif char.isupper():\n            camel_case += '_' + char.lower()\n        else:\n            camel_case += char\n    return camel_case"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    camel_case = re.sub('_(.)', lambda x: x.group(1).upper(), word)\n    return camel_case\n"
    },
    {
        "number": 411,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Split the word into words using the '_' as the delimiter\n    words = word.split('_')\n\n    # Convert the first word to uppercase and remove the delimiter\n    result = words[0].upper()\n    for i in range(1, len(words)):\n        # If the next word starts with an uppercase letter, add an uppercase letter to the result\n        if words[i][0].isupper():\n            result += words[i][0].upper()\n        # Add the rest of the word to the result\n        else:\n            result += words[i]\n\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n\n    Parameters:\n    l (list): A list of integers.\n\n    Returns:\n    list: A new list with all odd numbers removed from the input list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2!= 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [x for x in l if x % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return [num for num in l if num % 2 == 0]"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    odd_numbers = [num for num in l if num % 2!= 0]\n    return odd_numbers"
    },
    {
        "number": 412,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) < n:\n        return None\n    else:\n        return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    \"\"\"\n    # Initialize a variable to store the extracted element\n    extracted_element = None\n    \n    # Loop through the list of tuples\n    for tup in list1:\n        # Check if the current tuple has the nth element\n        if len(tup) == n:\n            # If it does, set the extracted element to the current tuple\n            extracted_element = tup[n-1]\n            # Break out of the loop\n            break\n    \n    # Return the extracted element\n    return extracted_element"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        index = n-1\n        return list1[index]\n    except IndexError:\n        return \"Index out of range\""
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if type(list1)!= list:\n        print(\"Input should be a list of tuples\")\n        return\n    if n < 1 or n > len(list1):\n        print(\"Input should be a positive integer less than or equal to the length of the list\")\n        return\n    \n    return list1[n-1][1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_nth_element(lst, n):\n    \"\"\"\n    This function takes a list of tuples and an integer n as input, and returns the nth element from the list.\n    \"\"\"\n    return lst[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    \"\"\"\n    Extract the nth element from a given list of tuples.\n\n    Args:\n        list1: List of tuples.\n        n: Integer.\n\n    Returns:\n        The nth element of the list.\n\n    Example:\n        >>> list1 = [(1, 'a'), (2, 'b'), (3, 'c')]\n        >>> extract_nth_element(list1, 2)\n        ('b', 'b')\n    \"\"\"\n    return list1[n-1]"
    },
    {
        "number": 413,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Check if the list is empty\n    if not list1:\n        return None\n    \n    # Check if the n is valid\n    if n < 0 or n >= len(list1):\n        return None\n    \n    # Extract the nth element from the list\n    return list1[n][1]"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence or not.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and checks whether any value in the first list exists in the second list.\n    If any value exists, the function returns True, otherwise, it returns False.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Use a set to remove duplicates from list1\n    list1 = list(set(list1))\n    # Use a set intersection to check for overlap\n    return len(list1) == len(list2) == len(set(list1) & set(list2))"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two lists as input, and returns a boolean value indicating whether any value in the first list is present in the second list or not.\n    \"\"\"\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    # Check if any value in list1 exists in list2\n    for item in list1:\n        if item in list2:\n            return True\n    # Check if any value in list2 exists in list1\n    for item in list2:\n        if item in list1:\n            return True\n    # If we reach here, no value in list1 or list2 is overlapping\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    list1 (list): The first sequence to check.\n    list2 (list): The second sequence to check.\n\n    Returns:\n    bool: True if there is any value in the first sequence that exists in the second sequence, False otherwise.\n    \"\"\"\n    # Loop through each element in list1 and check if it exists in list2\n    for elem in list1:\n        if elem in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def overlapping(list1, list2):\n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def overlapping(list1, list2):\n    '''\n    This function takes two lists as input and returns True if there is any value that exists in both lists and False otherwise.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False"
    },
    {
        "number": 414,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def overlapping(list1, list2):\n    \"\"\"\n    This function takes two sequences as input and checks whether any value in the first sequence exists in the second sequence or not.\n    \"\"\"\n    for value in list1:\n        if value in list2:\n            return True\n    return False"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    \"\"\"\n    This function takes an array of integers as input and returns a pair with the highest product.\n    \"\"\"\n    arr.sort()\n    n = len(arr)\n    max_product = -1\n    pair = []\n\n    for i in range(n-1):\n        for j in range(i+1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = [arr[i], arr[j]]\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_Product(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the pair with highest product.\n    \"\"\"\n    # Initialize two variables to hold the maximum and minimum values in the array\n    max_product = arr[0] * arr[1]\n    min_product = arr[0] * arr[1]\n\n    # Loop through the array and calculate the maximum and minimum products found so far\n    for i in range(2, len(arr)):\n        max_product = max(arr[i] * max_product, arr[i] * min_product, max_product)\n        min_product = min(arr[i] * max_product, arr[i] * min_product, min_product)\n\n    # Return the pair with the highest product\n    return (arr[0], arr[1]) if max_product > min_product else (arr[1], arr[0])"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Sort the array in descending order\n    arr = sorted(arr, reverse=True)\n\n    # Initialize the maximum product pair\n    max_product = arr[0] * arr[1]\n\n    # Initialize the first element of the pair\n    first = arr[0]\n\n    # Loop through the remaining elements of the array\n    for i in range(2, len(arr)):\n        # Check if the product of the first and the current element is greater than the maximum product pair\n        if arr[i] * first > max_product:\n            # Update the maximum product pair\n            max_product = arr[i] * first\n            # Update the second element of the pair\n            first = arr[i]\n\n    return max_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    \"\"\"\n    max_product = float('-inf')\n    max_pair = []\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            current_product = arr[i] * arr[j]\n            if current_product > max_product:\n                max_product = current_product\n                max_pair = [arr[i], arr[j]]\n\n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # Initialize variables for maximum and minimum values\n    max_value = arr[0]\n    min_value = arr[0]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # Update maximum and minimum values\n        if arr[i] > max_value:\n            max_value = arr[i]\n        elif arr[i] < min_value:\n            min_value = arr[i]\n\n        # Calculate the product of maximum and minimum values\n        product = max_value * min_value\n\n        # Update the maximum and minimum values if the product is greater than the current max_value\n        if product > max_value:\n            max_value = product\n        elif product < min_value:\n            min_value = product\n\n    # Return the maximum and minimum values\n    return max_value, min_value"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Find the maximum product of any two elements in the array\n    max_product = max(arr[0] * arr[1], arr[0] * arr[-1], arr[-1] * arr[-2])\n\n    # Find the minimum product of any two elements in the array\n    min_product = min(arr[0] * arr[1], arr[0] * arr[-1], arr[-1] * arr[-2])\n\n    # Check if the maximum product is greater than the minimum product\n    if max_product > min_product:\n        return max_product\n    else:\n        return min_product"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_val_1 = arr[0]\n    max_val_2 = arr[0]\n    min_val_1 = arr[0]\n    min_val_2 = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val_1:\n            max_val_2 = max_val_1\n            max_val_1 = arr[i]\n        elif arr[i] > max_val_2:\n            max_val_2 = arr[i]\n\n        if arr[i] < min_val_1:\n            min_val_2 = min_val_1\n            min_val_1 = arr[i]\n        elif arr[i] < min_val_2:\n            min_val_2 = arr[i]\n\n    return max(max_val_1*max_val_2, max_val_2*min_val_1)"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    # Find the maximum element in the array\n    max_elem = max(arr)\n\n    # Create a new array with all elements set to 0\n    new_arr = [0] * len(arr)\n\n    # Initialize variables to keep track of the pair with the highest product\n    max_product = -1\n    pair = [0, 0]\n\n    # Iterate through the array and fill the new array with the product of the current element and its maximum element\n    for i in range(len(arr)):\n        new_arr[i] = arr[i] * max_elem\n\n    # Iterate through the new array and find the pair with the highest product\n    for i in range(len(new_arr)):\n        for j in range(i + 1, len(new_arr)):\n            if new_arr[i] * new_arr[j] > max_product:\n                max_product = new_arr[i] * new_arr[j]\n                pair = [i, j]\n\n    return pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_Product(arr):\n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair"
    },
    {
        "number": 415,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n\n    max_prod = -float('inf')\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            curr_prod = arr[i]*arr[j]\n            if curr_prod > max_prod:\n                max_prod = curr_prod\n\n    return max_prod"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n\n    # List to store unique elements in tuple\n    unique_tuple = set()\n\n    # Loop through the list of tuples\n    for item in Input:\n\n        # Check if the first element is already in the unique_tuple set\n        if item[0] not in unique_tuple:\n            # If it's not, add it to the set\n            unique_tuple.add(item[0])\n\n    # Return the common element(s) in the unique_tuple set\n    return unique_tuple"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n\n    # create an empty dictionary to store the count of each element in the list\n    count = {}\n\n    # loop through the list of tuples\n    for i in Input:\n        # if the first element of the tuple is already in the dictionary, increment its count\n        if i[0] in count:\n            count[i[0]] += 1\n        # otherwise, add the tuple to the dictionary with a count of 1\n        else:\n            count[i[0]] = 1\n\n    # create a list of tuples with the common first element and its count\n    result = []\n    for key, value in count.items():\n        if value == max(count.values()):\n            result.append((key, value))\n\n    return result"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def group_tuples(Input):\n    common_element = None\n    for i in range(len(Input)):\n        for j in range(i+1, len(Input)):\n            if Input[i][0] == Input[j][0]:\n                if common_element is None:\n                    common_element = Input[i][0]\n                elif Input[i][1] > common_element:\n                    common_element = Input[i][1]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def group_tuples(Input):\n    common_first = []\n    for t in Input:\n        if t[0] in common_first:\n            common_first.append(t[0])\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first_element = None\n    for tup in Input:\n        if tup[0] == common_first_element:\n            continue\n        elif common_first_element is None:\n            common_first_element = tup[0]\n        elif tup[0]!= common_first_element:\n            return common_first_element\n    return common_first_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = None\n    for tuple in Input:\n        if tuple[0] == common_element:\n            continue\n        elif common_element is None:\n            common_element = tuple[0]\n    return common_element"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common = []\n    for t in Input:\n        if t[0] in common:\n            common.append(t[0])\n    return common"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    \"\"\"\n    common_first = None\n    for tuple_ in Input:\n        if not common_first:\n            common_first = tuple_[0]\n        elif tuple_[0] == common_first:\n            pass\n        else:\n            return common_first, tuple_[0]\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_first = None\n    for item in Input:\n        if common_first == None:\n            common_first = item[0]\n        elif common_first!= item[0]:\n            return \"No common first element found.\"\n    return common_first"
    },
    {
        "number": 417,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # Initialize an empty dictionary to store the common first element\n    common_dict = {}\n    \n    # Iterate through the input list of tuples\n    for tup in Input:\n        # Get the first element of the tuple\n        first_element = tup[0]\n        # If the first element is not in the dictionary, add it with a value of 1\n        if first_element not in common_dict:\n            common_dict[first_element] = 1\n        # Otherwise, increment the value of the first element in the dictionary\n        else:\n            common_dict[first_element] += 1\n    \n    # Find the maximum value in the dictionary\n    max_value = max(common_dict.values())\n    \n    # Find the common first element with the maximum value\n    common_first_element = None\n    for key, value in common_dict.items():\n        if value == max_value:\n            common_first_element = key\n            break\n    \n    # Return the common first element\n    return common_first_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_element = None\n    for element in lst: \n        if len(element) > max_len: \n            max_len = len(element) \n            max_element = element \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max(lst):\n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_elem = None\n    for elem in lst:\n        if len(elem) > max_len:\n            max_len = len(elem)\n            max_elem = elem\n    return max_elem"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    # initialize max_length and max_element variables\n    max_length = 0\n    max_element = None\n    # loop through the list\n    for i in lst:\n        # if current element's length is greater than max_length, update max_length and max_element\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n            max_element = i\n    # return max_element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element with the maximum length.\n    '''\n    max_len = 0\n    max_element = None\n    for i in lst: \n        if len(str(i)) > max_len: \n            max_len = len(str(i))\n            max_element = i \n    return max_element "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_ele = None\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_ele = i\n    return max_ele"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n\n    for elem in lst: \n        if len(elem) > max_len: \n            max_len = len(elem) \n            max_elem = elem \n\n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0 \n    max_elem = None \n    for i in lst: \n        if len(str(i)) > max_len: \n            max_len = len(str(i)) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    max_element = \"\"\n    for i in lst:\n        if len(str(i)) > max_len:\n            max_len = len(str(i))\n            max_element = i\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max(lst):\n    # initialize variables\n    max_length = 0\n    max_element = None\n    \n    # loop through the list and compare each element with the current max\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n            max_element = lst[i]\n    \n    # return the max element\n    return max_element"
    },
    {
        "number": 418,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    This function takes a list as input and returns the element of the list\n    having maximum length.\n    '''\n    max_len = 0 \n    max_elem = \"\" \n    for i in lst: \n        if len(i) > max_len: \n            max_len = len(i) \n            max_elem = i \n    return max_elem "
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = sum([round(num) for num in list1])\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    total = 0\n    for num in list1:\n        rounded_num = round(num)\n        total += rounded_num\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in list1:\n        total += round(i)\n    result = total * len(list1)\n    print(result)"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def round_and_sum(lst):\n    total = sum([round(num) for num in lst])\n    print(total * len(lst))\n"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 419,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for num in list1:\n        total_sum += round(num)\n    print(total_sum * len(list1))"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i*i*i\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i*i*i\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # initialize the sum to 0\n    sum = 0\n    # loop through first n even natural numbers\n    for i in range(2, n+1, 2):\n        # calculate the cube of the current even natural number\n        cube = i**3\n        # add the cube to the sum\n        sum += cube\n    # return the sum\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_Sum(n):\n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n\n    sum_of_cubes = 0\n    count = 0\n\n    for i in range(1, n+1, 2):\n        sum_of_cubes += i ** 3\n        count += 1\n\n    return sum_of_cubes, count"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    even_numbers = [2*i for i in range(n//2)]\n    cube_sum = sum([num**3 for num in even_numbers])\n    return cube_sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2): \n        sum += i**3 \n    return sum "
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n**3 + cube_Sum(n-1)"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(2, n+1, 2): \n        sum += i**3\n    return sum"
    },
    {
        "number": 420,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    \"\"\"\n    cube_sum = 0\n    for i in range(2, n+1, 2):\n        cube_sum += i**3\n    return cube_sum"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = ','\n    return delimiter.join(map(str, test_tup))"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter =''\n    return delimiter.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ', '.join(str(elem) for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup, delimiter):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(str(x) for x in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(str(i) for i in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n\n    Parameters:\n    test_tup (tuple): A tuple of elements to concatenate.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    return ''.join(str(element) for element in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(str(elem) + delimiter for elem in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    \"\"\"\n    delimiter = \", \"\n    return delimiter.join(str(item) for item in test_tup)"
    },
    {
        "number": 421,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup, delimiter=' '):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_string = ''\n    for element in test_tup:\n        concatenated_string += str(element) + delimiter\n    return concatenated_string[:-len(delimiter)]"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize the sum and count variables\n    sum_of_cubes = 0\n    count = 0\n\n    # Loop through the first n natural numbers\n    for i in range(1, n+1):\n        # Calculate the cube of the current number\n        cube = i**3\n\n        # Add the cube to the sum of cubes\n        sum_of_cubes += cube\n\n        # Increment the count of cubes\n        count += 1\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / count\n\n    # Return the average of cubes\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    average = sum / (n**2)\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = 0\n    for i in range(n):\n        sum_of_cubes += i*i*i\n    average = sum_of_cubes/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i**3\n        count += 1\n\n    if count > 0:\n        average = total / count\n        print(\"The average of cubes of first\", n, \"natural numbers is:\", average)\n    else:\n        print(\"There are no cubes of natural numbers less than or equal to\", n)\n"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average_of_cubes = sum_of_cubes/n\n    return average_of_cubes"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    average = sum/n\n    return average"
    },
    {
        "number": 422,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n\n    # Initialize sum and count variables\n    sum = 0\n    count = 0\n\n    # Loop through n numbers\n    for i in range(1, n+1):\n\n        # Calculate cube of current number and add to sum\n        cube = i**3\n        sum += cube\n\n        # Increment count variable\n        count += 1\n\n    # Calculate average of cubes and return it\n    return sum / count"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        if len(test_tuple[i]) > 0:\n            rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_index = []\n    for i in range(len(test_tuple)):\n        rear_index.append(test_tuple[i][-1])\n    return rear_index"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_indices = []\n    for i, string in enumerate(test_tuple):\n        rear_indices.append(i-len(string))\n    return rear_indices"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for string in test_tuple:\n        rear_elements.append(string[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    result = []\n    for item in test_tuple:\n        result.append(item[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in test_tuple:\n        rear_elements.append(i[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_element = []\n    for i in range(len(test_tuple)):\n        rear_element.append(test_tuple[i][-1])\n    return rear_element"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for item in test_tuple:\n        rear_elements.append(item[-1])\n    return rear_elements"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    \"\"\"\n    result = []\n    for string in test_tuple:\n        result.append(string[-1])\n    return result"
    },
    {
        "number": 424,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_elements = []\n    for i in range(len(test_tuple)):\n        rear_elements.append(test_tuple[i][-1])\n    return rear_elements"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    count = 0\n    for sublist in list1: \n        if x in sublist: \n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x):\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_element_in_list(lst, x):\n    \"\"\"\n    This function takes a list of lists and an element x as input and returns the number of sublists containing x in them.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if x in sublist:\n            count += 1\n    return count"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers from a list of numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x % 2 == 1, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers.\n    \"\"\"\n    return list(filter(lambda x: x%2!=0, nums))"
    },
    {
        "number": 426,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'\\d{4}-\\d{2}-\\d{2}'\n    match = re.search(pattern, dt)\n    if match:\n        year, month, day = match.group(0).split('-')\n        return f'{day}-{month}-{year}'\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define a regular expression pattern for yyyy-mm-dd format\n    pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    \n    # Use the re.match() method to match the pattern with the input string\n    match = re.match(pattern, dt)\n    \n    # Check if the match object is not None\n    if match is not None:\n        # Convert the matched string to datetime object\n        dt_obj = datetime.datetime.strptime(dt, '%Y-%m-%d')\n        \n        # Convert the datetime object to dd-mm-yyyy format\n        return dt_obj.strftime('%d-%m-%Y')\n    else:\n        # Raise an exception if the input string does not match the pattern\n        raise ValueError('Invalid date format. Please enter a date in yyyy-mm-dd format.')"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    new_format = r'\\3-\\2-\\1'\n    return re.sub(pattern, new_format, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern to match the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the date format using the pattern\n    match = re.match(pattern, dt)\n\n    # If the match is successful, extract the relevant groups and format them\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n        new_dt = f'{day}-{month}-{year}'\n        return new_dt\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Define the regular expression pattern for matching the input date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # Match the input date format using the regular expression pattern\n    match = re.match(pattern, dt)\n\n    # If the input date format matches the pattern, extract the year, month and day\n    if match:\n        year = int(match.group(1))\n        month = int(match.group(2))\n        day = int(match.group(3))\n\n        # Format the output date as dd-mm-yyyy\n        return '{:02d}-{:02d}-{}'.format(day, month, year)\n    else:\n        return 'Invalid date format'"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # Define the regular expression pattern for date format conversion\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    \n    # Use the pattern to search for matches in the input date string\n    matches = re.findall(pattern, dt)\n    \n    # If there are matches, convert the date to dd-mm-yyyy format\n    if matches:\n        year, month, day = int(matches[0][0]), int(matches[0][1]), int(matches[0][2])\n        return f'{day}-{month:02d}-{year:04d}'\n    \n    # If no matches are found, return the original date string as is\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n\n    # Convert yyyy-mm-dd format to dd-mm-yyyy format\n    dt = re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)\n\n    return dt"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return re.sub(r'(\\d{4})-(\\d{2})-(\\d{2})', r'\\3-\\2-\\1', dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n    replacement = r'\\3-\\2-\\1'\n    return re.sub(pattern, replacement, dt)"
    },
    {
        "number": 427,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # define the regular expression pattern for matching the date format\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\n\n    # search the string for the pattern and capture groups for year, month, and day\n    match = re.search(pattern, dt)\n    if match:\n        year = match.group(1)\n        month = match.group(2)\n        day = match.group(3)\n\n        # construct the new date string with day-month-year format\n        new_dt = f\"{day}-{month}-{year}\"\n\n        # return the new date string\n        return new_dt\n    else:\n        # return the original date string if the pattern is not found\n        return dt"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n\n    # Calculate the length of the array\n    n = len(my_list)\n\n    # Set the increment factor\n    increment = n // 2\n\n    # Perform insertion sort on subarrays of size increment\n    while increment > 0:\n        for i in range(increment, n):\n            temp = my_list[i]\n            j = i\n            while j >= increment and temp < my_list[j - increment]:\n                my_list[j] = my_list[j - increment]\n                j -= increment\n            my_list[j] = temp\n        increment //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            key = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > key:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = key\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n        \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2  # set initial gap size\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            # insert current element at its correct position in the sorted sequence\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                # shift greater elements to one position to the right\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n        # reduce gap size by a factor of 2\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    \"\"\"\n    n = len(my_list)\n\n    # Calculate the gap for each insertion sort\n    gap = n // 2\n    while gap > 0:\n        # Move the gap to the previous position\n        for i in range(gap, n):\n            # Insert the current element in the correct position\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap by half\n        gap //= 2\n\n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    \n    # Find the largest gap\n    gap = n//2\n    \n    while gap > 0:\n        # Shift the array elements\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        # Reduce the gap size\n        gap //= 2\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    gap = len(my_list) // 2  # set the initial gap to the length of the list\n    \n    while gap > 0:\n        # iterate over each gap of the list\n        for i in range(gap, len(my_list)):\n            # compare the element with its correct position and swap them if necessary\n            j = i\n            while j >= gap and my_list[j] > my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j -= gap\n            if i!= j:\n                # shift the elements to their correct positions after the gap\n                for k in range(j, i, -gap):\n                    my_list[k], my_list[k - gap] = my_list[k - gap], my_list[k]\n    \n    return my_list"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # Step size\n    step = n // 2\n    while step > 0:\n        # Insertion sort for every subarray of size step\n        for i in range(step, n):\n            temp = my_list[i]\n            j = i\n            while j >= step and my_list[j-step] > temp:\n                my_list[j] = my_list[j-step]\n                j -= step\n            my_list[j] = temp\n        step //= 2"
    },
    {
        "number": 428,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    n = len(my_list)\n    # Fibonacci sequence\n    fib = [1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n\n    # Sort the array\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] & test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    This function takes in two tuples as input and returns a new tuple containing\n    the elementwise and of the two input tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] & test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    result_list = []\n    for i in range(len(test_tup1)):\n        result_list.append(test_tup1[i] and test_tup2[i])\n    return tuple(result_list)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = ()\n    for i in range(len(test_tup1)):\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = []\n    for i in range(len(test_tup1)):\n        and_tup.append(test_tup1[i] & test_tup2[i])\n    return tuple(and_tup)"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Define the function signature\n    def extract_and_tuples(tup1, tup2):\n        '''\n        Extract the elementwise and tuples from the given two tuples.\n        '''\n        # Initialize an empty list to store the extracted tuples\n        and_tuples_list = []\n        # Loop through each element in the tuples\n        for i in range(len(tup1)):\n            # Extract the elements using the and operator and append them to the list\n            and_tuples_list.append(tup1[i] & tup2[i])\n        # Return the list of extracted tuples\n        return and_tuples_list\n    \n    # Extract the elementwise and tuples from the given two tuples\n    and_tuples_result = extract_and_tuples(test_tup1, test_tup2)\n    \n    # Return the elementwise and tuples from the given two tuples\n    return and_tuples_result"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Checking if the two tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The two tuples have different lengths!\")\n        return\n    \n    # Creating a new tuple of the same length as the two input tuples\n    and_tup = ()\n    \n    # Iterating over each element of the two input tuples\n    for i in range(len(test_tup1)):\n        # Adding the element-wise and of the corresponding elements of the two input tuples\n        and_tup += (test_tup1[i] & test_tup2[i],)\n    \n    # Returning the new tuple of the element-wise and tuples\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Initialize the result tuple with the same length as the input tuples\n    result_tup = tuple([0] * len(test_tup1))\n    # Loop through each element of the input tuples\n    for i in range(len(test_tup1)):\n        # Extract the elements of the input tuples\n        x = test_tup1[i]\n        y = test_tup2[i]\n        # Perform the elementwise and operation and assign the result to the corresponding element of the result tuple\n        result_tup[i] = x & y\n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The two input tuples must have the same length.\")\n    and_tup = tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    return and_tup"
    },
    {
        "number": 429,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tup = tuple([x and y for x, y in zip(test_tup1, test_tup2)])\n    return and_tup"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    if a**2 + b**2 - 4*c == 0:\n        return (-b + (b**2 - 4*c)**0.5) / (2*a)\n    elif a**2 + b**2 - 4*c == 0:\n        return (-b - (b**2 - 4*c)**0.5) / (2*a)\n    else:\n        print(\"The equation does not have a unique directrix.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    x1 = (-b + (b**2 - 4*a*c)**0.5)/(2*a)\n    x2 = (-b - (b**2 - 4*a*c)**0.5)/(2*a)\n\n    return x1, x2"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    \n    x = (-b + (b**2 - 4*a*c)**0.5) / (2*a)\n    return x"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n\n    # Find the determinant of the matrix: \n    det = b**2 - 4*a*c\n\n    # If the determinant is equal to 0, the parabola has no real roots.\n    if det == 0: \n        print(\"The parabola has no real roots.\")\n    else: \n        # Find the two real roots of the determinant: \n        root1 = (-b + det**(1/2)) / (2*a)\n        root2 = (-b - det**(1/2)) / (2*a)\n\n        # Sort the roots in increasing order: \n        root1, root2 = sorted([root1, root2])\n\n        # Print the roots: \n        print(\"The directrix of the parabola is:\", root1)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    delta = b ** 2 - 4 * a * c\n    if delta >= 0:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        print(\"The directrix of the parabola is:\", x1)\n        print(\"The directrix of the parabola is:\", x2)\n    else:\n        print(\"The equation of the parabola is not a quadratic equation.\")"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # Find the discriminant \n    discriminant = b**2 - 4*a*c\n    \n    # If the discriminant is positive, then there are real solutions \n    if discriminant > 0: \n        # Find the two roots of the quadratic equation \n        root1 = (-b + discriminant**0.5)/(2*a) \n        root2 = (-b - discriminant**0.5)/(2*a)\n        \n        # Return the roots in sorted order \n        return sorted([root1, root2])\n    \n    # If the discriminant is zero, then the parabola has one real solution \n    elif discriminant == 0: \n        root = -b/(2*a)\n        return [root]\n    \n    # If the discriminant is negative, then there are no real solutions \n    else: \n        return None"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        return None\n    else:\n        return (-b + (b**2 - 4*a*c)**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    \"\"\"\n    # calculate the discriminant\n    disc = b**2 - 4*a*c\n\n    # check if the discriminant is positive\n    if disc > 0:\n        # calculate the directrix\n        directrix = (-b + disc**0.5)/(2*a)\n\n        return directrix\n    elif disc == 0:\n        # calculate the directrix\n        directrix = -b/(2*a)\n\n        return directrix\n    else:\n        # calculate the directrix\n        directrix = -b/(2*a)\n\n        return directrix"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return (-b + discriminant**0.5) / (2*a)\n    elif discriminant == 0:\n        return -b / (2*a)\n    else:\n        return (-b - discriminant**0.5) / (2*a)"
    },
    {
        "number": 430,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    discriminant = b**2 - 4*a*c\n    \n    if discriminant >= 0:\n        x1 = (-b + math.sqrt(discriminant)) / (2*a)\n        x2 = (-b - math.sqrt(discriminant)) / (2*a)\n        return x1, x2\n    else:\n        return \"No real roots\"\n\na = float(input(\"Enter the value of a: \"))\nb = float(input(\"Enter the value of b: \"))\nc = float(input(\"Enter the value of c: \"))\n\nresult = parabola_directrix(a, b, c)\nprint(\"The directrix of the parabola is:\", result)"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n\n    # Create an empty dictionary to store the frequency of each element in each list\n    freq1 = {}\n    freq2 = {}\n\n    # Loop through each element in the first list\n    for elem in list1:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq1:\n            freq1[elem] += 1\n        else:\n            freq1[elem] = 1\n\n    # Loop through each element in the second list\n    for elem in list2:\n        # If the element is already in the dictionary, increment its frequency by 1\n        if elem in freq2:\n            freq2[elem] += 1\n        else:\n            freq2[elem] = 1\n\n    # Loop through each element in the first list and second list\n    for elem in list1:\n        # If the element is in the second list, check if the frequency of it is greater than 0\n        if elem in freq2 and freq2[elem] > 0:\n            # If it is, return True\n            return True\n\n    # If we make it through the loop without returning True, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    This function takes two lists and returns True if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns True if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for item in list1:\n        if item in list2 and not common:\n            common = True\n            break\n    return common"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # convert the lists to sets to remove duplicates and then convert back to lists\n    list1 = list(set(list1))\n    list2 = list(set(list2))\n\n    # check if any element in list1 is also in list2\n    for element in list1:\n        if element in list2:\n            return True\n\n    # if no common elements were found, return False\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for item1 in list1:\n        for item2 in list2:\n            if item1 == item2:\n                common_elements.append(item1)\n    return common_elements if len(common_elements) > 0 else False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    \"\"\"\n    for item in list1:\n        if item in list2:\n            return True\n    return False"
    },
    {
        "number": 431,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = False\n    for elem in list1:\n        if elem in list2:\n            common = True\n            break\n    return common"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    trapezium_length = base1 + base2 + height\n    middle_length = (trapezium_length - base1) / 2\n    \n    if middle_length % 2 == 0:\n        return middle_length\n    else:\n        return middle_length + 1"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    # Calculate the lengths of the sides of the trapezium\n    side1 = base1 + base2\n    side2 = 2 * base1 + height\n    side3 = 2 * base2 + height\n\n    # Sort the sides of the trapezium\n    sides = sorted([side1, side2, side3])\n\n    # Calculate the area of the trapezium using Heron's formula\n    area = 0.5 * base1 * base2 * height\n\n    # Calculate the sum of the areas of the two semi-perpendicular trapezoids\n    semi_area1 = 0.5 * (base1 + base2) * height\n    semi_area2 = 0.5 * (base1 + base2) * (2 * height - base1 - base2)\n\n    # Calculate the median length of the trapezium by comparing the areas of the semi-perpendicular trapezoids\n    median = (semi_area1 + semi_area2) / area\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # Calculate the length of the trapezium using Heron's formula\n    s = (base1 + base2 + height) / 2\n    area = (s*(s-base1)*(s-base2)*(s-height))**0.5\n\n    # Find the midpoint of the trapezium\n    x1 = 0\n    x2 = height\n\n    # Calculate the lengths of the base and the top of the trapezium\n    b = (x1**2 + x2**2)**0.5\n    t = ((x1 + x2) / 2)**2\n\n    # Calculate the distances between the base and the top\n    d_b_t = b - t\n\n    # Calculate the area of each half of the trapezium\n    a1 = s - b\n    a2 = s - t\n\n    # Calculate the area of the trapezium\n    area_trapezium = (a1 * b) + (a2 * t) + ((a1 + a2) * d_b_t)\n\n    # Calculate the area of the base of the trapezium\n    area_base = a1 * b\n\n    # Calculate the area of the top of the trapezium\n    area_top = a2 * t\n\n    # Calculate the area of the trapezium excluding the base and top\n    area_trapezium_no_base_and_top = s * (s - b - t)\n\n    # Calculate the ratio of the areas of the two trapezium halves\n    ratio = area_trapezium_no_base_and_top / (area_base + area_top)\n\n    # Calculate the median of the trapezium by finding the point where the ratio of the area of the trapezium divided by its length equals 1/2\n    median = (area_trapezium / s) * (x1 + x2)\n\n    return median"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = (base1 + base2) * height / 2\n    median = area / 2\n    \n    if area % 2 == 0:\n        return median\n    else:\n        return median + 0.5"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n\n    # calculating the length of the trapezium\n    trapezium_length = (base1 + base2) / 2\n\n    # calculating the area of the trapezium\n    area = height * trapezium_length\n\n    # finding the length of the base of the first half of the trapezium\n    half_base1 = base1 / 2\n    half_trapezium_length1 = half_base1 + (base2 - half_base1)\n\n    # finding the length of the base of the second half of the trapezium\n    half_base2 = base2 / 2\n    half_trapezium_length2 = half_base2 + (base1 - half_base2)\n\n    # finding the area of the first half of the trapezium\n    area1 = half_trapezium_length1 * height\n\n    # finding the area of the second half of the trapezium\n    area2 = half_trapezium_length2 * height\n\n    # finding the total area of the trapezium\n    total_area = area + area1 + area2\n\n    # finding the median area of the trapezium\n    median_area = total_area / 3\n\n    # finding the median length of the trapezium\n    median_length = (half_trapezium_length1 + half_trapezium_length2) / 2\n\n    # printing the values of the trapezium\n    print(\"Trapezium Length:\", trapezium_length)\n    print(\"Trapezium Area:\", area)\n    print(\"Half of Trapezium Length of Base 1:\", half_trapezium_length1)\n    print(\"Half of Trapezium Length of Base 2:\", half_trapezium_length2)\n    print(\"First Half of Trapezium Area:\", area1)\n    print(\"Second Half of Trapezium Area:\", area2)\n    print(\"Total Area of the Trapezium:\", total_area)\n    print(\"Median Area of the Trapezium:\", median_area)\n    print(\"Median Length of the Trapezium:\", median_length)"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    area = 0.5 * (base1 + base2) * height\n    median_length = 0.5 * area * (base1 * base2) / height ** 2\n    return median_length"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n    \"\"\"\n    area = 0.5 * base1 * height\n    base_larger = 0.5 * (base1 + base2)\n    area_trapezium = 2 * (area + base_larger)\n    return area_trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    s = (base1 + base2) / 2\n    area = height * s\n    trapezium = (base1 + base2) * height / 2\n    return trapezium"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def median_trapezium(base1, base2, height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n\n    # Calculate the length of the semi-base of the trapezium\n    semi_base1 = (base1 ** 2 + height ** 2) ** 0.5\n    semi_base2 = (base2 ** 2 + height ** 2) ** 0.5\n\n    # Calculate the length of the base of the trapezium\n    base = 0.5 * (semi_base1 + semi_base2)\n\n    # Calculate the length of the height of the trapezium\n    height = 0.5 * area / (base1 + base2)\n\n    # Find the median of the base and height\n    median_base = 0.5 * (base1 + base2)\n    median_height = 0.5 * (height1 + height2)\n\n    # Calculate the median length of the trapezium\n    median = 0.5 * (median_base + median_height)\n\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median length of a trapezium.\n\n    Args:\n    base1 (float): the length of the first base of the trapezium\n    base2 (float): the length of the second base of the trapezium\n    height (float): the height of the trapezium\n\n    Returns:\n    float: the median length of the trapezium\n    \"\"\"\n    # Calculate the area of the trapezium\n    area = 0.5 * base1 * height + 0.5 * base2 * height\n    # Calculate the length of the upper half\n    upper_half = 0.5 * area * (height / base1 + height / base2)\n    # Calculate the length of the lower half\n    lower_half = 0.5 * area * (height / (base1 + base2))\n    # Find the median length\n    median_length = (upper_half + lower_half) / 2\n    return median_length"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            print(True)\n        else:\n            print(False)"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n\n    # check if number is greater than any element in the array\n    for num in arr:\n        if number > num:\n            print(\"Number is greater than all elements.\")\n            return\n\n    # check if number is not greater than any element in the array\n    print(\"Number is not greater than any elements.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    # check if the number is greater than all elements in the array\n    for element in arr:\n        if element > number:\n            return True\n    # if the number is not greater than any element, return False\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            print(f\"{number} is greater than {arr[i]}\")\n            return True\n    return False"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # Loop through the array and check whether the number is greater than each element\n    for i in arr:\n        if i > number:\n            print(i)\n            return\n    \n    # If the number is not greater than any element, print an error message\n    print(\"Error: Number is not greater than any element of the array.\")"
    },
    {
        "number": 433,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    \"\"\"\n    # check whether the entered number is greater than the elements of the given array\n    for i in arr:\n        if i > number:\n            return True\n    # if the number is not greater than any element of the array, return False\n    return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'ab*'\n    matches = re.findall(pattern, text)\n    if matches:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    return re.search(pattern, text)"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'\\ba+\\bb+'\n    match = re.search(pattern, text)\n    \n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a(b)*'\n    result = re.search(pattern, text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a+b'\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        print(f\"The string '{text}' contains a match for '{pattern}'\")\n        print(f\"The match is at position {matches[0]}\")\n    else:\n        print(f\"The string '{text}' does not contain a match for '{pattern}'\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\""
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    This function takes a string as input and returns True if there is a substring that matches the pattern \"a[b]*\",\n    and False otherwise.\n    '''\n    pattern = r\"a[b]*\"\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n\n    if match:\n        print(\"Match found:\", match.group())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 434,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_one(text):\n    pattern = r'a\\b(?P<b_group>.*)\\b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group('b_group')\n    else:\n        return None"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # convert the number to a string\n    num = str(n)\n    # get the last character of the string\n    last_char = num[-1]\n    # convert the last character to an integer\n    last_int = int(last_char)\n    # return the last integer digit\n    return last_int"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    last_digit = n % 10\n    return last_digit"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit(n):\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10"
    },
    {
        "number": 435,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    \"\"\"\n    return n % 10"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to return the negative numbers in a list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    # initialize an empty list to store the negative numbers\n    neg_list = []\n    # loop through each element in the input list\n    for num in list1:\n        # check if the number is negative\n        if num < 0:\n            # if it is, append it to the neg_list\n            neg_list.append(num)\n    # return the neg_list\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the negative numbers in the original list.\n    \"\"\"\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 436,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_list = []\n    for num in list1:\n        if num < 0:\n            neg_list.append(num)\n    return neg_list"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if int(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isalnum()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return ''.join([char for char in str1 if char.isdigit() or char.isalpha()])"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Convert the string to list of characters\n    lst = list(str1)\n    # Create an empty list to store even characters\n    even_lst = []\n    # Loop through each character in the list\n    for char in lst:\n        # If the character is odd, append it to the even list\n        if int(char) % 2!= 0:\n            even_lst.append(char)\n    # Convert the even list to a string and return it\n    return ''.join(even_lst)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    \"\"\"\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # initialize an empty string to store the even characters\n    even_chars = \"\"\n    # loop through each character in the string\n    for char in str1:\n        # if the character is an odd number (i.e. not divisible by 2), add it to the even_chars string\n        if char % 2!= 0:\n            even_chars += char\n    # return the even_chars string\n    return even_chars"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if ord(char) % 2 == 0:\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for char in str1:\n        if char.isalnum():\n            new_str += char\n    return new_str"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = [char for char in str1 if char % 2!= 0]\n    return ''.join(odd_chars)"
    },
    {
        "number": 437,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_odd(string):\n    \"\"\"\n    This function removes all odd characters from a string.\n    \"\"\"\n    result = ''\n    for char in string:\n        if ord(char) % 2!= 0:\n            result += char\n    return result"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    bidirectional_pairs = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                bidirectional_pairs += 1\n    return bidirectional_pairs"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    \"\"\"\n\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] < test_list[j][0]) and (test_list[i][1] > test_list[j][1]):\n                count += 1\n\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i], test_list[j]) in test_list[j:]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] in test_list[j] and test_list[j] in test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if tuple(test_list[i]) == tuple(test_list[j]) or tuple(test_list[j]) == tuple(test_list[i]):\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] or test_list[j] == test_list[i][::-1]:\n                bidirectional_count += 1\n    return bidirectional_count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 438,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0], test_list[j][0]) in test_list[i+1:j] or (test_list[j][0], test_list[i][0]) in test_list[i+1:j]:\n                count += 1\n    return count"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        result = result * 10 + num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for i in L:\n        result += i\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize the result variable to 0\n    result = 0\n\n    # Iterate over each element in the list\n    for element in L:\n        # Check if the element is a multiple of 10\n        if element % 10 == 0:\n            # If it is, add it to the result\n            result += element\n        else:\n            # If it's not, add it to the result\n            result += element\n\n    # Return the result\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    result = 1\n    for num in L:\n        result *= num\n    return result"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to join a list of multiple integers into a single integer.\n    \"\"\"\n    # initializing the sum variable to zero\n    sum = 0\n\n    # iterating over the list L\n    for i in L:\n        # checking if the element is a multiple of 3\n        if i % 3 == 0:\n            # adding the element to the sum variable\n            sum += i\n\n    # returning the sum of all the multiples of 3\n    return sum"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if len(L) == 1:\n        return L[0]\n    else:\n        return multiple_to_single(L[1:]) * L[0]"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Initialize a variable to store the sum of the list elements\n    total = 0\n    # Loop through the list and add each element to the total\n    for element in L:\n        total += element\n    # Return the total\n    return total"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Convert the list of integers into a string of integers separated by commas\n    s = ','.join(map(str, L))\n    # Convert the string of integers back into a list of integers\n    return list(map(int, s.split(',')))"
    },
    {
        "number": 439,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    result = 0\n    for num in L:\n        if num < 0:\n            result += num * -1\n        else:\n            result += num\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern = r'\\b(\\w+(?:ing|ed|es|est|s|ed|es|est))\\b'\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0]\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Find all occurrences of adverbs\n    adverbs = re.findall(r'\\b\\w*adverb\\w*\\b', text)\n    \n    # Initialize an empty list to store adverb positions\n    adverb_positions = []\n    \n    # Iterate through each adverb and find its position in the text\n    for i, adverb in enumerate(adverbs):\n        start_position = text.find(adverb)\n        end_position = start_position + len(adverb)\n        \n        # If the adverb is the first adverb in the sentence, add its position to the list\n        if len(adverb_positions) == 0:\n            adverb_positions.append((start_position, end_position))\n            \n        # If the adverb is not the first adverb, find its position relative to the last one\n        else:\n            relative_start_position = start_position - adverb_positions[-1][0]\n            relative_end_position = relative_start_position + len(adverb)\n            adverb_positions.append((relative_start_position, relative_end_position))\n            \n    # Return the adverb positions in a list of tuples\n    return adverb_positions"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the text using regular expressions\n    adverbs = re.findall(r'\\b\\w+ly\\b', text)\n    # Print the adverbs and their positions in the sentence\n    for i, adv in enumerate(adverbs, start=1):\n        print(f'{adv} - {i}')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern for adverbs\n    pattern = r'\\b(also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|also|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverb_position(text):\n    \"\"\"\n    Write a function to find the first adverb and their positions in a given sentence.\n    \"\"\"\n    # Define regular expression pattern to match adverbs\n    pattern = r'\\b(?:adv|advp|advcl)\\b'\n\n    # Find all adverbs using the pattern and return their positions\n    adverbs = re.findall(pattern, text)\n\n    if adverbs:\n        # Find the position of the first adverb in the sentence\n        adverb_position = text.find(adverbs[0])\n        return adverb_position\n    else:\n        return None"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define regular expression pattern to find adverbs\n    pattern = r'\\b\\w+(ed|ing|ed)\\b'\n\n    # Use re.finditer() to find all occurrences of the pattern in the text\n    for match in re.finditer(pattern, text):\n        # Extract the matched text and position of the adverb\n        adverb = match.group()\n        position = match.start()\n\n        # Print the adverb and its position\n        print(f'Adverb found at position {position}: {adverb}')\n\n    # If no adverbs are found, print a message\n    if not match:\n        print('No adverbs found.')\n"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Find all the adverbs in the sentence\n    adverbs = re.findall(r'\\b\\w*[AEIOUaeiou]\\w*\\b', text)\n    \n    # If there is no adverb, return None\n    if not adverbs:\n        return None\n    \n    # Find the positions of all the adverbs\n    positions = [m.start() for m in re.finditer(r'\\b\\w*[AEIOUaeiou]\\w*\\b', text)]\n    \n    # Sort the positions in ascending order\n    positions.sort()\n    \n    # Find the first adverb and its position\n    first_adverb = adverbs[0]\n    first_position = positions[0]\n    \n    # Return the first adverb and its position\n    return first_adverb, first_position"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to match adverbs\n    adverb_pattern = r'\\b(?:always|also|anytime|always|always|anytime|never|not|rarely|sometimes|usually|usually|rarely|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|never|"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverb_position(text):\n    # define regular expression pattern for adverbs\n    pattern = r'\\b(of|against|again|except|besides|besides|even|even|for|from|in|inside|into|like|near|not|on|outside|over|since|than|through|throughout|till|under|underneath|unlike|until|upon|via|with|without|without|yet|but|but)\\b'\n    \n    # find all the matches using the pattern\n    matches = re.findall(pattern, text)\n    \n    # loop through each match and print its position and adverb\n    for i, match in enumerate(matches):\n        print(f'Adverb \"{match}\" found at position {i+1}.')"
    },
    {
        "number": 440,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Define a regular expression pattern to find adverbs\n    pattern = r'\\b(?:adverb|adv|adv\\.)\\b'\n\n    # Find all the matches using re.finditer()\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n\n    # Iterate over the matches and store their positions and words\n    for match in matches:\n        # Get the position of the match\n        pos = match.start()\n\n        # Get the word that the match belongs to\n        word = text[pos:pos+len(match.group(0))].lower()\n\n        # Print the position and word of the adverb\n        print(f'Adverb found at position {pos} with word \"{word}\"')\n\n    # If no adverbs are found, print a message saying so\n    if not matches:\n        print('No adverbs found.')"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6*l*l # Cube surface area = 6 * length^2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l * l"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l**2"
    },
    {
        "number": 441,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    surface_area = 6 * l ** 2\n    print(\"The surface area of the cube is:\", surface_area)\n"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the input array to an array of integers\n    int_arr = array('i', nums)\n    \n    # Initialize the counters\n    pos_count = 0\n    neg_count = 0\n    \n    # Loop over the array\n    for num in int_arr:\n        # Check if the number is positive or negative\n        if num > 0:\n            pos_count += 1\n        elif num < 0:\n            neg_count += 1\n    \n    # Calculate the ration of positive numbers\n    pos_ratio = float(pos_count) / (pos_count + neg_count)\n    \n    # Return the result\n    return pos_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_arr = array('i')  # create an array of integers to store positive numbers\n    negative_arr = array('i')  # create an array of integers to store negative numbers\n    for num in nums:\n        if num > 0:\n            positive_arr.append(num)\n        else:\n            negative_arr.append(num)\n    positive_count = positive_arr.count(0)  # count the number of negative numbers\n    negative_count = len(negative_arr)  # count the number of negative numbers\n    if positive_count == 0:  # if there are no positive numbers, there is no ration\n        return 0\n    else:\n        return float(positive_count) / len(nums)  # calculate the ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    if not nums:\n        return 0\n    \n    positive_count = array('i', [0])\n    negative_count = array('i', [0])\n    \n    for num in nums:\n        if num > 0:\n            positive_count.append(1)\n        elif num < 0:\n            negative_count.append(1)\n        else:\n            pass\n    \n    if len(positive_count) == 1:\n        if positive_count[0] == 1:\n            return 1\n        else:\n            return 0\n    elif len(negative_count) == 1:\n        if negative_count[0] == 1:\n            return 1\n        else:\n            return 0\n    else:\n        if positive_count[0] == 1 and negative_count[0] == 1:\n            return 1\n        elif positive_count[0] == 1 and negative_count[0] == 0:\n            return 0.5\n        elif positive_count[0] == 0 and negative_count[0] == 1:\n            return 0\n        else:\n            return 0.5"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Convert the array to a list to make it mutable\n    nums = list(nums)\n    # Initialize the count variables\n    positive = 0\n    negative = 0\n    zero = 0\n    # Iterate over the list of integers\n    for num in nums:\n        # Check if the number is positive\n        if num > 0:\n            positive += 1\n        # Check if the number is negative\n        elif num < 0:\n            negative += 1\n        # If the number is zero, it doesn't contribute to the count\n        else:\n            zero += 1\n    # Calculate the ration of positive numbers\n    positive_ratio = positive / (positive + negative + zero)\n    # Return the ration of positive numbers\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # Initialize the count of positive numbers to zero\n    count = 0\n    \n    # Iterate over the array and count the number of positive numbers\n    for num in nums:\n        if num > 0:\n            count += 1\n    \n    # Calculate the ration of positive numbers\n    ration = count / len(nums)\n    \n    return ration"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    '''\n    count = array('i', [0])\n    for num in nums:\n        if num > 0:\n            count.itemset(0, count[0] + 1)\n    return float(count[0]) / len(nums)"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n\n    # Convert the array to list\n    nums_list = list(nums)\n\n    # Count the number of positive numbers in the list\n    count = 0\n    for num in nums_list:\n        if num > 0:\n            count += 1\n\n    # Calculate the ration of positive numbers\n    ratio = count / len(nums_list)\n\n    # Return the ration\n    return ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos = 0\n    neg = 0\n    zero = 0\n    for num in arr:\n        if num > 0:\n            pos += 1\n        elif num < 0:\n            neg += 1\n        else:\n            zero += 1\n    total = pos + neg + zero\n    if total == 0:\n        return 0\n    return pos / total"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from array import array\n\ndef positive_count(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the ration of positive numbers in the array.\n    \"\"\"\n    # create an array to store the positive numbers in the array\n    positive_nums = array('i')\n\n    # loop through the array and add the positive numbers to the array\n    for num in nums:\n        if num > 0:\n            positive_nums.append(num)\n\n    # calculate the total count of numbers in the array\n    total_count = len(nums)\n\n    # calculate the positive count in the array\n    positive_count = len(positive_nums)\n\n    # calculate the positive ratio\n    positive_ratio = positive_count / total_count\n\n    return positive_ratio"
    },
    {
        "number": 442,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from array import array\n\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    arr = array('i', nums)\n    pos_count = 0\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            pos_count += 1\n    return pos_count / len(arr)"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = list1[0]\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_negative = float('-inf') # initialize largest_negative as negative infinity\n    \n    for num in list1:\n        if num < 0 and num > largest_negative: # check if current number is negative and greater than largest_negative\n            largest_negative = num # update largest_negative if current number is greater than current largest_negative\n            \n    return largest_negative # return largest_negative"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = float('-inf')\n    for num in list1: \n        if num < 0 and num > largest: \n            largest = num \n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_neg(lst):\n    max_neg = lst[0]\n    for num in lst:\n        if num < 0 and num > max_neg:\n            max_neg = num\n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -float('inf') # initialize largest as the smallest possible number\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_neg(list1):\n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest = -float('inf')\n    for num in list1:\n        if num < 0 and num > largest:\n            largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0] \n    for i in range(len(list1)): \n        if list1[i] < 0 and list1[i] > max_neg: \n            max_neg = list1[i] \n    return max_neg"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = None\n    for num in list1:\n        if num < 0:\n            if largest is None or num > largest:\n                largest = num\n    return largest"
    },
    {
        "number": 443,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    \"\"\"\n    largest_num = -1  # initialize largest_num to a very small number\n    for num in list1:\n        if num < 0 and num > largest_num:  # check if current number is negative and greater than largest_num\n            largest_num = num  # update largest_num if necessary\n    return largest_num  # return the largest negative number"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        if len(test_list[i]) > K:\n            test_list[i] = test_list[i][:K]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(K):\n            test_list[i] = test_list[i][:j] + test_list[i][j+1:]\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Iterate through the list of tuples\n    for i in range(len(test_list)):\n        # Calculate the length of the trimmed tuple\n        trimmed_len = len(test_list[i]) - K\n        # Check if the trimmed tuple is greater than 0\n        if trimmed_len > 0:\n            # Trim the tuple\n            test_list[i] = test_list[i][:trimmed_len]\n    # Return the updated list of trimmed tuples\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = tuple(test_list[i][j][k] for k in range(K))\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n\n    Args:\n        test_list (list): List of tuples to be trimmed.\n        K (int): The number of elements to trim from each tuple.\n\n    Returns:\n        list: The trimmed tuple list.\n    \"\"\"\n    trimmed_list = []\n    for tup in test_list:\n        trimmed_tup = tup[:K]\n        trimmed_list.append(trimmed_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i, tuple_ in enumerate(test_list):\n        if len(tuple_) > K:\n            test_list[i] = tuple_(K)\n    return test_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tuple in test_list:\n        trimmed_tuple = tuple[:K]\n        trimmed_list.append(trimmed_tuple)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n\n    # iterate over each tuple in the list\n    for i in range(len(test_list)):\n        # split each tuple into its elements\n        elements = test_list[i]\n        # trim each element by k\n        for j in range(len(elements)):\n            elements[j] = elements[j] + K\n        # set the trimmed tuple back in the list\n        test_list[i] = elements"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    trimmed_list = []\n    for tup in test_list:\n        new_tup = tup[:K]\n        trimmed_list.append(new_tup)\n    return trimmed_list"
    },
    {
        "number": 444,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # iterate through each tuple in the list\n    for i in range(len(test_list)):\n        # check if length of the tuple is greater than k\n        if len(test_list[i]) > K:\n            # split the tuple into two parts at index k\n            split_tuple = tuple(test_list[i][:K] + (test_list[i][K],))\n            # replace the original tuple with the split tuple\n            test_list[i] = split_tuple\n    return test_list"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] * test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Convert the tuples into lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Initialize the result list to store the multiplication of each index\n    result_list = []\n    # Perform the multiplication of each index\n    for i in range(len(list1)):\n        result_list.append(list1[i] * list2[i])\n    # Return the result list as a tuple\n    return tuple(result_list)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # check if both tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples should have the same length.\")\n    # create a new tuple with length of test_tup1\n    result_tup = (0,) * len(test_tup1)\n    # loop through each index of test_tup1\n    for i in range(len(test_tup1)):\n        # perform index wise multiplication of test_tup1[i] and test_tup2[i] and store the result in result_tup[i]\n        result_tup[i] = test_tup1[i] * test_tup2[i]\n    return result_tup"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The length of the two tuples must be equal to perform index multiplication\")\n    result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    \"\"\"\n    # Initialize an empty list to store the multiplication result\n    result = []\n\n    # Loop through the tuples and perform index wise multiplication\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n\n    # Return the result as a tuple\n    return tuple(result)"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Initialize the result tuple with zeros\n    result = (0,) * len(test_tup1)\n\n    # Iterate over the elements of the two tuples and perform the multiplication\n    for i in range(len(test_tup1)):\n        result[i] = test_tup1[i] * test_tup2[i]\n\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Using list comprehension to multiply each element of the two tuples\n    result = [test_tup1[i] * test_tup2[i] for i in range(len(test_tup1))]\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Check if the length of the two tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The length of the two tuples should be equal.\")\n        return\n    \n    # Create an empty result list to store the result of multiplication\n    result = []\n    \n    # Perform indexwise multiplication of the elements of the two tuples\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    \n    # Return the result list\n    return result"
    },
    {
        "number": 445,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result_tup = ()\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            result_tup += (test_tup1[i] * test_tup2[i],)\n        return result_tup\n    else:\n        return \"Error: The two tuples should have the same length.\""
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_dict = Counter(lst) # create a dictionary to count the occurrence of each element in list\n    for i in tup: # iterate through the tuple\n        if i in count_dict: # if the element is present in the list\n            count_dict[i] += 1 # increment the count of that element in the dictionary\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as arguments. It then uses the Counter function from the collections module to count the number of occurrences of each element in the list in the tuple.\n\n    Returns: A dictionary containing the count of each element in the list in the tuple.\n    '''\n\n    # Use the Counter function from the collections module to count the number of occurrences of each element in the list in the tuple\n    count_dict = Counter(tup)\n\n    return count_dict"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(tup)\n    total = Counter(lst)\n    for i in total:\n        if i not in count:\n            count[i] = 0\n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    This function takes a tuple and a list as input, and returns a dictionary of the count of each element in the list in the tuple.\n\n    Parameters:\n    - tup: a tuple containing elements\n    - lst: a list containing elements to be counted\n\n    Returns:\n    - a dictionary of the count of each element in the list in the tuple\n    '''\n\n    # convert the tuple to a set to remove duplicates\n    tup = set(tup)\n\n    # count the occurrence of each element in the tuple and list\n    count = Counter(tup)\n\n    # convert the dictionary to a list of tuples to sort by the second element (count)\n    sorted_count = sorted(count.items(), key=lambda x: x[1])\n\n    # return the sorted list of tuples\n    return sorted_count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n\n    count = Counter(lst)  # Counter function from the collections module\n    for element in tup: \n        if element in count: \n            count[element] += 1  # If the element is present in the list, increment its count\n    \n    return count"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter \n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # convert the tuple into a set to remove duplicates\n    tup = set(tup)\n\n    # create a dictionary to store the count of each element\n    count_dict = {}\n\n    # iterate through the list and count the occurrence of each element in the tuple\n    for elem in lst:\n        if elem in tup:\n            if elem in count_dict:\n                count_dict[elem] += 1\n            else:\n                count_dict[elem] = 1\n\n    # convert the dictionary into a list of tuples and return it\n    return list(count_dict.items())"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(lst)\n    result = {}\n    for item in tup:\n        result[item] = counter[item]\n    return result"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst): \n    '''\n    This function takes a tuple and a list as input and counts the occurence of all elements in the list in the tuple.\n    It returns a dictionary where the keys are the elements in the tuple and the values are the number of occurrences in the list.\n    '''\n    count_dict = Counter(tup)\n    return count_dict\n"
    },
    {
        "number": 446,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef count_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    result = []\n    \n    for i in tup:\n        result.append(count[i])\n        \n    return result"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # initialize an empty list to store the cubes of individual elements\n    cubes = []\n    # iterate over each element in the input list\n    for num in nums:\n        # calculate the cube of the current element and append it to the cubes list\n        cubes.append(num ** 3)\n    # return the list of cubes\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n\n    # Loop through each element in the list\n    for num in nums:\n        # Find the cube of the current element\n        cube = num ** 3\n        # Add the cube to a list of cubes\n        cubes.append(cube)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num ** 3)"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]"
    },
    {
        "number": 447,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n\n    # Initialize the sum to 0\n    total = 0\n    \n    # Loop through perrin numbers from 1 to n\n    for i in range(1, n+1):\n        # Calculate the perrin number and add it to the total\n        total += i**3\n\n    # Return the total sum of perrin numbers\n    return total"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += (i * i)\n    return sum_perrin"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    p = 0\n    sum = 0\n    for i in range(1, n+1):\n        p = 1/i * (2*i-1)\n        sum += p\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin = []\n    for i in range(2, n+1):\n        perrin.append(sum(map(int, str(i))))\n    return sum(perrin)"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    perrin_numbers = [1, 3, 5, 7, 9]\n    total_sum = 0\n    for num in perrin_numbers:\n        total_sum += num\n    return total_sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    sum_perrin = 0\n    for i in range(1, n+1):\n        sum_perrin += i * (i * i - 1) // 2\n    return sum_perrin\n\nprint(cal_sum(10)) # Output: 117"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cal_sum(n):\n    '''\n    Write a function to calculate the sum of Perrin numbers.\n    '''\n    # Initialize the sum of Perrin numbers to zero\n    perrin_sum = 0\n\n    # Calculate the first Perrin number\n    perrin_sum += n\n\n    # Calculate the next Perrin number\n    while perrin_sum < 1000:\n        perrin_sum += (2*n) + 1\n\n    return perrin_sum\n"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * (3 * i - 1)\n    return sum"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = [1, 2, 4, 7, 12, 20, 32, 50, 75, 109, 156, 221, 308, 428, 595, 831, 1160, 1616, 2252, 3128, 4327, 6084, 8672, 12183, 17039, 23700, 32714, 45851, 65071, 92628, 130946, 184176, 267207, 391476, 576219, 851180, 1252584, 1823382, 2617627, 3738871, 5394978, 7857501, 11579961, 16984064, 24710449, 35535360, 51057736, 73889753, 108032200, 160103014, 238213369, 352476831, 528407086, 800084108, 1195636206, 1828677038, 2753596372, 4110815303, 6127873819, 9092913768, 13344340589, 20007855228, 29973533282, 45044643083, 67289482290, 98631475842, 150996206429, 228387733077, 344218858343, 520976993940, 786095585100, 1215798102000, 1832547418145, 2722415540450, 4003848593851, 5890287848698, 8668516978759, 12808407330740, 19033180347168, 27953640847248, 41231857687197, 60770695227622, 89160713916762, 131305147709288, 201267543180091, 306057723197320, 459853666735723, 684773545206498, 1021042308241959, 1500401463441803, 2257770090599900, 3423094717537425, 5180358716766598, 7735546"
    },
    {
        "number": 448,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += 2**i\n    return sum"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for s in l:\n        if len(s) >= l:\n            extracted_strings.append(s[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_str = []\n    for i in range(len(str_list)):\n        if len(str_list[i]) <= size:\n            extracted_str.append(str_list[i])\n    return extracted_str"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extracts specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for i in range(0, len(str_list), size):\n        extracted_strings.append(\" \".join(str_list[i:i+size]))\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    extracted_strings = []\n    for string in l:\n        if len(string) >= l:\n            extracted_strings.append(string[:l])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:l] for s in l if len(s) >= l]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_string(str_list, size):\n    '''\n    Extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes in a list of strings and the size of each string to extract.\n    It extracts the specified size of strings from the list and returns the extracted strings.\n    '''\n    extracted_strings = []\n    for s in str_list:\n        extracted_strings.append(s[:size])\n    return extracted_strings"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_string(str_list, size):\n    '''\n    This function takes a list of string values and a specified size of string to extract.\n    It returns a list of extracted strings.\n    '''\n    return [value[:size] for value in str_list]"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(l)):\n        result.append(l[i][:l[i].find(str)])\n    return result"
    },
    {
        "number": 450,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_string(str_list, size):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return [s[:size] for s in str_list]"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # use regex to remove all whitespaces\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = re.sub('\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    \"\"\"\n    This function takes a string as input and removes all the whitespaces from it using regular expressions.\n    \"\"\"\n    # Define the regular expression pattern to match all whitespaces\n    pattern = r'\\s+'\n    # Use the re.sub() function to replace all whitespaces with a single space\n    return re.sub(pattern,'', text)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    \"\"\"\n    return re.sub(r'\\s+','', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_whitespaces(text):\n    '''\n    This function takes a string as input and returns the same string with all whitespaces removed.\n    '''\n    # Use regular expressions to remove all whitespaces from the string\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+', '', text1)"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces using regular expression\n    text1 = re.sub(r'\\s+','', text1)\n    return text1"
    },
    {
        "number": 451,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # Remove all whitespaces from the string using regex\n    text2 = re.sub(r'\\s+','', text1)\n    return text2\n"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    This function takes in two arguments: actual_cost and sale_amount.\n    It returns the loss amount if the sale_amount is less than or equal to actual_cost, otherwise it returns 0.\n    '''\n    if sale_amount <= actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost, sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_factor = 0.05 #Assuming loss factor of 5%\n    \n    if actual_cost > sale_amount: #If actual cost is greater than sale amount\n        loss_amount = (actual_cost - sale_amount) * loss_factor #Calculate loss amount\n    else: #If actual cost is less than or equal to sale amount\n        loss_amount = 0 #No loss\n    \n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    if actual_cost > sale_amount:\n        loss_amount = actual_cost - sale_amount\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost < sale_amount:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount <= actual_cost:\n        return 0\n    else:\n        return sale_amount - actual_cost"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost >= sale_amount:\n        loss_amount = actual_cost - sale_amount\n    else:\n        loss_amount = 0\n    return loss_amount"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        loss_amount = sale_amount - actual_cost\n        return loss_amount\n    else:\n        return 0"
    },
    {
        "number": 452,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost, sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount > actual_cost:\n        return sale_amount - actual_cost\n    else:\n        return 0"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    even_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            if i % 2 == 0:\n                even_factors += i\n    return even_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # function to check if a number is even or not\n    def is_even(num):\n        return num % 2 == 0\n    \n    # initialize a variable to store the sum of even factors\n    evenSum = 0\n    \n    # loop through all numbers from 1 to n-1\n    for i in range(1, n+1):\n        # check if i is a factor of n\n        if n % i == 0 and is_even(i):\n            # add i to the evenSum\n            evenSum += i\n    \n    return evenSum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n\n    # initialize the sum to 0\n    sum = 0\n\n    # loop through all numbers from 1 to the square root of n\n    for i in range(1, int(math.sqrt(n))+1):\n\n        # check if i is even and divisible by n\n        if i*i <= n and n % i == 0:\n            # if it is, add it to the sum\n            sum += i\n\n    # return the sum\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math \n\ndef sumofFactors(n) : \n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum = 0\n    for i in range(2, n+1) : \n        if n % i == 0 and i % 2 == 0 : \n            sum += i\n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    total = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            if i % 2 == 0:\n                total += i\n    return total"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            sum_of_factors += i\n    if n > 1:\n        sum_of_factors += n\n    return sum_of_factors"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math \n\ndef sumOfFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to zero \n    sum = 0\n    # loop through all the numbers from 2 to n \n    for i in range(2, n+1): \n        # check if i is an even number \n        if i % 2 == 0: \n            # if i is even, add it to the sum \n            sum += i \n    return sum "
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # initialize sum to 0\n    sum = 0\n\n    # loop through all odd numbers from 1 to n\n    for i in range(1, n+1, 2):\n        # check if i is even\n        if i % 2 == 0:\n            # add i to sum if it is even\n            sum += i\n\n    # return the sum of even factors\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    i = 1\n\n    while i <= n:\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n        i += 1\n\n    return sum"
    },
    {
        "number": 453,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    \"\"\"\n    # initialize sum of even factors to 0\n    sum = 0\n    # loop through all odd numbers from 1 to n/2\n    for i in range(1, int(n/2)+1):\n        # if n is divisible by i, add i to sum\n        if n % i == 0:\n            sum += i\n    # return sum of even factors\n    return sum"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'\\b[a-zA-Z]+\\b[zZ]\\b')\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\b'\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    This function takes a string as input and returns True if the string contains a word containing 'z' and False otherwise.\n    '''\n    # Define the regular expression pattern to match a word containing 'z'\n    pattern = r'\\b\\w+z\\b'\n    \n    # Use the re.search() function to search for the pattern in the input text\n    match = re.search(pattern, text)\n    \n    # Check if the match is not None, which means there is a match\n    if match is not None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-z]+[zZ][a-z]+\\b'\n    words = re.findall(pattern, text)\n    return words\n\ntext = \"Here's a test with words containing Z's\"\nmatches = text_match_wordz(text)\nprint(matches)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b[a-zA-Z]+[zZ]\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b[a-zA-Z]+\\b'\n    return re.findall(pattern, text)"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w+z\\b'  # matches a word containing 'z' surrounded by word boundaries\n    words = re.findall(pattern, text)  # find all words that match the pattern\n    return words"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_z = re.compile(r'\\b[a-zA-Z]+z\\b', re.IGNORECASE)\n    matches = word_z.findall(text)\n    return matches"
    },
    {
        "number": 454,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = r'\\b\\w+z\\w+\\b'\n    matches = re.findall(pattern, text, re.IGNORECASE)\n    return matches"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum):\n    '''\n    This function takes a month number as input and returns True if it contains 31 days and False otherwise.\n    '''\n    # check if the month number is valid\n    if monthnum < 1 or monthnum > 12:\n        return False\n    \n    # check if the month has 31 days or not\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2 and (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)):\n        days_in_month[1] = 29\n    elif monthnum in [4, 6, 9, 11]:\n        days_in_month[monthnum-1] = 30\n    \n    return True if days_in_month[monthnum-1] == 31 else False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 in ['1', '3', '5', '7', '8', '10', '12']:\n        return False\n    elif monthnum2 in ['4', '6', '9', '11']:\n        return True\n    else:\n        raise ValueError(\"Invalid month number\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n\n    if monthnum2 % 100 == 0:\n        if monthnum2 % 400 == 0:\n            if monthnum2 % 1000 == 0:\n                if monthnum2 % 4000 == 0:\n                    return False\n                else:\n                    return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if the given month number contains 31 days or not\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1,3,5,7,8,10,12]:\n        return True\n    elif monthnum2 in [4,6,9,11]:\n        return False\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif monthnum2 in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in [1, 3, 5, 7, 8, 10, 12] and (monthnum2 % 2!= 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    # Check if month number contains 31 days or not\n    if (monthnum2 in [4, 6, 9, 11]):\n        print(monthnum2, \"month contains 31 days.\")\n    else:\n        print(monthnum2, \"month contains 30 days.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            if monthnum2 == 2 and day_of_month >= 29:\n                print(\"The given month number contains 31 days.\")\n            else:\n                print(\"The given month number does not contain 31 days.\")\n        else:\n            if monthnum2 == 2 and day_of_month >= 28:\n                print(\"The given month number contains 31 days.\")\n            else:\n                print(\"The given month number does not contain 31 days.\")\n    else:\n        if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n            if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9:\n                if day_of_month >= 30:\n                    print(\"The given month number contains 31 days.\")\n                else:\n                    print(\"The given month number does not contain 31 days.\")\n            else:\n                if day_of_month >= 31:\n                    print(\"The given month number contains 31 days.\")\n                else:\n                    print(\"The given month number does not contain 31 days.\")\n        else:\n            if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n                if day_of_month >= 31:\n                    print(\"The given month number contains 31 days.\")\n                else:\n                    print(\"The given month number does not contain 31 days.\")\n            else:\n                print(\"Invalid month number.\")"
    },
    {
        "number": 455,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum2 in range(1,13):\n        if monthnum2 % 2 == 0 and (monthnum2 % 100!= 0 or monthnum2 % 400 == 0):\n            if monthnum2 == 2:\n                return True\n            else:\n                return days[monthnum2-1]\n        else:\n            return days[monthnum2-1]\n    else:\n        print(\"Invalid month number\")"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # Loop through each string in the list\n    for i in range(len(stringlist)):\n        # Reverse the string using slicing\n        reversed_string = stringlist[i][::-1]\n        # Replace the original string in the list with the reversed string\n        stringlist[i] = reversed_string\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for string in stringlist:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n        \n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1] # use slicing to reverse the string\n    return stringlist"
    },
    {
        "number": 456,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Min(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            sublist = lst[i:j+1]\n            if len(sublist) < min_length:\n                min_length = len(sublist)\n                min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst[0])\n    min_sublist = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = [lst[i]]\n        elif len(lst[i]) == min_length:\n            min_sublist.append(lst[i])\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # initialize min_length variable to maximum integer value\n    min_length = float('inf')\n\n    # loop through all sublists in lst\n    for sublist in lst:\n        # check if the length of the current sublist is smaller than the current min_length\n        if len(sublist) < min_length:\n            # update min_length with the length of the current sublist\n            min_length = len(sublist)\n\n    # return the sublist with minimum length\n    return lst[lst.index(min(lst, key=len))]"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    # create a copy of the input list\n    lst = lst[:]\n    # initialize variables to keep track of the minimum sublist and its length\n    min_sublist = None\n    min_length = float('inf')\n    # iterate through the list\n    for i in range(len(lst)):\n        # if the length of the current sublist is less than the minimum length, update the minimum sublist and length\n        if len(lst[i]) < min_length:\n            min_sublist = lst[i]\n            min_length = len(lst[i])\n    # return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n    '''\n    min_length = float('inf')\n    min_sublist = []\n    \n    for sublist in lst: \n        if len(sublist) < min_length: \n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n\n    # Initialize variables\n    min_len = None\n    min_sublist = None\n    \n    # Loop through each sublist in the list\n    for i in range(len(lst)):\n        \n        # Calculate the length of the current sublist\n        sublist_len = len(lst[i])\n        \n        # Check if it's the first sublist or if it's shorter than the previous sublist\n        if min_len is None or sublist_len < min_len:\n            \n            # Update the minimum sublist and length\n            min_len = sublist_len\n            min_sublist = lst[i]\n            \n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Min(lst):\n    # Initialize the minimum length to be infinity\n    min_length = float('inf')\n\n    # Initialize the minimum sublist to be an empty list\n    min_sublist = []\n\n    # Loop through each element in the list\n    for elem in lst:\n        # Check if the length of the sublist is less than the minimum length\n        if len(elem) < min_length:\n            # Update the minimum length and sublist\n            min_length = len(elem)\n            min_sublist = elem\n\n    # Return the minimum sublist\n    return min_sublist"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = float('inf')\n    min_lst = []\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            if j-i < min_len:\n                min_len = j-i\n                min_lst = lst[i:j]\n                \n    return min_lst"
    },
    {
        "number": 457,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Min(lst):\n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    return min_sublist"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rectangle_area(l, b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rectangle_area(length, width):\n    \"\"\"\n    This function takes in two parameters, length and width, and returns the area of a rectangle with those dimensions.\n    \"\"\"\n    return length * width"
    },
    {
        "number": 458,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    \"\"\"\n    return l * b"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    pattern = re.compile(r'(?i)[A-Z]+')\n    result = pattern.sub('', str1)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    pattern = r'(?i)\\b[A-Z]{2,}\\b'\n    return re.sub(pattern, '', str1)"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n\n    # Define a regular expression pattern to match uppercase substrings\n    pattern = r'(?<![\\w\\s])([A-Z][a-z]+)(?![\\w\\s])'\n\n    # Find all substrings that match the pattern\n    matches = re.findall(pattern, str1)\n\n    # Remove the matched substrings from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'\\b[A-Z]\\w*\\b', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define the regex pattern to match uppercase substrings\n    pattern = re.compile(r'[A-Z]+')\n\n    # find all uppercase substrings in the given string\n    matches = pattern.findall(str1)\n\n    # loop through the list of matches and replace them with empty strings\n    for match in matches:\n        str1 = str1.replace(match, '')\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # define a regular expression pattern to match uppercase letters\n    pattern = r'[A-Z]+'\n\n    # use re.findall() function to find all uppercase substrings in the string\n    uppercase_substrings = re.findall(pattern, str1)\n\n    # loop through the list of uppercase substrings and remove them from the string\n    for substring in uppercase_substrings:\n        str1 = re.sub(substring, '', str1)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_uppercase(string):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string.\n    \"\"\"\n    uppercase_pattern = re.compile(r'[A-Z]')\n    result = re.sub(uppercase_pattern, '', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_uppercase(string):\n    '''\n    This function takes a string as input and removes all uppercase substrings from it.\n    '''\n    pattern = re.compile(r'([a-z]+)')\n    result = pattern.sub('', string)\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    # Define regular expression pattern for uppercase characters\n    pattern = re.compile('[A-Z]+')\n\n    # Iterate over each substring in the string\n    for match in pattern.finditer(str1):\n        # Extract the substring and convert it to lowercase\n        sub_str = match.group().lower()\n        # Replace the matched substring with the lowercase substring\n        str1 = str1.replace(match.group(), sub_str)\n\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[^a-zA-Z]+', '', str1.lower())"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [item[0] for sublist in lst for item in sublist]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for item in lst:\n        result.append(item[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_list = []\n    for sublist in lst:\n        new_list.append(sublist[0])\n    return new_list"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [sublist[0] for sublist in lst]"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sublist in lst:\n        if sublist:\n            result.append(sublist[0])\n    return result"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        if sublist:\n            new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 460,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    new_lst = []\n    for sublist in lst:\n        new_lst.append(sublist[0])\n    return new_lst"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # initialize a variable to store the count of upper case characters\n    upper_count = 0\n\n    # iterate through each character in the string\n    for char in str:\n        # check if the character is uppercase\n        if char.isupper():\n            # if it is, increment the count by 1\n            upper_count += 1\n\n    # return the count of upper case characters\n    return upper_count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # Initialize a variable to store the count of upper case characters\n    count = 0\n    \n    # Loop through each character in the string\n    for char in string:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Increment the count variable if the character is uppercase\n            count += 1\n    \n    # Return the count of upper case characters\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def upper_ctr(string):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in string:\n        if char.isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper_count = 0\n    for char in str:\n        if char.isupper():\n            upper_count += 1\n    return upper_count"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # create a list of all possible combinations of the elements of the given list\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        for j in range(len(list1) - i + 1):\n            combinations.append(list1[j:j+i])\n\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(n-i+1):\n            print(' '.join(list1[j:j+i]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    n = len(list1)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            result.append(list1[i-1:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            result.append(list1[i:j])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)+1):\n            print(tuple(list1[i:j]))"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(list1)\n    result = []\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            result.append(list1[i:j])\n\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n\n    # Initialize the empty list to store the combinations\n    combinations = []\n\n    # Loop through each element in the list\n    for i in range(len(list1)):\n\n        # Create a list of length 1 to store the current element\n        current_element = [list1[i]]\n\n        # Loop through each element before it\n        for j in range(i):\n\n            # Add the previous element to the current element\n            current_element.append(list1[j])\n\n        # Append the current element to the list of all combinations\n        combinations.append(current_element)\n\n    # Return the list of all combinations\n    return combinations"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def combinations_list(lst):\n    \"\"\"\n    Generate all combinations of a given list.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            result.append([lst[i], lst[j]])\n    return result"
    },
    {
        "number": 462,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def combinations_list(lst):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    n = len(lst)\n    result = []\n    for i in range(1, n+1):\n        for j in range(i):\n            result.append(lst[j:i])\n    return result"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    This function finds the maximum product subarray of the given array.\n\n    Parameters:\n    -----------\n    arr: list\n        The given array.\n\n    Returns:\n    --------\n    int\n        The maximum product subarray of the given array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): An array of integers.\n\n    Returns:\n    int: The maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product = max(current_product * num, num)\n        max_product = max(max_product, current_product)\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_so_far = arr[0]\n    max_ending_here = 1\n    \n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n        max_product = max(max_product, max_so_far)\n        \n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    \"\"\"\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for num in arr:\n        if num < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(max_ending_here * num, num)\n        min_ending_here = min(min_ending_here * num, num)\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    max_ending_here = 1\n    min_ending_here = 1\n\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_ending_here = min_ending_here\n            min_ending_here = 1\n        else:\n            max_ending_here = max(max_ending_here * arr[i], arr[i])\n            min_ending_here = min(min_ending_here * arr[i], arr[i])\n\n        max_product = max(max_product, max_ending_here)\n\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 463,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        elif current_product < 0:\n            current_product = 1\n\n    return max_product"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for key in dict.keys():\n        if n == 1:\n            return True\n        elif dict[key]!= dict.values()[0]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()\n    if len(set(value)) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    value = dict.values()[0]\n    for val in dict.values():\n        if val!= value:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    count = 0\n    for i in range(len(dict)):\n        if dict[i] == dict[0]:\n            count += 1\n    if count == len(dict):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    all_same = True\n    for i in range(1, n):\n        if dict[i]!= dict[0]:\n            all_same = False\n            break\n    return all_same"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = list(dict.values())\n    return all(x == values[0] for x in values)"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n\n    # get all values of the dictionary\n    values = [dict[k] for k in dict.keys()]\n\n    # check if all values are same\n    if all(val == values[0] for val in values):\n        return True\n    else:\n        return False"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    values = dict.values()\n    for i in values:\n        if values.count(i) > 1:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for value in dict.values():\n        if value!= dict[next(iter(dict))]:\n            return False\n    return True"
    },
    {
        "number": 464,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return all(dict.values() == dict.values()[0])"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v is not None}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    new_dict = {}\n    for key, value in dict1.items():\n        if value!= '' and value is not None:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {k: v for k, v in dict1.items() if v}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    \"\"\"\n    return {key: value for key, value in dict1.items() if value is not None and value!= \"\"}"
    },
    {
        "number": 465,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    new_dict = {}\n    for key, value in dict1.items():\n        if value:\n            new_dict[key] = value\n    return new_dict"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize variables\n    max_ending_here = arr[0]\n    min_so_far = arr[0]\n\n    # Traverse through the array\n    for i in range(1, n):\n        # Update max_ending_here\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n        else:\n            max_ending_here = max(arr[i], max_ending_here * arr[i])\n\n        # Update min_so_far\n        min_so_far = min(min_so_far, arr[i])\n\n        # If the product of max_ending_here and min_so_far is greater than the maximum product, update it\n        if max_ending_here * min_so_far > max_product:\n            max_product = max_ending_here * min_so_far\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    # Initialize a dp array of size n\n    dp = [1] * n\n\n    # Initialize a temp array of size n\n    temp = [1] * n\n\n    # Compute the maximum product for subarray with length 1\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            temp[i] = dp[i - 1] * arr[i]\n        else:\n            temp[i] = dp[i] * arr[i]\n        dp[i] = max(temp[i], dp[i])\n\n    # Initialize the maximum product\n    max_prod = dp[0]\n\n    # Update the maximum product for subarray with length greater than 1\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            temp[i] = max(dp[i - 1] * arr[i], dp[i] * arr[i])\n        else:\n            temp[i] = max(dp[i] * arr[i], dp[i - 1] * arr[i])\n        if temp[i] > max_prod:\n            max_prod = temp[i]\n\n    return max_prod"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0]*arr[1], arr[1]*arr[0])\n    if n == 3:\n        return max(arr[0]*arr[1]*arr[2], arr[1]*arr[2]*arr[0], arr[0]*arr[2]*arr[1])\n\n    # Using Kadane's algorithm to find the maximum product\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    max_product = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here*arr[i])\n        max_product = max(max_product, max_ending_here)\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n\n    # Initialize variables for maximum product and maximum product ending at each index\n    max_product_so_far = float('-inf')\n    max_product_ending_here = 1\n\n    # Iterate through the array and find the maximum product ending at each index\n    for i in range(1, n):\n        max_product_ending_here = max(arr[i] * max_product_ending_here, arr[i] * max_product_so_far, max_product_ending_here)\n        max_product_so_far = max(max_product_ending_here, max_product_so_far)\n\n    return max_product_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_val = arr[0]\n    min_val = arr[0]\n    max_product = arr[0] * arr[1]\n\n    for i in range(2, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n            max_product = arr[i-1] * arr[i]\n        elif arr[i] < min_val:\n            min_val = arr[i]\n            max_product = arr[i-1] * arr[i]\n        else:\n            max_product = max(max_product, arr[i-1] * arr[i])\n\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_product(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    dp = [0] * n\n    max_product = max(arr[0], arr[1])\n    for i in range(2, n):\n        if arr[i] > 0:\n            dp[i] = max(arr[i] * dp[i-1], arr[i] * dp[i-2], arr[i])\n            max_product = max(max_product, dp[i])\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_product(arr):\n    # Initialize max_product and current_product variables with first element of array\n    max_product = current_product = arr[0]\n    # Loop through array from second element\n    for i in range(1, len(arr)):\n        # Calculate the product of current element and the next element of the subsequence\n        new_product = arr[i] * arr[i+1]\n        # Update max_product and current_product if the new product is greater\n        if new_product > max_product:\n            max_product = new_product\n            current_product = new_product\n        # Update current_product if the product is greater than the previous current product\n        elif new_product > current_product:\n            current_product = new_product\n    # Return the maximum product formed by the subsequence\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_product(arr):\n    n = len(arr)\n\n    if n < 2:\n        return 0\n\n    # Initialize variables\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(max_ending_here * arr[i], arr[i])\n        min_ending_here = min(min_ending_here * arr[i], arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n\n    # Initialize variables\n    max_product = float('-inf')\n    current_product = 1\n    \n    # Loop through the array\n    for i in range(len(arr)):\n        \n        # If the current number is less than the current product\n        if arr[i] < current_product:\n            \n            # Reset the current product\n            current_product = 1\n            \n            # Check if the current number is greater than the maximum product\n            if arr[i] > max_product:\n                max_product = arr[i]\n        \n        # If the current number is greater than the current product\n        else:\n            \n            # Multiply the current product with the current number\n            current_product *= arr[i]\n            \n            # Check if the current product is greater than the maximum product\n            if current_product > max_product:\n                max_product = current_product\n    \n    # Return the maximum product\n    return max_product"
    },
    {
        "number": 468,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_product(arr):\n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_ending_here = arr[0]\n    max_so_far = arr[0]\n    min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_ending_here:\n            max_ending_here = arr[i]\n            min_ending_here = arr[i]\n        elif arr[i] < max_ending_here:\n            min_ending_here = arr[i]\n\n        max_so_far = max(max_so_far, max_ending_here * min_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    if len(test_tup) <= 1:\n        return test_tup\n    else:\n        return (test_tup[0] + test_tup[1],) + add_pairwise(test_tup[2:])"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize an empty list to store the pairwise sums\n    pairwise_sum = []\n    # loop over the tuple elements\n    for i in range(len(test_tup) - 1):\n        # add the current element and the next element to get the pairwise sum\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # return the list of pairwise sums\n    return pairwise_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    \n    result = 0\n    for i in range(1, len(test_tup)):\n        result += test_tup[i-1] + test_tup[i]\n    \n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return None\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i+1]\n    return result"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # initialize a list to store the pairwise sum\n    pairwise_sum = []\n    # iterate over the first element of the tuple\n    for i in range(len(test_tup)-1):\n        # add the pairwise element to the list\n        pairwise_sum.append(test_tup[i] + test_tup[i+1])\n    # return the pairwise sum as a tuple\n    return tuple(pairwise_sum)"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return \"Tuple must have at least 2 elements\"\n    else:\n        # Initialize variables to store the sum of the neighboring elements\n        first_sum = test_tup[0] + test_tup[1]\n        second_sum = test_tup[1] + test_tup[2]\n        # Loop through the tuple and add the sum of the neighboring elements to the running sum\n        for i in range(2, len(test_tup)):\n            third_sum = first_sum + second_sum\n            first_sum = second_sum\n            second_sum = third_sum\n        # Return the final sum of the pairwise additions\n        return first_sum + second_sum"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    \"\"\"\n    # initialize variables for pairwise addition and length of the tuple\n    sum_of_pairs = 0\n    length = len(test_tup)\n    # loop through the tuple and add the neighboring elements\n    for i in range(length-1):\n        sum_of_pairs += test_tup[i] + test_tup[i+1]\n    # return the sum of the pairwise additions\n    return sum_of_pairs"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        count += test_tup[i] + test_tup[i+1]\n    return count"
    },
    {
        "number": 470,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    neighboring_elements = []\n    for i in range(len(test_tup) - 1):\n        pair = (test_tup[i], test_tup[i+1])\n        neighboring_elements.append(pair)\n    return neighboring_elements"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes in two arguments:\n    arr: A list of integers\n    n: An integer that is the modulus to be used for the multiplication\n    \n    This function calculates the product of the array multiplication modulo n and returns it.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_remainder(arr, n):\n    # Calculate the product of the array\n    product = 1\n    for num in arr:\n        product *= num\n    \n    # Calculate the remainder of the product modulo n\n    remainder = product % n\n    \n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two parameters, arr and n, which are arrays and integer, respectively. \n    It returns the remainder of the product of the array multiplication modulo n. \n    '''\n    # Finding the product of the array \n    product = 1\n    for i in arr: \n        product *= i\n\n    # Finding the remainder of the product modulo n \n    remainder = product % n\n\n    return remainder"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    Write a python function to find the product of the array multiplication modulo n.\n    \"\"\"\n\n    product = 1\n\n    for i in range(len(arr)):\n        product *= arr[i]\n\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n        product %= n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    This function takes two parameters - an array and a number n. \n    The function returns the product of the array multiplication modulo n.\n    '''\n    product = 1 \n    for i in range(len(arr)):\n        product = (product*arr[i]) % n\n    return product"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_remainder(arr, n):\n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for num in arr:\n        prod *= num\n        if prod >= n:\n            prod %= n\n    return prod"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_remainder(arr, n):\n    '''\n    This function takes two arguments - an array of integers and an integer n.\n    The function returns the remainder of the product of the array modulo n.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n"
    },
    {
        "number": 471,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_remainder(arr, n):\n    \"\"\"\n    This function finds the product of the array multiplication modulo n.\n\n    Args:\n    arr (list): The array to be multiplied.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n    \"\"\"\n\n    # Initialize the result variable to 1\n    result = 1\n\n    # Iterate through the array and multiply each element by the result\n    for i in arr:\n        result = (result * i) % n\n\n    return result"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    for i in range(len(l)-1): \n        if l[i+1] - l[i]!= 1: \n            return False \n    return True "
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    j = 1\n    while j < len(l):\n        if l[i] == l[j]:\n            print(l[i], \"is consecutive with\", l[j])\n            i += 1\n        else:\n            i = j\n            j = i + 1\n    return"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i+1] - l[i] == 1:\n            print(\"Consecutive number found at index:\", i+1)\n        else:\n            print(\"No consecutive number found.\")\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    This function takes a list as input and returns True if the list contains consecutive numbers or False otherwise.\n    \"\"\"\n    n = len(l)\n    for i in range(n):\n        if l[i]!= l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    if n < 2: \n        return \"The list contains only one number.\"\n    else: \n        for i in range(n-1): \n            if l[i] == l[i+1] - 1: \n                return \"The list contains consecutive numbers.\"\n        return \"The list does not contain consecutive numbers.\""
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    \"\"\"\n    for i in range(len(l) - 1):\n        if l[i] + 1 == l[i+1]:\n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return False\n    return True"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    n = len(l)\n    for i in range(n-1): \n        if l[i+1]-l[i] == 1: \n            return True\n    return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_Consecutive(l):\n    # initialize variables for tracking the current number and the difference between consecutive numbers\n    current = l[0]\n    difference = 1\n    \n    # loop through the list to find consecutive numbers\n    for i in range(1, len(l)):\n        # if the current number is equal to the previous number + 1, increment the difference\n        if l[i] == current + 1:\n            difference += 1\n        # if the current number is not equal to the previous number + 1, reset the difference to 1\n        else:\n            difference = 1\n            \n        # update the current number\n        current = l[i]\n    \n    # return True if all the numbers in the list are consecutive, False otherwise\n    if difference == len(l) - 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 472,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l)<2:\n        return \"The list should have at least two elements to check for consecutive numbers.\"\n    \n    for i in range(len(l)-1):\n        if l[i] + 1 == l[i+1]:\n            return True\n            \n    return False"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the unique elements in both lists\n    unique_elements = set()\n\n    # Iterate through each element in test_list1 and add it to the set if it's not already in there\n    for element in test_list1:\n        if element not in unique_elements:\n            unique_elements.add(element)\n\n    # Iterate through each element in test_list2 and check if it's in the set of unique elements in test_list1\n    # If it is, add it to the result list\n    result_list = []\n    for element in test_list2:\n        if element in unique_elements:\n            result_list.append(element)\n\n    # Return the result list\n    return result_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Create an empty set to store the intersection\n    intersection = set()\n    \n    # Iterate over both lists and add the common elements to the set\n    for element in test_list1:\n        if element in test_list2 and element not in intersection:\n            intersection.add(element)\n    \n    # Return the set as a list\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(set(test_list1))!= len(test_list1) or len(set(test_list2))!= len(test_list2):\n        print(\"Lists must contain only unique elements.\")\n        return\n    else:\n        result = []\n        for element in test_list1:\n            if element in test_list2:\n                result.append(element)\n        return result"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initialize an empty set to store the common elements\n    common_set = set()\n\n    # Iterate through each element of the first list\n    for element1 in test_list1:\n        # Check if the element exists in the second list and add it to the common set if it does\n        if element1 in test_list2:\n            common_set.add(element1)\n\n    # Convert the common set to a list and return it\n    return list(common_set)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Convert both lists to sets to remove duplicates and sort them\n    set_list1 = set(sorted(test_list1))\n    set_list2 = set(sorted(test_list2))\n\n    # Find the intersection of sets using set intersection\n    intersection = set_list1.intersection(set_list2)\n\n    # Convert the intersection set back to a list\n    intersection_list = list(intersection)\n\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Create a set of elements from both lists\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list and return it\n    return list(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersection = []\n    for t in test_list1:\n        if t in test_list2:\n            intersection.append(t)\n    return tuple(intersection)"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # create a set from the first list and then convert it to a list\n    set_1 = set(test_list1)\n    # create a set from the second list and then convert it to a list\n    set_2 = set(test_list2)\n    # find the intersection of the sets and then convert it back to a tuple\n    return tuple(set_1.intersection(set_2))"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    \"\"\"\n    # Define a set to store unique elements of the first list\n    set1 = set(test_list1)\n    # Define a set to store unique elements of the second list\n    set2 = set(test_list2)\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n    # Convert the intersection set to a list\n    intersection_list = list(intersection)\n    # Return the intersection list\n    return intersection_list"
    },
    {
        "number": 473,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # convert the given lists to sets to avoid duplicates\n    set1 = set(test_list1)\n    set2 = set(test_list2)\n    # find the intersection of the sets\n    intersection = set1.intersection(set2)\n    # convert the intersection back to tuples and return them\n    return tuple(intersection)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    # create a new string to store the modified string\n    new_str = \"\"\n    # iterate over each character in the original string\n    for char in str1:\n        # if the character is the specified character, replace it with the new character\n        if char == ch:\n            new_str += newch\n        # otherwise, add the character to the new string\n        else:\n            new_str += char\n    # return the new string\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    This function replaces all occurrences of a character in a given string with another character.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_char(str1, ch, newch):\n    \"\"\"\n    This function replaces all occurrences of a character with another character in a given string.\n    \"\"\"\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    # Convert both string and character to lists\n    str1_list = list(str1)\n    newch_list = list(newch)\n\n    # Initialize an empty string to store the modified string\n    modified_str = ''\n\n    # Loop through each character in the input string\n    for char in str1_list:\n        # If the character is the same as the search character, replace it with the new character\n        if char == ch:\n            modified_str += newch\n        # Otherwise, add the character to the modified string\n        else:\n            modified_str += char\n\n    # Return the modified string\n    return modified_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i == ch:\n            new_str += newch\n        else:\n            new_str += i\n    return new_str"
    },
    {
        "number": 474,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_char(str1, ch, newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch, newch)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    # create a Counter object from the dictionary\n    counter = Counter(dict1)\n\n    # sort the keys of the Counter object by value\n    sorted_keys = sorted(counter, key=counter.get, reverse=True)\n\n    # create a new dictionary with the sorted keys and values\n    sorted_dict = {}\n    for key in sorted_keys:\n        sorted_dict[key] = counter[key]\n\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = Counter(dict1)\n    sorted_dict = dict(sorted_dict.most_common())\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    This function sorts a dictionary by value in descending order.\n    \n    Parameters:\n    dict1 (dict): The dictionary to be sorted.\n    \n    Returns:\n    dict: The sorted dictionary.\n    \"\"\"\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Create a dictionary of frequency of characters in each word\n    freq_dict = Counter(word.lower() for word in dict1.values())\n    # Sort the dictionary by value in descending order\n    sorted_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    # Extract the keys and values from the sorted dictionary\n    sorted_keys = [key for key, _ in sorted_dict]\n    sorted_values = [value for key, value in sorted_dict]\n    # Create a new dictionary with the sorted keys and values\n    sorted_dict1 = {k:v for k,v in zip(sorted_keys, sorted_values)}\n    return sorted_dict1"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_counter = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return sorted_counter"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda x: x[1]))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Count the frequency of each value in the dictionary\n    counter = Counter(dict1.values())\n    # Sort the dictionary by value in descending order\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    \"\"\"\n    Write a function to sort a dictionary by value.\n    \"\"\"\n    count = Counter(dict1)\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    return dict(sorted_count)"
    },
    {
        "number": 475,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import Counter\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = Counter(dict1)\n    sorted_dict = dict(sorted(counter.items(), key=lambda x: x[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        return \"Array must have at least two elements\"\n    else:\n        # Initialize variables to store the largest and smallest value in the array\n        max_val = nums[0]\n        min_val = nums[0]\n        \n        # Loop through the array and find the largest and smallest value\n        for i in range(len(nums)):\n            if nums[i] > max_val:\n                max_val = nums[i]\n            elif nums[i] < min_val:\n                min_val = nums[i]\n        \n        # Return the sum of the largest and smallest value in the array\n        return max_val + min_val"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    \"\"\"\n    if not nums:\n        return 0\n    elif len(nums) == 1:\n        return nums[0]\n    else:\n        largest = max(nums)\n        smallest = min(nums)\n        return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) < 2:\n        raise ValueError(\"The array must have at least 2 elements.\")\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # initialize variables to store the largest and smallest values\n    largest = smallest = float('-inf')\n    # iterate through the array and update the largest and smallest values\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    # return the sum of the largest and smallest values\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return None, None\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num + min_num"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Sort the array in descending order\n    nums.sort(reverse=True)\n    # Find the sum of the largest and smallest values\n    largest_sum = nums[0] + nums[1]\n    smallest_sum = nums[len(nums) - 2] + nums[len(nums) - 1]\n    # Return the sum of the largest and smallest values\n    return largest_sum + smallest_sum"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    \"\"\"\n    This function takes an array of integers as input and returns the sum of the largest and smallest values in the array.\n    \"\"\"\n    largest = float('-inf')\n    smallest = float('inf')\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    return largest + smallest"
    },
    {
        "number": 476,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    # Find the largest and smallest values in the array\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Calculate the sum of the largest and smallest values\n    sum_vals = max_val + min_val\n    \n    return sum_vals"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if a given string is in lower case or not.\n    '''\n    return string.islower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to check if the given string is in lower case or not.\n    '''\n    if string.islower():\n        return True\n    else:\n        return False"
    },
    {
        "number": 477,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    # define pattern to match lowercase substrings\n    pattern = re.compile(r'\\b\\w+\\b')\n    # find all lowercase substrings in the string\n    matches = pattern.findall(str1)\n    # remove them from the string\n    for match in matches:\n        str1 = re.sub(match, '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    This function removes all lowercase substrings from a given string.\n    '''\n    # create a regular expression pattern to match lowercase substrings\n    pattern = re.compile(r'[a-z]+')\n    # find all substrings that match the pattern\n    matches = pattern.findall(string)\n    # loop through the matches and replace them with an empty string\n    for match in matches:\n        string = string.replace(match, '')\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Remove all lowercase substrings from the string\n    str1 = re.sub(r'[a-z]+', '', str1)\n    return str1"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # convert the string to lowercase\n    str1 = str1.lower()\n    \n    # split the string into substrings using regex pattern\n    pattern = r'[a-z]+'\n    substrings = re.findall(pattern, str1)\n    \n    # join the substrings with space and remove any empty substrings\n    result =''.join(substrings).strip()\n    \n    return result"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_lowercase(string):\n    pattern = r'\\b[A-Z][a-z]+\\b'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = re.compile('[a-z]+')\n    return pattern.sub('', str1)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pattern = r'[a-z]+'\n    return re.sub(pattern, '', string)"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    pattern = r'\\b[A-Z]+\\b'\n    return re.sub(pattern, '', str1.lower())"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_lowercase(string):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n\n    # Using regular expressions to find all lowercase substrings\n    matches = re.findall(r'[a-z]+', string)\n\n    # Loop through matches and remove them from string\n    for match in matches:\n        string = string.replace(match, '')\n\n    return string"
    },
    {
        "number": 478,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # Split the string into a list of words\n    words = re.findall(r'\\b\\w+\\b', str1.lower())\n    # Join the words back into a string\n    result =''.join(words)\n    # Return the new string\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Convert the given number to a string\n    num = str(n)\n    # Return the first digit of the string\n    return num[0]"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # convert the number to a string\n    num = str(n)\n    # extract the first character of the string\n    digit = num[0]\n    # convert the first character to an integer\n    first_num = int(digit)\n    # return the first number\n    return first_num"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # check if the input is a number\n    if isinstance(n, int) and not isinstance(n, bool):\n        # extract the first digit from the number\n        digit = n % 10\n        # return the first digit\n        return digit\n    else:\n        # return an error message if the input is not a number\n        return \"Error: input is not a number\""
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # Initialize the result variable to store the first digit of n\n    result = 0\n    \n    # Convert n to a string to iterate over its digits\n    n_str = str(n)\n    \n    # Iterate over each digit of n and add it to the result variable\n    for digit in n_str:\n        result += int(digit)\n    \n    # Return the result\n    return result"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    \"\"\"\n    # First, check if the number is an integer or not\n    if isinstance(n, int) == False:\n        raise ValueError(\"The input should be an integer\")\n    # If the number is an integer, then divide it by 10 and take the remainder.\n    digit = n % 10\n    # Return the digit as the first digit of the number.\n    return digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return first_Digit(n//10) + n%10"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_Digit(n):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n    \"\"\"\n    # get the first digit of the number\n    first_digit = int(str(n)[0])\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first_digit = n % 10\n    return first_digit"
    },
    {
        "number": 479,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_Digit(n):\n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return str(n)[0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [x for x in list if x % 2!= 0] "
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(lst):\n    \"\"\"\n    Write a python function which takes a list of integers and only returns the odd ones.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list):\n    '''\n    This function takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2!= 0:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(lst):\n    \"\"\"\n    This function takes a list of integers and returns the odd numbers in the list.\n    \"\"\"\n    odd_lst = []\n    for num in lst:\n        if num % 2!= 0:\n            odd_lst.append(num)\n    return odd_lst"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for num in list:\n        if num % 2 == 1:\n            odd_list.append(num)\n    return odd_list"
    },
    {
        "number": 554,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return [num for num in list if num % 2!= 0]"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n    \n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i*i*i for i in range(1,n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(range(1,n+1))\n\n    # Return the difference between the two sums\n    return sum_of_cubes - sum_of_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def difference(n):\n    # Function to calculate the sum of cubes of the first n natural numbers\n    def sum_cubes(n):\n        return sum([i**3 for i in range(1, n+1)])\n\n    # Function to calculate the sum of the first n natural numbers\n    def sum_numbers(n):\n        return sum([i for i in range(1, n+1)])\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_cubes_n = sum_cubes(n)\n\n    # Calculate the sum of the first n natural numbers\n    sum_numbers_n = sum_numbers(n)\n\n    # Calculate the difference between the two sums\n    difference = sum_cubes_n - sum_numbers_n\n\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum([i**3 for i in range(1,n+1)])\n    sum_nums = sum(range(1,n+1))\n    return abs(sum_cubes-sum_nums)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = 0\n    sum_numbers = 0\n    for i in range(1, n+1):\n        sum_cubes += i**3\n        sum_numbers += i\n    return abs(sum_cubes - sum_numbers)"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    cubes = [x**3 for x in range(1, n+1)]\n    sum_cubes = sum(cubes)\n    sum_numbers = sum(range(1, n+1))\n    return sum_cubes - sum_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def difference(n):\n    \"\"\"\n    This function calculates the difference between the sum of cubes of the first n natural numbers\n    and the sum of the first n natural numbers.\n    \"\"\"\n    first_n = list(range(1, n+1))\n    sum_of_cubes = sum([num**3 for num in first_n])\n    sum_of_numbers = sum(first_n)\n    difference = sum_of_cubes - sum_of_numbers\n    return difference"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_natural_numbers = sum(range(1, n+1))\n\n    return sum_of_cubes - sum_of_natural_numbers"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    sum_of_numbers = 0\n\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n        sum_of_numbers += i\n\n    difference = sum_of_cubes - sum_of_numbers\n    print(\"The difference between the sum of cubes of the first\", n, \"natural numbers and the sum of the first\", n, \"natural numbers is\", difference)\n"
    },
    {
        "number": 555,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def difference(n):\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cubes = sum(i**3 for i in range(1, n+1))\n    sum_nums = sum(i for i in range(1, n+1))\n    return sum_cubes - sum_nums"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # XOR of all elements of the array\n    xor_sum = sum(A)\n    count = 0\n\n    # Iterate through all pairs of elements in the array\n    for i in range(N):\n        for j in range(i+1, N):\n            xor = A[i] ^ A[j]\n            if xor & 1: # check if the result is odd\n                count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes an array A and its size N as input and returns the number of pairs whose xor value is odd.\n\n    '''\n\n    # Initialize an empty dictionary to store the count of odd xor values\n    count_odd_xor = {}\n\n    # Iterate through the array and count the number of odd xor values\n    for i in range(N):\n        xor = 0\n        for j in range(i+1, N):\n            xor ^= A[j]\n        if xor % 2 == 1:\n            if xor in count_odd_xor:\n                count_odd_xor[xor] += 1\n            else:\n                count_odd_xor[xor] = 1\n\n    # Return the count of odd xor values\n    return sum(count_odd_xor.values())"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n\n    #create a set to store the values of the array\n    A_set = set(A)\n\n    #initialize the count variable to zero\n    count = 0\n\n    #loop through the array and for each value, check if the value is present in the set of values\n    for i in A_set:\n        if i in A_set:\n            count += 1\n\n    #return the count of odd pairs\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    This function takes two lists A and N as input and returns the number of pairs whose xor value is odd.\n    '''\n    xor_value = 0\n    count = 0\n\n    for i in range(len(A)):\n        xor_value = xor_value ^ A[i]\n        count += (xor_value & 1)\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A, N):\n    '''\n    This function takes two lists A and N as input and returns the count of odd pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] % N == 1:\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] & 1 == 1: # check if xor is odd\n                count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N):\n    # initializing variables\n    count = 0\n    xor = 0\n\n    # loop through the array\n    for i in range(N):\n        xor = xor ^ A[i]\n        # if the xor value is odd, count it\n        if xor % 2!= 0:\n            count += 1\n\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A, N):\n    \"\"\"\n    Write a python function to count the number of pairs whose xor value is odd.\n    \"\"\"\n    count = 0\n    xor_value = 0\n    for i in range(N):\n        xor_value ^= A[i]\n        count += xor_value & 1\n        xor_value >>= 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N):\n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        xor = 0\n        for j in range(N):\n            if i!= j:\n                xor ^= A[i] ^ A[j]\n        if xor % 2!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A, N):\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            xor_value = A[i] ^ A[j]\n            if xor_value % 2!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.islower():\n            new_string += char.upper()\n        elif char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.islower():\n            new_char = char.upper()\n        else:\n            new_char = char.lower()\n        new_string += new_char\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    new_string = \"\"\n    for char in string:\n        if char.isupper():\n            new_string += char.lower()\n        else:\n            new_string += char.upper()\n    return new_string"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return ''.join([c.lower() if c.isupper() else c.upper() for c in string])"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    # Convert the string to a list of characters\n    char_list = list(string)\n    # Iterate over each character in the list\n    for i in range(len(char_list)):\n        # If the character is uppercase, convert it to lowercase\n        if char_list[i].isupper():\n            char_list[i] = char_list[i].lower()\n        # If the character is lowercase, convert it to uppercase\n        else:\n            char_list[i] = char_list[i].upper()\n    # Convert the list back to a string and return it\n    return ''.join(char_list)"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    \"\"\"\n    Write a function to toggle the case of all characters in a string.\n    \"\"\"\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()"
    },
    {
        "number": 557,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = 0\n    for i in range(10):\n        diff += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the integers to lists of digits\n    lst1 = [int(i) for i in str(n1)]\n    lst2 = [int(i) for i in str(n2)]\n\n    # Initialize a variable to store the sum of differences\n    difference_sum = 0\n\n    # Iterate over the digits in both lists and calculate the difference\n    for i in range(len(lst1)):\n        difference_sum += abs(lst1[i] - lst2[i])\n\n    # Return the sum of differences\n    return difference_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the two integers into a list of digits\n    num1 = [int(digit) for digit in str(n1)]\n    num2 = [int(digit) for digit in str(n2)]\n\n    # Find the minimum length of the two numbers\n    min_len = min(len(num1), len(num2))\n\n    # Initialize a variable to store the sum of differences between digits\n    digit_diff_sum = 0\n\n    # Loop through the first number and subtract the corresponding digit from the second number\n    for i in range(min_len):\n        digit_diff_sum += abs(num1[i] - num2[i])\n\n    # If the number of digits in the first number is less than the number in the second number,\n    # add the difference between the last digit of the first number and the corresponding digit in the second number\n    if len(num1) < len(num2):\n        digit_diff_sum += abs(num1[-1] - num2[-1])\n\n    # Return the sum of differences between digits\n    return digit_diff_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_diff = 0\n    for i in range(10):\n        if n1 // 10 ** i!= n2 // 10 ** i:\n            sum_diff += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Convert the integers to lists of digits\n    num1_digits = list(str(n1))\n    num2_digits = list(str(n2))\n\n    # Initialize the sum of differences to zero\n    total_diff = 0\n\n    # Iterate through each digit in both lists\n    for i in range(len(num1_digits)):\n        # Calculate the difference between the two digits\n        digit_diff = abs(int(num1_digits[i]) - int(num2_digits[i]))\n\n        # Add the difference to the total sum\n        total_diff += digit_diff\n\n    # Return the total sum of differences\n    return total_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # Convert the numbers to strings, since we'll need to compare them as strings\n    str1 = str(n1)\n    str2 = str(n2)\n    \n    # Initialize variables to keep track of the sum and the largest difference seen so far\n    sum_diff = 0\n    max_diff = 0\n    \n    # Loop over the digits of each number and calculate the difference between them\n    for i, digit1 in enumerate(str1):\n        diff = int(digit1) - int(digit2)\n        sum_diff += diff\n        if diff > max_diff:\n            max_diff = diff\n            \n    # Return the sum of the differences and the largest difference seen so far\n    return sum_diff, max_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Get the length of the input integers\n    n1_len = len(str(n1))\n    n2_len = len(str(n2))\n\n    # Compare the lengths of the integers and add up the differences\n    digit_sum = 0\n    for i in range(max(n1_len, n2_len)):\n        # Extract the i-th digit from both integers\n        d1 = int(str(n1)[i])\n        d2 = int(str(n2)[i])\n\n        # Calculate the per-digit difference and add it to the sum\n        digit_diff = abs(d1 - d2)\n        digit_sum += digit_diff\n\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n\n    # Calculate the difference between the two numbers\n    diff = n1 - n2\n\n    # Convert the difference to a string and split it into individual digits\n    digits_diff = str(abs(diff))[::-1]\n\n    # Initialize the sum of per-digit differences to zero\n    sum_diff = 0\n\n    # Loop through the individual digits and add their difference to the sum\n    for digit in digits_diff:\n        sum_diff += int(digit)\n\n    return sum_diff"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    diff = n1 - n2\n    digit_sum = 0\n    while diff > 0:\n        digit_sum += diff % 10\n        diff //= 10\n    return digit_sum"
    },
    {
        "number": 558,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    \"\"\"\n    Write a python function to find the sum of the per-digit difference between two integers.\n    \"\"\"\n    # initialize the sum to 0\n    total_sum = 0\n    \n    # loop through each digit in both numbers\n    for i in range(max(len(str(n1)), len(str(n2)))):\n        # extract the i-th digit from both numbers\n        digit1 = n1 % 10\n        digit2 = n2 % 10\n        \n        # calculate the absolute difference between the digits\n        diff = abs(digit1 - digit2)\n        \n        # add the difference to the sum\n        total_sum += diff\n        \n        # shift the numbers to remove the i-th digit\n        n1 //= 10\n        n2 //= 10\n        \n    # return the total sum\n    return total_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sub_array_sum(arr, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(size):\n        current_sum += arr[i]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = max(a[i], curr_sum + a[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n    start = 0\n\n    for i in range(size):\n        current_sum += a[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n            start = i\n\n    return max_sum, start"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 1:\n        return 0\n    \n    max_sum = a[0]\n    current_sum = a[0]\n    \n    for i in range(1, size):\n        current_sum = max(current_sum + a[i], a[i])\n        max_sum = max(max_sum, current_sum)\n        \n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return max(a)\n    elif size == len(a):\n        return sum(a)\n    else:\n        max_ending_here = max_sub_array_sum(a, size-1)\n        max_so_far = max(max_ending_here, a[size-1])\n        return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    current_sum = 0\n    for i in range(size):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 1:\n        return a[0]\n    if size == 2:\n        return max(a[0], a[1])\n\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    a (list): list of integers\n    size (int): size of the sublist to consider\n\n    Returns:\n    int: sum of the largest contiguous sublist in the given list\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')  # initialize max_sum to negative infinity\n    current_sum = 0\n\n    # Iterate over the list and calculate the sum of the current sublist\n    for i in range(size):\n        current_sum += a[i]\n\n        # If the current sublist sum is greater than max_sum, update max_sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    # Return the maximum sum of the sublist\n    return max_sum"
    },
    {
        "number": 559,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sub_array_sum(arr, size):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    :param arr: List of integers\n    :param size: Integer, size of the sublist to find\n    :return: Integer, sum of the largest contiguous sublist in the given list\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(size):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n    return max_sum"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # use set to convert tuple to set, and then convert it back to tuple\n    result_set = set(test_tup1).union(set(test_tup2))\n    result_tuple = tuple(result_set)\n    # sort the elements in the result tuple and return it\n    return sorted(result_tuple)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = test_tup1 + test_tup2\n    union_list = sorted(list(set(union_list)))\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Use set to get unique elements from both tuples\n    unique_elems = set(test_tup1) | set(test_tup2)\n    # Convert set to list and sort it\n    union_list = sorted(list(unique_elems))\n    # Return the union list\n    return union_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Create a new tuple with the union of the elements of the two input tuples\n    union_set = test_tup1.union(test_tup2)\n    # Convert the set to a sorted list and return it\n    return sorted(list(union_set))"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n\n    # Find the union of the two tuples\n    union_tup = test_tup1 + test_tup2\n\n    # Sort the union tuple in ascending order\n    union_tup = sorted(union_tup)\n\n    # Print the union tuple\n    print(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = test_tup1 + test_tup2\n    union = sorted(list(set(union)))\n    print(union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Find the union of the two tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    \n    # Convert the set to a list and sort it in ascending order\n    union_list = sorted(list(union_set))\n    \n    # Output the union of the two tuples in sorted order\n    print(\"The union of the two tuples is:\", union_list)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create a set to store the union of the two input tuples\n    union_set = set(test_tup1) | set(test_tup2)\n    # convert the set to a list and sort it\n    sorted_list = sorted(list(union_set))\n    # return the sorted list\n    return sorted_list"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # Using set to find the union of elements in the tuples\n    union = set(test_tup1) | set(test_tup2)\n    \n    # Sorting the union elements in ascending order\n    sorted_union = sorted(union)\n    \n    # Printing the union elements\n    print(sorted_union)"
    },
    {
        "number": 560,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    \"\"\"\n    # Combine the two tuples and sort it in ascending order\n    combined_tuple = sorted(set(test_tup1 + test_tup2))\n    # Print the sorted tuple\n    print(\"The union of elements of {} and {} is: {}\".format(test_tup1, test_tup2, combined_tuple))"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 1\n    current_length = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n    max_length = max(max_length, current_length)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i:j+1]) > longest:\n                longest = len(lst[i:j+1])\n    return longest"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        current_length += 1\n        if current_length > max_length:\n            max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if max_length < len(lst[j])-len(lst[i]):\n                max_length = len(lst[j])-len(lst[i])\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    # initialize max length to 0\n    max_length = 0\n    # loop through the list and for each element, update max_length\n    for i in range(len(lst)):\n        # loop through the remaining elements starting from the current index\n        for j in range(i+1, len(lst)):\n            # check if the sublist between the current index and the next index has more elements than the current sublist\n            if len(lst[i:j+1]) > max_length:\n                max_length = len(lst[i:j+1])\n    # return max length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    length = 0\n\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            length = j-i+1\n            if length > max_length:\n                max_length = length\n\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0  \n    for i in range(len(lst)):  \n        for j in range(i+1, len(lst)):  \n            length = len(lst[j]) - len(lst[i])  \n            if length > max_length:  \n                max_length = length  \n    return max_length  \n  \n"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    for i in range(len(lst)):\n        if lst[i] == lst[i+1] or lst[i] == lst[i-1]:\n            current_length += 1\n        else:\n            if current_length > max_length:\n                max_length = current_length\n            current_length = 0\n    if current_length > max_length:\n        max_length = current_length\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in range(len(lst)):\n        if i == 0:\n            max_length = 1\n        elif lst[i]!= lst[i-1]:\n            max_length += 1\n        else:\n            max_length = max(max_length, 1)\n    return max_length"
    },
    {
        "number": 562,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    longest = 0\n    current = 0\n    \n    for elem in lst:\n        current += 1\n        \n        if current > longest:\n            longest = current\n        \n        if current == 1:\n            current = 0\n    \n    return longest"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_values(text):\n    pattern = r'\\\"(.*?)\\\"'\n    matches = re.findall(pattern, text)\n    return matches\n\ntext = \"I have a \\\"quote\\\" in my sentence.\"\nresult = extract_values(text)\nprint(result)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(\"(?:\\\\.|[^\"])*\")'\n    matches = re.findall(pattern, text)\n    return [match[1:-1] for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"' # regular expression pattern to find values between quotation marks\n    values = re.findall(pattern, text) # extract all values between quotation marks\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<!\\\\)\"((?:\\\\.|[^\"])*)\"'\n    matches = re.findall(pattern, text)\n    return [match.strip('\"') for match in matches]"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'(?<=\")(.*)(?=\")'\n    return re.findall(pattern, text)"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Write a function to extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_values(text):\n    '''\n    This function extracts values between quotation marks from a string.\n    '''\n    pattern = r'(?<=[\\'\"])(\\w+)([\\'\"]|$)'\n    matches = re.finditer(pattern, text)\n    values = [match.group(1) for match in matches]\n    return values"
    },
    {
        "number": 563,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_values(text):\n    \"\"\"\n    Extract values between quotation marks from a string.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_Pairs(arr, n):\n    # Create a hash table to store the frequency of each element in the array\n    freq = {}\n    for i in range(n):\n        freq[arr[i]] = freq.get(arr[i], 0) + 1\n\n    # Initialize the count to zero\n    count = 0\n\n    # Iterate through the hash table and check if the frequency of each element is 1\n    for i in range(n):\n        if freq[arr[i]] == 1:\n            # Check if the remaining elements are different from the current element\n            for j in range(i+1, n):\n                if arr[j]!= arr[i]:\n                    count += 1\n\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_Pairs(arr, n): \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_Pairs(arr, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_Pairs(arr, n):\n    '''\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_Pairs(arr, n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 564,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_Pairs(arr, n):\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split(word):\n    \"\"\"\n    Write a python function to split a string into characters.\n    \"\"\"\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Convert the string to a list of characters\n    char_list = list(word)\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # Initialize an empty list to store the characters\n    char_list = []\n\n    # Loop through each character in the string\n    for char in word:\n        # Append the character to the list\n        char_list.append(char)\n\n    # Return the list of characters\n    return char_list"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split(word):\n    '''\n    This function takes a string and splits it into characters.\n    '''\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    # initialize an empty string to store the characters\n    characters = \"\"\n    # loop through each character in the string\n    for char in word:\n        # add each character to the characters string\n        characters += char\n    # return the characters string\n    return characters"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split(word):\n    return list(word)"
    },
    {
        "number": 565,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert n to a string and split it into a list of characters\n    num_str = str(n)\n    num_list = list(num_str)\n    \n    # initialize a variable to store the sum of the digits\n    sum_digits = 0\n    \n    # loop through each character in the list of characters and add its value to the sum\n    for digit in num_list:\n        sum_digits += int(digit)\n    \n    # return the sum of the digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and split it into a list of digits\n    digits = list(str(n))\n    # Initialize a variable to hold the sum of the digits\n    total = 0\n    # Loop through each digit in the list and add it to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum of the digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string and then convert it to a list of digits\n    digits = [int(digit) for digit in str(n)]\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Iterate over each digit in the list and add it to the total\n    for digit in digits:\n        total += digit\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # convert the integer to a list of digits\n    digits = [int(d) for d in str(n)]\n    # calculate the sum of the digits\n    return sum(digits)"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the number to a string so that we can access individual digits\n    num_str = str(n)\n    # Initialize a variable to store the sum of digits\n    sum_digits = 0\n    # Iterate through each digit of the number\n    for digit in num_str:\n        # Convert the digit to an integer and add it to the sum of digits\n        sum_digits += int(digit)\n    # Return the sum of digits\n    return sum_digits"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    # Convert integer to string and iterate over each digit\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        # Add the digit to the sum\n        sum += digit\n        # Remove the last digit from the integer\n        n //= 10\n    # Return the sum\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Convert the integer to a string\n    s = str(n)\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Loop through each digit of the string\n    for digit in s:\n        # Convert the digit to an integer and add it to the total\n        total += int(digit)\n    # Return the total\n    return total"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Initialize sum to 0\n    sum = 0\n    \n    # Loop through each digit of the integer\n    while n > 0:\n        # Get the last digit of the integer\n        digit = n % 10\n        \n        # Add the digit to the sum\n        sum += digit\n        \n        # Remove the last digit of the integer\n        n //= 10\n        \n    # Return the sum of the digits\n    return sum"
    },
    {
        "number": 566,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    \"\"\"\n    Write a function to get the sum of the digits of a non-negative integer.\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    # Initialize a variable to store the sum of digits\n    total = 0\n    # Iterate over the digits and add them to the total\n    for digit in digits:\n        total += int(digit)\n    # Return the total sum of digits\n    return total"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) > 1:\n        for i in range(len(list1)-1):\n            if list1[i] > list1[i+1]:\n                return False\n        return True\n    else:\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n\n    # Check if the list is empty\n    if len(list1) == 0:\n        return True\n\n    # Check if the first element is less than the last element\n    if list1[0] > list1[-1]:\n        return False\n\n    # Check if the list is sorted\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def issort_list(lst):\n    \"\"\"\n    This function takes a list as input and returns True if the list is sorted in ascending order,\n    and False otherwise. The function checks if the list is empty or if the first element is smaller than the second element,\n    then iterates over the list and checks if each element is smaller than the previous element.\n    \"\"\"\n    if not lst:\n        return True\n    elif lst[0] >= lst[1]:\n        return False\n    else:\n        for i in range(1, len(lst)):\n            if lst[i] < lst[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def issort_list(lst):\n    \"\"\"\n    Write a function to check whether a specified list is sorted or not.\n    \"\"\"\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    else:\n        for i in range(1, len(list1)):\n            if list1[i] < list1[i-1]:\n                return False\n        return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True"
    },
    {
        "number": 567,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) < 2:\n        return True\n    \n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def empty_list(length):\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def empty_list(length):\n    \"\"\"\n    Write a function to create a list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}] * length"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Traverse through each sublist of list1\n    for i in range(len(list1)):\n        # Sort the sublist using sorted()\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = sorted(list1[i][j])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists.\n    \"\"\"\n\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if isinstance(list1[i][j], list):\n                list1[i][j] = sort_sublists(list1[i][j])\n            elif isinstance(list1[i][j], str):\n                list1[i][j] = list1[i][j].lower()\n        list1[i] = sorted(list1[i])\n    return list1"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 569,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        sublist.sort()"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    # create a set to remove duplicates from the lists\n    unique_nums = set(nums)\n    # convert the set back to a list\n    result = list(unique_nums)\n    return result"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    unique_nums = []\n    for num_list in nums:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Create a dictionary to store the count of each number\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    \n    # Filter out the numbers that appear only once\n    unique_nums = [num for num, count in num_count.items() if count == 1]\n    \n    # Remove duplicates from the list of unique numbers\n    unique_nums = list(set(unique_nums))\n    \n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Convert the input list of lists to a single list\n    all_nums = [num for sublist in nums for num in sublist]\n    # Create a set from the list of unique numbers\n    unique_nums = set(all_nums)\n    # Create a list of lists where each sublist contains only unique numbers\n    unique_sublists = [sublist for sublist in nums if len(sublist) == len(set(sublist))]\n    # Create a list of lists where each sublist contains only unique numbers and no duplicates\n    unique_no_duplicates_sublists = [sublist for sublist in unique_sublists if len(set(sublist)) == len(sublist)]\n    # Return the list of unique numbers\n    return unique_no_duplicates_sublists"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    # Create an empty dictionary to store unique numbers\n    unique_nums = {}\n    \n    # Loop through each list in the input list\n    for i in range(len(nums)):\n        # Loop through each element in the current list\n        for j in range(len(nums[i])):\n            # If the current element is not already in the unique_nums dictionary, add it\n            if nums[i][j] not in unique_nums:\n                unique_nums[nums[i][j]] = True\n    \n    # Convert the dictionary to a list of unique numbers\n    unique_list = list(unique_nums.keys())\n    \n    # Return the unique list\n    return unique_list"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    # Initialize an empty list to store unique numbers from each list\n    unique_nums = []\n    \n    # Loop through each list in the input list\n    for lst in nums:\n        # Loop through each number in the current list\n        for num in lst:\n            # If the number is not already in the unique_nums list, add it\n            if num not in unique_nums:\n                unique_nums.append(num)\n    \n    # Return the unique_nums list\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n    \"\"\"\n    unique_nums = set()\n    for num_list in nums:\n        for num in num_list:\n            unique_nums.add(num)\n    return list(unique_nums)"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list containing the unique numbers from the original list.\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"
    },
    {
        "number": 572,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = []\n\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n\n    return unique_nums"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    # create a set to store unique numbers from the list\n    unique_set = set(list_data)\n\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_set:\n        product *= num\n\n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = set(list_data)  # create a set of unique numbers from the input list\n    product = 1  # initialize the product to 1\n    \n    for num in unique_nums:\n        product *= num  # multiply the current product by the unique number\n    \n    return product  # return the final product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set from the list_data to get the unique numbers\n    unique_numbers = set(list_data)\n    \n    # Calculate the product of the unique numbers\n    product = 1\n    for number in unique_numbers:\n        product *= number\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    unique_nums = set(list_data)\n    product = 1\n    \n    for num in unique_nums:\n        product *= num\n        \n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # convert the list to set to remove duplicates\n    set_data = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in set_data:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # Create a set to store unique numbers\n    unique_nums = set(list_data)\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    \"\"\"\n    This function takes a list as input and returns the product of the unique numbers in the list.\n    \"\"\"\n    # create a set from the input list to get only unique values\n    unique_set = set(list_data)\n    \n    # initialize a variable to store the product of the unique numbers\n    product = 1\n    \n    # iterate over the unique set and calculate the product of each number\n    for num in unique_set:\n        product *= num\n    \n    # return the product\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    # create a set of unique numbers in the list\n    unique_nums = set(list_data)\n    # calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product"
    },
    {
        "number": 573,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_numbers = []\n    for i in list_data:\n        if i not in unique_numbers:\n            unique_numbers.append(i)\n\n    product = 1\n    for i in unique_numbers:\n        product *= i\n\n    return product"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    # pi is a mathematical constant\n    pi = 3.14159265359\n\n    # calculate the surface area of the cylinder\n    surface_area = pi * (r**2) + 2*pi * r * h + pi * (r**2)\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = math.pi * r**2 # use math library to calculate area of cylinder\n    volume = area * h # calculate volume of cylinder by multiplying area by height\n    surface_area = 2 * math.pi * r * h # use math library to calculate surface area of cylinder\n    return surface_area # return surface area of cylinder"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n    \"\"\"\n\n    # calculating the surface area of the base\n    base_area = 2 * pi * r * r\n\n    # calculating the surface area of the top and side walls\n    top_area = pi * r * r + pi * r * h\n    side_area = 2 * pi * r * h\n\n    # adding the surface areas of the base and top and side walls to find the total surface area of the cylinder\n    total_area = base_area + top_area + side_area\n\n    return total_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    \"\"\"\n    Write a function to find the surface area of a cylinder.\n\n    :param r: radius of the cylinder\n    :type r: float\n    :param h: height of the cylinder\n    :type h: float\n    :return: surface area of the cylinder\n    :rtype: float\n    \"\"\"\n\n    # calculate surface area using formula for a circle\n    area = 2 * pi * r * r  # pi is a mathematical constant\n    volume = pi * r ** 2 * h  # volume of the cylinder\n\n    # calculate and return the surface area of the cylinder\n    surface_area = area + 2 * pi * r * h + 2 * pi * h * r + pi * r ** 2\n\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*r*r + 2*3.14*r*h + 2*3.14*(h/2)**2\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = 2 * math.pi * r * h\n    return surface_area"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*3.14159*r*r + 2*3.14159*r*h + 2*3.14159*h*h\n    return surfacearea\n\nr = float(input(\"Enter the radius of the cylinder: \"))\nh = float(input(\"Enter the height of the cylinder: \"))\nprint(\"The surface area of the cylinder is:\", surfacearea_cylinder(r,h))"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * 3.14159 * r * r + 2 * 3.14159 * r * h + 2 * 3.14159 * h * h"
    },
    {
        "number": 574,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    \n    # Calculate the volume of the cylinder\n    volume = (3/5)*pi*(r**2)*h\n    \n    # Calculate the surface area of the cylinder\n    surface_area = (2*pi*r*h) + (2*pi*r**2*h/3)\n    \n    # Return the surface area\n    return surface_area\n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return \"Error: A should be shorter than B.\"\n\n    # Traverse through B and check if each element is present in A \n    for i in range(len(B)):\n        if B[i] not in A:\n            return \"Error: B does not contain all elements of A.\"\n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(A) > len(B):\n        return \"A is not a sublist of B\"\n    if len(B) > len(A):\n        return \"B is not a sublist of A\"\n\n    for i in range(len(A)):\n        if B[i] not in A:\n            return \"B is not a sublist of A\"\n        j = 0\n        while j < len(B) and i + j < len(A) and B[j] == A[i + j]:\n            j += 1\n        if j == len(B):\n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    # check if the list is sublist of the list itself\n    if A in A: \n        return True\n\n    # check if the list is sublist of any part of the list\n    for i in range(len(A)): \n        if B in A[i:]: \n            return True\n\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    \"\"\"\n    This function checks whether a list A is a sublist of list B or not.\n    \"\"\"\n    if len(A) > len(B):\n        return False\n    elif len(A) == 0:\n        return True\n    else:\n        for i in range(len(B)-len(A)+1):\n            if A == B[i:i+len(A)]:\n                return True\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Sub_Array(A, B):\n    i, j = 0, 0\n    while i < len(A) and j < len(B):\n        if A[i] == B[j]:\n            i += 1\n            j += 1\n        elif A[i] > B[j]:\n            i += 1\n        else:\n            j += 1\n    if i == len(A):\n        return True\n    else:\n        return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n\n    if len(B) > len(A): \n        return False \n\n    i = 0 \n    j = 0 \n\n    while j < len(B): \n\n        if B[j] == A[i]: \n            i += 1 \n            j += 1 \n\n        elif i > 0 and B[j]!= A[i-1]: \n            i = 0 \n            j += 1 \n\n        else: \n            return False \n\n    return True"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function takes two lists A and B as input, and returns True if B is a sublist of A, else False.\n    \"\"\"\n    if len(A) < len(B):\n        return False\n    for i in range(len(A)-len(B)+1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Sub_Array(A, B):\n    \"\"\"\n    This function checks whether a list is sublist of another or not.\n\n    Args:\n        A: list\n            A list to check whether it is sublist or not.\n        B: list\n            Another list to check whether it is sublist or not.\n\n    Returns:\n        bool\n            Returns True if A is sublist of B else False.\n    \"\"\"\n    for i in range(len(B)):\n        if B[i] in A:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n\n    if len(A) >= len(B): \n        for i in range(len(A)): \n            if A[i] not in B: \n                return False\n        return True \n\n    else: \n        for i in range(len(B)): \n            if B[i] not in A: \n                return False\n        return True \n"
    },
    {
        "number": 576,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    i = 0 \n    j = 0\n    n = len(A) \n    m = len(B) \n    \n    while i < n and j < m: \n        if A[i] == B[j]: \n            i += 1 \n            j += 1 \n        else: \n            i = i - j + 1 \n            j = 0\n            \n    if j == m: \n        return True\n    else: \n        return False"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # initialize a variable to store the factorial \n    factorial = 1 \n\n    # loop through each digit in the number \n    while n > 0: \n\n        # take the last digit of the number and add it to the factorial \n        factorial *= n % 10\n\n        # remove the last digit from the number \n        n //= 10\n\n    # return the last digit of the factorial \n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #initialize variables\n    last_digit = 0\n    count = 1\n\n    #loop through each digit in the factorial and keep track of the last one\n    while count <= n:\n        last_digit = n // 10\n        count += 1\n    \n    #return the last digit\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n\n    # Initialize the factorial variable\n    factorial = 1\n    \n    # Loop through each digit of n and multiply it by the factorial\n    while n >= 10:\n        factorial *= n % 10\n        n //= 10\n    \n    # Return the last digit of the factorial\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    This function takes a positive integer as input and returns the last digit of the factorial of the input number.\n    \"\"\"\n    # Calculate the factorial of the input number\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n\n    # Calculate the last digit of the factorial\n    last_digit = factorial % 10\n\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        print(\"Factorial of negative number is not defined.\")\n        return\n    else:\n        factorial = 1\n        while n > 0:\n            factorial = factorial * n\n            n = n - 1\n        return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n):\n    \"\"\"\n    Write a python function to find the last digit in factorial of a given number.\n    \"\"\"\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    return factorial % 10"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    This function takes a positive integer n as input and returns the last digit in its factorial.\n    For example: If the input number is 120, the output should be 0.\n    '''\n\n    # Convert the input number to a string\n    n_str = str(n)\n\n    # Find the length of the string\n    length = len(n_str)\n\n    # Calculate the factorial of the first digit\n    first_digit_factorial = 1\n    for i in range(1, length+1):\n        first_digit_factorial *= int(n_str[i-1])\n\n    # Find the last digit in the factorial of the first digit\n    last_digit_factorial = first_digit_factorial % 10\n\n    return last_digit_factorial"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # initialize variables\n    factorial = 1\n    last_digit = 0\n    # loop through each digit in the number\n    for i in range(len(str(n))):\n        # find the factorial of the current digit\n        digit_factorial = 1\n        for j in range(1, i+1):\n            digit_factorial *= j\n        # add the current digit factorial to the total factorial\n        factorial *= digit_factorial\n    # find the last digit of the factorial\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 577,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    last_digit = factorial % 10\n    return last_digit"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    result = []\n    i = 0\n    j = 0\n    k = 0\n    \n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        elif list1[i] == list2[j]:\n            result.append(list2[j])\n            i += 1\n            j += 1\n        elif list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    \n    while i < len(list1):\n        result.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        result.append(list2[j])\n        j += 1\n    \n    while k < len(list3):\n        result.append(list3[k])\n        k += 1\n    \n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i = 0\n    while i < len(list1):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n        i += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def interleave_lists(list1, list2, list3):\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    i = 0\n    flat_list = []\n    while i < len(list1) and i < len(list2) and i < len(list3):\n        flat_list.append(list1[i])\n        flat_list.append(list2[i])\n        flat_list.append(list3[i])\n        i += 1\n    if i < len(list1):\n        flat_list.extend(list1[i:])\n    if i < len(list2):\n        flat_list.extend(list2[i:])\n    if i < len(list3):\n        flat_list.extend(list3[i:])\n    return flat_list"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    i, j, k = 0, 0, 0\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        if list1[i] < list2[j] and list1[i] < list3[k]:\n            result.append(list1[i])\n            i += 1\n        elif list2[j] < list1[i] and list2[j] < list3[k]:\n            result.append(list2[j])\n            j += 1\n        else:\n            result.append(list3[k])\n            k += 1\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    if len(list1)!= len(list2)!= len(list3):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def interleave_lists(list1, list2, list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result"
    },
    {
        "number": 578,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    \"\"\"\n    # check if all lists have same length\n    if len(list1)!= len(list2) or len(list2)!= len(list3):\n        raise ValueError(\"All lists must have the same length.\")\n    \n    # initialize an empty list to store the interleaved lists\n    interleaved_list = []\n    \n    # loop through the lists and add each element to the interleaved list\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    \n    return interleaved_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    # Create an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through the first tuple\n    for i in range(len(test_tup1)):\n        # If the element in the first tuple is not equal to the element in the second tuple\n        if test_tup1[i]!= test_tup2[i]:\n            # Add the element to the dissimilar list\n            dissimilar_list.append(test_tup1[i])\n    # Return the dissimilar list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar_list = []\n    # Loop through the first tuple and compare each element to the second tuple\n    for elem1 in test_tup1:\n        # If the element is not in the second tuple, add it to the dissimilar_list\n        if elem1 not in test_tup2:\n            dissimilar_list.append(elem1)\n    # Return the dissimilar_list\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    This function takes two tuples as input and returns a list of elements that are present in\n    one tuple but not in the other tuple.\n    \"\"\"\n    dissimilar_set = set(test_tup1) - set(test_tup2)\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # convert the tuples to lists\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    # create an empty set to store the dissimilar elements\n    dissimilar_set = set()\n    # loop through each element in the first list\n    for elem1 in lst1:\n        # check if the element is present in the second list\n        if elem1 not in lst2:\n            # if the element is not present in the second list, add it to the dissimilar set\n            dissimilar_set.add(elem1)\n    # return the dissimilar elements in a list\n    return list(dissimilar_set)"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Convert the tuples to lists\n    list1 = list(test_tup1)\n    list2 = list(test_tup2)\n    # Initialize an empty list to store the dissimilar elements\n    dissimilar = []\n    # Loop through each element of the first tuple\n    for i in range(len(list1)):\n        # Check if the element is not present in the second tuple\n        if list1[i] not in list2:\n            # If it is not, add it to the dissimilar list\n            dissimilar.append(list1[i])\n    # Return the dissimilar list\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to find the dissimilar elements in the given two tuples.\n    \"\"\"\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n    return dissimilar"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_list.append(test_tup1[i])\n    return dissimilar_list"
    },
    {
        "number": 579,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n\n    # Combine the two tuples into a single list\n    combined_list = test_tup1 + test_tup2\n\n    # Count the frequency of each element in the combined list\n    element_freq = {}\n    for elem in combined_list:\n        if elem in element_freq:\n            element_freq[elem] += 1\n        else:\n            element_freq[elem] = 1\n\n    # Find the dissimilar elements\n    dissimilar_elements = []\n    for key, value in element_freq.items():\n        if value!= 1:\n            dissimilar_elements.append(key)\n\n    return dissimilar_elements"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('The input should be a tuple.')\n    # check if all elements in the tuple are tuples\n    if not all(isinstance(ele, tuple) for ele in test_tuple):\n        raise TypeError('All elements in the tuple should be tuples.')\n    # initialize an empty list to store even elements\n    even_list = []\n    # loop through the tuple and check if each element is even using the given function\n    for ele in test_tuple:\n        if even_fnc(ele):\n            even_list.append(ele)\n    # return the even list\n    return even_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n    \"\"\"\n    def remove_uneven(lst):\n        \"\"\"\n        Helper function to remove uneven elements from a list.\n        \"\"\"\n        return [x for x in lst if even_fnc(x)]\n\n    def is_even(x):\n        \"\"\"\n        Helper function to check if an element is even.\n        \"\"\"\n        return x % 2 == 0\n\n    return remove_uneven(test_tuple)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n\n    # Define a function to check if the element is even or odd\n    def is_even(x):\n        if x % 2 == 0:\n            return True\n        else:\n            return False\n\n    # Check if the function is valid\n    if not callable(even_fnc):\n        raise TypeError('The second argument must be a callable function.')\n\n    # Check if the tuple is valid\n    if not isinstance(test_tuple, tuple):\n        raise TypeError('The first argument must be a tuple.')\n\n    # Initialize the result list\n    result = []\n\n    # Loop through each element of the nested tuple\n    for elem in test_tuple:\n        # Check if the element is even using the custom function\n        if is_even(elem):\n            # If the element is even, append it to the result list\n            result.append(elem)\n        else:\n            # If the element is odd, call the even_fnc function to process it\n            even_fnc(elem)\n\n    # Return the result list\n    return result"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    uneven_elements = []\n    for i in test_tuple:\n        if not even_fnc(i):\n            uneven_elements.append(i)\n    return uneven_elements\n\ndef is_even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for item in test_tuple:\n        if even_fnc(item):\n            new_tuple.append(item)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    # Check if the input is a tuple\n    if not isinstance(test_tuple, tuple):\n        print(\"Input must be a tuple!\")\n        return\n\n    # Check if the input tuple contains only lists and tuples\n    for elem in test_tuple:\n        if not isinstance(elem, (list, tuple)):\n            print(\"All elements in the tuple must be lists or tuples!\")\n            return\n\n    # Check if the input tuple contains only lists and tuples containing only even numbers\n    for elem in test_tuple:\n        if not all(isinstance(n, int) and n % 2 == 0 for n in elem):\n            print(\"All elements in a nested tuple must contain only even numbers!\")\n            return\n\n    # Remove uneven elements from the nested tuples\n    result_list = []\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            result_list.append(even_fnc(elem))\n        else:\n            result_list.append(elem)\n    return result_list"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    result = []\n    for i in test_tuple:\n        if isinstance(i, (list, tuple)):\n            result.append(even_ele(i, even_fnc))\n        else:\n            result.append(even_fnc(i))\n    return tuple(result)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            new_tuple.append(even_ele(i, even_fnc))\n        else:\n            if even_fnc(i):\n                new_tuple.append(i)\n    return new_tuple\n\ndef even(x):\n    return x % 2 == 0"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    test_tuple (tuple): a tuple of mixed elements (tuples, lists, etc.)\n    even_fnc (function): a function to check if a value is even or odd\n\n    Returns:\n    tuple: a new tuple with the uneven elements removed\n    '''\n\n    # Define a list to store the even elements\n    even_list = []\n\n    # Loop through the tuple and add even elements to the even_list\n    for element in test_tuple:\n        if even_fnc(element):\n            even_list.append(element)\n\n    # Convert the even_list to a tuple and return it\n    return tuple(even_list)"
    },
    {
        "number": 580,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc):\n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def _remove_uneven(sub_tuple):\n        return [even_fnc(sub_elem) for sub_elem in sub_tuple]\n\n    result = []\n    for sub_tuple in test_tuple:\n        if isinstance(sub_tuple, tuple):\n            result.append(_remove_uneven(sub_tuple))\n        else:\n            result.append(sub_tuple)\n\n    return result"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for surface area of a square pyramid\n    # Surface Area = 2 * (base * height)\n    # where base is the base edge of the pyramid and height is the height of the pyramid\n    surface = 2 * (b * s)\n    return surface\n"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of each side of the square pyramid\n    side1 = b * b\n    side2 = s * s\n    side3 = b * s\n    \n    # Calculate the surface area of the pyramid\n    surface = 2 * (side1 + side2 + side3)\n    \n    return surface"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def surface_Area(base, height):\n    '''\n    This function takes in two arguments, base and height, and returns the surface area of a square pyramid.\n    '''\n    area = (base * height) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Formula for the surface area of a square pyramid:\n    # A = 2 * base * height\n    # where A is the surface area, b is the base edge, and h is the height\n    surface_area = 2 * b * s\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def surface_Area(b, s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = (b * s) / 2\n    return area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 2*(b*s + b*s + s*s)\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Calculate the area of the base\n    base_area = b*b\n    \n    # Calculate the height of the pyramid\n    pyramid_height = s\n    \n    # Calculate the area of the pyramid\n    pyramid_area = (base_area * pyramid_height)\n    \n    # Calculate the surface area of the pyramid\n    surface_area = 2 * base_area + 6 * pyramid_height + pyramid_area\n    \n    # Return the surface area of the pyramid\n    return surface_area"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def surface_Area(base, height):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = 0.5 * base * height\n    print(\"The surface area of the square pyramid is:\", area)"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def surface_Area(b,s):\n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2*(b+s)*s - b**2*s**2"
    },
    {
        "number": 581,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 2 * (b * s) + (2 * b * b)"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    \"\"\"\n    Write a function to check if a dictionary is empty\n    \"\"\"\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 582,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(\"The dictionary is empty\")\n    else:\n        print(\"The dictionary is not empty\")"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    catalan = [1]\n    for i in range(2, num+1):\n        catalan.append((2*i - 1) // (i + 1))\n        for j in range(i-1):\n            catalan[j] += catalan[j+1]\n    return catalan[num-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (2*num-1) // (num+1)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # Initialize the first two catalan numbers\n    catalan_numbers = [1, 1]\n\n    # Calculate the next catalan numbers\n    for i in range(2, num + 1):\n        catalan_numbers.append(sum(catalan_numbers[-i:]))\n\n    # Return the nth catalan number\n    return catalan_numbers[-1]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Calculate the nth Catalan number.\n    \"\"\"\n    if num == 0:\n        return 1\n    elif num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) + catalan_number(num-2)*2"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number using the formula C(n, k) = binomial(n, k) * k! / (k! * (n-k)!)\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return binomial(n, k) * factorial(k) / factorial(n - k)\n\ndef factorial(n):\n    \"\"\"\n    Returns n! using the fact that n! = n * (n-1) *... * 1\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef binomial(n, k):\n    \"\"\"\n    Returns the binomial coefficient C(n, k) using the formula C(n, k) = binomial(n, k) * k! / (k! * (n-k)!)\n    \"\"\"\n    if k > n or k < 0:\n        return 0\n    elif k == 0 or k == n:\n        return 1\n    else:\n        return factorial(n) // (factorial(k) * factorial(n - k))"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The number must be non-negative.\")\n\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n - 1) + catalan_number(n - 2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    # calculate the factorial of num and num!\n    factorial = 1\n    num_factorial = 1\n    for i in range(1, num+1):\n        factorial *= i\n        num_factorial *= i\n    # calculate the catalan number\n    catalan = factorial // (num_factorial * num)\n    return catalan"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    \"\"\"\n    Write a function which returns nth catalan number.\n    \"\"\"\n    # Catalan numbers are calculated using the formula:\n    # C(n,k) = (n-k)! / k!(n-k-1)!\n    # Hence, we can calculate the first n Catalan numbers using the formula:\n    # C(n,k) = C(n,n-k+1)\n    # and store them in a list.\n    # Then, the nth Catalan number is the (n-1)th element of the list.\n    catalan_list = [0] * (num + 1)\n    for i in range(1, num + 1):\n        for j in range(1, i + 1):\n            catalan_list[i] += catalan_list[j] * catalan_list[i - j]\n    return catalan_list[num]"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def catalan_number(n):\n    \"\"\"\n    Returns the nth catalan number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return catalan_number(n-1) + catalan_number(n-2)"
    },
    {
        "number": 583,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number using the formula:\n\n    C(n,k) = binomial(n,k) * (k!) / ((n-k)! * k!)\n\n    where n is the total number of elements in the set and k is the number of elements chosen.\n\n    This function uses recursion to calculate the Catalan numbers.\n    \"\"\"\n\n    def binomial(n, k):\n        \"\"\"\n        This function calculates the binomial coefficient using recursion.\n        \"\"\"\n        if n == 0 or k == 0 or k == n:\n            return 1\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    if n == 0:\n        return 1\n    else:\n        return binomial(n, n) * catalan_number(n-1) / catalan_number(n-2)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the regular expression pattern for finding adverbs ending with ly\n    pattern = r'\\b[aeiou]\\w*ly\\b'\n\n    # Use re.finditer() function to find all occurrences of the pattern in the text\n    matches = re.finditer(pattern, text)\n\n    # Initialize an empty list to store the adverb and its position in the text\n    adverbs = []\n\n    # Loop through all the matches and add the adverb and its position to the adverbs list\n    for match in matches:\n        adverb = text[match.start():match.end()]\n        adverbs.append((adverb, match.start()))\n\n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Regular expression to match adverbs ending with 'ly'\n    pattern = r'\\b[a-zA-Z]*ly\\b'\n    # Find all the adverbs in the text using the given pattern\n    matches = re.findall(pattern, text)\n    # Loop through all the matches and find their positions in the text\n    for i, match in enumerate(matches):\n        # Split the match into words\n        words = match.split()\n        # Check if the last word is 'ly'\n        if words[-1] == 'ly':\n            # If it is, return the position of the match and the position of the 'ly' word\n            return i, len(match) - len(words[-1])"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_adverbs(text):\n    # Define the pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-zA-Z]+ly\\b'\n    \n    # Use the re.finditer() method to iterate over all matches of the pattern in the text\n    matches = re.finditer(pattern, text)\n    \n    # Initialize a list to store the adverb and its position(s)\n    adverbs = []\n    \n    # Iterate over the matches and append the adverb to the adverbs list and its position(s)\n    for match in matches:\n        adverb = match.group()\n        position = match.start()\n        adverbs.append((adverb, position))\n        \n    # Return the list of adverbs and their positions\n    return adverbs"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b'\n    matches = re.findall(pattern, text)\n    positions = []\n    for match in matches:\n        positions.append(text.find(match))\n    return positions"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\bly\\b' # Regular expression to find adverbs ending with \"ly\"\n    matches = re.findall(pattern, text) # Find all the matches using the regular expression\n    if matches:\n        for match in matches:\n            start, end = match.span() # Get the start and end positions of the match\n            print(f\"Adverb found: {text[start:end]} (start: {start}, end: {end})\")\n    else:\n        print(\"No adverbs found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n\n    # Compile a regular expression pattern to match adverbs ending with \"ly\"\n    pattern = r'\\b[a-z]*ly\\b'\n\n    # Find all non-overlapping occurrences of the pattern in the text\n    matches = re.findall(pattern, text, flags=re.IGNORECASE)\n\n    # Create a dictionary to store the positions of the matches\n    positions = {}\n\n    # Iterate through the matches and add their positions to the dictionary\n    for i, match in enumerate(matches):\n        positions[match] = i\n\n    # Sort the positions dictionary by position\n    sorted_positions = sorted(positions.items(), key=lambda x: x[1])\n\n    # Return the first adverb ending with \"ly\" and its position\n    return sorted_positions[0]"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Define the pattern for finding adverbs ending with \"ly\"\n    pattern = r'\\b(\\w+ly)\\b'\n    # Use re.findall() to find all matches in the text and return a list of tuples\n    adverbs = re.findall(pattern, text)\n    # Initialize an empty list to store the positions of the adverbs\n    positions = []\n    # Loop through each match and append its position to the positions list\n    for match in adverbs:\n        positions.append(text.find(match))\n    # Return the positions list as a tuple\n    return tuple(positions)"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w+ly\\b'\n    matches = re.findall(pattern, text)\n    positions = [m.start() for m in re.finditer(pattern, text)]\n    \n    if matches:\n        print(f\"The first adverb ending with 'ly' is '{matches[0]}' and its position is {positions[0]}\")\n    else:\n        print(\"No adverbs ending with 'ly' found.\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Using regular expressions to find all occurrences of adverbs ending with ly\n    matches = re.findall(r'\\b(ly)\\b', text, re.IGNORECASE)\n    \n    # Printing the matches\n    for i in range(len(matches)):\n        print(f\"{i+1}. {matches[i]}\")"
    },
    {
        "number": 584,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'\\b\\w*[aeiou]\\w*\\b(?<![\\w-])ly\\b\\w*[\\w-]*\\b'\n    matches = re.finditer(pattern, text, re.IGNORECASE)\n    positions = []\n    for match in matches:\n        positions.append(match.start())\n    return positions"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input, and\n    returns a list of the n most expensive items in the dataset.\n    '''\n    # Use a min heap to keep track of the n most expensive items\n    heap = []\n    for item in items:\n        # If the heap is at capacity, remove the smallest item from it\n        if len(heap) == n:\n            heapq.heappop(heap)\n        # Add the new item to the heap\n        heapq.heappush(heap, item)\n    # Return the n most expensive items in the dataset\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of items.\n        n (int): The number of items to return.\n\n    Returns:\n        list: A list of the n most expensive items in the dataset.\n    \"\"\"\n    # Use heapq to create a min-heap of size n.\n    heap = []\n    for item in items:\n        heapq.heappush(heap, -item)\n\n    # Pop the largest n items from the heap and return them as a list.\n    return [-heapq.heappop(heap) for _ in range(n)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # heapq module is used to implement a priority queue data structure\n    # heapq module provides O(log n) time complexity for adding and removing items from the heap\n    # heapq module also ensures that the smallest items are at the beginning of the heap\n    # in this case, we want to find the n most expensive items, so we will use a max heap with negative values\n    # where negative values represent the expenditure amount of the items\n    heap = []\n    for item in items:\n        if len(heap) < n:\n            heapq.heappush(heap, -item)\n        elif -heap[0] > item:\n            heapq.heappop(heap)\n            heapq.heappush(heap, -item)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Convert the items to a min heap of (price, item) pairs\n    heap = [(item[0], item) for item in items]\n    # Use heapq.nlargest() to find the n largest items and return their prices\n    return [price for _, item in heapq.nlargest(n, heap)]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    This function takes a list of items and an integer n as input and returns\n    the n most expensive items in the dataset.\n    \"\"\"\n\n    # We'll use a min heap to keep track of the n most expensive items.\n    heap = []\n\n    # Iterate through the items in the dataset.\n    for item in items:\n        # If the heap is empty or the current item is more expensive than the\n        # smallest item in the heap, add the current item to the heap.\n        if not heap or heapq.heappop(heap) < item:\n            heapq.heappush(heap, item)\n\n        # If we've found n items in the heap, break out of the loop.\n        if len(heap) == n:\n            break\n\n    # Return the items in the heap, which are the n most expensive items.\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n    \"\"\"\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq\n\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # Create a heap of n items\n    min_heap = [heapq.nsmallest(n, items)]\n    # Iterate through the remaining items\n    for item in items:\n        # If the heap is not full, add the item to the heap\n        if len(min_heap[-1]) < n:\n            heapq.heappush(min_heap[-1], item)\n        # If the heap is full, remove the smallest item from the heap and add the new item\n        else:\n            heapq.heappushpop(min_heap, item)\n    # Return the n most expensive items\n    return min_heap[-1]"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and an integer n as input.\n    It returns a list of the n most expensive items from the given dataset.\n    '''\n    heap = []\n    for item in items:\n        heapq.heappush(heap, item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    '''\n    This function takes a list of items and returns the n most expensive items.\n    '''\n    # Use a min heap to store the n most expensive items\n    heap = []\n    for item in items:\n        if len(heap) < n or item < heap[0]:\n            heapq.heappush(heap, item)\n        elif item > heap[0]:\n            heapq.heappop(heap)\n    return heap"
    },
    {
        "number": 585,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq\n\ndef expensive_items(items, n):\n    # Convert the list of items into a heap\n    heap = items\n    \n    # Use a max heap to store the n most expensive items\n    max_heap = []\n    \n    # Extract the first n elements of the heap and store them in the max heap\n    for _ in range(n):\n        max_heap.append(heapq.heappop(heap))\n    \n    # Extract the remaining elements of the heap and store them in the max heap\n    while heap:\n        max_heap.append(heapq.heappop(heap))\n        \n    # Return the max heap as a list of items\n    return max_heap"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        first = l[:n]\n        second = l[n:]\n        return second + first\n    else:\n        print(\"List should have at least\", n, \"elements.\")"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Error: Index out of range.\")\n        return None\n    else:\n        arr = [l[i] for i in range(n)]\n        for i in range(len(arr)):\n            l.append(arr[i])\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return \"Index out of range.\"\n    if n == 0:\n        return [l[0]] + l[1:]\n    else:\n        return l[:n] + [l[n]] + split_Arr(l[n+1:], n-1)"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    \"\"\"\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    \"\"\"\n    if len(l) < n:\n        return \"List should be at least {} long\".format(n)\n    else:\n        return l[:n] + l[n:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        print(\"Invalid input. n should be less than the length of the list.\")\n        return\n    else:\n        first_part = l[:n]\n        last_part = l[n:]\n        l.extend(first_part)\n        print(\"The first part of the list is:\", first_part)\n        print(\"The last part of the list is:\", last_part)\n        return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + [l[n]] + l[n+1:]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    if n >= len(l):\n        raise ValueError(\"n is greater than or equal to the length of the list\")\n    return l[n:] + l[:n]"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    # Check if the length of the list is less than n\n    if len(l) < n:\n        print(\"The length of the list should be greater than or equal to n\")\n        return\n\n    # Split the list at the nth element\n    mid = len(l) // 2\n    left = l[:mid]\n    right = l[mid:]\n\n    # Add the first part of the list to the end of the right part\n    l = left + right\n\n    return l"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        print(\"List should have at least\", n, \"elements\")\n        return None\n    elif n < 0:\n        print(\"Index cannot be negative\")\n        return None\n    else:\n        mid = n // 2\n        first = l[:mid]\n        second = l[mid:]\n        return first + second"
    },
    {
        "number": 586,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) >= n:\n        # split the list at the nth element\n        mid = len(l) // 2\n        first = l[:mid]\n        second = l[mid:]\n        # add the first part to the end of the second part\n        l = first + second\n    return l"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def list_tuple(lst):\n    '''\n    This function takes a list as input and returns a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def list_tuple(lst):\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def list_tuple(lst):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(lst)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 587,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    \"\"\"\n    Write a python function to find the difference between largest and smallest value in a given list.\n    \"\"\"\n    # Find the largest and smallest value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    # Return the difference between the two values\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return None\n    max_val = max(nums)\n    min_val = min(nums)\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_num = min(nums)\n    max_num = max(nums)\n    return max_num - min_num\n"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    # Find the maximum and minimum value in the list\n    max_val = max(nums)\n    min_val = min(nums)\n    \n    # Return the difference between the maximum and minimum value\n    return max_val - min_val"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    return largest - smallest"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    This function takes a list of numbers as input and returns the difference between the largest and smallest value in the list.\n    '''\n    if len(nums) == 0:\n        return \"Error: List is empty\"\n    elif len(nums) == 1:\n        return \"Error: List has only one element\"\n    else:\n        max_num = max(nums)\n        min_num = min(nums)\n        return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sort the list in ascending order\n    nums.sort()\n    \n    # Find the largest and smallest value in the list\n    largest = nums[-1]\n    smallest = nums[0]\n    \n    # Calculate the difference between largest and smallest\n    diff = largest - smallest\n    \n    # Return the difference\n    return diff"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if not nums:\n        return 0\n\n    min_num = float('inf')\n    max_num = float('-inf')\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n\n    return max_num - min_num"
    },
    {
        "number": 588,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return \"The list should have at least two elements\"\n    \n    largest = nums[0]\n    smallest = nums[0]\n    \n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    \n    return largest - smallest"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        square = int(i**0.5)\n        if i == square**2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    squares = []\n    i = a\n    while i <= b:\n        squares.append(i**2)\n        i += 1\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Iterate through all possible squares between a and b\n    for i in range(a, b+1):\n        # Check if the square is a perfect square\n        if i**2 == a or i**2 == b:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    # Create an empty list to store perfect squares\n    perfect_squares_list = []\n    # Iterate through each number between the two given numbers\n    for num in range(a, b+1):\n        # Check if the square of the current number is a perfect square\n        if num ** 0.5 == int(num ** 0.5):\n            # If it is, add it to the list of perfect squares\n            perfect_squares_list.append(num ** 2)\n    # Return the list of perfect squares\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    # Loop through all the integers between a and b\n    for i in range(a, b+1):\n        # Calculate the square of the current integer\n        square = i**2\n        # Check if the square is a perfect square\n        if square == int(square**0.5 + 0.5) ** 2:\n            print(i)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b + 1):\n        if i**2 == a or i**2 == b:\n            print(i**2)"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i**2 == a or i**2 == b:\n            squares.append(i**2)\n    return squares"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    result = []\n    for i in range(a, b+1):\n        if i**2 == a**2 + b**2:\n            result.append(i)\n    return result"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    perfect_squares_list = []\n    for num in range(a, b+1):\n        if num == int(num**0.5) ** 2:\n            perfect_squares_list.append(num)\n    return perfect_squares_list"
    },
    {
        "number": 589,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    \"\"\"\n    Write a function to find perfect squares between two given numbers.\n    \"\"\"\n    squares = []\n    for i in range(a, b+1):\n        if i == int(i**0.5)**2:\n            squares.append(i)\n    return squares"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import cmath\n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r*cmath.cos(theta)\n    y = r*cmath.sin(theta)\n    return x,y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return r * cmath.exp(1j * theta)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates to rectangular coordinates.\n\n    Args:\n    r (float): The radius of the circle.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the x and y coordinates.\n    \"\"\"\n\n    # Convert angle to radians\n    theta = theta * cmath.pi / 180\n\n    # Calculate rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    theta = cmath.phase(x+y*1j)\n    x_rect = r*cmath.cos(theta)\n    y_rect = r*cmath.sin(theta)\n    return x_rect, y_rect"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Write a function to convert polar coordinates to rectangular coordinates.\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return x, y"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    This function takes the polar coordinates (r, theta) and converts them to rectangular coordinates.\n    \"\"\"\n    # Convert polar coordinates to rectangular coordinates\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x,y)"
    },
    {
        "number": 590,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import cmath\n\ndef polar_rect(x,y):\n    r = cmath.sqrt(x**2 + y**2)\n    theta = cmath.acos(x/r)\n    if y < 0:\n        theta = 2*cmath.pi - theta\n    return r*cmath.cos(theta), r*cmath.sin(theta)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    if len(newList) > 1:\n        # interchange the first and last elements in the list\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    \"\"\"\n    Write a python function to interchange the first and last elements in a list.\n    \"\"\"\n    # Check if the list is not empty\n    if len(newList) == 0:\n        return \"The list is empty.\"\n    \n    # Check if the list has only one element\n    elif len(newList) == 1:\n        return \"The list has only one element.\"\n    \n    # Check if the list has two or more elements\n    else:\n        # Swap the first and last elements\n        newList[0], newList[-1] = newList[-1], newList[0]\n        \n        # Return the swapped list\n        return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n\n    # get the length of the list\n    length = len(newList)\n\n    # check if the list has at least 2 elements\n    if length < 2:\n        print(\"The list must have at least 2 elements to swap them.\")\n        return\n\n    # swap the first and last elements\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    print(\"The swapped list is: \", newList)"
    },
    {
        "number": 591,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # check if the list has at least two elements\n    if len(newList) < 2:\n        print(\"The list must have at least two elements.\")\n        return None\n    \n    # swap the first and last elements\n    newList[0], newList[-1] = newList[-1], newList[0]\n    \n    return newList"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n\n    # Initialize sum variable to 0\n    sum_coeff = 0\n\n    # Iterate over all possible values of n and k\n    for i in range(n+1):\n        for j in range(k+1):\n            # Calculate the binomial coefficient and add it to the sum variable\n            sum_coeff += (n-i+1) * (k-j+1) * (i+j+1) / ((i+1) * (j+1))\n\n    # Return the final sum variable\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k):\n    \"\"\"\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n    # Initialize a counter for the binomial coefficients\n    count = 0\n\n    # Calculate the binomial coefficient recursively\n    def binomial(n, k):\n        \"\"\"\n        Recursive function to calculate the binomial coefficient.\n        \"\"\"\n        # Base case: if k is equal to 0, return 1\n        if k == 0:\n            return 1\n        # Base case: if k is equal to n, return 1\n        elif k == n:\n            return 1\n        # Recursive case: calculate the binomial coefficient and add it to the sum\n        else:\n            return binomial(n-1, k-1) + binomial(n-1, k)\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(1, k+1):\n        sum += binomial(n, i) * binomial(n, k-i)\n\n    # Return the sum of the product of consecutive binomial coefficients\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Check if n is greater than or equal to k\n    if n < k:\n        return 0\n\n    # Initialize variables\n    sum = 0\n    num = 1\n    den = 1\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(k, n+1):\n        product = num * den\n        sum += product\n        num += 1\n        den += 1\n\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum_product = 0\n    for i in range(k, n+1):\n        product = 1\n        for j in range(1, i+1):\n            product *= j\n        sum_product += product\n    return sum_product"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k == 0:\n        return 1\n    elif k == n:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k-1) * (n-k+1)"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        prod = 1\n        for j in range(i,min(i+k,n)+1):\n            prod *= j\n        sum += prod\n    return sum"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def binomial_Coeff(n, k):\n    '''\n    This function finds the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # Initialize variables\n    c = 1\n    p = 1\n\n    # Calculate the binomial coefficient\n    for i in range(1, k + 1):\n        c *= (n + 1 - i) // i\n        p *= i\n\n    return c * p"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 1\n    for i in range(k): \n        result *= (n-i)\n    for i in range(k): \n        result *= i+1\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def binomial_Coeff(n, k):\n    # Check if k is greater than n\n    if k > n:\n        raise ValueError(\"k should not be greater than n\")\n\n    # Initialize variables\n    coeff = 1\n    sum_coeff = 0\n\n    # Calculate the binomial coefficient using the formula\n    for i in range(1, k + 1):\n        coeff *= n - i + 1\n        coeff /= i\n        sum_coeff += coeff\n\n    return sum_coeff"
    },
    {
        "number": 592,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n\n    # initialize variables\n    sum_product = 0\n    binomial_coef = 1\n\n    # iterate through the range of k values\n    for i in range(k,n+1):\n        binomial_coef = (i * binomial_coef) // (i - k + 1)\n        sum_product += binomial_coef\n\n    # return the final sum_product\n    return sum_product"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r'^\\d+(\\.\\d+)?$', r'\\1', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+([1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.0+([1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.0+([1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])\\.0+([1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-5])$', r'\\1\\2\\3\\4', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r'^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    match = re.match(pattern, ip)\n    if match:\n        return match.group(1) + '.' + match.group(2) + '.' + match.group(3) + '.' + match.group(4)\n    else:\n        return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('^0+', '', ip)\n    return ip"
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pattern = r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\"\n    if re.match(pattern, ip):\n        return re.sub(r\"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", \"\", ip)\n    else:\n        return \"Invalid IP address.\""
    },
    {
        "number": 593,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub(r\"^0+(?=\\d)\", \"\", ip)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # check if list1 is a list\n    if not isinstance(list1, list):\n        return \"Error: List should be a list.\"\n    # check if the list has at least two elements\n    if len(list1) < 2:\n        return \"Error: List should have at least two elements.\"\n    # initialize variables for even and odd numbers\n    even_num = None\n    odd_num = None\n    # iterate through the list and find the even and odd numbers\n    for num in list1:\n        if num % 2 == 0:\n            if even_num is not None:\n                return \"Error: There are two even numbers in the list.\"\n            even_num = num\n        else:\n            if odd_num is not None:\n                return \"Error: There are two odd numbers in the list.\"\n            odd_num = num\n    # check if even_num and odd_num are not None\n    if even_num is None or odd_num is None:\n        return \"Error: There are no even or odd numbers in the list.\"\n    # find the difference between even_num and odd_num and return it\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = [num for num in list1 if num % 2 == 0]\n    odd = [num for num in list1 if num % 2!= 0]\n    if len(even) == 0 or len(odd) == 0:\n        return None\n    else:\n        return abs(even[0] - odd[0])"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += i\n        else:\n            odd += i\n    return even - odd"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n            if count == 2:\n                break\n    return list1[count] - list1[0]"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def diff_even_odd(lst):\n    '''\n    This function takes a list as input and returns the difference between the first even and the first odd number in the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            if i == 0:\n                return 0\n            else:\n                return lst[i] - lst[i-1]\n    return None"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n\n    even_num = None\n    odd_num = None\n\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n\n    if even_num is None or odd_num is None:\n        print(\"There is no even or odd number in the list.\")\n        return\n\n    diff = even_num - odd_num\n    print(\"The difference of the first even and first odd number is:\", diff)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    diff = even[0] - odd[0]\n    return diff"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_num = None\n    odd_num = None\n    for num in list1:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2!= 0 and odd_num is None:\n            odd_num = num\n    if even_num is None or odd_num is None:\n        return None\n    return abs(even_num - odd_num)"
    },
    {
        "number": 594,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            return list1[i] - list1[0]\n        elif list1[i] % 2 == 1:\n            return list1[0] - list1[i]"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n\n    # Find the common bits between the binary numbers\n    common_bits = bin1 & bin2\n\n    # Count the number of bits that differ\n    count = 0\n    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            count += 1\n\n    # Calculate the minimum number of swaps required to convert the binary numbers\n    min_swaps = count // 2\n    if count % 2 == 1:\n        min_swaps += 1\n\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Swaps(str1, str2):\n    # Convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize variables\n    count = 0\n    carry = 0\n\n    # Iterate through each bit of the binary strings\n    while num1!= 0 or num2!= 0:\n        # Get the value of the current bits\n        bit1 = num1 & 1\n        bit2 = num2 & 1\n\n        # Calculate the sum of the bits and the carry\n        new_bit = bit1 ^ bit2 ^ carry\n\n        # Update the carry\n        carry = (bit1 & bit2) | (bit1 & carry) | (bit2 & carry)\n\n        # Update the count\n        count += 1\n\n        # Update the binary number represented as an integer\n        num1 = num1 >> 1\n        num2 = num2 >> 1\n\n    # If the carry is still 1, there are still bits that need to be swapped\n    if carry == 1:\n        count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one to the other.\n    '''\n    # Convert the binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n\n    # Initialize two variables to keep track of the number of swaps required\n    swaps = 0\n    diff = num1 - num2\n\n    # Iterate through the bits of the binary numbers\n    for i in range(32):\n        # If the bit of the first number is 1 and the bit of the second number is 0, swap the bits\n        if (num1 & (1 << i))!= 0 and (num2 & (1 << i)) == 0:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n\n        # If the bit of the second number is 1 and the bit of the first number is 0, swap the bits\n        elif (num2 & (1 << i))!= 0 and (num1 & (1 << i)) == 0:\n            num1 ^= (1 << i)\n            num2 ^= (1 << i)\n            swaps += 1\n\n    # If there is a carry bit in the first number, swap it with the carry bit of the second number\n    if (num1 & (1 << 31))!= 0 and (num2 & (1 << 31)) == 0:\n        num1 ^= (1 << 31)\n        num2 ^= (1 << 31)\n        swaps += 1\n\n    # If there is a carry bit in the second number, swap it with the carry bit of the first number\n    elif (num2 & (1 << 31))!= 0 and (num1 & (1 << 31)) == 0:\n        num1 ^= (1 << 31)\n        num2 ^= (1 << 31)\n        swaps += 1\n\n    # If the two binary numbers are equal, return the number of swaps required\n    if num1 == num2:\n        return swaps\n\n    # If the two binary numbers are different, check if the smallest one can be swapped with the other\n    else:\n        # Initialize a variable to keep track of the minimum number of swaps required\n        min_swaps = float('inf')\n\n        # Iterate through all possible swaps\n        for i in range(32):\n            # If the bit of the first number is 1 and the bit of the second number is 0, swap the bits and check the number of swaps required\n            if (num1 & (1 << i))!= 0 and (num2 & (1 << i)) == 0:\n                # Swap the bits and check the number of swaps required\n                num1 ^= (1 << i)\n                num2 ^= (1 << i)\n                swaps_temp = min_Swaps(str(num1), str(num2))\n                swaps_temp -= 1\n                swaps += swaps_temp\n\n                # If the number of swaps required is less than the current minimum, update the minimum\n                if swaps_temp < min_swaps:\n                    min_swaps = swaps_temp\n\n                # Swap the bits back and check the number of swaps required\n                num1 ^= (1 << i)\n                num2 ^= (1 << i)\n                swaps_temp = min_Swaps(str(num1), str(num2))\n                swaps_temp -= 1\n                swaps += swaps_temp\n\n        # Return the minimum number of swaps required\n        return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Swaps(str1, str2):\n    n = len(str1)\n    arr = list(str1)\n    visited = [False] * n\n\n    # initialize the first string with 0\n    arr[0] = 0\n\n    # find the minimum number of swaps\n    for i in range(1, n):\n        if visited[i]:\n            continue\n        j = 0\n        while j < n and not visited[j]:\n            j += 1\n        if j == n:\n            break\n        if arr[i] > arr[j]:\n            # swap arr[i] and arr[j]\n            arr[i], arr[j] = arr[j], arr[i]\n            visited[i] = True\n            visited[j] = True\n            i -= 1\n        else:\n            break\n\n    # count the number of swaps\n    count = 0\n    for i in range(n):\n        if arr[i]!= str2[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Swaps(str1, str2):\n    # Convert the strings to binary numbers\n    bin1 = int(str1, 2)\n    bin2 = int(str2, 2)\n    \n    # Initialize variables to store the count of swaps\n    count = 0\n    i = 0\n    \n    # While bin1 and bin2 are not equal\n    while bin1!= bin2:\n        \n        # If the least significant bit of bin1 is not equal to the least significant bit of bin2, swap the bits and increment count\n        if (bin1 & 1)!= (bin2 & 1):\n            bin1 = bin1 ^ 1\n            bin2 = bin2 ^ 1\n            count += 1\n        \n        # Increment the binary numbers by 2\n        bin1 = bin1 >> 1\n        bin2 = bin2 >> 1\n        \n        # Increment the count of swaps\n        i += 1\n    \n    # Return the count of swaps\n    return count"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Swaps(str1, str2):\n    # Initialize variables\n    n = len(str1)\n    swaps = 0\n    i = j = 0\n\n    # Iterate through the two strings and swap the digits as per the rules\n    while i < n and j < n:\n        if str1[i] == str2[j]:\n            i += 1\n            j += 1\n        else:\n            if str1[i] > str2[j]:\n                str1[i], str1[j] = str1[j], str1[i]\n                swaps += (str2[j] - str1[i])\n                i += 1\n            else:\n                str2[j], str2[i] = str2[i], str2[j]\n                swaps += (str1[i] - str2[j])\n                j += 1\n\n    # If the remaining digits in str1 is greater than the remaining digits in str2, then swap the digits from str1 to str2\n    while i < n:\n        str1[i], str1[j] = str1[j], str1[i]\n        swaps += (str1[i] - str2[j])\n        i += 1\n        j += 1\n\n    # If the remaining digits in str2 is greater than the remaining digits in str1, then swap the digits from str2 to str1\n    while j < n:\n        str2[j], str2[i] = str2[i], str2[j]\n        swaps += (str2[j] - str1[i])\n        i += 1\n        j += 1\n\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert both strings to binary format\n    binary1 = bin(int(str1))[2:]\n    binary2 = bin(int(str2))[2:]\n    # Compare the lengths of the two binary strings\n    if len(binary1) < len(binary2):\n        # Pad the shorter string with zeros to make it the same length as the longer string\n        binary1 = '0'*(len(binary2)-len(binary1))+binary1\n    elif len(binary1) > len(binary2):\n        # Pad the longer string with zeros to make it the same length as the shorter string\n        binary2 = '0'*(len(binary1)-len(binary2))+binary2\n    # Create a dictionary to store the minimum number of swaps required to convert each pair of digits\n    swap_dict = {'0': 0, '1': 0}\n    # Iterate through each pair of digits in the two binary strings\n    for i in range(len(binary1)):\n        if binary1[i]!= binary2[i]:\n            # If the digits are not equal, add the corresponding pair of swaps to the swap_dict\n            swap_dict[binary1[i]] += 1\n            swap_dict[binary2[i]] += 1\n            # Decrement the swaps required for the current digits in the swap_dict\n            swap_dict[binary1[i]] -= 1\n            swap_dict[binary2[i]] -= 1\n    # Find the minimum number of swaps required to convert each pair of digits in the two binary strings\n    min_swaps = min(swap_dict.values())\n    return min_swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Swaps(str1, str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Convert the two binary strings to integers\n    int1 = int(str1, 2)\n    int2 = int(str2, 2)\n\n    # Initialize variables to store the number of swaps and current positions of 1's in str1 and str2\n    swaps = 0\n    pos1 = 0\n    pos2 = 0\n\n    # Iterate over the integers from least significant bit to most significant bit\n    while int1!= int2:\n        # Check if the integer has a 1 in its least significant bit\n        if int1 & 1 == 1:\n            # If it does, swap the two positions in str1 and str2\n            str1 = str1[:pos1] + str1[pos1+1:]\n            str2 = str2[:pos2] + str2[pos2+1:]\n            # Increment the number of swaps and move the current positions to the next ones\n            swaps += 1\n            pos1 += 1\n            pos2 += 1\n        # If the integer has a 0 in its least significant bit, move the current positions to the next ones\n        int1 >>= 1\n        int2 >>= 1\n\n    # Return the minimum number of swaps required to convert str1 to str2\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Swaps(str1, str2):\n    \"\"\"\n    This function takes two binary numbers represented as strings as input and returns the minimum number of swaps required to convert one binary number to another.\n    \"\"\"\n    if len(str1)!= len(str2):\n        raise ValueError(\"Both binary numbers should have the same length.\")\n    n = len(str1)\n    swaps = 0\n    temp = []\n    for i in range(n):\n        if str1[i]!= str2[i]:\n            temp.append(i)\n        else:\n            temp.append(-1)\n    for i in range(n):\n        if temp[i] == -1:\n            continue\n        if temp[i] < i:\n            temp[temp[i]] = i\n            swaps += 1\n        else:\n            temp[i] = -1\n    return swaps"
    },
    {
        "number": 595,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Swaps(str1, str2):\n    # convert binary strings to integers\n    num1 = int(str1, 2)\n    num2 = int(str2, 2)\n    # count number of swaps required to convert num1 to num2\n    count = 0\n    while num1!= num2:\n        if num1 > num2:\n            num1 = num1 ^ (num1 & -num1)\n            count += 1\n        else:\n            num2 = num2 ^ (num2 & -num2)\n            count += 1\n    return count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import sys\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_count = 0\n    for i in tuple_list:\n        byte_count += sys.getsizeof(i)\n    return byte_count"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sys.stdout.write(\"Enter the size of the tuple: \")\n    size = int(input())\n    size_in_bytes = size * sys.getsizeof(tuple_list[0])\n    return size_in_bytes"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += sys.getsizeof(item)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import sys\n\ndef tuple_size(tuple_list):\n    \"\"\"\n    Write a function to find the size in bytes of the given tuple.\n    \"\"\"\n    size = sys.getsizeof(tuple_list)\n    return size"
    },
    {
        "number": 596,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import sys \n\ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    # initializing the variable to store the size\n    size = 0\n\n    # iterating through the tuple\n    for element in tuple_list:\n        # calculating the size of each element in bytes\n        element_size = sys.getsizeof(element)\n        # adding the element size to the total size\n        size += element_size\n\n    # returning the total size of the tuple\n    return size"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n        elif arr1[i] > arr2[j]:\n            if k == 1:\n                return arr2[j]\n            k -= 1\n            j += 1\n        else:\n            if k == 1:\n                return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    if i == len(arr1) and j < len(arr2):\n        return arr2[j]\n    elif j == len(arr2) and i < len(arr1):\n        return arr1[i]\n    else:\n        raise ValueError(\"kth element does not exist in the two arrays\")"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function finds the kth smallest element from two sorted arrays.\n    \"\"\"\n    # Initialize two pointers i and j to point to the first elements of the arrays\n    i = j = 0\n\n    # Initialize a variable to store the kth smallest element\n    kth_smallest = float('inf')\n\n    # Loop until one of the pointers reaches the end of one of the arrays\n    while i < len(arr1) and j < len(arr2):\n        # If the current element of the first array is smaller than the kth smallest,\n        # update the kth smallest element and move the first pointer to the next element\n        if arr1[i] < kth_smallest:\n            kth_smallest = arr1[i]\n            i += 1\n        # If the current element of the second array is smaller than the kth smallest,\n        # update the kth smallest element and move the second pointer to the next element\n        elif arr2[j] < kth_smallest:\n            kth_smallest = arr2[j]\n            j += 1\n        # If both pointers have the same value, move the pointer that has the smaller value\n        # to the next element\n        else:\n            if arr1[i] < arr2[j]:\n                i += 1\n            else:\n                j += 1\n\n    # If the remaining elements in one of the arrays are less than k, append them to the kth_smallest\n    while i < len(arr1):\n        if arr1[i] < kth_smallest:\n            kth_smallest = arr1[i]\n        i += 1\n\n    while j < len(arr2):\n        if arr2[j] < kth_smallest:\n            kth_smallest = arr2[j]\n        j += 1\n\n    return kth_smallest"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) > len(arr2):\n        arr1, arr2 = arr2, arr1\n    \n    # Find the position of the element to be searched in arr1\n    left = 0\n    right = len(arr1) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr1[mid] == k:\n            return k\n        elif arr1[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # Find the position of the element to be searched in arr2\n    left = 0\n    right = len(arr2) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr2[mid] == k:\n            return k\n        elif arr2[mid] < k:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    # If k is not found, return -1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    This function takes three arguments:\n    arr1 - first sorted array\n    arr2 - second sorted array\n    k - index of the element to be found in the sorted array\n\n    This function returns the kth element from the two sorted arrays.\n    '''\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return \"Element not found in sorted array\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Initialize two pointers\n    i = j = 0\n\n    # Compare the values of the first element of each array\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            # If the values are equal, increment both pointers\n            i += 1\n            j += 1\n\n    # Return the value at the kth position from the end of the merged array\n    return arr2[len(arr2) - k]"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n\ndef find_kth(arr1, arr2, k):\n    if not arr1 or not arr2:\n        return None\n\n    arr1.extend(arr2)\n    merge_sort(arr1)\n\n    if k < len(arr1):\n        return arr1[k]\n    else:\n        return None"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Write a function to find kth element from the given two sorted arrays.\n    \"\"\"\n    # Find the size of both arrays\n    n1 = len(arr1)\n    n2 = len(arr2)\n    # Compare the first k elements of both arrays\n    i = 0\n    j = 0\n    while i < n1 and j < n2 and k > 0:\n        if arr1[i] < arr2[j]:\n            i += 1\n            k -= 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n            k -= 1\n        else:\n            return arr1[i]\n            k -= 1\n            i += 1\n            j += 1\n    # If we have not found kth element, return -1\n    return -1"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    This function takes in three parameters: arr1, arr2, and k.\n    arr1 is the first sorted array\n    arr2 is the second sorted array\n    k is the value of k for finding the kth element in arr1\n    \"\"\"\n    i = 0\n    j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            return arr1[i]\n    return \"Element not found\""
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    i = j = 0\n    m = len(arr1)\n    n = len(arr2)\n\n    while i < m and j < n:\n        if arr1[i] < arr2[j]:\n            i += 1\n        elif arr1[i] > arr2[j]:\n            j += 1\n        else:\n            k -= 1\n            if k == 0:\n                return arr1[i]\n\n    if i < m:\n        return find_kth(arr1[i:], arr2, k)\n    else:\n        return find_kth(arr1, arr2[j:], k)\n"
    },
    {
        "number": 597,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # initialize two pointers to the start of the arrays\n    i, j = 0, 0\n    \n    # loop until we have found k elements in the arrays\n    while i < len(arr1) and j < len(arr2):\n        # if the element at i is less than the element at j, increment i\n        if arr1[i] < arr2[j]:\n            i += 1\n        # if the element at j is less than the element at i, increment j\n        else:\n            j += 1\n    \n    # if we have found k elements in both arrays, return their value\n    if i == len(arr1) and j == len(arr2):\n        return arr1[k-1]\n    \n    # if we have not found k elements in both arrays, return None\n    else:\n        return None"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # get the number of digits in the number\n    n = len(str(number))\n    \n    # loop through all digits from 0 to n-1\n    for i in range(n):\n        # get the digit at the current position\n        digit = int(str(number)[i])\n        \n        # loop through all digits from 0 to n-1 again and add the product of the current digit and the raised power of the digit to a running total\n        total = 0\n        for j in range(n):\n            if j!= i:\n                total += digit ** (n - j - 1)\n                \n        # compare the total with the original number and return True if they are equal\n        if total == number:\n            return True\n    \n    # if the loop completes without returning True, the number is not armstrong\n    return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_armstrong(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number < 10:\n        return False\n    num = number\n    ar = 0\n    while num > 0:\n        digit = num % 10\n        ar += digit ** 3\n        num //= 10\n    return ar == number\n"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n\n    # convert the number to a string\n    number_str = str(number)\n\n    # calculate the sum of the cube of each digit in the number\n    sum_of_cubes = 0\n    for digit in number_str:\n        digit = int(digit)\n        sum_of_cubes += digit ** 3\n\n    # check if the sum of cubes is equal to the original number\n    if sum_of_cubes == int(number):\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string and remove any non-numeric characters\n    number = ''.join(c for c in str(number) if c.isdigit())\n    # Initialize the sum of the digits to zero\n    sum_of_digits = 0\n    # Loop through the number and add up each digit's power of 3\n    for digit in number:\n        digit_power = len(str(digit))\n        sum_of_digits += digit ** digit_power\n    # Check if the sum of the digits is equal to the original number\n    if sum_of_digits == int(number):\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_armstrong(num):\n    \"\"\"\n    Check if a given number is an Armstrong number or not.\n    \"\"\"\n    num_str = str(num)\n    sum_of_powers = 0\n    power = len(num_str)\n\n    for digit in num_str:\n        digit_int = int(digit)\n        sum_of_powers += digit_int ** power\n\n    return num == sum_of_powers"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    if number < 10:\n        return False\n    else:\n        num_str = str(number)\n        sum_of_powers = 0\n        for i in num_str:\n            sum_of_powers += int(i) ** len(num_str)\n        if sum_of_powers == number:\n            return True\n        else:\n            return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    \"\"\"\n    Write a function to check whether the given number is armstrong or not.\n    \"\"\"\n    # initialize a variable to store the sum of the cube of digits of the number\n    sum_of_cubes = 0\n\n    # get the digits of the number\n    digits = [int(digit) for digit in str(number)]\n\n    # calculate the sum of the cube of digits of the number\n    for digit in digits:\n        sum_of_cubes += digit ** 3\n\n    # check if the sum of the cube of digits is equal to the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_armstrong(n):\n    \"\"\"\n    Returns True if the given number is an Armstrong number, False otherwise.\n    \"\"\"\n    s = 0\n    temp = n\n    while temp > 0:\n        digit = temp % 10\n        s += digit ** 3\n        temp //= 10\n    return n == s\n\ndef armstrong_number(number):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n    \"\"\"\n    if is_armstrong(number):\n        print(number, \"is an Armstrong number.\")\n    else:\n        print(number, \"is not an Armstrong number.\")"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Convert the number to a string\n    num_str = str(number)\n    \n    # Calculate the sum of the cubes of digits in the number\n    sum_of_cubes = sum([int(digit)**3 for digit in num_str])\n    \n    # Compare the sum with the original number\n    if sum_of_cubes == number:\n        return True\n    else:\n        return False"
    },
    {
        "number": 598,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    # Get the number of digits in the number\n    num_digits = len(str(number))\n    # Initialize a variable to hold the sum of the cubes of the digits\n    cube_sum = 0\n    # Loop through the digits of the number and add their cubes to the cube_sum\n    for digit in str(number):\n        cube_sum += int(digit)**3\n    # If the cube_sum is equal to the number, it is an armstrong number\n    if cube_sum == number:\n        print(f\"{number} is an armstrong number.\")\n    else:\n        print(f\"{number} is not an armstrong number.\")"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n\n    for i in range(1, n+1):\n        total += i\n        count += 1\n\n    average = total / count\n\n    return (total, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_average(n):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum_of_numbers = 0\n    count = 0\n\n    for i in range(1, n+1):\n        sum_of_numbers += i\n        count += 1\n\n    average = sum_of_numbers / count\n\n    return sum_of_numbers, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 1\n    while count <= number:\n        sum += count\n        count += 1\n    average = sum / number\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    total = 0\n    count = 0\n    for i in range(1, number+1):\n        total += i\n        count += 1\n    average = total / count\n    return total, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return (sum, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_average(n):\n    \"\"\"\n    This function takes an integer n as input and returns a tuple containing the sum and average of first n natural numbers.\n    \"\"\"\n    sum_n = 0\n    for i in range(1, n+1):\n        sum_n += i\n    avg = sum_n / n\n    return (sum_n, avg)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    # initialize sum and count variables\n    sum_of_numbers = 0\n    count = 0\n    # loop through the first n natural numbers\n    for i in range(1, number+1):\n        sum_of_numbers += i\n        count += 1\n    # calculate the sum and average\n    average = sum_of_numbers / count\n    # return the sum and average as a tuple\n    return (sum_of_numbers, average)"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_average(number):\n    \"\"\"\n    Write a function to find sum and average of first n natural numbers.\n    \"\"\"\n    sum = 0\n    count = 0\n    for i in range(1, number+1):\n        sum += i\n        count += 1\n    average = sum / count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number+1):\n        total += i\n        count += 1\n    average = total/count\n    return sum, average"
    },
    {
        "number": 599,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n\n    for i in range(1, number + 1):\n        total += i\n        count += 1\n\n    average = total / count\n    return sum, average"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        print(n, \"is even\")\n    else:\n        print(n, \"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_Even(n):\n    \"\"\"\n    Write a python function to check whether the given number is even or not.\n    \"\"\"\n    if n % 2 == 0:\n        print(\"The number\", n, \"is even.\")\n    else:\n        print(\"The number\", n, \"is odd.\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n\n    if n % 2 == 0:\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 600,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_Even(n):\n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n\n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n\n    # Find the first repeated character by looping through the dictionary and returning the first character with a count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n\n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n\n    # Convert the string to a set to remove duplicates\n    set1 = set(str1)\n\n    # Find the first repeated character in the set\n    for char in set1:\n        if str1.count(char) > 1:\n            return char\n\n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Create a dictionary to store the count of each character in the string\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # If the character is not in the dictionary, add it with a count of 1\n        else:\n            char_count[char] = 1\n            \n    # Loop through each character in the dictionary\n    for char in char_count:\n        # If the count of the character is greater than 1, return the character\n        if char_count[char] > 1:\n            return char\n            \n    # If no character is repeated, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initialize a dictionary to store the frequency of each character in the string\n    freq = {}\n\n    # Iterate through each character in the string and update the frequency dictionary\n    for char in str1:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n\n    # Iterate through the keys in the frequency dictionary and find the first repeated character\n    for key in freq:\n        if freq[key] > 1:\n            return key\n\n    # If no repeated characters were found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n    \"\"\"\n    char_set = {}\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    char_freq = {}\n    for char in str1:\n        if char in char_freq:\n            return char\n        char_freq[char] = True\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the character counts\n    char_counts = {}\n    \n    # Iterate over each character in the string and update the count in the dictionary\n    for char in str1:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n    \n    # Find the first repeated character by iterating over each character in the dictionary\n    for char in char_counts:\n        if char_counts[char] > 1:\n            return char\n    \n    # If no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # initialize a dictionary to store the count of each character in the string\n    char_count = {}\n    for char in str1:\n        # increment the count of the character in the dictionary\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # find the character with the first count greater than 1\n    for char, count in char_count.items():\n        if count > 1:\n            return char\n    \n    # if no repeated character is found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    \"\"\"\n    # Initialize an empty dictionary to store the character count\n    char_count = {}\n    \n    # Loop through each character in the string\n    for char in str1:\n        # If the character is already in the dictionary, return the key\n        if char in char_count:\n            return char\n        # Otherwise, add the character to the dictionary and set its count to 1\n        else:\n            char_count[char] = 1\n    \n    # If no repeated characters are found, return None\n    return None"
    },
    {
        "number": 602,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        else:\n            char_set.add(char)\n    return None"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic_list = []\n    for i in range(1, n + 1):\n        if i == 1:\n            ludic_list.append(i)\n        elif i == 2:\n            ludic_list.append(i)\n        elif i % 2 == 0:\n            ludic_list.append(i)\n            j = 3\n            while j <= int(i**0.5) + 1:\n                if i % j == 0:\n                    ludic_list.append(j)\n                j += 2\n        else:\n            ludic_list.append(i)\n            j = 3\n            while j <= int(i**0.5) + 1:\n                if i % j == 0:\n                    ludic_list.append(j)\n                j += 2\n    return ludic_list"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if i % 2 == 0 and all(i % j!= 0 for j in range(3, int(i**0.5)+1, 2)):\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    lucid_numbers = []\n    for i in range(1, n+1):\n        is_lucid = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_lucid = False\n                break\n        if is_lucid:\n            lucid_numbers.append(i)\n\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n\n    def helper(num, lucids):\n        '''\n        Helper function to generate the list of lucids.\n        '''\n        if num < 0:\n            return lucids\n\n        if num in lucids:\n            return lucids\n\n        lucids.append(num)\n        return helper(num - 1, lucids)\n\n    return helper(n, [])\n"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(n+1):\n        if i == 1 or i == 2:\n            lucid_numbers.append(i)\n        else:\n            temp = 0\n            for j in range(2, int(i**(1/2))+1):\n                if i % j == 0:\n                    temp += j\n            if temp == i:\n                lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    '''\n    Check if a given integer is a lucid number or not.\n    '''\n    if n < 10:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    ludic = []\n    i = 2\n    while i <= n:\n        if is_lucid(i):\n            ludic.append(i)\n        i += 1\n    return ludic\n\ndef is_lucid(num):\n    \"\"\"\n    Write a function to check if a given integer is lucid or not.\n    \"\"\"\n    sum_of_digits = 0\n    temp_num = num\n    while temp_num > 0:\n        digit = temp_num % 10\n        sum_of_digits += digit ** 3\n        temp_num //= 10\n    return num == sum_of_digits"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(n + 1):\n        for j in range(i, n + 1):\n            if i * j == i + j:\n                lucid_numbers.append(i * j)\n    return lucid_numbers"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid.append(i)\n    return lucid\n\ndef is_lucid(n):\n    \"\"\"\n    A function to check if a given integer is a lucid number or not.\n    \"\"\"\n    if n < 10:\n        return True\n    return all(i in \"123456789\" for i in str(n))"
    },
    {
        "number": 603,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    \"\"\"\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(2, n+1):\n        if i % 2 == 0:\n            lucid_numbers.append(i)\n    return lucid_numbers"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s = \" \".join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    # Remove leading and trailing spaces\n    s = s.strip()\n\n    # Split the string into words\n    words = s.split()\n\n    # Reverse each word in the list\n    reversed_words = [word[::-1] for word in words]\n\n    # Join the reversed words back into a string\n    result = \" \".join(reversed_words)\n\n    return result"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    words = s.split()\n    words.reverse()\n    return''.join(words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    \"\"\"\n    Write a function to reverse words seperated by spaces in a given string.\n    \"\"\"\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Join the words back into a string\n    s = \" \".join(words)\n    # Return the reversed string\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split the string into words\n    words = s.split()\n    # reverse each word\n    reversed_words = [word[::-1] for word in words]\n    # join the reversed words back into a string\n    reversed_s =''.join(reversed_words)\n    return reversed_s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = [word[::-1] for word in words]\n    return''.join(reversed_words)"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()  # split the string into words\n    words.reverse()  # reverse the order of the words\n    return''.join(words)  # join the words back into a string with spaces in between"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    for i in range(len(words)):\n        words[i] = words[i][::-1]\n    s =''.join(words)\n    return s"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    words = s.split()\n    reversed_words = words[::-1]\n    reversed_string =''.join(reversed_words)\n    return reversed_string"
    },
    {
        "number": 604,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # Convert string to a list of words\n    words = s.split()\n    # Initialize two pointers to the beginning and end of the list\n    left = 0\n    right = len(words) - 1\n    # Loop over the list in reverse order\n    while left < right:\n        # Swap the left and right words\n        words[left], words[right] = words[right], words[left]\n        # Move the pointers towards the center\n        left += 1\n        right -= 1\n    # Convert the list of words back to a string and return it\n    return''.join(words)"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_prime(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if is_prime(num):\n        return True\n    else:\n        return False"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_prime(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def prime_num(num):\n    \"\"\"\n    Write a function to check if the given integer is a prime number.\n    \"\"\"\n    # check if num is 1 or less\n    if num <= 1:\n        return False\n\n    # check if num is divisible by any number between 2 and sqrt(num)\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # if num is greater than 1 and less than or equal to the square root of num, it is a prime number\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True"
    },
    {
        "number": 605,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_prime(num):\n    '''\n    A function to check if a given integer is prime or not.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef radian_degree(degree):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degree (float): angle in degrees\n\n    Returns:\n    float: angle in radians\n    \"\"\"\n    return math.pi * degree / 180.0"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * (math.pi/180)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = math.radians(degree)\n    return radian"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)"
    },
    {
        "number": 606,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        # Return the first match\n        return matches[0]\n    else:\n        # If no matches, return None\n        return None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    start_index = text.find(matches[0])\n    end_index = start_index + len(matches[0])\n    return matches[0], start_index, end_index"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    result = re.findall(pattern, text)\n\n    if len(result) > 0:\n        return result[0], 0, len(result[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    \"\"\"\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    \"\"\"\n    matches = re.findall(pattern, text)\n    if len(matches) > 0:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n\n    matches = re.findall(pattern, text)\n\n    if matches:\n        return matches[0], 0, len(matches[0])\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], 0, len(text)\n    else:\n        return None, None, None"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None, None, None\n    start, end = matches[0].span()\n    return matches[0], start, end"
    },
    {
        "number": 607,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Use re.findall to find all matches of the pattern in the text\n    matches = re.findall(pattern, text)\n    \n    # Initialize empty list to store the matches\n    literals = []\n    \n    # Iterate over each match and add the substring, start index, and end index to the literals list\n    for match in matches:\n        literals.append((match, text.find(match), text.find(match) + len(match) - 1))\n    \n    # Return the list of literals\n    return literals"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    # Initialize a variable to store the sum of Fibonacci numbers less than or equal to n\n    bell_sum = 0\n    \n    # Define a recursive function to calculate the nth Fibonacci number\n    def fib(n):\n        if n <= 1:\n            return n\n        else:\n            return fib(n-1) + fib(n-2)\n    \n    # Calculate the sum of Fibonacci numbers less than or equal to n\n    for i in range(1, n+1):\n        if fib(i) <= n:\n            bell_sum += fib(i)\n    \n    # Return the sum of Fibonacci numbers less than or equal to n\n    return bell_sum"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n * (n + 1)) / 2"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def bell_Number(n):\n    \"\"\"\n    Write a python function to find nth bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 ** n - 1"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n\n    if n == 0:\n        return 0\n\n    elif n == 1:\n        return 1\n\n    elif n % 2 == 0:\n        return bell_Number(n//2) + bell_Number(n//2)\n\n    else:\n        return bell_Number((n-1)//2) + bell_Number((n-1)//2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Check if the input is an integer\n    if not isinstance(n, int):\n        raise ValueError(\"Input must be an integer.\")\n    elif n <= 0:\n        raise ValueError(\"Input must be greater than 0.\")\n    else:\n        # Initialize the first two bell numbers\n        b1 = 1\n        b2 = 1\n\n        # Loop through the remaining numbers\n        for i in range(2, n+1):\n            # Compute the nth bell number\n            b = (b1+b2) ** i // (i*(i-1))\n\n            # Update the values for the next iteration\n            b1 = b2\n            b2 = b"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return bell_Number(n-1) + bell_Number(n-2)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * bell_Number(n-1)"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    a = 1\n    b = 2\n    count = 0\n    while count < n:\n        if a**n == b**n:\n            count += 1\n        a += 1\n        b += 1\n    return a"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2 ** n - 1) // (1 - 2 ** (n - 1))"
    },
    {
        "number": 608,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def bell_Number(n):\n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n < 1:\n        print(\"Invalid input. Please enter a positive integer.\")\n    else:\n        if n == 1:\n            print(0)\n        else:\n            print(bell_Number(n-1) + bell_Number(n-2))"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < L:\n        raise ValueError(\"The length of the list is less than the value of L\")\n    elif L <= 0:\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    This function takes a list and a positive integer L as input and returns a new list with the same elements,\n    except for the Lth element.\n    '''\n    if L > len(list1):\n        return list1\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Take the k'th element from the list\n    k = L[0]\n    # Remove the k'th element from the list\n    list1.pop(k-1)\n    # Return the modified list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, k):\n    \"\"\"\n    Removes the kth element from a list and returns the remaining elements.\n    \"\"\"\n    if k > len(list1):\n        raise ValueError(\"k is greater than the length of the list\")\n    return list1[:k] + list1[k+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    list1 = list1[:L-1] + list1[L:]\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if L == 0:\n        return []\n    elif L > len(list1):\n        return list1\n    elif L == 1:\n        return list1[1:]\n    else:\n        return list1[:L-1] + list1[L:]"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, k):\n    '''\n    This function takes a list and an integer k as input and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Initialize the list to store the result\n    result = []\n    # Iterate through the list\n    for i in range(len(list1)):\n        # If the current index is not equal to k-1, add the current element to the result list\n        if i!= k-1:\n            result.append(list1[i])\n    # Return the result list\n    return result"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    \"\"\"\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    \"\"\"\n    # find the k'th element from the end of the list\n    kth_element = list1[-L]\n    # remove the k'th element from the list\n    list1 = list1[:L-1]\n    # return the updated list\n    return list1"
    },
    {
        "number": 610,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = L - 1 # L is the length of the list, and k is the index of the element to be removed\n    list1.pop(k) # remove the k'th element from the list\n    return list1"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = 0\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Find the number of rows in the matrix\n    num_rows = len(test_list)\n    \n    # Check if then'th column is within the bounds of the matrix\n    if N < 1 or N > num_rows:\n        return None\n    \n    # Initialize the max value to the smallest possible integer\n    max_val = float('-inf')\n    \n    # Loop through each row in the matrix\n    for row in test_list:\n        # Check if then'th column is within the bounds of the current row\n        if N < 1 or N > len(row):\n            continue\n        \n        # Compare the current row's value to the max value\n        if row[N-1] > max_val:\n            max_val = row[N-1]\n    \n    # Return the max value found\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    # Initialize variables\n    max_val = 0\n    count = 0\n    \n    # Iterate through the matrix\n    for i in range(len(test_list)):\n        if count == N-1:\n            # If we reached the nth column, compare the current value with the max value\n            if test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n        count += 1\n        \n    # Return the max value\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    n = len(test_list[0])\n    max_val = 0\n    for i in range(n):\n        if test_list[0][i] > max_val:\n            max_val = test_list[0][i]\n        elif test_list[0][i] == max_val:\n            if test_list[0][i] == max_val and test_list[i][N-1] > max_val:\n                max_val = test_list[i][N-1]\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_of_nth(matrix, N):\n    '''\n    This function takes a matrix represented as a list of lists and returns the max of then'th column.\n    '''\n    # Initialize a variable to store the max value of then'th column\n    max_val = float('-inf')\n    # Loop through each row in the matrix\n    for row in matrix:\n        # Get the value of then'th column in the current row\n        val = row[N-1]\n        # Update the max_val variable if the current value is greater\n        if val > max_val:\n            max_val = val\n    # Return the max value of then'th column\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    max_val = float('-inf')\n    for i in range(len(test_list)):\n        if i == N-1:\n            max_val = max(max_val, max(test_list[i]))\n    return max_val"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    # find the length of the first list (which represents the number of rows)\n    num_rows = len(test_list)\n\n    # initialize the max value to be the first element of the first row\n    max_value = test_list[0][0]\n\n    # iterate through each row\n    for row in range(num_rows):\n        # get the value of then'th column for the current row\n        nth_col = test_list[row][N-1]\n\n        # update the max value if the current nth column value is greater than the current max value\n        if nth_col > max_value:\n            max_value = nth_col\n\n    return max_value"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_list = []\n    max_num = 0\n    \n    for i in range(len(test_list)):\n        row_max = max(test_list[i][N-1], max_num)\n        max_list.append(row_max)\n        if row_max > max_num:\n            max_num = row_max\n            \n    return max_list"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n\n    max_col = []\n\n    for i in range(len(test_list)):\n        col = [row[N-1] for row in test_list[i]]\n        max_col.append(max(col))\n\n    return max(max_col)"
    },
    {
        "number": 611,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    max_value = -float('inf')\n    for i in range(len(test_list)):\n        if test_list[i][N-1] > max_value:\n            max_value = test_list[i][N-1]\n    return max_value"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for sublist in lst:\n        if len(sublist) == 2:\n            result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged = []\n    for i in range(len(lst)):\n        merged.append([lst[i][0], lst[i][1]])\n    return merged"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def merge(lst):\n    '''\n    This function takes a list of lists and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_lst = []\n    for sublist in lst:\n        first = sublist[0]\n        second = sublist[1]\n        merged_lst.append([first, second])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def merge(lst):\n    merged_lst = []\n    for sublist in lst:\n        merged_lst.append([sublist[0], sublist[1]])\n    return merged_lst"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def merge(lst):\n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    merged_list = []\n    for sublist in lst:\n        merged_list.append([sublist[0], sublist[1]])\n    return merged_list"
    },
    {
        "number": 612,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def merge(lst):\n    \"\"\"\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    result = []\n    for sublist in lst:\n        result.append([sublist[0], sublist[1]])\n    return result"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum += item\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Initialize an empty list to store the cumulative sum\n    cum_sum = []\n    # Loop through each tuple in the list\n    for i in range(len(test_list)):\n        # If the value is not None (i.e., if it's not an empty string), add its value to the cumulative sum\n        if test_list[i] is not None:\n            cum_sum.append(test_list[i][0])\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for item in test_list:\n        cumsum += item\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    cumulative_sum = 0\n    for i in range(len(test_list)):\n        cumulative_sum += test_list[i][1]\n    return cumulative_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for i in range(len(test_list)):\n        cumsum += test_list[i]\n    return cumsum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i][1]\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    \"\"\"\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    \"\"\"\n    # Initialize the cumulative sum to 0\n    cum_sum = 0\n    # Loop through each tuple in the list\n    for tup in test_list:\n        # Extract the values from the tuple\n        val1, val2, val3 = tup\n        # Add the values to the cumulative sum\n        cum_sum += val1 + val2 + val3\n    # Return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # initialize the cumulative sum to 0\n    cum_sum = 0\n    \n    # loop through the list of tuples\n    for i in range(len(test_list)):\n        # check if the current tuple is not None\n        if test_list[i] is not None:\n            # add the value of the tuple to the cumulative sum\n            cum_sum += test_list[i]\n    \n    # return the cumulative sum\n    return cum_sum"
    },
    {
        "number": 614,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumsum = 0\n    for item in test_list:\n        cumsum += item\n    return cumsum"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for tup in nums:\n        average = sum(tup)/len(tup)\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    averages = []\n    for t in nums:\n        total = sum(t)\n        length = len(t)\n        average = total / length\n        averages.append(average)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Initialize an empty list to store the average values\n    avg_list = []\n    \n    # Loop through each tuple in the input tuple of tuples\n    for i in range(len(nums)):\n        # Loop through each element in the current tuple\n        for j in range(len(nums[i])):\n            # Add the current element to the total sum of elements\n            total_sum += nums[i][j]\n        # Divide the total sum by the number of elements to get the average value\n        avg_list.append(total_sum/len(nums[i]))\n        # Reset the total sum for the next tuple\n        total_sum = 0\n    \n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # create a list to store the average values\n    avg_list = []\n\n    # iterate over each tuple in the input tuple of tuples\n    for i in range(len(nums)):\n        # calculate the average value for the current tuple\n        avg = sum(nums[i])/len(nums[i])\n        # append the average value to the list\n        avg_list.append(avg)\n\n    # return the list of average values\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_list = []\n    for num_tuple in nums:\n        sum_num = 0\n        for num in num_tuple:\n            sum_num += num\n        avg = sum_num/len(num_tuple)\n        avg_list.append(avg)\n    return avg_list"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num in nums:\n        total = sum(num)\n        length = len(num)\n        average = total / length\n        result.append(average)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for num_tuple in nums:\n        result.append(sum(num_tuple) / len(num_tuple))\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    \"\"\"\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    \"\"\"\n    result = []\n    for sub_tuple in nums:\n        if len(sub_tuple) > 0:\n            sub_sum = sum(sub_tuple)\n            sub_avg = sub_sum / len(sub_tuple)\n            result.append(sub_avg)\n    return result"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    count = 0\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            total_sum += nums[i][j]\n            count += 1\n    averages = [total_sum/count]\n    for i in range(1, len(nums)):\n        total_sum = 0\n        for j in range(len(nums[i])):\n            total_sum += nums[i][j]\n            count += 1\n        averages.append(total_sum/count)\n    return averages"
    },
    {
        "number": 615,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total_sum = 0\n    count = 0\n    for num in nums:\n        total_sum += sum(num)\n        count += 1\n    return [total_sum/count]"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # Check if the tuples have the same length\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"The tuples must have the same length\")\n    # Perform element wise modulo\n    modulo_tup = tuple([x % y for x, y in zip(test_tup1, test_tup2)])\n    return modulo_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be same for element-wise modulo.\")\n    modulo_list = []\n    for i in range(len(test_tup1)):\n        modulo_list.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_result = []\n    for i in range(len(test_tup1)):\n        modulo_result.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    return tuple(result)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Both tuples must have the same length\")\n    \n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    \n    return result_tup"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    for i in range(len(test_tup1)):\n        test_tup1[i] %= test_tup2[i]\n    return test_tup1"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_list = []\n    for i in range(len(test_tup1)):\n        modulo_list.append(test_tup1[i] % test_tup2[i])\n    return tuple(modulo_list)"
    },
    {
        "number": 616,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup1)):\n        result_tup += (test_tup1[i] % test_tup2[i],)\n    return result_tup"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    \n    jumps = 0\n    for i in range(1, steps+1):\n        jumps += d\n        d -= 1\n        if d == 0:\n            jumps += 1\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Check if (d, 0) is reachable from origin\n    if d == 0:\n        return steps\n    \n    # Check if d is reachable from origin\n    if d > 0:\n        jumps = 1\n        for i in range(1, steps):\n            if d < i:\n                break\n            jumps += 1\n    \n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    \"\"\"\n    This function checks for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    \"\"\"\n    # Step 1: Check if the length of steps is less than or equal to 0\n    if steps <= 0:\n        return 0\n\n    # Step 2: Initialize the current position as (0, 0)\n    pos = (0, 0)\n\n    # Step 3: Initialize the count of jumps as 0\n    jumps = 0\n\n    # Step 4: Loop until the current position is not (d, 0)\n    while pos!= (d, 0):\n\n        # Step 5: Move towards (d, 0) using step (1, 0)\n        if pos[0] > d:\n            pos = (pos[0] - 1, pos[1])\n            jumps += 1\n\n        # Step 6: Move towards (0, 0) using step (-1, -1)\n        else:\n            pos = (pos[0], pos[1] - 1)\n            jumps += 1\n\n        # Step 7: Check if the current position is (d, 0)\n        if pos[0] == d and pos[1] == 0:\n            return jumps\n\n    # Step 8: If the current position is (d, 0), return the count of jumps\n    return jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables\n    count = 0\n    current_position = 0\n    min_jumps = 0\n\n    # Iterate through all the steps\n    for i in range(steps):\n        # Check if the current position is (d, 0)\n        if current_position == d:\n            # If yes, increment the count and reset the current position\n            count += 1\n            current_position = 0\n\n        # If current position is greater than d, decrement the current position\n        else:\n            current_position -= 1\n\n        # Check if the current position is less than 0\n        if current_position < 0:\n            # If yes, increment the min jumps count\n            min_jumps += 1\n            current_position = 0\n\n    return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps < d:\n        return -1\n\n    if d == 1:\n        return 0\n\n    if steps == 1:\n        return 1\n\n    jumps = 0\n    current_jumps = 0\n    current_d = 1\n\n    while current_d < d:\n        current_jumps += 1\n        if current_jumps == steps:\n            jumps += 1\n            current_d = 0\n            current_jumps = 0\n\n    return jumps + 1"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d):\n    def is_valid_point(x, y, steps):\n        return 0 <= x < steps and 0 <= y < steps\n    \n    def jump_length(x, y, d):\n        return abs(x) + abs(y) <= d\n    \n    def bfs(x, y, steps, d):\n        queue = [(x, y)]\n        visited = set()\n        \n        while queue:\n            x, y = queue.pop(0)\n            \n            if (x, y) == (steps - 1, 0):\n                return 1\n            \n            if (x, y) in visited:\n                continue\n            \n            visited.add((x, y))\n            \n            for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):\n                next_x = x + dx\n                next_y = y + dy\n                \n                if is_valid_point(next_x, next_y, steps) and jump_length(next_x, next_y, d):\n                    queue.append((next_x, next_y))\n        \n        return 0\n    \n    def find_min_jumps(steps, d):\n        min_steps = 1\n        max_steps = steps\n        \n        while max_steps - min_steps >= 2:\n            mid_steps = (min_steps + max_steps) // 2\n            min_jumps = bfs(mid_steps, 0, steps, d)\n            \n            if min_jumps == 0:\n                max_steps = mid_steps\n            else:\n                min_steps = mid_steps\n        \n        return min_steps\n    \n    return find_min_jumps(steps, d)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d):\n    def is_valid(x, y):\n        return 0 <= x < steps and 0 <= y < steps and (abs(x) + abs(y) <= d or abs(x) + abs(y) == d + 1)\n    \n    def bfs(x, y):\n        queue = [(x, y)]\n        visited = set([(x, y)])\n        steps_taken = 0\n        while queue:\n            (x, y) = queue.pop(0)\n            steps_taken += 1\n            if x == 0 and y == 0:\n                return steps_taken\n            \n            if (x + 1, y) not in visited and is_valid(x + 1, y):\n                queue.append((x + 1, y))\n                visited.add((x + 1, y))\n            \n            if (x, y + 1) not in visited and is_valid(x, y + 1):\n                queue.append((x, y + 1))\n                visited.add((x, y + 1))\n                \n    # BFS starting from origin\n    return bfs(0, 0)"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d):\n    # Initialize variables to store the position of the smallest step and the number of jumps required\n    curr_pos = 0\n    curr_jumps = 0\n    \n    # Calculate the initial position of the smallest step\n    smallest_step = 0\n    while curr_pos + smallest_step < d:\n        smallest_step += 1\n    \n    # Loop through the number of steps\n    for step in range(steps):\n        # Calculate the maximum number of jumps that can be made from this position\n        max_jumps = min(step + 1, d - curr_pos)\n        \n        # Update the position of the smallest step and the number of jumps required\n        curr_pos += smallest_step\n        curr_jumps += max_jumps\n    \n    return curr_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d):\n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialize variables to store the minimum number of jumps required and the number of steps left\n    min_jumps = 0\n    steps_left = steps\n    \n    # While there are steps left to take, and the minimum jumps required so far is less than the maximum number of jumps possible\n    while steps_left > 0 and min_jumps < steps_left:\n        # Calculate the number of jumps required for this step\n        jumps = int(steps_left/d)\n        \n        # If this step doesn't result in a point of form (d, 0), reduce the number of steps left and try again\n        if jumps*d < steps_left:\n            steps_left -= jumps*d\n        else:\n            # If the step results in a point of form (d, 0), add this many jumps to the total number of jumps required so far\n            min_jumps += jumps\n    \n    # If the minimum jumps required so far is still less than the maximum number of jumps possible, return -1 (no solution)\n    if min_jumps == steps_left:\n        return -1\n    else:\n        return min_jumps"
    },
    {
        "number": 617,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    This function takes in two arguments: steps (the number of jumps) and d (the distance to reach point (d, 0) from origin). \n    The function returns the minimum number of jumps required to reach the point (d, 0) from origin.\n\n    The function uses dynamic programming to optimize the time complexity of the algorithm. It works by creating a 2D array\n    with dimensions (steps+1) x (steps+1) where each element represents the minimum number of jumps required to reach the point\n    (i, j) from origin.\n\n    The base case is when we reach the point (steps, steps), where we have already reached the point of form (d, 0) from origin.\n    In this case, the function returns 0 as there is no need for any jumps to reach the point (d, 0).\n\n    The recursive case is when we reach the point (i, j) where i >= steps and j >= steps, in which case we have reached the\n    point of form (d, 0) from origin. In this case, the function returns 0 as there is no need for any jumps to reach the\n    point (d, 0).\n\n    The rest of the cases are similar to the base and recursive cases.\n\n    Once we have calculated the minimum number of jumps required to reach the point (d, 0) from origin, we can use this\n    information to find the minimum number of jumps required to reach the point (steps, steps) from origin.\n\n    Finally, we return the minimum number of jumps required to reach the point (steps, steps) from origin.\n    '''\n\n    # Create a 2D array with dimensions (steps+1) x (steps+1)\n    dp = [[0 for j in range(steps+1)] for i in range(steps+1)]\n\n    # Base case: we reach the point (steps, steps) from origin\n    dp[steps][steps] = 0\n\n    # Fill the remaining elements of the array using dynamic programming\n    for i in range(1, steps+1):\n        for j in range(1, steps+1):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n\n    # Find the minimum number of jumps required to reach the point (d, 0) from origin\n    min_jumps = dp[steps][steps]\n\n    # Find the minimum number of jumps required to reach the point (steps, steps) from origin\n    max_jumps = steps - d\n\n    # Return the minimum of the two values\n    return min(min_jumps, max_jumps)"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # Check if the lists have the same length\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must have the same length\")\n        return\n    \n    # Divide the lists element wise\n    for i in range(len(nums1)):\n        nums1[i] = nums1[i] / nums2[i]\n    return nums1"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def div_list(nums1, nums2):\n    '''\n    This function divides two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists have different lengths.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            print(\"Error: Division by zero is not allowed.\")\n            return\n        result.append(nums1[i] // nums2[i])\n        \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        print(\"Error: Lists must be of equal length.\")\n        return\n    \n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    \n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        if nums2[i] == 0:\n            result.append('Cannot divide by zero')\n        else:\n            result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The lists should have the same length.\")\n    for i in range(len(nums1)):\n        result.append(nums1[i] / nums2[i])\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check if the lists are of same length\n    if len(nums1)!= len(nums2):\n        return \"Error: Lists are not of equal length.\"\n    \n    # create an empty list to store the results\n    result = []\n    \n    # iterate through each element of the lists\n    for i in range(len(nums1)):\n        # divide the elements of the lists and append the result to the result list\n        result.append(nums1[i] / nums2[i])\n    \n    # return the result list\n    return result"
    },
    {
        "number": 618,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def div_list(nums1, nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)!= len(nums2):\n        raise ValueError('The two lists must have the same length.')\n    return [num1/num2 for num1, num2 in zip(nums1, nums2)]"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    if numbers:\n        return test_str + ''.join(numbers)\n    else:\n        return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # remove all non-numeric characters from the string\n    test_str = ''.join(filter(str.isdigit, test_str))\n    \n    # loop through the string backwards\n    for i in range(len(test_str)-1, -1, -1):\n        # if the character is a number, append it to the end of the string\n        if test_str[i].isdigit():\n            test_str = test_str[:i] + test_str[i:] + test_str[i+1:]\n    \n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n\n    # Convert the string to list of characters\n    char_list = list(test_str)\n\n    # Initialize variables\n    count = 0\n    start = -1\n    end = -1\n\n    # Iterate through the list of characters\n    for i in range(len(char_list)):\n\n        # If the character is a number\n        if char_list[i].isdigit():\n\n            # If the number is at the beginning of the string\n            if count == 0:\n                start = i\n\n            # If the number is at the end of the string\n            elif count == 1:\n                end = i\n\n            # Increment the count variable\n            count += 1\n\n    # If the number is at the end of the string\n    if count == 1:\n        # Reverse the characters in the substring between start and end\n        char_list[start:end+1] = char_list[start:end+1][::-1]\n\n    # Convert the list of characters back to string and return\n    return ''.join(char_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    # Find all numbers in the string\n    numbers = [char for char in test_str if char.isdigit()]\n\n    # Convert all numbers to integers\n    nums = [int(num) for num in numbers]\n\n    # Sort the integers in ascending order\n    nums.sort()\n\n    # Join the sorted integers back into a string\n    sorted_str = ''.join(map(str, nums))\n\n    # Add the sorted numbers to the end of the original string\n    new_str = test_str + sorted_str\n\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n    numbers.sort(reverse=True)\n    return test_str + ''.join(numbers)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = ''\n    for char in test_str:\n        if char.isdigit():\n            result += char\n    for char in test_str:\n        if not char.isdigit():\n            result += char\n    return result"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    for char in test_str:\n        if char.isdigit():\n            num_list.append(char)\n    num_list.sort(reverse=True)\n    return ''.join(num_list)"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize two pointers to track the position of the numbers and the letters\n    num_start = -1\n    num_end = -1\n    let_start = -1\n    let_end = -1\n    # iterate through the string\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            if num_start == -1:\n                num_start = i\n            num_end = i\n        else:\n            if let_start == -1:\n                let_start = i\n    # move the numbers to the end of the string\n    if num_start!= -1:\n        test_str = test_str[:num_start] + test_str[num_start:num_end+1] + test_str[num_end+1:]\n    # move the letters to the end of the string\n    if let_start!= -1:\n        test_str = test_str[:let_start] + test_str[let_start:let_end+1] + test_str[let_end+1:]\n    return test_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables to store the index of numbers and letters\n    num_index = -1\n    let_index = -1\n    # loop through the string and check if each character is a number or a letter\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_index = i\n        elif test_str[i].isalpha():\n            let_index = i\n    # if there are no numbers or letters, return the string as it is\n    if num_index == -1 and let_index == -1:\n        return test_str\n    # loop through the string again and move all the numbers to the end of the string\n    new_str = \"\"\n    for i in range(len(test_str)):\n        # if the character is a number, add it to the new string and update the index\n        if test_str[i].isdigit():\n            new_str = test_str[i] + new_str\n            num_index -= 1\n        # if the character is a letter, add it to the new string and update the index\n        elif test_str[i].isalpha():\n            new_str = test_str[i] + new_str\n            let_index -= 1\n        # if the character is neither a number nor a letter, ignore it\n        else:\n            new_str += test_str[i]\n    # if there are any numbers left in the string, move them to the end as well\n    if num_index!= -1:\n        new_str = new_str[num_index:] + new_str[:num_index]\n    # return the new string with the numbers moved to the end\n    return new_str"
    },
    {
        "number": 619,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # initialize variables\n    num_start = -1\n    num_end = -1\n    # iterate over the characters in the string\n    for i in range(len(test_str)):\n        # if we encounter a number, record its start position\n        if test_str[i].isdigit():\n            num_start = i\n        # if we encounter a letter or whitespace, move the number to the end\n        elif i >= num_start and test_str[i].isalnum():\n            test_str = test_str[:num_start] + test_str[num_start:i] + test_str[i:]\n    return test_str"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    subsets = [1] * n\n    \n    # Finding the size of the largest subset for each element in the list\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                subsets[i] = max(subsets[i], subsets[j] + 1)\n                \n    # Finding the maximum size of the subset\n    max_size = max(subsets)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    max_size = 0\n    start = 0\n    \n    for i in range(len(a)):\n        if a[i] % a[start] == 0:\n            max_size = max(max_size, i-start+1)\n            start = i\n    \n    if start < len(a)-1:\n        max_size = max(max_size, len(a)-start)\n    \n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()  # sort the list in ascending order\n    i = 0\n    j = 0\n    size = 0\n    while j < len(a):\n        if a[j] % a[i] == 0:  # if the current number is divisible by the previous number, increment the size and move to the next pair\n            size += 1\n            i += 1\n        else:  # if the current number is not divisible by the previous number, move to the next number in the list\n            i = 0\n        j += 1\n    return size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    \"\"\"\n    # Sort the list of numbers\n    a.sort()\n\n    # Initialize variables\n    max_size = 1\n    current_size = 1\n    count = 0\n\n    # Iterate through the sorted list\n    for i in range(1, len(a)):\n        # Check if the current number is divisible by the previous number\n        if a[i] % a[i - 1] == 0:\n            count += 1\n        else:\n            count = 1\n\n        # Update the current size\n        current_size = max(1, count)\n\n        # Update the maximum size if necessary\n        if current_size > max_size:\n            max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # create a set of all possible divisors\n    divisors = set(i*j for i in range(1, 10) for j in range(1, 10) if i!= j)\n\n    # sort the list of numbers\n    a.sort()\n\n    # initialize variables\n    n = len(a)\n    max_size = 0\n    current_size = 0\n\n    # loop through the list of numbers\n    for i in range(n):\n        # check if the current number is divisible by all divisors\n        divisible = True\n        for d in divisors:\n            if a[i] % d!= 0:\n                divisible = False\n                break\n        # if the number is divisible, add it to the current subset\n        if divisible:\n            current_size += 1\n        # if the subset size is larger than the current maximum, update the maximum\n        if current_size > max_size:\n            max_size = current_size\n\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    n = len(a)\n    # create a set to store the remainders of all pairs\n    remainders = set()\n    # initialize the maximum subset size to 0\n    max_size = 0\n    # loop through all pairs of elements in the list\n    for i in range(n):\n        for j in range(i+1, n):\n            # calculate the remainder of the pair\n            remainder = a[i] % a[j]\n            # add the remainder to the set of remainders\n            remainders.add(remainder)\n            # update the maximum subset size if the current subset size is greater than the maximum\n            if len(remainders) > max_size:\n                max_size = len(remainders)\n    # return the maximum subset size\n    return max_size"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # Initialize variables\n    max_length = 0\n    current_length = 0\n    subset = []\n\n    # Iterate through the list of numbers\n    for i in range(len(a)):\n        # Check if the current number is divisible by the next number in the subset\n        if a[i] % a[subset[-1]] == 0:\n            current_length += 1\n        else:\n            # If the current number is not divisible by the next number in the subset,\n            # add the current subset to the result list and update the variables\n            subset.append(i)\n            max_length = max(max_length, current_length)\n            current_length = 0\n\n    # If the loop completes, add the last subset to the result list and update the variables\n    subset.append(len(a)-1)\n    max_length = max(max_length, current_length)\n\n    # Return the maximum length of the subset\n    return max_length"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    max_size = 1\n    max_start = 0\n\n    for i in range(1, n):\n        if a[i] % a[i - 1] == 0:\n            dp[i] = dp[i - 1] + 1\n            if dp[i] > max_size:\n                max_size = dp[i]\n                max_start = i\n        else:\n            dp[i] = 1\n\n    return max_size, a[max_start:max_start + max_size]"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    n = len(a)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 620,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    pairs = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                pairs.append((a[i], a[j]))\n    return len(pairs)\n"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.extend(arr2)\n    arr1.sort()\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Find the median of two sorted lists of same size\n    arr1.sort()\n    arr2.sort()\n    if n % 2 == 0:\n        # If n is even, find the average of the middle two elements\n        median = (arr1[n//2 - 1] + arr1[n//2] + arr2[n//2 - 1] + arr2[n//2]) / 4\n    else:\n        # If n is odd, find the middle element\n        median = arr1[n//2]\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Concatenate the two arrays\n    arr = arr1 + arr2\n    # Sort the concatenated array\n    arr.sort()\n    # Calculate the median\n    if n % 2 == 0:\n        # If the length is even, return the average of the middle two elements\n        median = (arr[n//2 - 1] + arr[n//2]) / 2\n    else:\n        # If the length is odd, return the middle element\n        median = arr[n//2]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    This function finds the median of two sorted lists of same size.\n    '''\n    \n    # Merge the two sorted arrays\n    merged_arr = arr1 + arr2\n    \n    # Sort the merged array\n    sorted_arr = sorted(merged_arr)\n    \n    # Find the middle element\n    mid = n // 2\n    \n    # If the length of the array is odd, return the middle element\n    if n % 2 == 1:\n        return sorted_arr[mid]\n    \n    # If the length of the array is even, return the average of the middle two elements\n    else:\n        return (sorted_arr[mid-1] + sorted_arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    # Merge the two lists\n    merged_list = arr1 + arr2\n    # Sort the merged list\n    merged_list.sort()\n    # Calculate the middle index of the merged list\n    mid = n // 2\n    # Check if the length of the list is odd or even\n    if n % 2 == 0:\n        # If the length of the list is even, the median is the average of the two middle elements\n        median = (merged_list[mid-1] + merged_list[mid]) / 2\n    else:\n        # If the length of the list is odd, the median is the middle element\n        median = merged_list[mid]\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Concatenate the two lists\n    combined_list = arr1 + arr2\n    \n    # Sort the combined list\n    combined_list.sort()\n    \n    # Get the median index\n    mid_index = n // 2\n    \n    # Return the median value\n    if n % 2 == 0:\n        return (combined_list[mid_index - 1] + combined_list[mid_index]) / 2\n    else:\n        return combined_list[mid_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # concatenate the two sorted lists\n    arr = arr1 + arr2\n    # sort the concatenated list\n    arr.sort()\n    # find the middle element\n    mid = n // 2\n    # if the size of the list is odd, the median is the middle element\n    if n % 2 == 1:\n        return arr[mid]\n    # if the size of the list is even, return the average of the two middle elements\n    else:\n        return (arr[mid - 1] + arr[mid]) / 2"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted arrays into a single sorted array\n    merged_arr = arr1 + arr2\n    merged_arr.sort()\n\n    # Get the median index\n    median_index = n // 2\n\n    # Return the median\n    if n % 2 == 0:\n        return (merged_arr[median_index - 1] + merged_arr[median_index]) / 2\n    else:\n        return merged_arr[median_index]"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    \"\"\"\n    Write a function to find the median of two sorted lists of same size.\n    \"\"\"\n    # Merge the two sorted lists into a single sorted list\n    merged_list = arr1 + arr2\n\n    # Find the median index\n    median_index = n // 2\n\n    # If the length of the list is odd, take the middle element as median\n    if n % 2 == 1:\n        median = merged_list[median_index]\n\n    # If the length of the list is even, take the average of the middle two elements as median\n    else:\n        median = (merged_list[median_index - 1] + merged_list[median_index]) / 2\n\n    return median"
    },
    {
        "number": 622,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Merge the two sorted lists\n    merged_list = arr1 + arr2\n\n    # Sort the merged list\n    sorted_list = sorted(merged_list)\n\n    # Get the length of the list\n    length = len(sorted_list)\n\n    # Calculate the median index\n    if length % 2 == 0:\n        median_index = length // 2\n    else:\n        median_index = length // 2 + 1\n\n    # Return the median\n    return sorted_list[median_index]\n"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for num in nums:\n        print(num ** n)"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    - nums (list): A list of numbers.\n    - n (int): The power to which each number should be raised.\n\n    Returns:\n    - A list of n-th powers of each number in the original list.\n    \"\"\"\n    return [num ** n for num in nums]"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] **= n\n    return nums"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num ** n)\n    return result"
    },
    {
        "number": 623,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def nth_nums(nums, n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    results = []\n    for num in nums:\n        results.append(num ** n)\n    return results"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    uppercase_string = string.upper()\n    return uppercase_string"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    This function converts a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to check whether a given string is in uppercase or not.\n    '''\n    if string.isupper():\n        return \"The given string is in uppercase.\"\n    else:\n        return \"The given string is not in uppercase.\""
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 624,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2:\n        return \"The list must have at least two elements.\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # check if the input list has at least two elements\n    if len(newList) >= 2:\n        # set the first and last elements to a temporary variable\n        temp1 = newList[0]\n        temp2 = newList[-1]\n        # set the first element to the second last element and the second last element to the first element\n        newList[0] = temp2\n        newList[-1] = temp1\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n\n    # if the length of the list is less than 2, return the same list\n    if len(newList) < 2:\n        return newList\n\n    # swap the first and last element in the list\n    newList[0], newList[-1] = newList[-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) < 2: \n        return \"List must have at least 2 elements\"\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    first = newList[0]\n    last = newList[-1]\n    newList[0] = last\n    newList[-1] = first\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # get the length of the list\n    length = len(newList)\n\n    # if the length is less than 2, return the original list\n    if length < 2:\n        return newList\n\n    # swap the first and last element\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n\n    return newList"
    },
    {
        "number": 625,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def swap_List(newList):\n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList) >= 2:\n        first_element = newList[0]\n        last_element = newList[-1]\n        newList[0] = last_element\n        newList[-1] = first_element\n        return newList\n    else:\n        print(\"List must have at least 2 elements\")\n        return None"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    # Calculate the area of the largest triangle that can be inscribed in a semicircle with radius r\n    area = (2*r*r) / 3\n    \n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the area of a triangle using Heron's formula\n    def triangle_area(a, b, c):\n        s = (a + b + c) / 2\n        return sqrt(s * (s - a) * (s - b) * (s - c))\n\n    # Calculate the area of a triangle inscribed in a semicircle with given radius r\n    def triangle_inscribed_area(a, b, c, r):\n        # Use the formula to find the semiperimeter of the triangle\n        s = (a + b + c) / 2\n        # Calculate the circumradius of the triangle inscribed in a semicircle\n        circ_r = r - sqrt((r * r) - (s * s))\n        # Calculate the area of the triangle inscribed in the semicircle\n        return triangle_area(a, b, circ_r)\n\n    # Find the area of the largest triangle that can be inscribed in a semicircle with given radius r\n    max_area = 0\n    for a in range(1, r):\n        for b in range(a, r):\n            for c in range(b, r):\n                area = triangle_inscribed_area(a, b, c, r)\n                if area > max_area:\n                    max_area = area\n    return max_area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # convert radius to radians\n    r = r * (2 * 3.14159) / 360\n\n    # calculate the area of the largest triangle inscribed in the semicircle\n    area = (2 * r ** 2) / (3 * (1 + r ** 2))\n\n    # convert the area to square centimeters\n    area = area * 2.54\n\n    # round the area to two decimal places\n    area = round(area, 2)\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = math.pi*(r**2)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula to calculate the area of a triangle\n    def area_of_triangle(s):\n        return 0.5 * s * (s - r) * (s - r)\n\n    # Function to check if the given radius is sufficient to create a triangle\n    def is_sufficient(s):\n        return s <= 2 * r\n\n    # Initialize the smallest side of the largest triangle\n    s = 0\n    # Initialize the area of the largest triangle\n    area = 0\n\n    # Loop while the current side is less than or equal to the given radius\n    while is_sufficient(s):\n        # Calculate the area of the current triangle\n        area = max(area, area_of_triangle(s))\n        # Increase the side of the triangle by 0.1\n        s += 0.1\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Calculate the semi-circle area\n    area = pi * r ** 2\n    \n    # Calculate the areas of the smallest triangles\n    triangle1 = 0.5 * r ** 2\n    triangle2 = 0.5 * r ** 2\n    \n    # Calculate the sum of the areas of the triangles\n    area_sum = triangle1 + triangle2\n    \n    # Calculate the area of the largest triangle\n    area_largest = area_sum * (1 + triangle1 / area_sum)\n    \n    return area_largest"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # First, calculate the semi-perimeter of the triangle\n    s = 3 * r\n    \n    # Next, calculate the area of the triangle using Heron's formula\n    a = 0.5 * s * (s - r)\n    \n    # Finally, return the area of the largest triangle that can be inscribed in the semicircle\n    return a"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n\n    # first, we calculate the distance from the center of the circle to the center of the triangle\n    dist = r * 2\n\n    # now, we find the largest possible side of the triangle\n    max_side = r * 3\n\n    # finally, we find the area of the triangle using Heron's formula\n    area = dist * max_side / 2\n\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Formula for area of triangle = (1/2)*base*height\n    # Formula for area of largest triangle = 1/2*r^2\n    # Area of smallest triangle = r^2\n    # Base of largest triangle = 2r\n    # Height of largest triangle = 2r\n    # Solving for base and height of largest triangle\n    base = 2*r\n    height = 2*r\n    # Computing area of largest triangle\n    area = 0.5*(base*height)\n    # Returning area of largest triangle\n    return area"
    },
    {
        "number": 626,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def triangle_area(r):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # Convert the radius to a float for mathematical operations\n    r = float(r)\n\n    # Calculate the area of a triangle with side length 2r\n    area_triangle = 0.5 * r * r\n\n    # Calculate the area of a semicircle with radius r\n    area_semicircle = 2 * r * r * pi\n\n    # Calculate the area of the largest triangle that can be inscribed in the semicircle\n    max_area = max(area_triangle, area_semicircle)\n\n    return max_area"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    missing = 1\n    for num in array:\n        if num!= missing:\n            return missing\n        missing += 1\n    return missing"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end+1):\n        if i!= array[i]:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    # Check if the array is sorted\n    if all(array[i] <= array[i + 1] for i in range(len(array) - 1)):\n        for i in range(start, end + 1):\n            if i not in array:\n                return i\n    else:\n        raise ValueError(\"Array is not sorted.\")"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes an array of natural numbers and returns the smallest missing number.\n    \"\"\"\n    if end is None:\n        end = max(array)\n    for num in array:\n        if num < start:\n            start = num\n    return start + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number from a sorted list of natural numbers.\n\n    Parameters:\n    array (list): The sorted list of natural numbers.\n    start (int): The starting index of the range to search (default 0).\n    end (int): The ending index of the range to search (default None, which means to search the entire array).\n\n    Returns:\n    int: The smallest missing number.\n\n    Raises:\n    ValueError: If the array is not a list of integers.\n    \"\"\"\n    if not isinstance(array, list):\n        raise ValueError(\"The input must be a list of integers.\")\n\n    if not all(isinstance(x, int) for x in array):\n        raise ValueError(\"The input must contain only integers.\")\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function takes a sorted list of natural numbers as input and returns the smallest missing number.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if i!= array[i]:\n            return i"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n\n    if end is None:\n        end = len(array) - 1\n\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    \"\"\"\n    if end is None:\n        end = len(array) - 1\n    for i in range(start, end + 1):\n        if array[i]!= i:\n            return i\n    return end + 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_First_Missing(array, start=0, end=None):\n    \"\"\"\n    This function finds the smallest missing number in a sorted list of natural numbers.\n\n    Parameters:\n    -----------\n    array : list of integers\n        The sorted list of natural numbers.\n\n    start : integer, optional\n        The starting index of the array to consider. The default is 0.\n\n    end : integer, optional\n        The ending index of the array to consider. The default is None.\n\n    Returns:\n    --------\n    int\n        The smallest missing number in the array.\n\n    \"\"\"\n    # Check if the array is sorted.\n    if not all(array[i] < array[i + 1] for i in range(len(array) - 1)):\n        raise ValueError(\"The array must be sorted.\")\n\n    # Initialize the first and last indices.\n    first_index = start\n    last_index = end if end is not None else len(array) - 1\n\n    # Loop through the array until the last missing number is found.\n    while True:\n        # If the first index is greater than the last index, return the missing number.\n        if first_index > last_index:\n            return first_index\n\n        # Find the middle index of the array.\n        middle_index = (first_index + last_index) // 2\n\n        # If the middle index is equal to the last index, it means that the missing number is between the last two elements.\n        if middle_index == last_index:\n            return min(array[last_index], array[last_index + 1])\n\n        # If the middle index is less than the last index, it means that the missing number is between the last two elements.\n        if array[middle_index] > array[middle_index + 1]:\n            return array[middle_index]\n\n        # If the middle index is greater than the last index, it means that the missing number is between the middle and last elements.\n        if array[middle_index] < array[middle_index - 1]:\n            return array[middle_index - 1]\n\n        # If the middle index is equal to the first index, it means that the missing number is between the first and middle elements.\n        if middle_index == first_index:\n            return array[middle_index]\n\n        # If the middle index is less than the first index, it means that the missing number is between the first and middle elements.\n        if array[middle_index] < array[middle_index + 1]:\n            return array[middle_index]\n\n        # Update the indices.\n        if array[middle_index] > array[middle_index + 1]:\n            first_index = middle_index + 1\n        else:\n            last_index = middle_index - 1"
    },
    {
        "number": 627,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i:\n            return i\n    return end+1"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    \"\"\"\n    Write a function to replace all spaces in the given string with '%20'.\n    \"\"\"\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Split(list):\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Split(list): \n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for num in list:\n        if num % 2 == 0:\n            even_list.append(num)\n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for number in list:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Split(list): \n    even_list = [] \n    for num in list: \n        if num % 2 == 0: \n            even_list.append(num) \n    return even_list"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Split(lst):\n    even_lst = []\n    for num in lst:\n        if num % 2 == 0:\n            even_lst.append(num)\n    return even_lst"
    },
    {
        "number": 629,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_numbers = []\n    for num in list: \n        if num % 2 == 0: \n            even_numbers.append(num) \n    return even_numbers"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def adjac(ele, sub=None):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    if sub is None:\n        sub = []\n    if type(ele) == tuple and len(ele) == 2:\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if (i, j)!= (0, 0):\n                    sub.append((ele[0] + i, ele[1] + j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def adjac(ele, sub=[]): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    adj = []\n\n    # Check for top and bottom adjacent cells\n    if row-1 >= 0:\n        adj.append((row-1,col))\n    if row+1 < len(sub):\n        adj.append((row+1,col))\n\n    # Check for left and right adjacent cells\n    if col-1 >= 0:\n        adj.append((row,col-1))\n    if col+1 < len(sub[0]):\n        adj.append((row,col+1))\n\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj = []\n    if x > 0 and y > 0:\n        adj.append((x-1, y-1))\n    if x < 0 and y > 0:\n        adj.append((x+1, y-1))\n    if x < 0 and y < 0:\n        adj.append((x+1, y+1))\n    if x > 0 and y < 0:\n        adj.append((x-1, y+1))\n    if x == 0 and y > 0:\n        adj.append((x, y-1))\n    if x == 0 and y < 0:\n        adj.append((x, y+1))\n    if x > 0:\n        adj.append((x-1, y))\n    if x < 0:\n        adj.append((x+1, y))\n    if y > 0:\n        adj.append((x, y-1))\n    if y < 0:\n        adj.append((x, y+1))\n    if sub:\n        for i in sub:\n            adj.append((i[0], i[1]))\n    return adj"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []):\n    \"\"\"\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    \"\"\"\n    adjacent = []\n    for i in range(len(ele)):\n        for j in range(len(ele[i])):\n            if i!= 0 and i!= len(ele) - 1 and j!= 0 and j!= len(ele[i]) - 1:\n                adjacent.append((ele[i][j], ele[i][j + 1], ele[i + 1][j], ele[i + 1][j + 1]))\n    return adjacent"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    row, col = ele\n    \n    # North\n    if row > 0 and sub == []:\n        sub.append((row-1, col))\n    # South\n    elif row < 9 and sub == []:\n        sub.append((row+1, col))\n    # West\n    elif col > 0 and sub == []:\n        sub.append((row, col-1))\n    # East\n    elif col < 9 and sub == []:\n        sub.append((row, col+1))\n    \n    # North-West\n    if row > 0 and col > 0:\n        if (row-1, col-1) not in sub:\n            sub.append((row-1, col-1))\n    # North-East\n    if row > 0 and col < 9:\n        if (row-1, col+1) not in sub:\n            sub.append((row-1, col+1))\n    # South-West\n    if row < 9 and col > 0:\n        if (row+1, col-1) not in sub:\n            sub.append((row+1, col-1))\n    # South-East\n    if row < 9 and col < 9:\n        if (row+1, col+1) not in sub:\n            sub.append((row+1, col+1))\n    \n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_list = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if (i!= 0 or j!= 0) and (x + i, y + j) not in sub:\n                adj_list.append((x + i, y + j))\n    return adj_list"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if i == x and j == y:\n                continue\n            if i >= 0 and i < len(sub[0]) and j >= 0 and j < len(sub):\n                sub.append((i, j))\n    return sub"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    for dx, dy in [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]:\n        if 0 <= x + dx < len(sub) and 0 <= y + dy < len(sub[x]):\n            sub[x][y] += [(x + dx, y + dy)]\n            adjac((x + dx, y + dy), sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    result = []\n    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n        if 0 <= x+dx < len(sub) and 0 <= y+dy < len(sub[0]):\n            result.append((x+dx, y+dy))\n    return result"
    },
    {
        "number": 630,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def adjac(ele, sub=[]):\n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x, y = ele\n    adj_coords = []\n    if y > 0 and (x+1, y-1) not in sub:\n        adj_coords.append((x+1, y-1))\n    if x > 0 and (x-1, y) not in sub:\n        adj_coords.append((x-1, y))\n    if y < n-1 and (x+1, y+1) not in sub:\n        adj_coords.append((x+1, y+1))\n    if x < n-1 and (x+1, y) not in sub:\n        adj_coords.append((x+1, y))\n    return adj_coords"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for i in text:\n        if i == \" \":\n            new_text += \"_\"\n        elif i == \"_\":\n            new_text += \" \"\n        else:\n            new_text += i\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = \"\"\n    for char in text:\n        if char.isspace():\n            new_text += \"_\"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    new_text = \"\"\n    for char in text:\n        if char == \" \":\n            new_text += \"_\"\n        elif char == \"_\":\n            new_text += \" \"\n        else:\n            new_text += char\n    return new_text"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    \"\"\"\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    \"\"\"\n    text = text.replace(\" \", \"_\")\n    return text.replace(\"_\", \" \")"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n\n    # initialize an empty list to store the words after replacement\n    words = []\n\n    # loop through each word in the given string\n    for word in text.split():\n\n        # split the word into characters and store them in a new list\n        chars = list(word)\n\n        # loop through each character in the list\n        for i, char in enumerate(chars):\n\n            # check if the character is a space\n            if char =='':\n\n                # replace the space with an underscore\n                chars[i] = '_'\n\n                # check if the next character is a space\n                if i+1 < len(chars) and chars[i+1] =='':\n\n                    # skip the next character\n                    i += 1\n\n            # check if the character is an underscore\n            elif char == '_':\n\n                # replace the underscore with a space\n                chars[i] =''\n\n        # join the characters back into a string and add it to the words list\n        words.append(''.join(chars))\n\n    # join the words back into a single string and return it\n    return''.join(words)"
    },
    {
        "number": 631,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # Create an empty list to store non-zero elements\n    non_zero = []\n    # Loop through the input list\n    for num in num_list:\n        # If the element is not zero, append it to the non-zero list\n        if num!= 0:\n            non_zero.append(num)\n    # Append all zeroes to the non-zero list\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            non_zero.append(num_list[i])\n    # Copy the non-zero elements back into the input list\n    for i in range(len(num_list)-len(non_zero)):\n        num_list.pop(0)\n    for num in non_zero:\n        num_list.append(num)"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    zero_index = []\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            zero_index.append(i)\n\n    if zero_index:\n        num_list.pop(zero_index[0])\n        for i in range(len(zero_index)):\n            num_list.insert(i, 0)\n    else:\n        num_list.reverse()\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    zero_count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            zero_count += 1\n        else:\n            break\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            for j in range(i, len(num_list)-1):\n                num_list[j] = num_list[j+1]\n        else:\n            break\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list.pop(i)\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i]!= 0:\n            num_list[count] = num_list[i]\n            count += 1\n    for i in range(count, len(num_list)):\n        num_list[i] = 0\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all zeroes to the end of the list.\n    \"\"\"\n    # Initialize two pointers, i and j, to the beginning and end of the list, respectively.\n    i = 0\n    j = len(num_list) - 1\n\n    # Traverse the list from both ends, swapping elements at i and j if they are non-zero.\n    while i < j:\n        if num_list[i]!= 0:\n            i += 1\n        elif num_list[j]!= 0:\n            j -= 1\n        else:\n            num_list[i], num_list[j] = num_list[j], num_list[i]\n            i += 1\n            j -= 1\n\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n\n    # Create a new list to store non-zero values\n    non_zero_list = []\n\n    # Loop through the given list and append non-zero values to the new list\n    for num in num_list:\n        if num!= 0:\n            non_zero_list.append(num)\n\n    # Append all zeroes to the end of the new list\n    non_zero_list.extend([0] * (len(num_list) - len(non_zero_list)))\n\n    # Return the new list with all non-zero values at the beginning\n    return non_zero_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    This function takes a list of integers as input and moves all the zeroes to the end of the list.\n    \"\"\"\n    zero_count = 0 # counter for the number of zeroes found in the list\n\n    # loop through the list\n    for i in range(len(num_list)):\n        # if the current element is zero, increment the zero_count counter\n        if num_list[i] == 0:\n            zero_count += 1\n        # if the zero_count reaches the end of the list, the zeroes have been moved to the end\n        elif zero_count == i+1:\n            break\n        # if the zero_count is less than the current index, swap the current element with the element after it\n        else:\n            num_list[i], num_list[i+1] = num_list[i+1], num_list[i]\n\n    # return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    # Initialize two pointers - left and right\n    left = 0\n    right = 0\n    \n    # Traverse the list\n    while right < len(num_list):\n        # If the current element is not zero\n        if num_list[right]!= 0:\n            # Move the element to its correct position\n            num_list[left], num_list[right] = num_list[right], num_list[left]\n            \n            # Move the left pointer forward\n            left += 1\n        # Move the right pointer forward\n        right += 1\n    \n    # Return the modified list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    # Create a new list to store the non-zero numbers\n    non_zero_list = []\n    # Iterate over the given list\n    for num in num_list:\n        # If the number is not zero, append it to the new list\n        if num!= 0:\n            non_zero_list.append(num)\n    # Move the non-zero numbers from the beginning of the list to the end\n    for i in range(len(num_list)-1, -1, -1):\n        if num_list[i] == 0:\n            num_list[i], num_list[len(num_list)-1] = num_list[len(num_list)-1], num_list[i]\n    # Return the final list\n    return num_list"
    },
    {
        "number": 632,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    \"\"\"\n    Write a python function to move all zeroes to the end of the given list.\n    \"\"\"\n    count = 0  # initialize the count variable\n    \n    # loop through the list and count the number of non-zero elements\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[count] = num_list[count], num_list[i]\n            count += 1\n    \n    # remove the extra zeroes from the end of the list\n    num_list = num_list[:count]\n    \n    return num_list"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if len(arr) < 2:\n        return \"Please provide a list with at least two elements\"\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n):\n    # initialize the sum of XOR to 0\n    xor_sum = 0\n\n    # iterate through all pairs of numbers in the list\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum = xor_sum ^ arr[i] ^ arr[j]\n\n    # return the sum of XOR\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function takes in an array of n integers and returns the sum of XOR of all pairs of elements in the array.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and returns the sum of xor of all pairs of numbers in the list.\n    '''\n    sum_of_xors = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum_of_xors += arr[i] ^ arr[j]\n    return sum_of_xors"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr, n):\n    # Find the xor of all pairs of numbers in the list\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum ^= arr[i] ^ arr[j]\n    # Return the sum of xor of all pairs of numbers\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # XOR of all pairs\n    xor_sum = sum([arr[i] ^ arr[j] for i in range(n) for j in range(i, n)])\n    return xor_sum"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr, n):\n    '''\n    This function takes a list and a number n as input, and returns the sum of the xor of all pairs of numbers in the list.\n    '''\n    sum_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            sum_xor += xor\n    return sum_xor"
    },
    {
        "number": 633,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n):\n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            xor_sum ^= arr[i] ^ arr[j]\n    return xor_sum"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Extract the maximum element from the heap\n    max_element = hq.heappop(iterable)\n\n    # Reverse the list and add the max element to the end\n    reversed_list = iterable[::-1] + [max_element]\n\n    # Convert the reversed list back to a max heap\n    hq.heapify(reversed_list)\n\n    # Return the reversed and sorted list\n    return reversed_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = list(iterable)\n    hq.heapify(heap)\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Sort the given iterable using heap sort algorithm.\n\n    Args:\n        iterable (iterable): The iterable to be sorted.\n\n    Returns:\n        list: The sorted list.\n    '''\n\n    # Create a max heap from the given iterable\n    heap = list(iterable)\n    hq.heapify(heap)\n\n    # Create a new list to store the sorted elements\n    sorted_list = []\n\n    # Iterate until the heap is empty\n    while heap:\n        # Pop the largest element from the heap\n        max_val = hq.heappop(heap)\n        # Add the element to the sorted list\n        sorted_list.append(max_val)\n\n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function sorts the given list using the heap sort algorithm.\n    '''\n    # convert the list to a heap\n    heap = hq.heapify(iterable)\n\n    # extract the maximum element from the heap and add it to the end of the sorted list\n    sorted_list = [heapq.heappop(heap)]\n    while heap:\n        # extract the maximum element from the heap and add it to the end of the sorted list\n        sorted_list.append(heapq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    n = len(iterable)\n    # Build max heap of size n\n    hq.heapify(iterable, 0, n-1)\n    # Extract elements from heap in max heap and store in new list\n    sorted_list = []\n    while n > 0:\n        sorted_list.append(hq.heappop(iterable))\n        n -= 1\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using the heapsort algorithm.\n    '''\n    # Convert the list to a heap data structure\n    heap = [0] * len(iterable)\n    for i, item in enumerate(iterable):\n        heap[i] = item\n        hq.heapify(heap)\n\n    # Extract the sorted list from the heap\n    sorted_list = []\n    while heap:\n        sorted_list.append(hq.heappop(heap))\n\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    This function takes an iterable as input and sorts it using the heap sort algorithm.\n    The heap sort algorithm is a comparison-based sorting algorithm that uses a binary heap data structure.\n    '''\n    # Convert the iterable to a list and create a min heap from it\n    heap = list(iterable)\n    hq.heapify(heap)\n    \n    # Extract the minimum element from the heap and append it to a new list\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n        \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # convert the list to a heap\n    heap = list(iterable)\n    heapq.heapify(heap)\n    \n    # extract elements from the heap in sorted order\n    sorted_list = []\n    while heap:\n        sorted_list.append(heapq.heappop(heap))\n    \n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Create a min-heap of the given list\n    hq.heapify(iterable)\n    \n    # Extract the elements from the heap and append them to a new list\n    sorted_list = []\n    while hq.heapify(iterable):\n        sorted_list.append(hq.heappop(iterable))\n    \n    # Return the sorted list\n    return sorted_list"
    },
    {
        "number": 635,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import heapq as hq\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list using heap sort algorithm.\n    '''\n    # Convert the list to a max heap\n    hq.heapify(iterable)\n\n    # Extract elements from the max heap one by one\n    result = []\n    while iterable:\n        result.append(iterable[0])\n        iterable = iterable[1:]\n\n    # Convert the result back to a list and return it\n    return list(result)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # Check if the sale amount is greater than the actual cost\n    if sale_amount > actual_cost: \n        # Check if the sale amount is equal to the actual cost\n        if sale_amount == actual_cost: \n            # Return True if no profit and no loss\n            return True \n        else: \n            # Return False if profit and no loss\n            return False \n    else: \n        # Return False if no profit and loss\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost < sale_amount:\n        return False\n    else:\n        if actual_cost - sale_amount == 0:\n            return True\n        elif actual_cost - sale_amount < 0:\n            return False\n        else:\n            if sale_amount == 0:\n                return False\n            else:\n                profit = sale_amount - actual_cost\n                return noprofit_noloss(actual_cost, profit)"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    \n    Parameters:\n    actual_cost: actual cost of the sale\n    sale_amount: amount of the sale\n    \n    Returns:\n    True if no profit and no loss, False otherwise\n    '''\n\n    # Calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # If the profit is less than 0 or the loss is less than 0, then the sale has no profit and no loss\n    if profit < 0 or loss < 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    # calculate the profit and loss\n    profit = sale_amount - actual_cost\n    loss = actual_cost - sale_amount\n    \n    # check if profit is positive and loss is positive\n    if profit > 0 and loss > 0:\n        print(\"No profit and no loss\")\n    else:\n        print(\"Profit or loss is present\")"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    # check if sale_amount is greater than or equal to actual_cost\n    if sale_amount >= actual_cost:\n        # check if sale_amount is equal to actual_cost\n        if sale_amount == actual_cost:\n            # if sale_amount is equal to actual_cost, the sale is a no-loss\n            return \"No loss\"\n        else:\n            # if sale_amount is greater than actual_cost, the sale is a no-profit\n            return \"No profit\"\n    else:\n        # if sale_amount is less than actual_cost, the sale is a no-loss\n        return \"No loss\""
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost, sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    if actual_cost >= sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n\n    if actual_cost < sale_amount:\n        return True\n    else:\n        return False"
    },
    {
        "number": 637,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost, sale_amount):\n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_profit = sale_amount - actual_cost\n    if total_profit < 0:\n        print(\"No profit\")\n    elif sale_amount == actual_cost:\n        print(\"No loss\")\n    else:\n        print(\"Has profit\")"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Kelvin\n    k = t + 273.15\n    # Calculate the heat capacity ratio\n    cp = 0.0065 * (1 - 0.0018 * math.exp(-(k - 273.15) / (273.15 - 45)))\n    # Calculate the specific humidity\n    q = 1.013 * math.exp(17.269 * (k - 237.3) / (k - 273.15))\n    # Calculate the specific heat capacity at constant pressure\n    cpc = (cp * q) / ((1 - q) * (1 - q))\n    # Calculate the specific heat capacity at constant volume\n    cpv = (cp * (1 - q) * (1 - q)) / ((1 - q) * (1 - q))\n    # Calculate the specific enthalpy at constant pressure\n    hpc = 0.5 * cpv * (v ** 2)\n    # Calculate the specific enthalpy at constant volume\n    hpv = 0.5 * cpv * (v ** 2)\n    # Calculate the air density\n    rho = 1.225 * (1 - 0.00014 * (v ** 2) + 0.0000043 * (v ** 4))\n    # Calculate the air pressure\n    p = 101.3 * math.exp(1.333 * ((v ** 2) / 0.065) - 0.354 * (v ** 2) - 0.0125 * v)\n    # Calculate the virtual temperature\n    vt = 273.15 + 0.0065 * t - (cp * (0.5 * v ** 2 + 273.15)) / p\n    # Calculate the relative humidity\n    rh = 100 * (v * rho * (hpv - hpc) / (hv - hpc)) / (vt - vt)\n    # Calculate the air speed at constant pressure\n    asp = (v * rho * cpc) / p\n    # Calculate the air speed at constant volume\n    asv = (v * rho * cpv) / vt\n    # Calculate the wind speed at constant pressure\n    wsp = 0.622 * v * asp\n    # Calculate the wind speed at constant volume\n    wsv = 0.622 * v * asv\n    # Calculate the wind chill index\n    wci = round((wsp / wsv) * rh + 32)\n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Calculate the wind chill temperature\n    wc = 35.74 + 0.6215*t - 35.75*math.exp((17.67*t)/(t+243.5))\n\n    # Calculate the wind chill index\n    wi = 35.75 + 0.4275*wc\n\n    # Round the wind chill index to the next integer\n    wci = int(wi + 0.5)\n\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return math.ceil(0.5*(t-((35.75+0.6215*v)/(13.12+0.3965*v))))"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    f = (9.81*1.8)/t # conversion factor from mph to m/s\n    c = (f-32)/1.8\n    k = 0.6219718*(c/t)**1.163\n    wind_chill_index = round(k-273.15)\n    return wind_chill_index"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Convert temperature to Fahrenheit\n    t = (t * 9/5) + 32\n    \n    # Calculate wind chill index using formulae\n    if v <= 4.5:\n        wci = (t * 1.8) + 32\n    elif v > 4.5 and v <= 11.5:\n        wci = (t * 1.3) + 7.5\n    elif v > 11.5 and v <= 18.5:\n        wci = t + 0.621 * (v - 11.5)\n    elif v > 18.5 and v <= 24.5:\n        wci = t - 0.785 * (v - 18.5)\n    else:\n        wci = 0\n    \n    # Convert wind chill index to integer\n    wci = int(wci + 0.5)\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    c = 0.5556\n    r = 13.12\n    \n    # Convert temperature to Fahrenheit\n    f = (t * 9/5) + 32\n    \n    # Calculate the dewpoint using the Tsyganenko-Bolton formulae\n    if f < 72:\n        dewpoint = (0.0065 * f) + 237.3\n    else:\n        dewpoint = (0.0065 * (f - 32)) + 216.67\n    \n    # Calculate the actual wind chill index\n    wci = math.ceil((c * v) / (r * dewpoint))\n    \n    return wci"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef wind_chill(v, t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    # calculate the dew point temperature using the formula: Tdp = 25\u00b0C * (1 - 0.0065 * v**0.16)\n    Tdp = 25.0 * (1.0 - 0.0065 * v ** 0.16)\n    # calculate the wind chill index using the formula: wci = 13.12 + 0.6215 * T - 11.37 * T**0.16 + 0.3965 * T**0.16 * v + 0.2378 * (T - Tdp)\n    wci = 13.12 + 0.6215 * t - 11.37 * t ** 0.16 + 0.3965 * t ** 0.16 * v + 0.2378 * (t - Tdp)\n    # round the wind chill index to the nearest integer and return it\n    return int(math.ceil(wci))\n"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef wind_chill(v, t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n\n    # Convert temperature to fahrenheit\n    t_f = (t * 1.8) + 32\n    \n    # Calculate the wind chill using the formula:\n    # WC = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t_f\n    wc = 13.12 + 0.6215 * t - 11.37 * math.log(v) + 0.3965 * t_f\n    \n    # Round the wind chill to the nearest integer\n    wc_rounded = math.ceil(wc)\n    \n    return wc_rounded"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef wind_chill(v,t):\n    \"\"\"\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    \"\"\"\n    c_to_f = lambda x: (x * 9/5) + 32\n    t_f = c_to_f(t)\n\n    if v < 0 or v > 15:\n        return None\n    \n    if t_f < 0 or t_f > 100:\n        return None\n    \n    # Convert wind velocity to m/s\n    v_mps = v * 1.60934\n    \n    # Calculate wind chill\n    wc = (0.62197 * (math.log(t_f/t) + 11.37*(math.log(v_mps/10)))) + (0.42759 * (math.log(t_f/t) + 5.29*(math.log(v_mps/10))))\n    \n    # Round to nearest integer\n    wc_int = round(wc)\n    \n    return wc_int"
    },
    {
        "number": 638,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    \n    # Calculate the wind chill temperature\n    c = 0.6219718*math.log(t/10) + 35.74 + 0.42759*v + 0.0000016*t**2\n    \n    # Calculate the wind chill index rounded to the next integer\n    wc = round(c)\n    \n    return wc"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    lowercase_names = [name for name in sample_names if name[0].isupper()]\n    total_length = sum(len(name) for name in lowercase_names)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].isupper():  # check if the name starts with a lowercase letter\n            continue  # skip to the next iteration of the loop\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    total_length = 0\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            total_length += len(name)\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    # Create an empty list to store the length of names\n    lengths = []\n\n    # Loop through each name in the list\n    for name in sample_names:\n        # Remove leading and trailing whitespace\n        name = name.strip()\n        # Check if the name starts with a lowercase letter\n        if name[0].islower():\n            # If it does, skip it\n            continue\n        # Calculate the length of the name\n        length = len(name)\n        # Append the length to the lengths list\n        lengths.append(length)\n\n    # Return the sum of the lengths\n    return sum(lengths)"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # create an empty list to store the names that start with a lowercase letter\n    lower_names = []\n    # loop through each name in the list\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, add it to the list of lower names\n            lower_names.append(name)\n    # loop through the list of lower names and add their length to a running total\n    total_length = 0\n    for name in lower_names:\n        total_length += len(name)\n    # return the total length of the remaining names\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize the sum variable to 0\n    total_sum = 0\n    # iterate over the list of names\n    for name in sample_names:\n        # check if the name starts with a lowercase letter\n        if name[0].islower():\n            # if it does, skip it\n            continue\n        # add the length of the name to the sum\n        total_sum += len(name)\n    # return the total sum\n    return total_sum"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # initialize a variable to keep the sum of lengths of names\n    total_length = 0\n    \n    # loop through the names in the list and append the length of each name to the total_length variable\n    for name in sample_names:\n        if name[0].isupper(): # check if the first letter of the name is uppercase\n            total_length += len(name)\n    \n    return total_length # return the total length of names after removing those that start with a lowercase letter"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    # Initialize a variable to store the sum of lengths\n    total_length = 0\n    \n    # Loop through each name in the sample_names list\n    for name in sample_names:\n        \n        # Remove any lowercase letters from the name\n        name = name.translate(str.maketrans('', '', string.punctuation))\n        \n        # If the name starts with a lowercase letter, skip it\n        if name[0].islower():\n            continue\n        \n        # Otherwise, add the length of the name to the total\n        total_length += len(name)\n    \n    # Return the total length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Create a new list to store the names that start with a lowercase letter\n    lower_names = []\n    # Loop through each name in the input list\n    for name in sample_names:\n        # If the name starts with a lowercase letter, add it to the lower_names list\n        if name[0].islower():\n            lower_names.append(name)\n    # Initialize the sum to zero\n    total_length = 0\n    # Loop through each name in the lower_names list and add its length to the total_length\n    for name in lower_names:\n        total_length += len(name)\n    # Return the total_length\n    return total_length"
    },
    {
        "number": 639,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if not name[0].islower()])"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\(.*?\\)')\n    result = pattern.sub('', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r\"\\([^)]*\\)\"\n    return re.sub(pattern, \"\", items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    # Remove all the parenthesis and what is inbetween them from the string\n    items = re.sub(r'\\([^()]*\\)', '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    \"\"\"\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    \"\"\"\n    pattern = r'\\([^\\)]+\\)'\n    # Removing the parenthesis from the string using regex\n    items = re.sub(pattern, '', items)\n    # Removing the space from the string\n    items = items.strip()\n    # Returning the modified string\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]+\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    items = re.sub(r'\\([^)]*\\)', '', items) # remove parenthesis\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = re.compile(r'\\([^()]*\\)')\n    items = pattern.sub('', items)\n    return items"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    pattern = r'(\\(|\\)|\\[|\\]|\\{|\\})'\n    return re.sub(pattern, '', items)"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    result = re.sub(pattern, '', items)\n    return result"
    },
    {
        "number": 640,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r'\\([^)]*\\)'\n    items = re.sub(pattern, '', items)\n    return items"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    def is_square(num):\n        return num == int(num ** 0.5) ** 2\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_square(num):\n            count += 1\n    return num\n\n\nn = 5\nprint(\"The {}th nonagonal number is: {}\".format(n, is_nonagonal(n)))"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return is_nonagonal(n-1) + is_nonagonal(n-2) + 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize the counter and the base of the nonagonal number\n    counter = 0\n    base = 1\n    \n    # Loop n times and calculate the nonagonal number\n    while counter < n:\n        # Increment the counter and multiply the base by 2\n        counter += 1\n        base *= 2\n    \n    # Return the nonagonal number\n    return base - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Initialize variables\n    a = 1\n    b = 4\n\n    # Loop through each row\n    for i in range(n):\n        # Calculate the nth nonagonal number\n        nonagonal = a + (i * (i + 1))\n\n        # Print the number\n        print(nonagonal)\n\n        # Swap the values of a and b\n        a, b = b, a + b\n\n    return nonagonal"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n * (n + 1)) // 2)"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num = 1\n    for i in range(1, n + 1):\n        num += i**2\n    return num"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input: n must be a positive integer.\"\n    \n    i = 1\n    j = n\n    while i <= j:\n        sum = i + j\n        if sum % 2 == 0:\n            i += 2\n        else:\n            j -= 2\n            \n    return i\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return None\n    \n    # Define a function to find the sum of the first n rows of Pascal's triangle\n    def pascal_row_sum(k):\n        if k == 0:\n            return 1\n        else:\n            return k * pascal_row_sum(k-1)\n    \n    # Find the nth nonagonal number by summing the first n rows of Pascal's triangle\n    return pascal_row_sum(n) - pascal_row_sum(n-2) + 2*pascal_row_sum(n-1) - 1"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    result = 0\n    for i in range(1, n+1):\n        result += (i * (2*i-1))\n    return result"
    },
    {
        "number": 641,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    else:\n        return (n*(n+1))//2"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    regex = re.compile(r'\\b(z)\\b', re.IGNORECASE)\n    result = regex.search(text)\n    if result:\n        return True\n    else:\n        return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Split the text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n    \n    # Iterate over the words and check if 'z' is in the middle\n    for word in words:\n        if 'z' in word[1:-1]:\n            return True\n    \n    # If no words contain 'z' in the middle, return False\n    return False"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b\\w*[zZ]\\w*\\b'\n    matches = re.findall(pattern, text)\n    return len(matches) > 0"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = re.compile(r'\\b\\w+z\\b')\n    words = word_pattern.findall(text)\n\n    if len(words) == 0:\n        return False\n    else:\n        return True"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b[zZ]+\\b'\n    return re.search(pattern, text)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = r'\\b(?!\\w)(z)(?!\\w)\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word_pattern = r'\\b[a-zA-Z]+[zZ][a-zA-Z]+\\b'\n    matches = re.findall(word_pattern, text)\n    return matches\n"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    pattern = re.compile(r'(?<![a-zA-Z])[zZ](?![a-zA-Z])')\n    matches = pattern.findall(text)\n    return any(matches)"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[a-zA-Z]+z\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 643,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'\\b[zZ]\\w*\\b'\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    # Print the reversed array\n    print(\"Reversed array is:\", input)"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k):\n    \"\"\"\n    This function reverses an array upto a given position.\n\n    :param input: A list of integers.\n    :param k: An integer that represents the position where the array needs to be reversed.\n\n    :return: The reversed array upto the given position.\n    \"\"\"\n    input.reverse()\n    return input[:k]"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # reverse the array upto the given position\n    input = input[:k] + input[k:][::-1] + input[:k]\n    \n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    This function takes an array as input and a position k as input.\n    The function reverses the array up to the position k and returns the reversed array.\n    '''\n    # Initialize two pointers - start and end\n    start = 0\n    end = len(input) - 1\n\n    # Reverse the array from start to k-1\n    while start < k-1:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    # Reverse the array from k to end\n    while start < end:\n        input[start], input[end] = input[end], input[start]\n        start += 1\n        end -= 1\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Reverse the array from index 0 to k-1\n    input[:k] = input[:k][::-1]\n    # Reverse the array from k to the end\n    input[k:] = input[k:][::-1]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    for i in range(k, len(input)):\n        input[i], input[k] = input[k], input[i]\n        k += 1"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n\n    # Find the length of the array\n    n = len(input)\n\n    # If k is greater than the length of the array, reverse the entire array\n    if k > n:\n        input.reverse()\n        return input\n\n    # Reverse the first k elements of the array\n    input[:k] = input[:k][::-1]\n\n    # Reverse the remaining elements of the array\n    input[k:] = input[k:][::-1]\n\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # find the length of the array\n    length = len(input)\n    # initialize two pointers to the start and end of the array\n    start = 0\n    end = length - 1\n    # loop while the start pointer is less than k and the end pointer is greater than or equal to k\n    while start < k and end >= k:\n        # swap the elements at the start and end pointers\n        input[start], input[end] = input[end], input[start]\n        # increment the start and decrement the end pointer\n        start += 1\n        end -= 1\n    # return the reversed array\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    # Reverse the first n-k elements of the array\n    input = input[k:] + input[:k]\n    # Reverse the remaining elements of the array\n    for i in range(n-k, n):\n        input[i], input[i-k] = input[i-k], input[i]\n    return input"
    },
    {
        "number": 644,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # create a copy of the input array\n    reversed_array = input.copy()\n    \n    # reverse the array upto the given position k\n    reversed_array[:k] = reversed_array[:k][::-1]\n    reversed_array[k:] = reversed_array[k:][::-1]\n    \n    return reversed_array"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + tuple(test_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_dict = dict(test_dict) # convert the dictionary to a normal dictionary\n    test_tup = tuple(test_tup) # convert the tuple to a normal tuple\n    test_tup = test_tup + (test_dict,) # add the dictionary as an additional element to the tuple\n    return test_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    return (test_tup, test_dict)"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with all the keys and values from the input tuple and the input dictionary\n    new_dict = {**test_tup, **test_dict}\n    # convert the new dictionary to a tuple and return it\n    return tuple(new_dict.values())"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    \"\"\"\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    \"\"\"\n    new_tuple = tuple(test_tup + tuple(test_dict.items()))\n    return new_tuple"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = ()\n    for key, value in test_dict.items():\n        new_tup += (key, value)\n    new_tup += test_tup\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_dict = test_dict\n    new_tup = test_tup + (new_dict,)\n    return new_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # create a new dictionary with the values of the input dictionary\n    new_dict = {k: test_dict[k] for k in test_dict}\n    # add the new dictionary to the tuple\n    result_tup = test_tup + (new_dict,)\n    return result_tup"
    },
    {
        "number": 720,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    # Loop through each item in the test_tup\n    for item in test_tup:\n        # Check if the item is a dictionary\n        if isinstance(item, dict):\n            # Merge the dictionaries together\n            merged_dict = dict(item.items() + test_dict.items())\n            # Replace the original dictionary with the merged dictionary\n            test_tup[test_tup.index(item)] = merged_dict\n    # Return the modified tuple\n    return test_tup"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    # Initialize the first row and column with cost[0][0] and cost[0][N-1]\n    for i in range(N):\n        dp[0][i] = dp[i][0] = cost[0][i]\n    \n    # Fill the rest of the matrix with the maximum of the current cell and its neighboring cells\n    for i in range(1, N):\n        for j in range(1, N):\n            if i == N-1 and j == N-1:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + cost[i][j]\n    \n    # Find the maximum average of the entire matrix\n    max_avg = 0\n    for i in range(N):\n        for j in range(N):\n            if i == N-1 and j == N-1:\n                max_avg = max(max_avg, dp[i][j])\n            else:\n                max_avg = max(max_avg, dp[i][j], dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return max_avg // N"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    max_avg = float('-inf')\n    max_path = None\n    \n    # Function to calculate the average of a path\n    def calc_avg(path):\n        total = 0\n        count = 0\n        for i in range(len(path)-1):\n            total += path[i][1] - path[i][0]\n            count += 1\n        return total / count\n    \n    # Breadth-First Search (BFS) to find the longest path\n    for i in range(N):\n        path = [(i, 0), (i, 1)]\n        visited = set()\n        visited.add((i, 0))\n        visited.add((i, 1))\n        queue = [(path[-1], 0)]\n        \n        while queue:\n            curr_cell, curr_cost = queue.pop(0)\n            if curr_cell == (N-1, N-1):\n                avg = calc_avg(path)\n                if avg > max_avg:\n                    max_avg = avg\n                    max_path = path\n            else:\n                if (curr_cell[0]+1, curr_cell[1]) not in visited:\n                    visited.add((curr_cell[0]+1, curr_cell[1]))\n                    path.append((curr_cell[0]+1, curr_cell[1]))\n                    queue.append((path[-1], curr_cost + cost[curr_cell[0]][curr_cell[1]]))\n                if (curr_cell[0], curr_cell[1]+1) not in visited:\n                    visited.add((curr_cell[0], curr_cell[1]+1))\n                    path.append((curr_cell[0], curr_cell[1]+1))\n                    queue.append((path[-1], curr_cost + cost[curr_cell[0]][curr_cell[1]]))\n        \n        if max_path:\n            break\n    \n    # Print the result\n    if max_path:\n        print(\"Max average path: \", max_avg)\n        print(\"Path: \", max_path)\n    else:\n        print(\"No path found.\")"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    visited = [[0]*N for _ in range(N)]\n    def dfs(i, j, path_cost):\n        if i == N-1 and j == N-1:\n            return path_cost\n        visited[i][j] = 1\n        avg = (path_cost + cost[i][j]) / 2\n        res = max(avg, dfs(i+1, j, path_cost + cost[i][j]))\n        res = max(res, dfs(i, j+1, path_cost + cost[i][j]))\n        visited[i][j] = 0\n        return res\n    return dfs(0, 0, 0)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n\n    # Initialize variables to keep track of the maximum average and the path with maximum average\n    max_avg = 0\n    max_path = []\n\n    # Iterate through all paths in the matrix\n    for i in range(len(cost)):\n        for j in range(len(cost[i])):\n            # Initialize variables to keep track of the number of visited cells and the total cost of the path\n            visited = 1\n            total_cost = cost[i][j]\n\n            # Recursively find the maximum average of the remaining cells in the matrix\n            if i < len(cost) - 1 and j < len(cost[i]) - 1:\n                max_avg_sub_matrix, sub_path = maxAverageOfPath(cost[i+1:len(cost)-1][j+1:len(cost[i])-1])\n                total_cost += max_avg_sub_matrix\n                visited += len(sub_path)\n\n            # If the current cell is not the last cell in the last row of the matrix, add the remaining cell to the total cost and increment the number of visited cells\n            if i < len(cost) - 1 and j == len(cost[i]) - 1:\n                total_cost += cost[i+1][j]\n                visited += 1\n\n            # If the current cell is not the last cell in the last column of the matrix, add the remaining cell to the total cost and increment the number of visited cells\n            if i == len(cost) - 1 and j < len(cost[i]) - 1:\n                total_cost += cost[i][j+1]\n                visited += 1\n\n            # If the current cell is the last cell in the last row of the matrix, add the total cost of the current path and compare it with the maximum average seen so far\n            if i == len(cost) - 1 and j == len(cost[i]) - 1:\n                path = [i, j] + sub_path\n                if total_cost / visited > max_avg:\n                    max_avg = total_cost / visited\n                    max_path = path\n\n    # Return the maximum average of the paths found\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    max_avg = float('-inf')\n    for i in range(N):\n        for j in range(N):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif i == 0:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            elif j == 0:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n            else:\n                dp[i][j] = min(cost[i][j], cost[i-1][j], cost[i][j-1]) + dp[i-1][j-1]\n                if cost[i][j] > max_avg:\n                    max_avg = cost[i][j]\n    return max_avg"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    # Initialize a list to store the maximum average for each row\n    max_avg_row = [0] * N\n    # Initialize a list to store the maximum average for each column\n    max_avg_col = [0] * N\n    # Initialize a list to store the maximum average for the whole matrix\n    max_avg_matrix = [0] * N\n\n    # Traverse the matrix row by row\n    for i in range(N):\n        # Initialize a variable to store the sum of all costs in the current row\n        row_sum = 0\n        # Traverse the matrix column by column\n        for j in range(N):\n            # If the current cell is a wall, ignore it\n            if cost[i][j] == 999:\n                continue\n            # If the current cell is the bottom right cell, add the cost to the row_sum\n            elif i == N-1 and j == N-1:\n                row_sum += cost[i][j]\n            # If the current cell is not a wall, move to the next cell in the same direction\n            else:\n                # If the next cell is on the right, move right\n                if j < N-1:\n                    row_sum += cost[i][j] + cost[i][j+1]\n                # If the next cell is on the bottom, move down\n                else:\n                    row_sum += cost[i][j] + cost[i+1][j]\n        # Update the maximum average for the current row\n        max_avg_row[i] = row_sum / (i+1)\n\n    # Traverse the matrix column by column\n    for j in range(N):\n        # Initialize a variable to store the sum of all costs in the current column\n        col_sum = 0\n        # Traverse the matrix row by row\n        for i in range(N):\n            # If the current cell is a wall, ignore it\n            if cost[i][j] == 999:\n                continue\n            # If the current cell is the bottom right cell, add the cost to the col_sum\n            elif i == N-1 and j == N-1:\n                col_sum += cost[i][j]\n            # If the current cell is not a wall, move to the next cell in the same direction\n            else:\n                # If the next cell is on the right, move right\n                if i < N-1:\n                    col_sum += cost[i][j] + cost[i+1][j]\n                # If the next cell is on the bottom, move down\n                else:\n                    col_sum += cost[i][j] + cost[i][j+1]\n        # Update the maximum average for the current column\n        max_avg_col[j] = col_sum / (j+1)\n\n    # Initialize a variable to store the maximum average for the whole matrix\n    max_avg_matrix[0] = max_avg_row[0] + max_avg_col[0]\n    # Traverse the matrix row by row and update the maximum average for the whole matrix\n    for i in range(1, N):\n        max_avg_matrix[i] = max(max_avg_row[i], max_avg_col[i]) + max_avg_matrix[i-1]\n\n    # Return the maximum average for the whole matrix\n    return max_avg_matrix[N-1]"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n    \n    # initialize first row\n    dp[0][0] = cost[0][0]\n    \n    # fill dp table\n    for i in range(1, N):\n        dp[i][0] = cost[i][0] + dp[i-1][0]\n    for j in range(1, N):\n        dp[0][j] = cost[0][j] + dp[0][j-1]\n        \n    # fill dp table again\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]\n            \n    # find maximum average\n    max_avg = dp[N-1][N-1]\n    for i in range(1, N-1):\n        for j in range(1, N-1):\n            max_avg = max(max_avg, dp[i][j] + dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1])\n            \n    return max_avg / (N*N)"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Find the dimensions of the matrix\n    N = len(cost)\n\n    # Initialize variables to keep track of the maximum average and the number of cells visited\n    max_avg = float('-inf')\n    visited = 0\n\n    # Initialize variables to keep track of the row and column indices of the current cell\n    curr_row = 0\n    curr_col = 0\n\n    # Initialize variables to keep track of the total cost and the number of cells in the path\n    total_cost = 0\n    path_length = 0\n\n    # Loop through all cells in the matrix\n    while curr_row < N and curr_col < N:\n        # If the current cell is not visited yet, mark it as visited and update the total cost and path length\n        if cost[curr_row][curr_col]!= float('-inf'):\n            visited += 1\n            total_cost += cost[curr_row][curr_col]\n            path_length += 1\n\n        # Check the adjacent cells for the maximum cost and update the variables accordingly\n        if curr_col < N-1:\n            if cost[curr_row][curr_col+1] > cost[curr_row][curr_col]:\n                curr_row = curr_row\n                curr_col += 1\n        if curr_row < N-1:\n            if cost[curr_row+1][curr_col] > cost[curr_row][curr_col]:\n                curr_row += 1\n\n        # Update the maximum average if necessary\n        if visited > 0:\n            avg_cost = total_cost / visited\n            if avg_cost > max_avg:\n                max_avg = avg_cost\n\n    # Return the maximum average and the number of cells visited in the path\n    return max_avg, visited"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    visited = [[False]*N for _ in range(N)]\n    max_avg = 0\n    max_path = []\n\n    def dfs(i, j, path, visited):\n        if i == N-1 and j == N-1:\n            path.append((i, j))\n            visited.append(True)\n            avg = sum([cost[x][y] for x, y in path]) / len(path)\n            if avg > max_avg or (avg == max_avg and len(path) < len(max_path)):\n                max_avg = avg\n                max_path = path.copy()\n            visited.pop()\n            path.pop()\n        elif i < N-1 and not visited[i][j]:\n            path.append((i, j))\n            visited[i][j] = True\n            dfs(i+1, j, path, visited)\n            visited[i][j] = False\n            path.pop()\n        if i > 0 and not visited[i][j]:\n            path.append((i, j))\n            visited[i][j] = True\n            dfs(i-1, j, path, visited)\n            visited[i][j] = False\n            path.pop()\n        if j < N-1 and not visited[i][j]:\n            path.append((i, j))\n            visited[i][j] = True\n            dfs(i, j+1, path, visited)\n            visited[i][j] = False\n            path.pop()\n        if j > 0 and not visited[i][j]:\n            path.append((i, j))\n            visited[i][j] = True\n            dfs(i, j-1, path, visited)\n            visited[i][j] = False\n            path.pop()\n\n    dfs(0, 0, [], visited)\n    return max_avg, max_path"
    },
    {
        "number": 721,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    N = len(cost)\n    # Initialize variables for current path and best path\n    current_sum = 0\n    best_sum = 0\n    best_path = []\n\n    for i in range(N):\n        current_sum += cost[i][0]\n        current_sum += cost[0][i]\n        best_sum += cost[0][i]\n        best_sum += cost[i][N-1]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_path = [0] * N\n            best_path[0] = i\n            best_path[N-1] = N-1\n        elif current_sum == best_sum:\n            best_path.append(i)\n\n    # Compute average of best path\n    best_path_sum = sum(cost[i][j] for i in best_path for j in best_path)\n    return best_path_sum / len(best_path)"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    filtered_students = {}\n    for name, data in students.items():\n        if data[0] > h and data[1] > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # create an empty list to store the filtered students\n    filtered_students = []\n    # iterate over the dictionary and add the students whose height and weight are above the minimum\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students.append((name, height, weight))\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Filter the students based on their height and weight\n    filtered_students = {}\n    for name, data in students.items():\n        height, weight = data\n        if height > h and weight > w:\n            filtered_students[name] = data\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for student in students.items():\n        student_name = student[0]\n        student_height = student[1][0]\n        student_weight = student[1][1]\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = student[1]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = students[name]\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # Create an empty list to store the filtered students\n    filtered_students = []\n    \n    # Iterate over each student in the input dictionary\n    for name, data in students.items():\n        height, weight = data\n        \n        # If the height and weight are above the minimum, add the student to the filtered list\n        if height > h and weight > w:\n            filtered_students.append(name)\n    \n    # Return the filtered list of students\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            filtered_students[name] = (height, weight)\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def filter_data(students, h, w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filtered_students = {}\n    for name, details in students.items():\n        height, weight = details\n        if height > h and weight > w:\n            filtered_students[name] = details\n    return filtered_students"
    },
    {
        "number": 722,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def filter_data(students, h, w):\n    \"\"\"\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. \n    Write a function to filter students that have height and weight above the minimum.\n    \"\"\"\n    result = {}\n    for name, (height, weight) in students.items():\n        if height > h and weight > w:\n            result[name] = (height, weight)\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Create a set to store the unique values in nums2\n    unique_vals = set(nums2)\n\n    # Initialize an empty list to store the indices of the pairs with the same value\n    same_pairs = []\n\n    # Loop through the values in nums1\n    for val in nums1:\n        # Check if the value is present in the unique values set\n        if val in unique_vals:\n            # If it is, add the indices to the same_pairs list\n            same_pairs.append((nums1.index(val), nums2.index(val)))\n            # Remove the value from the unique values set so that it is not considered again for later pairs\n            unique_vals.remove(val)\n\n    # Return the length of the same_pairs list\n    return len(same_pairs)"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # create a dictionary to store the count of each value\n    counts = {}\n    for num in nums1:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    # iterate through nums2 and count the number of values that match with the keys in the counts dictionary\n    result = 0\n    for num in nums2:\n        if num in counts and eq(num, nums1[counts[num]-1]):\n            result += 1\n\n    return result"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if eq(nums1[i], nums2[i]):\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    same_indices = []\n    for i in range(len(nums1)):\n        if all(eq(nums1[i], nums2[j]) for j in range(len(nums2))):\n            same_indices.append(i)\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Use a dictionary to count the number of occurrences of each number in nums1\n    count_dict = {}\n    for num in nums1:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n\n    # Use a dictionary to count the number of occurrences of each number in nums2\n    count_dict_2 = {}\n    for num in nums2:\n        if num in count_dict_2:\n            count_dict_2[num] += 1\n        else:\n            count_dict_2[num] = 1\n\n    # Compare the two dictionaries to find indices where the lists have the same values\n    same_indices = []\n    for num in count_dict:\n        if num in count_dict_2:\n            if count_dict[num] == count_dict_2[num]:\n                same_indices.append(nums1.index(num))\n\n    # Return the list of indices\n    return same_indices"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # initialize a dictionary to store the counts for each element of nums1\n    count_dict = {num: 0 for num in nums1}\n    # iterate over each element of nums2\n    for i, num2 in enumerate(nums2):\n        # check if num2 is in the count_dict and if its value is equal to the index of nums2\n        if num2 in count_dict and eq(count_dict[num2], i):\n            # increment the count for num2 in the count_dict\n            count_dict[num2] += 1\n    # count the number of pairs in which the lists have the same values\n    same_pair_count = sum(count > 1 for count in count_dict.values())\n    return same_pair_count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from operator import eq\n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n\n    # Initialize count variable\n    count = 0\n\n    # Iterate over the lists\n    for i in range(len(nums1)):\n\n        # Check if the values at the current index are equal\n        if eq(nums1[i], nums2[i]):\n\n            # Increment the count\n            count += 1\n\n    # Return the count\n    return count"
    },
    {
        "number": 723,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_same_pair(nums1, nums2):\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string so that we can iterate over its digits\n    base_str = str(base)\n    # Initialize the sum to 0\n    total_sum = 0\n    # Iterate over the digits of the base string and calculate the sum of all digits raised to the specified power\n    for digit in base_str:\n        digit_int = int(digit)\n        digit_power = 1\n        for i in range(power):\n            digit_power *= digit_int\n        total_sum += digit_power\n    # Return the total sum\n    return total_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_of_digits = 0\n    while power > 0:\n        # Get the last digit of the base\n        last_digit = base % 10\n        # Multiply the last digit by the power and add it to the sum\n        sum_of_digits += last_digit * power\n        # Remove the last digit from the base\n        base //= 10\n        # Decrement the power\n        power -= 1\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(1, power+1):\n        result += base % 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum_digits = 0\n    while power > 0:\n        digit = base % 10\n        sum_digits += digit\n        base //= 10\n        power -= 1\n    return sum_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string\n    base_str = str(base)\n    # Initialize a variable to store the sum of digits\n    sum_of_digits = 0\n    # Loop through each digit in the base string\n    for digit in base_str:\n        # Convert the digit to an integer\n        digit_int = int(digit)\n        # Calculate the power of the digit\n        digit_power = digit_int ** power\n        # Add the power of the digit to the sum of digits\n        sum_of_digits += digit_power\n    # Return the sum of digits to the caller\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_str = str(base)\n    power_sum = 0\n    for i in range(power):\n        power_sum += int(base_str[-(i+1)])\n    return power_sum"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n\n    # Initialize a variable to store the sum of digits raised to the power of power\n    sum_of_digits = 0\n\n    # Loop through each digit of the base\n    for digit in str(base):\n        # Convert each digit to an integer and add it to the sum of digits raised to the power of power\n        sum_of_digits += int(digit) ** power\n\n    return sum_of_digits"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    \"\"\"\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    \"\"\"\n    result = 0\n    while power > 0:\n        result += base % 10\n        power -= 1\n        base //= 10\n    return result"
    },
    {
        "number": 724,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Convert the base to a string and split it into a list of digits\n    digits = list(str(base))\n    \n    # Initialize the sum to zero\n    total = 0\n    \n    # Loop through each digit and add its value to the total\n    for digit in digits:\n        total += int(digit) ** power\n    \n    # Return the total\n    return total"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    result = re.findall(pattern, text1)\n    return result"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n\n    # Find all occurrences of \" \" between quotation marks and extract the values\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, text1)\n\n    # Remove any empty strings that might have resulted from the regex pattern\n    matches = [match for match in matches if match!= '']\n\n    # Return the extracted values as a list\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"(.*?)\"'\n    match = re.findall(pattern, text1)\n    return match"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef extract_quotation(text):\n    # Find all occurrences of the opening quotation mark\n    opening_quotes = re.findall(r'\\\"', text)\n    # Find all occurrences of the closing quotation mark\n    closing_quotes = re.findall(r'\\\"', text[::-1])\n    # Find the index of the first opening quote that appears before the first closing quote\n    start = min(range(len(text)), key=lambda i: text.index(closing_quotes[0], i))\n    # Find the index of the last closing quote that appears after the last opening quote\n    end = max(range(len(text)), key=lambda i: text.rindex(opening_quotes[0], i))\n    # Extract the quotation from the text between the opening and closing quotes\n    quotation = text[start+1:end]\n    return quotation"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'(?<=\")[^\"]*(?=\")'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(r'(?<=[\"\\']).*?(?=[\"\\'])')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef extract_quotation(text):\n    '''\n    Extract values between quotation marks \" \" of the given string.\n    '''\n    # define a regular expression pattern to match any number of characters between double quotes\n    pattern = r'(?<=\")(.*?)(?=\")'\n    # search for all occurrences of the pattern in the input text\n    matches = re.findall(pattern, text)\n    # return the list of matched quotations\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(r'(\\w+)\\\"', r'\\1', text1)\n    return text.strip('\\\"')"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # Use regular expressions to find all instances of quotation marks\n    pattern = re.compile(r'\"(.*?)\"')\n    matches = pattern.findall(text1)\n    \n    # Return a list of all matches\n    return matches"
    },
    {
        "number": 725,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = r'\"([^\"]*)\"'\n    results = re.findall(pattern, text1)\n    return results"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)\n    result_tup = tuple(t1 * t2 for i in range(N) for t1, t2 in zip(test_tup, test_tup[i+1:]))\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup = result_tup + (test_tup[i]*test_tup[i+1],)\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # Create an empty tuple to store the result\n    result_tup = ()\n    \n    # Iterate through the input tuple\n    for i in range(len(test_tup)-1):\n        # Multiply the current element with the next element and add it to the result tuple\n        result_tup += (test_tup[i] * test_tup[i+1],)\n        \n    # Add the last element to the result tuple\n    result_tup += (test_tup[-1],)\n    \n    # Return the result tuple\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1],)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = (test_tup[0] * test_tup[1],)\n    for i in range(2, N+1):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    \"\"\"\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \"\"\"\n\n    N = len(test_tup)\n    result_tup = (test_tup[0],)\n\n    for i in range(1, N):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n\n    return result_tup"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = []\n    for i in range(len(test_tup)-1):\n        result.append(test_tup[i] * test_tup[i+1])\n    return tuple(result)"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup)-1\n    result_tup = []\n    for i in range(N):\n        result_tup.append(test_tup[i] * test_tup[i+1])\n    return tuple(result_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initialize the result tuple with the first element of the input tuple\n    result = (test_tup[0],)\n    \n    # iterate over the input tuple starting from the second element\n    for i in range(1, len(test_tup)):\n        # multiply the current element with the next element and append the result to the result tuple\n        result += (test_tup[i] * test_tup[i+1],)\n    \n    return result"
    },
    {
        "number": 726,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result_tup = ()\n    for i in range(len(test_tup)-1):\n        result_tup += (test_tup[i] * test_tup[i+1],)\n    return result_tup + (test_tup[-1] * test_tup[0],)"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x,y in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a+b for a,b in zip(lst1,lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [lst1[i]+lst2[i] for i in range(len(lst1))]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x + y for x, y in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_list(lst1, lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a+b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    return [a + b for a, b in zip(lst1, lst2)]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [x+y for x in lst1 for y in lst2]"
    },
    {
        "number": 728,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_list(lst1, lst2):\n    \"\"\"\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    if len(lst1)!= len(lst2):\n        raise ValueError(\"Both lists must have the same length.\")\n    result = []\n    for i in range(len(lst1)):\n        result.append(lst1[i] + lst2[i])\n    return result"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    Write a function to remove consecutive duplicates of a given list.\n    \"\"\"\n    for i, nums_group in enumerate(groupby(sorted(nums))):\n        if i!= 0:\n            prev_num = nums[i-1]\n            current_num = nums_group[0]\n            if prev_num == current_num:\n                nums.remove(prev_num)\n    return nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [list(group)[0] for _, group in groupby(nums)]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n\n    def consecutive_duplicates_helper(nums):\n        return [list(group) for group in groupby(sorted(nums))]\n\n    return consecutive_duplicates_helper(nums)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Create a dictionary to keep track of the last number encountered\n    last_number = None\n\n    # Create an empty list to store the non-consecutive duplicates\n    non_consecutive_duplicates = []\n\n    # Loop through the input list\n    for num in nums:\n        # If the current number is equal to the last number, add it to the list of consecutive duplicates\n        if num == last_number:\n            non_consecutive_duplicates.append(num)\n        else:\n            # If the current number is not equal to the last number, set the last number to the current number\n            last_number = num\n\n    # Return the list of non-consecutive duplicates\n    return non_consecutive_duplicates"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Split the list into groups based on their consecutive duplicates\n    grouped = groupby(nums)\n    # Filter out the groups that have consecutive duplicates\n    return [num for num, group in grouped if len(list(group)) == 1]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return [k for k, g in groupby(nums) if k == g.first()]"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # create a generator to iterate through consecutive duplicates of the given list\n    gen = (num for key, group in groupby(nums) if key == 0)\n    # convert the generator to a list and return it\n    return list(gen)"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Use itertools groupby function to group the numbers by their values\n    grouped_nums = groupby(nums)\n    # Create a list to store the non-consecutive duplicates\n    non_consecutive_nums = []\n    # Loop through each group of numbers\n    for group in grouped_nums:\n        # Check if the length of the group is greater than 1\n        if len(list(group)) > 1:\n            # If the group has more than 1 number, append the first number\n            non_consecutive_nums.append(next(group)[0])\n    # Return the non-consecutive duplicates list\n    return non_consecutive_nums"
    },
    {
        "number": 730,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef consecutive_duplicates(nums):\n    \"\"\"\n    This function removes consecutive duplicates of a given list.\n    \"\"\"\n    return [k for k, g in groupby(enumerate(nums), lambda x: x[0] - x[1])]"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return 2 * math.pi * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = (1/3)*math.pi*(r**2) + (1/2)*math.pi*(r**2)*h\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Formula for lateral surface area of cone\n    surface_area = (1/3)*math.pi*(r**2+h**2)*h\n    \n    return surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    '''\n    This function calculates the lateral surface area of a cone given the radius r and the height h.\n    '''\n    s = 2 * (r * math.tan(math.pi/6))\n    area = s * h\n    return area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    This function takes in the radius r and the height h of a cone as inputs and returns the lateral surface area.\n    \n    The lateral surface area of a cone is given by A_L = pi * r^2 * h / 3.\n    \"\"\"\n    A_L = math.pi * r**2 * h / 3.0\n    return A_L"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Calculate the base area of the cone\n    area = math.pi*r*r\n    \n    # Calculate the lateral surface area\n    lateral_area = 2*math.pi*r*h\n    \n    # Return the sum of the base area and the lateral surface area\n    return area + lateral_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (3 * math.pi * r**2) + ((3 * math.pi * r**2) * (h/2))\n    return lateral_surface_area"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (1/3) * math.pi * r * r * h"
    },
    {
        "number": 731,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_surface_area = (2 * r * math.sin(math.pi/3)) + (2 * r * math.sin(math.pi/3)) + (2 * r * h * math.sin(math.pi/3))\n    return lateral_surface_area"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef replace_specialchar(text):\n    pattern = r'[,.]'\n    return re.sub(pattern, ':', text)"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define a regular expression pattern to match special characters\n    pattern = r'[\\s,\\.]'\n    # Use the re.sub() function to replace the special characters with colons\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[^\\w\\s]', '', text) # remove non-word characters\n    text = re.sub(r'\\s+', ':', text) # replace multiple spaces with colon\n    text = text.strip(':') # remove leading colon\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Use regular expressions to replace all spaces, commas, and dots with a colon\n    pattern = r'[\\s,\\.]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = r'[\\s.,;:!?]+'\n    text = re.sub(pattern, ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r'\\s+', ':', text)\n    # Replace all occurrences of commas with a colon\n    text = re.sub(r',+', ':', text)\n    # Replace all occurrences of dots with a colon\n    text = re.sub(r'\\.', ':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s,\\.]+')\n    return pattern.sub(':', text)\n\ntext = 'This is a test, with, special. characters.'\nprint(replace_specialchar(text))"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Replace all occurrences of spaces with a colon\n    text = re.sub(r'(\\s)+', ':', text)\n    # Replace all occurrences of commas with a semicolon\n    text = re.sub(r'(\\,)+', ';', text)\n    # Replace all occurrences of dots with a period\n    text = re.sub(r'(\\.)+', '.', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special_chars = re.compile(r'[\\s,\\.]')\n    text = special_chars.sub(':', text)\n    return text"
    },
    {
        "number": 732,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # Define the regular expression pattern to match spaces, commas, or dots\n    pattern = r'[^a-zA-Z0-9\\s:,\\.]'\n    # Replace all occurrences of the pattern with a colon\n    text = re.sub(pattern, ':', text)\n    # Return the modified text\n    return text"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    This function takes in a sorted array A and a number x and returns the index of the first occurrence of x in A.\n    If x is not found in A, it returns -1.\n    '''\n    if len(A) == 0:\n        return -1\n    elif A[0] == x:\n        return 0\n    else:\n        for i in range(1, len(A)):\n            if A[i] == x:\n                return i\n        return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    else:\n        return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i]!= x:\n        i += 1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Binary search to find the first occurrence of x\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n    # Iterate over the array\n    for i in range(len(A)):\n        # If the current element is equal to x, update the first occurrence index to i\n        if A[i] == x:\n            first_occurrence_index = i\n            # If we have found the first occurrence of x, return the index\n            if first_occurrence_index!= -1:\n                return first_occurrence_index\n    # If we have not found the first occurrence of x, return -1\n    return first_occurrence_index"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Initialize the first occurrence index to -1\n    first_occurrence_index = -1\n\n    # Initialize a flag to check if the first occurrence index has been found\n    found = False\n\n    # Loop through the array and check if the current element is equal to the target number\n    for i in range(len(A)):\n        if A[i] == x:\n            first_occurrence_index = i\n            found = True\n            break\n\n    # Return the first occurrence index if found, otherwise return -1\n    return first_occurrence_index if found else -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while i < len(A) and A[i] < x:\n        i += 1\n    if i == len(A) or A[i]!= x:\n        return -1\n    return i"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    for i in range(len(A)):\n        if A[i] == x:\n            return i\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    low = 0\n    high = len(A) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"
    },
    {
        "number": 733,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    \"\"\"\n    # Find the leftmost index i such that A[i] >= x\n    left = 0\n    right = len(A) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            left = mid + 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            # Check if the next element is the same as the target number\n            if mid + 1 < len(A) and A[mid + 1] == x:\n                return mid + 1\n            else:\n                return mid\n\n    return -1"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    prod_of_subarray = [1] * n\n\n    for i in range(1, n):\n        prod_of_subarray[i] = prod_of_subarray[i-1] * arr[i]\n\n    sum_of_prod = 0\n    for i in range(n):\n        sum_of_prod += prod_of_subarray[i]\n\n    return sum_of_prod"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            res += arr[i] * arr[j] * arr[j+1] * arr[j+2]\n    return res"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    \"\"\"\n    This function takes a list as input and returns the sum of products of all possible sublists of the input list.\n\n    Time Complexity: O(n^3)\n    Space Complexity: O(n)\n    \"\"\"\n\n    n = len(arr)\n    # The maximum length of the subarray we can take is n\n    max_length = n\n\n    # Initialize the sum of products of subarrays\n    subarray_products = [0] * (max_length + 1)\n\n    # Initialize the sum of subarrays\n    subarray_sums = [0] * (max_length + 1)\n\n    # Initialize the product of the first element of the subarray\n    product_of_first = 1\n\n    # Initialize the sum of the first element of the subarray\n    sum_of_first = arr[0]\n\n    # Fill the subarray_products and subarray_sums arrays\n    for i in range(1, n + 1):\n        # Calculate the product of the current element\n        current_product = product_of_first * arr[i - 1]\n\n        # Calculate the sum of the current element\n        current_sum = sum_of_first + arr[i - 1]\n\n        # Update the subarray_products array\n        for length in range(1, max_length + 1):\n            subarray_products[length] += subarray_products[length - 1]\n\n        # Update the subarray_sums array\n        for length in range(1, max_length + 1):\n            subarray_sums[length] += subarray_sums[length - 1]\n\n        # Update the product_of_first variable\n        product_of_first = current_product\n\n        # Update the sum_of_first variable\n        sum_of_first = current_sum\n\n    # Calculate the sum of products of all subarrays of the input list\n    sum_of_products = subarray_products[max_length]\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list.\n    '''\n    n = len(arr)\n    sublists = [[arr[i:j+1] for j in range(n)] for i in range(n)]\n    prod = 1\n    sum_of_prods = 0\n    \n    for sublist in sublists:\n        prod *= 1\n        for num in sublist:\n            prod *= num\n        sum_of_prods += prod\n        \n    return sum_of_prods"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # Initialize the result variable to 0\n    result = 0\n    \n    # Initialize the list to store the products of sublists\n    sublist_products = []\n    \n    # Initialize the list to store the sum of products of sublists\n    sum_of_products = []\n    \n    # Traverse through all the sublists of the array\n    for i in range(len(arr)):\n        # Calculate the product of the current sublist\n        sublist_product = 1\n        for j in range(i, len(arr)):\n            sublist_product *= arr[j]\n        # Append the product of the current sublist to the list of products of sublists\n        sublist_products.append(sublist_product)\n        # Initialize the sum of the products of sublists to 0\n        sum_of_product = 0\n        # Traverse through all the sublists of the remaining array\n        for j in range(i+1, len(arr)):\n            # Calculate the product of the current sublist and the next sublist\n            sublist_product *= arr[j]\n            # Append the product of the current sublist and the next sublist to the list of products of sublists\n            sublist_products.append(sublist_product)\n            # Calculate the sum of the products of sublists from i to j\n            sum_of_product += sublist_products[j]\n        # Append the sum of the products of sublists from i to j to the list of sum of products of sublists\n        sum_of_products.append(sum_of_product)\n    \n    # Traverse through all the sublists of the array\n    for i in range(len(arr)):\n        # Calculate the sum of products of sublists from i to j\n        sum_of_sublist_products = 0\n        for j in range(i, len(arr)):\n            sum_of_sublist_products += sublist_products[j]\n        # Calculate the sum of products of sublists from i to j\n        sum_of_sublist_sum = 0\n        for j in range(i, len(arr)):\n            sum_of_sublist_sum += sum_of_products[j]\n        # Calculate the sum of products of sublists from i to j\n        sublist_sum = sum_of_sublist_sum - sum_of_sublist_products\n        # Calculate the sum of products of sublists from i to j\n        result += sublist_sum\n    \n    return result"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    mod = 1000000007\n\n    # Initialize sum of products and total products\n    product_sum = 0\n    total_product = 1\n\n    # Calculate total product of entire array\n    for i in range(n):\n        total_product *= arr[i]\n\n    # Calculate product of each sublist and update sum of products\n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k in range(j):\n                product *= arr[k]\n            product_sum = (product_sum + product) % mod\n\n    return product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + arr[i-1] * dp[i-2]\n\n    return dp[n]"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    # Step 1: Create a prefix sum array\n    prefix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + arr[i - 1]\n\n    # Step 2: Calculate the maximum sum ending at each position\n    max_ending_here = prefix_sum[1]\n    max_so_far = max_ending_here\n\n    for i in range(2, n + 1):\n        max_ending_here = max(arr[i - 1] + prefix_sum[i] - prefix_sum[i - 1], 0)\n        max_so_far = max(max_so_far, max_ending_here)\n\n    # Step 3: Calculate the sum of products of all possible subarrays\n    subarray_product_sum = 0\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            subarray_product_sum += arr[i - 1] * arr[j - 1] * max_so_far\n\n    return subarray_product_sum"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n\n    # To store the sum of products of sublists\n    sublist_products = []\n\n    # To store the running product of elements in the sublist\n    sublist_product = 1\n\n    # To iterate over the elements of the array\n    for i in range(len(arr)):\n\n        # To update the running product of elements in the sublist\n        sublist_product *= arr[i]\n\n        # To add the current element to the sublist product\n        sublist_product += arr[i]\n\n        # To add the sublist product to the list of sublist products\n        sublist_products.append(sublist_product)\n\n    # To find the sum of products of all sublists of the array\n    sum_of_products = sum(sublist_products)\n\n    return sum_of_products"
    },
    {
        "number": 734,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    prefix_sum = [0] * (n+1)\n    suffix_sum = [0] * (n+1)\n    prefix_sum[0] = arr[0]\n    suffix_sum[n] = arr[n-1]\n    for i in range(1, n):\n        prefix_sum[i] = prefix_sum[i-1] + arr[i]\n        suffix_sum[n-i] = suffix_sum[n-i+1] + arr[n-i]\n\n    product_sum = 0\n    for i in range(n):\n        product_sum += prefix_sum[i] * suffix_sum[i]\n\n    return product_sum"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Set the bits of n except the first and the last bit to 1\n    for i in range(len(bin(n)[2:])-2):\n        if bin(n)[2:][i] == '0':\n            n = n ^ (1 << i)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # get the length of the number\n    length = len(bin(n)[2:])\n    # get the middle bits of the number\n    middle_bits = n & ((1 << (length-2)) - 1)\n    # toggle the middle bits\n    middle_bits = middle_bits ^ (1 << (length-1))\n    # toggle the first and last bits\n    first_bit = n & 1\n    last_bit = n >> (length-1)\n    first_bit = first_bit ^ 1\n    last_bit = last_bit ^ 1\n    # create the new number\n    new_n = first_bit << (length-1) | middle_bits | last_bit\n    return new_n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Toggles the middle bits of a number except the first and last bits.\n\n    Args:\n    n: an integer\n\n    Returns:\n    an integer with the middle bits toggled\n\n    \"\"\"\n    # Check if n is negative\n    if n < 0:\n        # Convert to unsigned\n        n = abs(n)\n        # Toggle the most significant bit\n        n |= 1\n        # Toggle the least significant bit\n        n |= 2**32 - 1\n    else:\n        # Toggle the most significant bit\n        n ^= 1\n        # Toggle the least significant bit\n        n ^= 2**32 - 1\n    \n    # Toggle the middle bits\n    n ^= 2**n - 2**n % 2\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Find the position of the first and last bits\n    first_bit = bin(n)[2:].find('1')\n    last_bit = bin(n)[2:].rfind('1')\n\n    # Find the position of the middle bits\n    middle_bits = []\n    for i in range(first_bit, last_bit):\n        if bin(n)[2:].find('1', i+1) == -1:\n            break\n        middle_bits.append(i)\n\n    # Toggle the middle bits\n    for bit in middle_bits:\n        n = n ^ (1 << bit)\n\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def set_middle_bits(n):\n    # Get the first and last bits of the number\n    first_bit = n & 1\n    last_bit = n >> 1 & 1\n    \n    # Toggle the middle bit\n    middle_bit = ~(first_bit | last_bit)\n    \n    # Set the first and last bits to 0 and 1 respectively\n    n = (n & ~(1 << 1)) | (middle_bit << 1)\n    \n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bit of n\n    first_bit = n & 1\n    last_bit = n & (2**32 - 1)\n\n    # Toggle the middle bits of n\n    middle_bits = n ^ ((~first_bit) & (~last_bit))\n\n    # Combine the first and last bits with the middle bits\n    result = first_bit | middle_bits\n\n    # Return the result\n    return result"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # Get the first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**31)\n    # Clear the first and last bits\n    n &= ~(first_bit | last_bit)\n    # Toggle the middle bits\n    n ^= 1\n    # Set the first and last bits\n    n |= (first_bit | last_bit)\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    \n    # initialize variables to keep track of first and last bits\n    first_bit = n & 1\n    last_bit = n & (2**31-1)\n    \n    # XOR the first and last bits to toggle middle bits\n    n ^= (first_bit | last_bit)\n    \n    # return the modified number\n    return n"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    first_bit = n & 1\n    last_bit = (n >> 31) & 1\n    middle_bits = ((n >> 1) & 0x55555555) + ((n << 1) & 0xAAAAAAAA)\n    toggled_middle_bits = first_bit ^ middle_bits ^ last_bit\n    return toggled_middle_bits"
    },
    {
        "number": 735,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def set_middle_bits(n):\n    \"\"\"\n    Write a python function to toggle bits of the number except the first and the last bit.\n    https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    \"\"\"\n    return n ^ (1 << (n.bit_length() - 1))"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return len(a)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    left = bisect.bisect_left(a, x)\n    return left if left!= len(a) and a[left] == x else left - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list of integers and a target value x as input and returns the left insertion point where the target should be inserted to maintain the sorted order.\n\n    Parameters:\n    a (list): A sorted list of integers.\n    x (int): The target value to search for.\n\n    Returns:\n    int: The left insertion point of the target value x in the sorted list a.\n    \"\"\"\n    return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_insertion(a, x):\n    \"\"\"\n    This function takes a sorted list a and a value x as input and returns the index of the left insertion point for x in a.\n    \n    The function uses binary search algorithm to find the left insertion point for x. In each iteration, it compares the middle element of the list with x and updates the index accordingly. If x is greater than the middle element, then it moves the left edge of the list to the right, else it moves the right edge of the list to the left.\n    \n    The function returns the index of the left insertion point. If the value is not present in the list, it returns -1.\n    \n    Time Complexity: O(log n)\n    Space Complexity: O(1)\n    \n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index!= len(a) and a[index] == x:\n        return index\n    else:\n        return -1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        a (list): List of sorted elements.\n        x (int): Value to search for.\n\n    Returns:\n        int: Index of the left insertion point.\n\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    \"\"\"\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_left(a, x)\n    if index == len(a) or a[index]!= x:\n        index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import bisect\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    if index!= len(a):\n        return index\n    else:\n        return index - 1"
    },
    {
        "number": 736,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Using bisect module to find the left insertion point\n    index = bisect.bisect_left(a, x)\n    # Return the left insertion point\n    return index"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    \"\"\"\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    \"\"\"\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re \n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    pattern = re.compile(regex)\n    if pattern.match(string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    pattern = re.compile(regex)\n    match = pattern.match(string)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return \"The string starts with a vowel.\"\n    else:\n        return \"The string does not start with a vowel.\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return \"Starting with a vowel\"\n    else: \n        return \"Not starting with a vowel\""
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef check_str(string):\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    return re.match(regex, string)"
    },
    {
        "number": 737,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re \n\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string):\n        return True\n    else:\n        return False"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n - 1) * (1 / (n - 1))"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return geometric_sum(n-1) * n"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    \"\"\"\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)"
    },
    {
        "number": 738,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    if n == 1:\n        return 1\n    else:\n        return n*geometric_sum(n-1)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 2:\n        return 0\n    \n    a, b, c = 1, 1, 1\n    triangular = [a, b, c]\n    while True:\n        if len(str(triangular[-1])) == n:\n            return triangular.index(triangular[-1])\n        a, b, c = b, c, a+b+c\n        triangular.append(a+b+c)\n        \n"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize an array to store the triangular numbers \n    triangular_numbers = [1]\n    \n    # Initialize the length of the triangular numbers array \n    length = 1\n    \n    # While the length of the array is less than n, append the next triangular number to the array and update the length of the array \n    while length < n:\n        triangular_numbers.append(triangular_numbers[length-1] + triangular_numbers[length-2])\n        length += 1\n    \n    # Return the index of the smallest triangular number in the array \n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n    \"\"\"\n    # Define a list of all possible triangular numbers with n digits\n    triangular_numbers = [10**i for i in range(n+1)]\n    # Find the smallest triangular number with n digits\n    min_triangular_number = min(triangular_numbers)\n    # Find the index of the smallest triangular number with n digits\n    index = triangular_numbers.index(min_triangular_number)\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1, 10**n):\n        count = 0\n        for j in range(1, i+1):\n            count += int(math.log10(j))\n        if count == n:\n            return i"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    # Function to find the sum of n digits using recursion\n    def sum_of_digits(n):\n        if n == 0:\n            return 0\n        else:\n            return n + sum_of_digits(n-1)\n\n    # Function to find the sum of n digits using matrix exponentiation\n    def matrix_sum(matrix, n):\n        if n == 1:\n            return matrix[0][0]\n        else:\n            return matrix[0][0] + matrix_sum(matrix, n-1)\n\n    # Function to find the smallest triangular number with n digits using matrix exponentiation\n    def find_smallest_triangular(n):\n        matrix = [[0 for x in range(n+1)] for y in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, i+1):\n                matrix[i][j] = matrix[i-1][j-1] + matrix[i-1][j]\n        return matrix_sum(matrix, n)\n\n    # Find the smallest triangular number with n digits using matrix exponentiation\n    index = find_smallest_triangular(n)\n\n    # Return the index\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n\n    # Initialize an empty list to store the triangular numbers \n    triangular_numbers = [] \n\n    # Initialize a counter variable to keep track of the number of digits \n    count = 0 \n\n    # Generate the first triangular number \n    triangular_numbers.append(0) \n\n    # Iterate until the required number of digits is obtained \n    while count < n: \n        # Generate the next triangular number by summing the previous two \n        triangular_numbers.append(triangular_numbers[-1] + triangular_numbers[-2]) \n        count += 1 \n\n    # Return the index of the smallest triangular number with n digits \n    return triangular_numbers.index(min(triangular_numbers))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # Initialize the smallest triangular number to be the first number with n digits\n    smallest_triangular = int('1' * n)\n    \n    # Loop through all possible numbers with n digits\n    for i in range(2, 10**(n+1)):\n        # Calculate the next triangular number by adding i to the smallest triangular number\n        next_triangular = smallest_triangular + i\n        \n        # If the next triangular number has more than n digits, break the loop and return the index of the smallest triangular number\n        if len(str(next_triangular)) > n:\n            break\n        \n        # If the next triangular number has the same or fewer digits than the current smallest triangular number, update the smallest triangular number to the next triangular number\n        elif len(str(next_triangular)) == n:\n            if next_triangular < smallest_triangular:\n                smallest_triangular = next_triangular\n    \n    # Return the index of the smallest triangular number\n    return str(smallest_triangular).rfind('0')"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n    \"\"\"\n    a = 1\n    while len(str(a)) < n:\n        a += 1\n    return int(math.sqrt(2 * a - 1))"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef find_Index(n):\n    if n <= 1:\n        return -1\n    \n    def find_Index_helper(n):\n        if n == 1:\n            return 0\n        \n        triangular_number = math.trunc(math.pow(5, n-1)/math.factorial(n-1))\n        return find_Index_helper(n-1) + 1 if triangular_number % 10 == 0 else find_Index_helper(n-1)\n    \n    return find_Index_helper(n)"
    },
    {
        "number": 739,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    def find_nth_digit_of_nth_triangular_number(n, index):\n        '''\n        Helper function to find the nth digit of the nth triangular number.\n        '''\n        triangular_number = (index + 1) * (index + 1) // 2\n        return int(math.log10(triangular_number) + 1)\n    \n    # Calculate the number of digits required for the smallest triangular number with n digits\n    min_triangular_number = math.pow(10, n - 1)\n    num_digits = int(math.log10(min_triangular_number)) + 1\n    \n    # Find the smallest triangular number with n digits\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if triangular_number >= min_triangular_number:\n            break\n        i += 1\n        \n    # Find the index of the smallest triangular number\n    triangular_number_digits = find_nth_digit_of_nth_triangular_number(num_digits, i)\n    triangular_number_str = str(triangular_number)\n    triangular_number_index = 0\n    for digit in triangular_number_str:\n        triangular_number_index += int(digit)\n        if triangular_number_index == num_digits:\n            break\n    \n    # Return the index of the smallest triangular number\n    return triangular_number_index"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    # convert the tuple to a dictionary using adjacent elements\n    return dict(zip(test_tup[0::2], test_tup[1::2]))"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    result = {}\n    i = 0\n    while i < len(test_tup):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        result[key] = value\n        i += 2\n    return result"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    key_value_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key_value_dict[test_tup[i]] = test_tup[i+1]\n    return key_value_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    if len(test_tup) % 2!= 0:\n        raise ValueError(\"The given tuple should have an even number of elements.\")\n    else:\n        my_dict = {}\n        for i in range(0, len(test_tup), 2):\n            my_dict[test_tup[i]] = test_tup[i+1]\n        return my_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_obj = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i+1]\n        dict_obj[key] = value\n    return dict_obj"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    '''\n    # initialize an empty dictionary\n    test_dict = {}\n    # loop through the tuple\n    for i in range(len(test_tup)-1):\n        # add the adjacent elements as a key-value pair in the dictionary\n        test_dict[test_tup[i]] = test_tup[i+1]\n    # return the dictionary\n    return test_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Initialize an empty dictionary\n    result_dict = {}\n    # Iterate through the tuple elements\n    for i in range(len(test_tup)-1):\n        # Add the current element as a key and the next element as a value to the dictionary\n        result_dict[test_tup[i]] = test_tup[i+1]\n    return result_dict"
    },
    {
        "number": 740,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\n    \"\"\"\n    # Creating an empty dictionary\n    result = {}\n    # Iterating through the given tuple\n    for i in range(len(test_tup)):\n        # Adding the key and value to the dictionary\n        result[i] = test_tup[i]\n        # If the index is not the last index of the tuple\n        if i < len(test_tup) - 1:\n            # Adding the adjacent key and value to the dictionary\n            result[i + 1] = test_tup[i + 1]\n    return result"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #Checking if all the characters are same or not\n    for i in range(len(s)):\n        if s[i]!= s[0]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    if len(s) == 1:\n        return True\n    \n    return s[0] == s[-1] and all_Characters_Same(s[1:-1])"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same,\n    else it returns False.\n    '''\n    first_char = s[0]\n    for char in s:\n        if char!= first_char:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # check whether the string has any characters or not\n    if len(s) == 0:\n        return True\n    # iterate over the string and compare all characters\n    for i in range(1, len(s)):\n        if s[i]!= s[0]:\n            return False\n    # all characters are same\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def all_Characters_Same(s):\n    '''\n    This function takes a string as input and returns True if all the characters in the string are the same, False otherwise.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n\n    # Loop through the string and compare each character with the first character\n    for i in range(1, len(s)):\n        if s[i]!= first_char:\n            # If any character is not the same, return False\n            return False\n\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def all_Characters_Same(s):\n    \"\"\"\n    Write a python function to check whether all the characters are same or not.\n    \"\"\"\n    # Get the first character of the string\n    first_char = s[0]\n\n    # Check whether all the characters are the same as the first character\n    for char in s:\n        if char!= first_char:\n            return False\n\n    # If all characters are the same, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # Initialize a variable to store the first character of the string\n    first_char = s[0]\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the current character is equal to the first character\n        if char!= first_char:\n            # If not, return False\n            return False\n    \n    # If all characters are equal, return True\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n\n    count = len(s)\n    for i in range(count):\n        if s[0]!= s[i]:\n            return False\n    return True"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return all_Characters_Same(s[1:-1])\n        else:\n            return False"
    },
    {
        "number": 741,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def all_Characters_Same(s):\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    # initialize a variable to hold the first character of the string\n    first_char = s[0]\n    \n    # loop through the rest of the string\n    for char in s[1:]:\n        # if the current character is not the same as the first character, return False\n        if char!= first_char:\n            return False\n    \n    # if all characters are the same, return True\n    return True"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2 * math.sqrt(3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0.5 * side ** 2 * math.sin(math.pi / 3)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter\n    semi_perimeter = (side ** 2 + side ** 2 + side ** 2 + side ** 2) ** 0.25\n\n    # Calculate the area of the tetrahedron using Heron's formula\n    area = (1 / 6) * (semi_perimeter ** 2)\n\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side/2\n    return math.sqrt(3) * a ** 2"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    semi_perimeter = (2 * side) ** 0.5\n\n    # calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter ** 2 + side ** 2) * side / 3\n\n    # return the area\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    area = (1 / 6) * side ** 2 * (s - 1)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # Calculate the semi-perimeter of the tetrahedron\n    s = (side + math.sqrt(3)*side + math.sqrt(6)*side) / 4\n    \n    # Calculate the area of the tetrahedron using Heron's formula\n    area = math.sqrt(s*(s-side)*(s-2*side)*(s-3*side))\n    \n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # calculate the semi-perimeter\n    sp = (side * (1 + math.sqrt(5)) / 2) ** 2\n\n    # calculate the area of the triangle\n    a = (side ** 2) / 4\n\n    # calculate the area of the tetrahedron\n    A = a + sp + sp + sp\n\n    return A"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6) * side ** 2 * math.sqrt(2)\n    return area"
    },
    {
        "number": 742,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = (side**2 + side**2 + side**2 + side**2)/4\n    return math.sqrt(s) * (3/4)\n"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function takes a list and a number m and rotates the list by m items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        m (int): The number of items to be rotated to the right.\n\n    Returns:\n        list: The rotated list.\n    \"\"\"\n    n = len(lst)\n    m = m % n\n    if m == 0:\n        return lst\n    else:\n        return lst[-m:] + lst[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    k = m % n\n    list = list[-k:] + list[:-k]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    \"\"\"\n    # Convert the list to a string\n    list_str = str(list)\n\n    # Split the string into two parts\n    first_part, second_part = list_str.split(\",\", 1)\n\n    # Reverse the second part\n    second_part = second_part[::-1]\n\n    # Reverse the whole string\n    whole_string = second_part + first_part\n\n    # Convert the reversed string back to a list\n    rotated_list = eval(whole_string)\n\n    # Return the rotated list\n    return rotated_list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m %= n\n    list = list[-m:] + list[:-m]\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    n = len(list)\n    m = m % n\n    return list[-m:] + list[:-m]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function will rotate the given list by m items to the right direction.\n    \"\"\"\n    # If the length of the list is less than m, then return the list as it is\n    if len(lst) < m:\n        return lst\n    \n    # Initialize two pointers i and j to the last element of the list\n    i = len(lst) - 1\n    j = m - 1\n    \n    # Traverse through the list from the second last element and move the pointer i to the previous element of the jth element\n    while j > 0:\n        i -= 1\n        j -= 1\n        \n    # Swap the elements pointed by i and the first element of the list\n    lst[i], lst[0] = lst[0], lst[i]\n    \n    # Traverse through the list from the second last element and move the pointer i to the previous element of the jth element\n    while j < len(lst) - 1:\n        i -= 1\n        j += 1\n        \n    # Swap the elements pointed by i and the last element of the list\n    lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n    \n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction.\n    '''\n    # Get the length of the list\n    n = len(list)\n    \n    # Check if the rotation is valid\n    if m > n:\n        m = m % n # Keep rotating the list until it's valid\n    \n    # Perform the rotation\n    for i in range(m):\n        temp = list[i]\n        list[i] = list[n-i-1]\n        list[n-i-1] = temp\n    \n    # Return the rotated list\n    return list"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rotate_right(lst, k):\n    \"\"\"\n    Rotate the list by k items to the right direction.\n    \"\"\"\n    k = k % len(lst)\n    return lst[k:] + lst[:k]"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rotate_right(lst, m):\n    \"\"\"\n    This function rotates a list by m items to the right direction.\n    \n    Args:\n    lst (list): A list of integers to be rotated.\n    m (int): The number of items to rotate by.\n    \n    Returns:\n    The rotated list.\n    \n    Raises:\n    TypeError: If lst is not a list.\n    ValueError: If m is not a positive integer.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    \n    if not isinstance(m, int) or m <= 0:\n        raise ValueError(\"m must be a positive integer\")\n        \n    n = len(lst)\n    for i in range(m % n):\n        lst.append(lst.pop(0))\n        \n    return lst"
    },
    {
        "number": 743,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    n = len(list)\n    m = m % n\n    list[0:n-m], list[n-m:] = list[n-m:], list[0:n-m]\n    return list"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for element in test_tup:\n        if element is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_values = ()\n    for val in test_tup:\n        if val is None:\n            none_values += (val,)\n    return bool(none_values)"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    \"\"\"\n    Write a function to check if the given tuple has any none value or not.\n    \"\"\"\n    if any(x is None for x in test_tup):\n        return True\n    else:\n        return False"
    },
    {
        "number": 744,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    for val in test_tup:\n        if val is None:\n            return True\n    return False"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(digit) for digit in str(startnum)]\n    for num in range(startnum, endnum+1):\n        if all(digit == num % digit for digit in digits):\n            yield num"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    digits = [int(digit) for digit in str(startnum)]\n    result = []\n    for num in range(startnum, endnum+1):\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    # lambda function to extract the digits from a number\n    digit_extractor = lambda x: [int(d) for d in str(x)]\n\n    # loop through the numbers in the range\n    for num in range(startnum, endnum+1):\n        # extract the digits from the number\n        digits = digit_extractor(num)\n        # check if every digit is divisible by every other digit\n        if all(x % y == 0 for x, y in zip(digits, digits[1:])):\n            print(num)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    This function takes two parameters - startnum and endnum - and returns a list containing the numbers within the given range where every number is divisible by every digit it contains.\n    \"\"\"\n    return list(filter(lambda num: all(num % int(d) == 0 for d in str(num)), range(startnum, endnum+1)))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return filter(lambda x: all(digit in str(x) for digit in str(x)), range(startnum, endnum+1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains.\n    \"\"\"\n    def is_divisible_by_all_digits(num):\n        \"\"\"\n        Helper function to check if a given number is divisible by every digit it contains.\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return all(digit in digits for digit in set(digits))\n\n    return filter(is_divisible_by_all_digits, range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(int(digit) % int(digit) == 0 for digit in str(x)), range(startnum, endnum + 1))"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n    '''\n    # Using a lambda function to filter out numbers that are not divisible by every digit\n    divisible_numbers = filter(lambda x: all(d in str(x) for d in str(x)), range(startnum, endnum + 1))\n    return list(divisible_numbers)"
    },
    {
        "number": 745,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    return list(filter(lambda x: all(int(digit) % int(num) == 0 for digit in str(x)), range(startnum, endnum+1)))"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    \n    # convert angle to radians\n    a = math.radians(a)\n    \n    # calculate area of sector\n    area = math.pi * r**2 * a\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if the angle is within the valid range\n    if a > 360:\n        return None\n    \n    # Convert angle from degrees to radians\n    a = math.radians(a)\n    \n    # Calculate the area of the sector using Heron's formula\n    area = 0.5 * r * r * math.sin(a)\n    \n    # Return the area\n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi*(r**2)*(a/360)\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n\n    if a > 360:\n        return None\n\n    area = r * r * math.sin(math.radians(a/2))\n\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a/360\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef sector_area(r, a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Calculate the length of the sector\n    length = r * math.sin(math.radians(a))\n    \n    # Check if the angle is within the valid range\n    if a > 360:\n        return None\n    \n    # Calculate the area of the sector\n    area = math.pi * r**2\n    \n    # Calculate the area of the perimeter\n    perimeter = 2 * math.pi * r\n    \n    # Calculate the ratio of area to perimeter\n    ratio = area / perimeter\n    \n    # Return the area and ratio of area to perimeter\n    return area, ratio"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    if a > 360:\n        print(\"Angle cannot be greater than 360 degrees.\")\n        return None\n    \n    area = math.pi * r**2 * a / 360\n    \n    return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Check if angle is within the valid range\n    if a > 360:\n        return None\n    else:\n        # Calculate the area of the sector\n        area = r * math.sin(math.radians(a))\n        return area"
    },
    {
        "number": 746,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    else:\n        area = math.pi * r**2 * a / 360\n        return area"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = len(Z)\n    L = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, p+1):\n                if X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    L[i][j] = L[i-1][j-1] + 1\n                else:\n                    L[i][j] = max(L[i-1][j], L[i][j-1], L[i-1][j-1])\n    return L[n][m]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    m = len(X) \n    n = len(Y) \n    p = len(Z) \n  \n    # Step 1: Initialize the matrix with zeros \n    L = [[0 for j in range(p+1)] for i in range(m+1)] \n  \n    # Step 2: Fill the matrix with the length of the LCS of the first string with the first string and the first string \n    for i in range(1, m+1): \n        for j in range(1, p+1): \n            if X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Step 3: Fill the matrix with the length of the LCS of the second string with the second string and the first string \n    for i in range(1, n+1): \n        for j in range(1, p+1): \n            if Y[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Step 4: Fill the matrix with the length of the LCS of the third string with the third string and the first string \n    for i in range(1, m+1): \n        for j in range(1, n+1): \n            if X[i-1] == Z[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n  \n    # Step 5: Trace the backtrack path from the bottom-right corner of the matrix \n    i = m \n    j = p \n    lcs = [] \n    while i > 0 and j > 0: \n        if X[i-1] == Y[j-1] and Y[j-1] == Z[i-1]: \n            lcs.append(X[i-1]) \n            i -= 1 \n            j -= 1 \n        elif L[i-1][j] > L[i][j-1]: \n            i -= 1 \n        else: \n            j -= 1 \n  \n    return \"\".join(lcs) "
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z):\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Initialize LCS values for all substrings of X[0..n] and Y[0..m]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    # Construct the LCS string by tracing back the values of p[][]\n    lcs_length = p[n][m]\n    lcs = \"\"\n    i = n\n    j = m\n    while (i > 0 and j > 0):\n        if X[i - 1] == Y[j - 1]:\n            lcs = X[i - 1] + lcs\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z):\n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n\n    # create a table to store lengths of subsequences of lengths 1 to m, 1 to n and 1 to o\n    L = [[[0 for j in range(o+1)] for i in range(m+1)] for k in range(n+1)]\n\n    # Fill in the table L[i][j][k] with the length of the LCS of X[0:i], Y[0:j], Z[0:k]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(L[i-1][j][k], L[i][j-1][k], L[i][j][k-1])\n\n    # Build the LCS by tracing back through the table L and appending the corresponding characters to a list\n    LCS = []\n    i = m\n    j = n\n    k = o\n\n    while i > 0 and j > 0 and k > 0:\n        if X[i-1] == Y[j-1] and Y[j-1] == Z[k-1]:\n            LCS.append(X[i-1])\n            i -= 1\n            j -= 1\n            k -= 1\n        elif L[i-1][j][k] == L[i][j-1][k]:\n            i -= 1\n        elif L[i][j][k-1] == L[i][j][k]:\n            j -= 1\n        else:\n            k -= 1\n\n    # Reverse the LCS and return it as a string\n    LCS.reverse()\n    return ''.join(LCS)"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # create a list to store lengths of subsequences for all possible pairs of strings\n    L = [[0 for j in range(len(Z)+1)] for i in range(len(Y)+1)]\n\n    # Fill L[i][j] in bottom up fashion. Note that L[i][0] and L[0][j] are not used\n    for i in range(1, len(Y)+1):\n        for j in range(1, len(Z)+1):\n            if Y[i-1] == Z[j-1]:\n                L[i][j] = L[i-1][j-1] + 1\n            else:\n                L[i][j] = max(L[i-1][j], L[i][j-1])\n\n    # Starting from the bottom-right corner of L[][] and moving to the top-left corner,\n    # construct the lcs string one by one\n    i = len(Y)\n    j = len(Z)\n    lcs = \"\"\n    while i > 0 and j > 0:\n        if Y[i-1] == Z[j-1]:\n            lcs = Y[i-1] + lcs\n            i -= 1\n            j -= 1\n        elif L[i-1][j] > L[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    p = len(Z)\n\n    # create a table to store lengths of LCS of prefixes of X, Y and Z\n    L = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Build LCS matrix in bottom up manner\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(1, p + 1):\n                if X[i - 1] == Y[j - 1] and Z[k - 1] == X[i - 1]:\n                    L[i][j] = L[i - 1][j - 1] + 1\n                elif L[i - 1][j] >= L[i][j - 1]:\n                    L[i][j] = L[i - 1][j]\n                else:\n                    L[i][j] = L[i][j - 1]\n\n    # Return LCS length\n    return L[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    This function takes three string sequences X, Y, and Z and returns the longest common subsequence (LCS) of the three sequences.\n\n    LCS is a subsequence that is present in all three sequences and has the maximum length among all possible subsequences.\n    \"\"\"\n    n = len(X)\n    m = len(Y)\n    p = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if X[i - 1] == Y[j - 1]:\n                p[i][j] = p[i - 1][j - 1] + 1\n            else:\n                p[i][j] = max(p[i - 1][j], p[i][j - 1])\n\n    result = []\n    i = n\n    j = m\n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            result.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif p[i - 1][j] > p[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    result.reverse()\n    return ''.join(result)\n"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n\n    # Length of X, Y and Z strings\n    m, n, p = len(X), len(Y), len(Z)\n\n    # Create a table to store length of LCS of substring ending at each position in X, Y and Z\n    table = [[0] * (p+1) for i in range(m+1)]\n\n    # Fill table in bottom up manner\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if X[i-1] == Y[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n\n    # Print the length of LCS of X, Y and Z\n    return table[m][n]"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given three string sequence.\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    \"\"\"\n\n    # create a dictionary to store LCS of two strings\n    LCS = {}\n\n    # iterate over all possible prefixes of the first string\n    for i in range(len(X) + 1):\n        for j in range(len(Y) + 1):\n\n            # check if the current substring is a valid prefix of both Y and Z\n            if X[i - 1] == Y[j - 1]:\n                lcs = LCS.get((i - 1, j))\n                if lcs is None:\n                    lcs = (X[i - 1],)\n                else:\n                    lcs += (X[i - 1],)\n                LCS[(i, j)] = lcs\n\n            # check if the current substring is a valid prefix of Y\n            elif j > 0 and X[i - 1] == Z[j - 1]:\n                lcs = LCS.get((i, j - 1))\n                if lcs is None:\n                    lcs = (Z[j - 1],)\n                else:\n                    lcs += (Z[j - 1],)\n                LCS[(i, j)] = lcs\n\n    # find the longest common subsequence by tracing back through the LCS dictionary\n    i, j = len(X), len(Y)\n    lcs = []\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs.append(X[i - 1])\n            i -= 1\n            j -= 1\n        elif X[i - 1] == Z[j - 1]:\n            i -= 1\n        else:\n            j -= 1\n\n    return lcs[::-1]  # reverse the list to get the correct order of characters"
    },
    {
        "number": 747,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m, n = len(X), len(Y) \n    table = [[0 for j in range(n + 1)] for i in range(m + 1)] \n\n    for i in range(1, m + 1): \n        for j in range(1, n + 1): \n            if X[i - 1] == Y[j - 1]: \n                table[i][j] = table[i - 1][j - 1] + 1 \n            else: \n                table[i][j] = max(table[i - 1][j], table[i][j - 1]) \n\n    lcs = [] \n    i, j = m, n \n    while i > 0 and j > 0: \n        if X[i - 1] == Y[j - 1]: \n            lcs.append(X[i - 1]) \n            i -= 1 \n            j -= 1 \n        elif table[i - 1][j] > table[i][j - 1]: \n            i -= 1 \n        else: \n            j -= 1 \n\n    return ''.join(reversed(lcs))"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef capital_words_spaces(string):\n    # create a regular expression pattern to match capital letters\n    pattern = r'[A-Z][a-z]+'\n    # use the regular expression search() function to find all occurrences of capital letters\n    matches = re.findall(pattern, string)\n    # iterate through the matches and replace them with spaces\n    for match in matches:\n        string = string.replace(match,'' + match +'')\n    # return the modified string\n    return string"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # Split the string into words\n    words = re.findall(r'\\b[A-Z]\\w+\\b', str1)\n\n    # Join the words with spaces between them\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n\n    # Loop through the words and replace them with spaces before capitalizing the first letter\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] ='' + words[i]\n        else:\n            words[i] = words[i].capitalize()\n\n    # Join the words back together into a string\n    result =''.join(words)\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Remove all non-word characters and convert to lowercase\n    str1 = re.sub(r'\\W+','', str1).lower()\n    # Split the string into words and capitalize the first letter of each word\n    words = re.findall(r'\\b\\w+\\b', str1)\n    new_words = []\n    for word in words:\n        if word[0].isupper():\n            new_words.append(word)\n        else:\n            new_words.append(word.capitalize())\n    # Join the words with spaces\n    new_str =''.join(new_words)\n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9]+','', str1)\n    # split the string into words\n    words = str1.split()\n    # capitalize the first letter of each word\n    words = [word.capitalize() for word in words]\n    # join the words back into a string\n    return''.join(words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    # remove all non-alphanumeric characters and split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n\n    # capitalize the first letter of each word and join them with spaces\n    result =''.join([word.capitalize() for word in words])\n\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # replace all the non-alphanumeric characters with spaces\n    str1 = re.sub(r'[^a-zA-Z0-9\\s]','', str1)\n    # split the string into words and capitalize the first letter of each word\n    words = str1.split()\n    words = [word.capitalize() for word in words]\n    # join the words with spaces\n    result =''.join(words)\n    return result"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    # Split the string into words\n    words = str1.split()\n\n    # Create an empty list to store the modified words\n    modified_words = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the first letter of the word is capitalized\n        if word[0].isupper():\n            # If it is, add a space before the word\n            modified_words.append(''+ word)\n        else:\n            # Otherwise, just append the word to the modified list\n            modified_words.append(word)\n\n    # Join the modified words back together into a string and return it\n    return''.join(modified_words)"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # Split the string into words\n    words = re.findall(r'\\b\\w+\\b', str1)\n    \n    # Iterate through each word\n    for i in range(len(words)):\n        # If the word starts with a capital letter\n        if words[i][0].isupper():\n            # Add a space before the word\n            words[i] ='' + words[i]\n    \n    # Join the words with spaces\n    new_str =''.join(words)\n    \n    return new_str"
    },
    {
        "number": 748,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef capital_words_spaces(str1):\n    \"\"\"\n    Write a function to put spaces between words starting with capital letters in a given string.\n    \"\"\"\n    # convert the input string to lowercase and split it into a list of words\n    words = str1.lower().split()\n    \n    # loop over the words and capitalize the first letter of each word\n    for i in range(len(words)):\n        if words[i][0].isupper():\n            words[i] = words[i][0].upper() + words[i][1:]\n    \n    # join the words back into a string and return it\n    return''.join(words)"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all strings to numbers using a list comprehension\n    nums = [int(num_str) for num_str in nums_str]\n\n    # Sort the list in ascending order\n    nums.sort()\n\n    # Convert the sorted list back to strings using a list comprehension\n    sorted_nums_str = [str(num) for num in nums]\n\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically.\n    '''\n    # Convert the strings to numbers using map() and list()\n    nums = list(map(int, nums_str))\n    # Sort the list in ascending order using sorted()\n    nums = sorted(nums)\n    # Convert the sorted list back to strings using map() and list()\n    sorted_nums_str = list(map(str, nums))\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: float(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: tuple(int(c) for c in x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        nums.append(int(num_str))\n    nums.sort()\n    sorted_nums = []\n    for num in nums:\n        sorted_nums.append(str(num))\n    return sorted_nums"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # Convert all string numbers to floats\n    nums = [float(num) for num in nums_str]\n    \n    # Use the built-in sorted function to sort the floats\n    nums.sort()\n    \n    # Convert the sorted floats back to strings and return the result\n    return [str(num) for num in nums]"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    \"\"\"\n    Write a function to sort a given list of strings of numbers numerically.\n    \"\"\"\n    # split each string into a list of digits\n    nums_list = [list(str(n)) for n in nums_str]\n    # convert the list of digits into a list of integers\n    nums_list = [int(''.join(s)) for s in nums_list]\n    # sort the list of integers in ascending order\n    nums_list.sort()\n    # convert the sorted list of integers back into a list of strings\n    sorted_nums_str = [str(n) for n in nums_list]\n    return sorted_nums_str"
    },
    {
        "number": 749,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for num_str in nums_str:\n        try:\n            nums.append(float(num_str))\n        except ValueError:\n            continue\n    nums.sort()\n    return nums"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Check if the given list is a list and the given tuple is a tuple\n    if type(test_list) == list and type(test_tup) == tuple:\n        # Create a new list and add the given tuple to it\n        new_list = test_list + test_tup\n        return new_list\n    else:\n        print(\"Invalid input\")"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given tuple to the given list.\n    \"\"\"\n    # Create a new list to store the concatenated values\n    new_list = []\n\n    # Iterate through the given list\n    for item in test_list:\n        # Check if the current item is a tuple\n        if isinstance(item, tuple):\n            # If it is a tuple, check if the first element is the same as the first element of the given tuple\n            if item[0] == test_tup[0]:\n                # If it is the same, add the second element of the given tuple to the end of the item\n                new_list.append(item[1] + test_tup[1])\n            else:\n                # If it isn't the same, add the item as is\n                new_list.append(item)\n        else:\n            # If the item is not a tuple, add it as is to the new list\n            new_list.append(item)\n\n    # Return the new list containing the concatenated values\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Combine the list and the tuple\n    new_list = test_list + test_tup\n    \n    # Return the new list\n    return new_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # Convert the tuple to a list\n    test_list = list(test_tup)\n\n    # Add the tuple to the list\n    for i in range(len(test_list)):\n        test_list[i] += test_tup[i]\n\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    # convert the tuple to a list\n    test_list = list(test_tup)\n    # add the list to the original list\n    test_list.extend(test_list)\n    # return the updated list\n    return test_list"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    test_list.append(test_tup)\n    return test_list"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 1:\n        return True\n    else:\n        if arr[i] < arr[i//2]:\n            return False\n        else:\n            return check_min_heap_helper(arr, i//2)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)\n"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # Base case\n    if i >= len(arr) // 2:\n        return True\n    \n    # Check if parent is smaller than child\n    if arr[i] > arr[2*i+1]:\n        return False\n    \n    # Recursively check for min heap\n    return check_min_heap_helper(arr, 2*i+1)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    # Check if array is empty\n    if len(arr) == 0:\n        return True\n    \n    # Check if root is smaller than its children\n    if arr[0] > arr[1]:\n        return False\n    \n    # Recursively check for min heap\n    return check_min_heap_helper(arr, 0)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] < arr[(i - 1) // 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, (i - 1) // 2)\n\n\ndef is_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    return check_min_heap_helper(arr, len(arr) - 1)\n\n\ndef min_heapify(arr, n, i):\n    '''\n    Write a function to convert the given array to a min heap.\n    '''\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        min_heapify(arr, n, smallest)\n\n\ndef heap_sort(arr):\n    '''\n    Write a function to sort the given array in ascending order using heap sort.\n    '''\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        min_heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        min_heapify(arr, i, 0)\n\n    return arr"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > 0 and arr[i] < arr[i//2]:\n        return False\n    return True\n\ndef check_min_heap(arr):\n    '''\n    Check if the given array represents min heap or not.\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        if not check_min_heap_helper(arr, i):\n            return False\n    return True"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i == 0:\n        return True\n    elif arr[i] < arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    '''\n    Given an array, check if it represents a min heap or not.\n    '''\n    n = len(arr)\n    return check_min_heap_helper(arr, n-1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    if i >= len(arr):\n        return True\n    \n    if arr[i] > arr[2 * i + 1]:\n        return False\n    \n    return check_min_heap_helper(arr, 2 * i + 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    if i < 0:\n        return True\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < len(arr) and arr[left] > arr[i]:\n        return False\n    if right < len(arr) and arr[right] > arr[i]:\n        return False\n    return check_min_heap_helper(arr, i - 1)\n\ndef is_min_heap(arr):\n    return check_min_heap_helper(arr, len(arr) - 1)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    left = 2 * i + 1\n    right = 2 * i + 2\n    smallest = i\n    \n    if left < len(arr) and arr[left] < arr[smallest]:\n        smallest = left\n    \n    if right < len(arr) and arr[right] < arr[smallest]:\n        smallest = right\n    \n    if smallest!= i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        check_min_heap_helper(arr, smallest)\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    for i in range(n//2 - 1, -1, -1):\n        check_min_heap_helper(arr, i)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) // 2:\n        return True\n    if arr[i] < min(arr[2*i+1], arr[2*i+2]):\n        return False\n    return check_min_heap_helper(arr, 2*i+1) and check_min_heap_helper(arr, 2*i+2)"
    },
    {
        "number": 751,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    if i == 0:\n        return True\n    elif arr[i] <= arr[i//2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i//2)\n\ndef check_min_heap(arr):\n    n = len(arr)\n    return check_min_heap_helper(arr, n//2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    a = 1\n    b = 2\n    c = 1\n    for i in range(n):\n        a = (a * b) % c\n        b = c\n        c = (c * b) % a\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        j = 0\n        while True:\n            j += 1\n            if j % 2 == 0:\n                continue\n            num = 1\n            for i in range(1, n//2 + 1):\n                num += 2*j**i\n            if num > n:\n                break\n            elif num == n:\n                return j\n    return -1"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    \"\"\"\n    Write a function to find the nth jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n * jacobsthal_num(n-1)) - jacobsthal_num(n-2)"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def jacobsthal_num(n):\n    \"\"\"\n    Write a function to find the nth jacobsthal number. \n    https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize variables\n    jacob_num = 0\n    prev_jac_num = 0\n    \n    # Iterate over the range of n\n    for i in range(n):\n        # If i is even, add the jacob_num and prev_jac_num to get the next jacob_num\n        if i % 2 == 0:\n            jacob_num = jacob_num + prev_jac_num\n        # If i is odd, subtract the jacob_num and prev_jac_num to get the next jacob_num\n        else:\n            jacob_num = jacob_num - prev_jac_num\n        \n        # Update the previous jacob_num for the next iteration\n        prev_jac_num = jacob_num\n    \n    # Return the jacob_num\n    return jacob_num"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacob_num = 0\n    for i in range(1, n+1):\n        jacob_num = (jacob_num * i) // jacob_num\n    return jacob_num\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th jacobsthal number is:\", jacobsthal_num(n))"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Initialize the first two numbers\n    a = 0\n    b = 1\n    # Initialize the nth number\n    nth = 0\n    # Loop until the nth number is found\n    while nth < n:\n        # Add the current numbers and move to the next number\n        a, b = b, a + b\n        # Increment the nth number\n        nth += 1\n    # Return the nth jacobsthal number\n    return a"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def jacobsthal_num(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n < 1:\n        return \"Invalid input\"\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        jacobsthal_list = [0, 1]\n        for i in range(2, n+1):\n            jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n        return jacobsthal_list[n]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    jacobsthal_list = [0, 1]\n    for i in range(2, n+1):\n        jacobsthal_list.append(jacobsthal_list[i-1] + jacobsthal_list[i-2])\n    return jacobsthal_list[-1]"
    },
    {
        "number": 752,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return jacobsthal_num(n // 2) * (3 * jacobsthal_num(n // 2) - 1)\n    else:\n        return jacobsthal_num(n // 2) * (2 * jacobsthal_num(n // 2) + 1)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    \n    Parameters:\n    test_list - list of tuples (x,y) where x and y are integers\n    K - integer representing the number of records to find\n    \n    Returns:\n    Returns a tuple containing the minimum k records from test_list.\n    '''\n    # Sort the list in ascending order based on the second element of each tuple\n    test_list.sort(key=lambda x: x[1])\n    \n    # Initialize a min_list to store the minimum k records\n    min_list = []\n    \n    # Iterate through the list from the end and add the elements to the min_list if the length of min_list is less than or equal to K\n    for i in range(len(test_list)-1, -1, -1):\n        if len(min_list) <= K:\n            min_list.append(test_list[i])\n        else:\n            break\n            \n    return tuple(min_list)"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_list = []\n    for i in range(len(test_list)):\n        if i < K:\n            min_list.append(test_list[i])\n        else:\n            for j in range(K, len(test_list)):\n                if test_list[j] < min_list[0]:\n                    min_list.pop(0)\n                    min_list.append(test_list[j])\n                    break\n\n    return min_list"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for item in test_list:\n        if item in count_dict:\n            count_dict[item] += 1\n        else:\n            count_dict[item] = 1\n\n    # Find the minimum value in the dictionary\n    min_val = min(count_dict.values())\n\n    # Find the minimum k elements that have the minimum value in the dictionary\n    min_k_list = []\n    for key, value in count_dict.items():\n        if value == min_val:\n            min_k_list.append(key)\n            if len(min_k_list) == K:\n                break\n\n    # Sort the minimum k elements in ascending order and return it as a list\n    return sorted(min_k_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n\n    # Sort the test_list based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # Initialize variables to store minimum values\n    min_list = []\n    min_count = float('inf')\n\n    # Traverse through the sorted test_list and find minimum k records\n    for i in range(len(test_list)):\n        if len(min_list) < K:\n            min_list.append(test_list[i])\n        else:\n            # If the length of min_list is less than K, then we can include the current element in the min_list\n            if test_list[i] < min_list[0]:\n                # If the current element is smaller than the first element of min_list, then we update the min_list and its count\n                min_list = [test_list[i]]\n                min_count = 1\n            elif test_list[i] == min_list[0]:\n                # If the current element is equal to the first element of min_list, then we increment the count of min_list\n                min_count += 1\n\n        # If we have found minimum k records, then we break the loop and return the minimum values\n        if len(min_list) == K:\n            break\n\n    return min_list, min_count"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list.\n    https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # initialize minimum value\n    min_value = float('inf')\n\n    # initialize minimum k records\n    min_records = []\n\n    # iterate through the list and check if the value of k is greater than minimum value\n    for i in range(len(test_list)):\n        if K > i + 1:\n            # check if the value of k is greater than minimum value\n            if test_list[i][1] < min_value:\n                # if yes, update minimum value and minimum k records\n                min_value = test_list[i][1]\n                min_records = [test_list[i]]\n            # check if the value of k is equal to minimum value\n            elif test_list[i][1] == min_value:\n                # if yes, add the record to the minimum k records\n                min_records.append(test_list[i])\n\n    # return the minimum k records\n    return min_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    test_list.sort()\n    min_records = []\n\n    for i in range(len(test_list) - K + 1):\n        min_records.append(test_list[i])\n\n    return min_records\n"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Create a dictionary to store the frequency of each element in the list\n    freq = {}\n    for tup in test_list:\n        if tup[0] in freq:\n            freq[tup[0]] += 1\n        else:\n            freq[tup[0]] = 1\n\n    # Sort the dictionary by frequency in descending order\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n\n    # Find the first k elements in the sorted list and return their frequency\n    return sum([freq[tup[0]] for tup in sorted_freq[:K]])"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. \n    '''\n    min_list = []\n    # Iterate through each tuple in the test_list\n    for tup in test_list:\n        if len(min_list) < K:\n            min_list.append(tup)\n        else:\n            # Check if the current tuple is smaller than the smallest element in the min_list\n            if tup[0] < min_list[0][0]:\n                # If it is, replace the smallest element in the min_list with the current tuple\n                min_list[0] = tup\n            elif tup[0] == min_list[0][0]:\n                # If the tuples have the same value for the first element, check if the second element is smaller\n                if tup[1] < min_list[0][1]:\n                    min_list[0] = tup\n\n    # Return the minimum k records from the min_list\n    return min_list[:K]"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/\n    '''\n    # sort the list in ascending order based on the first element of each tuple\n    test_list.sort(key=lambda x: x[0])\n\n    # initialize minimum value to first element of the sorted list\n    min_val = test_list[0][0]\n\n    # initialize an empty list to store minimum K records\n    min_k_records = []\n\n    # iterate over the sorted list and add elements to the min_k_records list\n    for i in range(K):\n        if test_list[i][0] == min_val:\n            min_k_records.append(test_list[i])\n\n    return min_k_records"
    },
    {
        "number": 753,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    sorted_list = sorted(test_list)\n    min_val = sorted_list[0][1]\n    min_index = 0\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i][1] < min_val:\n            min_val = sorted_list[i][1]\n            min_index = i\n    return min_index"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. \n    Write a function to find common elements from three lists. The function should return a list.\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l2[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            index_list.append(i)\n    return index_list"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3 and l1[i] in l1:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    # Initialize an empty list to store common elements\n    common = []\n    \n    # Loop through each index in l1\n    for i in range(len(l1)):\n        # Check if the element at that index is also in l2 and l3\n        if l1[i] in l2 and l1[i] in l3:\n            # If it is, add it to the common list\n            common.append(l1[i])\n            \n    # Return the common list\n    return common"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 754,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] in l2[i] and l1[i] in l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    if len(numbers) < 2:\n        return None\n    \n    smallest = numbers[0]\n    second_smallest = numbers[1]\n    \n    for num in numbers[2:]:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num!= smallest:\n            second_smallest = num\n    \n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    smallest = second_largest = float('inf')\n    for num in numbers:\n        if num < smallest:\n            second_largest = smallest\n            smallest = num\n        elif num < second_largest and num!= smallest:\n            second_largest = num\n    return second_largest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = float('inf')\n        second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Sort the list in ascending order\n    numbers.sort()\n    \n    # Return the second element of the sorted list (index 1)\n    return numbers[1]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    else:\n        smallest = second_smallest = float('inf')\n        for num in numbers:\n            if num < smallest:\n                second_smallest = smallest\n                smallest = num\n            elif num < second_smallest and num!= smallest:\n                second_smallest = num\n        return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n\n    # Find the smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n\n    # Return the second smallest number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    \"\"\"\n    Write a function to find the second smallest number in a list.\n    \"\"\"\n    numbers.sort()\n    return numbers[-2]"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest"
    },
    {
        "number": 755,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) <= 1:\n        return None\n    else:\n        smallest = second_smallest(numbers[1:])\n        if smallest is not None:\n            return numbers[0]\n        else:\n            return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b)*'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(?=b)'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a.*b')\n    matches = pattern.findall(text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a\\w*b+'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def text_match_zero_one(text):\n    pattern = r'a(b*){0,1}'\n    return re.findall(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab*'\n    return re.search(pattern, text)"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a(b+)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = r'ab+'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 756,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_zero_one(text):\n    pattern = re.compile(r'a.*b')\n    match = pattern.search(text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1] and test_list[j]!= test_list[i]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_list = []\n    count = 0\n\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word not in reverse_list:\n            reverse_list.append(reverse_word)\n        else:\n            count += 1\n\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. \n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list.\n    '''\n    reverse_dict = {}\n    pairs = 0\n    for string in test_list:\n        if string in reverse_dict:\n            pairs += reverse_dict[string]\n        else:\n            reverse_dict[string[::-1]] = 1 if len(string) % 2 == 0 else 2\n\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list.\n    \"\"\"\n    # Create a dictionary to store the count of reverse pairs\n    reverse_dict = {}\n\n    # Iterate through the given list\n    for i in range(len(test_list)):\n        # Extract the current string and reverse it\n        current_str = test_list[i][::-1]\n        # Check if the reversed string exists in the dictionary\n        if current_str in reverse_dict:\n            # If yes, increment the count by 1\n            reverse_dict[current_str] += 1\n        else:\n            # If no, add the string to the dictionary with a count of 1\n            reverse_dict[current_str] = 1\n\n    # Count the number of reverse pairs and return the result\n    reverse_pair_count = 0\n    for count in reverse_dict.values():\n        reverse_pair_count += (count * (count - 1)) // 2\n    return reverse_pair_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # create an empty dictionary to store the count of reverse pairs\n    reverse_count = {}\n    # loop through the list of strings\n    for string in test_list:\n        # convert the string to a list of characters\n        char_list = list(string)\n        # sort the list of characters in reverse order\n        char_list.sort(reverse=True)\n        # create a reverse string from the sorted list of characters\n        reverse_string = ''.join(char_list)\n        # check if the reverse string exists in the dictionary\n        if reverse_string in reverse_count:\n            # increment the count of reverse pairs\n            reverse_count[reverse_string] += 1\n        else:\n            # add the reverse string to the dictionary with a count of 1\n            reverse_count[reverse_string] = 1\n    # return the count of reverse pairs\n    return reverse_count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][::-1] == test_list[j]:\n                count += 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create a dictionary to store the counts of each tuple\n    count_dict = {}\n    # loop through the original list\n    for sublist in list1:\n        # convert the sublist to a tuple\n        sublist_tuple = tuple(sublist)\n        # check if the tuple exists in the dictionary\n        if sublist_tuple in count_dict:\n            # increment the count of the tuple\n            count_dict[sublist_tuple] += 1\n        else:\n            # if the tuple is not in the dictionary, add it with a count of 1\n            count_dict[sublist_tuple] = 1\n    # return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count_dict = {}\n    for item in list1:\n        if tuple(item) not in count_dict:\n            count_dict[tuple(item)] = 1\n        else:\n            count_dict[tuple(item)] += 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary\n    count_dict = {}\n    # Loop through each element in the input list\n    for elem in list1:\n        # Convert the element to a tuple\n        tuple_elem = tuple(elem)\n        # Check if the tuple already exists in the dictionary\n        if tuple_elem in count_dict:\n            # If it does, increment its value by 1\n            count_dict[tuple_elem] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a value of 1\n            count_dict[tuple_elem] = 1\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # create an empty dictionary to store the count of each sublist\n    sublist_counts = {}\n    \n    # loop through the input list\n    for sublist in list1:\n        # convert the sublist to a tuple and check if it's already in the dictionary\n        if sublist not in sublist_counts:\n            # if it's not, add it with a count of 1\n            sublist_counts[sublist] = 1\n        else:\n            # if it's already in the dictionary, increment the count by 1\n            sublist_counts[sublist] += 1\n            \n    return sublist_counts"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n\n    # Create a dictionary to store the counts of lists\n    count_dict = {}\n\n    # Loop through each element in the list\n    for element in list1:\n        # Convert the element to a tuple\n        tup = tuple(element)\n        # Check if the tuple exists in the dictionary\n        if tup in count_dict:\n            # If it does, increment its count\n            count_dict[tup] += 1\n        else:\n            # If it doesn't, add it to the dictionary with a count of 1\n            count_dict[tup] = 1\n\n    # Return the dictionary\n    return count_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    count = {}\n    for i in list1:\n        if tuple(i) in count:\n            count[tuple(i)] += 1\n        else:\n            count[tuple(i)] = 1\n    return count"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    This function takes a list and returns a dictionary where every sublist is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Args:\n        lst (list): The list of sublists to be counted.\n\n    Returns:\n        dict: A dictionary where each key is a tuple of the elements of a sublist and the value is the number of occurrences of that sublist in the original list.\n\n    Example:\n        >>> unique_sublists([1, [2, 3], [2, 4, 5], [6, 7], [2, 3, 4], [2, 6]])\n        {((2, 2, 2), 1): 1, ((2, 3), 1): 2, ((2, 4), 1): 1, ((2, 5), 1): 1, ((2, 6), 2): 1, ((6, 7), 1): 1}\n    \"\"\"\n    unique_tuples = {}\n    for sublist in lst:\n        if isinstance(sublist, list):\n            sublist_tuple = tuple(sorted(sublist))\n            if sublist_tuple not in unique_tuples:\n                unique_tuples[sublist_tuple] = 0\n            unique_tuples[sublist_tuple] += 1\n    return unique_tuples"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # Create an empty dictionary to store unique sublists and their count\n    unique_dict = {}\n    \n    # Loop through each element in the list1\n    for i in range(len(list1)):\n        # Convert the list to a tuple and check if the tuple is in the dictionary\n        if tuple(list1[i]) in unique_dict:\n            # If the tuple is in the dictionary, increment its count\n            unique_dict[tuple(list1[i])] += 1\n        else:\n            # If the tuple is not in the dictionary, add it with count 1\n            unique_dict[tuple(list1[i])] = 1\n    \n    # Return the dictionary of unique sublists and their count\n    return unique_dict"
    },
    {
        "number": 758,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    sublists = {}\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            sublists[tuple(list1[i:j+1])] = sublists.get(tuple(list1[i:j+1]), 0) + 1\n    return sublists"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    if '.' not in num:\n        return False\n    parts = num.split('.')\n    if len(parts)!= 2:\n        return False\n    int_part = parts[0]\n    frac_part = parts[1]\n    if len(int_part) > 10 or len(frac_part) > 2:\n        return False\n    for char in int_part:\n        if not char.isdigit():\n            return False\n    for char in frac_part:\n        if not char.isdigit() and char!= '.':\n            return False\n    if '.' in int_part and int(int_part.split('.')[0]) > 999999999:\n        return False\n    if '.' in int_part and int(int_part.split('.')[1]) > 99:\n        return False\n    if '.' not in int_part and len(int_part) > 9:\n        return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        num_str = str(num)\n        if '.' not in num_str:\n            return False\n        if '.' in num_str:\n            if len(num_str.split('.')[1]) > 2:\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    if '.' in num:\n        try:\n            num = float(num)\n            if '.' in str(num):\n                if len(str(num).split('.')[1]) <= 2:\n                    return True\n        except ValueError:\n            return False\n    return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if not isinstance(num, str):\n        return False\n    num = num.replace(',', '')\n    for i, digit in enumerate(num):\n        if i == 0 and digit == '0':\n            return False\n        if digit not in ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] or (i > 0 and digit == '0'):\n            return False\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        if '.' in num and len(num.split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    try:\n        float_num = float(num)\n        if float_num.is_integer():\n            return False\n        num_parts = str(float_num).split('.')\n        if len(num_parts)!= 2:\n            return False\n        for part in num_parts:\n            if len(part) > 2:\n                return False\n            if not part.isdigit():\n                return False\n            if int(part) > 9:\n                return False\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_list = list(num)\n    decimal_flag = False\n    if num[0] == '0':\n        if num[1] == '.':\n            return True\n        elif num[1] == '0' and num_list[2] == '.':\n            return True\n        elif num[1] == '.' and num[2] == '0' and num_list[3] == '.':\n            return True\n    for i in range(len(num_list)):\n        if num_list[i] == '.' and not decimal_flag:\n            decimal_flag = True\n            continue\n        elif num_list[i] == '.' and decimal_flag:\n            return False\n        elif decimal_flag:\n            return False\n        elif not decimal_flag:\n            return True\n    return True"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    try:\n        decimal.Decimal(num)\n        return True\n    except ValueError:\n        return False"
    },
    {
        "number": 759,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num and '.' not in num.replace('.', '', 1):\n        # If there is a dot, check if there is only one dot\n        return True\n    elif '.' not in num:\n        # If there is no dot, check if the number is an integer\n        try:\n            int(num)\n            return True\n        except ValueError:\n            # If it's not an integer, it's not a decimal number\n            return False\n    else:\n        # If there are multiple dots, it's not a decimal number\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    # convert the list to set to remove duplicates\n    unique_set = set(arr)\n\n    # check if the length of the set is 1\n    if len(unique_set) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    \"\"\"\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    \"\"\"\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == len(set(arr)):\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # check if the list is empty\n    if not arr:\n        return False\n\n    # initialize a set to store the unique elements\n    unique = set()\n\n    # loop through the list and add each element to the set\n    for num in arr:\n        unique.add(num)\n\n    # check if the set has only one element\n    if len(unique) == 1:\n        return True\n    else:\n        return False"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)!= len(set(arr)):\n        return False\n    else:\n        return True"
    },
    {
        "number": 760,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    if len(arr) == 1:\n        return True\n    \n    for i in range(len(arr)-1):\n        if arr[i] == arr[i+1]:\n            return False\n    \n    return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Check if the month number is between 1 to 12\n    if monthnum3 < 1 or monthnum3 > 12:\n        return \"Invalid Month Number\"\n\n    # Dictionary to store the number of days in each month\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the month number contains 30 days or not\n    if monthnum3 in month_days:\n        if month_days[monthnum3] == 30:\n            return \"30 Days\"\n        else:\n            return \"31 Days\"\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in range(1, 13) and monthnum3 % 2 == 0:\n        if monthnum3 == 2:\n            if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n                days_in_month[1] = 29\n            else:\n                days_in_month[1] = 28\n        if monthnum3 in range(1, 4):\n            return True\n        elif monthnum3 in range(5, 10):\n            return days_in_month[monthnum3 - 5] == 30\n        else:\n            return days_in_month[monthnum3 - 10] == 30\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if 1 <= monthnum3 <= 3:\n        return True\n    elif 4 <= monthnum3 <= 6:\n        return True\n    elif 7 <= monthnum3 <= 9:\n        return True\n    elif 10 <= monthnum3 <= 12:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    \n    if monthnum3 % 3 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 2:\n        return \"February has 29 days\"\n    elif monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return \"30 days are not allowed in these months\"\n    elif monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10:\n        return \"30 days are allowed in these months\"\n    else:\n        return \"Invalid month number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 in [4, 6, 9, 11]:\n        return True\n    elif monthnum3 in [1, 3, 5, 7, 8, 10, 12]:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    if monthnum3 % 2 == 0:\n        return False\n    elif monthnum3 % 2 == 1:\n        return True"
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum):\n    \"\"\"\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    \"\"\"\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum == 2:\n        if ((year % 4 == 0 and year % 100!= 0) or year % 400 == 0):\n            days[1] = 29\n        else:\n            days[1] = 28\n    if monthnum in range(1, 13):\n        return days[monthnum-1]\n    else:\n        return \"Invalid Month Number\""
    },
    {
        "number": 762,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    days_in_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if monthnum3 in [4, 6, 9, 11]:\n        if (year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (year % 4 == 0 and (year % 100 == 0)):\n            days_in_month[2] = 29\n        else:\n            days_in_month[2] = 28\n    return days_in_month[monthnum3-1]"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes an array and its size as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            diff = arr[j] - arr[i]\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_min_diff(arr, n):\n    if n < 2:\n        return None\n    \n    # Sort the array\n    arr.sort()\n    \n    # Initialize the minimum difference to be infinity\n    min_diff = float('inf')\n    \n    # Iterate through the array\n    for i in range(n - 1):\n        # Calculate the difference between the current and the next element\n        diff = arr[i+1] - arr[i]\n        \n        # Update the minimum difference if the current difference is smaller\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function takes in an array and the length of the array and returns the minimum difference between any two elements in the array.\n    The algorithm used to find the minimum difference is to sort the array and then compare the difference between adjacent elements.\n    If the difference is less than the current minimum difference, then update the minimum difference.\n    If the difference is greater than the current minimum difference, then discard the current minimum difference and start over.\n    '''\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference as the difference between the first two elements\n    min_diff = abs(arr[1] - arr[0])\n\n    # Compare adjacent elements and update minimum difference\n    for i in range(1, n-1):\n        diff = abs(arr[i] - arr[i+1])\n        if diff < min_diff:\n            min_diff = diff\n\n    # Return the minimum difference\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_min_diff(arr, n):\n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n\n    # Traverse through all elements of the array\n    for i in range(n):\n        # Initialize difference as infinity\n        diff = float('inf')\n\n        # Traverse through all elements of the array except current element\n        for j in range(n):\n            if i == j:\n                continue\n            diff = min(diff, arr[j] - arr[i])\n\n        # Update minimum difference if current difference is smaller than minimum difference\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_min_diff(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n\n    # Sorting the array in ascending order\n    arr.sort()\n\n    # Initialize two variables to store the minimum and maximum difference\n    min_diff = arr[1] - arr[0]\n    max_diff = arr[-1] - arr[-2]\n\n    # Loop through the array and calculate the difference between adjacent elements\n    for i in range(1, n-1):\n        diff = arr[i+1] - arr[i]\n        min_diff = min(min_diff, diff)\n        max_diff = max(max_diff, diff)\n\n    # Return the minimum and maximum difference\n    return min_diff, max_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize minimum difference as infinity\n    min_diff = float('inf')\n    \n    # Iterate over the array\n    for i in range(n):\n        # Calculate the difference between current element and previous element\n        diff = abs(arr[i] - arr[i - 1])\n        \n        # Update the minimum difference if the current difference is less than the minimum\n        if diff < min_diff:\n            min_diff = diff\n            \n    return min_diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    This function takes in an array and its length as input and returns the minimum difference between any two elements in the array.\n    \"\"\"\n    if n <= 1:\n        return 0\n\n    # Sort the array\n    arr.sort()\n\n    # Initialize the minimum difference\n    min_diff = float('inf')\n\n    # Traverse through the sorted array\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_min_diff(arr, n):\n    arr.sort()\n    diff = float('inf')\n    for i in range(n-1):\n        diff = min(diff, arr[i+1]-arr[i])\n    return diff"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_min_diff(arr, n):\n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array.\n    \"\"\"\n    # sorting the array in ascending order\n    arr.sort()\n\n    # initializing minimum difference and its index\n    min_diff = arr[1] - arr[0]\n    min_index = 0\n\n    # iterating through the array from the second element to the last element\n    for i in range(1, n):\n        # checking if the difference between current element and next element is smaller than minimum difference\n        if abs(arr[i] - arr[i - 1]) < min_diff:\n            # updating minimum difference and its index\n            min_diff = abs(arr[i] - arr[i - 1])\n            min_index = i\n\n    # returning minimum difference and its index\n    return min_diff, min_index"
    },
    {
        "number": 763,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_min_diff(arr, n):\n    '''\n    This function finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n    '''\n    if n < 2:\n        return 0\n\n    # Find the maximum and minimum values in the array\n    max_val = max(arr)\n    min_val = min(arr)\n\n    # Calculate the difference between the maximum and minimum values\n    diff = max_val - min_val\n\n    # Initialize the minimum difference variable\n    min_diff = diff\n\n    # Iterate through the array and compare each element with all other elements\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the absolute difference between the two elements\n            diff = abs(arr[i] - arr[j])\n\n            # Update the minimum difference if the current difference is smaller\n            if diff < min_diff:\n                min_diff = diff\n\n    return min_diff"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 764,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n    \"\"\"\n    count = 0\n    for char in str:\n        if char.isdigit():\n            count += 1\n    return count"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    count = 0\n    curr_num = 1\n    prev_num = 0\n\n    while count < n:\n        count += 1\n        next_num = curr_num + prev_num\n        if next_num % 2 == 0:\n            curr_num = next_num\n            prev_num = prev_num + 1\n        else:\n            curr_num = prev_num\n            prev_num = next_num\n\n    return curr_num\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number.\n\n    geeksforgeeks.org/n-th-polite-number/\n    '''\n    if not isinstance(n, int) or n < 1:\n        return False\n\n    nth_polite = (2**(n-1)) * math.cos(math.pi / (2*n+1)) + n\n    print(nth_polite)\n    return nth_polite\n\nif __name__ == '__main__':\n    nth = int(input(\"Enter an integer: \"))\n    print(is_polite(nth))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    This function finds the nth polite number using the fact that the nth polite number is the square of the sum of the squares of the first n natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    return int(math.sqrt(sum_of_squares))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Returns True if n is a polite number, False otherwise.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Returns True if num is a palindrome, False otherwise.\n        \"\"\"\n        return str(num) == str(num)[::-1]\n\n    def count_inversions(arr, low, high):\n        \"\"\"\n        Returns the number of inversions in the array between the indices low and high.\n        \"\"\"\n        count = 0\n        i = low\n        j = high\n        pivot = arr[low]\n\n        while i < j:\n            while i < j and arr[j] >= pivot:\n                j -= 1\n            arr[i] = arr[j]\n\n            while i < j and arr[i] <= pivot:\n                i += 1\n            arr[j] = arr[i]\n\n            if i < j:\n                count += j - i\n\n        arr[low] = pivot\n        return count\n\n    def get_nth_polite(n):\n        \"\"\"\n        Returns the nth polite number.\n        \"\"\"\n        arr = []\n        num = 1\n        while len(arr) < n:\n            arr.append(num)\n            num += 1\n\n        while count_inversions(arr, 0, len(arr) - 1) % 2 == 1:\n            arr[0], arr[len(arr) - 1] = arr[len(arr) - 1], arr[0]\n\n        return arr[n - 1]\n\n    if n == 1:\n        return True\n\n    if n == 2:\n        return True\n\n    if n == 3:\n        return 11\n\n    if n == 4:\n        return 12\n\n    if n == 5:\n        return 13\n\n    if n == 6:\n        return 21\n\n    if n == 7:\n        return 22\n\n    if n == 8:\n        return 23\n\n    if n == 9:\n        return 31\n\n    if n == 10:\n        return 32\n\n    if is_palindrome(n):\n        return True\n\n    if is_palindrome(n - 1):\n        return True\n\n    if is_palindrome(n + 1):\n        return True\n\n    nth_polite = get_nth_polite(n)\n\n    if nth_polite % 2 == 0:\n        return nth_polite + 1\n\n    return nth_polite\n"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth polite number.\n\n    n is the position of the polite number in the sequence.\n    \"\"\"\n\n    def nth_polite(n, current_num=1):\n        \"\"\"\n        This recursive function calculates the nth polite number by iteratively\n        adding the previous polite number to the current polite number. The\n        first polite number is always 1.\n\n        n is the position of the polite number in the sequence.\n        current_num is the current polite number being calculated.\n        \"\"\"\n\n        # Base case: if n is 0, return 1\n        if n == 0:\n            return 1\n\n        # Base case: if n is 1, return 2\n        if n == 1:\n            return 2\n\n        # Recursive case: calculate the nth polite number by adding the\n        # previous polite number to the current polite number\n        next_num = current_num + nth_polite(n-1)\n\n        # If the next polite number is already 2, then the nth polite number\n        # is also 2.\n        if next_num == 2:\n            return 2\n\n        # Otherwise, return the next polite number\n        return next_num\n\n    # Calculate the nth polite number\n    nth_polite_num = nth_polite(n)\n\n    # Return the nth polite number\n    return nth_polite_num"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math \n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_prime(n):\n        if n == 1:\n            return 2\n        primes = [2]\n        while len(primes) < n:\n            prime = None\n            for i in range(3, int(math.sqrt(max(primes)+1))+1, 2):\n                if is_prime(i):\n                    prime = i\n                    break\n            if prime is None:\n                raise ValueError(\"nth prime not found\")\n            primes.append(prime)\n        return primes[-1]\n\n    def is_nth_prime(n, prime):\n        if n == 1:\n            return prime == 2\n        if prime == 2:\n            return False\n        for i in range(3, int(math.sqrt(prime))+1, 2):\n            if prime % i == 0:\n                return is_nth_prime(n, i)\n        return True\n\n    polite = nth_prime(n)\n    return is_nth_prime(n, polite)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef is_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def nth_polite_number(n):\n        i = 1\n        while not is_prime(i):\n            i += 1\n        j = 0\n        while j < n:\n            j += 1\n        while not is_prime(j):\n            j += 1\n        while not is_prime(i + j):\n            i += 1\n        return i + j - n\n\n    return nth_polite_number(n)"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef is_polite(n):\n    \"\"\"\n    Write a function to find nth polite number.\n    \"\"\"\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 3\n    elif n % 2 == 0:\n        return is_polite(n//2) + 1\n    else:\n        return is_polite((3*n+1)//2) + 2"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num))+1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_divisible(num, divisor):\n        return num % divisor == 0\n\n    def is_divisible_by_2(num):\n        return num % 2 == 0\n\n    polite_number = 0\n    primes = []\n    for i in range(1, n+1):\n        if is_prime(i):\n            primes.append(i)\n\n    for prime in primes:\n        if is_divisible_by_2(prime):\n            continue\n        for j in range(1, n+1):\n            if is_divisible_by_2(j) and is_divisible(j, prime):\n                if is_prime(j):\n                    polite_number = max(polite_number, j)\n\n    return polite_number\n\nn = int(input(\"Enter the value of n: \"))\nprint(\"The\", n, \"th polite number is:\", is_polite(n))"
    },
    {
        "number": 765,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math\n\ndef is_polite(n):\n    if n < 1:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return 2 * is_polite(n - 1) + 1\n"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append([l1[i], l1[i+1]])\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    pairs = []\n    for i in range(n):\n        if i == n-1:\n            break\n        pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def pair_wise(lst):\n    '''\n    This function takes a list and returns a list of all pairs of consecutive items in the list.\n    '''\n    result = []\n    for i in range(len(lst)-1):\n        result.append((lst[i],lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    \"\"\"\n    result = []\n    for i in range(len(l1) - 1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i+1]) for i in range(len(l1)-1)]"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def pair_wise(lst):\n    '''\n    This function returns a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(lst) - 1):\n        result.append((lst[i], lst[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    result = []\n    for i in range(len(l1)-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # initialize an empty list to store the pairs\n    pairs = []\n\n    # iterate over the items in the list\n    for i in range(len(l1) - 1):\n        # add the pair to the list of pairs\n        pairs.append((l1[i], l1[i+1]))\n\n    return pairs"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    n = len(l1)\n    result = []\n    for i in range(n-1):\n        result.append((l1[i], l1[i+1]))\n    return result"
    },
    {
        "number": 766,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) < 2:\n        return []\n    pairs = []\n    for i in range(len(l1)):\n        if i+1 < len(l1):\n            pairs.append((l1[i], l1[i+1]))\n    return pairs"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to'sum'. The function gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    li3 = []\n    for elem in li1:\n        if elem not in li2:\n            li3.append(elem)\n    return li3"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def Diff(li1, li2):\n    \"\"\"\n    Write a python function to get the difference between two lists.\n    \"\"\"\n    diff_list = []\n    for i in li1:\n        if i not in li2:\n            diff_list.append(i)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = [x for x in li1 if x not in li2]\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    set1 = set(li1)\n    set2 = set(li2)\n    return set1.symmetric_difference(set2)"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes in two lists and returns the difference between them.\n    '''\n    diff = list(set(li1) - set(li2))\n    return diff"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def Diff(li1, li2):\n    '''\n    This function takes two lists as input and returns the difference between them.\n    '''\n    diff_list = []\n    for item in li1:\n        if item not in li2:\n            diff_list.append(item)\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def Diff(li1, li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # creating an empty list to store the difference\n    diff_list = []\n    # iterating through each element of the first list\n    for i in range(len(li1)):\n        # checking if the element exists in the second list\n        if li1[i] in li2:\n            # if it does, then it's not present in the diff list\n            continue\n        else:\n            # if it doesn't, then it's present in the diff list\n            diff_list.append(li1[i])\n    # returning the difference list\n    return diff_list"
    },
    {
        "number": 769,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    diff = []\n    for item in li1:\n        if item not in li2:\n            diff.append(item)\n    return diff"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    if n < 1:\n        return \"Invalid input. Please enter a positive integer.\"\n    elif n == 1:\n        return 1\n    else:\n        # initialize variables\n        sum_of_powers = 0\n        num = 3\n        \n        # loop through the odd numbers\n        while num <= n:\n            # find the fourth power of the odd number\n            fourth_power = num ** 4\n            # add it to the sum of powers\n            sum_of_powers += fourth_power\n            # increment the odd number\n            num += 2\n        \n        # return the sum of powers\n        return sum_of_powers"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum_of_fourth_powers = 0\n    for i in range(1, n+1, 2):\n        sum_of_fourth_powers += i ** 4\n    return sum_of_fourth_powers\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i ** 4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, n+1, 2):\n        odd_sum += i**4\n    return odd_sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            sum += i ** 4\n        i += 1\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # Initialize the sum variable to 0\n    sum = 0\n    # Loop through the first n odd natural numbers\n    for i in range(1, n+1, 2):\n        # Add the fourth power of i to the sum\n        sum += i**4\n    # Return the sum\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of first n odd natural numbers.\n    \"\"\"\n\n    sum = 0\n    i = 1\n\n    while i <= n:\n        if i % 2 == 1:\n            sum += i ** 4\n        i += 1\n\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**4\n    return sum"
    },
    {
        "number": 770,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    # Initialize sum variable to 0\n    sum_of_fourth_power = 0\n    \n    # Loop through first n odd natural numbers\n    for i in range(1, n+1):\n        # Check if the current number is odd\n        if i % 2 == 1:\n            # Calculate the fourth power of the current number and add it to the sum variable\n            sum_of_fourth_power += i ** 4\n    \n    # Return the sum of fourth power of odd natural numbers\n    return sum_of_fourth_power"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i in ['(', '{', '[']:\n            stack.append(i)\n        elif i in [')', '}', ']']:\n            if not stack:\n                return False\n            top = stack.pop()\n            if i in ['(', '{', '[']:\n                if top in ['(', '{', '[']:\n                    continue\n                else:\n                    return False\n            elif i in [')', '}', ']']:\n                if top in [')', '}', ']']:\n                    continue\n                else:\n                    return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            if stack.pop()!= '(':\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = {')', '}', ']'}\n\n    for bracket in exp:\n        if bracket in opening_brackets:\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            if stack.pop()!= opening_brackets[bracket]:\n                return False\n\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    \"\"\"\n    stack = deque()\n    for char in exp:\n        if char in \"({\":\n            stack.append(char)\n        elif char in \"})\":\n            if not stack:\n                return False\n            elif stack[-1] == \"(\":\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for i in exp:\n        if i == '(' or i == '[' or i == '{':\n            stack.append(i)\n        elif i == ')':\n            if not stack:\n                return False\n            if stack[-1] == '(':\n                stack.pop()\n            else:\n                return False\n        elif i == ']':\n            if not stack:\n                return False\n            if stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        elif i == '}':\n            if not stack:\n                return False\n            if stack[-1] == '{':\n                stack.pop()\n            else:\n                return False\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            else:\n                stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(i)\n        elif exp[i] == ')':\n            if not stack:\n                return \"Not Balanced\"\n            j = stack.pop()\n            if j > i:\n                return \"Not Balanced\"\n\n    if stack:\n        return \"Not Balanced\"\n    else:\n        return \"Balanced\""
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n\n    # create a stack to keep track of opening parentheses\n    stack = deque()\n\n    # traverse the expression from right to left\n    for i in range(len(exp)-1, -1, -1):\n\n        # if the current character is an opening parenthesis, push it into the stack\n        if exp[i] == '(':\n            stack.appendleft(i)\n\n        # if the current character is a closing parenthesis, pop the top element from the stack\n        elif exp[i] == ')':\n\n            # if the stack is empty, the expression is not balanced\n            if not stack:\n                return False\n\n            # if the current closing parenthesis is the last opening parenthesis, pop the top element\n            elif stack[0] == len(exp)-1-i:\n                stack.popleft()\n\n            # if the current closing parenthesis is not the last opening parenthesis, the expression is not balanced\n            else:\n                return False\n\n    # if the stack is not empty, the expression is not balanced\n    if stack:\n        return False\n\n    # if the loop completes without returning False, the expression is balanced\n    return True"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    stack = deque()\n    for char in exp:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"
    },
    {
        "number": 771,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from collections import deque\n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    opening_brackets = {'(', '[', '{'}\n    closing_brackets = {')', ']', '}'}\n    \n    for char in exp:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n            if char!= top_bracket:\n                return False\n    \n    if stack:\n        return False\n    else:\n        return True"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create a new list to store the non-K-length words\n    new_words = []\n    # Loop through each word in the original list\n    for word in words:\n        # Check if the word has K or less characters\n        if len(word) <= K:\n            # If it does, add it to the new list\n            new_words.append(word)\n    # Join the new list of words into a string and return it\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    filtered_words = []\n    \n    for word in words:\n        if len(word)!= K:\n            filtered_words.append(word)\n            \n    return''.join(filtered_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # convert the string to a list of words\n    words = test_str.split()\n    # loop through each word and remove any words with k length\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    # join the new words into a string and return the result\n    return''.join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.lower()\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = []\n    for word in words:\n        if len(word)!= K:\n            result.append(word)\n    return''.join(result)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    for i in range(len(words)):\n        if len(words[i]) == K:\n            words.pop(i)\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # split the string into words\n    words = test_str.split()\n\n    # create a list to store words with k length\n    k_length_words = []\n\n    # iterate through each word in the list\n    for word in words:\n        # if the length of the word is equal to K\n        if len(word) == K:\n            # add the word to the list\n            k_length_words.append(word)\n\n    # remove the words with k length from the list\n    words = [word for word in words if len(word)!= K]\n\n    # join the words back into a string and return the result\n    return''.join(words)"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Split the string into words\n    words = test_str.split()\n    # Create a list to store the words with length K\n    result = []\n    # Loop through each word\n    for word in words:\n        # Check if the length of the word is not equal to K\n        if len(word)!= K:\n            # If it's not, add it to the result list\n            result.append(word)\n    # Join the words with spaces\n    final_str =''.join(result)\n    # Return the final string\n    return final_str"
    },
    {
        "number": 772,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    new_words = []\n    for word in words:\n        if len(word)!= K:\n            new_words.append(word)\n    return \" \".join(new_words)"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        for match in matches:\n            print(f\"Occurance: {match[0]}, Position: {match.start()}\")\n        return matches\n    else:\n        print(\"No match found\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern,text)\n    if matches:\n        for match in matches:\n            print(f\"Match found at position: {text.index(match)}\")\n            print(\"Substring:\",match)\n        return None\n    else:\n        print(\"No matches found.\")\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    \"\"\"\n    Write a function to find the occurrence and position of the substrings within a string.\n    Return None if there is no match.\n    \"\"\"\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if matches:\n        return matches[0], text.find(matches[0])\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match:\n        return match.group(),match.start(),match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    matches = re.findall(pattern, text)\n    if not matches:\n        return None\n    for match in matches:\n        position = text.find(match)\n        print(\"The substring '{}' was found at position {}\".format(match, position))"
    },
    {
        "number": 773,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef occurance_substring(text, pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    else:\n        return None"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        if len(set(nums[i:])) % 2 == 1:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0: # if the index is even\n            if nums[i] % 2 == 0: # if the number at the index is even\n                print(\"Index {} contains even number.\".format(i))\n                break\n    else:\n        print(\"All even indices are empty.\")"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 1: # check if i is odd\n            if len(set(nums[i:])) % 2 == 1: # check if the odd numbers in the odd index are odd\n                odd_count += 1 # increment the count of odd positions\n                if odd_count == len(nums) // 2: # check if all odd positions are even\n                    return True\n    return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1: # checking if index is odd\n            if nums[i] % 2 == 0: # checking if number is even\n                return False # if yes, return False\n    return True # if no odd index found, return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_count = 0\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                odd_count += 1\n            else:\n                return False\n        else:\n            if nums[i] % 2 == 0:\n                return False\n    if odd_count == len(nums):\n        return True\n    else:\n        return False"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:  # only check odd indices\n            if sum(nums[i:i+2]) % 2 == 0:  # check if odd numbers are present\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2!= 0:  # check if the current index is odd\n            if len([num for num in nums[i:] if num % 2 == 0]) % 2!= 0:  # check if the odd numbers at odd indices are present in the list\n                return False\n    return True"
    },
    {
        "number": 775,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2!= 0:\n                count += 1\n                if count > 1:\n                    return False\n    return True"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(test_str) - 1):\n        if (test_str[i] in vowels and test_str[i+1] in vowels) or (test_str[i] in vowels and test_str[i+1] not in vowels):\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    \n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n            \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    vowels = set('aeiouAEIOU')\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiouAEIOU\"\n    neighbors = set()\n    \n    # Find all vowels in the string\n    for char in test_str:\n        if char in vowels:\n            neighbors.add(char)\n    \n    # Count the neighbors with vowels\n    count = 0\n    for neighbor in neighbors:\n        count += len(re.findall(f\"(?={neighbor})\", test_str))\n    \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] not in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    count = 0\n    \n    for i in range(len(test_str)):\n        if i > 0:\n            if (test_str[i] in vowels) and (test_str[i-1] not in vowels):\n                count += 1\n                \n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    \"\"\"\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(test_str) - 2):\n        if test_str[i] in vowels and test_str[i+1] in vowels and test_str[i+2] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    # Initialize a set to keep track of the elements that have been seen so far\n    seen = set()\n    # Initialize a sum variable to store the sum of non-repeated elements\n    total_sum = 0\n    # Loop through the array and add each element to the set of seen elements\n    for num in arr:\n        seen.add(num)\n    # Loop through the array again and add each element to the sum variable if it hasn't been seen before\n    for num in arr:\n        if num not in seen:\n            total_sum += num\n    # Return the total sum of non-repeated elements\n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def find_sum(arr):\n    \"\"\"\n    This function takes a list of integers as input and returns the sum of the non-repeated elements in the list.\n    \"\"\"\n    # create a set to store unique elements\n    unique_set = set(arr)\n    # convert the set to a list and sort it in ascending order\n    sorted_list = sorted(list(unique_set))\n    # initialize the sum to 0\n    sum = 0\n    # loop through the sorted list and add each element to the sum\n    for i in range(len(sorted_list)):\n        sum += sorted_list[i]\n    # return the sum\n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # create a dictionary to store the elements and their indices\n    index_dict = {}\n    # initialize the sum to 0\n    sum_of_non_repeated = 0\n    # loop through the elements of the list\n    for i, num in enumerate(arr):\n        # check if the element is already in the dictionary\n        if num in index_dict:\n            # if it is, check if the index of the current element is greater than the index of the element in the dictionary\n            if i > index_dict[num]:\n                # if it is, update the sum_of_non_repeated to include the current element\n                sum_of_non_repeated += num\n        else:\n            # if it is not, add it to the dictionary with its index as its value\n            index_dict[num] = i\n    # return the sum_of_non_repeated\n    return sum_of_non_repeated\n"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements in the array\n    unique_elements = set(arr)\n    # Initialize a variable to store the sum of non-repeated elements\n    sum_of_non_repeated_elements = 0\n    \n    # Iterate over the unique elements in the set and add their value to the sum_of_non_repeated_elements\n    for element in unique_elements:\n        sum_of_non_repeated_elements += element\n    \n    return sum_of_non_repeated_elements"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def find_sum(arr):\n    # create a dictionary to store the count of each element in the list\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    \n    # initialize the sum variable to 0\n    total_sum = 0\n    \n    # iterate through the list again to find the sum of non-repeated elements\n    for num in arr:\n        if count_dict[num] == 1:\n            total_sum += num\n            \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def find_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of non-repeated elements in a given list.\n    \"\"\"\n    # Remove duplicates from the list using a set\n    unique_list = list(set(arr))\n    # Initialize the sum variable\n    sum_unique = 0\n    # Loop through the unique list and add up all the elements\n    for num in unique_list:\n        sum_unique += num\n    # Return the sum of the unique list\n    return sum_unique"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Remove duplicates from the list\n    unique_arr = list(set(arr))\n\n    # Initialize a variable to store the sum of non-repeated elements\n    non_repeated_sum = 0\n\n    # Iterate over each element in the list\n    for i in unique_arr: \n        # Add the element to the sum if it is not already present\n        if i not in arr: \n            non_repeated_sum += i\n\n    # Return the sum of non-repeated elements\n    return non_repeated_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set of elements from the given list\n    unique_elements = set(arr)\n    \n    # Calculate the sum of the unique elements\n    total_sum = sum(unique_elements)\n    \n    return total_sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Create a set to store unique elements\n    unique_elements = set(arr)\n    \n    # Initialize a variable to store the sum of non-repeated elements\n    sum = 0\n    \n    # Loop through the unique elements and add their values to the sum\n    for element in unique_elements:\n        sum += element\n    \n    return sum"
    },
    {
        "number": 777,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    unique_elements = list(set(arr))\n    total_sum = 0\n    for element in unique_elements:\n        total_sum += arr.count(element)\n    return total_sum"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    grouped_list = {}\n    for item in list1:\n        if item in grouped_list:\n            grouped_list[item].append(item)\n        else:\n            grouped_list[item] = [item]\n    result = []\n    for key, group in groupby(sorted(grouped_list.items())):\n        result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        if key not in result:\n            result.append(list(group))\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1) if key == None]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack_list = []\n    for key, group in groupby(list1):\n        if len(list(group)) == 1:\n            continue\n        else:\n            pack_list.append(list(group))\n    return pack_list"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n\n    result = []\n    for item in list1:\n        group = list(groupby([item]))\n        if len(group) > 1:\n            result.append(list(group[0][1]))\n\n    return result"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # convert the list into a set to remove duplicates\n    list1 = list(set(list1))\n    # group the list elements by the same value\n    grouped_list = [list(g) for k, g in groupby(list1)]\n    # create an empty list to store the sublists\n    sublists = []\n    # loop through each sublist and add it to the sublists list if it contains at least two elements\n    for sublist in grouped_list:\n        if len(sublist) >= 2:\n            sublists.append(sublist)\n    return sublists"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    This function takes a list of elements and returns a list of sublists\n    containing consecutive duplicates of the input list elements.\n    \"\"\"\n    return [list(g) for k, g in groupby(lst) if k == lst[0]]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(group) for group in groupby(list1)]"
    },
    {
        "number": 778,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import groupby\n\ndef pack_consecutive_duplicates(lst):\n    \"\"\"\n    Given a list of elements, this function returns a list of sublists where each sublist contains all the consecutive duplicates of the list.\n\n    For example:\n    >>> pack_consecutive_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 5])\n    [[1, 2, 2], [3, 3, 3], [4, 4], [5]]\n    \"\"\"\n    # group the list by consecutive duplicates\n    grouped_duplicates = groupby(lst, key=lambda x: x)\n    # get the first element of each consecutive duplicates group\n    grouped_duplicates = [(list(group)[0], list(group)) for key, group in grouped_duplicates]\n    # create sublists from consecutive duplicates groups\n    packed_sublists = [list(sublist) for sublist, _ in grouped_duplicates]\n    return packed_sublists"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    # Create a dictionary to store the sublist occurrences\n    sublist_dict = {}\n    \n    # Loop through the lists in the input list\n    for sublist in list1:\n        \n        # Convert the sublist to a tuple and check if it is already in the dictionary\n        if tuple(sublist) in sublist_dict:\n            sublist_dict[tuple(sublist)] += 1\n        else:\n            sublist_dict[tuple(sublist)] = 1\n    \n    # Return the dictionary of sublist occurrences\n    return sublist_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Create an empty dictionary to store the count of unique sublists\n    sublists_count = {}\n\n    # Iterate over each element in the list1\n    for i in range(len(list1)):\n        # Check if the element is a list\n        if isinstance(list1[i], list):\n            # Convert the list to a tuple and add it to the dictionary\n            sublists_count[(tuple(list1[i]),)] = sublists_count.get((tuple(list1[i]),), 0) + 1\n\n    return sublists_count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n\n    # Initialize an empty dictionary\n    count_dict = {}\n\n    # Loop through each item in the list\n    for item in list1:\n        # Convert the item to a tuple and check if it exists in the dictionary\n        if tuple(item) in count_dict:\n            # If it does, increment the count for that tuple in the dictionary\n            count_dict[tuple(item)] += 1\n        else:\n            # If it doesn't, add the tuple to the dictionary with a count of 1\n            count_dict[tuple(item)] = 1\n\n    # Return the dictionary of counts\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Count the number of lists within a list.\n\n    Parameters:\n    lst: list\n        A list of lists.\n\n    Returns:\n    dict:\n        A dictionary where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    count = {}\n    for sublist in lst:\n        sublist = tuple(sublist)\n        if sublist in count:\n            count[sublist] += 1\n        else:\n            count[sublist] = 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for item in list1:\n        sublist = tuple(item)\n        if sublist in count_dict:\n            count_dict[sublist] += 1\n        else:\n            count_dict[sublist] = 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # create an empty dictionary to store the counts of sublists\n    counts = {}\n    # iterate over the sublists in the list\n    for sublist in list1:\n        # check if the sublist is already in the dictionary\n        if sublist in counts:\n            # increment its count by 1\n            counts[sublist] += 1\n        else:\n            # if not, add it to the dictionary with a count of 1\n            counts[sublist] = 1\n    # return the dictionary of counts\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counts = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple not in counts:\n            counts[sublist_tuple] = 0\n        counts[sublist_tuple] += 1\n    return counts"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    for sublist in list1:\n        if sublist not in count_dict:\n            count_dict[sublist] = 1\n        else:\n            count_dict[sublist] += 1\n    return count_dict"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count the number of lists within a list. \n    The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # create an empty dictionary to store the count of sublists\n    count = {}\n    # loop through the list and check if each sublist is already in the dictionary\n    for i in range(len(lst)):\n        sublist = lst[i]\n        if sublist in count:\n            # increment the count of the sublist in the dictionary\n            count[sublist] += 1\n        else:\n            # add the sublist to the dictionary with a count of 1\n            count[sublist] = 1\n    # create a new list from the keys of the dictionary and return it\n    return list(count.keys())"
    },
    {
        "number": 779,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    \"\"\"\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    \"\"\"\n    # Create an empty dictionary to store the count of occurrences of each list as a tuple\n    sublist_counts = {}\n\n    # Loop through each element of the list\n    for element in list1:\n        # If the element is a list, convert it to a tuple and add it to the dictionary\n        if isinstance(element, list):\n            sublist_counts[tuple(element)] = sublist_counts.get(tuple(element), 0) + 1\n\n    return sublist_counts"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    This function takes a list of tuples as input and returns the combinations of sums with tuples in the given list.\n    '''\n    all_combinations = list(combinations(test_list, r=2)) # r=2 means to take all pairs of elements from the list\n    all_combinations = [sum(combination) for combination in all_combinations] # calculating the sum of each pair of elements in the list\n    all_combinations = list(set(all_combinations)) # removing duplicates\n    all_combinations = sorted(all_combinations) # sorting the list in ascending order\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    \"\"\"\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    \"\"\"\n    # Find the sum of each tuple in the list\n    sum_list = [sum(t) for t in test_list]\n\n    # Find all possible pairs of sums\n    pairs = list(combinations(sum_list, 2))\n\n    # Check if the tuples are valid combinations\n    valid_combinations = []\n    for pair in pairs:\n        if pair[0] == 0 and pair[1] == 0:\n            continue\n        for i in range(len(test_list)):\n            for j in range(len(test_list)):\n                if i == j:\n                    continue\n                if pair[0] == sum_list[i] and pair[1] == sum_list[j]:\n                    valid_combinations.append((test_list[i], test_list[j]))\n                    break\n                elif pair[0] == sum_list[j] and pair[1] == sum_list[i]:\n                    valid_combinations.append((test_list[j], test_list[i]))\n                    break\n    return valid_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total_sum = sum(test_list)\n    combs = []\n    for i in range(1, total_sum+1):\n        comb = combinations(test_list, i)\n        combs.extend(list(comb))\n    return combs"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    total = sum(test_list)\n    all_combinations = []\n    for i in range(1, total+1):\n        combination = set(combinations(test_list, i))\n        all_combinations.extend(list(combination))\n    return all_combinations"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. \n    https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples with unique elements\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n\n    # loop through the set of tuples and find the combinations of sums\n    combinations_of_sums = []\n    for i in range(1, len(unique_tuples) + 1):\n        for combination in combinations(unique_tuples, i):\n            current_sum = sum(combination)\n            combinations_of_sums.append(current_sum)\n\n    # return the list of unique combinations of sums\n    return list(set(combinations_of_sums))"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # create a set of tuples to store the unique tuples in the list\n    unique_tuples = set(test_list)\n\n    # sort the unique tuples in ascending order\n    sorted_tuples = sorted(unique_tuples)\n\n    # initialize a set to store the combinations\n    combinations_set = set()\n\n    # iterate through all possible sums from the unique tuples\n    for i in range(len(sorted_tuples)):\n        for j in range(i+1, len(sorted_tuples)):\n            # check if the sum of the current tuples is less than or equal to the target sum\n            if sorted_tuples[i][0] + sorted_tuples[j][0] <= target_sum:\n                # add the current combination to the set of combinations\n                combinations_set.add(sorted_tuples[i], sorted_tuples[j])\n\n    # convert the set of combinations back to a list and return it\n    return list(combinations_set)"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list.\n    '''\n    comb = combinations(test_list, r=2)\n    result = []\n    for c in comb:\n        if sum(c) in test_list:\n            result.append(tuple(c))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n\n    def find_combinations_helper(arr, target, index, combinations_list):\n        if target == 0:\n            combinations_list.append(tuple(arr[:index]))\n        elif index < len(arr):\n            find_combinations_helper(arr, target, index+1, combinations_list)\n            find_combinations_helper(arr, target-arr[index], index, combinations_list)\n\n    combinations_list = []\n    for i in range(len(test_list)):\n        find_combinations_helper(test_list, test_list[i], 0, combinations_list)\n\n    return combinations_list"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "from itertools import combinations \n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n = len(test_list)\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(test_list[i:j]) in test_list:\n                result.append((i,j))\n    return result"
    },
    {
        "number": 780,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "from itertools import combinations\n\ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # Creating a set to store unique tuples in the given list\n    unique_tuples = set(tuple(sorted(x)) for x in test_list)\n    # Finding all possible pairs of unique tuples\n    pairs = combinations(unique_tuples, 2)\n    # Finding all possible sums of the tuples from the pairs\n    sums = set(sum(pair) for pair in pairs)\n    # Filtering the sums from the unique_tuples list that have a sum of 0\n    zero_sums = [tup for tup in unique_tuples if sum(tup) == 0]\n    # Filtering the remaining unique_tuples from the unique_tuples list that have a sum of 0\n    non_zero_sums = [tup for tup in unique_tuples if sum(tup)!= 0]\n    # Generating a list of tuples where each tuple contains a sum and the corresponding unique tuple\n    result_list = [(x, y) for x in sums for y in non_zero_sums if sum(x) == y and x not in zero_sums]\n    return result_list"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1 and count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if count % 2 == 0:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    return count % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n            if n / i!= i:\n                count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        print(\"The count of divisors is even\")\n    else:\n        print(\"The count of divisors is odd\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if count == 2:\n                return False\n    return True"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    def count_div(num):\n        div = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0:\n                div.append(i)\n                if i!= num // i:\n                    div.append(num // i)\n        return div\n\n    div = count_div(n)\n    count = len(div)\n    if count % 2 == 0:\n        print(\"The count of divisors is even.\")\n    else:\n        print(\"The count of divisors is odd.\")"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = set()\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.add(i)\n            if n // i!= i:\n                divisors.add(n // i)\n    return len(divisors) % 2 == 0"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import math\n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    def check_even(num):\n        if num == 2:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            return True\n    \n    def count_divisors_helper(num):\n        divisors = []\n        for i in range(1, int(math.sqrt(num))+1):\n            if num % i == 0 and check_even(i):\n                divisors.append(i)\n                if i!= num // i:\n                    divisors.append(num // i)\n        return divisors\n    \n    count_divisors_list = count_divisors_helper(n)\n    count_divisors_list.sort()\n    count_divisors_list.pop()\n    count_divisors_list.reverse()\n    count_divisors_list_length = len(count_divisors_list)\n    \n    if count_divisors_list_length % 2 == 0:\n        return \"The count of divisors is even.\"\n    else:\n        return \"The count of divisors is odd.\""
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import math\n\ndef count_divisors(n):\n    \"\"\"\n    This function takes an integer n and returns True if the count of its divisors is even, else False.\n    \"\"\"\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if count == 0:\n        count = 1\n    else:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 781,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import math \n\ndef count_divisors(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            count += 1\n    if n > 1:\n        count += 1\n    if count % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    odd_sum = 0\n    for i in range(n-2):\n        if i < n-3:\n            odd_sum += arr[i] + arr[i+1] + arr[i+2]\n        else:\n            odd_sum += arr[i] + arr[i+1]\n    return odd_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Initialize sum variable\n    sum = 0\n    \n    # Iterate over all possible subarrays of length 1 to n\n    for i in range(len(arr)):\n        # If current subarray length is odd, add the sum of all the elements\n        if len(arr[i]) % 2!= 0:\n            for j in range(len(arr[i])):\n                sum += arr[i][j]\n    \n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    subsum = 0\n    for i in range(n):\n        for j in range(i, n):\n            subsum += sum(arr[i:j+1])\n    return subsum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if (j-i+1) % 2 == 1:\n                sub_arr = arr[i:j+1]\n                sum += sum(sub_arr)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum_odd_length_subarrays = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if j - i + 1 % 2 == 1:\n                sum_odd_length_subarrays += sum(arr[i:j+1])\n    return sum_odd_length_subarrays"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i + 1 % 2 == 1:\n                subarray = arr[i:j+1]\n                sum += sum(subarray)\n    return sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarr = arr[i:j]\n            subarr_sum = sum(subarr)\n            if j - i == 1:\n                result += subarr_sum\n    return result"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total_sum = 0\n    max_len = 0\n    odd_sum = 0\n    \n    for i in range(n):\n        if i == 0 or i == n-1:\n            max_len = 1\n        elif arr[i] == arr[i-1]:\n            max_len = 1\n        else:\n            j = i-1\n            while j >= 0 and arr[j] == arr[i-1]:\n                j -= 1\n            max_len = i-j\n        odd_sum = 0\n        for j in range(max_len):\n            odd_sum += arr[i+j]\n        total_sum += odd_sum\n    \n    return total_sum"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    total = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            total += sum(arr[i:j+1])\n\n    return total"
    },
    {
        "number": 782,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    n = len(arr)\n    sum = 0\n    temp = 0\n\n    # Loop through all subarrays of length odd\n    for i in range(1, n, 2):\n        temp += arr[i]\n        if i == n-1:\n            sum += temp\n        else:\n            sum += temp - arr[i+1]\n\n    return sum"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n    \"\"\"\n    # Convert r, g, b to floats\n    r = float(r) / 255.0\n    g = float(g) / 255.0\n    b = float(b) / 255.0\n    \n    # Convert r, g, b to integers\n    r_i = int(r * 255.0)\n    g_i = int(g * 255.0)\n    b_i = int(b * 255.0)\n    \n    # Calculate maximum and minimum color values\n    max_color = max(r_i, g_i, b_i)\n    min_color = min(r_i, g_i, b_i)\n    \n    # Calculate delta color\n    delta_color = max_color - min_color\n    \n    # Calculate hue\n    if max_color == r_i:\n        hue = (60.0 * ((g_i - b_i) / delta_color)) % 360.0\n    elif max_color == g_i:\n        hue = (60.0 * ((b_i - r_i) / delta_color) + 120.0) % 360.0\n    else:\n        hue = (60.0 * ((r_i - g_i) / delta_color) + 240.0) % 360.0\n    \n    # Calculate saturation\n    if delta_color == 0.0:\n        saturation = 0.0\n    else:\n        saturation = delta_color / max_color\n    \n    # Calculate value\n    value = max_color\n    \n    # Convert hue, saturation, and value to floats\n    hue = float(hue) / 360.0\n    saturation = float(saturation)\n    value = float(value)\n    \n    # Return hsv color\n    return (hue, saturation, value)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color value to HSV color space and returns\n    the converted values. Conversion formula\n    HSV = [H, S, V]\n    H = 0 <= H <= 360\n    S = 0 <= S <= 1\n    V = 0 <= V <= 1\n    \"\"\"\n    # Calculate maximum and minimum values of R, G, and B\n    r_max, g_max, b_max = max(r, g, b), max(r, g, b), max(r, g, b)\n    r_min, g_min, b_min = min(r, g, b), min(r, g, b), min(r, g, b)\n    \n    # Calculate distance between maximum and minimum values\n    delta = r_max - r_min\n    \n    # Calculate S value\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (r_max + g_max + b_max)\n    \n    # Calculate V value\n    v = r_max / 255\n    \n    # Calculate H value\n    if r_max == r_min:\n        h = (g_max - b_max) / delta\n    elif g_max == r_min:\n        h = 2 + (b_max - r_max) / delta\n    elif b_max == r_min:\n        h = 4 + (r_max - g_max) / delta\n    \n    # Normalize H value to range 0 to 360\n    if h < 0:\n        h += 6\n    \n    # Convert H value to degrees\n    h = h * 60\n    \n    # Return HSV values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function takes three integer parameters r, g, and b and returns the HSV (hue, saturation, and value) color model representation of the input color.\n    \n    Input:\n    - r, g, b: integer values representing the red, green, and blue components of the input color.\n    \n    Output:\n    - h, s, v: three integer values representing the hue, saturation, and value components of the output color in the HSV color model.\n    \n    Note:\n    - The hue value is returned in the range 0 to 360 degrees.\n    - The saturation and value values are returned in the range 0 to 100.\n    \"\"\"\n    # Convert the RGB values to HSV values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n    if delta == 0:\n        h = s = v = 0\n    elif max_val == r:\n        h = (g - b) / delta % 6\n    elif max_val == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n    h = int(h * 60)\n    if h < 0:\n        h += 360\n    # Normalize the hue value\n    h = h % 360\n    # Calculate the saturation and value\n    if max_val == 0:\n        s = 0\n    else:\n        s = delta / max_val * 100\n    if max_val == r:\n        v = (g - b) / delta * 100\n    elif max_val == g:\n        v = (b - r) / delta * 100\n    else:\n        v = (r - g) / delta * 100\n    return (h, s, v)"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    This function converts an RGB color to HSV color model.\n    \n    Args:\n    r (int): Red color component (0 to 255)\n    g (int): Green color component (0 to 255)\n    b (int): Blue color component (0 to 255)\n    \n    Returns:\n    h (float): Hue value (0 to 360)\n    s (float): Saturation value (0 to 1)\n    v (float): Value value (0 to 1)\n    \"\"\"\n    \n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    s = 0 if delta == 0 else delta / max_value\n    \n    if max_value == r:\n        h = (g - b) / delta\n        if b > g:\n            h += 6\n        h *= 60\n    elif max_value == g:\n        h = (b - r) / delta + 2\n        h *= 60\n    else:\n        h = (r - g) / delta + 4\n        h *= 60\n    \n    return h, s, max_value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    \"\"\"\n    # Convert rgb to hsv\n    # First calculate max and min values\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    # Calculate difference between max and min values\n    diff = max_val - min_val\n    # Calculate hsv values\n    if max_val == 0:\n        h = 0\n    else:\n        h = (r + g + b) / (max_val * 3)\n    if max_val == r:\n        s = diff / (max_val + diff)\n    elif max_val == g:\n        s = (max_val - min_val) / (max_val + diff)\n    else:\n        s = (max_val - min_val) / (max_val + diff)\n    if max_val == 0:\n        v = 0\n    else:\n        v = max_val\n    # Convert hsv to decimal format\n    h = h * 60\n    s = s * 100\n    v = v * 100\n    # Return hsv values\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Convert R, G, and B to floats\n    r, g, b = float(r) / 255, float(g) / 255, float(b) / 255\n    \n    # Find the maximum and minimum values of R, G, and B\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    \n    # Find the distance between the maximum and minimum values\n    delta = max_val - min_val\n    \n    # If the maximum value is equal to zero, it means that the color is grey.\n    if max_val == 0:\n        h = 0\n        s = 0\n    # If the maximum value is equal to one, it means that the color is pure.\n    elif max_val == 1:\n        h = 0\n        s = 0\n    # If the color is not grey or pure, compute the hue and saturation.\n    else:\n        # Compute the hue\n        if r == max_val:\n            h = (g - b) / delta\n        elif g == max_val:\n            h = 2 + (b - r) / delta\n        else:\n            h = 4 + (r - g) / delta\n        \n        # If the hue is greater than 1, round it down to the nearest integer.\n        if h > 1:\n            h = 0\n        \n        # Compute the saturation\n        if delta == 0:\n            s = 0\n        else:\n            s = delta / max_val\n    \n    # Compute the value\n    v = max_val\n    \n    # Convert H, S, and V to percentages\n    h *= 100\n    s *= 100\n    v *= 100\n    \n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255, g / 255, b / 255\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n\n    h = 0\n    s = 0\n    v = cmax\n\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = ((g - b) / delta) % 6\n    elif cmax == g:\n        h = (b - r) / delta + 2\n    else:\n        h = (r - g) / delta + 4\n\n    h = h * 60\n    if h < 0:\n        h += 360\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / (1 - abs(2 * cmax - 1))\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Write a function to convert rgb color to hsv color.\n\n    The HSV color model is a color model that consists of an Hue (H), a Saturation (S) and a Value (V). \n    The hue can be thought of as the color's shape or colorfulness, ranging from 0 to 360 degrees.\n    The saturation can be thought of as the amount of color in the colorfulness or brightness of the color, \n    ranging from 0 to 1. The value can be thought of as the amount of brightness of the color, \n    ranging from 0 to 1.\n\n    The conversion formula for converting RGB to HSV is as follows:\n\n    H = (R + G + B) / 3\n\n    S = max(R, G, B) / min(R, G, B)\n\n    V = max(R, G, B)\n\n    The conversion formula for converting HSV to RGB is as follows:\n\n    R = (V * S * (max(max(H/60, 0), min(max(H/60, 0), 1) - min(max(H/60, 0), 1)) + min(max(H/60, 0), 1))) / 255\n\n    G = (V * S * (max(max(H/60, 2), min(max(H/60, 2), 3) - min(max(H/60, 2), 3)) + min(max(H/60, 2), 3))) / 255\n\n    B = (V * S * (max(max(H/60, 4), min(max(H/60, 4), 5) - min(max(H/60, 4), 5)) + min(max(H/60, 4), 5))) / 255\n\n    Note that the conversion formula for converting HSV to RGB is not an exact conversion. \n    It is just an approximation that provides a good approximation of the actual RGB color.\n\n    :param r: Red color value (0-255)\n    :param g: Green color value (0-255)\n    :param b: Blue color value (0-255)\n    :return: Hue value (0-360), Saturation value (0-1), and Value value (0-1)\n    \"\"\"\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    delta = max_val - min_val\n\n    if max_val == r:\n        h = (g - b) / delta\n        if b > g:\n            h += 6\n        h = h * 60\n    elif max_val == g:\n        h = (b - r) / delta + 2\n        h = h * 60\n    else:\n        h = (r - g) / delta + 4\n        h = h * 60\n\n    if delta == 0:\n        s = 0\n    else:\n        s = delta / max_val\n\n    v = max_val\n\n    return h, s, v"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    # Step 1\n    r = max(0, min(255, r))\n    g = max(0, min(255, g))\n    b = max(0, min(255, b))\n    \n    # Step 2\n    max_val = max(r, g, b)\n    min_val = min(r, g, b)\n    avg_val = (max_val + min_val) / 2\n    \n    # Step 3\n    variance = max(0, (max_val - min_val) / avg_val)\n    \n    # Step 4\n    if avg_val == 0:\n        saturation = 0\n    else:\n        saturation = variance / avg_val\n    \n    # Step 5\n    hue = 0\n    \n    if saturation == 0:\n        hue = 0\n    elif max_val == r:\n        hue = ((g - b) / variance) % 6\n    elif max_val == g:\n        hue = (b - r) / variance + 2\n    elif max_val == b:\n        hue = (r - g) / variance + 4\n    \n    hue = int(hue * 60)\n    \n    # Step 6\n    value = avg_val\n    \n    # Step 7\n    return hue, saturation, value"
    },
    {
        "number": 783,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    \"\"\"\n    Convert rgb color to hsv color.\n\n    :param r: Red component of the input color (0-255)\n    :param g: Green component of the input color (0-255)\n    :param b: Blue component of the input color (0-255)\n    :return: Hue (0-360), Saturation (0-1), Value (0-1)\n    \"\"\"\n\n    # Convert RGB to HSV\n    max_component = max(r, g, b)\n    min_component = min(r, g, b)\n\n    delta = max_component - min_component\n\n    if max_component == min_component:\n        hue = 0\n    else:\n        if max_component == r:\n            hue = (g - b) / delta\n        elif max_component == g:\n            hue = 2 + (b - r) / delta\n        else:\n            hue = 4 + (r - g) / delta\n\n        if hue < 0:\n            hue += 6\n\n        hue = round(hue * 60)\n\n    if max_component == 0:\n        saturation = 0\n    else:\n        saturation = delta / max_component\n\n    value = max_component\n\n    return hue, saturation, value"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def mul_even_odd(lst):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_num += num\n        else:\n            odd_num += num\n    return even_num * odd_num"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n            \n    return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    count = 0\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in list1:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n        count += 1\n    if even_count == 0:\n        return odd_product\n    elif odd_count == 0:\n        return even_product\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def mul_even_odd(lst):\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n\n    if even_count == 0 or odd_count == 0:\n        return 0\n    else:\n        return even_product * odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    Write a function to find the product of first even and odd number of a given list.\n    \"\"\"\n    even_count = 0\n    odd_count = 0\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n            even_product *= num\n        else:\n            odd_count += 1\n            odd_product *= num\n    if even_count > 0:\n        return even_product\n    else:\n        return odd_product"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list of integers as input and returns the product of the first even and the first odd number.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num % 2 == 0:\n            count += 1\n        elif num % 2!= 0:\n            count += 1\n    if count == 0:\n        return None\n    elif count == 1:\n        return None\n    elif count == 2:\n        return None\n    else:\n        return lst[0] * lst[1]"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def mul_even_odd(lst):\n    '''\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n    '''\n    even_count = 0\n    odd_count = 0\n    for num in lst:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > 0 and odd_count > 0:\n        return even_count * odd_count\n    else:\n        return 0"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    for num in list1:\n        if num % 2 == 0:\n            even_sum += num\n        else:\n            odd_sum += num\n    return even_sum * odd_sum"
    },
    {
        "number": 784,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    \n    for num in list1:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    return even_product * odd_product"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    \"\"\"\n    Write a function to convert tuple string to integer tuple.\n    \"\"\"\n    # Convert string to list of characters\n    char_list = list(test_str)\n    # Initialize empty list for integer tuple\n    int_list = []\n    # Loop through characters and convert each character to integer\n    for char in char_list:\n        int_list.append(int(char))\n    # Convert integer list to integer tuple\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into words using whitespace as the delimiter\n    words = test_str.split()\n\n    # Create a list to store the integer tuples\n    int_tuples = []\n\n    # Loop through each word in the list\n    for word in words:\n        # Check if the word is a tuple of integers separated by commas\n        if word.count(',') == 1:\n            # Split the word into a list of integers\n            int_list = [int(i) for i in word.split(',')]\n            # Convert the list into a tuple\n            int_tuple = tuple(int_list)\n            # Add the tuple to the list of integer tuples\n            int_tuples.append(int_tuple)\n\n    # Return the list of integer tuples\n    return int_tuples"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert the string to a list of strings\n    lst = list(test_str)\n    \n    # Initialize the integer list to store the converted integers\n    int_lst = []\n    \n    # Iterate over the list and convert each string to an integer\n    for i in range(len(lst)):\n        # Check if the current character is a digit\n        if lst[i].isdigit():\n            # Convert the current digit to an integer and append it to the integer list\n            int_lst.append(int(lst[i]))\n        else:\n            # If the current character is not a digit, add it to the integer list as is\n            int_lst.append(lst[i])\n            \n    # Convert the integer list to a tuple and return it\n    return tuple(int_lst)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    str_tuple = test_str.split(',')\n    int_tuple = tuple(int(i) for i in str_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string into a list of strings\n    str_list = test_str.split(',')\n    \n    # Initialize an empty integer tuple\n    int_tuple = ()\n    \n    # Convert each string in the list to an integer and append to the integer tuple\n    for i in str_list:\n        try:\n            int_tuple += (int(i),)\n        except ValueError:\n            continue\n    \n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_tuple = tuple(test_str)\n    int_tuple = tuple(int(x) for x in test_tuple)\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the input string by comma and space\n    tup_str = test_str.split(',')\n    \n    # Create a list to store the converted integers\n    int_list = []\n    \n    # Iterate over each element in the tuple string\n    for elem in tup_str:\n        # Convert the element to an integer and add it to the list\n        int_list.append(int(elem))\n    \n    # Convert the list of integers to a tuple and return it\n    return tuple(int_list)"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Convert string to list of strings\n    list_str = [str(x) for x in test_str]\n    # Convert string list to integer list\n    list_int = [int(x) for x in list_str]\n    # Convert integer list to tuple\n    tuple_int = tuple(list_int)\n    return tuple_int"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string into a list of strings\n    test_list = test_str.split(',')\n\n    # Convert each string to an integer and append to a new list\n    int_list = []\n    for item in test_list:\n        int_list.append(int(item))\n\n    # Convert the list to a tuple\n    int_tuple = tuple(int_list)\n\n    return int_tuple"
    },
    {
        "number": 785,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Split the string based on comma\n    tuple_str = test_str.split(',')\n    # Initialize an empty list to store the integers\n    int_list = []\n    # Loop through the elements of the tuple string\n    for elem in tuple_str:\n        # Convert the element to integer and append to the list\n        int_list.append(int(elem))\n    # Return the list as a tuple\n    return tuple(int_list)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index\n"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a) or a[idx]!= x:\n        idx = bisect.bisect_right(a, x)\n    return idx"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    i = bisect.bisect_right(a, x)\n    return i"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n\n    # Use binary search to find the right insertion point\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return the index of the right insertion point\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # initialize left and right boundaries of the search range\n    left, right = 0, len(a) - 1\n\n    # perform binary search to find the right insertion point\n    while left <= right:\n        mid = left + (right - left) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    # if value not found in sorted order, return index where it should be inserted\n    return left"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    index = bisect.bisect_right(a, x)\n    if index < len(a) and a[index] == x:\n        return index\n    else:\n        return bisect.bisect_left(a, x)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    \"\"\"\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    \"\"\"\n    # Find the index where x should be inserted.\n    i = bisect.bisect_left(a, x)\n    # If x is already in the list, return its index.\n    if i!= len(a) and a[i] == x:\n        return i\n    # If x is greater than all elements to the right of i,\n    # return the index of the last element plus 1.\n    elif i == len(a):\n        return i\n    else:\n        return i - 1"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Using binary search algorithm to find the right insertion point\n    # The idea is to find the point where the value to be inserted should be inserted.\n    # If the value is greater than the first element, then the insertion point should be on the right.\n    # If the value is equal to the first element, then the insertion point should be on the right.\n    # If the value is less than the first element, then the insertion point should be on the left.\n    # We can calculate the insertion point using the formula: index = last_index + 1 + (x - a[last_index])/(a[last_index + 1] - a[last_index])*(n - last_index - 1)\n    # where n is the length of the array a.\n    # Here we first calculate the last index of the array using bisect_right function from bisect module.\n    n = len(a)\n    last_index = bisect.bisect_right(a, x) - 1\n    # If the value is equal to the last element, then we return the last index.\n    if last_index == n - 1 and a[last_index] == x:\n        return last_index\n    # If the value is greater than the last element, then we return the last index + 1.\n    if a[last_index + 1] > x:\n        return last_index + 1\n    # If the value is between the first and last element, then we calculate the insertion point.\n    else:\n        index = last_index + 1 + (x - a[last_index])/(a[last_index + 1] - a[last_index])*(n - last_index - 1)\n        return int(index)"
    },
    {
        "number": 786,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import bisect\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    index = bisect.bisect_right(a, x)\n    return index if index < len(a) and a[index] == x else index - 1"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"a{1}b{3}\"\n    return bool(re.search(pattern, text))"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'\\ba(?=b{3})\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return \"No match found\""
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'\\ba\\w{3}\\b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = re.compile(r'a\\w{3}b')\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a{1}b{3}'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r\"ab{3}\"\n    result = re.findall(pattern, text)\n    return result"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'a.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b.*b"
    },
    {
        "number": 787,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_match_three(text):\n    pattern = r'a.*b{3}'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple(test_list + [test_str])\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Concatenate the two lists and convert them to a tuple\n    new_list = test_list + [test_str]\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = tuple((str(test_str),) + tuple(test_list))\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # Create a new list containing the given string\n    new_list = [test_str]\n    # Append the elements of the given list to the new list\n    new_list.extend(test_list)\n    # Convert the new list to a tuple\n    new_tuple = tuple(new_list)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    new_tup = (test_list, test_str)\n    return new_tup"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Write a function to create a new tuple from the given string and list.\n    \"\"\"\n    # Convert the list to a string\n    test_str = str(test_list)\n    # Split the string into a list of characters\n    test_list = list(test_str)\n    # Create a new tuple with the given list and string\n    new_tuple = tuple(test_list + test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    test_list (list): a list of integers.\n    test_str (str): a string of characters.\n\n    Returns:\n    tuple: a new tuple with the string and integers from the input lists.\n    \"\"\"\n\n    # Convert the list of integers to a tuple\n    test_list_tuple = tuple(test_list)\n\n    # Join the string and list tuple into a single tuple\n    new_tuple = (test_str, test_list_tuple)\n\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_list, test_str)\n    return new_tuple"
    },
    {
        "number": 788,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = (test_str, *test_list)\n    return new_tuple"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            count += 1\n        else:\n            break\n    return count == len(nums)//2"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def even_position(nums):\n    \"\"\"\n    Write a python function to check whether every even index contains even numbers of a given list.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            count = 0\n            for j in range(i+1, len(nums), 2):\n                if nums[j] % 2 == 0:\n                    count += 1\n                else:\n                    break\n            if count == 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        count = 0\n        for num in nums[i:]:\n            if num % 2 == 0:\n                count += 1\n            if count > 0:\n                break\n        if count == 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n        if i % 2 == 0 and (nums[i] % 2!= 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_count = 0\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            even_count += 1\n            if even_count > 1:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def even_position(nums):\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            count += 1\n            if count % 2!= 0:\n                return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if not all(nums[i:i+2] % 2 == 0):\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def even_position(nums):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 790,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if len(nums[i:i+2]) % 2!= 0:\n            return False\n    return True"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # initialize empty list to store non-tuple elements\n    non_tup_list = []\n    # loop through each element in the tuple\n    for elem in test_tup:\n        # if the element is a tuple, recursively call the function\n        if isinstance(elem, tuple):\n            non_tup_list.extend(remove_nested(elem))\n        else:\n            # otherwise, append the element to the non-tuple list\n            non_tup_list.append(elem)\n    # return the non-tuple list\n    return non_tup_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    new_list = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            for sub_item in item:\n                new_list.append(sub_item)\n        else:\n            new_list.append(item)\n    return new_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    flat_list = []\n    for tup in test_tup:\n        flat_list.extend(tup)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # loop through each element in the list\n    for i in range(len(test_tup)):\n        # check if the current element is a tuple\n        if isinstance(test_tup[i], tuple):\n            # if it is, remove it from the list using the remove() method\n            test_tup.remove(test_tup[i])\n        # check if the element is a list\n        elif isinstance(test_tup[i], list):\n            # if it is, recursively call the function on the list\n            remove_nested(test_tup[i])\n    # return the modified list\n    return test_tup"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for element in test_tup:\n        if isinstance(element, tuple):\n            result += remove_nested(element)\n        else:\n            result.append(element)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if type(item) == tuple:\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    # Initialize a list to store the non-tuple elements\n    non_tuple_list = []\n    # Iterate through the tuple elements\n    for element in test_tup:\n        # If the element is not a tuple, append it to the list\n        if not isinstance(element, tuple):\n            non_tuple_list.append(element)\n    # Return the list of non-tuple elements\n    return non_tuple_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = []\n    for item in test_tup:\n        if isinstance(item, tuple):\n            result.extend(remove_nested(item))\n        else:\n            result.append(item)\n    return result"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    \"\"\"\n    Write a function to remove tuples from the given tuple.\n    \"\"\"\n    flat_list = []\n    for item in test_tup:\n        if type(item)!= tuple:\n            flat_list.append(item)\n        else:\n            flat_list.extend(item)\n    return flat_list"
    },
    {
        "number": 791,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(x for tup in test_tup for x in tup)"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for item in input_list: \n        if isinstance(item, list): \n            count += 1 \n    return count "
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_list(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_list(input_list):\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 792,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item, list):\n            count += 1\n    return count"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i] > x:\n        i -= 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # initialize the last position to -1\n    last_pos = -1\n    # loop through the array and compare each element to the given value x\n    for i in range(len(arr)):\n        if arr[i] == x:\n            # if the element is found, update the last position\n            last_pos = i\n    # return the last position\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def last(arr, x):\n    \"\"\"\n    Write a python function to find the last position of an element in a sorted array.\n    \"\"\"\n    n = len(arr)\n    left = 0\n    right = n - 1\n    last_pos = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == x:\n            last_pos = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_pos"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes in a sorted array and an element x and returns the last position of that element in the array.\n\n    Args:\n    arr: A sorted array\n    x: An element to find the last position of\n\n    Returns:\n    The last position of the element x in the array or -1 if the element is not present in the array.\n    \"\"\"\n    # Find the index of the first element greater than or equal to x\n    index = bisect.bisect_left(arr, x)\n    \n    # If x is not in the array, return -1\n    if index == len(arr) or arr[index]!= x:\n        return -1\n    \n    # Otherwise, return the index of the last element equal to x\n    return index - 1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    while i >= 0 and arr[i]!= x:\n        i -= 1\n    if i < 0:\n        return None\n    else:\n        return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    # loop through the array and find the last index of x\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] == x:\n            return i\n    # if x is not found, return -1\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function takes a sorted array and an element x as input and returns the last position of x in the array.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return high"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def last(arr, x):\n    \"\"\"\n    This function finds the last position of an element in a sorted array.\n    \"\"\"\n    i = 0\n    while i < len(arr) - 1 and arr[i] >= x:\n        i += 1\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def last(arr, x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1]!= x:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"
    },
    {
        "number": 793,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def last(arr, x):\n    '''\n    This function takes an unsorted array and an element x as inputs and returns the last position of x in the array.\n    '''\n    # Find the first index where x is greater than or equal to the first element of the array\n    index = 0\n    while index < len(arr) and arr[index] < x:\n        index += 1\n    # If x is not present in the array, return -1\n    if index == len(arr):\n        return -1\n    # Find the last index where x is greater than the current element of the array\n    last_index = index\n    while last_index < len(arr) and arr[last_index] == x:\n        last_index += 1\n    return last_index - 1"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'(?<![ab])a.*b(?=[ab])')\n    match = pattern.search(text)\n    \n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a.*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'(?<=a)([^b]*)(?=b)'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(1)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef text_starta_endb(text):\n    pattern = r'a[^b]*b'\n    matches = re.findall(pattern, text)\n    return matches"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'\\ba\\S+b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group(0)\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    match = re.match(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n\n    pattern = r\"a[^b]*b\"\n    result = re.search(pattern, text)\n\n    if result:\n        print(\"Found a match!\")\n        print(\"Match:\", result.group(0))\n        print(\"Match at index:\", result.start())\n        print(\"End of match at index:\", result.end())\n    else:\n        print(\"No match found.\")"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a[^b]*b'\n    match = re.search(pattern, text)\n    if match:\n        return match.group()\n    else:\n        return None"
    },
    {
        "number": 794,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for value in dict.values():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def return_sum(dictionary):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dictionary.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict:\n        total += dict[i]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for item in dict:\n        sum += dict[item]\n    return sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for value in dict.values():\n        total_sum += value\n    return total_sum"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key, value in dict.items():\n        total += value\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict:\n        total += dict[item]\n    return total"
    },
    {
        "number": 796,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for item in dict.values():\n        total += item\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n    n (int): The range (l, r)\n\n    Returns:\n    int: The sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += i\n    return sum_odd"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l, r = int(input(\"Enter the lower limit: \")), int(input(\"Enter the upper limit: \"))\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    print(\"The sum of all odd natural numbers within the range\", l, \"and\", r, \"is\", sum)\n\nsum_odd(int(input(\"Enter the range l and r: \")))"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # Define the range\n    l = 1\n    r = n\n    \n    # Initialize the sum variable\n    sum = 0\n    \n    # Loop through the range and add up all odd numbers\n    for i in range(l, r+1, 2):\n        sum += i\n        \n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    l, r = 1, n\n    sum = 0\n    for i in range(l, r + 1, 2):\n        sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def sum_odd(l, r):\n    \"\"\"\n    This function takes in two arguments, l and r, which are lower and upper limits of the range.\n    It then calculates the sum of all odd natural numbers within the range using a for loop.\n    \"\"\"\n    sum = 0\n    for i in range(l, r+1):\n        if i % 2!= 0:\n            sum += i\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    total = 0\n    for i in range(2, n+1, 2):\n        total += i\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    total = 0\n\n    while l <= r:\n        total += l\n        l += 2\n\n    return total"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Negative values are not allowed.\")\n\n    if n == 0:\n        return 0\n\n    sum = 0\n    current_num = 1\n\n    while current_num <= n:\n        if current_num % 2!= 0:\n            sum += current_num\n        current_num += 1\n\n    return sum"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def sum_odd(n):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + sum_odd(n-2)"
    },
    {
        "number": 797,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def sum_odd(n):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    s = 0\n    for i in range(1, n+1, 2):\n        s += i\n    return s"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n\ndef sum_array(arr):\n    '''\n    Write a python function to find the sum of an array using the helper function.\n    '''\n    return _sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for num in arr:\n        total += num\n    return total"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n\n    sum = 0\n    for num in arr:\n        sum += num\n\n    return sum"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])"
    },
    {
        "number": 798,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def _sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # initialize sum to zero\n    sum = 0\n    # loop through the array\n    for num in arr:\n        # add each number to the sum\n        sum += num\n    # return the sum\n    return sum"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n    \n    Args:\n        n (int): number to rotate left\n        d (int): number of bits to rotate left\n    \n    Returns:\n        int: rotated number\n    \"\"\"\n    # Get the number of bits in the number\n    num_bits = len(bin(n)[2:])\n    \n    # Calculate the number of bits to rotate\n    rotate_bits = (d % num_bits) + num_bits\n    \n    # Rotate the bits\n    rotated = (n << rotate_bits) | (n >> (num_bits - rotate_bits))\n    \n    return rotated"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Extract the most significant d bits of n\n    most_significant_bits = n & ((1 << d) - 1)\n    # Extract the least significant bits of n\n    least_significant_bits = n >> d\n    # Shift the least significant bits to the left by d bits\n    shifted_least_significant_bits = least_significant_bits << d\n    # Return the most significant bits concatenated with the shifted least significant bits\n    return (most_significant_bits | shifted_least_significant_bits)"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n\n    # Convert binary number to decimal\n    decimal_number = int(n, 2)\n\n    # Left rotate the decimal number by d bits\n    rotated_decimal = (decimal_number << d) | (decimal_number >> (32 - d))\n\n    # Convert the rotated decimal number to binary and return it as a string\n    return bin(rotated_decimal)[2:]"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) | (n >> (32 - d))) & 0xFFFFFFFF\n\nn = 0x12345678\nd = 20\nrotated_n = left_rotate(n, d)\nprint(f\"Original number: {n:08X}\")\nprint(f\"Rotated number: {rotated_n:08X}\")"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    while d > 0:\n        n = n << 1\n        d -= 1\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def left_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # Convert the number to binary\n    bin_num = bin(n)[2:]\n    # Check if d is greater than the length of binary number\n    if d > len(bin_num):\n        # d is greater than the length of binary number, so we have to rotate the number to the left by d bits\n        n = (n << d) | (n >> (32-d))\n    else:\n        # d is less than or equal to the length of binary number, so we have to rotate the number to the right by d bits\n        n = (n >> d) | (n << (32-d))\n    # Convert the rotated number back to binary and convert it back to integer\n    rotated_num = int(bin(n)[2:], 2)\n    return rotated_num"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    # Calculate the number of bits to be rotated\n    num_bits = len(bin(n)[2:])\n    \n    # Check if d is greater than or equal to num_bits\n    if d >= num_bits:\n        return n\n    \n    # Calculate the number of bits to be shifted\n    shift_bits = num_bits - d\n    \n    # Calculate the mask\n    mask = 0xFFFFFFFF << shift_bits\n    \n    # Rotate the bits\n    rotated_bits = (n & mask) | (n & (~mask))\n    \n    return rotated_bits"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    d %= 32   # To handle the case when d is negative\n    return ((n << d) | (n >> (32 - d))) & 0xffffffff   # Rotate left by d bits, wrap around if d > 31"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def left_rotate(n, d):\n    \"\"\"\n    This function rotates left bits by d bits a given number.\n    \"\"\"\n    # convert the number to binary\n    binary_str = bin(n)[2:]\n    # pad the binary string with zeros to make it d bits long\n    padded_str = binary_str.zfill(d)\n    # reverse the order of the bits in the padded string\n    reversed_str = padded_str[::-1]\n    # convert the reversed string back to integer\n    rotated_n = int(reversed_str, 2)\n    return rotated_n"
    },
    {
        "number": 799,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def left_rotate(n,d):\n    \"\"\"\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    \"\"\"\n    return ((n << d) & 0xffffffff) | ((n >> (32 - d)) & 0xffffffff)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regex\n    text = re.sub(r'\\s+', '', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from a string.\n    \"\"\"\n    return re.sub(r'\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Remove all whitespaces using regular expressions\n    pattern = re.compile(r'\\s+')\n    text = pattern.sub('', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    This function takes a string as input and removes all whitespaces from it.\n    '''\n\n    # Use regular expressions to remove all whitespaces\n    text = re.sub(r'\\s+', '', text)\n\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # Define a regular expression pattern to match any whitespace character\n    pattern = re.compile(r'\\s+')\n    # Use the pattern to search for all occurrences of whitespace in the text\n    whitespace_matches = pattern.findall(text)\n    # Remove all whitespace matches from the text\n    for match in whitespace_matches:\n        text = text.replace(match, '')\n    # Return the updated text with all whitespace removed\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r'\\s+','', text).strip()"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    \"\"\"\n    This function takes a string as input and removes all whitespaces from it.\n    \"\"\"\n    # Remove all whitespaces from the string using regular expression\n    text = re.sub(r'\\s+','', text)\n    return text"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 800,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "import re\n\ndef remove_all_spaces(text):\n    '''\n    Remove all whitespaces from a string.\n    '''\n    # Use the regular expression '\\s+' to match one or more whitespace characters\n    # (including spaces, tabs, newlines, etc.)\n    return re.sub('\\s+', '', text)"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(min(x,y,z), max(x,y,z)+1):\n        if x == i or y == i or z == i:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x == y!= z:\n        count += 1\n    elif x!= y == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n\n    count = 0\n    for i in range(max(x, y, z), min(x, y, z) - 1, -1):\n        if x == i:\n            count += 1\n        elif y == i:\n            count += 1\n        elif z == i:\n            count += 1\n\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y and x == z:\n        count += 1\n    if y == x and y == z:\n        count += 1\n    if z == x and z == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, z+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def test_three_equal(x, y, z):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    for i in range(x, y+1):\n        if i == x or i == y or i == z:\n            count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == z and z == y:\n        count += 1\n    if y == x and x == z:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    count = 0\n    if x == y and y == z:\n        count += 1\n    if x == y and x == z:\n        count += 1\n    if x == z and x == y:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def test_three_equal(x, y, z):\n    count = 0\n    if x == y:\n        count += 1\n    if y == z:\n        count += 1\n    if z == x:\n        count += 1\n    return count"
    },
    {
        "number": 801,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def test_three_equal(x, y, z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    if y == z == x:\n        count += 1\n    if z == x == y:\n        count += 1\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def count_rotation(arr):\n    \"\"\"\n    Write a python function to count the number of rotations required to generate a sorted array. \n    https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    \"\"\"\n\n    n = len(arr)\n    # sort the given array\n    arr.sort()\n\n    # count the number of rotations required\n    count = 0\n    for i in range(n - 1):\n        if arr[i] < arr[i + 1]:\n            return count\n        if arr[i] > arr[i + 1]:\n            count += 1\n\n    # if the array is already sorted, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Traverse through all pairs of elements to check for rotations\n    for i in range(n):\n        for j in range(i+1, n):\n            # If the elements are not sorted, return the number of rotations required\n            if arr[i] > arr[j]:\n                return i - j + 1\n    # All elements are sorted, return 0\n    return 0"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    n = len(arr)   \n    # Find the smallest element in the array and make it the last element of the array.   \n    temp = arr[0]   \n    for i in range(1, n):   \n        if arr[i] < temp:   \n            temp = arr[i]   \n    arr[n-1] = temp   \n    # Find the largest element in the array and make it the first element of the array.   \n    temp = arr[n-1]   \n    for i in range(n-2, -1, -1):   \n        if arr[i] > temp:   \n            temp = arr[i]   \n    arr[0] = temp   \n    # If the array is already sorted then there is no rotation required.   \n    if arr == sorted(arr):   \n        return 0   \n    # Find the smallest element in the array and make it the last element of the array.   \n    temp = arr[0]   \n    for i in range(1, n):   \n        if arr[i] < temp:   \n            temp = arr[i]   \n    arr[n-1] = temp   \n    # Count the number of rotations required to generate the sorted array.   \n    count = 0   \n    while arr!= sorted(arr):   \n        count += 1   \n        # Find the smallest element in the array and make it the last element of the array.   \n        temp = arr[0]   \n        for i in range(1, n):   \n            if arr[i] < temp:   \n                temp = arr[i]   \n        arr[n-1] = temp   \n        # Find the largest element in the array and make it the first element of the array.   \n        temp = arr[n-1]   \n        for i in range(n-2, -1, -1):   \n            if arr[i] > temp:   \n                temp = arr[i]   \n        arr[0] = temp   \n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if i > 0 and arr[i] < arr[i-1]:\n            j = i\n            while j > 0 and arr[j] < arr[j-1]:\n                j -= 1\n            count += (i - j)\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    for i in range(n):\n        # find the first non-increasing element from the end of the array\n        j = n - 1\n        while j > i and arr[j] >= arr[i]:\n            j -= 1\n        if j == i:\n            count += n - i\n        else:\n            # find the last non-increasing element from the beginning of the array\n            k = 0\n            while k < j and arr[k] >= arr[i]:\n                k += 1\n            count += j - k\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # If array is already sorted, there is no rotation required\n    if arr == sorted(arr):\n        return 0\n\n    # Check for any single element array\n    if n == 1:\n        return 0\n\n    # Find the largest and smallest element in the array\n    max_element = arr[0]\n    min_element = arr[0]\n\n    for i in range(1, n):\n        if arr[i] > max_element:\n            max_element = arr[i]\n        elif arr[i] < min_element:\n            min_element = arr[i]\n\n    # If the array is already sorted in reverse order, there is no rotation required\n    if max_element == min_element:\n        return 0\n\n    # Initialize the count of rotations to 1\n    count = 1\n\n    # If the array is already sorted in ascending order, there is no rotation required\n    if min_element < max_element:\n        count = 0\n\n    # Iterate through the array and count the number of rotations required\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            count += 1\n            arr[0], arr[i] = arr[i], arr[0]\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    count = 0\n    \n    # Find minimum value\n    min_val = arr[0]\n    for i in range(1, n):\n        if arr[i] < min_val:\n            min_val = arr[i]\n    \n    # Check if array is already sorted\n    if min_val == arr[n-1]:\n        return count\n    \n    # Find the first occurrence of minimum value in the array\n    first_occ = arr.index(min_val)\n    \n    # Find the last occurrence of minimum value in the array\n    last_occ = arr.rindex(min_val)\n    \n    # Check if the array is already sorted\n    if first_occ == last_occ:\n        return count\n    \n    # Find the number of elements between the first and last occurrences\n    diff = last_occ - first_occ\n    \n    # Check if the number of elements is odd\n    if diff % 2 == 1:\n        return count + 1\n    \n    # Count number of rotations required\n    count += diff // 2\n    \n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n    # Find the minimum element in the array\n    min_element = min(arr)\n    # Initialize two variables to keep track of the maximum and minimum subarrays\n    max_subarray = [min_element]\n    min_subarray = [min_element]\n    # Initialize a variable to keep track of the count of rotations required\n    rotation_count = 0\n    # Iterate through the array starting from the minimum element\n    for i in range(1, n):\n        # If the current element is greater than the minimum element in the subarray\n        if arr[i] > min_subarray[-1]:\n            # Append the current element to the maximum subarray\n            max_subarray.append(arr[i])\n            # If the length of the maximum subarray is greater than the length of the minimum subarray\n            if len(max_subarray) > len(min_subarray):\n                # Append the minimum element from the maximum subarray to the minimum subarray\n                min_subarray.append(max_subarray.pop(0))\n                # Increment the rotation count\n                rotation_count += 1\n        # If the current element is less than or equal to the minimum element in the subarray\n        else:\n            # Append the current element to the minimum subarray\n            min_subarray.append(arr[i])\n            # If the length of the minimum subarray is greater than the length of the maximum subarray\n            if len(min_subarray) > len(max_subarray):\n                # Append the maximum element from the minimum subarray to the maximum subarray\n                max_subarray.append(min_subarray.pop(0))\n                # Increment the rotation count\n                rotation_count += 1\n    # Return the count of rotations required\n    return rotation_count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def count_rotation(arr):\n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    if n <= 1:\n        return 0\n\n    # counting rotations using bit manipulation\n    bit = 0\n    for i in range(n):\n        bit |= (1 << arr[i])\n    count = 0\n    while bit!= 0:\n        if bit & 1:\n            count += 1\n        bit >>= 1\n\n    return count"
    },
    {
        "number": 802,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def count_rotation(arr):\n    n = len(arr)\n\n    # Check if the array is already sorted or not\n    if arr == sorted(arr):\n        return 0\n\n    # Check if the array can be sorted using only one rotation\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            return 1\n\n    # Check if the array can be sorted using more than one rotation\n    for i in range(n - 1):\n        for j in range(i + 2, n):\n            if arr[i] > arr[j]:\n                return j - i\n\n    return -1"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(n ** 0.5)\n    if root * root == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # Check for base cases\n    if n < 2:\n        return True\n    elif n == 2:\n        return True\n    elif n == 3:\n        return True\n\n    # Check for prime factorization\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    x = n\n    y = n\n    while x!= y:\n        x = (x + y) // 2\n        y = (x + y) // 2\n    if x * x == n:\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_perfect_square(n):\n    '''\n    This function will check whether the given number is a perfect square or not. The function checks whether the square root of the given number is an integer or not. If it is an integer, it means that the given number is a perfect square.\n    \n    Input:\n    n: An integer\n    \n    Output:\n    True if the given number is a perfect square, False otherwise\n    \n    '''\n    \n    #Using the math module to calculate the square root of the given number\n    import math\n    sqrt_n = math.sqrt(n)\n    \n    #Checking whether the square root is an integer or not\n    if sqrt_n.is_integer():\n        return True\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Returns True if the given number is a perfect square else False.\n    \"\"\"\n    # First, check if n is a square number\n    i = 0\n    while i * i <= n:\n        i += 1\n    if i * i == n:\n        return True\n    # Check if n is a perfect cube\n    i = 0\n    while i * i * i <= n:\n        i += 1\n    if i * i * i == n:\n        return True\n    # If none of the above, n is not a perfect square\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_perfect_square(n):\n    \"\"\"\n    Write a function to check whether the given number is a perfect square or not.\n    \"\"\"\n    if n < 0:\n        return False\n    x = int(n ** 0.5) + 1\n    if x ** 2 == n:\n        return True\n    return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n\n    # find the square root of n\n    sqrt_n = n ** 0.5\n\n    # check whether the square root is an integer\n    if sqrt_n % 1 == 0:\n        # if it is an integer, then check whether the square root is equal to the given number\n        if sqrt_n == n:\n            return True\n        else:\n            return False\n    else:\n        return False"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    # Check if the number is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        return False\n\n    # Check if the number is a perfect square using the trial division method\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0:\n        return False\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "number": 803,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_perfect_square(n):\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    def isPerfectSquare(num):\n        sqrt_num = int(num ** 0.5)\n        return sqrt_num ** 2 == num\n    \n    if isPerfectSquare(n):\n        print(n, \"is a perfect square.\")\n    else:\n        print(n, \"is not a perfect square.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    \n    for num in arr:\n        product *= num\n        \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def is_product_even(arr):\n    \"\"\"\n    Write a function to check whether the product of numbers in a list is even or not.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        print(\"The product of the numbers is even.\")\n    else:\n        print(\"The product of the numbers is odd.\")"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def is_product_even(arr):\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    \n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def is_product_even(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n\n    # Initialize variables\n    product = 1\n    is_even = True\n\n    # Loop through the list\n    for num in arr:\n        # Check if the current number is even or odd\n        if num % 2 == 0:\n            # Multiply the product by the even number and set the even variable to False\n            product *= num\n            is_even = False\n        else:\n            # Multiply the product by the odd number\n            product *= num\n\n    # Check if the product is even or odd and return the result\n    if is_even:\n        return 'The product of even numbers in the list is even.'\n    else:\n        return 'The product of odd numbers in the list is even.'"
    },
    {
        "number": 804,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    if product % 2 == 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize variables to keep track of the maximum sum and its list\n    max_sum = 0\n    max_list = []\n\n    # Loop through each list in the lists list\n    for sublist in lists:\n        # Initialize variables to keep track of the current sum and the current sublist\n        current_sum = 0\n        current_sublist = sublist\n\n        # Loop through each element in the sublist\n        for element in current_sublist:\n            # Add the element to the current sum\n            current_sum += element\n\n        # If the current sum is greater than the current maximum sum, update the maximum sum and its list\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sublist\n\n    # Return the maximum sum list\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Get the maximum sum and the corresponding list of lists\n    max_sum = max([max(sum(lst), key=lst.index) for lst in lists])\n    max_lists = [lst for lst in lists if sum(lst) == max_sum]\n    # Return the list of lists with the highest sum\n    return max_lists"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Initialize the maximum sum and its list\n    max_sum = float('-inf')\n    max_list = None\n    # Loop through each list in the input list of lists\n    for lst in lists:\n        # Calculate the sum of the elements in the list\n        sum_lst = sum(lst)\n        # Check if the sum is higher than the current maximum sum\n        if sum_lst > max_sum:\n            # If it is, update the maximum sum and the corresponding list\n            max_sum = sum_lst\n            max_list = lst\n    # Return the list with the maximum sum\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            if i == j:\n                max_sum += lists[i][j]\n            elif i > j:\n                max_sum += lists[i][j]\n                max_list.append(lists[i][j])\n            else:\n                max_sum -= lists[i][j]\n                max_list.append(lists[i][j])\n    return max_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = sublist\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Find the sum of all elements in all lists\n    total_sum = sum(sum(lst) for lst in lists)\n    \n    # Initialize variables to store the maximum sum and the list\n    max_sum = 0\n    max_lst = []\n    \n    # Loop through all possible subsets of the lists and check if their sum is equal to the total sum\n    for i in range(1, len(lists)+1):\n        for subset in itertools.combinations(lists, i):\n            lst_sum = sum(subset)\n            if lst_sum == total_sum:\n                if lst_sum > max_sum:\n                    max_sum = lst_sum\n                    max_lst = subset\n    \n    # Return the list with the maximum sum\n    return max_lst"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # Create a set of all the sums of the lists\n    sum_set = set()\n    for list in lists:\n        sum_set.add(sum(list))\n    \n    # Find the highest sum\n    max_sum = max(sum_set)\n    \n    # Create a new list with only the lists that sum to the highest sum\n    result_list = []\n    for list in lists:\n        if sum(list) == max_sum:\n            result_list.append(list)\n    \n    # Return the result list\n    return result_list"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = float('-inf')\n    result = []\n    for sublist in lists:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            result = [sublist]\n        elif sublist_sum == max_sum:\n            result.append(sublist)\n    return result"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    # initialize the maximum sum to negative infinity\n    max_sum = float('-inf')\n\n    # iterate through each list in the list of lists\n    for i in range(len(lists)):\n        # initialize the current sum to 0\n        current_sum = 0\n\n        # iterate through each element in the list\n        for j in range(len(lists[i])):\n            # add the element to the current sum\n            current_sum += lists[i][j]\n\n        # compare the current sum to the maximum sum\n        if current_sum > max_sum:\n            # update the maximum sum\n            max_sum = current_sum\n\n    # return the list with the maximum sum\n    return [lists[i] for i in range(len(lists)) if lists[i] == max_sum]\n"
    },
    {
        "number": 805,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n\n    def find_max_sum_sublist(sublists):\n        '''\n        Recursive function to find the maximum sum sublist in a list of lists.\n        '''\n        if not sublists:\n            return []\n        else:\n            max_sum = sublists[0][0]\n            for sublist in sublists:\n                if sublist[0] > max_sum:\n                    max_sum = sublist[0]\n            return [max_sum] + find_max_sum_sublist(sublists[1:])\n\n    max_sum_sublists = find_max_sum_sublist(lists)\n    max_sum = max(max_sum_sublists)\n    return max_sum_sublists"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    upper_count = 0\n    upper_start = 0\n    max_run = 0\n\n    for i, char in enumerate(test_str):\n        if char.isupper():\n            upper_count += 1\n            if upper_count > max_run:\n                max_run = upper_count\n                upper_start = i - max_run + 1\n        else:\n            upper_count = 0\n\n    return test_str[upper_start:upper_start+max_run]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    run_length = 0\n    max_run = 0\n    uppercase_count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            uppercase_count += 1\n        else:\n            run_length = 0\n        if uppercase_count > max_run:\n            max_run = uppercase_count\n        if uppercase_count == 0 and test_str[i].isupper():\n            run_length += 1\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Initialize variables\n    max_run = 0\n    current_run = 0\n\n    # Iterate through the string\n    for char in test_str:\n        # If the current character is uppercase, increment the current run\n        if char.isupper():\n            current_run += 1\n        # If the current character is not uppercase, check if the current run is longer than the max run\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            # Reset the current run to 0\n            current_run = 0\n\n    # Check if the current run is longer than the max run\n    if current_run > max_run:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n\n    run_start = 0\n    run_end = 0\n    max_run = 0\n    current_run = 0\n\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            if current_run == 0:\n                run_start = i\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n                run_end = i\n        else:\n            current_run = 0\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    max_count = 0\n    max_start = 0\n    \n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            count = 0\n        \n        if count > max_count:\n            max_count = count\n            max_start = i\n            \n    return test_str[max_start:max_start+max_count]"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # initialize variables for tracking the current run and maximum run\n    current_run = 0\n    max_run = 0\n    # loop through the string and increment the current run if the current character is uppercase\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            current_run = 0\n        # if the current run is greater than the maximum run, update the maximum run\n        if current_run > max_run:\n            max_run = current_run\n    # return the maximum run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    # Initialize variables\n    max_run = 0\n    run_length = 0\n    uppercase_count = 0\n\n    # Iterate through each character in the string\n    for char in test_str:\n        # If the character is uppercase, increment the count\n        if char.isupper():\n            uppercase_count += 1\n        # If the character is not uppercase, reset the count and continue\n        else:\n            run_length = 0\n            uppercase_count = 0\n\n        # Update the maximum run if the current run is longer\n        if run_length > max_run:\n            max_run = run_length\n\n        # Update the run length and uppercase count for the next character\n        run_length += 1\n\n    # Return the maximum run\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    current_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            current_run += 1\n        else:\n            if current_run > max_run:\n                max_run = current_run\n            current_run = 0\n    if current_run > max_run:\n        max_run = current_run\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n    uppercase = False\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if not uppercase:\n                max_run = current_run\n                uppercase = True\n        else:\n            current_run = 0\n            if uppercase:\n                max_run = current_run\n                uppercase = False\n\n    if uppercase:\n        max_run = current_run\n\n    return max_run"
    },
    {
        "number": 806,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Convert the input string to lowercase\n    test_str = test_str.lower()\n    # Initialize variables\n    max_run = 0\n    run_start = 0\n    # Loop through the string and count the run of uppercase characters\n    for i in range(len(test_str)):\n        if test_str[i] == test_str[i+1].upper():\n            run_start = i\n        else:\n            max_run = max(max_run, i-run_start+1)\n    return max_run"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return \"There is no odd number in the given list.\""
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2 == 1:\n            return num"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    \"\"\"\n    Find the first odd number in a list of numbers.\n    \"\"\"\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 807,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    count = 0\n    for tup in test_tup:\n        if tup[0] == K:\n            count += 1\n    if count > 0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    if test_tup in K:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        print(f\"The tuple contains the number {K}.\")\n    else:\n        print(f\"The tuple does not contain the number {K}.\")"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    Write a function to check if the given tuples contain the k or not.\n    \"\"\"\n    count = 0\n    for tup in test_tup:\n        if K in tup:\n            count += 1\n    if count >= len(test_tup) // 2:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    \"\"\"\n    This function takes a tuple as input and a positive integer as an argument.\n    It checks if the given tuple contains the given integer value K or not.\n    If the tuple contains K, the function returns True, otherwise it returns False.\n    \"\"\"\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for tup in test_tup:\n        if tup[0] == K:\n            return True\n    return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    This function takes in a tuple and a value K and checks if the tuple contains the value K.\n    If it does, it returns True, otherwise it returns False.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False"
    },
    {
        "number": 808,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    for tup in test_tup:\n        if tup == K:\n            return True\n    return False"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup2[i] > test_tup1[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths do not match.\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Error: Tuples must have the same length.\")\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                print(\"Error: First tuple is not smaller than second tuple.\")\n                return False\n        else:\n            return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    if len(test_tup1)!= len(test_tup2):\n        print(\"Both tuples must have the same length.\")\n        return None\n\n    for i in range(len(test_tup1)):\n        if test_tup1[i] >= test_tup2[i]:\n            print(\"Element in the second tuple is not smaller than its corresponding element in the first tuple.\")\n            return None\n        elif test_tup1[i] < test_tup2[i]:\n            print(\"Element in the first tuple is smaller than its corresponding element in the second tuple.\")\n            return None\n    else:\n        print(\"All elements in both tuples are smaller than or equal to their corresponding elements in the other tuple.\")\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n        return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # loop through the elements of the second tuple and check if they are smaller than their corresponding element in the first tuple\n    for i in range(len(test_tup2)):\n        if test_tup2[i] < test_tup1[i]:\n            return False\n    # if no element is smaller, return True\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError('Length of two tuples must match')\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True"
    },
    {
        "number": 809,
        "checkpoint": "3B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n\n    # Check if the length of the tuples is equal\n    if len(test_tup1)!= len(test_tup2):\n        print(\"The tuples must have the same length.\")\n        return False\n\n    # Compare the elements of the tuples\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            print(f\"{test_tup1[i]} is greater than {test_tup2[i]}.\")\n            return False\n\n    # If all elements are smaller, return True\n    return True"
    }
]